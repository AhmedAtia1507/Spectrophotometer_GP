
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000065c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800078c  0800078c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800078c  0800078c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800078c  0800078c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800078c  0800078c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800078c  0800078c  0001078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000798  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000798  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b4f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000337  00000000  00000000  00020b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000100  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00020fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000118a  00000000  00000000  00021070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000067d  00000000  00000000  000221fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005351  00000000  00000000  00022877  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00027bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002a4  00000000  00000000  00027c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000774 	.word	0x08000774

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000774 	.word	0x08000774

08000170 <MGPIO_u8SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_u8SetPinMode(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinMode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	73fb      	strb	r3, [r7, #15]

    switch(Copy_u8PortID)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d040      	beq.n	800020e <MGPIO_u8SetPinMode+0x9e>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d079      	beq.n	8000284 <MGPIO_u8SetPinMode+0x114>
 8000190:	2b00      	cmp	r3, #0
 8000192:	f040 80b2 	bne.w	80002fa <MGPIO_u8SetPinMode+0x18a>
    {
        case GPIO_PORTA:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d819      	bhi.n	80001d0 <MGPIO_u8SetPinMode+0x60>
            {
                GPIOA_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 800019c:	4b5e      	ldr	r3, [pc, #376]	; (8000318 <MGPIO_u8SetPinMode+0x1a8>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	79ba      	ldrb	r2, [r7, #6]
 80001a2:	0092      	lsls	r2, r2, #2
 80001a4:	210f      	movs	r1, #15
 80001a6:	fa01 f202 	lsl.w	r2, r1, r2
 80001aa:	43d2      	mvns	r2, r2
 80001ac:	4611      	mov	r1, r2
 80001ae:	4a5a      	ldr	r2, [pc, #360]	; (8000318 <MGPIO_u8SetPinMode+0x1a8>)
 80001b0:	400b      	ands	r3, r1
 80001b2:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80001b4:	4b58      	ldr	r3, [pc, #352]	; (8000318 <MGPIO_u8SetPinMode+0x1a8>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	7979      	ldrb	r1, [r7, #5]
 80001ba:	79ba      	ldrb	r2, [r7, #6]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	fa01 f202 	lsl.w	r2, r1, r2
 80001c2:	4611      	mov	r1, r2
 80001c4:	4a54      	ldr	r2, [pc, #336]	; (8000318 <MGPIO_u8SetPinMode+0x1a8>)
 80001c6:	430b      	orrs	r3, r1
 80001c8:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80001ca:	2301      	movs	r3, #1
 80001cc:	73fb      	strb	r3, [r7, #15]
            {
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80001ce:	e097      	b.n	8000300 <MGPIO_u8SetPinMode+0x190>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	2b0f      	cmp	r3, #15
 80001d4:	f200 8094 	bhi.w	8000300 <MGPIO_u8SetPinMode+0x190>
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80001d8:	4b50      	ldr	r3, [pc, #320]	; (800031c <MGPIO_u8SetPinMode+0x1ac>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	79ba      	ldrb	r2, [r7, #6]
 80001de:	3a08      	subs	r2, #8
 80001e0:	0092      	lsls	r2, r2, #2
 80001e2:	210f      	movs	r1, #15
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	43d2      	mvns	r2, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a4b      	ldr	r2, [pc, #300]	; (800031c <MGPIO_u8SetPinMode+0x1ac>)
 80001ee:	400b      	ands	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80001f2:	4b4a      	ldr	r3, [pc, #296]	; (800031c <MGPIO_u8SetPinMode+0x1ac>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	7979      	ldrb	r1, [r7, #5]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	3a08      	subs	r2, #8
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	4611      	mov	r1, r2
 8000202:	4a46      	ldr	r2, [pc, #280]	; (800031c <MGPIO_u8SetPinMode+0x1ac>)
 8000204:	430b      	orrs	r3, r1
 8000206:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000208:	2301      	movs	r3, #1
 800020a:	73fb      	strb	r3, [r7, #15]
            break;
 800020c:	e078      	b.n	8000300 <MGPIO_u8SetPinMode+0x190>
        }
        case GPIO_PORTB:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 800020e:	79bb      	ldrb	r3, [r7, #6]
 8000210:	2b07      	cmp	r3, #7
 8000212:	d819      	bhi.n	8000248 <MGPIO_u8SetPinMode+0xd8>
            {
                GPIOB_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 8000214:	4b42      	ldr	r3, [pc, #264]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	79ba      	ldrb	r2, [r7, #6]
 800021a:	0092      	lsls	r2, r2, #2
 800021c:	210f      	movs	r1, #15
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	43d2      	mvns	r2, r2
 8000224:	4611      	mov	r1, r2
 8000226:	4a3e      	ldr	r2, [pc, #248]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 8000228:	400b      	ands	r3, r1
 800022a:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 800022c:	4b3c      	ldr	r3, [pc, #240]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	7979      	ldrb	r1, [r7, #5]
 8000232:	79ba      	ldrb	r2, [r7, #6]
 8000234:	0092      	lsls	r2, r2, #2
 8000236:	fa01 f202 	lsl.w	r2, r1, r2
 800023a:	4611      	mov	r1, r2
 800023c:	4a38      	ldr	r2, [pc, #224]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 800023e:	430b      	orrs	r3, r1
 8000240:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000242:	2301      	movs	r3, #1
 8000244:	73fb      	strb	r3, [r7, #15]
            {
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOB_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 8000246:	e05d      	b.n	8000304 <MGPIO_u8SetPinMode+0x194>
            else if(Copy_u8PinID <= GPIO_PIN15)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b0f      	cmp	r3, #15
 800024c:	d85a      	bhi.n	8000304 <MGPIO_u8SetPinMode+0x194>
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 800024e:	4b35      	ldr	r3, [pc, #212]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	3a08      	subs	r2, #8
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	210f      	movs	r1, #15
 800025a:	fa01 f202 	lsl.w	r2, r1, r2
 800025e:	43d2      	mvns	r2, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a30      	ldr	r2, [pc, #192]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 8000264:	400b      	ands	r3, r1
 8000266:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	7979      	ldrb	r1, [r7, #5]
 800026e:	79ba      	ldrb	r2, [r7, #6]
 8000270:	3a08      	subs	r2, #8
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 800027a:	430b      	orrs	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
            break;
 8000282:	e03f      	b.n	8000304 <MGPIO_u8SetPinMode+0x194>
        }
        case GPIO_PORTC:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	2b07      	cmp	r3, #7
 8000288:	d819      	bhi.n	80002be <MGPIO_u8SetPinMode+0x14e>
            {
                GPIOC_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	79ba      	ldrb	r2, [r7, #6]
 8000290:	0092      	lsls	r2, r2, #2
 8000292:	210f      	movs	r1, #15
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	43d2      	mvns	r2, r2
 800029a:	4611      	mov	r1, r2
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 800029e:	400b      	ands	r3, r1
 80002a0:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80002a2:	4b21      	ldr	r3, [pc, #132]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	7979      	ldrb	r1, [r7, #5]
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	0092      	lsls	r2, r2, #2
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	4611      	mov	r1, r2
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 80002b4:	430b      	orrs	r3, r1
 80002b6:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]

                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80002bc:	e024      	b.n	8000308 <MGPIO_u8SetPinMode+0x198>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	2b0f      	cmp	r3, #15
 80002c2:	d821      	bhi.n	8000308 <MGPIO_u8SetPinMode+0x198>
                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	79ba      	ldrb	r2, [r7, #6]
 80002ca:	3a08      	subs	r2, #8
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	7979      	ldrb	r1, [r7, #5]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	3a08      	subs	r2, #8
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0f      	ldr	r2, [pc, #60]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80002f4:	2301      	movs	r3, #1
 80002f6:	73fb      	strb	r3, [r7, #15]
            break;
 80002f8:	e006      	b.n	8000308 <MGPIO_u8SetPinMode+0x198>
        }
        default:
        {
            Loc_u8FuncStatus = E_NOT_OK;
 80002fa:	2300      	movs	r3, #0
 80002fc:	73fb      	strb	r3, [r7, #15]
            break;
 80002fe:	e004      	b.n	800030a <MGPIO_u8SetPinMode+0x19a>
            break;
 8000300:	bf00      	nop
 8000302:	e002      	b.n	800030a <MGPIO_u8SetPinMode+0x19a>
            break;
 8000304:	bf00      	nop
 8000306:	e000      	b.n	800030a <MGPIO_u8SetPinMode+0x19a>
            break;
 8000308:	bf00      	nop
        }
    }
    return Loc_u8FuncStatus;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40010800 	.word	0x40010800
 800031c:	40010804 	.word	0x40010804
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40010c04 	.word	0x40010c04
 8000328:	40011000 	.word	0x40011000
 800032c:	40011004 	.word	0x40011004

08000330 <MGPIO_u8SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_u8SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
 800033a:	460b      	mov	r3, r1
 800033c:	71bb      	strb	r3, [r7, #6]
 800033e:	4613      	mov	r3, r2
 8000340:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 8000342:	2300      	movs	r3, #0
 8000344:	73fb      	strb	r3, [r7, #15]
    if((Copy_u8PortID <= GPIO_PORTC) && (Copy_u8PinID <= GPIO_PIN15))
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d879      	bhi.n	8000440 <MGPIO_u8SetPinValue+0x110>
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b0f      	cmp	r3, #15
 8000350:	d876      	bhi.n	8000440 <MGPIO_u8SetPinValue+0x110>
    {
        switch (Copy_u8PortID)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d027      	beq.n	80003a8 <MGPIO_u8SetPinValue+0x78>
 8000358:	2b02      	cmp	r3, #2
 800035a:	d049      	beq.n	80003f0 <MGPIO_u8SetPinValue+0xc0>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d16b      	bne.n	8000438 <MGPIO_u8SetPinValue+0x108>
        {
            case GPIO_PORTA:
            {
                if(Copy_u8PinValue == GPIO_HIGH)
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d10c      	bne.n	8000380 <MGPIO_u8SetPinValue+0x50>
                {
                    SET_BIT(GPIOA_ODR, Copy_u8PinID);
 8000366:	4b3a      	ldr	r3, [pc, #232]	; (8000450 <MGPIO_u8SetPinValue+0x120>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	79ba      	ldrb	r2, [r7, #6]
 800036c:	2101      	movs	r1, #1
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	4611      	mov	r1, r2
 8000374:	4a36      	ldr	r2, [pc, #216]	; (8000450 <MGPIO_u8SetPinValue+0x120>)
 8000376:	430b      	orrs	r3, r1
 8000378:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 800037a:	2301      	movs	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_u8FuncStatus = E_NOT_OK;
                }
                break;
 800037e:	e05e      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                else if(Copy_u8PinValue == GPIO_LOW)
 8000380:	797b      	ldrb	r3, [r7, #5]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d10d      	bne.n	80003a2 <MGPIO_u8SetPinValue+0x72>
                    CLR_BIT(GPIOA_ODR, Copy_u8PinID);
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <MGPIO_u8SetPinValue+0x120>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	79ba      	ldrb	r2, [r7, #6]
 800038c:	2101      	movs	r1, #1
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a2e      	ldr	r2, [pc, #184]	; (8000450 <MGPIO_u8SetPinValue+0x120>)
 8000398:	400b      	ands	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
                break;
 80003a0:	e04d      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                    Loc_u8FuncStatus = E_NOT_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
                break;
 80003a6:	e04a      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
            }
            case GPIO_PORTB:
            {
                if(Copy_u8PinValue == GPIO_HIGH)
 80003a8:	797b      	ldrb	r3, [r7, #5]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d10c      	bne.n	80003c8 <MGPIO_u8SetPinValue+0x98>
                {
                    SET_BIT(GPIOB_ODR, Copy_u8PinID);
 80003ae:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MGPIO_u8SetPinValue+0x124>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	79ba      	ldrb	r2, [r7, #6]
 80003b4:	2101      	movs	r1, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a25      	ldr	r2, [pc, #148]	; (8000454 <MGPIO_u8SetPinValue+0x124>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 80003c2:	2301      	movs	r3, #1
 80003c4:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_u8FuncStatus = E_NOT_OK;
                }
                break;
 80003c6:	e03a      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                else if(Copy_u8PinValue == GPIO_LOW)
 80003c8:	797b      	ldrb	r3, [r7, #5]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d10d      	bne.n	80003ea <MGPIO_u8SetPinValue+0xba>
                    CLR_BIT(GPIOB_ODR, Copy_u8PinID);
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MGPIO_u8SetPinValue+0x124>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <MGPIO_u8SetPinValue+0x124>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 80003e4:	2301      	movs	r3, #1
 80003e6:	73fb      	strb	r3, [r7, #15]
                break;
 80003e8:	e029      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                    Loc_u8FuncStatus = E_NOT_OK;
 80003ea:	2300      	movs	r3, #0
 80003ec:	73fb      	strb	r3, [r7, #15]
                break;
 80003ee:	e026      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
            }
            case GPIO_PORTC:
            {
                if(Copy_u8PinValue == GPIO_HIGH)
 80003f0:	797b      	ldrb	r3, [r7, #5]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d10c      	bne.n	8000410 <MGPIO_u8SetPinValue+0xe0>
                {
                    SET_BIT(GPIOC_ODR, Copy_u8PinID);
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MGPIO_u8SetPinValue+0x128>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	2101      	movs	r1, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <MGPIO_u8SetPinValue+0x128>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 800040a:	2301      	movs	r3, #1
 800040c:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_u8FuncStatus = E_NOT_OK;
                }
                break;
 800040e:	e016      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                else if(Copy_u8PinValue == GPIO_LOW)
 8000410:	797b      	ldrb	r3, [r7, #5]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d10d      	bne.n	8000432 <MGPIO_u8SetPinValue+0x102>
                    CLR_BIT(GPIOC_ODR, Copy_u8PinID);
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MGPIO_u8SetPinValue+0x128>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	79ba      	ldrb	r2, [r7, #6]
 800041c:	2101      	movs	r1, #1
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	43d2      	mvns	r2, r2
 8000424:	4611      	mov	r1, r2
 8000426:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <MGPIO_u8SetPinValue+0x128>)
 8000428:	400b      	ands	r3, r1
 800042a:	6013      	str	r3, [r2, #0]
                    Loc_u8FuncStatus = E_OK;
 800042c:	2301      	movs	r3, #1
 800042e:	73fb      	strb	r3, [r7, #15]
                break;
 8000430:	e005      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
                    Loc_u8FuncStatus = E_NOT_OK;
 8000432:	2300      	movs	r3, #0
 8000434:	73fb      	strb	r3, [r7, #15]
                break;
 8000436:	e002      	b.n	800043e <MGPIO_u8SetPinValue+0x10e>
            }
            default:
            {
                Loc_u8FuncStatus = E_NOT_OK;
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
                break;
 800043c:	bf00      	nop
            }
        }
    }
 800043e:	e001      	b.n	8000444 <MGPIO_u8SetPinValue+0x114>
    else
    {
        Loc_u8FuncStatus = E_NOT_OK;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_u8FuncStatus;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	4001080c 	.word	0x4001080c
 8000454:	40010c0c 	.word	0x40010c0c
 8000458:	4001100c 	.word	0x4001100c

0800045c <MNVIC_u8EnableInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK: Peripheral Interrupt is enabled successfully
 * @retval E_NOT_OK: Peripheral Interrupt is not enabled 
 */
Std_ReturnType MNVIC_u8EnableInterrupt(NVIC_InterruptType Copy_u32InterruptNumber)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 8000466:	2300      	movs	r3, #0
 8000468:	73fb      	strb	r3, [r7, #15]
    if(Copy_u32InterruptNumber < 32)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b1f      	cmp	r3, #31
 800046e:	d80c      	bhi.n	800048a <MNVIC_u8EnableInterrupt+0x2e>
    {
        SET_BIT((NVIC -> ISER[0]), Copy_u32InterruptNumber);
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MNVIC_u8EnableInterrupt+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79fa      	ldrb	r2, [r7, #7]
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <MNVIC_u8EnableInterrupt+0x64>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
        Loc_u8FuncStatus = E_OK;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e014      	b.n	80004b4 <MNVIC_u8EnableInterrupt+0x58>
    }
    else if(Copy_u32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b3b      	cmp	r3, #59	; 0x3b
 800048e:	d80f      	bhi.n	80004b0 <MNVIC_u8EnableInterrupt+0x54>
    {
        Copy_u32InterruptNumber -= 32;
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	3b20      	subs	r3, #32
 8000494:	71fb      	strb	r3, [r7, #7]
        SET_BIT((NVIC -> ISER[1]), Copy_u32InterruptNumber);
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MNVIC_u8EnableInterrupt+0x64>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	2101      	movs	r1, #1
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <MNVIC_u8EnableInterrupt+0x64>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6053      	str	r3, [r2, #4]
        Loc_u8FuncStatus = E_OK;
 80004aa:	2301      	movs	r3, #1
 80004ac:	73fb      	strb	r3, [r7, #15]
 80004ae:	e001      	b.n	80004b4 <MNVIC_u8EnableInterrupt+0x58>
    }
    else
    {
        Loc_u8FuncStatus = E_NOT_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_u8FuncStatus;
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	e000e100 	.word	0xe000e100

080004c4 <MRCC_u8InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_u8InitClock(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_HSI_CLOCK
        //Enable High-Speed Internal Clock
        SET_BIT(RCC_CR, RCC_CR_HSION);
 80004c8:	4b25      	ldr	r3, [pc, #148]	; (8000560 <MRCC_u8InitClock+0x9c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a24      	ldr	r2, [pc, #144]	; (8000560 <MRCC_u8InitClock+0x9c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
        //Wait until HSI Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_HSIRDY) == 0);
 80004d4:	bf00      	nop
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MRCC_u8InitClock+0x9c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	085b      	lsrs	r3, r3, #1
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f8      	beq.n	80004d6 <MRCC_u8InitClock+0x12>

        //Set System Clock Source to be HSI Clock
        CLR_BIT(RCC_CFGR, RCC_CFGR_SW_START);
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MRCC_u8InitClock+0xa0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <MRCC_u8InitClock+0xa0>)
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
        CLR_BIT(RCC_CFGR, (RCC_CFGR_SW_START + 1));
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MRCC_u8InitClock+0xa0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MRCC_u8InitClock+0xa0>)
 80004f6:	f023 0302 	bic.w	r3, r3, #2
 80004fa:	6013      	str	r3, [r2, #0]

        //Enable Phase-locked loop Clock
        SET_BIT(RCC_CR, RCC_CR_PLLON);
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MRCC_u8InitClock+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MRCC_u8InitClock+0x9c>)
 8000502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000506:	6013      	str	r3, [r2, #0]
        //Wait until PLL Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_PLLRDY) == 0);
 8000508:	bf00      	nop
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MRCC_u8InitClock+0x9c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0e5b      	lsrs	r3, r3, #25
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f8      	beq.n	800050a <MRCC_u8InitClock+0x46>

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    RCC_CFGR &= ~(((u32)0b1111) << (RCC_CFGR_HPRE_START));
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800051e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000522:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_HPRE_START));
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE1_START));
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000532:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000536:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE1_START));
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE2_START));
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000546:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800054a:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE2_START));
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MRCC_u8InitClock+0xa0>)
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <MRCC_u8InitClock+0xa0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	6013      	str	r3, [r2, #0]
    return E_OK;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40021004 	.word	0x40021004

08000568 <MRCC_u8EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_u8EnablePeripheralClock(u8 Copy_u8BusID, u8 Copy_u8Peripheral)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_u8ErrorCheck = E_NOT_OK;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
    switch(Copy_u8BusID)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d010      	beq.n	80005a4 <MRCC_u8EnablePeripheralClock+0x3c>
 8000582:	2b03      	cmp	r3, #3
 8000584:	d01b      	beq.n	80005be <MRCC_u8EnablePeripheralClock+0x56>
 8000586:	2b01      	cmp	r3, #1
 8000588:	d126      	bne.n	80005d8 <MRCC_u8EnablePeripheralClock+0x70>
    {
        case RCC_AHB:
        {
            SET_BIT(RCC_AHBENR, Copy_u8Peripheral);
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MRCC_u8EnablePeripheralClock+0x84>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <MRCC_u8EnablePeripheralClock+0x84>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 800059e:	2301      	movs	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
            break;
 80005a2:	e01c      	b.n	80005de <MRCC_u8EnablePeripheralClock+0x76>
        }
        case RCC_APB1:
        {
            SET_BIT(RCC_APB1ENR, Copy_u8Peripheral);
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MRCC_u8EnablePeripheralClock+0x88>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MRCC_u8EnablePeripheralClock+0x88>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 80005b8:	2301      	movs	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
            break;
 80005bc:	e00f      	b.n	80005de <MRCC_u8EnablePeripheralClock+0x76>
        }
        case RCC_APB2:
        {
            SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MRCC_u8EnablePeripheralClock+0x8c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <MRCC_u8EnablePeripheralClock+0x8c>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
            break;
 80005d6:	e002      	b.n	80005de <MRCC_u8EnablePeripheralClock+0x76>
        }
        default:
        {
            Loc_u8ErrorCheck = E_NOT_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
            break;
 80005dc:	bf00      	nop
        }
    }
    return Loc_u8ErrorCheck;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021014 	.word	0x40021014
 80005f0:	4002101c 	.word	0x4002101c
 80005f4:	40021018 	.word	0x40021018

080005f8 <main>:

int i = 1;
int interrupt_flag = 0;

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
//		for(i = 0; i < 2000; i++);
//		MGPIO_u8SetPinValue(GPIO_PORTA, GPIO_PIN0, 0);
//		for(i = 0; i < 2000; i++);
//	}

	MRCC_u8InitClock();
 80005fc:	f7ff ff62 	bl	80004c4 <MRCC_u8InitClock>
	MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_TIM2_EN);
 8000600:	2100      	movs	r1, #0
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff ffb0 	bl	8000568 <MRCC_u8EnablePeripheralClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_IOPA_EN);
 8000608:	2102      	movs	r1, #2
 800060a:	2003      	movs	r0, #3
 800060c:	f7ff ffac 	bl	8000568 <MRCC_u8EnablePeripheralClock>
	MGPIO_u8SetPinMode(GPIO_PORTA, GPIO_PIN0, GPIO_OUTPUT_PUSH_PULL_2MHZ);
 8000610:	2202      	movs	r2, #2
 8000612:	2100      	movs	r1, #0
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fdab 	bl	8000170 <MGPIO_u8SetPinMode>
	MNVIC_u8EnableInterrupt(NVIC_TIM2);
 800061a:	201c      	movs	r0, #28
 800061c:	f7ff ff1e 	bl	800045c <MNVIC_u8EnableInterrupt>
	TIM2->PSC = 1;				// prescaller = 2
 8000620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000624:	2201      	movs	r2, #1
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->DIER |= (1<<0);		// UIE enabled
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	60d3      	str	r3, [r2, #12]
	TIM2->ARR = 4000;
 8000638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_flag = 0;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;						// counter value = 0;
 8000648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= (1 << 0);				// CEN = 1 counter enable
 8000650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
	MGPIO_u8SetPinValue(GPIO_PORTA, GPIO_PIN0, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff fe63 	bl	8000330 <MGPIO_u8SetPinValue>
	while(!interrupt_flag);
 800066a:	bf00      	nop
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0xac>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0fb      	beq.n	800066c <main+0x74>
	TIM2->CR1 &= ~(1<<0);				// CEN = 0 counter disable
 8000674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]

	while(1)
	{

		if(i == 0)
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0xb0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <main+0xa0>
		{
			i++;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <main+0xb0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <main+0xb0>)
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	e7f5      	b.n	8000684 <main+0x8c>
		}
		else
		{
			i--;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <main+0xb0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a02      	ldr	r2, [pc, #8]	; (80006a8 <main+0xb0>)
 80006a0:	6013      	str	r3, [r2, #0]
		if(i == 0)
 80006a2:	e7ef      	b.n	8000684 <main+0x8c>
 80006a4:	20000020 	.word	0x20000020
 80006a8:	20000000 	.word	0x20000000

080006ac <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	interrupt_flag = 1;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <TIM2_IRQHandler+0x28>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
	MGPIO_u8SetPinValue(GPIO_PORTA, GPIO_PIN0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fe38 	bl	8000330 <MGPIO_u8SetPinValue>
	TIM2->SR &= ~(1<<0);		// clear UIF flag bit;
 80006c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	6113      	str	r3, [r2, #16]
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000020 	.word	0x20000020

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000706:	f000 f811 	bl	800072c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff ff75 	bl	80005f8 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800071c:	08000794 	.word	0x08000794
  ldr r2, =_sbss
 8000720:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000724:	20000024 	.word	0x20000024

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <__libc_init_array>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	2500      	movs	r5, #0
 8000730:	4e0c      	ldr	r6, [pc, #48]	; (8000764 <__libc_init_array+0x38>)
 8000732:	4c0d      	ldr	r4, [pc, #52]	; (8000768 <__libc_init_array+0x3c>)
 8000734:	1ba4      	subs	r4, r4, r6
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	42a5      	cmp	r5, r4
 800073a:	d109      	bne.n	8000750 <__libc_init_array+0x24>
 800073c:	f000 f81a 	bl	8000774 <_init>
 8000740:	2500      	movs	r5, #0
 8000742:	4e0a      	ldr	r6, [pc, #40]	; (800076c <__libc_init_array+0x40>)
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <__libc_init_array+0x44>)
 8000746:	1ba4      	subs	r4, r4, r6
 8000748:	10a4      	asrs	r4, r4, #2
 800074a:	42a5      	cmp	r5, r4
 800074c:	d105      	bne.n	800075a <__libc_init_array+0x2e>
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000754:	4798      	blx	r3
 8000756:	3501      	adds	r5, #1
 8000758:	e7ee      	b.n	8000738 <__libc_init_array+0xc>
 800075a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800075e:	4798      	blx	r3
 8000760:	3501      	adds	r5, #1
 8000762:	e7f2      	b.n	800074a <__libc_init_array+0x1e>
 8000764:	0800078c 	.word	0x0800078c
 8000768:	0800078c 	.word	0x0800078c
 800076c:	0800078c 	.word	0x0800078c
 8000770:	08000790 	.word	0x08000790

08000774 <_init>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	bf00      	nop
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr

08000780 <_fini>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr
