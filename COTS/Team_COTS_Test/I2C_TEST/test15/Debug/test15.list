
test15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000ccc  08000ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd4  08000cd4  00010cdc  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd4  08000cd4  00010cdc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd4  08000cdc  00010cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000cdc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000cdc  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010d05  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014e2  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070b  00000000  00000000  0001222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000009b2  00000000  00000000  00012935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b0  00000000  00000000  000132e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000148  00000000  00000000  00013498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001673  00000000  00000000  000135e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000116e  00000000  00000000  00014c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000069e8  00000000  00000000  00015dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004f8  00000000  00000000  0001c7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cb4 	.word	0x08000cb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cb4 	.word	0x08000cb4

08000170 <eeprom_init>:
 */

#include "I2C_Slave_EEPROM.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 8000188:	2300      	movs	r3, #0
 800018a:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fa47 	bl	8000624 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 f980 	bl	80004a0 <MCAL_I2C_Init>


}
 80001a0:	bf00      	nop
 80001a2:	3718      	adds	r7, #24
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,u8 Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001c8:	6019      	str	r1, [r3, #0]
 80001ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001d2:	701a      	strb	r2, [r3, #0]
	u8 i=0 ;
 80001d4:	2300      	movs	r3, #0
 80001d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MISRA C++ 2008, 18-4-1 - Dynamic heap memory allocation shall not be used
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	u8 buffer[256]  ;
	buffer[0] = (u8)(Memory_address>>8) ; 	//upper byte Memory Address
 80001da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001f0:	701a      	strb	r2, [r3, #0]
	buffer[1] = (u8)Memory_address ; 	//lower byte Memory Address
 80001f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000206:	705a      	strb	r2, [r3, #1]

	for (i=2 ; i<(Data_Length+2) ; i++ )
 8000208:	2302      	movs	r3, #2
 800020a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800020e:	e015      	b.n	800023c <eeprom_write_Nbytes+0x8c>
	{buffer[i] = bytes[i-2] ;}
 8000210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000214:	3b02      	subs	r3, #2
 8000216:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800021a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800021e:	6812      	ldr	r2, [r2, #0]
 8000220:	441a      	add	r2, r3
 8000222:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000226:	7811      	ldrb	r1, [r2, #0]
 8000228:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800022c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000230:	54d1      	strb	r1, [r2, r3]
	for (i=2 ; i<(Data_Length+2) ; i++ )
 8000232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000236:	3301      	adds	r3, #1
 8000238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800023c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000240:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800024c:	429a      	cmp	r2, r3
 800024e:	dadf      	bge.n	8000210 <eeprom_write_Nbytes+0x60>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+2), With_Stop, Start);
 8000250:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000254:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	3302      	adds	r3, #2
 800025c:	4619      	mov	r1, r3
 800025e:	f107 0214 	add.w	r2, r7, #20
 8000262:	2300      	movs	r3, #0
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	2300      	movs	r3, #0
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2150      	movs	r1, #80	; 0x50
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <eeprom_write_Nbytes+0xd0>)
 8000270:	f000 fa02 	bl	8000678 <MCAL_I2C_MASTER_TX>

	return 0 ;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40005400 	.word	0x40005400

08000284 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , u8* dataOut, u8 dataLen)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af02      	add	r7, sp, #8
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	4613      	mov	r3, r2
 8000290:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = (u8)(address>>8) ; 	//Upper Memory Address
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	0a1b      	lsrs	r3, r3, #8
 8000296:	b2db      	uxtb	r3, r3
 8000298:	753b      	strb	r3, [r7, #20]
	buffer[1] = (u8)(address) ; 	//Lower Memory Address
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 2 ,Without_Stop ,Start); //Write Address Only
 80002a0:	f107 0214 	add.w	r2, r7, #20
 80002a4:	2300      	movs	r3, #0
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	2301      	movs	r3, #1
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2302      	movs	r3, #2
 80002ae:	2150      	movs	r1, #80	; 0x50
 80002b0:	4808      	ldr	r0, [pc, #32]	; (80002d4 <eeprom_read_byte+0x50>)
 80002b2:	f000 f9e1 	bl	8000678 <MCAL_I2C_MASTER_TX>

	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start); 			//Read Data
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	2201      	movs	r2, #1
 80002ba:	9201      	str	r2, [sp, #4]
 80002bc:	2200      	movs	r2, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	2150      	movs	r1, #80	; 0x50
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <eeprom_read_byte+0x50>)
 80002c6:	f000 fa2d 	bl	8000724 <MCAL_I2C_MASTER_RX>

	return 0 ;
 80002ca:	2300      	movs	r3, #0

}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40005400 	.word	0x40005400

080002d8 <MGPIO_u8SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_u8SetPinMode(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinMode)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	460b      	mov	r3, r1
 80002e4:	71bb      	strb	r3, [r7, #6]
 80002e6:	4613      	mov	r3, r2
 80002e8:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 80002ea:	2300      	movs	r3, #0
 80002ec:	73fb      	strb	r3, [r7, #15]

    switch(Copy_u8PortID)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d07f      	beq.n	80003f4 <MGPIO_u8SetPinMode+0x11c>
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	f300 80b8 	bgt.w	800046a <MGPIO_u8SetPinMode+0x192>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d002      	beq.n	8000304 <MGPIO_u8SetPinMode+0x2c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d03c      	beq.n	800037c <MGPIO_u8SetPinMode+0xa4>
 8000302:	e0b2      	b.n	800046a <MGPIO_u8SetPinMode+0x192>
    {
        case GPIO_PORTA:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	2b07      	cmp	r3, #7
 8000308:	d819      	bhi.n	800033e <MGPIO_u8SetPinMode+0x66>
            {
                GPIOA_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 800030a:	4b5f      	ldr	r3, [pc, #380]	; (8000488 <MGPIO_u8SetPinMode+0x1b0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	79ba      	ldrb	r2, [r7, #6]
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	210f      	movs	r1, #15
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a5a      	ldr	r2, [pc, #360]	; (8000488 <MGPIO_u8SetPinMode+0x1b0>)
 800031e:	400b      	ands	r3, r1
 8000320:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 8000322:	4b59      	ldr	r3, [pc, #356]	; (8000488 <MGPIO_u8SetPinMode+0x1b0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	7979      	ldrb	r1, [r7, #5]
 8000328:	79ba      	ldrb	r2, [r7, #6]
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a55      	ldr	r2, [pc, #340]	; (8000488 <MGPIO_u8SetPinMode+0x1b0>)
 8000334:	430b      	orrs	r3, r1
 8000336:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000338:	2301      	movs	r3, #1
 800033a:	73fb      	strb	r3, [r7, #15]
            {
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 800033c:	e098      	b.n	8000470 <MGPIO_u8SetPinMode+0x198>
            else if(Copy_u8PinID <= GPIO_PIN15)
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b0f      	cmp	r3, #15
 8000342:	f200 8095 	bhi.w	8000470 <MGPIO_u8SetPinMode+0x198>
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 8000346:	4b51      	ldr	r3, [pc, #324]	; (800048c <MGPIO_u8SetPinMode+0x1b4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	3a08      	subs	r2, #8
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	43d2      	mvns	r2, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a4c      	ldr	r2, [pc, #304]	; (800048c <MGPIO_u8SetPinMode+0x1b4>)
 800035c:	400b      	ands	r3, r1
 800035e:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 8000360:	4b4a      	ldr	r3, [pc, #296]	; (800048c <MGPIO_u8SetPinMode+0x1b4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	7979      	ldrb	r1, [r7, #5]
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	3a08      	subs	r2, #8
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a46      	ldr	r2, [pc, #280]	; (800048c <MGPIO_u8SetPinMode+0x1b4>)
 8000372:	430b      	orrs	r3, r1
 8000374:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000376:	2301      	movs	r3, #1
 8000378:	73fb      	strb	r3, [r7, #15]
            break;
 800037a:	e079      	b.n	8000470 <MGPIO_u8SetPinMode+0x198>
        }
        case GPIO_PORTB:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b07      	cmp	r3, #7
 8000380:	d819      	bhi.n	80003b6 <MGPIO_u8SetPinMode+0xde>
            {
                GPIOB_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 8000382:	4b43      	ldr	r3, [pc, #268]	; (8000490 <MGPIO_u8SetPinMode+0x1b8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	79ba      	ldrb	r2, [r7, #6]
 8000388:	0092      	lsls	r2, r2, #2
 800038a:	210f      	movs	r1, #15
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a3e      	ldr	r2, [pc, #248]	; (8000490 <MGPIO_u8SetPinMode+0x1b8>)
 8000396:	400b      	ands	r3, r1
 8000398:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 800039a:	4b3d      	ldr	r3, [pc, #244]	; (8000490 <MGPIO_u8SetPinMode+0x1b8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	7979      	ldrb	r1, [r7, #5]
 80003a0:	79ba      	ldrb	r2, [r7, #6]
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a39      	ldr	r2, [pc, #228]	; (8000490 <MGPIO_u8SetPinMode+0x1b8>)
 80003ac:	430b      	orrs	r3, r1
 80003ae:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80003b0:	2301      	movs	r3, #1
 80003b2:	73fb      	strb	r3, [r7, #15]
            {
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOB_CRH |= ((Copy_u8PinMode) << (4*(Copy_u8PinID - 8)));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80003b4:	e05e      	b.n	8000474 <MGPIO_u8SetPinMode+0x19c>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	2b0f      	cmp	r3, #15
 80003ba:	d85b      	bhi.n	8000474 <MGPIO_u8SetPinMode+0x19c>
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80003bc:	4b35      	ldr	r3, [pc, #212]	; (8000494 <MGPIO_u8SetPinMode+0x1bc>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	3a08      	subs	r2, #8
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	210f      	movs	r1, #15
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	43d2      	mvns	r2, r2
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <MGPIO_u8SetPinMode+0x1bc>)
 80003d2:	400b      	ands	r3, r1
 80003d4:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8PinMode) << (4*(Copy_u8PinID - 8)));
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <MGPIO_u8SetPinMode+0x1bc>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	7979      	ldrb	r1, [r7, #5]
 80003dc:	79ba      	ldrb	r2, [r7, #6]
 80003de:	3a08      	subs	r2, #8
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a2a      	ldr	r2, [pc, #168]	; (8000494 <MGPIO_u8SetPinMode+0x1bc>)
 80003ea:	430b      	orrs	r3, r1
 80003ec:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80003ee:	2301      	movs	r3, #1
 80003f0:	73fb      	strb	r3, [r7, #15]
            break;
 80003f2:	e03f      	b.n	8000474 <MGPIO_u8SetPinMode+0x19c>
        }
        case GPIO_PORTC:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	2b07      	cmp	r3, #7
 80003f8:	d819      	bhi.n	800042e <MGPIO_u8SetPinMode+0x156>
            {
                GPIOC_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MGPIO_u8SetPinMode+0x1c0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	79ba      	ldrb	r2, [r7, #6]
 8000400:	0092      	lsls	r2, r2, #2
 8000402:	210f      	movs	r1, #15
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	43d2      	mvns	r2, r2
 800040a:	4611      	mov	r1, r2
 800040c:	4a22      	ldr	r2, [pc, #136]	; (8000498 <MGPIO_u8SetPinMode+0x1c0>)
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MGPIO_u8SetPinMode+0x1c0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	7979      	ldrb	r1, [r7, #5]
 8000418:	79ba      	ldrb	r2, [r7, #6]
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	4611      	mov	r1, r2
 8000422:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MGPIO_u8SetPinMode+0x1c0>)
 8000424:	430b      	orrs	r3, r1
 8000426:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000428:	2301      	movs	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]

                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 800042c:	e024      	b.n	8000478 <MGPIO_u8SetPinMode+0x1a0>
            else if(Copy_u8PinID <= GPIO_PIN15)
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	d821      	bhi.n	8000478 <MGPIO_u8SetPinMode+0x1a0>
                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <MGPIO_u8SetPinMode+0x1c4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	79ba      	ldrb	r2, [r7, #6]
 800043a:	3a08      	subs	r2, #8
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <MGPIO_u8SetPinMode+0x1c4>)
 800044a:	400b      	ands	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MGPIO_u8SetPinMode+0x1c4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	3a08      	subs	r2, #8
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a0f      	ldr	r2, [pc, #60]	; (800049c <MGPIO_u8SetPinMode+0x1c4>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000464:	2301      	movs	r3, #1
 8000466:	73fb      	strb	r3, [r7, #15]
            break;
 8000468:	e006      	b.n	8000478 <MGPIO_u8SetPinMode+0x1a0>
        }
        default:
        {
            Loc_u8FuncStatus = E_NOT_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	73fb      	strb	r3, [r7, #15]
            break;
 800046e:	e004      	b.n	800047a <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000470:	bf00      	nop
 8000472:	e002      	b.n	800047a <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000474:	bf00      	nop
 8000476:	e000      	b.n	800047a <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000478:	bf00      	nop
        }
    }
    return Loc_u8FuncStatus;
 800047a:	7bfb      	ldrb	r3, [r7, #15]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40010800 	.word	0x40010800
 800048c:	40010804 	.word	0x40010804
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010c04 	.word	0x40010c04
 8000498:	40011000 	.word	0x40011000
 800049c:	40011004 	.word	0x40011004

080004a0 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80004a0:	b5b0      	push	{r4, r5, r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	u16 tmpreg = 0, freqrange = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	82fb      	strh	r3, [r7, #22]
 80004ae:	2300      	movs	r3, #0
 80004b0:	82bb      	strh	r3, [r7, #20]
	u32 pclk1 = 8000000;
 80004b2:	4b56      	ldr	r3, [pc, #344]	; (800060c <MCAL_I2C_Init+0x16c>)
 80004b4:	613b      	str	r3, [r7, #16]
	u16 result = 0 ;
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a54      	ldr	r2, [pc, #336]	; (8000610 <MCAL_I2C_Init+0x170>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d10e      	bne.n	80004e0 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 80004c2:	4a54      	ldr	r2, [pc, #336]	; (8000614 <MCAL_I2C_Init+0x174>)
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	4614      	mov	r4, r2
 80004c8:	461d      	mov	r5, r3
 80004ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004d2:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C1_EN);
 80004d6:	2115      	movs	r1, #21
 80004d8:	2002      	movs	r0, #2
 80004da:	f000 faeb 	bl	8000ab4 <MRCC_u8EnablePeripheralClock>
 80004de:	e00e      	b.n	80004fe <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 80004e0:	4b4c      	ldr	r3, [pc, #304]	; (8000614 <MCAL_I2C_Init+0x174>)
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	f103 0418 	add.w	r4, r3, #24
 80004e8:	4615      	mov	r5, r2
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004f2:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C2_EN);
 80004f6:	2116      	movs	r1, #22
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fadb 	bl	8000ab4 <MRCC_u8EnablePeripheralClock>
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	88db      	ldrh	r3, [r3, #6]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d178      	bne.n	80005f8 <MCAL_I2C_Init+0x158>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 800050c:	8afb      	ldrh	r3, [r7, #22]
 800050e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000512:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 8000514:	4b3d      	ldr	r3, [pc, #244]	; (800060c <MCAL_I2C_Init+0x16c>)
 8000516:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (u16) (pclk1 / 1000000) ;
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	4a3f      	ldr	r2, [pc, #252]	; (8000618 <MCAL_I2C_Init+0x178>)
 800051c:	fba2 2303 	umull	r2, r3, r2, r3
 8000520:	0c9b      	lsrs	r3, r3, #18
 8000522:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 8000524:	8afa      	ldrh	r2, [r7, #22]
 8000526:	8abb      	ldrh	r3, [r7, #20]
 8000528:	4313      	orrs	r3, r2
 800052a:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 800052c:	8afa      	ldrh	r2, [r7, #22]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f023 0201 	bic.w	r2, r3, #1
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a35      	ldr	r2, [pc, #212]	; (800061c <MCAL_I2C_Init+0x17c>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d004      	beq.n	8000556 <MCAL_I2C_Init+0xb6>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a33      	ldr	r2, [pc, #204]	; (8000620 <MCAL_I2C_Init+0x180>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d112      	bne.n	800057c <MCAL_I2C_Init+0xdc>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (u16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8000564:	8afa      	ldrh	r2, [r7, #22]
 8000566:	89fb      	ldrh	r3, [r7, #14]
 8000568:	4313      	orrs	r3, r2
 800056a:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 800056c:	8afa      	ldrh	r2, [r7, #22]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000572:	8abb      	ldrh	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (u16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	8a1a      	ldrh	r2, [r3, #16]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	8a5b      	ldrh	r3, [r3, #18]
 800058a:	4313      	orrs	r3, r2
 800058c:	b29a      	uxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	88db      	ldrh	r3, [r3, #6]
 8000592:	4313      	orrs	r3, r2
 8000594:	b29a      	uxth	r2, r3
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	889b      	ldrh	r3, [r3, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	b29a      	uxth	r2, r3
 800059e:	8afb      	ldrh	r3, [r7, #22]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 80005a4:	8afa      	ldrh	r2, [r7, #22]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 80005aa:	2300      	movs	r3, #0
 80005ac:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	891b      	ldrh	r3, [r3, #8]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10d      	bne.n	80005d2 <MCAL_I2C_Init+0x132>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 80005b6:	2301      	movs	r3, #1
 80005b8:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	899b      	ldrh	r3, [r3, #12]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 80005cc:	8afa      	ldrh	r2, [r7, #22]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 80005d2:	2300      	movs	r3, #0
 80005d4:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	895b      	ldrh	r3, [r3, #10]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	b21a      	sxth	r2, r3
 80005de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	89da      	ldrh	r2, [r3, #14]
 80005ec:	8afb      	ldrh	r3, [r7, #22]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 80005f2:	8afa      	ldrh	r2, [r7, #22]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f043 0201 	orr.w	r2, r3, #1
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]

}
 8000604:	bf00      	nop
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bdb0      	pop	{r4, r5, r7, pc}
 800060c:	007a1200 	.word	0x007a1200
 8000610:	40005400 	.word	0x40005400
 8000614:	2000001c 	.word	0x2000001c
 8000618:	431bde83 	.word	0x431bde83
 800061c:	0007a120 	.word	0x0007a120
 8000620:	000186a0 	.word	0x000186a0

08000624 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_u8DisableInterrupt(NVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d10a      	bne.n	800064a <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN6, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000634:	220d      	movs	r2, #13
 8000636:	2106      	movs	r1, #6
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fe4d 	bl	80002d8 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN7, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 800063e:	220d      	movs	r2, #13
 8000640:	2107      	movs	r1, #7
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff fe48 	bl	80002d8 <MGPIO_u8SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8000648:	e00d      	b.n	8000666 <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d109      	bne.n	8000666 <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000652:	220d      	movs	r2, #13
 8000654:	210a      	movs	r1, #10
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff fe3e 	bl	80002d8 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 800065c:	220d      	movs	r2, #13
 800065e:	210b      	movs	r1, #11
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fe39 	bl	80002d8 <MGPIO_u8SetPinMode>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40005400 	.word	0x40005400
 8000674:	40005800 	.word	0x40005800

08000678 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, u16 devAddr, u8 *dataOut, u32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	460b      	mov	r3, r1
 8000686:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 800068c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000690:	461a      	mov	r2, r3
 8000692:	2101      	movs	r1, #1
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f000 f8b9 	bl	800080c <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 800069a:	bf00      	nop
 800069c:	2101      	movs	r1, #1
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f000 f8dc 	bl	800085c <I2C_GetFlagStatus>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f8      	beq.n	800069c <MCAL_I2C_MASTER_TX+0x24>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 80006aa:	897b      	ldrh	r3, [r7, #10]
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f959 	bl	8000968 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80006b6:	bf00      	nop
 80006b8:	2102      	movs	r1, #2
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f000 f8ce 	bl	800085c <I2C_GetFlagStatus>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f8      	beq.n	80006b8 <MCAL_I2C_MASTER_TX+0x40>
	//delay_ms(20);
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 80006c6:	bf00      	nop
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <MCAL_I2C_MASTER_TX+0xa8>)
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 f8c6 	bl	800085c <I2C_GetFlagStatus>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f8      	beq.n	80006c8 <MCAL_I2C_MASTER_TX+0x50>
	//delay_ms(20);
	for(i = 0; i < dataLen; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e011      	b.n	8000700 <MCAL_I2C_MASTER_TX+0x88>
	{
		/* Write in the DR register the data to be sent */
		I2Cx->DR = dataOut[i];
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	611a      	str	r2, [r3, #16]
		//delay_ms(20);
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 80006ea:	bf00      	nop
 80006ec:	2104      	movs	r1, #4
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f000 f8b4 	bl	800085c <I2C_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f8      	beq.n	80006ec <MCAL_I2C_MASTER_TX+0x74>
	for(i = 0; i < dataLen; i++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8e9      	bhi.n	80006dc <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8000708:	f897 3020 	ldrb.w	r3, [r7, #32]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d103      	bne.n	8000718 <MCAL_I2C_MASTER_TX+0xa0>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000710:	2101      	movs	r1, #1
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f000 f947 	bl	80009a6 <I2C_GenerateSTOP>
	}
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	00070080 	.word	0x00070080

08000724 <MCAL_I2C_MASTER_RX>:

void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, u16 devAddr, u8 *dataOut, u32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	460b      	mov	r3, r1
 8000732:	817b      	strh	r3, [r7, #10]
	u8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MCAL_I2C_MASTER_RX+0xe0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800074c:	461a      	mov	r2, r3
 800074e:	2101      	movs	r1, #1
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 f85b 	bl	800080c <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000756:	bf00      	nop
 8000758:	2101      	movs	r1, #1
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f000 f87e 	bl	800085c <I2C_GetFlagStatus>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f8      	beq.n	8000758 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8000766:	897b      	ldrh	r3, [r7, #10]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f000 f8fb 	bl	8000968 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000772:	bf00      	nop
 8000774:	2102      	movs	r1, #2
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f000 f870 	bl	800085c <I2C_GetFlagStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f8      	beq.n	8000774 <MCAL_I2C_MASTER_RX+0x50>

	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8000782:	2101      	movs	r1, #1
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f000 f929 	bl	80009dc <I2C_ACKnowledgeConfig>
	//delay_ms(20);
	if(dataLen)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <MCAL_I2C_MASTER_RX+0xa6>
	{
		// read the data until Len becomes zero
		for(i = dataLen; i > 1; i--)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e012      	b.n	80007bc <MCAL_I2C_MASTER_RX+0x98>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000796:	bf00      	nop
 8000798:	2103      	movs	r1, #3
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f000 f85e 	bl	800085c <I2C_GetFlagStatus>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f8      	beq.n	8000798 <MCAL_I2C_MASTER_RX+0x74>
			//read the data from data register into buffer
				*dataOut = I2Cx->DR;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	701a      	strb	r2, [r3, #0]
				//delay_ms(20);
			//increment the buffer address;
			dataOut++;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3301      	adds	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
		for(i = dataLen; i > 1; i--)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	dce9      	bgt.n	8000796 <MCAL_I2C_MASTER_RX+0x72>
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 80007c2:	2100      	movs	r1, #0
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f000 f909 	bl	80009dc <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 80007ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <MCAL_I2C_MASTER_RX+0xb6>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 80007d2:	2101      	movs	r1, #1
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f000 f8e6 	bl	80009a6 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 80007da:	7cfa      	ldrb	r2, [r7, #19]
 80007dc:	490a      	ldr	r1, [pc, #40]	; (8000808 <MCAL_I2C_MASTER_RX+0xe4>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3310      	adds	r3, #16
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007f0:	d103      	bne.n	80007fa <MCAL_I2C_MASTER_RX+0xd6>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 80007f2:	2101      	movs	r1, #1
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f000 f8f1 	bl	80009dc <I2C_ACKnowledgeConfig>
	}
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40005400 	.word	0x40005400
 8000808:	2000001c 	.word	0x2000001c

0800080c <I2C_GenerateSTART>:

void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 800081c:	78bb      	ldrb	r3, [r7, #2]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d007      	beq.n	8000832 <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000822:	bf00      	nop
 8000824:	2100      	movs	r1, #0
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f818 	bl	800085c <I2C_GetFlagStatus>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f8      	bne.n	8000824 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000844:	e005      	b.n	8000852 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	//volatile u32 dummyRead;
	FlagStatus bitstatus = RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	75fb      	strb	r3, [r7, #23]
	u32 flag1 = 0, flag2 = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
	u32 lastevent = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b05      	cmp	r3, #5
 800087a:	d811      	bhi.n	80008a0 <I2C_GetFlagStatus+0x44>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b05      	cmp	r3, #5
 8000880:	d86a      	bhi.n	8000958 <I2C_GetFlagStatus+0xfc>
 8000882:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <I2C_GetFlagStatus+0x2c>)
 8000884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000888:	080008ab 	.word	0x080008ab
 800088c:	080008c3 	.word	0x080008c3
 8000890:	080008db 	.word	0x080008db
 8000894:	08000941 	.word	0x08000941
 8000898:	08000929 	.word	0x08000929
 800089c:	08000929 	.word	0x08000929
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4a30      	ldr	r2, [pc, #192]	; (8000964 <I2C_GetFlagStatus+0x108>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d024      	beq.n	80008f2 <I2C_GetFlagStatus+0x96>
 80008a8:	e056      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 80008b6:	2301      	movs	r3, #1
 80008b8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 80008ba:	e04d      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	75fb      	strb	r3, [r7, #23]
		break;
 80008c0:	e04a      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 80008ce:	2301      	movs	r3, #1
 80008d0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 80008d2:	e041      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	75fb      	strb	r3, [r7, #23]
		break;
 80008d8:	e03e      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <I2C_GetFlagStatus+0x90>
			bitstatus = SET;
 80008e6:	2301      	movs	r3, #1
 80008e8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 80008ea:	e035      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	75fb      	strb	r3, [r7, #23]
		break;
 80008f0:	e032      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((u32)0x00FFFFFF);
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4313      	orrs	r3, r2
 800090a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800090e:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d102      	bne.n	8000922 <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 800091c:	2301      	movs	r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000920:	e01a      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
		break;
 8000926:	e017      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8000934:	2301      	movs	r3, #1
 8000936:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000938:	e00e      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]
		break;
 800093e:	e00b      	b.n	8000958 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 800094c:	2301      	movs	r3, #1
 800094e:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000950:	e001      	b.n	8000956 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	75fb      	strb	r3, [r7, #23]
		break;
 8000956:	bf00      	nop
	}
	}

	return bitstatus;
 8000958:	7dfb      	ldrb	r3, [r7, #23]
}
 800095a:	4618      	mov	r0, r3
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	00070080 	.word	0x00070080

08000968 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, u16 Address, I2C_Direction Direction)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 800097e:	787b      	ldrb	r3, [r7, #1]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	e003      	b.n	8000996 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8000996:	887a      	ldrh	r2, [r7, #2]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	611a      	str	r2, [r3, #16]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 80009c4:	e005      	b.n	80009d2 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 80009fa:	e005      	b.n	8000a08 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
	...

08000a14 <MRCC_u8InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_u8InitClock(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_HSI_CLOCK
        //Enable High-Speed Internal Clock
        SET_BIT(RCC_CR, RCC_CR_HSION);
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]
        //Wait until HSI Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_HSIRDY) == 0);
 8000a24:	bf00      	nop
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <MRCC_u8InitClock+0x12>

        //Set System Clock Source to be HSI Clock
        CLR_BIT(RCC_CFGR, RCC_CFGR_SW_START);
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]
        CLR_BIT(RCC_CFGR, (RCC_CFGR_SW_START + 1));
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	6013      	str	r3, [r2, #0]

        //Enable Phase-locked loop Clock
        SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a54:	6013      	str	r3, [r2, #0]
        //Wait until PLL Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_PLLRDY) == 0);
 8000a56:	bf00      	nop
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MRCC_u8InitClock+0x98>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0f9      	beq.n	8000a58 <MRCC_u8InitClock+0x44>

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    RCC_CFGR &= ~(((u32)0b1111) << (RCC_CFGR_HPRE_START));
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6e:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_HPRE_START));
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE1_START));
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a82:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE1_START));
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE2_START));
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a92:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a96:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE2_START));
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <MRCC_u8InitClock+0x9c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6013      	str	r3, [r2, #0]
    return E_OK;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021004 	.word	0x40021004

08000ab4 <MRCC_u8EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_u8EnablePeripheralClock(u8 Copy_u8BusID, u8 Copy_u8Peripheral)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_u8ErrorCheck = E_NOT_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
    switch(Copy_u8BusID)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d020      	beq.n	8000b10 <MRCC_u8EnablePeripheralClock+0x5c>
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	dc2b      	bgt.n	8000b2a <MRCC_u8EnablePeripheralClock+0x76>
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d002      	beq.n	8000adc <MRCC_u8EnablePeripheralClock+0x28>
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d00d      	beq.n	8000af6 <MRCC_u8EnablePeripheralClock+0x42>
 8000ada:	e026      	b.n	8000b2a <MRCC_u8EnablePeripheralClock+0x76>
    {
        case RCC_AHB:
        {
            SET_BIT(RCC_AHBENR, Copy_u8Peripheral);
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MRCC_u8EnablePeripheralClock+0x88>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	79ba      	ldrb	r2, [r7, #6]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <MRCC_u8EnablePeripheralClock+0x88>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
            break;
 8000af4:	e01c      	b.n	8000b30 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB1:
        {
            SET_BIT(RCC_APB1ENR, Copy_u8Peripheral);
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MRCC_u8EnablePeripheralClock+0x8c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <MRCC_u8EnablePeripheralClock+0x8c>)
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8000b0e:	e00f      	b.n	8000b30 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB2:
        {
            SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MRCC_u8EnablePeripheralClock+0x90>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <MRCC_u8EnablePeripheralClock+0x90>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
            break;
 8000b28:	e002      	b.n	8000b30 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_u8ErrorCheck = E_NOT_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
            break;
 8000b2e:	bf00      	nop
        }
    }
    return Loc_u8ErrorCheck;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021014 	.word	0x40021014
 8000b40:	4002101c 	.word	0x4002101c
 8000b44:	40021018 	.word	0x40021018

08000b48 <MSTK_vStopTimer>:
{
	SET_BIT(STK->CTRL, STK_ENABLE);
}

void MSTK_vStopTimer(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	CLR_BIT(STK->CTRL, STK_ENABLE);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <MSTK_vStopTimer+0x18>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <MSTK_vStopTimer+0x18>)
 8000b52:	f023 0301 	bic.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <SysTick_Handler>:
{
	return  (STK->VAL) ;
}

void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	if(G_vCallBack != 0)
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SysTick_Handler+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <SysTick_Handler+0x12>
	{
		G_vCallBack();
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SysTick_Handler+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4798      	blx	r3
	}
	if(G_u8Flag == SINGLE)
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SysTick_Handler+0x2c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d104      	bne.n	8000b88 <SysTick_Handler+0x24>
	{
		G_u8Flag = PERIODIC;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Handler+0x2c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		MSTK_vStopTimer();
 8000b84:	f7ff ffe0 	bl	8000b48 <MSTK_vStopTimer>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000050 	.word	0x20000050
 8000b90:	2000004c 	.word	0x2000004c

08000b94 <main>:
#include "HAL/I2C_EEPROM/I2C_Slave_EEPROM.h"
void delay_ms(u32 milliseconds);

unsigned char ch2[7] = {0};
void main()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	MRCC_u8InitClock();
 8000b9a:	f7ff ff3b 	bl	8000a14 <MRCC_u8InitClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_IOPA_EN);
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f7ff ff87 	bl	8000ab4 <MRCC_u8EnablePeripheralClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_IOPB_EN);
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff ff83 	bl	8000ab4 <MRCC_u8EnablePeripheralClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_AFIO_EN);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f7ff ff7f 	bl	8000ab4 <MRCC_u8EnablePeripheralClock>

	//Test case 1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <main+0x7c>)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	8019      	strh	r1, [r3, #0]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	0c0a      	lsrs	r2, r1, #16
 8000bc8:	701a      	strb	r2, [r3, #0]


	eeprom_init();
 8000bca:	f7ff fad1 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xA0,ch1,7);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	20a0      	movs	r0, #160	; 0xa0
 8000bd6:	f7ff faeb 	bl	80001b0 <eeprom_write_Nbytes>
	//delay_ms(20);
	eeprom_read_byte(0xA1, ch2, 7);
 8000bda:	2207      	movs	r2, #7
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <main+0x80>)
 8000bde:	20a1      	movs	r0, #161	; 0xa1
 8000be0:	f7ff fb50 	bl	8000284 <eeprom_read_byte>
	//delay_ms(20);

	//Test case 2
	ch1[0] = 0xA;
 8000be4:	230a      	movs	r3, #10
 8000be6:	703b      	strb	r3, [r7, #0]
	ch1[1] = 0xB;
 8000be8:	230b      	movs	r3, #11
 8000bea:	707b      	strb	r3, [r7, #1]
	ch1[2] = 0xC;
 8000bec:	230c      	movs	r3, #12
 8000bee:	70bb      	strb	r3, [r7, #2]
	ch1[3] = 0xD;
 8000bf0:	230d      	movs	r3, #13
 8000bf2:	70fb      	strb	r3, [r7, #3]

	eeprom_write_Nbytes(0xFFF,ch1,4);
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bfe:	f7ff fad7 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF, ch2, 4);
 8000c02:	2204      	movs	r2, #4
 8000c04:	4903      	ldr	r1, [pc, #12]	; (8000c14 <main+0x80>)
 8000c06:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c0a:	f7ff fb3b 	bl	8000284 <eeprom_read_byte>

	while(1)
 8000c0e:	e7fe      	b.n	8000c0e <main+0x7a>
 8000c10:	08000ccc 	.word	0x08000ccc
 8000c14:	20000054 	.word	0x20000054

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f000 f811 	bl	8000c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff ffa3 	bl	8000b94 <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c5c:	08000cdc 	.word	0x08000cdc
  ldr r2, =_sbss
 8000c60:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c64:	2000005c 	.word	0x2000005c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <__libc_init_array>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4d0c      	ldr	r5, [pc, #48]	; (8000ca4 <__libc_init_array+0x38>)
 8000c72:	4c0d      	ldr	r4, [pc, #52]	; (8000ca8 <__libc_init_array+0x3c>)
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	42a6      	cmp	r6, r4
 8000c7a:	d109      	bne.n	8000c90 <__libc_init_array+0x24>
 8000c7c:	f000 f81a 	bl	8000cb4 <_init>
 8000c80:	2600      	movs	r6, #0
 8000c82:	4d0a      	ldr	r5, [pc, #40]	; (8000cac <__libc_init_array+0x40>)
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <__libc_init_array+0x44>)
 8000c86:	1b64      	subs	r4, r4, r5
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	42a6      	cmp	r6, r4
 8000c8c:	d105      	bne.n	8000c9a <__libc_init_array+0x2e>
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c94:	4798      	blx	r3
 8000c96:	3601      	adds	r6, #1
 8000c98:	e7ee      	b.n	8000c78 <__libc_init_array+0xc>
 8000c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c9e:	4798      	blx	r3
 8000ca0:	3601      	adds	r6, #1
 8000ca2:	e7f2      	b.n	8000c8a <__libc_init_array+0x1e>
 8000ca4:	08000cd4 	.word	0x08000cd4
 8000ca8:	08000cd4 	.word	0x08000cd4
 8000cac:	08000cd4 	.word	0x08000cd4
 8000cb0:	08000cd8 	.word	0x08000cd8

08000cb4 <_init>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr

08000cc0 <_fini>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr
