<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: µVision V5.32.0.0
Copyright (C) 2020 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Ahmed Atia, HP Inc., LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.32.0.0
Toolchain Path:  D:\KEIL_v5\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.14.1
Assembler:       Armasm.exe V6.14.1
Linker/Locator:  ArmLink.exe V6.14.1
Library Manager: ArmAr.exe V6.14.1
Hex Converter:   FromElf.exe V6.14.1
CPU DLL:         SARMCM3.DLL V5.32.0.0
Dialog DLL:      DCM.DLL V1.17.3.0
Target DLL:      UL2CM3.DLL V1.163.9.0
Dialog DLL:      TCM.DLL V1.46.0.0
 
<h2>Project:</h2>
D:\Senior_2\Graduation_Project\COTS\STM32F103C8T6\DRIVERS_TEST\ADC_TEST\ADC_TEST.uvprojx
Project File Date:  02/04/2024

<h2>Output:</h2>
*** Using Compiler 'V6.14.1', folder: 'D:\KEIL_v5\ARM\ARMCLANG\Bin'
Rebuild target 'Target 1'
GPIO_Program.c(12): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
GPIO_Program.c(12): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
GPIO_Program.c(14): warning: In file included from...
./GPIO_Private.h(138): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_PRIVATE_H_*/
                           ^
GPIO_Program.c(15): warning: In file included from...
./GPIO_Interface.h(131): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_INTERFACE_H_*/
                             ^
GPIO_Program.c(16): warning: In file included from...
./GPIO_Config.h(14): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_CONFIG_H_*/
                          ^
GPIO_Program.c(38): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                                 ^
GPIO_Program.c(38): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(39): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(44): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                                 ^
GPIO_Program.c(44): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(45): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(54): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                                 ^
GPIO_Program.c(54): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(55): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(60): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                                 ^
GPIO_Program.c(60): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(61): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(70): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                                 ^
GPIO_Program.c(70): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(71): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(77): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                                 ^
GPIO_Program.c(77): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(78): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                           ~~  ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GPIO_Program.c(358): warning: no newline at end of file [-Wnewline-eof]
}
 ^
24 warnings generated.
compiling GPIO_Program.c...
ADC_Program.c(12): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
ADC_Program.c(12): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
ADC_Program.c(14): warning: In file included from...
./ADC_Private.h(313): warning: no newline at end of file [-Wnewline-eof]
#endif /*_ADC_PRIVATE_H_*/
                          ^
ADC_Program.c(15): warning: In file included from...
./ADC_Interface.h(71): warning: no newline at end of file [-Wnewline-eof]
#endif /*_ADC_INTERFACE_H_*/
                            ^
ADC_Program.c(16): warning: In file included from...
./ADC_Config.h(78): warning: no newline at end of file [-Wnewline-eof]
#endif /*_ADC_CONFIG_H_*/
                         ^
ADC_Program.c(25): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
                                           ^
ADC_Program.c(25): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
                                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ADC_Program.c(26): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    ADC[Copy_uint32ADCSelect] -> CR1 |= ((MADC_OPERATION_MODE) << (MADC_CR1_DUALMOD_START_BIT));
                                          ^
./ADC_Config.h(28): note: expanded from macro 'MADC_OPERATION_MODE'
#define MADC_OPERATION_MODE                                                     MADC_INDEPENDENT_MODE
                                                                                ^
./ADC_Private.h(287): note: expanded from macro 'MADC_INDEPENDENT_MODE'
#define MADC_INDEPENDENT_MODE                       0b0000
                                                    ^
ADC_Program.c(36): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CONT_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
ADC_Program.c(39): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ALIGN_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
ADC_Program.c(48): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
                                               ^
ADC_Program.c(48): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
                                         ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ADC_Program.c(49): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        ADC[Copy_uint32ADCSelect] -> CR2 |= ((MADC_EXTERNAL_TRIGGER_SELECT) << (MADC_CR2_EXTSEL_START_BIT));
                                              ^
./ADC_Config.h(62): note: expanded from macro 'MADC_EXTERNAL_TRIGGER_SELECT'
    #define MADC_EXTERNAL_TRIGGER_SELECT                                        MADC_TRIGGER_SWSTART
                                                                                ^
./ADC_Private.h(284): note: expanded from macro 'MADC_TRIGGER_SWSTART'
#define MADC_TRIGGER_SWSTART                        0b111
                                                    ^
ADC_Program.c(70): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
                                            ^
ADC_Program.c(70): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
                                      ~~ ^~~~~~~~~~~~~~~~~
ADC_Program.c(71): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
                                            ^
ADC_Program.c(71): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
                                      ~~ ^~~~~~~~~~~~~~~~~
ADC_Program.c(72): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    ADC[Copy_uint32ADCSelect] -> SQR3 |= ((Copy_uint32ChannelSelect) << 0);
                                      ~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
ADC_Program.c(85): warning: implicit conversion loses integer precision: 'volatile uint32' (aka 'volatile unsigned long') to 'uint16' (aka 'unsigned short') [-Wimplicit-int-conversion]
        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
                               ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
ADC_Program.c(99): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
                                                ^
ADC_Program.c(99): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
                                          ~~ ^~~~~~~~~~~~~~~~~
ADC_Program.c(100): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
                                                ^
ADC_Program.c(100): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
                                          ~~ ^~~~~~~~~~~~~~~~~
ADC_Program.c(101): warning: implicit conversion changes signedness: 'int' to 'uint32' (aka 'unsigned long') [-Wsign-conversion]
        ADC[Copy_uint32ADCSelect] -> SQR3 = (Copy_uint32ChannelSelect) << 0;
                                          ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
ADC_Program.c(107): warning: implicit conversion loses integer precision: 'volatile uint32' (aka 'volatile unsigned long') to 'uint16' (aka 'unsigned short') [-Wimplicit-int-conversion]
        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
                               ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
ADC_Program.c(131): warning: no previous prototype for function 'ADC1_2_IRQHandler' [-Wmissing-prototypes]
void ADC1_2_IRQHandler(void)
     ^
ADC_Program.c(131): note: declare 'static' if the function is not intended to be used outside of this translation unit
void ADC1_2_IRQHandler(void)
^
static 
26 warnings generated.
compiling ADC_Program.c...
assembling startup_stm32f10x_md.s...
main.c(2): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
main.c(2): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
main.c(5): warning: In file included from...
./NVIC_Interface.h(151): warning: no newline at end of file [-Wnewline-eof]
#endif /*_NVIC_INTERFACE_H_*/
                             ^
main.c(6): warning: In file included from...
./GPIO_Interface.h(131): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_INTERFACE_H_*/
                             ^
main.c(8): warning: In file included from...
./ADC_Interface.h(71): warning: no newline at end of file [-Wnewline-eof]
#endif /*_ADC_INTERFACE_H_*/
                            ^
main.c(9): warning: In file included from...
./STK_Interface.h(69): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STK_INTERFACE_H_*/
                            ^
main.c(11): warning: In file included from...
./UART_Interface.h(130): warning: no newline at end of file [-Wnewline-eof]
#endif /*_UART_INTERFACE_H_*/
                             ^
main.c(18): warning: passing 'char [12]' to parameter of type 'uint8 *' (aka 'unsigned char *') converts between pointers to integer types with different sign [-Wpointer-sign]
    MUART_TxString(UART1, "ADC Value: ");
                          ^~~~~~~~~~~~~
./UART_Interface.h(107): note: passing argument to parameter 'P_uint8TxString' here
Std_ReturnType MUART_TxString(MUART_Select_t Copy_UARTChoice, uint8* P_uint8TxString);
                                                                     ^
main.c(13): warning: no previous prototype for function 'ISR_ADC' [-Wmissing-prototypes]
void ISR_ADC(void)
     ^
main.c(13): note: declare 'static' if the function is not intended to be used outside of this translation unit
void ISR_ADC(void)
^
static 
main.c(25): warning: no previous prototype for function 'ISR_STK' [-Wmissing-prototypes]
void ISR_STK(void)
     ^
main.c(25): note: declare 'static' if the function is not intended to be used outside of this translation unit
void ISR_STK(void)
^
static 
main.c(38): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
                MGPIO_SetPinMode(MUART1_TX_PORT_ID, MUART1_TX_PIN_ID, MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ);
                                                                      ^
./GPIO_Interface.h(57): note: expanded from macro 'MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ              (uint32)0b1010     /* GPIO Output Alternate Function Push-Pull Mode, 2MHz */
                                                            ^
main.c(39): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        MGPIO_SetPinMode(MUART1_RX_PORT_ID, MUART1_RX_PIN_ID, MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
                                                              ^
./GPIO_Interface.h(47): note: expanded from macro 'MGPIO_INPUT_PULL_UP_OR_DOWN_MODE'
#define MGPIO_INPUT_PULL_UP_OR_DOWN_MODE            (uint32)0b1000     /* GPIO Input Pull down Mode */
                                                            ^
main.c(48): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(MADC_CHANNEL_2_PORT_ID, MADC_CHANNEL_2_PIN_ID, MGPIO_INPUT_ANALOG_MODE);
                                                                    ^
./GPIO_Interface.h(45): note: expanded from macro 'MGPIO_INPUT_ANALOG_MODE'
#define MGPIO_INPUT_ANALOG_MODE                     (uint32)0b0000     /* GPIO Input Analog Mode */
                                                            ^
main.c(60): warning: 'return' will never be executed [-Wunreachable-code-return]
    return 0;
           ^
14 warnings generated.
compiling main.c...
RCC_Program.c(13): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
RCC_Program.c(13): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
RCC_Program.c(15): warning: In file included from...
./RCC_Private.h(129): warning: no newline at end of file [-Wnewline-eof]
#endif /*_RCC_PRIVATE_H_*/
                          ^
RCC_Program.c(16): warning: In file included from...
./RCC_Config.h(86): warning: no newline at end of file [-Wnewline-eof]
#endif /*_RCC_CONFIG_H_*/
                         ^
RCC_Program.c(47): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
RCC_Program.c(61): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
RCC_Program.c(123): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
                            ^
RCC_Program.c(124): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
                            ^
./RCC_Config.h(64): note: expanded from macro 'MRCC_AHB_PRESCALAR'
#define MRCC_AHB_PRESCALAR                          MRCC_AHB_CLK_DIV_1
                                                    ^
./RCC_Private.h(106): note: expanded from macro 'MRCC_AHB_CLK_DIV_1'
#define MRCC_AHB_CLK_DIV_1                               0b0000
                                                         ^
RCC_Program.c(126): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
                            ^
RCC_Program.c(127): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
                            ^
./RCC_Config.h(64): note: expanded from macro 'MRCC_AHB_PRESCALAR'
#define MRCC_AHB_PRESCALAR                          MRCC_AHB_CLK_DIV_1
                                                    ^
./RCC_Private.h(106): note: expanded from macro 'MRCC_AHB_CLK_DIV_1'
#define MRCC_AHB_CLK_DIV_1                               0b0000
                                                         ^
RCC_Program.c(129): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
                            ^
RCC_Program.c(130): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
                            ^
./RCC_Config.h(64): note: expanded from macro 'MRCC_AHB_PRESCALAR'
#define MRCC_AHB_PRESCALAR                          MRCC_AHB_CLK_DIV_1
                                                    ^
./RCC_Private.h(106): note: expanded from macro 'MRCC_AHB_CLK_DIV_1'
#define MRCC_AHB_CLK_DIV_1                               0b0000
                                                         ^
RCC_Program.c(217): warning: no newline at end of file [-Wnewline-eof]
}
 ^
13 warnings generated.
compiling RCC_Program.c...
STK_Program.c(2): warning: non-portable path to file '"Std_Types.h"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
#include "STD_TYPES.h"
         ^~~~~~~~~~~~~
         "Std_Types.h"
STK_Program.c(2): warning: In file included from...
./STD_TYPES.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
STK_Program.c(2): warning: In file included from...
./STD_TYPES.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
STK_Program.c(4): warning: In file included from...
./STK_Private.h(88): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STK_PRIVATE_H_*/
                          ^
STK_Program.c(5): warning: In file included from...
./STK_Interface.h(69): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STK_INTERFACE_H_*/
                            ^
STK_Program.c(66): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(73): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT((STK -> CTRL), STK_CTRL_CLKSOURCE);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(139): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(153): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(174): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(189): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(231): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
                CLR_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
STK_Program.c(226): warning: no previous prototype for function 'SysTick_Handler' [-Wmissing-prototypes]
void SysTick_Handler(void)
     ^
STK_Program.c(226): note: declare 'static' if the function is not intended to be used outside of this translation unit
void SysTick_Handler(void)
^
static 
13 warnings generated.
compiling STK_Program.c...
RTE/Device/STM32F103C8/system_stm32f10x.c(166): warning: no previous extern declaration for non-static variable 'AHBPrescTable' [-Wmissing-variable-declarations]
__I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
            ^
RTE/Device/STM32F103C8/system_stm32f10x.c(166): note: declare 'static' if the variable is not intended to be used outside of this translation unit
__I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    ^
1 warning generated.
compiling system_stm32f10x.c...
NVIC_Program.c(12): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
NVIC_Program.c(12): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
NVIC_Program.c(14): warning: In file included from...
./NVIC_Private.h(211): warning: no newline at end of file [-Wnewline-eof]
#endif /*_NVIC_PRIVATE_H_*/
                           ^
NVIC_Program.c(15): warning: In file included from...
./NVIC_Interface.h(151): warning: no newline at end of file [-Wnewline-eof]
#endif /*_NVIC_INTERFACE_H_*/
                             ^
NVIC_Program.c(16): warning: In file included from...
./NVIC_Config.h(16): warning: no newline at end of file [-Wnewline-eof]
#endif /*_NVIC_CONFIG_H_*/
                          ^
NVIC_Program.c(202): warning: implicit conversion loses integer precision: 'int' to 'uint8' (aka 'unsigned char') [-Wimplicit-int-conversion]
                Loc_uint8PriorityValue = (Copy_uint8GroupPriority << 4);
                                       ~  ~~~~~~~~~~~~~~~~~~~~~~~~^~~~
NVIC_Program.c(210): warning: implicit conversion loses integer precision: 'int' to 'uint8' (aka 'unsigned char') [-Wimplicit-int-conversion]
                Loc_uint8PriorityValue = ((Copy_uint8SubGroupPriority) | (Copy_uint8GroupPriority << ((Loc_uint16AIRCRPriorityGroupVal - (uint16)MNVIC_PRIORITY_GROUP_4_SUB_0) / 0x100)));
                                       ~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NVIC_Program.c(211): warning: implicit conversion loses integer precision: 'int' to 'uint8' (aka 'unsigned char') [-Wimplicit-int-conversion]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue << 4;
                                                        ~ ~~~~~~~~~~~~~~~~~~~~~~~^~~~
NVIC_Program.c(216): warning: implicit conversion loses integer precision: 'int' to 'uint8' (aka 'unsigned char') [-Wimplicit-int-conversion]
                Loc_uint8PriorityValue = (Copy_uint8SubGroupPriority << 4);
                                       ~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
9 warnings generated.
compiling NVIC_Program.c...
LCD_Program.c(12): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
LCD_Program.c(12): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
LCD_Program.c(14): warning: In file included from...
./GPIO_Interface.h(131): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_INTERFACE_H_*/
                             ^
LCD_Program.c(15): warning: In file included from...
./STK_Interface.h(69): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STK_INTERFACE_H_*/
                            ^
LCD_Program.c(17): warning: In file included from...
./LCD_Private.h(41): warning: no newline at end of file [-Wnewline-eof]
#endif /*_LCD_PRIVATE_H_*/
                          ^
LCD_Program.c(18): warning: In file included from...
./LCD_Interface.h(65): warning: no newline at end of file [-Wnewline-eof]
#endif /*_LCD_INTERFACE_H_*/
                            ^
LCD_Program.c(19): warning: In file included from...
./LCD_Config.h(56): warning: no newline at end of file [-Wnewline-eof]
#endif /*_LCD_CONFIG_H_*/
                         ^
LCD_Program.c(29): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_RS_PORT_ID, LCD_RS_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                    ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(30): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_RW_PORT_ID, LCD_RW_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                    ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(31): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_E_PORT_ID, LCD_E_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                  ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(32): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_INPUT_PORTS_ID, LCD_D4_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                        ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(33): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_INPUT_PORTS_ID, LCD_D5_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                        ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(34): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_INPUT_PORTS_ID, LCD_D6_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                        ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(35): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    MGPIO_SetPinMode(LCD_INPUT_PORTS_ID, LCD_D7_PIN_ID, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
                                                        ^
./GPIO_Interface.h(55): note: expanded from macro 'MGPIO_OUTPUT_PUSH_PULL_2MHZ'
#define MGPIO_OUTPUT_PUSH_PULL_2MHZ                 (uint32)0b0010     /* GPIO Output Push-Pull Mode, 2MHz */
                                                            ^
LCD_Program.c(120): warning: result of comparison of unsigned expression >= 0 is always true [-Wtautological-unsigned-zero-compare]
        if(Copy_uint8ColumnID >= 0 && Copy_uint8ColumnID <= 15)
           ~~~~~~~~~~~~~~~~~~ ^  ~
LCD_Program.c(196): warning: implicit conversion loses integer precision: 'unsigned long' to 'uint8' (aka 'unsigned char') [-Wimplicit-int-conversion]
        LCD_WriteChar4Bit((Copy_uint32Value + 48));
        ~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~^~~~
LCD_Program.c(244): warning: no newline at end of file [-Wnewline-eof]
}
 ^
17 warnings generated.
compiling LCD_Program.c...
UART_Program.c(12): warning: In file included from...
./Std_Types.h(14): warning: In file included from...
./Platform_Types.h(73): warning: no newline at end of file [-Wnewline-eof]
#endif /*_PLATFORM_TYPES_H_*/
                             ^
UART_Program.c(12): warning: In file included from...
./Std_Types.h(31): warning: no newline at end of file [-Wnewline-eof]
#endif /*_STD_TYPES_H_*/
                        ^
UART_Program.c(14): warning: In file included from...
./UART_Private.h(299): warning: no newline at end of file [-Wnewline-eof]
#endif /*_UART_PRIVATE_H_*/
                           ^
UART_Program.c(15): warning: In file included from...
./UART_Interface.h(130): warning: no newline at end of file [-Wnewline-eof]
#endif /*_UART_INTERFACE_H_*/
                             ^
UART_Program.c(16): warning: In file included from...
./UART_Config.h(53): warning: no newline at end of file [-Wnewline-eof]
#endif /*_UART_CONFIG_H_*/
                          ^
UART_Program.c(17): warning: In file included from...
./GPIO_Interface.h(131): warning: no newline at end of file [-Wnewline-eof]
#endif /*_GPIO_INTERFACE_H_*/
                             ^
UART_Program.c(37): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_M_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(45): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PCE_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(56): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    ((UART[Copy_UARTChoice]) -> CR2) &= ~(((uint32) 0b11) << MUART_CR2_STOP_START_BIT);
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
          ^
./UART_Config.h(34): note: expanded from macro 'MUART_NO_OF_STOP_BITS'
#define MUART_NO_OF_STOP_BITS           MUART_ONE_STOP_BIT
                                        ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                   ^
./UART_Private.h(283): note: expanded from macro 'MUART_HALF_STOP_BIT'
#define MUART_HALF_STOP_BIT                         0b01
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                            ^
./UART_Config.h(34): note: expanded from macro 'MUART_NO_OF_STOP_BITS'
#define MUART_NO_OF_STOP_BITS           MUART_ONE_STOP_BIT
                                        ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                                                     ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                                                                             ^
./UART_Config.h(34): note: expanded from macro 'MUART_NO_OF_STOP_BITS'
#define MUART_NO_OF_STOP_BITS           MUART_ONE_STOP_BIT
                                        ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                                                                                                      ^
./UART_Private.h(285): note: expanded from macro 'MUART_ONE_HALF_STOP_BIT'
#define MUART_ONE_HALF_STOP_BIT                     0b11
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                                                                                                                                   ^
./UART_Config.h(34): note: expanded from macro 'MUART_NO_OF_STOP_BITS'
#define MUART_NO_OF_STOP_BITS           MUART_ONE_STOP_BIT
                                        ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(58): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
                                                                                                                                                                                            ^
./UART_Private.h(284): note: expanded from macro 'MUART_TWO_STOP_BIT'
#define MUART_TWO_STOP_BIT                          0b10
                                                    ^
UART_Program.c(59): warning: binary integer literals are a GNU extension [-Wgnu-binary-literal]
        ((UART[Copy_UARTChoice]) -> CR2) |= (((uint32) MUART_NO_OF_STOP_BITS) << MUART_CR2_STOP_START_BIT);
                                                       ^
./UART_Config.h(34): note: expanded from macro 'MUART_NO_OF_STOP_BITS'
#define MUART_NO_OF_STOP_BITS           MUART_ONE_STOP_BIT
                                        ^
./UART_Private.h(282): note: expanded from macro 'MUART_ONE_STOP_BIT'
#define MUART_ONE_STOP_BIT                          0b00
                                                    ^
UART_Program.c(67): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(75): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RXNEIE_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(84): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
    uint16 Loc_uint16Fraction = (uint16)(((Loc_float32UARTDIV - Loc_uint16Mantissa) * 16) + 0.5);
                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~  ~
UART_Program.c(91): warning: implicit conversion changes signedness: 'int' to 'uint32' (aka 'unsigned long') [-Wsign-conversion]
    ((UART[Copy_UARTChoice]) -> BRR) = (Loc_uint16Fraction << MUART_BRR_FRACTION_START_BIT) | (Loc_uint16Mantissa << MUART_BRR_MANTISSA_START_BIT);
                                     ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UART_Program.c(97): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(98): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(128): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(116): warning: while loop has empty body [-Wempty-body]
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
                                                                        ^
UART_Program.c(116): note: put the semicolon on a separate line to silence this warning
UART_Program.c(147): warning: while loop has empty body [-Wempty-body]
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
                                                                        ^
UART_Program.c(147): note: put the semicolon on a separate line to silence this warning
UART_Program.c(176): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(239): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(330): warning: implicit conversion loses integer precision: 'unsigned long' to 'uint16' (aka 'unsigned short') [-Wimplicit-int-conversion]
        MUART_TxChar(Copy_UARTChoice, (Copy_uint32Value + 48));
        ~~~~~~~~~~~~                   ~~~~~~~~~~~~~~~~~^~~~
UART_Program.c(364): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(365): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(354): warning: no previous prototype for function 'USART1_IRQHandler' [-Wmissing-prototypes]
void USART1_IRQHandler(void)
     ^
UART_Program.c(354): note: declare 'static' if the function is not intended to be used outside of this translation unit
void USART1_IRQHandler(void)
^
static 
UART_Program.c(377): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(378): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(367): warning: no previous prototype for function 'USART2_IRQHandler' [-Wmissing-prototypes]
void USART2_IRQHandler(void)
     ^
UART_Program.c(367): note: declare 'static' if the function is not intended to be used outside of this translation unit
void USART2_IRQHandler(void)
^
static 
UART_Program.c(391): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(392): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./BIT_MATH.h(15): note: expanded from macro 'CLR_BIT'
#define CLR_BIT(REG,BIT)                        (REG &= ~(1 << BIT))
                                                     ~~ ^~~~~~~~~~~
UART_Program.c(393): warning: no newline at end of file [-Wnewline-eof]
}
 ^
UART_Program.c(381): warning: no previous prototype for function 'USART3_IRQHandler' [-Wmissing-prototypes]
void USART3_IRQHandler(void)
     ^
UART_Program.c(381): note: declare 'static' if the function is not intended to be used outside of this translation unit
void USART3_IRQHandler(void)
^
static 
40 warnings generated.
compiling UART_Program.c...
linking...
Program Size: Code=2344 RO-data=272 RW-data=0 ZI-data=1648  
FromELF: creating hex file...
".\Objects\ADC_TEST.axf" - 0 Error(s), 157 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                http://www.keil.com/pack/ARM.CMSIS.5.9.0.pack
                ARM.CMSIS.5.9.0
                CMSIS (Common Microcontroller Software Interface Standard)
   * Component: CORE Version: 5.6.0

Package Vendor: Keil
                https://www.keil.com/pack/Keil.STM32F1xx_DFP.2.4.1.pack
                Keil.STM32F1xx_DFP.2.4.1
                STMicroelectronics STM32F1 Series Device Support, Drivers and Examples
   * Component: Startup Version: 1.0.0

<h2>Collection of Component include folders:</h2>
  .\RTE\Device\STM32F103C8
  .\RTE\_Target_1
  C:\Users\Ahmed\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include
  C:\Users\Ahmed\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE:5.6.0

   * Component: Keil::Device:Startup:1.0.0
      Include file:  RTE_Driver\Config\RTE_Device.h
      Source file:   Device\Source\ARM\STM32F1xx_OPT.s
      Source file:   Device\Source\ARM\startup_stm32f10x_md.s
      Source file:   Device\Source\system_stm32f10x.c
Build Time Elapsed:  00:00:01
</pre>
</body>
</html>
