
test18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b54  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c84  08000c8c  00010c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c84  08000c84  00010c8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c84  08000c84  00010c8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c84  08000c8c  00010c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c88  08000c88  00010c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000c8c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000c8c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c8c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010cb5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001183  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000064c  00000000  00000000  00011e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000114  00000000  00000000  00012650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015f8  00000000  00000000  00012764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ee3  00000000  00000000  00013d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000069b4  00000000  00000000  00014c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000498  00000000  00000000  0001b5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0001ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c6c 	.word	0x08000c6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c6c 	.word	0x08000c6c

08000170 <MGPIO_u8SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_u8SetPinMode(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinMode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	73fb      	strb	r3, [r7, #15]

    switch(Copy_u8PortID)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b02      	cmp	r3, #2
 800018a:	d07f      	beq.n	800028c <MGPIO_u8SetPinMode+0x11c>
 800018c:	2b02      	cmp	r3, #2
 800018e:	f300 80b8 	bgt.w	8000302 <MGPIO_u8SetPinMode+0x192>
 8000192:	2b00      	cmp	r3, #0
 8000194:	d002      	beq.n	800019c <MGPIO_u8SetPinMode+0x2c>
 8000196:	2b01      	cmp	r3, #1
 8000198:	d03c      	beq.n	8000214 <MGPIO_u8SetPinMode+0xa4>
 800019a:	e0b2      	b.n	8000302 <MGPIO_u8SetPinMode+0x192>
    {
        case GPIO_PORTA:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	2b07      	cmp	r3, #7
 80001a0:	d819      	bhi.n	80001d6 <MGPIO_u8SetPinMode+0x66>
            {
                GPIOA_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 80001a2:	4b5f      	ldr	r3, [pc, #380]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	79ba      	ldrb	r2, [r7, #6]
 80001a8:	0092      	lsls	r2, r2, #2
 80001aa:	210f      	movs	r1, #15
 80001ac:	fa01 f202 	lsl.w	r2, r1, r2
 80001b0:	43d2      	mvns	r2, r2
 80001b2:	4611      	mov	r1, r2
 80001b4:	4a5a      	ldr	r2, [pc, #360]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 80001b6:	400b      	ands	r3, r1
 80001b8:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80001ba:	4b59      	ldr	r3, [pc, #356]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	7979      	ldrb	r1, [r7, #5]
 80001c0:	79ba      	ldrb	r2, [r7, #6]
 80001c2:	0092      	lsls	r2, r2, #2
 80001c4:	fa01 f202 	lsl.w	r2, r1, r2
 80001c8:	4611      	mov	r1, r2
 80001ca:	4a55      	ldr	r2, [pc, #340]	; (8000320 <MGPIO_u8SetPinMode+0x1b0>)
 80001cc:	430b      	orrs	r3, r1
 80001ce:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80001d0:	2301      	movs	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
            {
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80001d4:	e098      	b.n	8000308 <MGPIO_u8SetPinMode+0x198>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	2b0f      	cmp	r3, #15
 80001da:	f200 8095 	bhi.w	8000308 <MGPIO_u8SetPinMode+0x198>
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80001de:	4b51      	ldr	r3, [pc, #324]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79ba      	ldrb	r2, [r7, #6]
 80001e4:	3a08      	subs	r2, #8
 80001e6:	0092      	lsls	r2, r2, #2
 80001e8:	210f      	movs	r1, #15
 80001ea:	fa01 f202 	lsl.w	r2, r1, r2
 80001ee:	43d2      	mvns	r2, r2
 80001f0:	4611      	mov	r1, r2
 80001f2:	4a4c      	ldr	r2, [pc, #304]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 80001f4:	400b      	ands	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80001f8:	4b4a      	ldr	r3, [pc, #296]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	7979      	ldrb	r1, [r7, #5]
 80001fe:	79ba      	ldrb	r2, [r7, #6]
 8000200:	3a08      	subs	r2, #8
 8000202:	fa01 f202 	lsl.w	r2, r1, r2
 8000206:	4611      	mov	r1, r2
 8000208:	4a46      	ldr	r2, [pc, #280]	; (8000324 <MGPIO_u8SetPinMode+0x1b4>)
 800020a:	430b      	orrs	r3, r1
 800020c:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 800020e:	2301      	movs	r3, #1
 8000210:	73fb      	strb	r3, [r7, #15]
            break;
 8000212:	e079      	b.n	8000308 <MGPIO_u8SetPinMode+0x198>
        }
        case GPIO_PORTB:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	2b07      	cmp	r3, #7
 8000218:	d819      	bhi.n	800024e <MGPIO_u8SetPinMode+0xde>
            {
                GPIOB_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 800021a:	4b43      	ldr	r3, [pc, #268]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	79ba      	ldrb	r2, [r7, #6]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	210f      	movs	r1, #15
 8000224:	fa01 f202 	lsl.w	r2, r1, r2
 8000228:	43d2      	mvns	r2, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a3e      	ldr	r2, [pc, #248]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 800022e:	400b      	ands	r3, r1
 8000230:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 8000232:	4b3d      	ldr	r3, [pc, #244]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	7979      	ldrb	r1, [r7, #5]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	0092      	lsls	r2, r2, #2
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a39      	ldr	r2, [pc, #228]	; (8000328 <MGPIO_u8SetPinMode+0x1b8>)
 8000244:	430b      	orrs	r3, r1
 8000246:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
            {
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOB_CRH |= ((Copy_u8PinMode) << (4 * (Copy_u8PinID-8)));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 800024c:	e05e      	b.n	800030c <MGPIO_u8SetPinMode+0x19c>
            else if(Copy_u8PinID <= GPIO_PIN15)
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	2b0f      	cmp	r3, #15
 8000252:	d85b      	bhi.n	800030c <MGPIO_u8SetPinMode+0x19c>
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 8000254:	4b35      	ldr	r3, [pc, #212]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	79ba      	ldrb	r2, [r7, #6]
 800025a:	3a08      	subs	r2, #8
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	210f      	movs	r1, #15
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	4611      	mov	r1, r2
 8000268:	4a30      	ldr	r2, [pc, #192]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 800026a:	400b      	ands	r3, r1
 800026c:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8PinMode) << (4 * (Copy_u8PinID-8)));
 800026e:	4b2f      	ldr	r3, [pc, #188]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	7979      	ldrb	r1, [r7, #5]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	3a08      	subs	r2, #8
 8000278:	0092      	lsls	r2, r2, #2
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a2a      	ldr	r2, [pc, #168]	; (800032c <MGPIO_u8SetPinMode+0x1bc>)
 8000282:	430b      	orrs	r3, r1
 8000284:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000286:	2301      	movs	r3, #1
 8000288:	73fb      	strb	r3, [r7, #15]
            break;
 800028a:	e03f      	b.n	800030c <MGPIO_u8SetPinMode+0x19c>
        }
        case GPIO_PORTC:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d819      	bhi.n	80002c6 <MGPIO_u8SetPinMode+0x156>
            {
                GPIOC_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 8000292:	4b27      	ldr	r3, [pc, #156]	; (8000330 <MGPIO_u8SetPinMode+0x1c0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a22      	ldr	r2, [pc, #136]	; (8000330 <MGPIO_u8SetPinMode+0x1c0>)
 80002a6:	400b      	ands	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <MGPIO_u8SetPinMode+0x1c0>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	7979      	ldrb	r1, [r7, #5]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <MGPIO_u8SetPinMode+0x1c0>)
 80002bc:	430b      	orrs	r3, r1
 80002be:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80002c0:	2301      	movs	r3, #1
 80002c2:	73fb      	strb	r3, [r7, #15]

                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80002c4:	e024      	b.n	8000310 <MGPIO_u8SetPinMode+0x1a0>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	2b0f      	cmp	r3, #15
 80002ca:	d821      	bhi.n	8000310 <MGPIO_u8SetPinMode+0x1a0>
                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80002cc:	4b19      	ldr	r3, [pc, #100]	; (8000334 <MGPIO_u8SetPinMode+0x1c4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	79ba      	ldrb	r2, [r7, #6]
 80002d2:	3a08      	subs	r2, #8
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	210f      	movs	r1, #15
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4611      	mov	r1, r2
 80002e0:	4a14      	ldr	r2, [pc, #80]	; (8000334 <MGPIO_u8SetPinMode+0x1c4>)
 80002e2:	400b      	ands	r3, r1
 80002e4:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MGPIO_u8SetPinMode+0x1c4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	7979      	ldrb	r1, [r7, #5]
 80002ec:	79ba      	ldrb	r2, [r7, #6]
 80002ee:	3a08      	subs	r2, #8
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <MGPIO_u8SetPinMode+0x1c4>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80002fc:	2301      	movs	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
            break;
 8000300:	e006      	b.n	8000310 <MGPIO_u8SetPinMode+0x1a0>
        }
        default:
        {
            Loc_u8FuncStatus = E_NOT_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	73fb      	strb	r3, [r7, #15]
            break;
 8000306:	e004      	b.n	8000312 <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000308:	bf00      	nop
 800030a:	e002      	b.n	8000312 <MGPIO_u8SetPinMode+0x1a2>
            break;
 800030c:	bf00      	nop
 800030e:	e000      	b.n	8000312 <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000310:	bf00      	nop
        }
    }
    return Loc_u8FuncStatus;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40010800 	.word	0x40010800
 8000324:	40010804 	.word	0x40010804
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010c04 	.word	0x40010c04
 8000330:	40011000 	.word	0x40011000
 8000334:	40011004 	.word	0x40011004

08000338 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000338:	b5b0      	push	{r4, r5, r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	u16 tmpreg = 0, freqrange = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	82fb      	strh	r3, [r7, #22]
 8000346:	2300      	movs	r3, #0
 8000348:	82bb      	strh	r3, [r7, #20]
	u32 pclk1 = 8000000;
 800034a:	4b59      	ldr	r3, [pc, #356]	; (80004b0 <MCAL_I2C_Init+0x178>)
 800034c:	613b      	str	r3, [r7, #16]
	u16 result = 0 ;
 800034e:	2300      	movs	r3, #0
 8000350:	81fb      	strh	r3, [r7, #14]

	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000352:	4b58      	ldr	r3, [pc, #352]	; (80004b4 <MCAL_I2C_Init+0x17c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a57      	ldr	r2, [pc, #348]	; (80004b4 <MCAL_I2C_Init+0x17c>)
 8000358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800035c:	6013      	str	r3, [r2, #0]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a54      	ldr	r2, [pc, #336]	; (80004b4 <MCAL_I2C_Init+0x17c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d10e      	bne.n	8000384 <MCAL_I2C_Init+0x4c>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8000366:	4a54      	ldr	r2, [pc, #336]	; (80004b8 <MCAL_I2C_Init+0x180>)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	4614      	mov	r4, r2
 800036c:	461d      	mov	r5, r3
 800036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000372:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000376:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C1_EN);
 800037a:	2115      	movs	r1, #21
 800037c:	2002      	movs	r0, #2
 800037e:	f000 fb27 	bl	80009d0 <MRCC_u8EnablePeripheralClock>
 8000382:	e00e      	b.n	80003a2 <MCAL_I2C_Init+0x6a>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8000384:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <MCAL_I2C_Init+0x180>)
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	f103 0418 	add.w	r4, r3, #24
 800038c:	4615      	mov	r5, r2
 800038e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000396:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C2_EN);
 800039a:	2116      	movs	r1, #22
 800039c:	2002      	movs	r0, #2
 800039e:	f000 fb17 	bl	80009d0 <MRCC_u8EnablePeripheralClock>
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	88db      	ldrh	r3, [r3, #6]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d178      	bne.n	800049c <MCAL_I2C_Init+0x164>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80003b0:	8afb      	ldrh	r3, [r7, #22]
 80003b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003b6:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 80003b8:	4b3d      	ldr	r3, [pc, #244]	; (80004b0 <MCAL_I2C_Init+0x178>)
 80003ba:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (u16) (pclk1 / 1000000) ;
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	4a3f      	ldr	r2, [pc, #252]	; (80004bc <MCAL_I2C_Init+0x184>)
 80003c0:	fba2 2303 	umull	r2, r3, r2, r3
 80003c4:	0c9b      	lsrs	r3, r3, #18
 80003c6:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 80003c8:	8afa      	ldrh	r2, [r7, #22]
 80003ca:	8abb      	ldrh	r3, [r7, #20]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80003d0:	8afa      	ldrh	r2, [r7, #22]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f023 0201 	bic.w	r2, r3, #1
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a35      	ldr	r2, [pc, #212]	; (80004c0 <MCAL_I2C_Init+0x188>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d004      	beq.n	80003fa <MCAL_I2C_Init+0xc2>
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <MCAL_I2C_Init+0x18c>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d112      	bne.n	8000420 <MCAL_I2C_Init+0xe8>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (u16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	693a      	ldr	r2, [r7, #16]
 8000402:	fbb2 f3f3 	udiv	r3, r2, r3
 8000406:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8000408:	8afa      	ldrh	r2, [r7, #22]
 800040a:	89fb      	ldrh	r3, [r7, #14]
 800040c:	4313      	orrs	r3, r2
 800040e:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000416:	8abb      	ldrh	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	461a      	mov	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (u16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	8a1a      	ldrh	r2, [r3, #16]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	8a5b      	ldrh	r3, [r3, #18]
 800042e:	4313      	orrs	r3, r2
 8000430:	b29a      	uxth	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	88db      	ldrh	r3, [r3, #6]
 8000436:	4313      	orrs	r3, r2
 8000438:	b29a      	uxth	r2, r3
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	889b      	ldrh	r3, [r3, #4]
 800043e:	4313      	orrs	r3, r2
 8000440:	b29a      	uxth	r2, r3
 8000442:	8afb      	ldrh	r3, [r7, #22]
 8000444:	4313      	orrs	r3, r2
 8000446:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8000448:	8afa      	ldrh	r2, [r7, #22]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 800044e:	2300      	movs	r3, #0
 8000450:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	891b      	ldrh	r3, [r3, #8]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d10d      	bne.n	8000476 <MCAL_I2C_Init+0x13e>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 800045a:	2301      	movs	r3, #1
 800045c:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	899b      	ldrh	r3, [r3, #12]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	b21a      	sxth	r2, r3
 8000466:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800046a:	4313      	orrs	r3, r2
 800046c:	b21b      	sxth	r3, r3
 800046e:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000470:	8afa      	ldrh	r2, [r7, #22]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 8000476:	2300      	movs	r3, #0
 8000478:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	895b      	ldrh	r3, [r3, #10]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	b21a      	sxth	r2, r3
 8000482:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000486:	4313      	orrs	r3, r2
 8000488:	b21b      	sxth	r3, r3
 800048a:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	89da      	ldrh	r2, [r3, #14]
 8000490:	8afb      	ldrh	r3, [r7, #22]
 8000492:	4313      	orrs	r3, r2
 8000494:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000496:	8afa      	ldrh	r2, [r7, #22]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f043 0201 	orr.w	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bdb0      	pop	{r4, r5, r7, pc}
 80004b0:	007a1200 	.word	0x007a1200
 80004b4:	40005400 	.word	0x40005400
 80004b8:	2000001c 	.word	0x2000001c
 80004bc:	431bde83 	.word	0x431bde83
 80004c0:	0007a120 	.word	0x0007a120
 80004c4:	000186a0 	.word	0x000186a0

080004c8 <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <MCAL_I2C_RESET+0x18>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a03      	ldr	r2, [pc, #12]	; (80004e0 <MCAL_I2C_RESET+0x18>)
 80004d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40005400 	.word	0x40005400

080004e4 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_u8DisableInterrupt(NVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d10a      	bne.n	800050a <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN8, GPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80004f4:	220e      	movs	r2, #14
 80004f6:	2108      	movs	r1, #8
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff fe39 	bl	8000170 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN9, GPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80004fe:	220e      	movs	r2, #14
 8000500:	2109      	movs	r1, #9
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff fe34 	bl	8000170 <MGPIO_u8SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8000508:	e00d      	b.n	8000526 <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d109      	bne.n	8000526 <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000512:	220d      	movs	r2, #13
 8000514:	210a      	movs	r1, #10
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff fe2a 	bl	8000170 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 800051c:	220d      	movs	r2, #13
 800051e:	210b      	movs	r1, #11
 8000520:	2001      	movs	r0, #1
 8000522:	f7ff fe25 	bl	8000170 <MGPIO_u8SetPinMode>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40005400 	.word	0x40005400
 8000534:	40005800 	.word	0x40005800

08000538 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, u16 devAddr, u8 *dataOut, u32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	460b      	mov	r3, r1
 8000546:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 800054c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000550:	461a      	mov	r2, r3
 8000552:	2101      	movs	r1, #1
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f8cd 	bl	80006f4 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 800055a:	bf00      	nop
 800055c:	2101      	movs	r1, #1
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f000 f8f0 	bl	8000744 <I2C_GetFlagStatus>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f8      	beq.n	800055c <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 800056a:	897b      	ldrh	r3, [r7, #10]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f000 f96d 	bl	8000850 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000576:	bf00      	nop
 8000578:	2102      	movs	r1, #2
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f000 f8e2 	bl	8000744 <I2C_GetFlagStatus>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f8      	beq.n	8000578 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000586:	bf00      	nop
 8000588:	4919      	ldr	r1, [pc, #100]	; (80005f0 <MCAL_I2C_MASTER_TX+0xb8>)
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f8da 	bl	8000744 <I2C_GetFlagStatus>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f8      	beq.n	8000588 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e018      	b.n	80005ce <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 800059c:	bf00      	nop
 800059e:	2104      	movs	r1, #4
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 f8cf 	bl	8000744 <I2C_GetFlagStatus>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f8      	beq.n	800059e <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	105b      	asrs	r3, r3, #1
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f000 f9a0 	bl	80008fa <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3301      	adds	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d8e2      	bhi.n	800059c <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 80005d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 80005de:	2101      	movs	r1, #1
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f954 	bl	800088e <I2C_GenerateSTOP>
	}
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	00070080 	.word	0x00070080

080005f4 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, u16 devAddr, u8 *dataOut, u32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	460b      	mov	r3, r1
 8000602:	817b      	strh	r3, [r7, #10]
	u8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4a39      	ldr	r2, [pc, #228]	; (80006ec <MCAL_I2C_MASTER_RX+0xf8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800061c:	461a      	mov	r2, r3
 800061e:	2101      	movs	r1, #1
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f000 f867 	bl	80006f4 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000626:	bf00      	nop
 8000628:	2101      	movs	r1, #1
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 f88a 	bl	8000744 <I2C_GetFlagStatus>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f8      	beq.n	8000628 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8000636:	897b      	ldrh	r3, [r7, #10]
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f000 f907 	bl	8000850 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000642:	bf00      	nop
 8000644:	2102      	movs	r1, #2
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 f87c 	bl	8000744 <I2C_GetFlagStatus>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f8      	beq.n	8000644 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8000652:	2101      	movs	r1, #1
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f935 	bl	80008c4 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	601a      	str	r2, [r3, #0]
	u8 sr1 = I2Cx->SR1;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	74bb      	strb	r3, [r7, #18]
	u8 sr2 = I2Cx->SR2;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d01c      	beq.n	80006b2 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3b01      	subs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	e011      	b.n	80006a4 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000680:	bf00      	nop
 8000682:	2103      	movs	r1, #3
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 f85d 	bl	8000744 <I2C_GetFlagStatus>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f8      	beq.n	8000682 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6919      	ldr	r1, [r3, #16]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	b2ca      	uxtb	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	daea      	bge.n	8000680 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 80006aa:	2100      	movs	r1, #0
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f909 	bl	80008c4 <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 80006b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d103      	bne.n	80006c2 <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 80006ba:	2101      	movs	r1, #1
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f000 f8e6 	bl	800088e <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 80006c2:	7cfa      	ldrb	r2, [r7, #19]
 80006c4:	490a      	ldr	r1, [pc, #40]	; (80006f0 <MCAL_I2C_MASTER_RX+0xfc>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3310      	adds	r3, #16
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006d8:	d103      	bne.n	80006e2 <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 80006da:	2101      	movs	r1, #1
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f000 f8f1 	bl	80008c4 <I2C_ACKnowledgeConfig>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40005400 	.word	0x40005400
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
 8000700:	4613      	mov	r3, r2
 8000702:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8000704:	78bb      	ldrb	r3, [r7, #2]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d007      	beq.n	800071a <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 800070a:	bf00      	nop
 800070c:	2100      	movs	r1, #0
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f818 	bl	8000744 <I2C_GetFlagStatus>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f8      	bne.n	800070c <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d006      	beq.n	800072e <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 800072c:	e005      	b.n	800073a <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	//volatile u32 dummyRead;
	FlagStatus bitstatus = RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	75fb      	strb	r3, [r7, #23]
	u32 flag1 = 0, flag2 = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
	u32 lastevent = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
	switch(flag)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d811      	bhi.n	8000788 <I2C_GetFlagStatus+0x44>
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d86a      	bhi.n	8000840 <I2C_GetFlagStatus+0xfc>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <I2C_GetFlagStatus+0x2c>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000793 	.word	0x08000793
 8000774:	080007ab 	.word	0x080007ab
 8000778:	080007c3 	.word	0x080007c3
 800077c:	08000829 	.word	0x08000829
 8000780:	08000811 	.word	0x08000811
 8000784:	08000811 	.word	0x08000811
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4a30      	ldr	r2, [pc, #192]	; (800084c <I2C_GetFlagStatus+0x108>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d024      	beq.n	80007da <I2C_GetFlagStatus+0x96>
 8000790:	e056      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 800079e:	2301      	movs	r3, #1
 80007a0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 80007a2:	e04d      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	75fb      	strb	r3, [r7, #23]
		break;
 80007a8:	e04a      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 80007b6:	2301      	movs	r3, #1
 80007b8:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 80007ba:	e041      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	75fb      	strb	r3, [r7, #23]
		break;
 80007c0:	e03e      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <I2C_GetFlagStatus+0x90>
			bitstatus = SET;
 80007ce:	2301      	movs	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 80007d2:	e035      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	75fb      	strb	r3, [r7, #23]
		break;
 80007d8:	e032      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	041b      	lsls	r3, r3, #16
 80007ea:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((u32)0x00FFFFFF);
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007f6:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d102      	bne.n	800080a <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8000804:	2301      	movs	r3, #1
 8000806:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000808:	e01a      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
		break;
 800080e:	e017      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 800081c:	2301      	movs	r3, #1
 800081e:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000820:	e00e      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]
		break;
 8000826:	e00b      	b.n	8000840 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8000834:	2301      	movs	r3, #1
 8000836:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000838:	e001      	b.n	800083e <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
		break;
 800083e:	bf00      	nop
	}
	}
	return bitstatus;
 8000840:	7dfb      	ldrb	r3, [r7, #23]
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	00070080 	.word	0x00070080

08000850 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, u16 Address, I2C_Direction Direction)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
 800085c:	4613      	mov	r3, r2
 800085e:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	807b      	strh	r3, [r7, #2]
 8000874:	e003      	b.n	800087e <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	611a      	str	r2, [r3, #16]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 80008ac:	e005      	b.n	80008ba <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 80008e2:	e005      	b.n	80008f0 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <delay_ms>:

// Function to provide a delay in milliseconds
void delay_ms(u32 milliseconds) {
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	u32 loop_count = milliseconds * 1000;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (u32 i = 0; i < loop_count; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e002      	b.n	800091a <delay_ms+0x20>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	429a      	cmp	r2, r3
 8000920:	d3f8      	bcc.n	8000914 <delay_ms+0x1a>
		// Do nothing
	}
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <MRCC_u8InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_u8InitClock(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_HSI_CLOCK
        //Enable High-Speed Internal Clock
        SET_BIT(RCC_CR, RCC_CR_HSION);
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MRCC_u8InitClock+0x98>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MRCC_u8InitClock+0x98>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]
        //Wait until HSI Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_HSIRDY) == 0);
 8000940:	bf00      	nop
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MRCC_u8InitClock+0x98>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f9      	beq.n	8000942 <MRCC_u8InitClock+0x12>

        //Set System Clock Source to be HSI Clock
        CLR_BIT(RCC_CFGR, RCC_CFGR_SW_START);
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	6013      	str	r3, [r2, #0]
        CLR_BIT(RCC_CFGR, (RCC_CFGR_SW_START + 1));
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MRCC_u8InitClock+0x9c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000960:	f023 0302 	bic.w	r3, r3, #2
 8000964:	6013      	str	r3, [r2, #0]

        //Enable Phase-locked loop Clock
        SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MRCC_u8InitClock+0x98>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MRCC_u8InitClock+0x98>)
 800096c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000970:	6013      	str	r3, [r2, #0]
        //Wait until PLL Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_PLLRDY) == 0);
 8000972:	bf00      	nop
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MRCC_u8InitClock+0x98>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0f9      	beq.n	8000974 <MRCC_u8InitClock+0x44>

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    RCC_CFGR &= ~(((u32)0b1111) << (RCC_CFGR_HPRE_START));
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a11      	ldr	r2, [pc, #68]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800098a:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_HPRE_START));
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MRCC_u8InitClock+0x9c>)
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE1_START));
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MRCC_u8InitClock+0x9c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <MRCC_u8InitClock+0x9c>)
 800099a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800099e:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE1_START));
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((u32)0b111) << (RCC_CFGR_PPRE2_START));
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009b2:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((u32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE2_START));
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <MRCC_u8InitClock+0x9c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6013      	str	r3, [r2, #0]
    return E_OK;
 80009bc:	2301      	movs	r3, #1
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40021004 	.word	0x40021004

080009d0 <MRCC_u8EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_u8EnablePeripheralClock(u8 Copy_u8BusID, u8 Copy_u8Peripheral)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_u8ErrorCheck = E_NOT_OK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
    switch(Copy_u8BusID)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d020      	beq.n	8000a2c <MRCC_u8EnablePeripheralClock+0x5c>
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	dc2b      	bgt.n	8000a46 <MRCC_u8EnablePeripheralClock+0x76>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d002      	beq.n	80009f8 <MRCC_u8EnablePeripheralClock+0x28>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d00d      	beq.n	8000a12 <MRCC_u8EnablePeripheralClock+0x42>
 80009f6:	e026      	b.n	8000a46 <MRCC_u8EnablePeripheralClock+0x76>
    {
        case RCC_AHB:
        {
            SET_BIT(RCC_AHBENR, Copy_u8Peripheral);
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MRCC_u8EnablePeripheralClock+0x88>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <MRCC_u8EnablePeripheralClock+0x88>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a10:	e01c      	b.n	8000a4c <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB1:
        {
            SET_BIT(RCC_APB1ENR, Copy_u8Peripheral);
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MRCC_u8EnablePeripheralClock+0x8c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <MRCC_u8EnablePeripheralClock+0x8c>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
            break;
 8000a2a:	e00f      	b.n	8000a4c <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB2:
        {
            SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MRCC_u8EnablePeripheralClock+0x90>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <MRCC_u8EnablePeripheralClock+0x90>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
            break;
 8000a44:	e002      	b.n	8000a4c <MRCC_u8EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_u8ErrorCheck = E_NOT_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
            break;
 8000a4a:	bf00      	nop
        }
    }
    return Loc_u8ErrorCheck;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021014 	.word	0x40021014
 8000a5c:	4002101c 	.word	0x4002101c
 8000a60:	40021018 	.word	0x40021018

08000a64 <MSTK_vStopTimer>:
{
	SET_BIT(STK->CTRL, STK_ENABLE);
}

void MSTK_vStopTimer(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	CLR_BIT(STK->CTRL, STK_ENABLE);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MSTK_vStopTimer+0x18>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <MSTK_vStopTimer+0x18>)
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <SysTick_Handler>:
{
	return  (STK->VAL) ;
}

void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if(G_vCallBack != 0)
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SysTick_Handler+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <SysTick_Handler+0x12>
	{
		G_vCallBack();
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SysTick_Handler+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4798      	blx	r3
	}
	if(G_u8Flag == SINGLE)
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SysTick_Handler+0x2c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <SysTick_Handler+0x24>
	{
		G_u8Flag = PERIODIC;
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Handler+0x2c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
		MSTK_vStopTimer();
 8000aa0:	f7ff ffe0 	bl	8000a64 <MSTK_vStopTimer>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000050 	.word	0x20000050
 8000aac:	2000004c 	.word	0x2000004c

08000ab0 <main>:

u8 ch2[2];
u8 ch[3];

int main()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af02      	add	r7, sp, #8
	MRCC_u8InitClock();
 8000ab6:	f7ff ff3b 	bl	8000930 <MRCC_u8InitClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_IOPB_EN);
 8000aba:	2103      	movs	r1, #3
 8000abc:	2003      	movs	r0, #3
 8000abe:	f7ff ff87 	bl	80009d0 <MRCC_u8EnablePeripheralClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_AFIO_EN);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f7ff ff83 	bl	80009d0 <MRCC_u8EnablePeripheralClock>
	MAFIO_MAPR_R |= (1 << MAFIO_MAPR_I2C1_REMAP_BIT);
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <main+0x10c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <main+0x10c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6013      	str	r3, [r2, #0]

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	82fb      	strh	r3, [r7, #22]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	82bb      	strh	r3, [r7, #20]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <main+0x110>)
 8000ae2:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	817b      	strh	r3, [r7, #10]
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8000aec:	2300      	movs	r3, #0
 8000aee:	813b      	strh	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <main+0x114>)
 8000af2:	f7ff fcf7 	bl	80004e4 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4832      	ldr	r0, [pc, #200]	; (8000bc4 <main+0x114>)
 8000afc:	f7ff fc1c 	bl	8000338 <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 8000b00:	f7ff fce2 	bl	80004c8 <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	482e      	ldr	r0, [pc, #184]	; (8000bc4 <main+0x114>)
 8000b0a:	f7ff fc15 	bl	8000338 <MCAL_I2C_Init>

	u16 Slave_address = 0x48;
 8000b0e:	2348      	movs	r3, #72	; 0x48
 8000b10:	83fb      	strh	r3, [r7, #30]
	u16 reading;
	ch[0] = 0x01;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <main+0x118>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
	ch[1] = 0xc1;
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <main+0x118>)
 8000b1a:	22c1      	movs	r2, #193	; 0xc1
 8000b1c:	705a      	strb	r2, [r3, #1]
	ch[2] = 0b11100011;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <main+0x118>)
 8000b20:	22e3      	movs	r2, #227	; 0xe3
 8000b22:	709a      	strb	r2, [r3, #2]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 8000b24:	8bf9      	ldrh	r1, [r7, #30]
 8000b26:	2300      	movs	r3, #0
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2303      	movs	r3, #3
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <main+0x118>)
 8000b32:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <main+0x114>)
 8000b34:	f7ff fd00 	bl	8000538 <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <main+0x118>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8000b3e:	8bf9      	ldrh	r1, [r7, #30]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	2300      	movs	r3, #0
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <main+0x118>)
 8000b4c:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <main+0x114>)
 8000b4e:	f7ff fcf3 	bl	8000538 <MCAL_I2C_MASTER_TX>
	delay_ms(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f7ff fed1 	bl	80008fa <delay_ms>
	while(1)
	{
		ch[0] = 0b00000001;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <main+0x118>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		ch[1] = 0b11000011;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <main+0x118>)
 8000b60:	22c3      	movs	r2, #195	; 0xc3
 8000b62:	705a      	strb	r2, [r3, #1]
		ch[2] = 0b10000011;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <main+0x118>)
 8000b66:	2283      	movs	r2, #131	; 0x83
 8000b68:	709a      	strb	r2, [r3, #2]
		MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 8000b6a:	8bf9      	ldrh	r1, [r7, #30]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2303      	movs	r3, #3
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <main+0x118>)
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <main+0x114>)
 8000b7a:	f7ff fcdd 	bl	8000538 <MCAL_I2C_MASTER_TX>
		ch[0] = 0x00;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <main+0x118>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
		MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8000b84:	8bf9      	ldrh	r1, [r7, #30]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <main+0x118>)
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <main+0x114>)
 8000b94:	f7ff fcd0 	bl	8000538 <MCAL_I2C_MASTER_TX>
		delay_ms(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f7ff feae 	bl	80008fa <delay_ms>
		MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch2 , 2, With_Stop,Start);
 8000b9e:	8bf9      	ldrh	r1, [r7, #30]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2302      	movs	r3, #2
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <main+0x11c>)
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <main+0x114>)
 8000bae:	f7ff fd21 	bl	80005f4 <MCAL_I2C_MASTER_RX>
		delay_ms(1000);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb6:	f7ff fea0 	bl	80008fa <delay_ms>
		ch[0] = 0b00000001;
 8000bba:	e7cd      	b.n	8000b58 <main+0xa8>
 8000bbc:	40010004 	.word	0x40010004
 8000bc0:	000186a0 	.word	0x000186a0
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	20000058 	.word	0x20000058
 8000bcc:	20000054 	.word	0x20000054

08000bd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfe:	f000 f811 	bl	8000c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff ff55 	bl	8000ab0 <main>

08000c06 <LoopForever>:

LoopForever:
  b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c14:	08000c8c 	.word	0x08000c8c
  ldr r2, =_sbss
 8000c18:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c1c:	2000005c 	.word	0x2000005c

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <__libc_init_array>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	2600      	movs	r6, #0
 8000c28:	4d0c      	ldr	r5, [pc, #48]	; (8000c5c <__libc_init_array+0x38>)
 8000c2a:	4c0d      	ldr	r4, [pc, #52]	; (8000c60 <__libc_init_array+0x3c>)
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	10a4      	asrs	r4, r4, #2
 8000c30:	42a6      	cmp	r6, r4
 8000c32:	d109      	bne.n	8000c48 <__libc_init_array+0x24>
 8000c34:	f000 f81a 	bl	8000c6c <_init>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	4d0a      	ldr	r5, [pc, #40]	; (8000c64 <__libc_init_array+0x40>)
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <__libc_init_array+0x44>)
 8000c3e:	1b64      	subs	r4, r4, r5
 8000c40:	10a4      	asrs	r4, r4, #2
 8000c42:	42a6      	cmp	r6, r4
 8000c44:	d105      	bne.n	8000c52 <__libc_init_array+0x2e>
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4c:	4798      	blx	r3
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7ee      	b.n	8000c30 <__libc_init_array+0xc>
 8000c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c56:	4798      	blx	r3
 8000c58:	3601      	adds	r6, #1
 8000c5a:	e7f2      	b.n	8000c42 <__libc_init_array+0x1e>
 8000c5c:	08000c84 	.word	0x08000c84
 8000c60:	08000c84 	.word	0x08000c84
 8000c64:	08000c84 	.word	0x08000c84
 8000c68:	08000c88 	.word	0x08000c88

08000c6c <_init>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	bf00      	nop
 8000c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c72:	bc08      	pop	{r3}
 8000c74:	469e      	mov	lr, r3
 8000c76:	4770      	bx	lr

08000c78 <_fini>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr
