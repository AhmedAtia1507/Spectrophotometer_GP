
Spectro_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c608  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800c738  0800c738  0000d738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdc0  0800cdc0  0000e680  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdc0  0800cdc0  0000ddc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc8  0800cdc8  0000e680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc8  0800cdc8  0000ddc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdcc  0800cdcc  0000ddcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000680  20000000  0800cdd0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000680  0800d450  0000e680  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800d450  0000ea74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e680  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a4  00000000  00000000  0000e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  00017d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000440e  00000000  00000000  0001a066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0001e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000838  00000000  00000000  0001edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000546a  00000000  00000000  0001f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009518  00000000  00000000  00024a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00014ba3  00000000  00000000  0002dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00042b4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e38  00000000  00000000  00042b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000680 	.word	0x20000680
 800014c:	00000000 	.word	0x00000000
 8000150:	0800c720 	.word	0x0800c720

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000684 	.word	0x20000684
 800016c:	0800c720 	.word	0x0800c720

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	@ 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	@ 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	3a01      	subs	r2, #1
 8000c06:	bf28      	it	cs
 8000c08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c0c:	d2ed      	bcs.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dba:	2afd      	cmp	r2, #253	@ 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	@ 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	@ 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	@ 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_ldivmod>:
 8001180:	b97b      	cbnz	r3, 80011a2 <__aeabi_ldivmod+0x22>
 8001182:	b972      	cbnz	r2, 80011a2 <__aeabi_ldivmod+0x22>
 8001184:	2900      	cmp	r1, #0
 8001186:	bfbe      	ittt	lt
 8001188:	2000      	movlt	r0, #0
 800118a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800118e:	e006      	blt.n	800119e <__aeabi_ldivmod+0x1e>
 8001190:	bf08      	it	eq
 8001192:	2800      	cmpeq	r0, #0
 8001194:	bf1c      	itt	ne
 8001196:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800119a:	f04f 30ff 	movne.w	r0, #4294967295
 800119e:	f000 b9d1 	b.w	8001544 <__aeabi_idiv0>
 80011a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011aa:	2900      	cmp	r1, #0
 80011ac:	db09      	blt.n	80011c2 <__aeabi_ldivmod+0x42>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db1a      	blt.n	80011e8 <__aeabi_ldivmod+0x68>
 80011b2:	f000 f86b 	bl	800128c <__udivmoddi4>
 80011b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011be:	b004      	add	sp, #16
 80011c0:	4770      	bx	lr
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db1b      	blt.n	8001204 <__aeabi_ldivmod+0x84>
 80011cc:	f000 f85e 	bl	800128c <__udivmoddi4>
 80011d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d8:	b004      	add	sp, #16
 80011da:	4240      	negs	r0, r0
 80011dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	4770      	bx	lr
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	f000 f84d 	bl	800128c <__udivmoddi4>
 80011f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fa:	b004      	add	sp, #16
 80011fc:	4240      	negs	r0, r0
 80011fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f83f 	bl	800128c <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4252      	negs	r2, r2
 800121a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121e:	4770      	bx	lr

08001220 <__aeabi_d2lz>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f7ff fbe1 	bl	80009f0 <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x1c>
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4620      	mov	r0, r4
 800123e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f957 	bl	800050c <__aeabi_dmul>
 800125e:	f7ff fc05 	bl	8000a6c <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f8d8 	bl	8000418 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f94e 	bl	800050c <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ff90 	bl	800019c <__aeabi_dsub>
 800127c:	f7ff fbf6 	bl	8000a6c <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <__udivmoddi4>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	9d08      	ldr	r5, [sp, #32]
 8001292:	460c      	mov	r4, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d14e      	bne.n	8001336 <__udivmoddi4+0xaa>
 8001298:	4694      	mov	ip, r2
 800129a:	458c      	cmp	ip, r1
 800129c:	4686      	mov	lr, r0
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	d962      	bls.n	800136a <__udivmoddi4+0xde>
 80012a4:	b14a      	cbz	r2, 80012ba <__udivmoddi4+0x2e>
 80012a6:	f1c2 0320 	rsb	r3, r2, #32
 80012aa:	4091      	lsls	r1, r2
 80012ac:	fa20 f303 	lsr.w	r3, r0, r3
 80012b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b4:	4319      	orrs	r1, r3
 80012b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80012ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012be:	fbb1 f4f7 	udiv	r4, r1, r7
 80012c2:	fb07 1114 	mls	r1, r7, r4, r1
 80012c6:	fa1f f68c 	uxth.w	r6, ip
 80012ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	fb04 f106 	mul.w	r1, r4, r6
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d90a      	bls.n	80012f0 <__udivmoddi4+0x64>
 80012da:	eb1c 0303 	adds.w	r3, ip, r3
 80012de:	f104 30ff 	add.w	r0, r4, #4294967295
 80012e2:	f080 8110 	bcs.w	8001506 <__udivmoddi4+0x27a>
 80012e6:	4299      	cmp	r1, r3
 80012e8:	f240 810d 	bls.w	8001506 <__udivmoddi4+0x27a>
 80012ec:	3c02      	subs	r4, #2
 80012ee:	4463      	add	r3, ip
 80012f0:	1a59      	subs	r1, r3, r1
 80012f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80012f6:	fb07 1110 	mls	r1, r7, r0, r1
 80012fa:	fb00 f606 	mul.w	r6, r0, r6
 80012fe:	fa1f f38e 	uxth.w	r3, lr
 8001302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001306:	429e      	cmp	r6, r3
 8001308:	d90a      	bls.n	8001320 <__udivmoddi4+0x94>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001312:	f080 80fa 	bcs.w	800150a <__udivmoddi4+0x27e>
 8001316:	429e      	cmp	r6, r3
 8001318:	f240 80f7 	bls.w	800150a <__udivmoddi4+0x27e>
 800131c:	4463      	add	r3, ip
 800131e:	3802      	subs	r0, #2
 8001320:	2100      	movs	r1, #0
 8001322:	1b9b      	subs	r3, r3, r6
 8001324:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001328:	b11d      	cbz	r5, 8001332 <__udivmoddi4+0xa6>
 800132a:	40d3      	lsrs	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	e9c5 3200 	strd	r3, r2, [r5]
 8001332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001336:	428b      	cmp	r3, r1
 8001338:	d905      	bls.n	8001346 <__udivmoddi4+0xba>
 800133a:	b10d      	cbz	r5, 8001340 <__udivmoddi4+0xb4>
 800133c:	e9c5 0100 	strd	r0, r1, [r5]
 8001340:	2100      	movs	r1, #0
 8001342:	4608      	mov	r0, r1
 8001344:	e7f5      	b.n	8001332 <__udivmoddi4+0xa6>
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d146      	bne.n	80013dc <__udivmoddi4+0x150>
 800134e:	42a3      	cmp	r3, r4
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0xcc>
 8001352:	4290      	cmp	r0, r2
 8001354:	f0c0 80ee 	bcc.w	8001534 <__udivmoddi4+0x2a8>
 8001358:	1a86      	subs	r6, r0, r2
 800135a:	eb64 0303 	sbc.w	r3, r4, r3
 800135e:	2001      	movs	r0, #1
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0e6      	beq.n	8001332 <__udivmoddi4+0xa6>
 8001364:	e9c5 6300 	strd	r6, r3, [r5]
 8001368:	e7e3      	b.n	8001332 <__udivmoddi4+0xa6>
 800136a:	2a00      	cmp	r2, #0
 800136c:	f040 808f 	bne.w	800148e <__udivmoddi4+0x202>
 8001370:	eba1 040c 	sub.w	r4, r1, ip
 8001374:	2101      	movs	r1, #1
 8001376:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800137a:	fa1f f78c 	uxth.w	r7, ip
 800137e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001382:	fb08 4416 	mls	r4, r8, r6, r4
 8001386:	fb07 f006 	mul.w	r0, r7, r6
 800138a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800138e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d908      	bls.n	80013a8 <__udivmoddi4+0x11c>
 8001396:	eb1c 0303 	adds.w	r3, ip, r3
 800139a:	f106 34ff 	add.w	r4, r6, #4294967295
 800139e:	d202      	bcs.n	80013a6 <__udivmoddi4+0x11a>
 80013a0:	4298      	cmp	r0, r3
 80013a2:	f200 80cb 	bhi.w	800153c <__udivmoddi4+0x2b0>
 80013a6:	4626      	mov	r6, r4
 80013a8:	1a1c      	subs	r4, r3, r0
 80013aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ae:	fb08 4410 	mls	r4, r8, r0, r4
 80013b2:	fb00 f707 	mul.w	r7, r0, r7
 80013b6:	fa1f f38e 	uxth.w	r3, lr
 80013ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013be:	429f      	cmp	r7, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x148>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80013ca:	d202      	bcs.n	80013d2 <__udivmoddi4+0x146>
 80013cc:	429f      	cmp	r7, r3
 80013ce:	f200 80ae 	bhi.w	800152e <__udivmoddi4+0x2a2>
 80013d2:	4620      	mov	r0, r4
 80013d4:	1bdb      	subs	r3, r3, r7
 80013d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013da:	e7a5      	b.n	8001328 <__udivmoddi4+0x9c>
 80013dc:	f1c1 0720 	rsb	r7, r1, #32
 80013e0:	408b      	lsls	r3, r1
 80013e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ea:	fa24 f607 	lsr.w	r6, r4, r7
 80013ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013f2:	fbb6 f8f9 	udiv	r8, r6, r9
 80013f6:	fa1f fe8c 	uxth.w	lr, ip
 80013fa:	fb09 6618 	mls	r6, r9, r8, r6
 80013fe:	fa20 f307 	lsr.w	r3, r0, r7
 8001402:	408c      	lsls	r4, r1
 8001404:	fa00 fa01 	lsl.w	sl, r0, r1
 8001408:	fb08 f00e 	mul.w	r0, r8, lr
 800140c:	431c      	orrs	r4, r3
 800140e:	0c23      	lsrs	r3, r4, #16
 8001410:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001414:	4298      	cmp	r0, r3
 8001416:	fa02 f201 	lsl.w	r2, r2, r1
 800141a:	d90a      	bls.n	8001432 <__udivmoddi4+0x1a6>
 800141c:	eb1c 0303 	adds.w	r3, ip, r3
 8001420:	f108 36ff 	add.w	r6, r8, #4294967295
 8001424:	f080 8081 	bcs.w	800152a <__udivmoddi4+0x29e>
 8001428:	4298      	cmp	r0, r3
 800142a:	d97e      	bls.n	800152a <__udivmoddi4+0x29e>
 800142c:	f1a8 0802 	sub.w	r8, r8, #2
 8001430:	4463      	add	r3, ip
 8001432:	1a1e      	subs	r6, r3, r0
 8001434:	fbb6 f3f9 	udiv	r3, r6, r9
 8001438:	fb09 6613 	mls	r6, r9, r3, r6
 800143c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001440:	b2a4      	uxth	r4, r4
 8001442:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001446:	45a6      	cmp	lr, r4
 8001448:	d908      	bls.n	800145c <__udivmoddi4+0x1d0>
 800144a:	eb1c 0404 	adds.w	r4, ip, r4
 800144e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001452:	d266      	bcs.n	8001522 <__udivmoddi4+0x296>
 8001454:	45a6      	cmp	lr, r4
 8001456:	d964      	bls.n	8001522 <__udivmoddi4+0x296>
 8001458:	3b02      	subs	r3, #2
 800145a:	4464      	add	r4, ip
 800145c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001460:	fba0 8302 	umull	r8, r3, r0, r2
 8001464:	eba4 040e 	sub.w	r4, r4, lr
 8001468:	429c      	cmp	r4, r3
 800146a:	46c6      	mov	lr, r8
 800146c:	461e      	mov	r6, r3
 800146e:	d350      	bcc.n	8001512 <__udivmoddi4+0x286>
 8001470:	d04d      	beq.n	800150e <__udivmoddi4+0x282>
 8001472:	b155      	cbz	r5, 800148a <__udivmoddi4+0x1fe>
 8001474:	ebba 030e 	subs.w	r3, sl, lr
 8001478:	eb64 0406 	sbc.w	r4, r4, r6
 800147c:	fa04 f707 	lsl.w	r7, r4, r7
 8001480:	40cb      	lsrs	r3, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c5 7400 	strd	r7, r4, [r5]
 800148a:	2100      	movs	r1, #0
 800148c:	e751      	b.n	8001332 <__udivmoddi4+0xa6>
 800148e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001492:	f1c2 0320 	rsb	r3, r2, #32
 8001496:	40d9      	lsrs	r1, r3
 8001498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800149c:	fa20 f303 	lsr.w	r3, r0, r3
 80014a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80014a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80014a8:	fb08 1110 	mls	r1, r8, r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	431c      	orrs	r4, r3
 80014b0:	fa1f f78c 	uxth.w	r7, ip
 80014b4:	0c23      	lsrs	r3, r4, #16
 80014b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014ba:	fb00 f107 	mul.w	r1, r0, r7
 80014be:	4299      	cmp	r1, r3
 80014c0:	d908      	bls.n	80014d4 <__udivmoddi4+0x248>
 80014c2:	eb1c 0303 	adds.w	r3, ip, r3
 80014c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80014ca:	d22c      	bcs.n	8001526 <__udivmoddi4+0x29a>
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d92a      	bls.n	8001526 <__udivmoddi4+0x29a>
 80014d0:	3802      	subs	r0, #2
 80014d2:	4463      	add	r3, ip
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	fbb3 f1f8 	udiv	r1, r3, r8
 80014da:	fb08 3311 	mls	r3, r8, r1, r3
 80014de:	b2a4      	uxth	r4, r4
 80014e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014e4:	fb01 f307 	mul.w	r3, r1, r7
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d908      	bls.n	80014fe <__udivmoddi4+0x272>
 80014ec:	eb1c 0404 	adds.w	r4, ip, r4
 80014f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80014f4:	d213      	bcs.n	800151e <__udivmoddi4+0x292>
 80014f6:	42a3      	cmp	r3, r4
 80014f8:	d911      	bls.n	800151e <__udivmoddi4+0x292>
 80014fa:	3902      	subs	r1, #2
 80014fc:	4464      	add	r4, ip
 80014fe:	1ae4      	subs	r4, r4, r3
 8001500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001504:	e73b      	b.n	800137e <__udivmoddi4+0xf2>
 8001506:	4604      	mov	r4, r0
 8001508:	e6f2      	b.n	80012f0 <__udivmoddi4+0x64>
 800150a:	4608      	mov	r0, r1
 800150c:	e708      	b.n	8001320 <__udivmoddi4+0x94>
 800150e:	45c2      	cmp	sl, r8
 8001510:	d2af      	bcs.n	8001472 <__udivmoddi4+0x1e6>
 8001512:	ebb8 0e02 	subs.w	lr, r8, r2
 8001516:	eb63 060c 	sbc.w	r6, r3, ip
 800151a:	3801      	subs	r0, #1
 800151c:	e7a9      	b.n	8001472 <__udivmoddi4+0x1e6>
 800151e:	4631      	mov	r1, r6
 8001520:	e7ed      	b.n	80014fe <__udivmoddi4+0x272>
 8001522:	4603      	mov	r3, r0
 8001524:	e79a      	b.n	800145c <__udivmoddi4+0x1d0>
 8001526:	4630      	mov	r0, r6
 8001528:	e7d4      	b.n	80014d4 <__udivmoddi4+0x248>
 800152a:	46b0      	mov	r8, r6
 800152c:	e781      	b.n	8001432 <__udivmoddi4+0x1a6>
 800152e:	4463      	add	r3, ip
 8001530:	3802      	subs	r0, #2
 8001532:	e74f      	b.n	80013d4 <__udivmoddi4+0x148>
 8001534:	4606      	mov	r6, r0
 8001536:	4623      	mov	r3, r4
 8001538:	4608      	mov	r0, r1
 800153a:	e711      	b.n	8001360 <__udivmoddi4+0xd4>
 800153c:	3e02      	subs	r6, #2
 800153e:	4463      	add	r3, ip
 8001540:	e732      	b.n	80013a8 <__udivmoddi4+0x11c>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <SCommands_Init>:
#include "SCommands_Interface.h"
#include "SCommands_Private.h"


Std_ReturnType SCommands_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HESP32_SetCommandCallbackFunction       (0, SCommands_GetUVStatus);
 800154c:	4944      	ldr	r1, [pc, #272]	@ (8001660 <SCommands_Init+0x118>)
 800154e:	2000      	movs	r0, #0
 8001550:	f002 f9c2 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (1, SCommands_SetUVOn);
 8001554:	4943      	ldr	r1, [pc, #268]	@ (8001664 <SCommands_Init+0x11c>)
 8001556:	2001      	movs	r0, #1
 8001558:	f002 f9be 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (2, SCommands_SetUVOff);
 800155c:	4942      	ldr	r1, [pc, #264]	@ (8001668 <SCommands_Init+0x120>)
 800155e:	2002      	movs	r0, #2
 8001560:	f002 f9ba 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (3, SCommands_GetVisStatus);
 8001564:	4941      	ldr	r1, [pc, #260]	@ (800166c <SCommands_Init+0x124>)
 8001566:	2003      	movs	r0, #3
 8001568:	f002 f9b6 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (4, SCommands_SetVisOn);
 800156c:	4940      	ldr	r1, [pc, #256]	@ (8001670 <SCommands_Init+0x128>)
 800156e:	2004      	movs	r0, #4
 8001570:	f002 f9b2 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (5, SCommands_SetVisOff);
 8001574:	493f      	ldr	r1, [pc, #252]	@ (8001674 <SCommands_Init+0x12c>)
 8001576:	2005      	movs	r0, #5
 8001578:	f002 f9ae 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (6, SCommands_GetSupplyVoltages);
 800157c:	493e      	ldr	r1, [pc, #248]	@ (8001678 <SCommands_Init+0x130>)
 800157e:	2006      	movs	r0, #6
 8001580:	f002 f9aa 	bl	80038d8 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackFunction       (7, SCommands_SendCurrentMotorsSteps);
 8001584:	493d      	ldr	r1, [pc, #244]	@ (800167c <SCommands_Init+0x134>)
 8001586:	2007      	movs	r0, #7
 8001588:	f002 f9a6 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (8, SCommands_HomeLampMotor);
 800158c:	493c      	ldr	r1, [pc, #240]	@ (8001680 <SCommands_Init+0x138>)
 800158e:	2008      	movs	r0, #8
 8001590:	f002 f9a2 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (9, SCommands_HomeWLSelectMotor);
 8001594:	493b      	ldr	r1, [pc, #236]	@ (8001684 <SCommands_Init+0x13c>)
 8001596:	2009      	movs	r0, #9
 8001598:	f002 f99e 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (10, SCommands_HomeFilterSelectMotor);
 800159c:	493a      	ldr	r1, [pc, #232]	@ (8001688 <SCommands_Init+0x140>)
 800159e:	200a      	movs	r0, #10
 80015a0:	f002 f99a 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (11, SCommands_SendCurrentWL);
 80015a4:	4939      	ldr	r1, [pc, #228]	@ (800168c <SCommands_Init+0x144>)
 80015a6:	200b      	movs	r0, #11
 80015a8:	f002 f996 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (12, SCommands_SendCurrentDateTime);
 80015ac:	4938      	ldr	r1, [pc, #224]	@ (8001690 <SCommands_Init+0x148>)
 80015ae:	200c      	movs	r0, #12
 80015b0:	f002 f992 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (13, SCommands_SendCurrentDetectorValues);
 80015b4:	4937      	ldr	r1, [pc, #220]	@ (8001694 <SCommands_Init+0x14c>)
 80015b6:	200d      	movs	r0, #13
 80015b8:	f002 f98e 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (14, SCommands_GetLampMotorPosition);
 80015bc:	4936      	ldr	r1, [pc, #216]	@ (8001698 <SCommands_Init+0x150>)
 80015be:	200e      	movs	r0, #14
 80015c0:	f002 f98a 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (15, SCommands_SetLampMotorVisible);
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <SCommands_Init+0x154>)
 80015c6:	200f      	movs	r0, #15
 80015c8:	f002 f986 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (16, SCommands_SetLampMotorUV);
 80015cc:	4934      	ldr	r1, [pc, #208]	@ (80016a0 <SCommands_Init+0x158>)
 80015ce:	2010      	movs	r0, #16
 80015d0:	f002 f982 	bl	80038d8 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (17, SCommands_StopScan);
 80015d4:	4933      	ldr	r1, [pc, #204]	@ (80016a4 <SCommands_Init+0x15c>)
 80015d6:	2011      	movs	r0, #17
 80015d8:	f002 f97e 	bl	80038d8 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackArgFunction    (18, SCommands_UpdateDateTime);
 80015dc:	4932      	ldr	r1, [pc, #200]	@ (80016a8 <SCommands_Init+0x160>)
 80015de:	2012      	movs	r0, #18
 80015e0:	f002 f99a 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (19, SCommands_SaveFilterMotorCalibSteps);
 80015e4:	4931      	ldr	r1, [pc, #196]	@ (80016ac <SCommands_Init+0x164>)
 80015e6:	2013      	movs	r0, #19
 80015e8:	f002 f996 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (20, SCommands_SaveGratingMotorCalibSteps);
 80015ec:	4930      	ldr	r1, [pc, #192]	@ (80016b0 <SCommands_Init+0x168>)
 80015ee:	2014      	movs	r0, #20
 80015f0:	f002 f992 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (21, SCommands_SaveGratingMotorCalibWL);
 80015f4:	492f      	ldr	r1, [pc, #188]	@ (80016b4 <SCommands_Init+0x16c>)
 80015f6:	2015      	movs	r0, #21
 80015f8:	f002 f98e 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (22, SCommands_SaveFilterMotorCalibWL);
 80015fc:	492e      	ldr	r1, [pc, #184]	@ (80016b8 <SCommands_Init+0x170>)
 80015fe:	2016      	movs	r0, #22
 8001600:	f002 f98a 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (23, SCommands_StartOperation);
 8001604:	492d      	ldr	r1, [pc, #180]	@ (80016bc <SCommands_Init+0x174>)
 8001606:	2017      	movs	r0, #23
 8001608:	f002 f986 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (24, SCommands_SetReferenceGain);
 800160c:	492c      	ldr	r1, [pc, #176]	@ (80016c0 <SCommands_Init+0x178>)
 800160e:	2018      	movs	r0, #24
 8001610:	f002 f982 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (25, SCommands_SetSampleGain);
 8001614:	492b      	ldr	r1, [pc, #172]	@ (80016c4 <SCommands_Init+0x17c>)
 8001616:	2019      	movs	r0, #25
 8001618:	f002 f97e 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (26, SCommands_MoveFilterLeft);
 800161c:	492a      	ldr	r1, [pc, #168]	@ (80016c8 <SCommands_Init+0x180>)
 800161e:	201a      	movs	r0, #26
 8001620:	f002 f97a 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (27, SCommands_MoveFilterRight);
 8001624:	4929      	ldr	r1, [pc, #164]	@ (80016cc <SCommands_Init+0x184>)
 8001626:	201b      	movs	r0, #27
 8001628:	f002 f976 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (28, SCommands_SelectFilter);
 800162c:	4928      	ldr	r1, [pc, #160]	@ (80016d0 <SCommands_Init+0x188>)
 800162e:	201c      	movs	r0, #28
 8001630:	f002 f972 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (29, SCommands_SelectGratingWL);
 8001634:	4927      	ldr	r1, [pc, #156]	@ (80016d4 <SCommands_Init+0x18c>)
 8001636:	201d      	movs	r0, #29
 8001638:	f002 f96e 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (30, SCommands_MoveGratingLeft);
 800163c:	4926      	ldr	r1, [pc, #152]	@ (80016d8 <SCommands_Init+0x190>)
 800163e:	201e      	movs	r0, #30
 8001640:	f002 f96a 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (31, SCommands_MoveGratingRight);
 8001644:	4925      	ldr	r1, [pc, #148]	@ (80016dc <SCommands_Init+0x194>)
 8001646:	201f      	movs	r0, #31
 8001648:	f002 f966 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (32, SCommands_ScanTimeStartOperation);
 800164c:	4924      	ldr	r1, [pc, #144]	@ (80016e0 <SCommands_Init+0x198>)
 800164e:	2020      	movs	r0, #32
 8001650:	f002 f962 	bl	8003918 <HESP32_SetCommandCallbackArgFunction>

	HESP32_InitInterface();
 8001654:	f002 f8f6 	bl	8003844 <HESP32_InitInterface>

	return E_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	080016e5 	.word	0x080016e5
 8001664:	08001731 	.word	0x08001731
 8001668:	08001775 	.word	0x08001775
 800166c:	080017b9 	.word	0x080017b9
 8001670:	080017fd 	.word	0x080017fd
 8001674:	08001841 	.word	0x08001841
 8001678:	08001885 	.word	0x08001885
 800167c:	08001acd 	.word	0x08001acd
 8001680:	08001b2d 	.word	0x08001b2d
 8001684:	08001b73 	.word	0x08001b73
 8001688:	08001bb9 	.word	0x08001bb9
 800168c:	08001bff 	.word	0x08001bff
 8001690:	08001d05 	.word	0x08001d05
 8001694:	08001d39 	.word	0x08001d39
 8001698:	08001c59 	.word	0x08001c59
 800169c:	08001c9d 	.word	0x08001c9d
 80016a0:	08001cd1 	.word	0x08001cd1
 80016a4:	08001e45 	.word	0x08001e45
 80016a8:	08001e5d 	.word	0x08001e5d
 80016ac:	08001fad 	.word	0x08001fad
 80016b0:	08002059 	.word	0x08002059
 80016b4:	080020a9 	.word	0x080020a9
 80016b8:	08001ffd 	.word	0x08001ffd
 80016bc:	08002621 	.word	0x08002621
 80016c0:	080028c1 	.word	0x080028c1
 80016c4:	08002915 	.word	0x08002915
 80016c8:	080029b9 	.word	0x080029b9
 80016cc:	08002969 	.word	0x08002969
 80016d0:	08002a09 	.word	0x08002a09
 80016d4:	08002a55 	.word	0x08002a55
 80016d8:	08002aa9 	.word	0x08002aa9
 80016dc:	08002af9 	.word	0x08002af9
 80016e0:	08002165 	.word	0x08002165

080016e4 <SCommands_GetUVStatus>:

void SCommands_GetUVStatus(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f001 fda8 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint8 Loc_uint8LampStatus = MGPIO_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
	MGPIO_GetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, &Loc_uint8LampStatus);
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	461a      	mov	r2, r3
 80016f8:	2109      	movs	r1, #9
 80016fa:	2000      	movs	r0, #0
 80016fc:	f003 ffc0 	bl	8005680 <MGPIO_GetPinValue>
	if(Loc_uint8LampStatus == MGPIO_LOW)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <SCommands_GetUVStatus+0x2a>
	{
		HESP32_SendCommand("on");
 8001706:	4808      	ldr	r0, [pc, #32]	@ (8001728 <SCommands_GetUVStatus+0x44>)
 8001708:	f002 f8ca 	bl	80038a0 <HESP32_SendCommand>
 800170c:	e005      	b.n	800171a <SCommands_GetUVStatus+0x36>
	}
	else if(Loc_uint8LampStatus == MGPIO_HIGH)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <SCommands_GetUVStatus+0x36>
	{
		HESP32_SendCommand("off");
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <SCommands_GetUVStatus+0x48>)
 8001716:	f002 f8c3 	bl	80038a0 <HESP32_SendCommand>
	}
	else
	{
		/*Do nothing*/
	}
	SpectroStatus_SetNewStatus(IDLE);
 800171a:	2000      	movs	r0, #0
 800171c:	f001 fd90 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800c738 	.word	0x0800c738
 800172c:	0800c73c 	.word	0x0800c73c

08001730 <SCommands_SetUVOn>:


void SCommands_SetUVOn(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fd82 	bl	8003240 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 800173c:	2101      	movs	r1, #1
 800173e:	2000      	movs	r0, #0
 8001740:	f002 fd5c 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <SCommands_SetUVOn+0x26>
	{
		HESP32_SendCommand("on");
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <SCommands_SetUVOn+0x3c>)
 8001750:	f002 f8a6 	bl	80038a0 <HESP32_SendCommand>
 8001754:	e002      	b.n	800175c <SCommands_SetUVOn+0x2c>
	}
	else
	{
		HESP32_SendCommand("off");
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <SCommands_SetUVOn+0x40>)
 8001758:	f002 f8a2 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800175c:	2000      	movs	r0, #0
 800175e:	f001 fd6f 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0800c738 	.word	0x0800c738
 8001770:	0800c73c 	.word	0x0800c73c

08001774 <SCommands_SetUVOff>:


void SCommands_SetUVOff(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 800177a:	2001      	movs	r0, #1
 800177c:	f001 fd60 	bl	8003240 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 8001780:	2100      	movs	r1, #0
 8001782:	2000      	movs	r0, #0
 8001784:	f002 fd3a 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <SCommands_SetUVOff+0x26>
	{
		HESP32_SendCommand("off");
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <SCommands_SetUVOff+0x3c>)
 8001794:	f002 f884 	bl	80038a0 <HESP32_SendCommand>
 8001798:	e002      	b.n	80017a0 <SCommands_SetUVOff+0x2c>
	}
	else
	{
		HESP32_SendCommand("on");
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <SCommands_SetUVOff+0x40>)
 800179c:	f002 f880 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f001 fd4d 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800c73c 	.word	0x0800c73c
 80017b4:	0800c738 	.word	0x0800c738

080017b8 <SCommands_GetVisStatus>:


void SCommands_GetVisStatus(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80017be:	2001      	movs	r0, #1
 80017c0:	f001 fd3e 	bl	8003240 <SpectroStatus_SetNewStatus>
	HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 80017c4:	2304      	movs	r3, #4
 80017c6:	71fb      	strb	r3, [r7, #7]
	HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	4619      	mov	r1, r3
 80017cc:	2001      	movs	r0, #1
 80017ce:	f002 fdc1 	bl	8004354 <HPWRSupply_CheckSupplyStatus>
	if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d103      	bne.n	80017e0 <SCommands_GetVisStatus+0x28>
	{
		HESP32_SendCommand("on");
 80017d8:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <SCommands_GetVisStatus+0x3c>)
 80017da:	f002 f861 	bl	80038a0 <HESP32_SendCommand>
 80017de:	e002      	b.n	80017e6 <SCommands_GetVisStatus+0x2e>
	}
	else
	{
		HESP32_SendCommand("off");
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <SCommands_GetVisStatus+0x40>)
 80017e2:	f002 f85d 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f001 fd2a 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800c738 	.word	0x0800c738
 80017f8:	0800c73c 	.word	0x0800c73c

080017fc <SCommands_SetVisOn>:


void SCommands_SetVisOn(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001802:	2001      	movs	r0, #1
 8001804:	f001 fd1c 	bl	8003240 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8001808:	2101      	movs	r1, #1
 800180a:	2001      	movs	r0, #1
 800180c:	f002 fcf6 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <SCommands_SetVisOn+0x26>
	{
		HESP32_SendCommand("on");
 800181a:	4807      	ldr	r0, [pc, #28]	@ (8001838 <SCommands_SetVisOn+0x3c>)
 800181c:	f002 f840 	bl	80038a0 <HESP32_SendCommand>
 8001820:	e002      	b.n	8001828 <SCommands_SetVisOn+0x2c>
	}
	else
	{
		HESP32_SendCommand("off");
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <SCommands_SetVisOn+0x40>)
 8001824:	f002 f83c 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001828:	2000      	movs	r0, #0
 800182a:	f001 fd09 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800c738 	.word	0x0800c738
 800183c:	0800c73c 	.word	0x0800c73c

08001840 <SCommands_SetVisOff>:


void SCommands_SetVisOff(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001846:	2001      	movs	r0, #1
 8001848:	f001 fcfa 	bl	8003240 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 800184c:	2100      	movs	r1, #0
 800184e:	2001      	movs	r0, #1
 8001850:	f002 fcd4 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <SCommands_SetVisOff+0x26>
	{
		HESP32_SendCommand("off");
 800185e:	4807      	ldr	r0, [pc, #28]	@ (800187c <SCommands_SetVisOff+0x3c>)
 8001860:	f002 f81e 	bl	80038a0 <HESP32_SendCommand>
 8001864:	e002      	b.n	800186c <SCommands_SetVisOff+0x2c>
	}
	else
	{
		HESP32_SendCommand("on");
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <SCommands_SetVisOff+0x40>)
 8001868:	f002 f81a 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800186c:	2000      	movs	r0, #0
 800186e:	f001 fce7 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0800c73c 	.word	0x0800c73c
 8001880:	0800c738 	.word	0x0800c738

08001884 <SCommands_GetSupplyVoltages>:

void SCommands_GetSupplyVoltages(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0ae      	sub	sp, #184	@ 0xb8
 8001888:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 800188a:	2001      	movs	r0, #1
 800188c:	f001 fcd8 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint16 Loc_uint16VoltageConversion = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	float32 Loc_float32VoltageValue = 0.0;
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint8 glbl_uint8VoltageBuffer[5][32] = {{0}};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	22a0      	movs	r2, #160	@ 0xa0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fc9f 	bl	80081ea <memset>
	uint16 Loc_uint16EnteredVoltageConversion = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	80fb      	strh	r3, [r7, #6]
	uint16 Loc_uint16_33VoltageConversion = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	80bb      	strh	r3, [r7, #4]
	float32 Loc_float32EnteredVoltageValue = 0.0;
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float32 Loc_float32_33VoltageValue = 0.0;
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	/*************************************************P12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_POS_12, &Loc_uint16VoltageConversion);
 80018c4:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 80018c8:	4619      	mov	r1, r3
 80018ca:	2004      	movs	r0, #4
 80018cc:	f002 fe2a 	bl	8004524 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 80018d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f9ef 	bl	8000cb8 <__aeabi_ui2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff faf5 	bl	8000ed0 <__aeabi_fdiv>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4976      	ldr	r1, [pc, #472]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa3c 	bl	8000d68 <__aeabi_fmul>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa36 	bl	8000d68 <__aeabi_fmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	float_to_string_manual((glbl_uint8VoltageBuffer[0] + 1),Loc_float32VoltageValue, 3);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	3301      	adds	r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fe24 	bl	800355c <float_to_string_manual>
	glbl_uint8VoltageBuffer[0][0] = '+';
 8001914:	232b      	movs	r3, #43	@ 0x2b
 8001916:	723b      	strb	r3, [r7, #8]

	/************************************************N12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_NEG_12, &Loc_uint16EnteredVoltageConversion);
 8001918:	1dbb      	adds	r3, r7, #6
 800191a:	4619      	mov	r1, r3
 800191c:	2001      	movs	r0, #1
 800191e:	f002 fe01 	bl	8004524 <SPWRVolt_GetVoltage>
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16_33VoltageConversion);
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4619      	mov	r1, r3
 8001926:	2000      	movs	r0, #0
 8001928:	f002 fdfc 	bl	8004524 <SPWRVolt_GetVoltage>

	Loc_float32EnteredVoltageValue = (float32)((float32)((float32)Loc_uint16EnteredVoltageConversion / 4096) * 3.3f) ;
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9c2 	bl	8000cb8 <__aeabi_ui2f>
 8001934:	4603      	mov	r3, r0
 8001936:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fac8 	bl	8000ed0 <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	4960      	ldr	r1, [pc, #384]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa0f 	bl	8000d68 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	Loc_float32_33VoltageValue = (float32)((float32)((float32)Loc_uint16_33VoltageConversion / 4096) * 3.3f) * 2 ;
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f9b0 	bl	8000cb8 <__aeabi_ui2f>
 8001958:	4603      	mov	r3, r0
 800195a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fab6 	bl	8000ed0 <__aeabi_fdiv>
 8001964:	4603      	mov	r3, r0
 8001966:	4957      	ldr	r1, [pc, #348]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f9fd 	bl	8000d68 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f8f0 	bl	8000b58 <__addsf3>
 8001978:	4603      	mov	r3, r0
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	Loc_float32VoltageValue = ((Loc_float32_33VoltageValue - Loc_float32EnteredVoltageValue) * 11) - 3.3f;
 800197e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001982:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001986:	f7ff f8e5 	bl	8000b54 <__aeabi_fsub>
 800198a:	4603      	mov	r3, r0
 800198c:	494e      	ldr	r1, [pc, #312]	@ (8001ac8 <SCommands_GetSupplyVoltages+0x244>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9ea 	bl	8000d68 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	494b      	ldr	r1, [pc, #300]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f8db 	bl	8000b54 <__aeabi_fsub>
 800199e:	4603      	mov	r3, r0
 80019a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf((glbl_uint8VoltageBuffer + 1), (sizeof(glbl_uint8VoltageBuffer) - 1), "%.*f", 3,Loc_float32FinalVoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[1] + 1),Loc_float32VoltageValue, 3);
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	3320      	adds	r3, #32
 80019aa:	3301      	adds	r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fdd2 	bl	800355c <float_to_string_manual>
	glbl_uint8VoltageBuffer[1][0] = '-';
 80019b8:	232d      	movs	r3, #45	@ 0x2d
 80019ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	/************************************************P5*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_5, &Loc_uint16VoltageConversion);
 80019be:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 80019c2:	4619      	mov	r1, r3
 80019c4:	2003      	movs	r0, #3
 80019c6:	f002 fdad 	bl	8004524 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = ((float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f)) * 2;
 80019ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f972 	bl	8000cb8 <__aeabi_ui2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa78 	bl	8000ed0 <__aeabi_fdiv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4938      	ldr	r1, [pc, #224]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f9bf 	bl	8000d68 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f8b2 	bl	8000b58 <__addsf3>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[2]),Loc_float32VoltageValue, 3);
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	3340      	adds	r3, #64	@ 0x40
 8001a00:	2203      	movs	r2, #3
 8001a02:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fda8 	bl	800355c <float_to_string_manual>

	/***********************************************P3.3****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16VoltageConversion);
 8001a0c:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001a10:	4619      	mov	r1, r3
 8001a12:	2000      	movs	r0, #0
 8001a14:	f002 fd86 	bl	8004524 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 2;
 8001a18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f94b 	bl	8000cb8 <__aeabi_ui2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fa51 	bl	8000ed0 <__aeabi_fdiv>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4924      	ldr	r1, [pc, #144]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f998 	bl	8000d68 <__aeabi_fmul>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f88b 	bl	8000b58 <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[3]),Loc_float32VoltageValue, 3);
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	3360      	adds	r3, #96	@ 0x60
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fd81 	bl	800355c <float_to_string_manual>

	/***********************************************Supply 12***********************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_12, &Loc_uint16VoltageConversion);
 8001a5a:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2002      	movs	r0, #2
 8001a62:	f002 fd5f 	bl	8004524 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 8001a66:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f924 	bl	8000cb8 <__aeabi_ui2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fa2a 	bl	8000ed0 <__aeabi_fdiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4911      	ldr	r1, [pc, #68]	@ (8001ac4 <SCommands_GetSupplyVoltages+0x240>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f971 	bl	8000d68 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f96b 	bl	8000d68 <__aeabi_fmul>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[4]),Loc_float32VoltageValue, 3);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	3380      	adds	r3, #128	@ 0x80
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 fd59 	bl	800355c <float_to_string_manual>

	/*******************************************Send Voltages***********************************************/
	HESP32_SendVoltages(glbl_uint8VoltageBuffer);
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 f88f 	bl	8003bd2 <HESP32_SendVoltages>
	SpectroStatus_SetNewStatus(IDLE);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f001 fbc3 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001aba:	bf00      	nop
 8001abc:	37b8      	adds	r7, #184	@ 0xb8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40533333 	.word	0x40533333
 8001ac8:	41300000 	.word	0x41300000

08001acc <SCommands_SendCurrentMotorsSteps>:


void SCommands_SendCurrentMotorsSteps   (void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f001 fbb4 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32MotorsCurrentSteps[3] = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
	float32 Loc_float32CurrentWL = 0;
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
	
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32MotorsCurrentSteps[0]);
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	2000      	movs	r0, #0
 8001aee:	f003 f81d 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32MotorsCurrentSteps[1]);
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	3304      	adds	r3, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	2002      	movs	r0, #2
 8001afa:	f003 f817 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_FILTER_SELECT, &Loc_uint32MotorsCurrentSteps[2]);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	3308      	adds	r3, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	2001      	movs	r0, #1
 8001b06:	f003 f811 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	
	HMOTOR_GetCurrentWL(&Loc_float32CurrentWL);
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f82b 	bl	8004b68 <HMOTOR_GetCurrentWL>
	
	HESP32_SendMotorStatus(Loc_uint32MotorsCurrentSteps, &Loc_float32CurrentWL, 3);
 8001b12:	4639      	mov	r1, r7
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2203      	movs	r2, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 ff1f 	bl	800395c <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f001 fb8e 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SCommands_HomeLampMotor>:


void SCommands_HomeLampMotor    (void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f001 fb84 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32LampCurrentSteps = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f002 ff3d 	bl	80049c0 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampCurrentSteps);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f002 ffee 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b50:	463b      	mov	r3, r7
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f808 	bl	8004b68 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32LampCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b58:	4639      	mov	r1, r7
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 fefc 	bl	800395c <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f001 fb6b 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <SCommands_HomeWLSelectMotor>:


void SCommands_HomeWLSelectMotor (void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f001 fb61 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32WLCurrentSteps = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8001b86:	2002      	movs	r0, #2
 8001b88:	f002 ff1a 	bl	80049c0 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32WLCurrentSteps);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2002      	movs	r0, #2
 8001b92:	f002 ffcb 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b96:	463b      	mov	r3, r7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 ffe5 	bl	8004b68 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32WLCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b9e:	4639      	mov	r1, r7
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fed9 	bl	800395c <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f001 fb48 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <SCommands_HomeFilterSelectMotor>:


void SCommands_HomeFilterSelectMotor  (void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f001 fb3e 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32FilterCurrentSteps = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f002 fef7 	bl	80049c0 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_FILTER_SELECT, &Loc_uint32FilterCurrentSteps);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f002 ffa8 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 ffc2 	bl	8004b68 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32FilterCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001be4:	4639      	mov	r1, r7
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2201      	movs	r2, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 feb6 	bl	800395c <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f001 fb25 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <SCommands_SendCurrentWL>:


void SCommands_SendCurrentWL    (void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b08a      	sub	sp, #40	@ 0x28
 8001c02:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f001 fb1b 	bl	8003240 <SpectroStatus_SetNewStatus>
	uint8 P_uint8WL[32] = {0};
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	619a      	str	r2, [r3, #24]
	float32 Loc_float32CurrentWL = 0;
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
	HMOTOR_GetCurrentWL(&Loc_float32CurrentWL);
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ff9c 	bl	8004b68 <HMOTOR_GetCurrentWL>
	//snprintf(P_uint8WL, sizeof(P_uint8WL), "%d", Loc_uint32CurrentWL);
	float_to_string_manual(P_uint8WL, Loc_float32CurrentWL, 3);
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2203      	movs	r2, #3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fc8f 	bl	800355c <float_to_string_manual>
	HESP32_SendCommand(P_uint8WL);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fe2c 	bl	80038a0 <HESP32_SendCommand>
	SpectroStatus_SetNewStatus(IDLE);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f001 faf9 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <SCommands_GetLampMotorPosition>:

void SCommands_GetLampMotorPosition(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f001 faee 	bl	8003240 <SpectroStatus_SetNewStatus>

	uint32 Loc_uint32LampSteps = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampSteps);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f002 ff5d 	bl	8004b2c <HMOTOR_GetCurrentMotorSteps>

	if(Loc_uint32LampSteps == 0)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <SCommands_GetLampMotorPosition+0x28>
	{
		HESP32_SendCommand("UV Lamp");
 8001c78:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <SCommands_GetLampMotorPosition+0x3c>)
 8001c7a:	f001 fe11 	bl	80038a0 <HESP32_SendCommand>
	}
	else
	{
		/*Do nothing*/
	}
}
 8001c7e:	e005      	b.n	8001c8c <SCommands_GetLampMotorPosition+0x34>
	else if(Loc_uint32LampSteps == 100)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d102      	bne.n	8001c8c <SCommands_GetLampMotorPosition+0x34>
		HESP32_SendCommand("VI Lamp");
 8001c86:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <SCommands_GetLampMotorPosition+0x40>)
 8001c88:	f001 fe0a 	bl	80038a0 <HESP32_SendCommand>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	0800c740 	.word	0x0800c740
 8001c98:	0800c748 	.word	0x0800c748

08001c9c <SCommands_SetLampMotorVisible>:

void SCommands_SetLampMotorVisible(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f002 fd78 	bl	8004798 <HMOTOR_MoveLampMotor>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <SCommands_SetLampMotorVisible+0x1e>
	{
		HESP32_SendCommand("moved");
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <SCommands_SetLampMotorVisible+0x2c>)
 8001cb4:	f001 fdf4 	bl	80038a0 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001cb8:	e002      	b.n	8001cc0 <SCommands_SetLampMotorVisible+0x24>
		HESP32_SendCommand("failed to move");
 8001cba:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <SCommands_SetLampMotorVisible+0x30>)
 8001cbc:	f001 fdf0 	bl	80038a0 <HESP32_SendCommand>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0800c750 	.word	0x0800c750
 8001ccc:	0800c758 	.word	0x0800c758

08001cd0 <SCommands_SetLampMotorUV>:

void SCommands_SetLampMotorUV(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f002 fd5e 	bl	8004798 <HMOTOR_MoveLampMotor>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <SCommands_SetLampMotorUV+0x1e>
	{
		HESP32_SendCommand("moved");
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <SCommands_SetLampMotorUV+0x2c>)
 8001ce8:	f001 fdda 	bl	80038a0 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001cec:	e002      	b.n	8001cf4 <SCommands_SetLampMotorUV+0x24>
		HESP32_SendCommand("failed to move");
 8001cee:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <SCommands_SetLampMotorUV+0x30>)
 8001cf0:	f001 fdd6 	bl	80038a0 <HESP32_SendCommand>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	0800c750 	.word	0x0800c750
 8001d00:	0800c758 	.word	0x0800c758

08001d04 <SCommands_SendCurrentDateTime>:

void SCommands_SendCurrentDateTime(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f001 fa98 	bl	8003240 <SpectroStatus_SetNewStatus>
	Sdate_t current_date;
	Stime_t current_time;

	MRTC_GetDateAndTime(&current_date, &current_time);
 8001d10:	463a      	mov	r2, r7
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fcb0 	bl	800667c <MRTC_GetDateAndTime>

	HESP32_SendDateTime(&current_date, &current_time);
 8001d1c:	463a      	mov	r2, r7
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fe88 	bl	8003a38 <HESP32_SendDateTime>
	SpectroStatus_SetNewStatus(IDLE);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f001 fa89 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <SCommands_SendCurrentDetectorValues>:

void SCommands_SendCurrentDetectorValues(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f001 fa7e 	bl	8003240 <SpectroStatus_SetNewStatus>
	float32 Loc_float32Readings[4] = {0.0f};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
	float32 Loc_float32SampleReading = 0.0f;
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
	float32 Loc_float32ReferenceReading = 0.0f;
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
	float32 Loc_float32Gain[2] = {0.0f};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]

	read_reference_voltage(&Loc_float32ReferenceReading, &Loc_float32Gain[0]);
 8001d66:	463a      	mov	r2, r7
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 f8a6 	bl	8002ec0 <read_reference_voltage>

	if((Loc_float32Gain[0] > 0.98f) && (Loc_float32Gain[0] < 1.01f))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4931      	ldr	r1, [pc, #196]	@ (8001e3c <SCommands_SendCurrentDetectorValues+0x104>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f9b1 	bl	80010e0 <__aeabi_fcmpgt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00c      	beq.n	8001d9e <SCommands_SendCurrentDetectorValues+0x66>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	492e      	ldr	r1, [pc, #184]	@ (8001e40 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98b 	bl	80010a4 <__aeabi_fcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <SCommands_SendCurrentDetectorValues+0x66>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e011      	b.n	8001dc2 <SCommands_SendCurrentDetectorValues+0x8a>
	}
	else if(Loc_float32Gain[0] > 1.01f)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4927      	ldr	r1, [pc, #156]	@ (8001e40 <SCommands_SendCurrentDetectorValues+0x108>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f99c 	bl	80010e0 <__aeabi_fcmpgt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <SCommands_SendCurrentDetectorValues+0x8a>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading * Loc_float32Gain[0];
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ffd5 	bl	8000d68 <__aeabi_fmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	617b      	str	r3, [r7, #20]
	else
	{
		/*Do nothing*/
	}

	read_sample_voltage(&Loc_float32SampleReading, &Loc_float32Gain[1]);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 f957 	bl	8003080 <read_sample_voltage>

	if((Loc_float32Gain[1] > 0.98f) && (Loc_float32Gain[1] < 1.01f))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4919      	ldr	r1, [pc, #100]	@ (8001e3c <SCommands_SendCurrentDetectorValues+0x104>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f982 	bl	80010e0 <__aeabi_fcmpgt>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <SCommands_SendCurrentDetectorValues+0xc4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4916      	ldr	r1, [pc, #88]	@ (8001e40 <SCommands_SendCurrentDetectorValues+0x108>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f95c 	bl	80010a4 <__aeabi_fcmplt>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <SCommands_SendCurrentDetectorValues+0xc4>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e011      	b.n	8001e20 <SCommands_SendCurrentDetectorValues+0xe8>
	}
	else if(Loc_float32Gain[1] > 1.01f)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4910      	ldr	r1, [pc, #64]	@ (8001e40 <SCommands_SendCurrentDetectorValues+0x108>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f96d 	bl	80010e0 <__aeabi_fcmpgt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <SCommands_SendCurrentDetectorValues+0xe8>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading * Loc_float32Gain[1];
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ffa6 	bl	8000d68 <__aeabi_fmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	61fb      	str	r3, [r7, #28]
	{
		/*Do nothing*/
	}


	HESP32_SendAllDetectorValues(Loc_float32Readings, Loc_float32Gain);
 8001e20:	463a      	mov	r2, r7
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 fefe 	bl	8003c2a <HESP32_SendAllDetectorValues>
	SpectroStatus_SetNewStatus(IDLE);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f001 fa06 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	3f7ae148 	.word	0x3f7ae148
 8001e40:	3f8147ae 	.word	0x3f8147ae

08001e44 <SCommands_StopScan>:

static volatile uint8 glbl_uint8StopFlag = 0;

void SCommands_StopScan(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	glbl_uint8StopFlag = 1;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <SCommands_StopScan+0x14>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000069c 	.word	0x2000069c

08001e5c <SCommands_UpdateDateTime>:
void SCommands_UpdateDateTime(uint8* P_uint8DateTime)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f001 f9eb 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8DateTime != NULL_PTR)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8089 	beq.w	8001f84 <SCommands_UpdateDateTime+0x128>
	{
		Sdate_t date;
		Stime_t time;

		uint8* Loc_PToken = NULL_PTR;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
		uint8 Loc_uint8Count = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	74fb      	strb	r3, [r7, #19]
		Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	74bb      	strb	r3, [r7, #18]

		Loc_PToken = strtok(P_uint8DateTime, "/");
 8001e7e:	4946      	ldr	r1, [pc, #280]	@ (8001f98 <SCommands_UpdateDateTime+0x13c>)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f006 f9cd 	bl	8008220 <strtok>
 8001e86:	6178      	str	r0, [r7, #20]

		if(Loc_PToken != NULL_PTR)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d05e      	beq.n	8001f4c <SCommands_UpdateDateTime+0xf0>
		{
			date.m_months = atoi(Loc_PToken);
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f005 fa12 	bl	80072b8 <atoi>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	73bb      	strb	r3, [r7, #14]

			while(Loc_PToken != NULL_PTR)
 8001e9a:	e054      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
			{
				Loc_uint8Count++;
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]

				if(Loc_uint8Count < 3)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d81a      	bhi.n	8001ede <SCommands_UpdateDateTime+0x82>
				{
					Loc_PToken = strtok(NULL_PTR, "/");
 8001ea8:	493b      	ldr	r1, [pc, #236]	@ (8001f98 <SCommands_UpdateDateTime+0x13c>)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f006 f9b8 	bl	8008220 <strtok>
 8001eb0:	6178      	str	r0, [r7, #20]

					if(Loc_PToken != NULL_PTR)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d046      	beq.n	8001f46 <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d002      	beq.n	8001ec4 <SCommands_UpdateDateTime+0x68>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d007      	beq.n	8001ed2 <SCommands_UpdateDateTime+0x76>
 8001ec2:	e040      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
						{
						case 1:
						{
							date.m_days = atoi(Loc_PToken);
 8001ec4:	6978      	ldr	r0, [r7, #20]
 8001ec6:	f005 f9f7 	bl	80072b8 <atoi>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	73fb      	strb	r3, [r7, #15]
							break;
 8001ed0:	e039      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
						}
						case 2:
						{
							Loc_PToken = strtok(Loc_PToken, " ");
 8001ed2:	4932      	ldr	r1, [pc, #200]	@ (8001f9c <SCommands_UpdateDateTime+0x140>)
 8001ed4:	6978      	ldr	r0, [r7, #20]
 8001ed6:	f006 f9a3 	bl	8008220 <strtok>
 8001eda:	6178      	str	r0, [r7, #20]
							break;
 8001edc:	e033      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
						}
						}
					}
				}
				else if(Loc_uint8Count == 3)
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d114      	bne.n	8001f0e <SCommands_UpdateDateTime+0xb2>
				{
					date.m_years = atoi(Loc_PToken);
 8001ee4:	6978      	ldr	r0, [r7, #20]
 8001ee6:	f005 f9e7 	bl	80072b8 <atoi>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	81bb      	strh	r3, [r7, #12]
					Loc_PToken = strtok(NULL_PTR, ":");
 8001ef0:	492b      	ldr	r1, [pc, #172]	@ (8001fa0 <SCommands_UpdateDateTime+0x144>)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f006 f994 	bl	8008220 <strtok>
 8001ef8:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d022      	beq.n	8001f46 <SCommands_UpdateDateTime+0xea>
					{
						time.m_hours = atoi(Loc_PToken);
 8001f00:	6978      	ldr	r0, [r7, #20]
 8001f02:	f005 f9d9 	bl	80072b8 <atoi>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	723b      	strb	r3, [r7, #8]
 8001f0c:	e01b      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
					}
				}
				else
				{
					Loc_PToken = strtok(NULL_PTR, ":");
 8001f0e:	4924      	ldr	r1, [pc, #144]	@ (8001fa0 <SCommands_UpdateDateTime+0x144>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f006 f985 	bl	8008220 <strtok>
 8001f16:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d013      	beq.n	8001f46 <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d002      	beq.n	8001f2a <SCommands_UpdateDateTime+0xce>
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d007      	beq.n	8001f38 <SCommands_UpdateDateTime+0xdc>
 8001f28:	e00d      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
						{
						case 4:
						{
							time.m_minutes = atoi(Loc_PToken);
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f005 f9c4 	bl	80072b8 <atoi>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	727b      	strb	r3, [r7, #9]
							break;
 8001f36:	e006      	b.n	8001f46 <SCommands_UpdateDateTime+0xea>
						}
						case 5:
						{
							time.m_seconds = atoi(Loc_PToken);
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f005 f9bd 	bl	80072b8 <atoi>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	72bb      	strb	r3, [r7, #10]
							break;
 8001f44:	bf00      	nop
			while(Loc_PToken != NULL_PTR)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1a7      	bne.n	8001e9c <SCommands_UpdateDateTime+0x40>
					}
				}
			}
		}

		if(Loc_uint8Count == 6)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d114      	bne.n	8001f7c <SCommands_UpdateDateTime+0x120>
		{
			Loc_uint8FuncStatus = MRTC_SetDateAndTime(&date, &time);
 8001f52:	f107 0208 	add.w	r2, r7, #8
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fb39 	bl	80065d4 <MRTC_SetDateAndTime>
 8001f62:	4603      	mov	r3, r0
 8001f64:	74bb      	strb	r3, [r7, #18]
			if(Loc_uint8FuncStatus == E_OK)
 8001f66:	7cbb      	ldrb	r3, [r7, #18]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <SCommands_UpdateDateTime+0x118>
			{
				HESP32_SendCommand("time update success");
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <SCommands_UpdateDateTime+0x148>)
 8001f6e:	f001 fc97 	bl	80038a0 <HESP32_SendCommand>
 8001f72:	e00a      	b.n	8001f8a <SCommands_UpdateDateTime+0x12e>
			}
			else
			{
				HESP32_SendCommand("time update failed");
 8001f74:	480c      	ldr	r0, [pc, #48]	@ (8001fa8 <SCommands_UpdateDateTime+0x14c>)
 8001f76:	f001 fc93 	bl	80038a0 <HESP32_SendCommand>
 8001f7a:	e006      	b.n	8001f8a <SCommands_UpdateDateTime+0x12e>
			}
		}
		else
		{
			HESP32_SendCommand("time update failed");
 8001f7c:	480a      	ldr	r0, [pc, #40]	@ (8001fa8 <SCommands_UpdateDateTime+0x14c>)
 8001f7e:	f001 fc8f 	bl	80038a0 <HESP32_SendCommand>
 8001f82:	e002      	b.n	8001f8a <SCommands_UpdateDateTime+0x12e>
		}
	}
	else
	{
		HESP32_SendCommand("time update failed");
 8001f84:	4808      	ldr	r0, [pc, #32]	@ (8001fa8 <SCommands_UpdateDateTime+0x14c>)
 8001f86:	f001 fc8b 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f001 f958 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	0800c768 	.word	0x0800c768
 8001f9c:	0800c76c 	.word	0x0800c76c
 8001fa0:	0800c770 	.word	0x0800c770
 8001fa4:	0800c774 	.word	0x0800c774
 8001fa8:	0800c788 	.word	0x0800c788

08001fac <SCommands_SaveFilterMotorCalibSteps>:


void SCommands_SaveFilterMotorCalibSteps          	(uint8* P_uint8MotorSteps)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f001 f943 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8MotorSteps != NULL_PTR)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00f      	beq.n	8001fe0 <SCommands_SaveFilterMotorCalibSteps+0x34>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8MotorSteps);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f005 f979 	bl	80072b8 <atoi>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint32FilterSteps, 1);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	20d8      	movs	r0, #216	@ 0xd8
 8001fd4:	f001 fa06 	bl	80033e4 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <SCommands_SaveFilterMotorCalibSteps+0x48>)
 8001fda:	f001 fc61 	bl	80038a0 <HESP32_SendCommand>
 8001fde:	e002      	b.n	8001fe6 <SCommands_SaveFilterMotorCalibSteps+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <SCommands_SaveFilterMotorCalibSteps+0x4c>)
 8001fe2:	f001 fc5d 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f001 f92a 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0800c79c 	.word	0x0800c79c
 8001ff8:	0800c7a4 	.word	0x0800c7a4

08001ffc <SCommands_SaveFilterMotorCalibWL>:


void SCommands_SaveFilterMotorCalibWL          		(uint8* P_uint8Wavelength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002004:	2001      	movs	r0, #1
 8002006:	f001 f91b 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8Wavelength != NULL_PTR)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d015      	beq.n	800203c <SCommands_SaveFilterMotorCalibWL+0x40>
	{
		float32 Loc_float32FilterWL = atof(P_uint8Wavelength);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f005 f94e 	bl	80072b2 <atof>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd45 	bl	8000aac <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_WL_MEM_ADDRESS, &Loc_float32FilterWL, 4);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	2204      	movs	r2, #4
 800202c:	4619      	mov	r1, r3
 800202e:	20d0      	movs	r0, #208	@ 0xd0
 8002030:	f001 f9d8 	bl	80033e4 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8002034:	4806      	ldr	r0, [pc, #24]	@ (8002050 <SCommands_SaveFilterMotorCalibWL+0x54>)
 8002036:	f001 fc33 	bl	80038a0 <HESP32_SendCommand>
 800203a:	e002      	b.n	8002042 <SCommands_SaveFilterMotorCalibWL+0x46>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 800203c:	4805      	ldr	r0, [pc, #20]	@ (8002054 <SCommands_SaveFilterMotorCalibWL+0x58>)
 800203e:	f001 fc2f 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002042:	2000      	movs	r0, #0
 8002044:	f001 f8fc 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	0800c79c 	.word	0x0800c79c
 8002054:	0800c7a4 	.word	0x0800c7a4

08002058 <SCommands_SaveGratingMotorCalibSteps>:

void SCommands_SaveGratingMotorCalibSteps			(uint8* P_uint8MotorSteps)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002060:	2001      	movs	r0, #1
 8002062:	f001 f8ed 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8MotorSteps != NULL_PTR)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00f      	beq.n	800208c <SCommands_SaveGratingMotorCalibSteps+0x34>
	{
		uint32 Loc_uint32GratingSteps = atoi(P_uint8MotorSteps);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f005 f923 	bl	80072b8 <atoi>
 8002072:	4603      	mov	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_GRATING_STEPS_MEM_ADDRESS, &Loc_uint32GratingSteps, 4);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2204      	movs	r2, #4
 800207c:	4619      	mov	r1, r3
 800207e:	20c8      	movs	r0, #200	@ 0xc8
 8002080:	f001 f9b0 	bl	80033e4 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8002084:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <SCommands_SaveGratingMotorCalibSteps+0x48>)
 8002086:	f001 fc0b 	bl	80038a0 <HESP32_SendCommand>
 800208a:	e002      	b.n	8002092 <SCommands_SaveGratingMotorCalibSteps+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <SCommands_SaveGratingMotorCalibSteps+0x4c>)
 800208e:	f001 fc07 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002092:	2000      	movs	r0, #0
 8002094:	f001 f8d4 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	0800c79c 	.word	0x0800c79c
 80020a4:	0800c7a4 	.word	0x0800c7a4

080020a8 <SCommands_SaveGratingMotorCalibWL>:
void SCommands_SaveGratingMotorCalibWL				(uint8* P_uint8Wavelength)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f001 f8c5 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8Wavelength != NULL_PTR)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <SCommands_SaveGratingMotorCalibWL+0x40>
	{
		float32 Loc_float32GratingWL = atof(P_uint8Wavelength);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f005 f8f8 	bl	80072b2 <atof>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fcef 	bl	8000aac <__aeabi_d2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_GRATING_WL_MEM_ADDRESS, &Loc_float32GratingWL, 4);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2204      	movs	r2, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	20c0      	movs	r0, #192	@ 0xc0
 80020dc:	f001 f982 	bl	80033e4 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 80020e0:	4806      	ldr	r0, [pc, #24]	@ (80020fc <SCommands_SaveGratingMotorCalibWL+0x54>)
 80020e2:	f001 fbdd 	bl	80038a0 <HESP32_SendCommand>
 80020e6:	e002      	b.n	80020ee <SCommands_SaveGratingMotorCalibWL+0x46>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <SCommands_SaveGratingMotorCalibWL+0x58>)
 80020ea:	f001 fbd9 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f001 f8a6 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	0800c79c 	.word	0x0800c79c
 8002100:	0800c7a4 	.word	0x0800c7a4

08002104 <SCommands_ScanTimeOperation>:
float32 gain_ref;
float32 gain_sample;

void SCommands_ScanTimeOperation					(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	if(glbl_uint8StopFlag != 1)
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <SCommands_ScanTimeOperation+0x54>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d017      	beq.n	8002144 <SCommands_ScanTimeOperation+0x40>
	{
		float32 Loc_float32RefIntensity = 0.0;
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
		float32 Loc_float32SampleIntensity = 0.0;
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	603b      	str	r3, [r7, #0]
		read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	490e      	ldr	r1, [pc, #56]	@ (800215c <SCommands_ScanTimeOperation+0x58>)
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fecb 	bl	8002ec0 <read_reference_voltage>
		read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 800212a:	463b      	mov	r3, r7
 800212c:	490c      	ldr	r1, [pc, #48]	@ (8002160 <SCommands_ScanTimeOperation+0x5c>)
 800212e:	4618      	mov	r0, r3
 8002130:	f000 ffa6 	bl	8003080 <read_sample_voltage>

		HESP32_SendIntensities(0, Loc_float32RefIntensity, Loc_float32SampleIntensity, HESP32_SCAN_TIME);
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f001 fcfa 	bl	8003b36 <HESP32_SendIntensities>
	else
	{
		MGPTMR_StopTimer(MGPTMR2);
		glbl_uint8StopFlag = 0;
	}
}
 8002142:	e005      	b.n	8002150 <SCommands_ScanTimeOperation+0x4c>
		MGPTMR_StopTimer(MGPTMR2);
 8002144:	2000      	movs	r0, #0
 8002146:	f003 fc0f 	bl	8005968 <MGPTMR_StopTimer>
		glbl_uint8StopFlag = 0;
 800214a:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <SCommands_ScanTimeOperation+0x54>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000069c 	.word	0x2000069c
 800215c:	200006a0 	.word	0x200006a0
 8002160:	200006a4 	.word	0x200006a4

08002164 <SCommands_ScanTimeStartOperation>:
void SCommands_ScanTimeStartOperation				(uint8* P_uint8ScanParameters)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if(P_uint8ScanParameters != NULL_PTR)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8091 	beq.w	8002296 <SCommands_ScanTimeStartOperation+0x132>
	{
		SpectroStatus_SetNewStatus(BUSY);
 8002174:	2001      	movs	r0, #1
 8002176:	f001 f863 	bl	8003240 <SpectroStatus_SetNewStatus>
		uint8* P_uint8Token = NULL_PTR;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
		float32 Loc_float32WL = 0;
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
		uint32 Loc_uint32TimeInterval = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
		uint8 Loc_uint8Index = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
		float32 Loc_float32RefIntensity = 0.0;
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
		float32 Loc_float32SampleIntensity = 0.0;
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

		P_uint8Token = strtok(P_uint8ScanParameters, " ");
 8002198:	4941      	ldr	r1, [pc, #260]	@ (80022a0 <SCommands_ScanTimeStartOperation+0x13c>)
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f006 f840 	bl	8008220 <strtok>
 80021a0:	6278      	str	r0, [r7, #36]	@ 0x24
		Loc_float32WL = atof(P_uint8Token);
 80021a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021a4:	f005 f885 	bl	80072b2 <atof>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fc7c 	bl	8000aac <__aeabi_d2f>
 80021b4:	4603      	mov	r3, r0
 80021b6:	61bb      	str	r3, [r7, #24]
		Loc_uint8Index++;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	3301      	adds	r3, #1
 80021bc:	77fb      	strb	r3, [r7, #31]

		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 2))
 80021be:	e00c      	b.n	80021da <SCommands_ScanTimeStartOperation+0x76>
		{
			P_uint8Token = strtok(NULL_PTR, " ");
 80021c0:	4937      	ldr	r1, [pc, #220]	@ (80022a0 <SCommands_ScanTimeStartOperation+0x13c>)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f006 f82c 	bl	8008220 <strtok>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24
			Loc_uint32TimeInterval = atoi(P_uint8Token);
 80021ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021cc:	f005 f874 	bl	80072b8 <atoi>
 80021d0:	4603      	mov	r3, r0
 80021d2:	623b      	str	r3, [r7, #32]
			Loc_uint8Index++;
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	3301      	adds	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]
		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 2))
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <SCommands_ScanTimeStartOperation+0x82>
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d9ec      	bls.n	80021c0 <SCommands_ScanTimeStartOperation+0x5c>
		}

		if(Loc_uint8Index == 2)
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d154      	bne.n	8002296 <SCommands_ScanTimeStartOperation+0x132>
		{
			if(Loc_float32WL < 326.0f)
 80021ec:	492d      	ldr	r1, [pc, #180]	@ (80022a4 <SCommands_ScanTimeStartOperation+0x140>)
 80021ee:	69b8      	ldr	r0, [r7, #24]
 80021f0:	f7fe ff58 	bl	80010a4 <__aeabi_fcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <SCommands_ScanTimeStartOperation+0x9e>
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f002 facc 	bl	8004798 <HMOTOR_MoveLampMotor>
 8002200:	e002      	b.n	8002208 <SCommands_ScanTimeStartOperation+0xa4>
			}
			else
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8002202:	2001      	movs	r0, #1
 8002204:	f002 fac8 	bl	8004798 <HMOTOR_MoveLampMotor>
			}

			HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8002208:	2101      	movs	r1, #1
 800220a:	2000      	movs	r0, #0
 800220c:	f001 fff6 	bl	80041fc <HPWRSupply_SetSupplyMode>
			HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002210:	2101      	movs	r1, #1
 8002212:	2001      	movs	r0, #1
 8002214:	f001 fff2 	bl	80041fc <HPWRSupply_SetSupplyMode>

			HMOTOR_MoveWLSelectMotor(Loc_float32WL);
 8002218:	69b8      	ldr	r0, [r7, #24]
 800221a:	f002 fb49 	bl	80048b0 <HMOTOR_MoveWLSelectMotor>

			MSTK_uint8Delay(10);
 800221e:	200a      	movs	r0, #10
 8002220:	f004 fc66 	bl	8006af0 <MSTK_uint8Delay>
			HESP32_SendCommand("Init-Finished");
 8002224:	4820      	ldr	r0, [pc, #128]	@ (80022a8 <SCommands_ScanTimeStartOperation+0x144>)
 8002226:	f001 fb3b 	bl	80038a0 <HESP32_SendCommand>
			MSTK_uint8Delay(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f004 fc60 	bl	8006af0 <MSTK_uint8Delay>
			Stime_t Loc_STime = {0};
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2100      	movs	r1, #0
 8002236:	460a      	mov	r2, r1
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	460a      	mov	r2, r1
 800223c:	709a      	strb	r2, [r3, #2]
			Sdate_t Loc_Sdate = {0};
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]

			MRTC_GetDateAndTime(&Loc_Sdate, &Loc_STime);
 8002242:	f107 020c 	add.w	r2, r7, #12
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f004 fa15 	bl	800667c <MRTC_GetDateAndTime>

			HESP32_SendTime(&Loc_STime);
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fc41 	bl	8003ade <HESP32_SendTime>
			read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4912      	ldr	r1, [pc, #72]	@ (80022ac <SCommands_ScanTimeStartOperation+0x148>)
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fe2c 	bl	8002ec0 <read_reference_voltage>
			read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4910      	ldr	r1, [pc, #64]	@ (80022b0 <SCommands_ScanTimeStartOperation+0x14c>)
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff06 	bl	8003080 <read_sample_voltage>

			HESP32_SendIntensities(Loc_float32WL, Loc_float32RefIntensity, Loc_float32SampleIntensity, HESP32_SCAN_TIME);
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	2301      	movs	r3, #1
 800227a:	69b8      	ldr	r0, [r7, #24]
 800227c:	f001 fc5b 	bl	8003b36 <HESP32_SendIntensities>
			MGPTMR_SetTimerPeriod(MGPTMR2, Loc_uint32TimeInterval);
 8002280:	6a39      	ldr	r1, [r7, #32]
 8002282:	2000      	movs	r0, #0
 8002284:	f003 fb8a 	bl	800599c <MGPTMR_SetTimerPeriod>
			MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SCommands_ScanTimeOperation);
 8002288:	490a      	ldr	r1, [pc, #40]	@ (80022b4 <SCommands_ScanTimeStartOperation+0x150>)
 800228a:	2000      	movs	r0, #0
 800228c:	f003 fbae 	bl	80059ec <MGPTMR_SetTimerUpdateCallbackFunc>
			MGPTMR_StartTimer(MGPTMR2);
 8002290:	2000      	movs	r0, #0
 8002292:	f003 fb49 	bl	8005928 <MGPTMR_StartTimer>
	}
	else
	{
		/*Do nothing*/
	}
}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800c76c 	.word	0x0800c76c
 80022a4:	43a30000 	.word	0x43a30000
 80022a8:	0800c7b4 	.word	0x0800c7b4
 80022ac:	200006a0 	.word	0x200006a0
 80022b0:	200006a4 	.word	0x200006a4
 80022b4:	08002105 	.word	0x08002105

080022b8 <SCommands_ScanOperation>:
static volatile uint8 flag_UV = 0;
static volatile uint8 glbl_uint8BothLampsFlag = 0;


void SCommands_ScanOperation			(void)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
	static float32 present = 0.0;
	static uint32 steps = 0;
	static uint8 flag_x = 0;
	static uint8 flag_y = 0;

	if(glbl_uint8StopFlag != 1)
 80022be:	4ba2      	ldr	r3, [pc, #648]	@ (8002548 <SCommands_ScanOperation+0x290>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f000 8167 	beq.w	8002598 <SCommands_ScanOperation+0x2e0>
	{
		if(entry_count == 0)
 80022ca:	4ba0      	ldr	r3, [pc, #640]	@ (800254c <SCommands_ScanOperation+0x294>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <SCommands_ScanOperation+0x3a>
		{
			entry_count = (uint32)glbl_float32StepsPerReading;
 80022d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002550 <SCommands_ScanOperation+0x298>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff32 	bl	8001140 <__aeabi_f2uiz>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a9b      	ldr	r2, [pc, #620]	@ (800254c <SCommands_ScanOperation+0x294>)
 80022e0:	6013      	str	r3, [r2, #0]
			past = glbl_float32StepsPerReading;
 80022e2:	4b9b      	ldr	r3, [pc, #620]	@ (8002550 <SCommands_ScanOperation+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002554 <SCommands_ScanOperation+0x29c>)
 80022e8:	6013      	str	r3, [r2, #0]
			present = glbl_float32StepsPerReading;
 80022ea:	4b99      	ldr	r3, [pc, #612]	@ (8002550 <SCommands_ScanOperation+0x298>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 80022f0:	6013      	str	r3, [r2, #0]
		}
		HMOTOR_StepNoDelay(HMOTOR_WL_SELECT, HMOTORS_CCLKWISE_DIRECTION);
 80022f2:	2102      	movs	r1, #2
 80022f4:	2002      	movs	r0, #2
 80022f6:	f002 fc63 	bl	8004bc0 <HMOTOR_StepNoDelay>
		steps++;
 80022fa:	4b98      	ldr	r3, [pc, #608]	@ (800255c <SCommands_ScanOperation+0x2a4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a96      	ldr	r2, [pc, #600]	@ (800255c <SCommands_ScanOperation+0x2a4>)
 8002302:	6013      	str	r3, [r2, #0]

		if(entry_count == 1)
 8002304:	4b91      	ldr	r3, [pc, #580]	@ (800254c <SCommands_ScanOperation+0x294>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 8111 	bne.w	8002530 <SCommands_ScanOperation+0x278>
		{
			entry_count = (uint32)glbl_float32StepsPerReading;
 800230e:	4b90      	ldr	r3, [pc, #576]	@ (8002550 <SCommands_ScanOperation+0x298>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe ff14 	bl	8001140 <__aeabi_f2uiz>
 8002318:	4603      	mov	r3, r0
 800231a:	4a8c      	ldr	r2, [pc, #560]	@ (800254c <SCommands_ScanOperation+0x294>)
 800231c:	6013      	str	r3, [r2, #0]
			if(flag_x == 1)
 800231e:	4b90      	ldr	r3, [pc, #576]	@ (8002560 <SCommands_ScanOperation+0x2a8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d103      	bne.n	800232e <SCommands_ScanOperation+0x76>
			{
				flag_x = 0;
 8002326:	4b8e      	ldr	r3, [pc, #568]	@ (8002560 <SCommands_ScanOperation+0x2a8>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e00f      	b.n	800234e <SCommands_ScanOperation+0x96>
			}
			else
			{
				current_steps += glbl_float32StepsPerReading;
 800232e:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <SCommands_ScanOperation+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a8c      	ldr	r2, [pc, #560]	@ (8002564 <SCommands_ScanOperation+0x2ac>)
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fc0d 	bl	8000b58 <__addsf3>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <SCommands_ScanOperation+0x2ac>)
 8002344:	601a      	str	r2, [r3, #0]
				present = current_steps;
 8002346:	4b87      	ldr	r3, [pc, #540]	@ (8002564 <SCommands_ScanOperation+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a83      	ldr	r2, [pc, #524]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 800234c:	6013      	str	r3, [r2, #0]
			}
			if((((uint32)(present * 10) % 10) < ((uint32) (past*10) % 10)))
 800234e:	4b82      	ldr	r3, [pc, #520]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4985      	ldr	r1, [pc, #532]	@ (8002568 <SCommands_ScanOperation+0x2b0>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fd07 	bl	8000d68 <__aeabi_fmul>
 800235a:	4603      	mov	r3, r0
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe feef 	bl	8001140 <__aeabi_f2uiz>
 8002362:	4602      	mov	r2, r0
 8002364:	4b81      	ldr	r3, [pc, #516]	@ (800256c <SCommands_ScanOperation+0x2b4>)
 8002366:	fba3 1302 	umull	r1, r3, r3, r2
 800236a:	08dc      	lsrs	r4, r3, #3
 800236c:	4623      	mov	r3, r4
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4423      	add	r3, r4
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	1ad4      	subs	r4, r2, r3
 8002376:	4b77      	ldr	r3, [pc, #476]	@ (8002554 <SCommands_ScanOperation+0x29c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	497b      	ldr	r1, [pc, #492]	@ (8002568 <SCommands_ScanOperation+0x2b0>)
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fcf3 	bl	8000d68 <__aeabi_fmul>
 8002382:	4603      	mov	r3, r0
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fedb 	bl	8001140 <__aeabi_f2uiz>
 800238a:	4601      	mov	r1, r0
 800238c:	4b77      	ldr	r3, [pc, #476]	@ (800256c <SCommands_ScanOperation+0x2b4>)
 800238e:	fba3 2301 	umull	r2, r3, r3, r1
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	1aca      	subs	r2, r1, r3
 800239e:	4294      	cmp	r4, r2
 80023a0:	d202      	bcs.n	80023a8 <SCommands_ScanOperation+0xf0>
			{
				flag_skip = 1;
 80023a2:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <SCommands_ScanOperation+0x2b8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
			}
			if(((((((unsigned int)(present * 10)%5) == 0) && ((unsigned int)(past*10)%5) != 0) && (flag_skip == 1))) || (flag_y == 1))
 80023a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	496e      	ldr	r1, [pc, #440]	@ (8002568 <SCommands_ScanOperation+0x2b0>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcda 	bl	8000d68 <__aeabi_fmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fec2 	bl	8001140 <__aeabi_f2uiz>
 80023bc:	4601      	mov	r1, r0
 80023be:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <SCommands_ScanOperation+0x2b4>)
 80023c0:	fba3 2301 	umull	r2, r3, r3, r1
 80023c4:	089a      	lsrs	r2, r3, #2
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	1aca      	subs	r2, r1, r3
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d118      	bne.n	8002404 <SCommands_ScanOperation+0x14c>
 80023d2:	4b60      	ldr	r3, [pc, #384]	@ (8002554 <SCommands_ScanOperation+0x29c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4964      	ldr	r1, [pc, #400]	@ (8002568 <SCommands_ScanOperation+0x2b0>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fcc5 	bl	8000d68 <__aeabi_fmul>
 80023de:	4603      	mov	r3, r0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fead 	bl	8001140 <__aeabi_f2uiz>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b60      	ldr	r3, [pc, #384]	@ (800256c <SCommands_ScanOperation+0x2b4>)
 80023ea:	fba3 2301 	umull	r2, r3, r3, r1
 80023ee:	089a      	lsrs	r2, r3, #2
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	1aca      	subs	r2, r1, r3
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d003      	beq.n	8002404 <SCommands_ScanOperation+0x14c>
 80023fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <SCommands_ScanOperation+0x2b8>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d003      	beq.n	800240c <SCommands_ScanOperation+0x154>
 8002404:	4b5b      	ldr	r3, [pc, #364]	@ (8002574 <SCommands_ScanOperation+0x2bc>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d11b      	bne.n	8002444 <SCommands_ScanOperation+0x18c>
			{
				flag_y = 0;
 800240c:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <SCommands_ScanOperation+0x2bc>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
				flag_skip = 0;
 8002412:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <SCommands_ScanOperation+0x2b8>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
				entry_count = 1;
 8002418:	4b4c      	ldr	r3, [pc, #304]	@ (800254c <SCommands_ScanOperation+0x294>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
				flag_x = 1;
 800241e:	4b50      	ldr	r3, [pc, #320]	@ (8002560 <SCommands_ScanOperation+0x2a8>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
				uint32 x = present;
 8002424:	4b4c      	ldr	r3, [pc, #304]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fe89 	bl	8001140 <__aeabi_f2uiz>
 800242e:	4603      	mov	r3, r0
 8002430:	60fb      	str	r3, [r7, #12]
				if(x > steps)
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <SCommands_ScanOperation+0x2a4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	429a      	cmp	r2, r3
 800243a:	d97f      	bls.n	800253c <SCommands_ScanOperation+0x284>
				{
					flag_y = 1;
 800243c:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <SCommands_ScanOperation+0x2bc>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
			{
 8002442:	e07b      	b.n	800253c <SCommands_ScanOperation+0x284>
				}
			}
			else
			{
				glbl_uint32FunctionCounter++;
 8002444:	4b4c      	ldr	r3, [pc, #304]	@ (8002578 <SCommands_ScanOperation+0x2c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	4a4b      	ldr	r2, [pc, #300]	@ (8002578 <SCommands_ScanOperation+0x2c0>)
 800244c:	6013      	str	r3, [r2, #0]

				float32 Loc_float32RefReading = 0.0;
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
				float32 Loc_float32SampleReading = 0.0;
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
				
				Loc_float32ScanParameters[1] -= Loc_float32ScanParameters[2];
 800245a:	4b48      	ldr	r3, [pc, #288]	@ (800257c <SCommands_ScanOperation+0x2c4>)
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <SCommands_ScanOperation+0x2c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fb75 	bl	8000b54 <__aeabi_fsub>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <SCommands_ScanOperation+0x2c4>)
 8002470:	605a      	str	r2, [r3, #4]
				read_reference_voltage(&Loc_float32RefReading, &gain_ref);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4942      	ldr	r1, [pc, #264]	@ (8002580 <SCommands_ScanOperation+0x2c8>)
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd21 	bl	8002ec0 <read_reference_voltage>
				read_sample_voltage(&Loc_float32SampleReading, &gain_sample);
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4940      	ldr	r1, [pc, #256]	@ (8002584 <SCommands_ScanOperation+0x2cc>)
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fdfc 	bl	8003080 <read_sample_voltage>
				HESP32_SendIntensities(Loc_float32ScanParameters[1], Loc_float32RefReading, Loc_float32SampleReading, HESP32_SCAN);
 8002488:	4b3c      	ldr	r3, [pc, #240]	@ (800257c <SCommands_ScanOperation+0x2c4>)
 800248a:	6858      	ldr	r0, [r3, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	2300      	movs	r3, #0
 8002492:	f001 fb50 	bl	8003b36 <HESP32_SendIntensities>
				
				if((Loc_float32ScanParameters[1] < 326.0f) && (flag_UV == 0) && (glbl_uint8BothLampsFlag == 1))
 8002496:	4b39      	ldr	r3, [pc, #228]	@ (800257c <SCommands_ScanOperation+0x2c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	493b      	ldr	r1, [pc, #236]	@ (8002588 <SCommands_ScanOperation+0x2d0>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fe01 	bl	80010a4 <__aeabi_fcmplt>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <SCommands_ScanOperation+0x21c>
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <SCommands_ScanOperation+0x2d4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d110      	bne.n	80024d4 <SCommands_ScanOperation+0x21c>
 80024b2:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <SCommands_ScanOperation+0x2d8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10b      	bne.n	80024d4 <SCommands_ScanOperation+0x21c>
				{
					MGPTMR_StopTimer(MGPTMR2);
 80024bc:	2000      	movs	r0, #0
 80024be:	f003 fa53 	bl	8005968 <MGPTMR_StopTimer>
					HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f002 f968 	bl	8004798 <HMOTOR_MoveLampMotor>
					flag_UV = 1;
 80024c8:	4b30      	ldr	r3, [pc, #192]	@ (800258c <SCommands_ScanOperation+0x2d4>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
					MGPTMR_StartTimer(MGPTMR2);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f003 fa2a 	bl	8005928 <MGPTMR_StartTimer>
				}
				if(glbl_uint32FunctionCounter == glbl_uint32NoOfRead)
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <SCommands_ScanOperation+0x2c0>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <SCommands_ScanOperation+0x2dc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d12e      	bne.n	800253e <SCommands_ScanOperation+0x286>
				{
					MGPTMR_StopTimer(MGPTMR2);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f003 fa41 	bl	8005968 <MGPTMR_StopTimer>
					
					glbl_uint32FunctionCounter = 0;
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <SCommands_ScanOperation+0x2c0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
					current_steps = 0.0;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <SCommands_ScanOperation+0x2ac>)
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
					flag_UV = 0;
 80024f4:	4b25      	ldr	r3, [pc, #148]	@ (800258c <SCommands_ScanOperation+0x2d4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
					flag_skip = 0;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <SCommands_ScanOperation+0x2b8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
					entry_count = 0;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <SCommands_ScanOperation+0x294>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
					past = 0.0;
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <SCommands_ScanOperation+0x29c>)
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
					present = 0.0;
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <SCommands_ScanOperation+0x2a0>)
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
					steps = 0;
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <SCommands_ScanOperation+0x2a4>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
					flag_x = 0;
 800251c:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <SCommands_ScanOperation+0x2a8>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
					flag_y = 0;
 8002522:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <SCommands_ScanOperation+0x2bc>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
					SpectroStatus_SetNewStatus(IDLE);
 8002528:	2000      	movs	r0, #0
 800252a:	f000 fe89 	bl	8003240 <SpectroStatus_SetNewStatus>
 800252e:	e006      	b.n	800253e <SCommands_ScanOperation+0x286>
				}
			}
		}
		else
		{
			entry_count--;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <SCommands_ScanOperation+0x294>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <SCommands_ScanOperation+0x294>)
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e000      	b.n	800253e <SCommands_ScanOperation+0x286>
			{
 800253c:	bf00      	nop
		}
		past = current_steps;
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <SCommands_ScanOperation+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <SCommands_ScanOperation+0x29c>)
 8002544:	6013      	str	r3, [r2, #0]
		flag_x = 0;
		flag_y = 0;
		glbl_uint8StopFlag = 0;
		SpectroStatus_SetNewStatus(IDLE);
	}
}
 8002546:	e051      	b.n	80025ec <SCommands_ScanOperation+0x334>
 8002548:	2000069c 	.word	0x2000069c
 800254c:	200006c0 	.word	0x200006c0
 8002550:	200006ac 	.word	0x200006ac
 8002554:	200006c4 	.word	0x200006c4
 8002558:	200006c8 	.word	0x200006c8
 800255c:	200006cc 	.word	0x200006cc
 8002560:	200006d0 	.word	0x200006d0
 8002564:	200006d4 	.word	0x200006d4
 8002568:	41200000 	.word	0x41200000
 800256c:	cccccccd 	.word	0xcccccccd
 8002570:	200006d8 	.word	0x200006d8
 8002574:	200006d9 	.word	0x200006d9
 8002578:	200006dc 	.word	0x200006dc
 800257c:	200006b0 	.word	0x200006b0
 8002580:	200006a0 	.word	0x200006a0
 8002584:	200006a4 	.word	0x200006a4
 8002588:	43a30000 	.word	0x43a30000
 800258c:	200006bc 	.word	0x200006bc
 8002590:	200006bd 	.word	0x200006bd
 8002594:	200006a8 	.word	0x200006a8
		MGPTMR_StopTimer(MGPTMR2);
 8002598:	2000      	movs	r0, #0
 800259a:	f003 f9e5 	bl	8005968 <MGPTMR_StopTimer>
		glbl_uint32FunctionCounter = 0;
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <SCommands_ScanOperation+0x33c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
		current_steps = 0.0;
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <SCommands_ScanOperation+0x340>)
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
		flag_UV = 0;
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <SCommands_ScanOperation+0x344>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
		flag_skip = 0;
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <SCommands_ScanOperation+0x348>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
		entry_count = 0;
 80025b8:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <SCommands_ScanOperation+0x34c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
		past = 0.0;
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <SCommands_ScanOperation+0x350>)
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
		present = 0.0;
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <SCommands_ScanOperation+0x354>)
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
		steps = 0;
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <SCommands_ScanOperation+0x358>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
		flag_x = 0;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <SCommands_ScanOperation+0x35c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		flag_y = 0;
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <SCommands_ScanOperation+0x360>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
		glbl_uint8StopFlag = 0;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <SCommands_ScanOperation+0x364>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
		SpectroStatus_SetNewStatus(IDLE);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 fe2a 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	200006dc 	.word	0x200006dc
 80025f8:	200006d4 	.word	0x200006d4
 80025fc:	200006bc 	.word	0x200006bc
 8002600:	200006d8 	.word	0x200006d8
 8002604:	200006c0 	.word	0x200006c0
 8002608:	200006c4 	.word	0x200006c4
 800260c:	200006c8 	.word	0x200006c8
 8002610:	200006cc 	.word	0x200006cc
 8002614:	200006d0 	.word	0x200006d0
 8002618:	200006d9 	.word	0x200006d9
 800261c:	2000069c 	.word	0x2000069c

08002620 <SCommands_StartOperation>:
void SCommands_StartOperation         	(uint8* P_uint8ScanParam)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08f      	sub	sp, #60	@ 0x3c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002628:	2001      	movs	r0, #1
 800262a:	f000 fe09 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8ScanParam != NULL_PTR)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8124 	beq.w	800287e <SCommands_StartOperation+0x25e>
	{
		uint8* P_uint8Token = NULL_PTR;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
		uint8 Loc_uint8Index = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		float32 Loc_float32RefIntensity = 0.0;
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
		float32 Loc_float32SampleIntensity = 0.0;
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8 Loc_uint8LampChoice[10] = {0};
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	809a      	strh	r2, [r3, #4]

		// separate the string input P_uint8ScanParam to four strings
		P_uint8Token = strtok(P_uint8ScanParam, " ");
 800265a:	498b      	ldr	r1, [pc, #556]	@ (8002888 <SCommands_StartOperation+0x268>)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f005 fddf 	bl	8008220 <strtok>
 8002662:	6378      	str	r0, [r7, #52]	@ 0x34
		strcpy(Loc_uint8LampChoice, P_uint8Token);
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800266a:	4618      	mov	r0, r3
 800266c:	f006 fd17 	bl	800909e <strcpy>
		Loc_uint8Index++;
 8002670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002674:	3301      	adds	r3, #1
 8002676:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 4))
 800267a:	e019      	b.n	80026b0 <SCommands_StartOperation+0x90>
		{
			P_uint8Token = strtok(NULL_PTR, " ");
 800267c:	4982      	ldr	r1, [pc, #520]	@ (8002888 <SCommands_StartOperation+0x268>)
 800267e:	2000      	movs	r0, #0
 8002680:	f005 fdce 	bl	8008220 <strtok>
 8002684:	6378      	str	r0, [r7, #52]	@ 0x34
			Loc_float32ScanParameters[(Loc_uint8Index - 1)] = atof(P_uint8Token);
 8002686:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002688:	f004 fe13 	bl	80072b2 <atof>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8002694:	1e4c      	subs	r4, r1, #1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fa07 	bl	8000aac <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a7a      	ldr	r2, [pc, #488]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			Loc_uint8Index++;
 80026a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 4))
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <SCommands_StartOperation+0x9e>
 80026b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d9de      	bls.n	800267c <SCommands_StartOperation+0x5c>
		}

		if(Loc_uint8Index == 4)
 80026be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	f040 80db 	bne.w	800287e <SCommands_StartOperation+0x25e>
		{
			float32 temp = 0.0;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			if(Loc_float32ScanParameters[0] > Loc_float32ScanParameters[1])
 80026ce:	4b6f      	ldr	r3, [pc, #444]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6e      	ldr	r2, [pc, #440]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026d4:	6852      	ldr	r2, [r2, #4]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fd01 	bl	80010e0 <__aeabi_fcmpgt>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <SCommands_StartOperation+0xd8>
			{
				temp = Loc_float32ScanParameters[0];
 80026e4:	4b69      	ldr	r3, [pc, #420]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
				Loc_float32ScanParameters[0] = Loc_float32ScanParameters[1];
 80026ea:	4b68      	ldr	r3, [pc, #416]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a67      	ldr	r2, [pc, #412]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026f0:	6013      	str	r3, [r2, #0]
				Loc_float32ScanParameters[1] = temp;
 80026f2:	4a66      	ldr	r2, [pc, #408]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f6:	6053      	str	r3, [r2, #4]
			}

			HMOTOR_MoveWLSelectMotor(Loc_float32ScanParameters[1]);
 80026f8:	4b64      	ldr	r3, [pc, #400]	@ (800288c <SCommands_StartOperation+0x26c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 f8d7 	bl	80048b0 <HMOTOR_MoveWLSelectMotor>

			if(strncmp(Loc_uint8LampChoice, "both", sizeof("both")) == 0)
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	4962      	ldr	r1, [pc, #392]	@ (8002890 <SCommands_StartOperation+0x270>)
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fd31 	bl	8000170 <strcmp>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11e      	bne.n	8002752 <SCommands_StartOperation+0x132>
			{
				if(Loc_float32ScanParameters[1] < 326.0f)
 8002714:	4b5d      	ldr	r3, [pc, #372]	@ (800288c <SCommands_StartOperation+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	495e      	ldr	r1, [pc, #376]	@ (8002894 <SCommands_StartOperation+0x274>)
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fcc2 	bl	80010a4 <__aeabi_fcmplt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <SCommands_StartOperation+0x114>
				{
					HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002726:	2000      	movs	r0, #0
 8002728:	f002 f836 	bl	8004798 <HMOTOR_MoveLampMotor>
					flag_UV = 1;
 800272c:	4b5a      	ldr	r3, [pc, #360]	@ (8002898 <SCommands_StartOperation+0x278>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e002      	b.n	800273a <SCommands_StartOperation+0x11a>
				}
				else
				{
					HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8002734:	2001      	movs	r0, #1
 8002736:	f002 f82f 	bl	8004798 <HMOTOR_MoveLampMotor>
				}
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 800273a:	2101      	movs	r1, #1
 800273c:	2000      	movs	r0, #0
 800273e:	f001 fd5d 	bl	80041fc <HPWRSupply_SetSupplyMode>
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002742:	2101      	movs	r1, #1
 8002744:	2001      	movs	r0, #1
 8002746:	f001 fd59 	bl	80041fc <HPWRSupply_SetSupplyMode>
				glbl_uint8BothLampsFlag = 1;
 800274a:	4b54      	ldr	r3, [pc, #336]	@ (800289c <SCommands_StartOperation+0x27c>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e026      	b.n	80027a0 <SCommands_StartOperation+0x180>
			}
			else if(strncmp(Loc_uint8LampChoice, "uv", sizeof("uv")) == 0)
 8002752:	f107 0318 	add.w	r3, r7, #24
 8002756:	4952      	ldr	r1, [pc, #328]	@ (80028a0 <SCommands_StartOperation+0x280>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fd09 	bl	8000170 <strcmp>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <SCommands_StartOperation+0x15a>
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002764:	2000      	movs	r0, #0
 8002766:	f002 f817 	bl	8004798 <HMOTOR_MoveLampMotor>
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 800276a:	2101      	movs	r1, #1
 800276c:	2000      	movs	r0, #0
 800276e:	f001 fd45 	bl	80041fc <HPWRSupply_SetSupplyMode>
				glbl_uint8BothLampsFlag = 0;
 8002772:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <SCommands_StartOperation+0x27c>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e012      	b.n	80027a0 <SCommands_StartOperation+0x180>
			}
			else if(strncmp(Loc_uint8LampChoice, "vi", sizeof("vi")) == 0)
 800277a:	f107 0318 	add.w	r3, r7, #24
 800277e:	4949      	ldr	r1, [pc, #292]	@ (80028a4 <SCommands_StartOperation+0x284>)
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fcf5 	bl	8000170 <strcmp>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <SCommands_StartOperation+0x180>
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 800278c:	2001      	movs	r0, #1
 800278e:	f002 f803 	bl	8004798 <HMOTOR_MoveLampMotor>
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002792:	2101      	movs	r1, #1
 8002794:	2001      	movs	r0, #1
 8002796:	f001 fd31 	bl	80041fc <HPWRSupply_SetSupplyMode>
				glbl_uint8BothLampsFlag = 0;
 800279a:	4b40      	ldr	r3, [pc, #256]	@ (800289c <SCommands_StartOperation+0x27c>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
			else
			{
				/*Do nothing*/
			}

			glbl_uint32NoOfRead = roundf((Loc_float32ScanParameters[1] - Loc_float32ScanParameters[0])\
 80027a0:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <SCommands_StartOperation+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a39      	ldr	r2, [pc, #228]	@ (800288c <SCommands_StartOperation+0x26c>)
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f9d2 	bl	8000b54 <__aeabi_fsub>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
					/ Loc_float32ScanParameters[2]);
 80027b4:	4b35      	ldr	r3, [pc, #212]	@ (800288c <SCommands_StartOperation+0x26c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
			glbl_uint32NoOfRead = roundf((Loc_float32ScanParameters[1] - Loc_float32ScanParameters[0])\
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe fb88 	bl	8000ed0 <__aeabi_fdiv>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f009 f8e6 	bl	800b994 <roundf>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fcb8 	bl	8001140 <__aeabi_f2uiz>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a35      	ldr	r2, [pc, #212]	@ (80028a8 <SCommands_StartOperation+0x288>)
 80027d4:	6013      	str	r3, [r2, #0]

			float32 Loc_float32StepsPerNm = 0;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
			HMOTOR_GetStepsPerNm(&Loc_float32StepsPerNm);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fa5b 	bl	8004c9c <HMOTOR_GetStepsPerNm>
			glbl_float32StepsPerReading = Loc_float32ScanParameters[2] * Loc_float32StepsPerNm;
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <SCommands_StartOperation+0x26c>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe faba 	bl	8000d68 <__aeabi_fmul>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b2c      	ldr	r3, [pc, #176]	@ (80028ac <SCommands_StartOperation+0x28c>)
 80027fa:	601a      	str	r2, [r3, #0]

			MSTK_uint8Delay(10);
 80027fc:	200a      	movs	r0, #10
 80027fe:	f004 f977 	bl	8006af0 <MSTK_uint8Delay>
			HESP32_SendCommand("Init-Finished");
 8002802:	482b      	ldr	r0, [pc, #172]	@ (80028b0 <SCommands_StartOperation+0x290>)
 8002804:	f001 f84c 	bl	80038a0 <HESP32_SendCommand>
			MSTK_uint8Delay(10);
 8002808:	200a      	movs	r0, #10
 800280a:	f004 f971 	bl	8006af0 <MSTK_uint8Delay>
			Stime_t Loc_STime = {0};
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	2100      	movs	r1, #0
 8002814:	460a      	mov	r2, r1
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	460a      	mov	r2, r1
 800281a:	709a      	strb	r2, [r3, #2]
			Sdate_t Loc_Sdate = {0};
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

			MRTC_GetDateAndTime(&Loc_Sdate, &Loc_STime);
 8002820:	f107 0210 	add.w	r2, r7, #16
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f003 ff26 	bl	800667c <MRTC_GetDateAndTime>

			HESP32_SendTime(&Loc_STime);
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f952 	bl	8003ade <HESP32_SendTime>
			read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 800283a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800283e:	491d      	ldr	r1, [pc, #116]	@ (80028b4 <SCommands_StartOperation+0x294>)
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fb3d 	bl	8002ec0 <read_reference_voltage>
			read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 8002846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284a:	491b      	ldr	r1, [pc, #108]	@ (80028b8 <SCommands_StartOperation+0x298>)
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fc17 	bl	8003080 <read_sample_voltage>

			HESP32_SendIntensities(Loc_float32ScanParameters[1], Loc_float32RefIntensity, Loc_float32SampleIntensity, HESP32_SCAN);
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <SCommands_StartOperation+0x26c>)
 8002854:	6858      	ldr	r0, [r3, #4]
 8002856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285a:	2300      	movs	r3, #0
 800285c:	f001 f96b 	bl	8003b36 <HESP32_SendIntensities>
			
			if(glbl_uint32NoOfRead != 0)
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <SCommands_StartOperation+0x288>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <SCommands_StartOperation+0x25e>
			{
				MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SCommands_ScanOperation);
 8002868:	4914      	ldr	r1, [pc, #80]	@ (80028bc <SCommands_StartOperation+0x29c>)
 800286a:	2000      	movs	r0, #0
 800286c:	f003 f8be 	bl	80059ec <MGPTMR_SetTimerUpdateCallbackFunc>
				MGPTMR_SetTimerPeriod(MGPTMR2, 20);
 8002870:	2114      	movs	r1, #20
 8002872:	2000      	movs	r0, #0
 8002874:	f003 f892 	bl	800599c <MGPTMR_SetTimerPeriod>
				MGPTMR_StartTimer(MGPTMR2);
 8002878:	2000      	movs	r0, #0
 800287a:	f003 f855 	bl	8005928 <MGPTMR_StartTimer>
	}
	else
	{
		/*Do nothing*/
	}
}
 800287e:	bf00      	nop
 8002880:	373c      	adds	r7, #60	@ 0x3c
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	0800c76c 	.word	0x0800c76c
 800288c:	200006b0 	.word	0x200006b0
 8002890:	0800c7c4 	.word	0x0800c7c4
 8002894:	43a30000 	.word	0x43a30000
 8002898:	200006bc 	.word	0x200006bc
 800289c:	200006bd 	.word	0x200006bd
 80028a0:	0800c7cc 	.word	0x0800c7cc
 80028a4:	0800c7d0 	.word	0x0800c7d0
 80028a8:	200006a8 	.word	0x200006a8
 80028ac:	200006ac 	.word	0x200006ac
 80028b0:	0800c7b4 	.word	0x0800c7b4
 80028b4:	200006a0 	.word	0x200006a0
 80028b8:	200006a4 	.word	0x200006a4
 80028bc:	080022b9 	.word	0x080022b9

080028c0 <SCommands_SetReferenceGain>:

void SCommands_SetReferenceGain(uint8* P_uint8GainToBeSet)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f000 fcb9 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d011      	beq.n	80028f8 <SCommands_SetReferenceGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f004 fcec 	bl	80072b2 <atof>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f8e3 	bl	8000aac <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	60fb      	str	r3, [r7, #12]
		Set_Reference_Gain(Loc_uint32GainToBeSet);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f001 fae8 	bl	8003ec0 <Set_Reference_Gain>
		HESP32_SendCommand("applied");
 80028f0:	4806      	ldr	r0, [pc, #24]	@ (800290c <SCommands_SetReferenceGain+0x4c>)
 80028f2:	f000 ffd5 	bl	80038a0 <HESP32_SendCommand>
 80028f6:	e002      	b.n	80028fe <SCommands_SetReferenceGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 80028f8:	4805      	ldr	r0, [pc, #20]	@ (8002910 <SCommands_SetReferenceGain+0x50>)
 80028fa:	f000 ffd1 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 fc9e 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0800c7d4 	.word	0x0800c7d4
 8002910:	0800c7dc 	.word	0x0800c7dc

08002914 <SCommands_SetSampleGain>:
void SCommands_SetSampleGain(uint8* P_uint8GainToBeSet)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800291c:	2001      	movs	r0, #1
 800291e:	f000 fc8f 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d011      	beq.n	800294c <SCommands_SetSampleGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f004 fcc2 	bl	80072b2 <atof>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f8b9 	bl	8000aac <__aeabi_d2f>
 800293a:	4603      	mov	r3, r0
 800293c:	60fb      	str	r3, [r7, #12]
		Set_Sample_Gain(Loc_uint32GainToBeSet);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f001 fa9c 	bl	8003e7c <Set_Sample_Gain>
		HESP32_SendCommand("applied");
 8002944:	4806      	ldr	r0, [pc, #24]	@ (8002960 <SCommands_SetSampleGain+0x4c>)
 8002946:	f000 ffab 	bl	80038a0 <HESP32_SendCommand>
 800294a:	e002      	b.n	8002952 <SCommands_SetSampleGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 800294c:	4805      	ldr	r0, [pc, #20]	@ (8002964 <SCommands_SetSampleGain+0x50>)
 800294e:	f000 ffa7 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 fc74 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0800c7d4 	.word	0x0800c7d4
 8002964:	0800c7dc 	.word	0x0800c7dc

08002968 <SCommands_MoveFilterRight>:

void SCommands_MoveFilterRight(uint8* P_uint8FilterSteps)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002970:	2001      	movs	r0, #1
 8002972:	f000 fc65 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <SCommands_MoveFilterRight+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f004 fc9b 	bl	80072b8 <atoi>
 8002982:	4603      	mov	r3, r0
 8002984:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 8002986:	2304      	movs	r3, #4
 8002988:	2201      	movs	r2, #1
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	2001      	movs	r0, #1
 800298e:	f001 fe75 	bl	800467c <HMOTOR_Step>
		HESP32_SendCommand("moved");
 8002992:	4807      	ldr	r0, [pc, #28]	@ (80029b0 <SCommands_MoveFilterRight+0x48>)
 8002994:	f000 ff84 	bl	80038a0 <HESP32_SendCommand>
 8002998:	e002      	b.n	80029a0 <SCommands_MoveFilterRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 800299a:	4806      	ldr	r0, [pc, #24]	@ (80029b4 <SCommands_MoveFilterRight+0x4c>)
 800299c:	f000 ff80 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 fc4d 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	0800c750 	.word	0x0800c750
 80029b4:	0800c758 	.word	0x0800c758

080029b8 <SCommands_MoveFilterLeft>:
void SCommands_MoveFilterLeft(uint8* P_uint8FilterSteps)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f000 fc3d 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <SCommands_MoveFilterLeft+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f004 fc73 	bl	80072b8 <atoi>
 80029d2:	4603      	mov	r3, r0
 80029d4:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 80029d6:	2304      	movs	r3, #4
 80029d8:	2202      	movs	r2, #2
 80029da:	68f9      	ldr	r1, [r7, #12]
 80029dc:	2001      	movs	r0, #1
 80029de:	f001 fe4d 	bl	800467c <HMOTOR_Step>
		HESP32_SendCommand("moved");
 80029e2:	4807      	ldr	r0, [pc, #28]	@ (8002a00 <SCommands_MoveFilterLeft+0x48>)
 80029e4:	f000 ff5c 	bl	80038a0 <HESP32_SendCommand>
 80029e8:	e002      	b.n	80029f0 <SCommands_MoveFilterLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80029ea:	4806      	ldr	r0, [pc, #24]	@ (8002a04 <SCommands_MoveFilterLeft+0x4c>)
 80029ec:	f000 ff58 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f000 fc25 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	0800c750 	.word	0x0800c750
 8002a04:	0800c758 	.word	0x0800c758

08002a08 <SCommands_SelectFilter>:
void SCommands_SelectFilter(uint8* P_uint8FilterSelect)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f000 fc15 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSelect != NULL_PTR)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <SCommands_SelectFilter+0x2e>
	{
		HMOTOR_Filter_Select_t Loc_uint8FilterSelect = (P_uint8FilterSelect[1] - '0') - 1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	3b31      	subs	r3, #49	@ 0x31
 8002a24:	73fb      	strb	r3, [r7, #15]
		HMOTOR_MoveFilterMotor(Loc_uint8FilterSelect);
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fee7 	bl	80047fc <HMOTOR_MoveFilterMotor>
		HESP32_SendCommand("moved");
 8002a2e:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <SCommands_SelectFilter+0x44>)
 8002a30:	f000 ff36 	bl	80038a0 <HESP32_SendCommand>
 8002a34:	e002      	b.n	8002a3c <SCommands_SelectFilter+0x34>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002a36:	4806      	ldr	r0, [pc, #24]	@ (8002a50 <SCommands_SelectFilter+0x48>)
 8002a38:	f000 ff32 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f000 fbff 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	0800c750 	.word	0x0800c750
 8002a50:	0800c758 	.word	0x0800c758

08002a54 <SCommands_SelectGratingWL>:

void SCommands_SelectGratingWL(uint8* P_uint8WL)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f000 fbef 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8WL != NULL_PTR)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d011      	beq.n	8002a8c <SCommands_SelectGratingWL+0x38>
	{
		float32 Loc_float32WL = atof(P_uint8WL);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f004 fc22 	bl	80072b2 <atof>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fe f819 	bl	8000aac <__aeabi_d2f>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60fb      	str	r3, [r7, #12]
		HMOTOR_MoveWLSelectMotor(Loc_float32WL);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f001 ff16 	bl	80048b0 <HMOTOR_MoveWLSelectMotor>
		HESP32_SendCommand("moved");
 8002a84:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <SCommands_SelectGratingWL+0x4c>)
 8002a86:	f000 ff0b 	bl	80038a0 <HESP32_SendCommand>
 8002a8a:	e002      	b.n	8002a92 <SCommands_SelectGratingWL+0x3e>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002a8c:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <SCommands_SelectGratingWL+0x50>)
 8002a8e:	f000 ff07 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 fbd4 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	0800c750 	.word	0x0800c750
 8002aa4:	0800c758 	.word	0x0800c758

08002aa8 <SCommands_MoveGratingLeft>:
void SCommands_MoveGratingLeft(uint8* P_uint8WLSteps)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f000 fbc5 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <SCommands_MoveGratingLeft+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f004 fbfb 	bl	80072b8 <atoi>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	2202      	movs	r2, #2
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	2002      	movs	r0, #2
 8002ace:	f001 fdd5 	bl	800467c <HMOTOR_Step>
		HESP32_SendCommand("moved");
 8002ad2:	4807      	ldr	r0, [pc, #28]	@ (8002af0 <SCommands_MoveGratingLeft+0x48>)
 8002ad4:	f000 fee4 	bl	80038a0 <HESP32_SendCommand>
 8002ad8:	e002      	b.n	8002ae0 <SCommands_MoveGratingLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002ada:	4806      	ldr	r0, [pc, #24]	@ (8002af4 <SCommands_MoveGratingLeft+0x4c>)
 8002adc:	f000 fee0 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f000 fbad 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	0800c750 	.word	0x0800c750
 8002af4:	0800c758 	.word	0x0800c758

08002af8 <SCommands_MoveGratingRight>:
void SCommands_MoveGratingRight(uint8* P_uint8WLSteps)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f000 fb9d 	bl	8003240 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <SCommands_MoveGratingRight+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f004 fbd3 	bl	80072b8 <atoi>
 8002b12:	4603      	mov	r3, r0
 8002b14:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 8002b16:	2304      	movs	r3, #4
 8002b18:	2201      	movs	r2, #1
 8002b1a:	68f9      	ldr	r1, [r7, #12]
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f001 fdad 	bl	800467c <HMOTOR_Step>
		HESP32_SendCommand("moved");
 8002b22:	4807      	ldr	r0, [pc, #28]	@ (8002b40 <SCommands_MoveGratingRight+0x48>)
 8002b24:	f000 febc 	bl	80038a0 <HESP32_SendCommand>
 8002b28:	e002      	b.n	8002b30 <SCommands_MoveGratingRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002b2a:	4806      	ldr	r0, [pc, #24]	@ (8002b44 <SCommands_MoveGratingRight+0x4c>)
 8002b2c:	f000 feb8 	bl	80038a0 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f000 fb85 	bl	8003240 <SpectroStatus_SetNewStatus>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0800c750 	.word	0x0800c750
 8002b44:	0800c758 	.word	0x0800c758

08002b48 <SPECTRO_InitSystem>:
 * @return Std_ReturnType
 * @retval E_OK: 					If initialization is successful
 * @retval E_NOT_OK: 				Otherwise
 */
Std_ReturnType SPECTRO_InitSystem	(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(INITIALIZING);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f000 fb76 	bl	8003240 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 8002b54:	2301      	movs	r3, #1
 8002b56:	71fb      	strb	r3, [r7, #7]
	Loc_uint8InitStatus = SPECTRO_InitSoftware();
 8002b58:	f000 f81c 	bl	8002b94 <SPECTRO_InitSoftware>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8InitStatus == E_OK)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <SPECTRO_InitSystem+0x3c>
	{
		Loc_uint8InitStatus = SPECTRO_InitHardware();
 8002b66:	f000 f869 	bl	8002c3c <SPECTRO_InitHardware>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <SPECTRO_InitSystem+0x34>
		{
			SpectroStatus_SetNewStatus(IDLE);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f000 fb63 	bl	8003240 <SpectroStatus_SetNewStatus>
 8002b7a:	e006      	b.n	8002b8a <SPECTRO_InitSystem+0x42>
		}
		else
		{
			SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 fb5f 	bl	8003240 <SpectroStatus_SetNewStatus>
 8002b82:	e002      	b.n	8002b8a <SPECTRO_InitSystem+0x42>
		}
	}
	else
	{
		SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f000 fb5b 	bl	8003240 <SpectroStatus_SetNewStatus>
	}
	return Loc_uint8InitStatus;
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <SPECTRO_InitSoftware>:
 * @return Std_ReturnType
 * @retval E_OK: 						If software initialization is successful
 * @retval E_NOT_OK: 					Otherwise
 */
Std_ReturnType SPECTRO_InitSoftware		(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	/***********************************Initialize System Clock***********************************/
	MRCC_InitClock();
 8002b98:	f003 fb28 	bl	80061ec <MRCC_InitClock>

	/***********************************Enable Peripherals' clocks***********************************/

	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPA_EN);
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	f003 fb6c 	bl	800627c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPB_EN);
 8002ba4:	2103      	movs	r1, #3
 8002ba6:	2003      	movs	r0, #3
 8002ba8:	f003 fb68 	bl	800627c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_IOPC_EN);
 8002bac:	2104      	movs	r1, #4
 8002bae:	2003      	movs	r0, #3
 8002bb0:	f003 fb64 	bl	800627c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_AFIO_EN);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	f003 fb60 	bl	800627c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_SPI2_EN);
 8002bbc:	210e      	movs	r1, #14
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f003 fb5c 	bl	800627c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_TIM2_EN);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f003 fb58 	bl	800627c <MRCC_EnablePeripheralClock>


	/***********************************Setting Interrupts' Priorities***********************************/
	MSCB_SetPriorityGrouping                (MSCB_PRIORITY_GROUP_4_SUB_0);
 8002bcc:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <SPECTRO_InitSoftware+0xa4>)
 8002bce:	f003 fd9b 	bl	8006708 <MSCB_SetPriorityGrouping>
	MNVIC_SetInterruptPriority              (MNVIC_EXTI15_10, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2028      	movs	r0, #40	@ 0x28
 8002bd8:	f003 fa9e 	bl	8006118 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority              (MNVIC_USART3, 1, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2101      	movs	r1, #1
 8002be0:	2027      	movs	r0, #39	@ 0x27
 8002be2:	f003 fa99 	bl	8006118 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority				(MNVIC_TIM2, 2, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2102      	movs	r1, #2
 8002bea:	201c      	movs	r0, #28
 8002bec:	f003 fa94 	bl	8006118 <MNVIC_SetInterruptPriority>

	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f002 fbc3 	bl	8005380 <MGPIO_SetPinMode>
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f002 fbbe 	bl	8005380 <MGPIO_SetPinMode>

	MRTC_Init();
 8002c04:	f003 fc64 	bl	80064d0 <MRTC_Init>
	MSTK_uint8Init();
 8002c08:	f003 ff50 	bl	8006aac <MSTK_uint8Init>
	adc_init();
 8002c0c:	f000 fb28 	bl	8003260 <adc_init>
	SCommands_Init();
 8002c10:	f7fe fc9a 	bl	8001548 <SCommands_Init>
	SPWRVolt_Init();
 8002c14:	f001 fc42 	bl	800449c <SPWRVolt_Init>

	MCP4151_Init();
 8002c18:	f001 f90a 	bl	8003e30 <MCP4151_Init>
	HPWRSupply_InitSupplies();
 8002c1c:	f001 fa96 	bl	800414c <HPWRSupply_InitSupplies>
	HMOTORS_Init();
 8002c20:	f001 fca0 	bl	8004564 <HMOTORS_Init>

	MNVIC_EnableInterrupt(MNVIC_TIM2);
 8002c24:	201c      	movs	r0, #28
 8002c26:	f003 fa43 	bl	80060b0 <MNVIC_EnableInterrupt>
	MGPTMR_Init(MGPTMR2);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f002 fdfc 	bl	8005828 <MGPTMR_Init>

	return E_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	05fa0300 	.word	0x05fa0300

08002c3c <SPECTRO_InitHardware>:
 * @return Std_ReturnType
 * @retval E_OK: 						If hardware initialization is successful
 * @retval E_NOT_OK: 					Otherwise
 */
Std_ReturnType SPECTRO_InitHardware		(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 8002c42:	2301      	movs	r3, #1
 8002c44:	71fb      	strb	r3, [r7, #7]

	Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8002c46:	2101      	movs	r1, #1
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f001 fad7 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]

	if(Loc_uint8InitStatus == E_OK)
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11e      	bne.n	8002c96 <SPECTRO_InitHardware+0x5a>
	{
		Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f001 face 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d115      	bne.n	8002c96 <SPECTRO_InitHardware+0x5a>
		{
			Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f001 fac5 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
			if(Loc_uint8InitStatus == E_OK)
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10c      	bne.n	8002c96 <SPECTRO_InitHardware+0x5a>
			{
				Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f001 fabc 	bl	80041fc <HPWRSupply_SetSupplyMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	71fb      	strb	r3, [r7, #7]
				if(Loc_uint8InitStatus == E_OK)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <SPECTRO_InitHardware+0x5a>
				{
					Loc_uint8InitStatus = SPECTRO_InitCalibration();
 8002c8e:	f000 f8a9 	bl	8002de4 <SPECTRO_InitCalibration>
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_uint8InitStatus;
 8002c96:	79fb      	ldrb	r3, [r7, #7]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SPECTRO_CalibrationScan>:
 * 
 * This function moves the wavelength selection motor step by step and reads the reference voltage
 * at specific steps to determine the maximum values for zero wavelength and 656.1 nm.
 */
void SPECTRO_CalibrationScan			(void)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
	glbl_sint32FunctionCounter++;
 8002ca6:	4b48      	ldr	r3, [pc, #288]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	4a46      	ldr	r2, [pc, #280]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002cae:	6013      	str	r3, [r2, #0]
	HMOTOR_StepNoDelay(HMOTOR_WL_SELECT, HMOTORS_CLKWISE_DIRECTION);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f001 ff84 	bl	8004bc0 <HMOTOR_StepNoDelay>
	float32 de7k = 0.0, gain = 0.0;
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]

	if((glbl_sint32FunctionCounter >= glbl_sint32ZeroWLStartStep) && (glbl_sint32FunctionCounter <= glbl_sint32ZeroWLStopStep))
 8002cc4:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b40      	ldr	r3, [pc, #256]	@ (8002dcc <SPECTRO_CalibrationScan+0x12c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	db1e      	blt.n	8002d0e <SPECTRO_CalibrationScan+0x6e>
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <SPECTRO_CalibrationScan+0x130>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dc18      	bgt.n	8002d0e <SPECTRO_CalibrationScan+0x6e>
	{
		read_reference_voltage(&de7k, &gain);
 8002cdc:	1d3a      	adds	r2, r7, #4
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f8eb 	bl	8002ec0 <read_reference_voltage>
		if(de7k > glbl_float32MaxValue[0])
 8002cea:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd4 <SPECTRO_CalibrationScan+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f9d6 	bl	80010a4 <__aeabi_fcmplt>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d05f      	beq.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
		{
			glbl_float32MaxValue[0] = de7k;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <SPECTRO_CalibrationScan+0x134>)
 8002d02:	6013      	str	r3, [r2, #0]
			glbl_sint32MaxSteps[0] = glbl_sint32FunctionCounter; //zero WL steps
 8002d04:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a33      	ldr	r2, [pc, #204]	@ (8002dd8 <SPECTRO_CalibrationScan+0x138>)
 8002d0a:	6013      	str	r3, [r2, #0]
		if(de7k > glbl_float32MaxValue[0])
 8002d0c:	e057      	b.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
		}
	}
	else if((glbl_sint32FunctionCounter >= (glbl_sint32ZeroWLStopStep + 6000)) && (glbl_sint32FunctionCounter <= (glbl_sint32ZeroWLStopStep + 7000)))
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <SPECTRO_CalibrationScan+0x130>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8002d16:	330f      	adds	r3, #15
 8002d18:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	da21      	bge.n	8002d64 <SPECTRO_CalibrationScan+0xc4>
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <SPECTRO_CalibrationScan+0x130>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 8002d28:	3318      	adds	r3, #24
 8002d2a:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	db18      	blt.n	8002d64 <SPECTRO_CalibrationScan+0xc4>
	{
		read_reference_voltage(&de7k, &gain);
 8002d32:	1d3a      	adds	r2, r7, #4
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f8c0 	bl	8002ec0 <read_reference_voltage>
		if(de7k > glbl_float32MaxValue[1])
 8002d40:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <SPECTRO_CalibrationScan+0x134>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe f9ab 	bl	80010a4 <__aeabi_fcmplt>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d034      	beq.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
		{
			glbl_float32MaxValue[1] = de7k;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <SPECTRO_CalibrationScan+0x134>)
 8002d58:	6053      	str	r3, [r2, #4]
			glbl_sint32MaxSteps[1] = glbl_sint32FunctionCounter; //656.1nm Steps
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd8 <SPECTRO_CalibrationScan+0x138>)
 8002d60:	6053      	str	r3, [r2, #4]
		if(de7k > glbl_float32MaxValue[1])
 8002d62:	e02c      	b.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
		}
	}
	else if((glbl_sint32FunctionCounter > (glbl_sint32ZeroWLStopStep + 7500)))
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <SPECTRO_CalibrationScan+0x130>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f503 53ea 	add.w	r3, r3, #7488	@ 0x1d40
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <SPECTRO_CalibrationScan+0x128>)
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	da23      	bge.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
	{
		MGPTMR_StopTimer(MGPTMR2);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f002 fdf6 	bl	8005968 <MGPTMR_StopTimer>
		float32 Loc_float32StepsPerNm = ((float32)glbl_sint32MaxSteps[1] - (float32)glbl_sint32MaxSteps[0]) / 656.1f;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <SPECTRO_CalibrationScan+0x138>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd ff9d 	bl	8000cc0 <__aeabi_i2f>
 8002d86:	4604      	mov	r4, r0
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <SPECTRO_CalibrationScan+0x138>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd ff97 	bl	8000cc0 <__aeabi_i2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7fd fedc 	bl	8000b54 <__aeabi_fsub>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	490f      	ldr	r1, [pc, #60]	@ (8002ddc <SPECTRO_CalibrationScan+0x13c>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe f895 	bl	8000ed0 <__aeabi_fdiv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]
		HMOTOR_GetWLSelectCalibration(glbl_sint32MaxSteps[0], Loc_float32StepsPerNm);
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <SPECTRO_CalibrationScan+0x138>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fd67 	bl	8004884 <HMOTOR_GetWLSelectCalibration>
		HMOTOR_MoveWLSelectMotor(190);
 8002db6:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <SPECTRO_CalibrationScan+0x140>)
 8002db8:	f001 fd7a 	bl	80048b0 <HMOTOR_MoveWLSelectMotor>
	}
}
 8002dbc:	e7ff      	b.n	8002dbe <SPECTRO_CalibrationScan+0x11e>
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200006e0 	.word	0x200006e0
 8002dcc:	200006f8 	.word	0x200006f8
 8002dd0:	200006fc 	.word	0x200006fc
 8002dd4:	200006e4 	.word	0x200006e4
 8002dd8:	200006ec 	.word	0x200006ec
 8002ddc:	44240666 	.word	0x44240666
 8002de0:	433e0000 	.word	0x433e0000

08002de4 <SPECTRO_InitCalibration>:
 * @return Std_ReturnType 
 * @retval E_OK: 						If calibration initialization is successful
 * @retval E_NOT_OK: 					Otherwise
 */
Std_ReturnType SPECTRO_InitCalibration	(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
	float32 Loc_uint32StepsPerNm = 0;
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	607b      	str	r3, [r7, #4]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f001 fde5 	bl	80049c0 <HMOTOR_GoHome>
	//HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8002df6:	2002      	movs	r0, #2
 8002df8:	f001 fde2 	bl	80049c0 <HMOTOR_GoHome>

	//turn on uv lamp
	eeprom_read_integer(EEPROM_GRATING_STEPS_MEM_ADDRESS, &glbl_sint32SavedZeroWL);
 8002dfc:	492a      	ldr	r1, [pc, #168]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002dfe:	20c8      	movs	r0, #200	@ 0xc8
 8002e00:	f000 fb7c 	bl	80034fc <eeprom_read_integer>

	if(glbl_sint32SavedZeroWL == 0)
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <SPECTRO_InitCalibration+0x38>
	{
		glbl_sint32ZeroWLStartStep = 0;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <SPECTRO_InitCalibration+0xc8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
		glbl_sint32ZeroWLStopStep = 400;
 8002e12:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <SPECTRO_InitCalibration+0xcc>)
 8002e14:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e025      	b.n	8002e68 <SPECTRO_InitCalibration+0x84>
	}
	else
	{
		glbl_sint32ZeroWLStartStep = glbl_sint32SavedZeroWL - 20;
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3b14      	subs	r3, #20
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <SPECTRO_InitCalibration+0xc8>)
 8002e24:	6013      	str	r3, [r2, #0]
		glbl_sint32ZeroWLStopStep = glbl_sint32SavedZeroWL + 20;
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <SPECTRO_InitCalibration+0xcc>)
 8002e2e:	6013      	str	r3, [r2, #0]
		
		if(glbl_sint32SavedZeroWL < 0)
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da0a      	bge.n	8002e4e <SPECTRO_InitCalibration+0x6a>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)(-(glbl_sint32ZeroWLStartStep - 1)), HMOTORS_CCLKWISE_DIRECTION, 4);
 8002e38:	4b1c      	ldr	r3, [pc, #112]	@ (8002eac <SPECTRO_InitCalibration+0xc8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1c3 0301 	rsb	r3, r3, #1
 8002e40:	4619      	mov	r1, r3
 8002e42:	2304      	movs	r3, #4
 8002e44:	2202      	movs	r2, #2
 8002e46:	2002      	movs	r0, #2
 8002e48:	f001 fc18 	bl	800467c <HMOTOR_Step>
 8002e4c:	e00c      	b.n	8002e68 <SPECTRO_InitCalibration+0x84>
		}
		else if(glbl_sint32SavedZeroWL > 0)
 8002e4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <SPECTRO_InitCalibration+0xc4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	dd08      	ble.n	8002e68 <SPECTRO_InitCalibration+0x84>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)((glbl_sint32ZeroWLStartStep - 1)), HMOTORS_CLKWISE_DIRECTION, 4);
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <SPECTRO_InitCalibration+0xc8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	2304      	movs	r3, #4
 8002e60:	2201      	movs	r2, #1
 8002e62:	2002      	movs	r0, #2
 8002e64:	f001 fc0a 	bl	800467c <HMOTOR_Step>
		{
			/*Do nothing*/
		}
	}

	glbl_sint32FunctionCounter = glbl_sint32ZeroWLStartStep;
 8002e68:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <SPECTRO_InitCalibration+0xc8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	@ (8002eb4 <SPECTRO_InitCalibration+0xd0>)
 8002e6e:	6013      	str	r3, [r2, #0]

	HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8002e70:	2101      	movs	r1, #1
 8002e72:	2000      	movs	r0, #0
 8002e74:	f001 f9c2 	bl	80041fc <HPWRSupply_SetSupplyMode>
	HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f001 f9be 	bl	80041fc <HPWRSupply_SetSupplyMode>

	HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f001 fc89 	bl	8004798 <HMOTOR_MoveLampMotor>
	MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SPECTRO_CalibrationScan);
 8002e86:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <SPECTRO_InitCalibration+0xd4>)
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f002 fdaf 	bl	80059ec <MGPTMR_SetTimerUpdateCallbackFunc>
	MGPTMR_SetTimerPeriod(MGPTMR2, 15);
 8002e8e:	210f      	movs	r1, #15
 8002e90:	2000      	movs	r0, #0
 8002e92:	f002 fd83 	bl	800599c <MGPTMR_SetTimerPeriod>
	MGPTMR_StartTimer(MGPTMR2);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f002 fd46 	bl	8005928 <MGPTMR_StartTimer>
	
	return E_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200006f4 	.word	0x200006f4
 8002eac:	200006f8 	.word	0x200006f8
 8002eb0:	200006fc 	.word	0x200006fc
 8002eb4:	200006e0 	.word	0x200006e0
 8002eb8:	08002ca1 	.word	0x08002ca1
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <read_reference_voltage>:
	GAIN_30,
	GAIN_15
}ADC_gain_t;

void read_reference_voltage(float32 *ref, float32 *gain)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_BEGIN_SINGLE_CONVERSION;
 8002eca:	7a7b      	ldrb	r3, [r7, #9]
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed0:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN0_GND;
 8002ed2:	7a7b      	ldrb	r3, [r7, #9]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f362 1306 	bfi	r3, r2, #4, #3
 8002eda:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8002edc:	7a7b      	ldrb	r3, [r7, #9]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f362 0343 	bfi	r3, r2, #1, #3
 8002ee4:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_SINGLE_SHOT;
 8002ee6:	7a7b      	ldrb	r3, [r7, #9]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	727b      	strb	r3, [r7, #9]
	config.DR = DR_860SPS;
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002ef4:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002ef6:	7a3b      	ldrb	r3, [r7, #8]
 8002ef8:	f36f 1304 	bfc	r3, #4, #1
 8002efc:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002efe:	7a3b      	ldrb	r3, [r7, #8]
 8002f00:	f36f 03c3 	bfc	r3, #3, #1
 8002f04:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002f06:	7a3b      	ldrb	r3, [r7, #8]
 8002f08:	f36f 0382 	bfc	r3, #2, #1
 8002f0c:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002f0e:	7a3b      	ldrb	r3, [r7, #8]
 8002f10:	f043 0303 	orr.w	r3, r3, #3
 8002f14:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f1c:	601a      	str	r2, [r3, #0]

	static ADC_gain_t ref_gain_t = NO_GAIN;
	ref_sample x;
	x = REFERENCE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8002f22:	8938      	ldrh	r0, [r7, #8]
 8002f24:	f000 f9c4 	bl	80032b0 <adc_read_mv>
 8002f28:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002f2a:	494f      	ldr	r1, [pc, #316]	@ (8003068 <read_reference_voltage+0x1a8>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe f8b9 	bl	80010a4 <__aeabi_fcmplt>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d023      	beq.n	8002f80 <read_reference_voltage+0xc0>
	{
		if(ref_gain_t != GAIN_50)
 8002f38:	4b4c      	ldr	r3, [pc, #304]	@ (800306c <read_reference_voltage+0x1ac>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <read_reference_voltage+0x8c>
		{
			Set_Reference_Gain(50.0);
 8002f40:	4849      	ldr	r0, [pc, #292]	@ (8003068 <read_reference_voltage+0x1a8>)
 8002f42:	f000 ffbd 	bl	8003ec0 <Set_Reference_Gain>
			ref_gain_t = GAIN_50;
 8002f46:	4b49      	ldr	r3, [pc, #292]	@ (800306c <read_reference_voltage+0x1ac>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002f4c:	7a7b      	ldrb	r3, [r7, #9]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f362 1306 	bfi	r3, r2, #4, #3
 8002f54:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002f56:	8938      	ldrh	r0, [r7, #8]
 8002f58:	f000 f9aa 	bl	80032b0 <adc_read_mv>
 8002f5c:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8002f5e:	4842      	ldr	r0, [pc, #264]	@ (8003068 <read_reference_voltage+0x1a8>)
 8002f60:	f001 f826 	bl	8003fb0 <get_reference_gain>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4619      	mov	r1, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7fd ffb1 	bl	8000ed0 <__aeabi_fdiv>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(50.0);
 8002f72:	483d      	ldr	r0, [pc, #244]	@ (8003068 <read_reference_voltage+0x1a8>)
 8002f74:	f001 f81c 	bl	8003fb0 <get_reference_gain>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e058      	b.n	8003032 <read_reference_voltage+0x172>
	}
	else if(reading < 100.0)
 8002f80:	493b      	ldr	r1, [pc, #236]	@ (8003070 <read_reference_voltage+0x1b0>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7fe f88e 	bl	80010a4 <__aeabi_fcmplt>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d023      	beq.n	8002fd6 <read_reference_voltage+0x116>
	{
		if(ref_gain_t != GAIN_30)
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <read_reference_voltage+0x1ac>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d005      	beq.n	8002fa2 <read_reference_voltage+0xe2>
		{
			Set_Reference_Gain(30.0);
 8002f96:	4837      	ldr	r0, [pc, #220]	@ (8003074 <read_reference_voltage+0x1b4>)
 8002f98:	f000 ff92 	bl	8003ec0 <Set_Reference_Gain>
			ref_gain_t = GAIN_30;
 8002f9c:	4b33      	ldr	r3, [pc, #204]	@ (800306c <read_reference_voltage+0x1ac>)
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002fa2:	7a7b      	ldrb	r3, [r7, #9]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	f362 1306 	bfi	r3, r2, #4, #3
 8002faa:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002fac:	8938      	ldrh	r0, [r7, #8]
 8002fae:	f000 f97f 	bl	80032b0 <adc_read_mv>
 8002fb2:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(30.0);
 8002fb4:	482f      	ldr	r0, [pc, #188]	@ (8003074 <read_reference_voltage+0x1b4>)
 8002fb6:	f000 fffb 	bl	8003fb0 <get_reference_gain>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7fd ff86 	bl	8000ed0 <__aeabi_fdiv>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(30.0);
 8002fc8:	482a      	ldr	r0, [pc, #168]	@ (8003074 <read_reference_voltage+0x1b4>)
 8002fca:	f000 fff1 	bl	8003fb0 <get_reference_gain>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e02d      	b.n	8003032 <read_reference_voltage+0x172>
	}
	else if(reading < 200.0)
 8002fd6:	4928      	ldr	r1, [pc, #160]	@ (8003078 <read_reference_voltage+0x1b8>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7fe f863 	bl	80010a4 <__aeabi_fcmplt>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d023      	beq.n	800302c <read_reference_voltage+0x16c>
	{
		if(ref_gain_t != GAIN_15)
 8002fe4:	4b21      	ldr	r3, [pc, #132]	@ (800306c <read_reference_voltage+0x1ac>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d005      	beq.n	8002ff8 <read_reference_voltage+0x138>
		{
			Set_Reference_Gain(15.0);
 8002fec:	4823      	ldr	r0, [pc, #140]	@ (800307c <read_reference_voltage+0x1bc>)
 8002fee:	f000 ff67 	bl	8003ec0 <Set_Reference_Gain>
			ref_gain_t = GAIN_15;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <read_reference_voltage+0x1ac>)
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002ff8:	7a7b      	ldrb	r3, [r7, #9]
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	f362 1306 	bfi	r3, r2, #4, #3
 8003000:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8003002:	8938      	ldrh	r0, [r7, #8]
 8003004:	f000 f954 	bl	80032b0 <adc_read_mv>
 8003008:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(15.0);
 800300a:	481c      	ldr	r0, [pc, #112]	@ (800307c <read_reference_voltage+0x1bc>)
 800300c:	f000 ffd0 	bl	8003fb0 <get_reference_gain>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7fd ff5b 	bl	8000ed0 <__aeabi_fdiv>
 800301a:	4603      	mov	r3, r0
 800301c:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(15.0);
 800301e:	4817      	ldr	r0, [pc, #92]	@ (800307c <read_reference_voltage+0x1bc>)
 8003020:	f000 ffc6 	bl	8003fb0 <get_reference_gain>
 8003024:	4602      	mov	r2, r0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e002      	b.n	8003032 <read_reference_voltage+0x172>
	}
	else
	{
		ref_gain_t = NO_GAIN;
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <read_reference_voltage+0x1ac>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
	//		Set_Reference_Gain(3.0);
	//		reading = adc_read_mv(config);
	//		reading /= get_reference_gain(3.0);
	//		*gain = get_reference_gain(3.0);
	//	};
	reading *= (11.0 + 29.4)/11.0;
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7fd fa12 	bl	800045c <__aeabi_f2d>
 8003038:	a309      	add	r3, pc, #36	@ (adr r3, 8003060 <read_reference_voltage+0x1a0>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd fa65 	bl	800050c <__aeabi_dmul>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fd2f 	bl	8000aac <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	60fb      	str	r3, [r7, #12]
	*ref = reading;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	d61bed61 	.word	0xd61bed61
 8003064:	400d61be 	.word	0x400d61be
 8003068:	42480000 	.word	0x42480000
 800306c:	20000700 	.word	0x20000700
 8003070:	42c80000 	.word	0x42c80000
 8003074:	41f00000 	.word	0x41f00000
 8003078:	43480000 	.word	0x43480000
 800307c:	41700000 	.word	0x41700000

08003080 <read_sample_voltage>:

void read_sample_voltage(float32 *sample, float32 *gain)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_BEGIN_SINGLE_CONVERSION;
 800308a:	7a7b      	ldrb	r3, [r7, #9]
 800308c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003090:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN2_GND;
 8003092:	7a7b      	ldrb	r3, [r7, #9]
 8003094:	2206      	movs	r2, #6
 8003096:	f362 1306 	bfi	r3, r2, #4, #3
 800309a:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 800309c:	7a7b      	ldrb	r3, [r7, #9]
 800309e:	2201      	movs	r2, #1
 80030a0:	f362 0343 	bfi	r3, r2, #1, #3
 80030a4:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_SINGLE_SHOT;
 80030a6:	7a7b      	ldrb	r3, [r7, #9]
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	727b      	strb	r3, [r7, #9]
	config.DR = DR_860SPS;
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80030b4:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 80030b6:	7a3b      	ldrb	r3, [r7, #8]
 80030b8:	f36f 1304 	bfc	r3, #4, #1
 80030bc:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 80030be:	7a3b      	ldrb	r3, [r7, #8]
 80030c0:	f36f 03c3 	bfc	r3, #3, #1
 80030c4:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 80030c6:	7a3b      	ldrb	r3, [r7, #8]
 80030c8:	f36f 0382 	bfc	r3, #2, #1
 80030cc:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 80030ce:	7a3b      	ldrb	r3, [r7, #8]
 80030d0:	f043 0303 	orr.w	r3, r3, #3
 80030d4:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030dc:	601a      	str	r2, [r3, #0]

	static ADC_gain_t sample_gain_t = NO_GAIN;
	ref_sample x;
	x = SAMPLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 80030e2:	8938      	ldrh	r0, [r7, #8]
 80030e4:	f000 f8e4 	bl	80032b0 <adc_read_mv>
 80030e8:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 80030ea:	494f      	ldr	r1, [pc, #316]	@ (8003228 <read_sample_voltage+0x1a8>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fd ffd9 	bl	80010a4 <__aeabi_fcmplt>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d022      	beq.n	800313e <read_sample_voltage+0xbe>
	{
		if(sample_gain_t != GAIN_50)
 80030f8:	4b4c      	ldr	r3, [pc, #304]	@ (800322c <read_sample_voltage+0x1ac>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d005      	beq.n	800310c <read_sample_voltage+0x8c>
		{
			Set_Sample_Gain(50.0);
 8003100:	4849      	ldr	r0, [pc, #292]	@ (8003228 <read_sample_voltage+0x1a8>)
 8003102:	f000 febb 	bl	8003e7c <Set_Sample_Gain>
			sample_gain_t = GAIN_50;
 8003106:	4b49      	ldr	r3, [pc, #292]	@ (800322c <read_sample_voltage+0x1ac>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 800310c:	7a7b      	ldrb	r3, [r7, #9]
 800310e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003112:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8003114:	8938      	ldrh	r0, [r7, #8]
 8003116:	f000 f8cb 	bl	80032b0 <adc_read_mv>
 800311a:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(50.0);
 800311c:	4842      	ldr	r0, [pc, #264]	@ (8003228 <read_sample_voltage+0x1a8>)
 800311e:	f000 ff8b 	bl	8004038 <get_sample_gain>
 8003122:	4603      	mov	r3, r0
 8003124:	4619      	mov	r1, r3
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7fd fed2 	bl	8000ed0 <__aeabi_fdiv>
 800312c:	4603      	mov	r3, r0
 800312e:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(50.0);
 8003130:	483d      	ldr	r0, [pc, #244]	@ (8003228 <read_sample_voltage+0x1a8>)
 8003132:	f000 ff81 	bl	8004038 <get_sample_gain>
 8003136:	4602      	mov	r2, r0
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e056      	b.n	80031ec <read_sample_voltage+0x16c>
	}
	else if(reading < 100.0)
 800313e:	493c      	ldr	r1, [pc, #240]	@ (8003230 <read_sample_voltage+0x1b0>)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7fd ffaf 	bl	80010a4 <__aeabi_fcmplt>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d022      	beq.n	8003192 <read_sample_voltage+0x112>
	{
		if(sample_gain_t != GAIN_30)
 800314c:	4b37      	ldr	r3, [pc, #220]	@ (800322c <read_sample_voltage+0x1ac>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <read_sample_voltage+0xe0>
		{
			Set_Sample_Gain(30.0);
 8003154:	4837      	ldr	r0, [pc, #220]	@ (8003234 <read_sample_voltage+0x1b4>)
 8003156:	f000 fe91 	bl	8003e7c <Set_Sample_Gain>
			sample_gain_t = GAIN_30;
 800315a:	4b34      	ldr	r3, [pc, #208]	@ (800322c <read_sample_voltage+0x1ac>)
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 8003160:	7a7b      	ldrb	r3, [r7, #9]
 8003162:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003166:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8003168:	8938      	ldrh	r0, [r7, #8]
 800316a:	f000 f8a1 	bl	80032b0 <adc_read_mv>
 800316e:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(30.0);
 8003170:	4830      	ldr	r0, [pc, #192]	@ (8003234 <read_sample_voltage+0x1b4>)
 8003172:	f000 ff61 	bl	8004038 <get_sample_gain>
 8003176:	4603      	mov	r3, r0
 8003178:	4619      	mov	r1, r3
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7fd fea8 	bl	8000ed0 <__aeabi_fdiv>
 8003180:	4603      	mov	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(30.0);
 8003184:	482b      	ldr	r0, [pc, #172]	@ (8003234 <read_sample_voltage+0x1b4>)
 8003186:	f000 ff57 	bl	8004038 <get_sample_gain>
 800318a:	4602      	mov	r2, r0
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e02c      	b.n	80031ec <read_sample_voltage+0x16c>
	}
	else if(reading < 200.0)
 8003192:	4929      	ldr	r1, [pc, #164]	@ (8003238 <read_sample_voltage+0x1b8>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fd ff85 	bl	80010a4 <__aeabi_fcmplt>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <read_sample_voltage+0x166>
	{
		if(sample_gain_t != GAIN_15)
 80031a0:	4b22      	ldr	r3, [pc, #136]	@ (800322c <read_sample_voltage+0x1ac>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d005      	beq.n	80031b4 <read_sample_voltage+0x134>
		{
			Set_Sample_Gain(15.0);
 80031a8:	4824      	ldr	r0, [pc, #144]	@ (800323c <read_sample_voltage+0x1bc>)
 80031aa:	f000 fe67 	bl	8003e7c <Set_Sample_Gain>
			sample_gain_t = GAIN_15;
 80031ae:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <read_sample_voltage+0x1ac>)
 80031b0:	2203      	movs	r2, #3
 80031b2:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 80031b4:	7a7b      	ldrb	r3, [r7, #9]
 80031b6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80031ba:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 80031bc:	8938      	ldrh	r0, [r7, #8]
 80031be:	f000 f877 	bl	80032b0 <adc_read_mv>
 80031c2:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(15.0);
 80031c4:	481d      	ldr	r0, [pc, #116]	@ (800323c <read_sample_voltage+0x1bc>)
 80031c6:	f000 ff37 	bl	8004038 <get_sample_gain>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4619      	mov	r1, r3
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7fd fe7e 	bl	8000ed0 <__aeabi_fdiv>
 80031d4:	4603      	mov	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(15.0);
 80031d8:	4818      	ldr	r0, [pc, #96]	@ (800323c <read_sample_voltage+0x1bc>)
 80031da:	f000 ff2d 	bl	8004038 <get_sample_gain>
 80031de:	4602      	mov	r2, r0
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e002      	b.n	80031ec <read_sample_voltage+0x16c>
	}
	else
	{
		sample_gain_t = NO_GAIN;
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <read_sample_voltage+0x1ac>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
	//		reading = adc_read_mv(config);
	//		reading /= get_sample_gain(3.0);
	//		*gain = get_sample_gain(3.0);
	//	};

	reading *= (11.0 + 29.4)/11.0;
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7fd f935 	bl	800045c <__aeabi_f2d>
 80031f2:	a30b      	add	r3, pc, #44	@ (adr r3, 8003220 <read_sample_voltage+0x1a0>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f7fd f988 	bl	800050c <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f7fd fc52 	bl	8000aac <__aeabi_d2f>
 8003208:	4603      	mov	r3, r0
 800320a:	60fb      	str	r3, [r7, #12]
	*sample = reading;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	f3af 8000 	nop.w
 8003220:	d61bed61 	.word	0xd61bed61
 8003224:	400d61be 	.word	0x400d61be
 8003228:	42480000 	.word	0x42480000
 800322c:	20000701 	.word	0x20000701
 8003230:	42c80000 	.word	0x42c80000
 8003234:	41f00000 	.word	0x41f00000
 8003238:	43480000 	.word	0x43480000
 800323c:	41700000 	.word	0x41700000

08003240 <SpectroStatus_SetNewStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                    Spectrophotometer's Status Successfully Set
 * @retval E_NOT_OK:                Spectrophotometer's Status not Set 
 */
Std_ReturnType SpectroStatus_SetNewStatus           (SPECTRO_Status_t Copy_uint32SpectroStatus)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
    glbl_uint32SpectroCurrentStatus = Copy_uint32SpectroStatus;
 800324a:	4a04      	ldr	r2, [pc, #16]	@ (800325c <SpectroStatus_SetNewStatus+0x1c>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	7013      	strb	r3, [r2, #0]
    return E_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	20000702 	.word	0x20000702

08003260 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8003266:	2340      	movs	r3, #64	@ 0x40
 8003268:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 800326a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800326e:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8003270:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <adc_init+0x48>)
 8003272:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8003274:	2300      	movs	r3, #0
 8003276:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800327c:	2300      	movs	r3, #0
 800327e:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8003280:	480a      	ldr	r0, [pc, #40]	@ (80032ac <adc_init+0x4c>)
 8003282:	f002 fd03 	bl	8005c8c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8003286:	463b      	mov	r3, r7
 8003288:	4619      	mov	r1, r3
 800328a:	4808      	ldr	r0, [pc, #32]	@ (80032ac <adc_init+0x4c>)
 800328c:	f002 fc12 	bl	8005ab4 <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 8003290:	f002 fcd4 	bl	8005c3c <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8003294:	463b      	mov	r3, r7
 8003296:	4619      	mov	r1, r3
 8003298:	4804      	ldr	r0, [pc, #16]	@ (80032ac <adc_init+0x4c>)
 800329a:	f002 fc0b 	bl	8005ab4 <MCAL_I2C_Init>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	000186a0 	.word	0x000186a0
 80032ac:	40005400 	.word	0x40005400

080032b0 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x49;
 80032b8:	2349      	movs	r3, #73	@ 0x49
 80032ba:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x01;
 80032bc:	2301      	movs	r3, #1
 80032be:	753b      	strb	r3, [r7, #20]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 80032c0:	797b      	ldrb	r3, [r7, #5]
 80032c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	01db      	lsls	r3, r3, #7
 80032ca:	b25a      	sxtb	r2, r3
 80032cc:	797b      	ldrb	r3, [r7, #5]
 80032ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b25a      	sxtb	r2, r3
 80032dc:	797b      	ldrb	r3, [r7, #5]
 80032de:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b25a      	sxtb	r2, r3
 80032ec:	797b      	ldrb	r3, [r7, #5]
 80032ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	757b      	strb	r3, [r7, #21]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 80032fe:	793b      	ldrb	r3, [r7, #4]
 8003300:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	015b      	lsls	r3, r3, #5
 8003308:	b25a      	sxtb	r2, r3
 800330a:	793b      	ldrb	r3, [r7, #4]
 800330c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	b25b      	sxtb	r3, r3
 8003316:	4313      	orrs	r3, r2
 8003318:	b25a      	sxtb	r2, r3
 800331a:	793b      	ldrb	r3, [r7, #4]
 800331c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	b25b      	sxtb	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b25a      	sxtb	r2, r3
 800332a:	793b      	ldrb	r3, [r7, #4]
 800332c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	b25b      	sxtb	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b25a      	sxtb	r2, r3
 800333a:	793b      	ldrb	r3, [r7, #4]
 800333c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	b25b      	sxtb	r3, r3
 8003344:	4313      	orrs	r3, r2
 8003346:	b25b      	sxtb	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	75bb      	strb	r3, [r7, #22]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 800334c:	f107 0214 	add.w	r2, r7, #20
 8003350:	8bf9      	ldrh	r1, [r7, #30]
 8003352:	2300      	movs	r3, #0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2303      	movs	r3, #3
 800335c:	481e      	ldr	r0, [pc, #120]	@ (80033d8 <adc_read_mv+0x128>)
 800335e:	f002 fcbf 	bl	8005ce0 <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8003366:	f107 0214 	add.w	r2, r7, #20
 800336a:	8bf9      	ldrh	r1, [r7, #30]
 800336c:	2300      	movs	r3, #0
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2301      	movs	r3, #1
 8003376:	4818      	ldr	r0, [pc, #96]	@ (80033d8 <adc_read_mv+0x128>)
 8003378:	f002 fcb2 	bl	8005ce0 <MCAL_I2C_MASTER_TX>
	delay_ms(2);
 800337c:	2002      	movs	r0, #2
 800337e:	f000 fcc3 	bl	8003d08 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start, I2C_ADC);
 8003382:	f107 020c 	add.w	r2, r7, #12
 8003386:	8bf9      	ldrh	r1, [r7, #30]
 8003388:	2301      	movs	r3, #1
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	2300      	movs	r3, #0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2300      	movs	r3, #0
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2302      	movs	r3, #2
 8003396:	4810      	ldr	r0, [pc, #64]	@ (80033d8 <adc_read_mv+0x128>)
 8003398:	f002 fcfe 	bl	8005d98 <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 800339c:	7b7b      	ldrb	r3, [r7, #13]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	7b3b      	ldrb	r3, [r7, #12]
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 80033ac:	8bbb      	ldrh	r3, [r7, #28]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fc82 	bl	8000cb8 <__aeabi_ui2f>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4909      	ldr	r1, [pc, #36]	@ (80033dc <adc_read_mv+0x12c>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fcd5 	bl	8000d68 <__aeabi_fmul>
 80033be:	4603      	mov	r3, r0
 80033c0:	4907      	ldr	r1, [pc, #28]	@ (80033e0 <adc_read_mv+0x130>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fcd0 	bl	8000d68 <__aeabi_fmul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	61bb      	str	r3, [r7, #24]
	return mv;
 80033cc:	69bb      	ldr	r3, [r7, #24]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40005400 	.word	0x40005400
 80033dc:	3903126f 	.word	0x3903126f
 80033e0:	447a0000 	.word	0x447a0000

080033e4 <eeprom_write_Nbytes>:
	MCAL_I2C_Init(I2C1, &I2C1CFG);


}
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b0c8      	sub	sp, #288	@ 0x120
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033f2:	6018      	str	r0, [r3, #0]
 80033f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033fc:	6019      	str	r1, [r3, #0]
 80033fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003402:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003406:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256]  ;
	//buffer[0] = (u8)(Memory_address>>8) ; 	//upper byte Memory Address
	//buffer[1] = (u8)Memory_address ; 	//lower byte Memory Address
	buffer[0] = (uint8)(Memory_address) ; 	//Memory Address
 800340e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003412:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800341e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003422:	701a      	strb	r2, [r3, #0]

	for (i=1 ; i<(Data_Length+1) ; i++ )
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800342a:	e015      	b.n	8003458 <eeprom_write_Nbytes+0x74>
	{buffer[i] = bytes[i-1] ;}
 800342c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003430:	3b01      	subs	r3, #1
 8003432:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003436:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	441a      	add	r2, r3
 800343e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003442:	7811      	ldrb	r1, [r2, #0]
 8003444:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003448:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800344c:	54d1      	strb	r1, [r2, r3]
	for (i=1 ; i<(Data_Length+1) ; i++ )
 800344e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003452:	3301      	adds	r3, #1
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003458:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800345c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003466:	429a      	cmp	r2, r3
 8003468:	d2e0      	bcs.n	800342c <eeprom_write_Nbytes+0x48>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+1), With_Stop, Start);
 800346a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800346e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4619      	mov	r1, r3
 8003478:	f107 0214 	add.w	r2, r7, #20
 800347c:	2300      	movs	r3, #0
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	2150      	movs	r1, #80	@ 0x50
 8003488:	4804      	ldr	r0, [pc, #16]	@ (800349c <eeprom_write_Nbytes+0xb8>)
 800348a:	f002 fc29 	bl	8005ce0 <MCAL_I2C_MASTER_TX>

	return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40005400 	.word	0x40005400

080034a0 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	@ 0x28
 80034a4:	af04      	add	r7, sp, #16
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	//buffer[0] = (u8)(address>>8) ; 	//Upper Memory Address
	//buffer[1] = (u8)(address) ; 	//Lower Memory Address
	buffer[0] = (uint8)(address) ; 	//Memory Address
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	753b      	strb	r3, [r7, #20]

	delay_ms(100);
 80034b4:	2064      	movs	r0, #100	@ 0x64
 80034b6:	f000 fc27 	bl	8003d08 <delay_ms>
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 1,Without_Stop ,Start); //Write Address Only
 80034ba:	f107 0214 	add.w	r2, r7, #20
 80034be:	2300      	movs	r3, #0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2301      	movs	r3, #1
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2301      	movs	r3, #1
 80034c8:	2150      	movs	r1, #80	@ 0x50
 80034ca:	480b      	ldr	r0, [pc, #44]	@ (80034f8 <eeprom_read_byte+0x58>)
 80034cc:	f002 fc08 	bl	8005ce0 <MCAL_I2C_MASTER_TX>
	delay_ms(100);
 80034d0:	2064      	movs	r0, #100	@ 0x64
 80034d2:	f000 fc19 	bl	8003d08 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start, I2C_EEPROM); 			//Read Data
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	2200      	movs	r2, #0
 80034da:	9202      	str	r2, [sp, #8]
 80034dc:	2201      	movs	r2, #1
 80034de:	9201      	str	r2, [sp, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	9200      	str	r2, [sp, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	2150      	movs	r1, #80	@ 0x50
 80034e8:	4803      	ldr	r0, [pc, #12]	@ (80034f8 <eeprom_read_byte+0x58>)
 80034ea:	f002 fc55 	bl	8005d98 <MCAL_I2C_MASTER_RX>

	return 0;
 80034ee:	2300      	movs	r3, #0

}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40005400 	.word	0x40005400

080034fc <eeprom_read_integer>:

unsigned char eeprom_read_integer(unsigned int Memory_address, sint32* dataout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	uint8 buffer[4] = {0};
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
	eeprom_read_byte(Memory_address, buffer, 4);
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	2204      	movs	r2, #4
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffc4 	bl	80034a0 <eeprom_read_byte>

	sint32 temp = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
	uint8* P_char = &temp;
 800351c:	f107 0308 	add.w	r3, r7, #8
 8003520:	613b      	str	r3, [r7, #16]

	for(uint32 i = 0; i < 4; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e00d      	b.n	8003544 <eeprom_read_integer+0x48>
	{
		*(P_char + i) = buffer[3 - i];
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f1c3 0203 	rsb	r2, r3, #3
 800352e:	6939      	ldr	r1, [r7, #16]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	440b      	add	r3, r1
 8003534:	3218      	adds	r2, #24
 8003536:	443a      	add	r2, r7
 8003538:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800353c:	701a      	strb	r2, [r3, #0]
	for(uint32 i = 0; i < 4; i++)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3301      	adds	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d9ee      	bls.n	8003528 <eeprom_read_integer+0x2c>
	}

	*dataout = temp;
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <float_to_string_manual>:
 * @param P_uint8Buffer:            Pointer to the buffer where the resulting string will be stored.
 * @param Copy_float32FloatNum:     The floating-point number to convert.
 * @param Loc_uint32precision:      The number of digits to include after the decimal point.
 */
void float_to_string_manual(uint8* P_uint8Buffer, float32 Copy_float32FloatNum, uint32 Loc_uint32precision) 
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b08e      	sub	sp, #56	@ 0x38
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
   uint32 Loc_uint32IntPart = 0, Loc_uint32DecimalPart = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32 i = 0, k = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8 Loc_uint8TempBuffer[8] = {0};
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
    boolean is_negative = FALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Handle sign and extract integer part
    if (Copy_float32FloatNum < 0) 
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	68b8      	ldr	r0, [r7, #8]
 800358c:	f7fd fd8a 	bl	80010a4 <__aeabi_fcmplt>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <float_to_string_manual+0x48>
    {
        Copy_float32FloatNum = -Copy_float32FloatNum;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800359c:	60bb      	str	r3, [r7, #8]
        is_negative = TRUE;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    Loc_uint32IntPart = (sint32)Copy_float32FloatNum;
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f7fd fda5 	bl	80010f4 <__aeabi_f2iz>
 80035aa:	4603      	mov	r3, r0
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34

    // Handle decimal part if needed
    if (Loc_uint32precision > 0) 
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d021      	beq.n	80035f8 <float_to_string_manual+0x9c>
    {
        Copy_float32FloatNum *= pow(10, Loc_uint32precision);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fc ff2f 	bl	8000418 <__aeabi_ui2d>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	4951      	ldr	r1, [pc, #324]	@ (8003708 <float_to_string_manual+0x1ac>)
 80035c4:	f008 f932 	bl	800b82c <pow>
 80035c8:	4604      	mov	r4, r0
 80035ca:	460d      	mov	r5, r1
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f7fc ff45 	bl	800045c <__aeabi_f2d>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4620      	mov	r0, r4
 80035d8:	4629      	mov	r1, r5
 80035da:	f7fc ff97 	bl	800050c <__aeabi_dmul>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd fa61 	bl	8000aac <__aeabi_d2f>
 80035ea:	4603      	mov	r3, r0
 80035ec:	60bb      	str	r3, [r7, #8]
        Loc_uint32DecimalPart = (uint32)Copy_float32FloatNum;
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f7fd fda6 	bl	8001140 <__aeabi_f2uiz>
 80035f4:	4603      	mov	r3, r0
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    // Convert integer part to string
    if (is_negative) 
 80035f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <float_to_string_manual+0xb2>
    {
        P_uint8Buffer[i++] = '-';
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	222d      	movs	r2, #45	@ 0x2d
 800360c:	701a      	strb	r2, [r3, #0]
    }
    do 
    {
        Loc_uint8TempBuffer[k++] = Loc_uint32IntPart % 10 + '0';
 800360e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003610:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <float_to_string_manual+0x1b0>)
 8003612:	fba3 2301 	umull	r2, r3, r3, r1
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	1aca      	subs	r2, r1, r3
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	1c59      	adds	r1, r3, #1
 8003628:	62b9      	str	r1, [r7, #40]	@ 0x28
 800362a:	3230      	adds	r2, #48	@ 0x30
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	3338      	adds	r3, #56	@ 0x38
 8003630:	443b      	add	r3, r7
 8003632:	f803 2c28 	strb.w	r2, [r3, #-40]
        Loc_uint32IntPart /= 10;
 8003636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003638:	4a34      	ldr	r2, [pc, #208]	@ (800370c <float_to_string_manual+0x1b0>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	08db      	lsrs	r3, r3, #3
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
    } while (Loc_uint32IntPart > 0);
 8003642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e2      	bne.n	800360e <float_to_string_manual+0xb2>

    // Reverse the integer part digits and store them in the final buffer
    for(sint32 j = (k - 1); j >= 0; j--)
 8003648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	e00d      	b.n	800366c <float_to_string_manual+0x110>
    {
        P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	f107 0110 	add.w	r1, r7, #16
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	440a      	add	r2, r1
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	701a      	strb	r2, [r3, #0]
    for(sint32 j = (k - 1); j >= 0; j--)
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	3b01      	subs	r3, #1
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2b00      	cmp	r3, #0
 8003670:	daee      	bge.n	8003650 <float_to_string_manual+0xf4>
    }

    // Handle decimal part if needed
    if (Loc_uint32precision > 0) 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d03e      	beq.n	80036f6 <float_to_string_manual+0x19a>
    {
        P_uint8Buffer[i++] = '.';
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	222e      	movs	r2, #46	@ 0x2e
 8003684:	701a      	strb	r2, [r3, #0]

        // Extract and convert the decimal part to string
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e01b      	b.n	80036c4 <float_to_string_manual+0x168>
        {
            Loc_uint8TempBuffer[j] = Loc_uint32DecimalPart % 10 + '0';
 800368c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800368e:	4b1f      	ldr	r3, [pc, #124]	@ (800370c <float_to_string_manual+0x1b0>)
 8003690:	fba3 2301 	umull	r2, r3, r3, r1
 8003694:	08da      	lsrs	r2, r3, #3
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	1aca      	subs	r2, r1, r3
 80036a0:	b2d3      	uxtb	r3, r2
 80036a2:	3330      	adds	r3, #48	@ 0x30
 80036a4:	b2d9      	uxtb	r1, r3
 80036a6:	f107 0210 	add.w	r2, r7, #16
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	460a      	mov	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
            Loc_uint32DecimalPart /= 10;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	4a15      	ldr	r2, [pc, #84]	@ (800370c <float_to_string_manual+0x1b0>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8df      	bhi.n	800368c <float_to_string_manual+0x130>
        }
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e00d      	b.n	80036f0 <float_to_string_manual+0x194>
        {
            P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	f107 0110 	add.w	r1, r7, #16
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	440a      	add	r2, r1
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	701a      	strb	r2, [r3, #0]
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	daee      	bge.n	80036d4 <float_to_string_manual+0x178>
        }
    }

    P_uint8Buffer[i] = '\0'; // Null terminate the string
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3738      	adds	r7, #56	@ 0x38
 8003704:	46bd      	mov	sp, r7
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	40240000 	.word	0x40240000
 800370c:	cccccccd 	.word	0xcccccccd

08003710 <HESP32_ParseReceivedCommand>:

/**
 * @brief: Function to parse received commands from ESP32 and executes corresponding callbacks.
 */
void HESP32_ParseReceivedCommand  (void)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
    uint16 Loc_uint16RxChar = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	807b      	strh	r3, [r7, #2]
    MUART_RxCharAsynchronous(HESP32_UART_CHOICE, &Loc_uint16RxChar);
 800371a:	1cbb      	adds	r3, r7, #2
 800371c:	4619      	mov	r1, r3
 800371e:	2002      	movs	r0, #2
 8003720:	f003 fb8a 	bl	8006e38 <MUART_RxCharAsynchronous>
	
    if(glbl_uint8BufferIndex < HESP32_MAX_BUFFER_SPACE)
 8003724:	4b42      	ldr	r3, [pc, #264]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b27      	cmp	r3, #39	@ 0x27
 800372c:	d879      	bhi.n	8003822 <HESP32_ParseReceivedCommand+0x112>
    {
        if((uint8)Loc_uint16RxChar == '\n')
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d165      	bne.n	8003802 <HESP32_ParseReceivedCommand+0xf2>
        {
            // Null terminate the received command
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = '\0';
 8003736:	4b3e      	ldr	r3, [pc, #248]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b3d      	ldr	r3, [pc, #244]	@ (8003834 <HESP32_ParseReceivedCommand+0x124>)
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
            
            uint8 Loc_uint8Index = 0; 
 8003744:	2300      	movs	r3, #0
 8003746:	71fb      	strb	r3, [r7, #7]
	    	uint8 Loc_uint8FoundCommand = HESP32_COMMAND_NOT_FOUND;
 8003748:	2300      	movs	r3, #0
 800374a:	71bb      	strb	r3, [r7, #6]
	    	uint8 Loc_uint8Compare = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	717b      	strb	r3, [r7, #5]

            // Loop through available commands to find a match
            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 8003750:	2300      	movs	r3, #0
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	e04c      	b.n	80037f0 <HESP32_ParseReceivedCommand+0xe0>
            {
	    		Loc_uint8Compare = strncmp((HESP32_AvailableTasks[Loc_uint8Index]), glbl_uint8CommandBuffer, strlen((HESP32_AvailableTasks[Loc_uint8Index])));
 8003756:	79fa      	ldrb	r2, [r7, #7]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4a35      	ldr	r2, [pc, #212]	@ (8003838 <HESP32_ParseReceivedCommand+0x128>)
 8003762:	189c      	adds	r4, r3, r2
 8003764:	79fa      	ldrb	r2, [r7, #7]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4a32      	ldr	r2, [pc, #200]	@ (8003838 <HESP32_ParseReceivedCommand+0x128>)
 8003770:	4413      	add	r3, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc fd06 	bl	8000184 <strlen>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	492d      	ldr	r1, [pc, #180]	@ (8003834 <HESP32_ParseReceivedCommand+0x124>)
 800377e:	4620      	mov	r0, r4
 8003780:	f004 fd3b 	bl	80081fa <strncmp>
 8003784:	4603      	mov	r3, r0
 8003786:	717b      	strb	r3, [r7, #5]
                if(Loc_uint8Compare == 0)
 8003788:	797b      	ldrb	r3, [r7, #5]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d12d      	bne.n	80037ea <HESP32_ParseReceivedCommand+0xda>
                {
                    Loc_uint8FoundCommand = HESP32_COMMAND_FOUND;
 800378e:	2301      	movs	r3, #1
 8003790:	71bb      	strb	r3, [r7, #6]
                    
                    // Execute the corresponding callback
                    if(Loc_uint8Index < HESP32_NO_OF_NON_ARG_COMMANDS)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b11      	cmp	r3, #17
 8003796:	d80b      	bhi.n	80037b0 <HESP32_ParseReceivedCommand+0xa0>
                    {
                        if((glbl_PCallbackFunc[Loc_uint8Index]) != NULL_PTR)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	4a28      	ldr	r2, [pc, #160]	@ (800383c <HESP32_ParseReceivedCommand+0x12c>)
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d029      	beq.n	80037f8 <HESP32_ParseReceivedCommand+0xe8>
                        {
                            (glbl_PCallbackFunc[Loc_uint8Index])();
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HESP32_ParseReceivedCommand+0x12c>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	4798      	blx	r3
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
                            }
                        #else
                        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
                    }
	    			break;
 80037ae:	e023      	b.n	80037f8 <HESP32_ParseReceivedCommand+0xe8>
                            if((glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS]) != NULL_PTR)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	3b12      	subs	r3, #18
 80037b4:	4a22      	ldr	r2, [pc, #136]	@ (8003840 <HESP32_ParseReceivedCommand+0x130>)
 80037b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01c      	beq.n	80037f8 <HESP32_ParseReceivedCommand+0xe8>
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	3b12      	subs	r3, #18
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <HESP32_ParseReceivedCommand+0x130>)
 80037c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80037c8:	79fa      	ldrb	r2, [r7, #7]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HESP32_ParseReceivedCommand+0x128>)
 80037d4:	4413      	add	r3, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fcd4 	bl	8000184 <strlen>
 80037dc:	4603      	mov	r3, r0
 80037de:	3301      	adds	r3, #1
 80037e0:	4a14      	ldr	r2, [pc, #80]	@ (8003834 <HESP32_ParseReceivedCommand+0x124>)
 80037e2:	4413      	add	r3, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	47a0      	blx	r4
	    			break;
 80037e8:	e006      	b.n	80037f8 <HESP32_ParseReceivedCommand+0xe8>
            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	3301      	adds	r3, #1
 80037ee:	71fb      	strb	r3, [r7, #7]
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d9af      	bls.n	8003756 <HESP32_ParseReceivedCommand+0x46>
 80037f6:	e000      	b.n	80037fa <HESP32_ParseReceivedCommand+0xea>
	    			break;
 80037f8:	bf00      	nop
                    /*Do nothing*/
                }
            }

            // Reset buffer index
            glbl_uint8BufferIndex = 0;
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    else
    {
        // Buffer overflow, reset buffer index
        glbl_uint8BufferIndex = 0;
    }
}
 8003800:	e012      	b.n	8003828 <HESP32_ParseReceivedCommand+0x118>
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = (uint8)(Loc_uint16RxChar);
 8003802:	8879      	ldrh	r1, [r7, #2]
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	b2c9      	uxtb	r1, r1
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HESP32_ParseReceivedCommand+0x124>)
 8003810:	5499      	strb	r1, [r3, r2]
            glbl_uint8BufferIndex++;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 800381e:	701a      	strb	r2, [r3, #0]
}
 8003820:	e002      	b.n	8003828 <HESP32_ParseReceivedCommand+0x118>
        glbl_uint8BufferIndex = 0;
 8003822:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <HESP32_ParseReceivedCommand+0x120>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	200007e8 	.word	0x200007e8
 8003834:	200007c0 	.word	0x200007c0
 8003838:	20000000 	.word	0x20000000
 800383c:	20000704 	.word	0x20000704
 8003840:	20000784 	.word	0x20000784

08003844 <HESP32_InitInterface>:
 * @return Std_ReturnType
 * @retval E_OK:        Initialization is successful
 * @retval E_NOT_OK:    Failed to initialize communication 
 */
Std_ReturnType HESP32_InitInterface              (void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800384a:	2301      	movs	r3, #1
 800384c:	71fb      	strb	r3, [r7, #7]

        //Initialize UART 2 peripheral
        MUART_Init(UART2);
    #elif HESP32_UART_CHOICE == HESP32_UART3
        //Enable Clock for UART3 and its tx and rx pins
        MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_USART3_EN);
 800384e:	2112      	movs	r1, #18
 8003850:	2002      	movs	r0, #2
 8003852:	f002 fd13 	bl	800627c <MRCC_EnablePeripheralClock>
        MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 8003856:	2103      	movs	r1, #3
 8003858:	2003      	movs	r0, #3
 800385a:	f002 fd0f 	bl	800627c <MRCC_EnablePeripheralClock>

        //Set Tx pin to be output alternate function and rx to be input pull-up
        MGPIO_SetPinMode(MUART3_TX_PORT_ID, MUART3_TX_PIN_ID, MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ);
 800385e:	220a      	movs	r2, #10
 8003860:	210a      	movs	r1, #10
 8003862:	2001      	movs	r0, #1
 8003864:	f001 fd8c 	bl	8005380 <MGPIO_SetPinMode>
        MGPIO_SetPinMode(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID, MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 8003868:	2208      	movs	r2, #8
 800386a:	210b      	movs	r1, #11
 800386c:	2001      	movs	r0, #1
 800386e:	f001 fd87 	bl	8005380 <MGPIO_SetPinMode>
        MGPIO_ActivatePullUp(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID);
 8003872:	210b      	movs	r1, #11
 8003874:	2001      	movs	r0, #1
 8003876:	f001 ff5d 	bl	8005734 <MGPIO_ActivatePullUp>

        //Enable Interrupt for UART 3
        MNVIC_EnableInterrupt(MNVIC_USART3);
 800387a:	2027      	movs	r0, #39	@ 0x27
 800387c:	f002 fc18 	bl	80060b0 <MNVIC_EnableInterrupt>

        MUART_SetRxCompleteCallback(UART3, HESP32_ParseReceivedCommand);
 8003880:	4906      	ldr	r1, [pc, #24]	@ (800389c <HESP32_InitInterface+0x58>)
 8003882:	2002      	movs	r0, #2
 8003884:	f003 fb32 	bl	8006eec <MUART_SetRxCompleteCallback>
        
        //Initialize UART 1 peripheral
        MUART_Init(UART3);
 8003888:	2002      	movs	r0, #2
 800388a:	f003 f9c7 	bl	8006c1c <MUART_Init>
    #else
        #error "UART Choice for communication is not specified"
    #endif /*HESP32_UART_CHOICE*/
    Loc_uint8FuncStatus = E_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8003892:	79fb      	ldrb	r3, [r7, #7]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08003711 	.word	0x08003711

080038a0 <HESP32_SendCommand>:
 * @return Std_ReturnType 
 * @retval E_OK:                                Command is sent successfully
 * @retval E_NOT_OK:                            Otherwise
 */
Std_ReturnType HESP32_SendCommand                (uint8* P_uint8Command)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
    if(P_uint8Command != NULL_PTR)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HESP32_SendCommand+0x28>
    {
        MUART_TxString(HESP32_UART_CHOICE , P_uint8Command);
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	2002      	movs	r0, #2
 80038b6:	f003 faed 	bl	8006e94 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80038ba:	210a      	movs	r1, #10
 80038bc:	2002      	movs	r0, #2
 80038be:	f003 fa7f 	bl	8006dc0 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e001      	b.n	80038cc <HESP32_SendCommand+0x2c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HESP32_SetCommandCallbackFunction>:
 * @return Std_ReturnType
 * @retval E_OK:                                Callback function is set successfully
 * @retval E_NOT_OK:                            Otherwise
 */
Std_ReturnType HESP32_SetCommandCallbackFunction    (uint8 Copy_uint8CommandNumber,ptr_to_Callback_func P_CommandCallbackFunc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d80a      	bhi.n	8003904 <HESP32_SetCommandCallbackFunction+0x2c>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HESP32_SetCommandCallbackFunction+0x2c>
    {
        glbl_PCallbackFunc[Copy_uint8CommandNumber] = P_CommandCallbackFunc;
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	4907      	ldr	r1, [pc, #28]	@ (8003914 <HESP32_SetCommandCallbackFunction+0x3c>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Loc_uint8FuncStatus = E_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e001      	b.n	8003908 <HESP32_SetCommandCallbackFunction+0x30>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000704 	.word	0x20000704

08003918 <HESP32_SetCommandCallbackArgFunction>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Argument callback function is set successfully
 * @retval E_NOT_OK:                                Otherwise
 */
Std_ReturnType HESP32_SetCommandCallbackArgFunction (uint8 Copy_uint8CommandNumber, ptr_to_Arg_Callback_func P_CommandCallbackFunc)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b20      	cmp	r3, #32
 800392c:	d80b      	bhi.n	8003946 <HESP32_SetCommandCallbackArgFunction+0x2e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HESP32_SetCommandCallbackArgFunction+0x2e>
    {
        #if HESP32_NO_OF_ARG_COMMANDS == 1
            glbl_PArgCallbackFunc = P_CommandCallbackFunc;
        #elif HESP32_NO_OF_ARG_COMMANDS > 1
            glbl_PArgCallbackFunc[Copy_uint8CommandNumber - HESP32_NO_OF_NON_ARG_COMMANDS] = P_CommandCallbackFunc;
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	3b12      	subs	r3, #18
 8003938:	4907      	ldr	r1, [pc, #28]	@ (8003958 <HESP32_SetCommandCallbackArgFunction+0x40>)
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        #else
        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
        
        Loc_uint8FuncStatus = E_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e001      	b.n	800394a <HESP32_SetCommandCallbackArgFunction+0x32>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000784 	.word	0x20000784

0800395c <HESP32_SendMotorStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Data is sent successfully
 * @retval E_NOT_OK:                                Otherwise
 */
Std_ReturnType HESP32_SendMotorStatus               (uint32* P_uint32MotorSteps, float32* P_float32CurrentWL, uint8 Copy_uint8MotorNum)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	@ 0x38
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if((P_uint32MotorSteps != NULL_PTR) && (P_float32CurrentWL != NULL_PTR) && ((Copy_uint8MotorNum == 1) || (Copy_uint8MotorNum == 3)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d057      	beq.n	8003a26 <HESP32_SendMotorStatus+0xca>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d054      	beq.n	8003a26 <HESP32_SendMotorStatus+0xca>
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <HESP32_SendMotorStatus+0x2c>
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d14e      	bne.n	8003a26 <HESP32_SendMotorStatus+0xca>
    {
        uint8 Loc_uint8Index = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 800398e:	2300      	movs	r3, #0
 8003990:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8003994:	e019      	b.n	80039ca <HESP32_SendMotorStatus+0x6e>
        {
            MUART_SendIntegerValue(HESP32_UART_CHOICE, P_uint32MotorSteps[Loc_uint8Index]);
 8003996:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	2002      	movs	r0, #2
 80039a6:	f003 fabf 	bl	8006f28 <MUART_SendIntegerValue>
            if((Loc_uint8Index < 2) && (Copy_uint8MotorNum == 3))
 80039aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d810      	bhi.n	80039d4 <HESP32_SendMotorStatus+0x78>
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d10d      	bne.n	80039d4 <HESP32_SendMotorStatus+0x78>
            {
                MUART_TxChar(HESP32_UART_CHOICE, '-');
 80039b8:	212d      	movs	r1, #45	@ 0x2d
 80039ba:	2002      	movs	r0, #2
 80039bc:	f003 fa00 	bl	8006dc0 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 80039c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80039c4:	3301      	adds	r3, #1
 80039c6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80039ca:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3e0      	bcc.n	8003996 <HESP32_SendMotorStatus+0x3a>
			else
			{
				break;
			}
        }
        if(Copy_uint8MotorNum == 3)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d11d      	bne.n	8003a16 <HESP32_SendMotorStatus+0xba>
        {
			MUART_TxChar(HESP32_UART_CHOICE, '-');
 80039da:	212d      	movs	r1, #45	@ 0x2d
 80039dc:	2002      	movs	r0, #2
 80039de:	f003 f9ef 	bl	8006dc0 <MUART_TxChar>
			uint8 Loc_uint8Buffer[32] = {0};
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	619a      	str	r2, [r3, #24]
			float_to_string_manual(Loc_uint8Buffer, *P_float32CurrentWL, 3);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	2203      	movs	r2, #3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fda9 	bl	800355c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8Buffer);
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2002      	movs	r0, #2
 8003a12:	f003 fa3f 	bl	8006e94 <MUART_TxString>
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003a16:	210a      	movs	r1, #10
 8003a18:	2002      	movs	r0, #2
 8003a1a:	f003 f9d1 	bl	8006dc0 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    {
 8003a24:	e002      	b.n	8003a2c <HESP32_SendMotorStatus+0xd0>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    return Loc_uint8FuncStatus;
 8003a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3738      	adds	r7, #56	@ 0x38
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HESP32_SendDateTime>:
 * @return Std_ReturnType 
 * @retval E_OK:                                    If the date and time are sent successfully
 * @retval E_NOT_OK:                                Otherwise.
 */
Std_ReturnType HESP32_SendDateTime                  (Sdate_t* P_SDateToBeSent, Stime_t* P_STimeToBeSent)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]

    if((P_SDateToBeSent != NULL_PTR) && (P_STimeToBeSent != NULL_PTR))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d041      	beq.n	8003ad0 <HESP32_SendDateTime+0x98>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03e      	beq.n	8003ad0 <HESP32_SendDateTime+0x98>
    {
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_months));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	789b      	ldrb	r3, [r3, #2]
 8003a56:	4619      	mov	r1, r3
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f003 fa65 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003a5e:	212f      	movs	r1, #47	@ 0x2f
 8003a60:	2002      	movs	r0, #2
 8003a62:	f003 f9ad 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_days));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	78db      	ldrb	r3, [r3, #3]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f003 fa5b 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003a72:	212f      	movs	r1, #47	@ 0x2f
 8003a74:	2002      	movs	r0, #2
 8003a76:	f003 f9a3 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_years));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	2002      	movs	r0, #2
 8003a82:	f003 fa51 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003a86:	2120      	movs	r1, #32
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f003 f999 	bl	8006dc0 <MUART_TxChar>
        
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_hours));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	2002      	movs	r0, #2
 8003a96:	f003 fa47 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003a9a:	213a      	movs	r1, #58	@ 0x3a
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f003 f98f 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_minutes));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f003 fa3d 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003aae:	213a      	movs	r1, #58	@ 0x3a
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	f003 f985 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_seconds));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	789b      	ldrb	r3, [r3, #2]
 8003aba:	4619      	mov	r1, r3
 8003abc:	2002      	movs	r0, #2
 8003abe:	f003 fa33 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003ac2:	210a      	movs	r1, #10
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f003 f97b 	bl	8006dc0 <MUART_TxChar>
        
        Loc_uint8FuncStatus = E_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e001      	b.n	8003ad4 <HESP32_SendDateTime+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
    }

    return Loc_uint8FuncStatus;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HESP32_SendTime>:
 * @return Std_ReturnType
 * @retval E_OK:                                    If the time is sent successfully
 * @retval E_NOT_OK:                                Otherwise
 */
Std_ReturnType HESP32_SendTime                      (Stime_t* P_STimeToBeSent)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    if(P_STimeToBeSent != NULL_PTR)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01f      	beq.n	8003b2c <HESP32_SendTime+0x4e>
    {
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_hours));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	2002      	movs	r0, #2
 8003af4:	f003 fa18 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003af8:	213a      	movs	r1, #58	@ 0x3a
 8003afa:	2002      	movs	r0, #2
 8003afc:	f003 f960 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_minutes));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	4619      	mov	r1, r3
 8003b06:	2002      	movs	r0, #2
 8003b08:	f003 fa0e 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003b0c:	213a      	movs	r1, #58	@ 0x3a
 8003b0e:	2002      	movs	r0, #2
 8003b10:	f003 f956 	bl	8006dc0 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_seconds));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	789b      	ldrb	r3, [r3, #2]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f003 fa04 	bl	8006f28 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003b20:	210a      	movs	r1, #10
 8003b22:	2002      	movs	r0, #2
 8003b24:	f003 f94c 	bl	8006dc0 <MUART_TxChar>

        return E_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HESP32_SendTime+0x50>
    }
    else
    {
        return E_NOT_OK;
 8003b2c:	2301      	movs	r3, #1
    }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HESP32_SendIntensities>:
 * @return Std_ReturnType
 * @retval E_OK:                                    If the data is sent successfully
 * @retval E_NOT_OK:                                Otherwise
 */
Std_ReturnType HESP32_SendIntensities               (float32 Copy_float32WL, float32 Copy_float32RefIntensity, float32 Copy_float32SampleIntensity, Operation_t Copy_uint32OperationType)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08c      	sub	sp, #48	@ 0x30
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	70fb      	strb	r3, [r7, #3]
    	uint8 Loc_uint8IntensityBuffer[32] = {0};
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	619a      	str	r2, [r3, #24]
        
        if(Copy_uint32OperationType == HESP32_SCAN)
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d110      	bne.n	8003b84 <HESP32_SendIntensities+0x4e>
        {
            float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32WL, 1);
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	2201      	movs	r2, #1
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fcf6 	bl	800355c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	4619      	mov	r1, r3
 8003b76:	2002      	movs	r0, #2
 8003b78:	f003 f98c 	bl	8006e94 <MUART_TxString>
            MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f003 f91e 	bl	8006dc0 <MUART_TxChar>
        else
        {
            /*Do nothing*/
        }

        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32RefIntensity, 3);
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	2203      	movs	r2, #3
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fce5 	bl	800355c <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003b92:	f107 0310 	add.w	r3, r7, #16
 8003b96:	4619      	mov	r1, r3
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f003 f97b 	bl	8006e94 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	2002      	movs	r0, #2
 8003ba2:	f003 f90d 	bl	8006dc0 <MUART_TxChar>

        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32SampleIntensity, 3);
 8003ba6:	f107 0310 	add.w	r3, r7, #16
 8003baa:	2203      	movs	r2, #3
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fcd4 	bl	800355c <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f003 f96a 	bl	8006e94 <MUART_TxString>
        
        
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003bc0:	210a      	movs	r1, #10
 8003bc2:	2002      	movs	r0, #2
 8003bc4:	f003 f8fc 	bl	8006dc0 <MUART_TxChar>

        return E_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3730      	adds	r7, #48	@ 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HESP32_SendVoltages>:
 * @return Std_ReturnType
 * @retval E_OK:                                    If the voltages are sent successfully
 * @retval E_NOT_OK:                                Otherwise.
 */
Std_ReturnType HESP32_SendVoltages                  (uint8 PP_uint8Voltages[][32])
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
    if(PP_uint8Voltages != NULL_PTR)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <HESP32_SendVoltages+0x4e>
    {
        uint8 Loc_uint8Index = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e011      	b.n	8003c0e <HESP32_SendVoltages+0x3c>
        {
            MUART_TxString(HESP32_UART_CHOICE, PP_uint8Voltages[Loc_uint8Index]);
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	015b      	lsls	r3, r3, #5
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	f003 f94d 	bl	8006e94 <MUART_TxString>
            if(Loc_uint8Index < 4)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d803      	bhi.n	8003c08 <HESP32_SendVoltages+0x36>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003c00:	2120      	movs	r1, #32
 8003c02:	2002      	movs	r0, #2
 8003c04:	f003 f8dc 	bl	8006dc0 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d9ea      	bls.n	8003bea <HESP32_SendVoltages+0x18>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003c14:	210a      	movs	r1, #10
 8003c16:	2002      	movs	r0, #2
 8003c18:	f003 f8d2 	bl	8006dc0 <MUART_TxChar>
        return E_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HESP32_SendVoltages+0x50>

    }
    else
    {
        return E_NOT_OK;
 8003c20:	2301      	movs	r3, #1
    }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HESP32_SendAllDetectorValues>:
 * @return Std_ReturnType
 * @retval E_OK:                                    If the data is sent successfully
 * @retval E_NOT_OK:                                Otherwise
 */
Std_ReturnType HESP32_SendAllDetectorValues         (float32* P_float32Readings, float32* P_float32GainValues)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08c      	sub	sp, #48	@ 0x30
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
    if((P_float32GainValues != NULL_PTR) && (P_float32Readings != NULL_PTR))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d061      	beq.n	8003cfe <HESP32_SendAllDetectorValues+0xd4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05e      	beq.n	8003cfe <HESP32_SendAllDetectorValues+0xd4>
    {
        uint8 Loc_uint8Index = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        uint8 Loc_uint8DetBuffer[32] = {0};
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	615a      	str	r2, [r3, #20]
 8003c5c:	619a      	str	r2, [r3, #24]
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c64:	e01a      	b.n	8003c9c <HESP32_SendAllDetectorValues+0x72>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32Readings[Loc_uint8Index], 3);
 8003c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	2203      	movs	r2, #3
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fc6f 	bl	800355c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 8003c7e:	f107 030c 	add.w	r3, r7, #12
 8003c82:	4619      	mov	r1, r3
 8003c84:	2002      	movs	r0, #2
 8003c86:	f003 f905 	bl	8006e94 <MUART_TxString>
            MUART_TxChar(HESP32_UART_CHOICE, '-');
 8003c8a:	212d      	movs	r1, #45	@ 0x2d
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f003 f897 	bl	8006dc0 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 8003c92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c96:	3301      	adds	r3, #1
 8003c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d9e0      	bls.n	8003c66 <HESP32_SendAllDetectorValues+0x3c>
        }
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003caa:	e01e      	b.n	8003cea <HESP32_SendAllDetectorValues+0xc0>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32GainValues[Loc_uint8Index], 3);
 8003cac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fc4c 	bl	800355c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4619      	mov	r1, r3
 8003cca:	2002      	movs	r0, #2
 8003ccc:	f003 f8e2 	bl	8006e94 <MUART_TxString>
            if(Loc_uint8Index < 1)
 8003cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HESP32_SendAllDetectorValues+0xb6>
            {
                MUART_TxChar(HESP32_UART_CHOICE, '-');
 8003cd8:	212d      	movs	r1, #45	@ 0x2d
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f003 f870 	bl	8006dc0 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 8003ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003cea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d9dc      	bls.n	8003cac <HESP32_SendAllDetectorValues+0x82>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003cf2:	210a      	movs	r1, #10
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	f003 f863 	bl	8006dc0 <MUART_TxChar>
        return E_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <HESP32_SendAllDetectorValues+0xd6>
    }
    else
    {
        return E_NOT_OK;
 8003cfe:	2301      	movs	r3, #1
    }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3730      	adds	r7, #48	@ 0x30
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <delay_ms>:
 */
#include "MCP4151.h"
#include "math.h"

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e002      	b.n	8003d28 <delay_ms+0x20>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d3f8      	bcc.n	8003d22 <delay_ms+0x1a>
		// Do nothing
	}
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <delay_micro>:
void delay_micro(uint32 milliseconds) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e002      	b.n	8003d54 <delay_micro+0x18>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d3f8      	bcc.n	8003d4e <delay_micro+0x12>
		// Do nothing
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <MCP4151_Sample_SetWiperPosition>:
void MCP4151_Sample_SetWiperPosition(uint8 position){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 8003d72:	2300      	movs	r3, #0
 8003d74:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_LOW);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2108      	movs	r1, #8
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f001 fbe6 	bl	800554c <MGPIO_SetPinValue>
	delay_micro(10);
 8003d80:	200a      	movs	r0, #10
 8003d82:	f7ff ffdb 	bl	8003d3c <delay_micro>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003d86:	f107 030e 	add.w	r3, r7, #14
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	480e      	ldr	r0, [pc, #56]	@ (8003dc8 <MCP4151_Sample_SetWiperPosition+0x60>)
 8003d90:	f002 fd82 	bl	8006898 <MCAL_SPI_SendData>
	delay_micro(10);
 8003d94:	200a      	movs	r0, #10
 8003d96:	f7ff ffd1 	bl	8003d3c <delay_micro>
	command = position;
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003da0:	f107 030e 	add.w	r3, r7, #14
 8003da4:	2200      	movs	r2, #0
 8003da6:	4619      	mov	r1, r3
 8003da8:	4807      	ldr	r0, [pc, #28]	@ (8003dc8 <MCP4151_Sample_SetWiperPosition+0x60>)
 8003daa:	f002 fd75 	bl	8006898 <MCAL_SPI_SendData>
	delay_micro(10);
 8003dae:	200a      	movs	r0, #10
 8003db0:	f7ff ffc4 	bl	8003d3c <delay_micro>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 8003db4:	2201      	movs	r2, #1
 8003db6:	2108      	movs	r1, #8
 8003db8:	2000      	movs	r0, #0
 8003dba:	f001 fbc7 	bl	800554c <MGPIO_SetPinValue>
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40003800 	.word	0x40003800

08003dcc <MCP4151_Referance_SetWiperPosition>:

void MCP4151_Referance_SetWiperPosition(uint8 position){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_LOW);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2102      	movs	r1, #2
 8003dde:	2000      	movs	r0, #0
 8003de0:	f001 fbb4 	bl	800554c <MGPIO_SetPinValue>
	delay_micro(10);
 8003de4:	200a      	movs	r0, #10
 8003de6:	f7ff ffa9 	bl	8003d3c <delay_micro>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003dea:	f107 030e 	add.w	r3, r7, #14
 8003dee:	2200      	movs	r2, #0
 8003df0:	4619      	mov	r1, r3
 8003df2:	480e      	ldr	r0, [pc, #56]	@ (8003e2c <MCP4151_Referance_SetWiperPosition+0x60>)
 8003df4:	f002 fd50 	bl	8006898 <MCAL_SPI_SendData>
	delay_micro(10);
 8003df8:	200a      	movs	r0, #10
 8003dfa:	f7ff ff9f 	bl	8003d3c <delay_micro>
	command = position;
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003e04:	f107 030e 	add.w	r3, r7, #14
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4807      	ldr	r0, [pc, #28]	@ (8003e2c <MCP4151_Referance_SetWiperPosition+0x60>)
 8003e0e:	f002 fd43 	bl	8006898 <MCAL_SPI_SendData>
	delay_micro(10);
 8003e12:	200a      	movs	r0, #10
 8003e14:	f7ff ff92 	bl	8003d3c <delay_micro>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f001 fb95 	bl	800554c <MGPIO_SetPinValue>
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40003800 	.word	0x40003800

08003e30 <MCP4151_Init>:
 * @param[in]		 -none
 * @retval			 -none
 * Note				 -SPI2 used
 */
void MCP4151_Init()
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
	//SPI Init

	SPI_Config SPI2CFG;

	SPI2CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8003e36:	2301      	movs	r3, #1
 8003e38:	817b      	strh	r3, [r7, #10]
	SPI2CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	813b      	strh	r3, [r7, #8]
	SPI2CFG.DataSize = SPI_DataSize_8BIT;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	80fb      	strh	r3, [r7, #6]
	SPI2CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 8003e42:	2300      	movs	r3, #0
 8003e44:	80bb      	strh	r3, [r7, #4]
	SPI2CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_16;
 8003e46:	2318      	movs	r3, #24
 8003e48:	81fb      	strh	r3, [r7, #14]
	SPI2CFG.Communication_Mode = SPI_Direction_2LINES;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	807b      	strh	r3, [r7, #2]

#ifdef MCU_Act_As_Master

	SPI2CFG.Device_Mode = SPI_Device_Mode_MASTER;
 8003e4e:	2304      	movs	r3, #4
 8003e50:	803b      	strh	r3, [r7, #0]
	SPI2CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	823b      	strh	r3, [r7, #16]
	SPI2CFG.NSS = SPI_NSS_soft_NSSInternalSoft_Set;
 8003e56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e5a:	81bb      	strh	r3, [r7, #12]
	SPI2CFG.P_IRQ_CallBack = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_Init(SPI2,&SPI2CFG);
 8003e60:	463b      	mov	r3, r7
 8003e62:	4619      	mov	r1, r3
 8003e64:	4804      	ldr	r0, [pc, #16]	@ (8003e78 <MCP4151_Init+0x48>)
 8003e66:	f002 fc91 	bl	800678c <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins (SPI2);
 8003e6a:	4803      	ldr	r0, [pc, #12]	@ (8003e78 <MCP4151_Init+0x48>)
 8003e6c:	f002 fd54 	bl	8006918 <MCAL_SPI_GPIO_Set_Pins>
}
 8003e70:	bf00      	nop
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40003800 	.word	0x40003800

08003e7c <Set_Sample_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_reference_gain"
 */
void Set_Sample_Gain(float32 gain)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	//Sample
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 8003e84:	2201      	movs	r2, #1
 8003e86:	2108      	movs	r1, #8
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f001 fa79 	bl	8005380 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2108      	movs	r1, #8
 8003e92:	2000      	movs	r0, #0
 8003e94:	f001 fb5a 	bl	800554c <MGPIO_SetPinValue>
	delay_micro(100);
 8003e98:	2064      	movs	r0, #100	@ 0x64
 8003e9a:	f7ff ff4f 	bl	8003d3c <delay_micro>
	ref_sample x = SAMPLE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f82c 	bl	8003f04 <steps_calculate>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73bb      	strb	r3, [r7, #14]
	MCP4151_Sample_SetWiperPosition(steps);
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff58 	bl	8003d68 <MCP4151_Sample_SetWiperPosition>
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <Set_Reference_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_sample_gain"
 */
void Set_Reference_Gain(float32 gain)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	//Referance
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	2102      	movs	r1, #2
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f001 fa57 	bl	8005380 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f001 fb38 	bl	800554c <MGPIO_SetPinValue>
	delay_micro(100);
 8003edc:	2064      	movs	r0, #100	@ 0x64
 8003ede:	f7ff ff2d 	bl	8003d3c <delay_micro>
	ref_sample x = REFERENCE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f80a 	bl	8003f04 <steps_calculate>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73bb      	strb	r3, [r7, #14]
	MCP4151_Referance_SetWiperPosition(steps);
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff68 	bl	8003dcc <MCP4151_Referance_SetWiperPosition>
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <steps_calculate>:
 * @param[in]		 -x: where x can be REFERENCE or SAMPLE
 * @retval			 -steps: calculated no. of steps
 * Note			 	 -The number of steps is rounded to the nearest integer
 */
uint8 steps_calculate(float32 gain, ref_sample x)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
	int total_resistance;
	if (x == REFERENCE)
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <steps_calculate+0x1a>
		total_resistance = MCP_TOTAL_RESISTANCE_REFERENCE;
 8003f16:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e002      	b.n	8003f24 <steps_calculate+0x20>
	else
		total_resistance = MCP_TOTAL_RESISTANCE_SAMPLE;
 8003f1e:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8003f22:	617b      	str	r3, [r7, #20]
	float32 R;
	R = (RESISTANCE_ON_PCB / (gain - 1)) + WIPER_RESISTANCE;
 8003f24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc fe13 	bl	8000b54 <__aeabi_fsub>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4619      	mov	r1, r3
 8003f32:	481d      	ldr	r0, [pc, #116]	@ (8003fa8 <steps_calculate+0xa4>)
 8003f34:	f7fc ffcc 	bl	8000ed0 <__aeabi_fdiv>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	491c      	ldr	r1, [pc, #112]	@ (8003fac <steps_calculate+0xa8>)
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fe0b 	bl	8000b58 <__addsf3>
 8003f42:	4603      	mov	r3, r0
 8003f44:	613b      	str	r3, [r7, #16]
	float32 steps_result;
	steps_result = ((total_resistance - R) * 256) / total_resistance;
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	f7fc feba 	bl	8000cc0 <__aeabi_i2f>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fdff 	bl	8000b54 <__aeabi_fsub>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc ff03 	bl	8000d68 <__aeabi_fmul>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461c      	mov	r4, r3
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7fc feaa 	bl	8000cc0 <__aeabi_i2f>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4620      	mov	r0, r4
 8003f72:	f7fc ffad 	bl	8000ed0 <__aeabi_fdiv>
 8003f76:	4603      	mov	r3, r0
 8003f78:	60fb      	str	r3, [r7, #12]
	uint8 steps = round(steps_result);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7fc fa6e 	bl	800045c <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f007 fcbe 	bl	800b908 <round>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7fc fd6a 	bl	8000a6c <__aeabi_d2uiz>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	72fb      	strb	r3, [r7, #11]
	return steps;
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	47c35000 	.word	0x47c35000
 8003fac:	439b8000 	.word	0x439b8000

08003fb0 <get_reference_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the reference
 * Note			 	 -none
 */
float32 get_reference_gain(float32 gain)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	ref_sample x = REFERENCE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff9f 	bl	8003f04 <steps_calculate>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_REFERENCE - steps * (MCP_TOTAL_RESISTANCE_REFERENCE / 256.0);
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fa33 	bl	8000438 <__aeabi_i2d>
 8003fd2:	a313      	add	r3, pc, #76	@ (adr r3, 8004020 <get_reference_gain+0x70>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc fa98 	bl	800050c <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	a111      	add	r1, pc, #68	@ (adr r1, 8004028 <get_reference_gain+0x78>)
 8003fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fe6:	f7fc f8d9 	bl	800019c <__aeabi_dsub>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7fc fd5b 	bl	8000aac <__aeabi_d2f>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	480c      	ldr	r0, [pc, #48]	@ (8004030 <get_reference_gain+0x80>)
 8003ffe:	f7fc ff67 	bl	8000ed0 <__aeabi_fdiv>
 8004002:	4603      	mov	r3, r0
 8004004:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fda5 	bl	8000b58 <__addsf3>
 800400e:	4603      	mov	r3, r0
 8004010:	607b      	str	r3, [r7, #4]
	return gain;
 8004012:	687b      	ldr	r3, [r7, #4]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	f3af 8000 	nop.w
 8004020:	00000000 	.word	0x00000000
 8004024:	4067a200 	.word	0x4067a200
 8004028:	00000000 	.word	0x00000000
 800402c:	40e7a200 	.word	0x40e7a200
 8004030:	47c35000 	.word	0x47c35000
 8004034:	00000000 	.word	0x00000000

08004038 <get_sample_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the sample
 * Note			 	 -none
 */
float32 get_sample_gain(float32 gain)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	ref_sample x = SAMPLE;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff5b 	bl	8003f04 <steps_calculate>
 800404e:	4603      	mov	r3, r0
 8004050:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_SAMPLE- steps * (MCP_TOTAL_RESISTANCE_SAMPLE / 256.0);
 8004052:	7bbb      	ldrb	r3, [r7, #14]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc f9ef 	bl	8000438 <__aeabi_i2d>
 800405a:	a313      	add	r3, pc, #76	@ (adr r3, 80040a8 <get_sample_gain+0x70>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa54 	bl	800050c <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	a111      	add	r1, pc, #68	@ (adr r1, 80040b0 <get_sample_gain+0x78>)
 800406a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406e:	f7fc f895 	bl	800019c <__aeabi_dsub>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f7fc fd17 	bl	8000aac <__aeabi_d2f>
 800407e:	4603      	mov	r3, r0
 8004080:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	480c      	ldr	r0, [pc, #48]	@ (80040b8 <get_sample_gain+0x80>)
 8004086:	f7fc ff23 	bl	8000ed0 <__aeabi_fdiv>
 800408a:	4603      	mov	r3, r0
 800408c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fd61 	bl	8000b58 <__addsf3>
 8004096:	4603      	mov	r3, r0
 8004098:	607b      	str	r3, [r7, #4]
	return gain;
 800409a:	687b      	ldr	r3, [r7, #4]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	f3af 8000 	nop.w
 80040a8:	00000000 	.word	0x00000000
 80040ac:	4067a200 	.word	0x4067a200
 80040b0:	00000000 	.word	0x00000000
 80040b4:	40e7a200 	.word	0x40e7a200
 80040b8:	47c35000 	.word	0x47c35000

080040bc <HPWRSupply_GetSenseValue>:
static volatile uint16 glbl_uint16SenseValue[HPWRSUPPLY_NO_OF_SENSE_CHANNELS] = {0};
static volatile uint8 glbl_uint8SlowChannelFlag = 0;


void HPWRSupply_GetSenseValue(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	80fb      	strh	r3, [r7, #6]
    
    /****************************Check if VIS supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[0] == HPWRSUPPLY_ON)
 80040c6:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HPWRSupply_GetSenseValue+0x80>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d121      	bne.n	8004114 <HPWRSupply_GetSenseValue+0x58>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[0], &Loc_uint16VoltageValue);
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HPWRSupply_GetSenseValue+0x84>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	1dba      	adds	r2, r7, #6
 80040d8:	4619      	mov	r1, r3
 80040da:	2000      	movs	r0, #0
 80040dc:	f000 feb4 	bl	8004e48 <MADC_Conversion>
        glbl_uint16SenseValue[0] = Loc_uint16VoltageValue;
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HPWRSupply_GetSenseValue+0x88>)
 80040e4:	801a      	strh	r2, [r3, #0]
        if(glbl_uint8SlowChannelFlag == 1)
 80040e6:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <HPWRSupply_GetSenseValue+0x8c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10e      	bne.n	800410e <HPWRSupply_GetSenseValue+0x52>
        {
            MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[1], &Loc_uint16VoltageValue);
 80040f0:	4b13      	ldr	r3, [pc, #76]	@ (8004140 <HPWRSupply_GetSenseValue+0x84>)
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	1dba      	adds	r2, r7, #6
 80040f8:	4619      	mov	r1, r3
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 fea4 	bl	8004e48 <MADC_Conversion>
            glbl_uint16SenseValue[1] = Loc_uint16VoltageValue;
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <HPWRSupply_GetSenseValue+0x88>)
 8004104:	805a      	strh	r2, [r3, #2]
            glbl_uint8SlowChannelFlag = 0;
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <HPWRSupply_GetSenseValue+0x8c>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <HPWRSupply_GetSenseValue+0x58>
        }
        else
        {
            glbl_uint8SlowChannelFlag = 1;
 800410e:	4b0e      	ldr	r3, [pc, #56]	@ (8004148 <HPWRSupply_GetSenseValue+0x8c>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    {
        /*Do nothing*/
    }

    /****************************Check if UV supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[1] == HPWRSUPPLY_ON)
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <HPWRSupply_GetSenseValue+0x80>)
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10a      	bne.n	8004134 <HPWRSupply_GetSenseValue+0x78>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[2], &Loc_uint16VoltageValue);
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <HPWRSupply_GetSenseValue+0x84>)
 8004120:	789b      	ldrb	r3, [r3, #2]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	1dba      	adds	r2, r7, #6
 8004126:	4619      	mov	r1, r3
 8004128:	2000      	movs	r0, #0
 800412a:	f000 fe8d 	bl	8004e48 <MADC_Conversion>
        glbl_uint16SenseValue[2] = Loc_uint16VoltageValue;
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	4b04      	ldr	r3, [pc, #16]	@ (8004144 <HPWRSupply_GetSenseValue+0x88>)
 8004132:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        /*Do nothing*/
    }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200007ec 	.word	0x200007ec
 8004140:	200003e0 	.word	0x200003e0
 8004144:	200007f0 	.word	0x200007f0
 8004148:	200007f6 	.word	0x200007f6

0800414c <HPWRSupply_InitSupplies>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Interface Initialized
 * @retval E_NOT_OK:                                Interface not initialized 
 */
Std_ReturnType HPWRSupply_InitSupplies              (void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM4_EN);
 8004152:	2102      	movs	r1, #2
 8004154:	2002      	movs	r0, #2
 8004156:	f002 f891 	bl	800627c <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 800415a:	2109      	movs	r1, #9
 800415c:	2003      	movs	r0, #3
 800415e:	f002 f88d 	bl	800627c <MRCC_EnablePeripheralClock>
    uint8 Loc_uint8Index = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	71fb      	strb	r3, [r7, #7]

    /************************Initialize Pins Used in PWRSupply Interface************************/
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8004166:	2300      	movs	r3, #0
 8004168:	71fb      	strb	r3, [r7, #7]
 800416a:	e00e      	b.n	800418a <HPWRSupply_InitSupplies+0x3e>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	4a1e      	ldr	r2, [pc, #120]	@ (80041e8 <HPWRSupply_InitSupplies+0x9c>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	b2d8      	uxtb	r0, r3
 8004174:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplySensePinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8004176:	4a1d      	ldr	r2, [pc, #116]	@ (80041ec <HPWRSupply_InitSupplies+0xa0>)
 8004178:	5cd3      	ldrb	r3, [r2, r3]
 800417a:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	f001 f8fe 	bl	8005380 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	3301      	adds	r3, #1
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d9ed      	bls.n	800416c <HPWRSupply_InitSupplies+0x20>
    }

    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8004190:	2300      	movs	r3, #0
 8004192:	71fb      	strb	r3, [r7, #7]
 8004194:	e00e      	b.n	80041b4 <HPWRSupply_InitSupplies+0x68>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4a15      	ldr	r2, [pc, #84]	@ (80041f0 <HPWRSupply_InitSupplies+0xa4>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	b2d8      	uxtb	r0, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplyControlPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80041a0:	4a14      	ldr	r2, [pc, #80]	@ (80041f4 <HPWRSupply_InitSupplies+0xa8>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 80041a6:	2202      	movs	r2, #2
 80041a8:	4619      	mov	r1, r3
 80041aa:	f001 f8e9 	bl	8005380 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	3301      	adds	r3, #1
 80041b2:	71fb      	strb	r3, [r7, #7]
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d9ed      	bls.n	8004196 <HPWRSupply_InitSupplies+0x4a>
    }


    MNVIC_EnableInterrupt(MNVIC_TIM4);
 80041ba:	201e      	movs	r0, #30
 80041bc:	f001 ff78 	bl	80060b0 <MNVIC_EnableInterrupt>

    MGPTMR_SetTimerPeriod(MGPTMR4, 400);
 80041c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80041c4:	2002      	movs	r0, #2
 80041c6:	f001 fbe9 	bl	800599c <MGPTMR_SetTimerPeriod>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR4, HPWRSupply_GetSenseValue);
 80041ca:	490b      	ldr	r1, [pc, #44]	@ (80041f8 <HPWRSupply_InitSupplies+0xac>)
 80041cc:	2002      	movs	r0, #2
 80041ce:	f001 fc0d 	bl	80059ec <MGPTMR_SetTimerUpdateCallbackFunc>
    MGPTMR_Init(MGPTMR4);
 80041d2:	2002      	movs	r0, #2
 80041d4:	f001 fb28 	bl	8005828 <MGPTMR_Init>
    MGPTMR_StartTimer(MGPTMR4);
 80041d8:	2002      	movs	r0, #2
 80041da:	f001 fba5 	bl	8005928 <MGPTMR_StartTimer>
}
 80041de:	bf00      	nop
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200003e4 	.word	0x200003e4
 80041ec:	200003e8 	.word	0x200003e8
 80041f0:	200003ec 	.word	0x200003ec
 80041f4:	200003f0 	.word	0x200003f0
 80041f8:	080040bd 	.word	0x080040bd

080041fc <HPWRSupply_SetSupplyMode>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Supply's mode set successfully
 * @retval E_NOT_OK:                                Supply's mode not set  
 */
Std_ReturnType HPWRSupply_SetSupplyMode             (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Mode_t Copy_uint32SupplyMode)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	460a      	mov	r2, r1
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	4613      	mov	r3, r2
 800420a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint32SupplyChoice)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d059      	beq.n	80042ca <HPWRSupply_SetSupplyMode+0xce>
 8004216:	2b01      	cmp	r3, #1
 8004218:	f040 808e 	bne.w	8004338 <HPWRSupply_SetSupplyMode+0x13c>
    {
        case HPWRSUPPLY_VIS_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d126      	bne.n	8004270 <HPWRSupply_SetSupplyMode+0x74>
            {
                if(glbl_uint8SupplyFlags[0] != HPWRSUPPLY_ON)
 8004222:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d010      	beq.n	800424e <HPWRSupply_SetSupplyMode+0x52>
                {
                    MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_HIGH);
 800422c:	4b47      	ldr	r3, [pc, #284]	@ (800434c <HPWRSupply_SetSupplyMode+0x150>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4a47      	ldr	r2, [pc, #284]	@ (8004350 <HPWRSupply_SetSupplyMode+0x154>)
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	b2d1      	uxtb	r1, r2
 8004238:	2201      	movs	r2, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f986 	bl	800554c <MGPIO_SetPinValue>
                    glbl_uint8SupplyFlags[0] = HPWRSUPPLY_ON;
 8004240:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
                    MSTK_uint8Delay(800);
 8004246:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800424a:	f002 fc51 	bl	8006af0 <MSTK_uint8Delay>
                }
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 800424e:	2304      	movs	r3, #4
 8004250:	73bb      	strb	r3, [r7, #14]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8004252:	f107 030e 	add.w	r3, r7, #14
 8004256:	4619      	mov	r1, r3
 8004258:	2001      	movs	r0, #1
 800425a:	f000 f87b 	bl	8004354 <HPWRSupply_CheckSupplyStatus>
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d102      	bne.n	800426a <HPWRSupply_SetSupplyMode+0x6e>
                {
                    Loc_uint8FuncStatus = E_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8004268:	e069      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
                    Loc_uint8FuncStatus = E_NOT_OK;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
            break;
 800426e:	e066      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d126      	bne.n	80042c4 <HPWRSupply_SetSupplyMode+0xc8>
                if(glbl_uint8SupplyFlags[0] != HPWRSUPPLY_OFF)
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HPWRSupply_SetSupplyMode+0xa0>
                    MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_LOW);
 8004280:	4b32      	ldr	r3, [pc, #200]	@ (800434c <HPWRSupply_SetSupplyMode+0x150>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	4a32      	ldr	r2, [pc, #200]	@ (8004350 <HPWRSupply_SetSupplyMode+0x154>)
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	b2d1      	uxtb	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f95c 	bl	800554c <MGPIO_SetPinValue>
                    MSTK_uint8Delay(800);
 8004294:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8004298:	f002 fc2a 	bl	8006af0 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 800429c:	2302      	movs	r3, #2
 800429e:	737b      	strb	r3, [r7, #13]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 80042a0:	f107 030d 	add.w	r3, r7, #13
 80042a4:	4619      	mov	r1, r3
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 f854 	bl	8004354 <HPWRSupply_CheckSupplyStatus>
				glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 80042ac:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OFF)
 80042b2:	7b7b      	ldrb	r3, [r7, #13]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d102      	bne.n	80042be <HPWRSupply_SetSupplyMode+0xc2>
                    Loc_uint8FuncStatus = E_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
            break;
 80042bc:	e03f      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
                    Loc_uint8FuncStatus = E_NOT_OK;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
            break;
 80042c2:	e03c      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
                Loc_uint8FuncStatus = E_NOT_OK;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
            break;
 80042c8:	e039      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
        }
        case HPWRSUPPLY_UV_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 80042ca:	79bb      	ldrb	r3, [r7, #6]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d118      	bne.n	8004302 <HPWRSupply_SetSupplyMode+0x106>
            {
                if(glbl_uint8SupplyFlags[1] != HPWRSUPPLY_ON)
 80042d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d010      	beq.n	80042fc <HPWRSupply_SetSupplyMode+0x100>
                {
                    MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_LOW);
 80042da:	4b1c      	ldr	r3, [pc, #112]	@ (800434c <HPWRSupply_SetSupplyMode+0x150>)
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HPWRSupply_SetSupplyMode+0x154>)
 80042e2:	7852      	ldrb	r2, [r2, #1]
 80042e4:	b2d1      	uxtb	r1, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f92f 	bl	800554c <MGPIO_SetPinValue>
                    glbl_uint8SupplyFlags[1] = HPWRSUPPLY_ON;
 80042ee:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	705a      	strb	r2, [r3, #1]
                    MSTK_uint8Delay(11000);
 80042f4:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 80042f8:	f002 fbfa 	bl	8006af0 <MSTK_uint8Delay>
                }
                Loc_uint8FuncStatus = E_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8004300:	e01d      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8004302:	79bb      	ldrb	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d114      	bne.n	8004332 <HPWRSupply_SetSupplyMode+0x136>
                if(glbl_uint8SupplyFlags[1] != HPWRSUPPLY_OFF)
 8004308:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HPWRSupply_SetSupplyMode+0x130>
                    MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_HIGH);
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <HPWRSupply_SetSupplyMode+0x150>)
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <HPWRSupply_SetSupplyMode+0x154>)
 800431a:	7852      	ldrb	r2, [r2, #1]
 800431c:	b2d1      	uxtb	r1, r2
 800431e:	2201      	movs	r2, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f913 	bl	800554c <MGPIO_SetPinValue>
                    glbl_uint8SupplyFlags[1] = HPWRSUPPLY_OFF;
 8004326:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <HPWRSupply_SetSupplyMode+0x14c>)
 8004328:	2200      	movs	r2, #0
 800432a:	705a      	strb	r2, [r3, #1]
                Loc_uint8FuncStatus = E_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
            break;
 8004330:	e005      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
                Loc_uint8FuncStatus = E_NOT_OK;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
            break;
 8004336:	e002      	b.n	800433e <HPWRSupply_SetSupplyMode+0x142>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
            break;
 800433c:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200007ec 	.word	0x200007ec
 800434c:	200003ec 	.word	0x200003ec
 8004350:	200003f0 	.word	0x200003f0

08004354 <HPWRSupply_CheckSupplyStatus>:
 * @param Copy_uint32SupplyChoice:                  The power supply whose status is to be checked 
 * @param P_uint32SupplyStatus:                     Power Supply Status (Ok or not Ok or Off)
 * @return Std_ReturnType 
 */
Std_ReturnType HPWRSupply_CheckSupplyStatus         (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Status_t* P_uint32SupplyStatus)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
    if(P_uint32SupplyStatus != NULL_PTR)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d054      	beq.n	8004414 <HPWRSupply_CheckSupplyStatus+0xc0>
    {
        switch(Copy_uint32SupplyChoice)
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d037      	beq.n	80043e0 <HPWRSupply_CheckSupplyStatus+0x8c>
 8004370:	2b01      	cmp	r3, #1
 8004372:	d14c      	bne.n	800440e <HPWRSupply_CheckSupplyStatus+0xba>
        {
            case HPWRSUPPLY_VIS_SUPPLY:
            {
                float32 Loc_float32VisSupplySenseVoltage = ((float32)glbl_uint16SenseValue[0] / 4096) * 3.3f;
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HPWRSupply_CheckSupplyStatus+0xd0>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc fc9c 	bl	8000cb8 <__aeabi_ui2f>
 8004380:	4603      	mov	r3, r0
 8004382:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fda2 	bl	8000ed0 <__aeabi_fdiv>
 800438c:	4603      	mov	r3, r0
 800438e:	4926      	ldr	r1, [pc, #152]	@ (8004428 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fce9 	bl	8000d68 <__aeabi_fmul>
 8004396:	4603      	mov	r3, r0
 8004398:	613b      	str	r3, [r7, #16]
                
                if((Loc_float32VisSupplySenseVoltage > 0.124f) && (Loc_float32VisSupplySenseVoltage < 0.2f))
 800439a:	4924      	ldr	r1, [pc, #144]	@ (800442c <HPWRSupply_CheckSupplyStatus+0xd8>)
 800439c:	6938      	ldr	r0, [r7, #16]
 800439e:	f7fc fe9f 	bl	80010e0 <__aeabi_fcmpgt>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00c      	beq.n	80043c2 <HPWRSupply_CheckSupplyStatus+0x6e>
 80043a8:	4921      	ldr	r1, [pc, #132]	@ (8004430 <HPWRSupply_CheckSupplyStatus+0xdc>)
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f7fc fe7a 	bl	80010a4 <__aeabi_fcmplt>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HPWRSupply_CheckSupplyStatus+0x6e>
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2202      	movs	r2, #2
 80043ba:	701a      	strb	r2, [r3, #0]
                    Loc_uint8FuncStatus = E_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
                }
                break;
 80043c0:	e02a      	b.n	8004418 <HPWRSupply_CheckSupplyStatus+0xc4>
                else if(Loc_float32VisSupplySenseVoltage < 0.05f)
 80043c2:	491c      	ldr	r1, [pc, #112]	@ (8004434 <HPWRSupply_CheckSupplyStatus+0xe0>)
 80043c4:	6938      	ldr	r0, [r7, #16]
 80043c6:	f7fc fe6d 	bl	80010a4 <__aeabi_fcmplt>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HPWRSupply_CheckSupplyStatus+0x84>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2204      	movs	r2, #4
 80043d4:	701a      	strb	r2, [r3, #0]
                break;
 80043d6:	e01f      	b.n	8004418 <HPWRSupply_CheckSupplyStatus+0xc4>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2203      	movs	r2, #3
 80043dc:	701a      	strb	r2, [r3, #0]
                break;
 80043de:	e01b      	b.n	8004418 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            case HPWRSUPPLY_UV_SUPPLY:
            {
                float32 Loc_float32UVSupplySenseVoltage = ((float32)glbl_uint16SenseValue[2] / 4096) * 3.3f;
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HPWRSupply_CheckSupplyStatus+0xd0>)
 80043e2:	889b      	ldrh	r3, [r3, #4]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc fc66 	bl	8000cb8 <__aeabi_ui2f>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc fd6c 	bl	8000ed0 <__aeabi_fdiv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	490b      	ldr	r1, [pc, #44]	@ (8004428 <HPWRSupply_CheckSupplyStatus+0xd4>)
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc fcb3 	bl	8000d68 <__aeabi_fmul>
 8004402:	4603      	mov	r3, r0
 8004404:	60fb      	str	r3, [r7, #12]
                *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2202      	movs	r2, #2
 800440a:	701a      	strb	r2, [r3, #0]
                break;
 800440c:	e004      	b.n	8004418 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 800440e:	2301      	movs	r3, #1
 8004410:	75fb      	strb	r3, [r7, #23]
                break;
 8004412:	e001      	b.n	8004418 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	200007f0 	.word	0x200007f0
 8004428:	40533333 	.word	0x40533333
 800442c:	3dfdf3b6 	.word	0x3dfdf3b6
 8004430:	3e4ccccd 	.word	0x3e4ccccd
 8004434:	3d4ccccd 	.word	0x3d4ccccd

08004438 <SPWRVolt_GetConversionValue>:
static volatile uint16 glbl_uint16VoltageValues[SPWRVOLT_NO_OF_VOLTAGE_SOURCES] = {0};
static volatile uint8 glbl_uint8VoltageIndex = 0;


void SPWRVolt_GetConversionValue    (void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	80fb      	strh	r3, [r7, #6]
    /*
        Every one second, The ADC converts the value of one of the voltage channels in order
    */
    MADC_Conversion(MADC1, SPWRVolt_VoltageChannels[glbl_uint8VoltageIndex], &Loc_uint16VoltageValue);
 8004442:	4b13      	ldr	r3, [pc, #76]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <SPWRVolt_GetConversionValue+0x5c>)
 800444c:	5c9b      	ldrb	r3, [r3, r2]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	1dba      	adds	r2, r7, #6
 8004452:	4619      	mov	r1, r3
 8004454:	2000      	movs	r0, #0
 8004456:	f000 fcf7 	bl	8004e48 <MADC_Conversion>
    glbl_uint16VoltageValues[glbl_uint8VoltageIndex] = Loc_uint16VoltageValue;
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	88f9      	ldrh	r1, [r7, #6]
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <SPWRVolt_GetConversionValue+0x60>)
 8004466:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    glbl_uint8VoltageIndex++;
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3301      	adds	r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 8004476:	701a      	strb	r2, [r3, #0]
    if(glbl_uint8VoltageIndex == SPWRVOLT_NO_OF_VOLTAGE_SOURCES)
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b05      	cmp	r3, #5
 8004480:	d102      	bne.n	8004488 <SPWRVolt_GetConversionValue+0x50>
    {
        glbl_uint8VoltageIndex = 0;
 8004482:	4b03      	ldr	r3, [pc, #12]	@ (8004490 <SPWRVolt_GetConversionValue+0x58>)
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
    }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000080a 	.word	0x2000080a
 8004494:	200003fc 	.word	0x200003fc
 8004498:	20000800 	.word	0x20000800

0800449c <SPWRVolt_Init>:
 * @return Std_ReturnType
 * @retval E_OK:            Interface Successfully Initialized
 * @retval E_NOT_OK:        Interface not initialized 
 */
Std_ReturnType SPWRVolt_Init        (void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
    /*
        Enable Clocks for ADC1 and GPTMR3 Peripherals
    */
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM3_EN);
 80044a2:	2101      	movs	r1, #1
 80044a4:	2002      	movs	r0, #2
 80044a6:	f001 fee9 	bl	800627c <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 80044aa:	2109      	movs	r1, #9
 80044ac:	2003      	movs	r0, #3
 80044ae:	f001 fee5 	bl	800627c <MRCC_EnablePeripheralClock>
    
	uint8 Loc_uint8Index = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	71fb      	strb	r3, [r7, #7]
    /*
        Set Channels' pins to be input analog
    */
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	71fb      	strb	r3, [r7, #7]
 80044ba:	e00e      	b.n	80044da <SPWRVolt_Init+0x3e>
    {
        MGPIO_SetPinMode(SPWRVolt_VoltagesPortIDs[Loc_uint8Index], SPWRVolt_VoltagesPinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4a16      	ldr	r2, [pc, #88]	@ (8004518 <SPWRVolt_Init+0x7c>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	b2d8      	uxtb	r0, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	4a15      	ldr	r2, [pc, #84]	@ (800451c <SPWRVolt_Init+0x80>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2200      	movs	r2, #0
 80044ce:	4619      	mov	r1, r3
 80044d0:	f000 ff56 	bl	8005380 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	3301      	adds	r3, #1
 80044d8:	71fb      	strb	r3, [r7, #7]
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d9ed      	bls.n	80044bc <SPWRVolt_Init+0x20>
    }
	
    // Initialize ADC1 Peripheral
    MADC_Init(MADC1);
 80044e0:	2000      	movs	r0, #0
 80044e2:	f000 fc09 	bl	8004cf8 <MADC_Init>

    // Set Timer Update Interrupt Function
    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR3, SPWRVolt_GetConversionValue);
 80044e6:	490e      	ldr	r1, [pc, #56]	@ (8004520 <SPWRVolt_Init+0x84>)
 80044e8:	2001      	movs	r0, #1
 80044ea:	f001 fa7f 	bl	80059ec <MGPTMR_SetTimerUpdateCallbackFunc>

    //Set timer period to be one second
    MGPTMR_SetTimerPeriod(MGPTMR3, 1000);
 80044ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80044f2:	2001      	movs	r0, #1
 80044f4:	f001 fa52 	bl	800599c <MGPTMR_SetTimerPeriod>
	
    // Enable Timer 3 Interrupt and initialize Timer 3 
	MNVIC_EnableInterrupt(MNVIC_TIM3);
 80044f8:	201d      	movs	r0, #29
 80044fa:	f001 fdd9 	bl	80060b0 <MNVIC_EnableInterrupt>
    MGPTMR_Init(MGPTMR3);
 80044fe:	2001      	movs	r0, #1
 8004500:	f001 f992 	bl	8005828 <MGPTMR_Init>

    // Get the digital value for the first voltage channel
    SPWRVolt_GetConversionValue();
 8004504:	f7ff ff98 	bl	8004438 <SPWRVolt_GetConversionValue>

    //Start Timer 3
    MGPTMR_StartTimer(MGPTMR3);
 8004508:	2001      	movs	r0, #1
 800450a:	f001 fa0d 	bl	8005928 <MGPTMR_StartTimer>

    return E_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	200007f8 	.word	0x200007f8
 800451c:	200003f4 	.word	0x200003f4
 8004520:	08004439 	.word	0x08004439

08004524 <SPWRVolt_GetVoltage>:
 * @return Std_ReturnType
 * @retval E_OK:            Voltage Successfully Read
 * @retval E_NOT_OK:        Voltage not read 
 */
Std_ReturnType SPWRVolt_GetVoltage  (SPWRVolt_Choice_t Copy_uint32VoltageChoice, uint16* P_uint16VoltageValue)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
    if(P_uint16VoltageValue != NULL_PTR)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <SPWRVolt_GetVoltage+0x2a>
    {
        *P_uint16VoltageValue = glbl_uint16VoltageValues[Copy_uint32VoltageChoice];
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <SPWRVolt_GetVoltage+0x3c>)
 800453e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004542:	b29a      	uxth	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e001      	b.n	8004552 <SPWRVolt_GetVoltage+0x2e>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000800 	.word	0x20000800

08004564 <HMOTORS_Init>:
 * @return Std_ReturnType
 * @retval E_OK:										Interface Successfully Initialized
 * @retval E_NOT_OK:									Interface not initialized 
 */
Std_ReturnType HMOTORS_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
	/************************************************************************************************* 
        1) Disable JTAG Debug in order to free PB3 and PB4 to be used to control WL select motor
    *************************************************************************************************/
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 800456a:	2100      	movs	r1, #0
 800456c:	2003      	movs	r0, #3
 800456e:	f001 fe85 	bl	800627c <MRCC_EnablePeripheralClock>
	MAFIO_MAPR_R &= ~((0b111) << 24);
 8004572:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HMOTORS_Init+0xf4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a38      	ldr	r2, [pc, #224]	@ (8004658 <HMOTORS_Init+0xf4>)
 8004578:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800457c:	6013      	str	r3, [r2, #0]
	MAFIO_MAPR_R |= ((0b010) << 24);
 800457e:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <HMOTORS_Init+0xf4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a35      	ldr	r2, [pc, #212]	@ (8004658 <HMOTORS_Init+0xf4>)
 8004584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004588:	6013      	str	r3, [r2, #0]
	
	uint8 Loc_uint8Index = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	71fb      	strb	r3, [r7, #7]
	
	/************************************************************************************************* 
        2) Set Homing Sensors' Pins to be input pull-up
    *************************************************************************************************/
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 800458e:	2300      	movs	r3, #0
 8004590:	71fb      	strb	r3, [r7, #7]
 8004592:	e01a      	b.n	80045ca <HMOTORS_Init+0x66>
	{
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	4a31      	ldr	r2, [pc, #196]	@ (800465c <HMOTORS_Init+0xf8>)
 8004598:	5cd3      	ldrb	r3, [r2, r3]
 800459a:	b2d8      	uxtb	r0, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorHomingPinIDs[Loc_uint8Index], MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 800459e:	4a30      	ldr	r2, [pc, #192]	@ (8004660 <HMOTORS_Init+0xfc>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 80045a4:	2208      	movs	r2, #8
 80045a6:	4619      	mov	r1, r3
 80045a8:	f000 feea 	bl	8005380 <MGPIO_SetPinMode>
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	4a2b      	ldr	r2, [pc, #172]	@ (800465c <HMOTORS_Init+0xf8>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorHomingPinIDs[Loc_uint8Index]);
 80045b6:	492a      	ldr	r1, [pc, #168]	@ (8004660 <HMOTORS_Init+0xfc>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	b2db      	uxtb	r3, r3
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f001 f8b8 	bl	8005734 <MGPIO_ActivatePullUp>
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	3301      	adds	r3, #1
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d9e1      	bls.n	8004594 <HMOTORS_Init+0x30>
	}

	/************************************************************************************************* 
        3) Set Directions of step and dir pins to be output push-pull
    *************************************************************************************************/
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	71fb      	strb	r3, [r7, #7]
 80045d4:	e01a      	b.n	800460c <HMOTORS_Init+0xa8>
	{
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	4a22      	ldr	r2, [pc, #136]	@ (8004664 <HMOTORS_Init+0x100>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	b2d8      	uxtb	r0, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80045e0:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <HMOTORS_Init+0x104>)
 80045e2:	5cd3      	ldrb	r3, [r2, r3]
 80045e4:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 80045e6:	2202      	movs	r2, #2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f000 fec9 	bl	8005380 <MGPIO_SetPinMode>
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	4a1e      	ldr	r2, [pc, #120]	@ (800466c <HMOTORS_Init+0x108>)
 80045f2:	5cd3      	ldrb	r3, [r2, r3]
 80045f4:	b2d8      	uxtb	r0, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsDirPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80045f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <HMOTORS_Init+0x10c>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	b2db      	uxtb	r3, r3
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 80045fe:	2202      	movs	r2, #2
 8004600:	4619      	mov	r1, r3
 8004602:	f000 febd 	bl	8005380 <MGPIO_SetPinMode>
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	3301      	adds	r3, #1
 800460a:	71fb      	strb	r3, [r7, #7]
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d9e1      	bls.n	80045d6 <HMOTORS_Init+0x72>
	}

	/************************************************************************************************* 
        4) Enable External Interrupt on homing sensors' pins 
    *************************************************************************************************/
	MNVIC_EnableInterrupt(MNVIC_EXTI15_10);
 8004612:	2028      	movs	r0, #40	@ 0x28
 8004614:	f001 fd4c 	bl	80060b0 <MNVIC_EnableInterrupt>
	MNVIC_EnableInterrupt(MNVIC_EXTI0);
 8004618:	2006      	movs	r0, #6
 800461a:	f001 fd49 	bl	80060b0 <MNVIC_EnableInterrupt>

	MEXTI_SetCallbackFunction(MEXTI_EXTI13, HMOTOR_FilterHomeIndicator);
 800461e:	4915      	ldr	r1, [pc, #84]	@ (8004674 <HMOTORS_Init+0x110>)
 8004620:	200d      	movs	r0, #13
 8004622:	f000 fd37 	bl	8005094 <MEXTI_SetCallbackFunction>
	MEXTI_SetCallbackFunction(MEXTI_EXTI0, HMOTOR_WLHomeIndicator);
 8004626:	4914      	ldr	r1, [pc, #80]	@ (8004678 <HMOTORS_Init+0x114>)
 8004628:	2000      	movs	r0, #0
 800462a:	f000 fd33 	bl	8005094 <MEXTI_SetCallbackFunction>
	
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI13, MGPIO_PORTC);
 800462e:	2102      	movs	r1, #2
 8004630:	200d      	movs	r0, #13
 8004632:	f000 fc85 	bl	8004f40 <MAFIO_SetEXTIPinConfigurations>
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI0, MGPIO_PORTA);
 8004636:	2100      	movs	r1, #0
 8004638:	2000      	movs	r0, #0
 800463a:	f000 fc81 	bl	8004f40 <MAFIO_SetEXTIPinConfigurations>

	MEXTI_EnableExternalInterrupt(MEXTI_EXTI13, MEXTI_INT_AT_FALLING_EDGE);
 800463e:	2101      	movs	r1, #1
 8004640:	200d      	movs	r0, #13
 8004642:	f000 fcc3 	bl	8004fcc <MEXTI_EnableExternalInterrupt>
	MEXTI_EnableExternalInterrupt(MEXTI_EXTI0, MEXTI_INT_AT_FALLING_EDGE);
 8004646:	2101      	movs	r1, #1
 8004648:	2000      	movs	r0, #0
 800464a:	f000 fcbf 	bl	8004fcc <MEXTI_EnableExternalInterrupt>
	/************************************************************************************************* 
        5) Get Value of Filter Calibration from EEPROM
    *************************************************************************************************/
	//eeprom_read_byte(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &glbl_uint32FilterInitCalibration, 1);

	return E_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40010004 	.word	0x40010004
 800465c:	20000414 	.word	0x20000414
 8004660:	20000418 	.word	0x20000418
 8004664:	20000404 	.word	0x20000404
 8004668:	20000408 	.word	0x20000408
 800466c:	2000040c 	.word	0x2000040c
 8004670:	20000410 	.word	0x20000410
 8004674:	08004cc9 	.word	0x08004cc9
 8004678:	08004ce1 	.word	0x08004ce1

0800467c <HMOTOR_Step>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor Successfully moved
 * @retval E_NOT_OK:									Motor not moved 
 */
Std_ReturnType HMOTOR_Step(HMOTORS_Select_t Copy_uint32MotorSelect, uint32 Copy_uint32NoOfSetps, uint8 Copy_uint8Direction, uint8 Copy_uint8MotorSpeed)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	4611      	mov	r1, r2
 8004686:	461a      	mov	r2, r3
 8004688:	4603      	mov	r3, r0
 800468a:	71fb      	strb	r3, [r7, #7]
 800468c:	460b      	mov	r3, r1
 800468e:	71bb      	strb	r3, [r7, #6]
 8004690:	4613      	mov	r3, r2
 8004692:	717b      	strb	r3, [r7, #5]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
	uint32 Loc_uint32Index = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]

	/************************************************************************************************* 
        1) Specify the direction of the motor movement (clockwise or counter-clockwise)
    *************************************************************************************************/
	switch(Copy_uint8Direction)
 800469c:	79bb      	ldrb	r3, [r7, #6]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d002      	beq.n	80046a8 <HMOTOR_Step+0x2c>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d00f      	beq.n	80046c6 <HMOTOR_Step+0x4a>
 80046a6:	e01d      	b.n	80046e4 <HMOTOR_Step+0x68>
	{
		case HMOTORS_CLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	4a36      	ldr	r2, [pc, #216]	@ (8004784 <HMOTOR_Step+0x108>)
 80046ac:	5cd3      	ldrb	r3, [r2, r3]
 80046ae:	b2d8      	uxtb	r0, r3
 80046b0:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80046b2:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <HMOTOR_Step+0x10c>)
 80046b4:	5cd3      	ldrb	r3, [r2, r3]
 80046b6:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80046b8:	2201      	movs	r2, #1
 80046ba:	4619      	mov	r1, r3
 80046bc:	f000 ff46 	bl	800554c <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
			break;
 80046c4:	e011      	b.n	80046ea <HMOTOR_Step+0x6e>
		}
		case HMOTORS_CCLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004784 <HMOTOR_Step+0x108>)
 80046ca:	5cd3      	ldrb	r3, [r2, r3]
 80046cc:	b2d8      	uxtb	r0, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 80046d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004788 <HMOTOR_Step+0x10c>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80046d6:	2200      	movs	r2, #0
 80046d8:	4619      	mov	r1, r3
 80046da:	f000 ff37 	bl	800554c <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
		
			break;
 80046e2:	e002      	b.n	80046ea <HMOTOR_Step+0x6e>
		}
		default:
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
			break;
 80046e8:	bf00      	nop
	}

	/************************************************************************************************* 
        2) Move motor with specified number of steps
    *************************************************************************************************/
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	e040      	b.n	8004772 <HMOTOR_Step+0xf6>
	{
		/*
			Step is performed when sending a pulse through STEP pin
		*/
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	4a26      	ldr	r2, [pc, #152]	@ (800478c <HMOTOR_Step+0x110>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	b2d8      	uxtb	r0, r3
 80046f8:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80046fa:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <HMOTOR_Step+0x114>)
 80046fc:	5cd3      	ldrb	r3, [r2, r3]
 80046fe:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004700:	2201      	movs	r2, #1
 8004702:	4619      	mov	r1, r3
 8004704:	f000 ff22 	bl	800554c <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8004708:	797b      	ldrb	r3, [r7, #5]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4618      	mov	r0, r3
 8004710:	f002 f9ee 	bl	8006af0 <MSTK_uint8Delay>
		
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <HMOTOR_Step+0x110>)
 8004718:	5cd3      	ldrb	r3, [r2, r3]
 800471a:	b2d8      	uxtb	r0, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 800471e:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <HMOTOR_Step+0x114>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004724:	2200      	movs	r2, #0
 8004726:	4619      	mov	r1, r3
 8004728:	f000 ff10 	bl	800554c <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 800472c:	797b      	ldrb	r3, [r7, #5]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4618      	mov	r0, r3
 8004734:	f002 f9dc 	bl	8006af0 <MSTK_uint8Delay>

		// update the value of the global variable to keep track of the motor's current position
		if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 8004738:	79bb      	ldrb	r3, [r7, #6]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <HMOTOR_Step+0xd4>
		{
			glbl_sint32MotorSteps[Copy_uint32MotorSelect] ++;
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <HMOTOR_Step+0x118>)
 8004742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004746:	3201      	adds	r2, #1
 8004748:	4912      	ldr	r1, [pc, #72]	@ (8004794 <HMOTOR_Step+0x118>)
 800474a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800474e:	e00d      	b.n	800476c <HMOTOR_Step+0xf0>
		}
		else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 8004750:	79bb      	ldrb	r3, [r7, #6]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d108      	bne.n	8004768 <HMOTOR_Step+0xec>
		{
			glbl_sint32MotorSteps[Copy_uint32MotorSelect] --;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	4a0e      	ldr	r2, [pc, #56]	@ (8004794 <HMOTOR_Step+0x118>)
 800475a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800475e:	3a01      	subs	r2, #1
 8004760:	490c      	ldr	r1, [pc, #48]	@ (8004794 <HMOTOR_Step+0x118>)
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004766:	e001      	b.n	800476c <HMOTOR_Step+0xf0>
		}
		else
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3301      	adds	r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3ba      	bcc.n	80046f0 <HMOTOR_Step+0x74>
		}
	}
	return Loc_uint8FuncStatus;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	2000040c 	.word	0x2000040c
 8004788:	20000410 	.word	0x20000410
 800478c:	20000404 	.word	0x20000404
 8004790:	20000408 	.word	0x20000408
 8004794:	2000080c 	.word	0x2000080c

08004798 <HMOTOR_MoveLampMotor>:
 * @return Std_ReturnType
 * @retval E_OK:									    Lamp motor successfully moved
 * @retval E_NOT_OK:								    Lamp motor not moved 
 */
Std_ReturnType HMOTOR_MoveLampMotor(HMOTOR_Lamp_Select_t Copy_uint32LampSelect)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
	switch(Copy_uint32LampSelect)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HMOTOR_MoveLampMotor+0x16>
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d008      	beq.n	80047be <HMOTOR_MoveLampMotor+0x26>
 80047ac:	e018      	b.n	80047e0 <HMOTOR_MoveLampMotor+0x48>
	{
		case HMOTOR_LAMP_UV:
		{
			// Check if motor is already in the UV position or not
			if(glbl_sint32MotorSteps[HMOTOR_LAMP_SELECT] != 0)
 80047ae:	4b11      	ldr	r3, [pc, #68]	@ (80047f4 <HMOTOR_MoveLampMotor+0x5c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HMOTOR_MoveLampMotor+0x4c>
			{
				HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 f902 	bl	80049c0 <HMOTOR_GoHome>
			}
			else
			{
				/*Do nothing*/
			}
			break;
 80047bc:	e012      	b.n	80047e4 <HMOTOR_MoveLampMotor+0x4c>
		}
		case HMOTOR_LAMP_VIS:
		{
			// Check if motor is already in the Visible position or not
			if(glbl_sint32MotorSteps[HMOTOR_LAMP_SELECT] != 100)
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HMOTOR_MoveLampMotor+0x5c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d010      	beq.n	80047e8 <HMOTOR_MoveLampMotor+0x50>
			{
				HMOTOR_Step(HMOTOR_LAMP_SELECT, 100, HMOTORS_CCLKWISE_DIRECTION, 10);
 80047c6:	230a      	movs	r3, #10
 80047c8:	2202      	movs	r2, #2
 80047ca:	2164      	movs	r1, #100	@ 0x64
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7ff ff55 	bl	800467c <HMOTOR_Step>
				glbl_sint32MotorSteps[HMOTOR_LAMP_SELECT] = 100;
 80047d2:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <HMOTOR_MoveLampMotor+0x5c>)
 80047d4:	2264      	movs	r2, #100	@ 0x64
 80047d6:	601a      	str	r2, [r3, #0]
				glbl_uint8HomingIndicator[HMOTOR_LAMP_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <HMOTOR_MoveLampMotor+0x60>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/*Do nothing*/
			}
			break;
 80047de:	e003      	b.n	80047e8 <HMOTOR_MoveLampMotor+0x50>
		}
		default:
		{
			return E_NOT_OK;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e003      	b.n	80047ec <HMOTOR_MoveLampMotor+0x54>
			break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HMOTOR_MoveLampMotor+0x52>
			break;
 80047e8:	bf00      	nop
			break;
		}
	}
	return E_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2000080c 	.word	0x2000080c
 80047f8:	20000818 	.word	0x20000818

080047fc <HMOTOR_MoveFilterMotor>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor Successfully moved
 * @retval E_NOT_OK:									Motor not moved 
 */
Std_ReturnType HMOTOR_MoveFilterMotor(HMOTOR_Filter_Select_t Copy_uint32FilterSelect)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
    uint32 Loc_uint32StepsDifference = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

	// Calculate the target position based on the filter selection
    uint32 Loc_uint32TargetPosition = glbl_uint32FilterInitCalibration + (Copy_uint32FilterSelect * 50);
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2232      	movs	r2, #50	@ 0x32
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	461a      	mov	r2, r3
 8004814:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <HMOTOR_MoveFilterMotor+0x7c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4413      	add	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]

	// If the current motor steps are greater than the target position, move clockwise
    if (glbl_sint32MotorSteps[HMOTOR_FILTER_SELECT] > Loc_uint32TargetPosition)
 800481c:	4b17      	ldr	r3, [pc, #92]	@ (800487c <HMOTOR_MoveFilterMotor+0x80>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4293      	cmp	r3, r2
 8004826:	d20c      	bcs.n	8004842 <HMOTOR_MoveFilterMotor+0x46>
    {
        Loc_uint32StepsDifference = glbl_sint32MotorSteps[HMOTOR_FILTER_SELECT] - Loc_uint32TargetPosition;
 8004828:	4b14      	ldr	r3, [pc, #80]	@ (800487c <HMOTOR_MoveFilterMotor+0x80>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	60fb      	str	r3, [r7, #12]
        HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004834:	230a      	movs	r3, #10
 8004836:	2201      	movs	r2, #1
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	2001      	movs	r0, #1
 800483c:	f7ff ff1e 	bl	800467c <HMOTOR_Step>
 8004840:	e011      	b.n	8004866 <HMOTOR_MoveFilterMotor+0x6a>
    }
	// Else if the current motor steps are less than the target position, move counter-clockwise
    else if (glbl_sint32MotorSteps[HMOTOR_FILTER_SELECT] < Loc_uint32TargetPosition)
 8004842:	4b0e      	ldr	r3, [pc, #56]	@ (800487c <HMOTOR_MoveFilterMotor+0x80>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4293      	cmp	r3, r2
 800484c:	d90b      	bls.n	8004866 <HMOTOR_MoveFilterMotor+0x6a>
    {
        Loc_uint32StepsDifference = Loc_uint32TargetPosition - glbl_sint32MotorSteps[HMOTOR_FILTER_SELECT];
 800484e:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HMOTOR_MoveFilterMotor+0x80>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
        HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 800485a:	230a      	movs	r3, #10
 800485c:	2202      	movs	r2, #2
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	2001      	movs	r0, #1
 8004862:	f7ff ff0b 	bl	800467c <HMOTOR_Step>
	{
		/*Do nothing*/
	}

	// Indicate that the motor is not at the home position
    glbl_uint8HomingIndicator[HMOTOR_FILTER_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HMOTOR_MoveFilterMotor+0x84>)
 8004868:	2200      	movs	r2, #0
 800486a:	705a      	strb	r2, [r3, #1]
    return E_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2000041c 	.word	0x2000041c
 800487c:	2000080c 	.word	0x2000080c
 8004880:	20000818 	.word	0x20000818

08004884 <HMOTOR_GetWLSelectCalibration>:
 * @param Copy_uint32ZeroWLSteps:						the number of steps from home position to position of zero wavelength				
 * @param Copy_uint32StepsPerNm:						number of steps to be taken to move one wavelength 
 * @return Std_ReturnType 
 */
Std_ReturnType HMOTOR_GetWLSelectCalibration            (sint32 Copy_sint32ZeroWLSteps, float32 Copy_uint32StepsPerNm)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	glbl_sint32ZeroWLSteps = Copy_sint32ZeroWLSteps;
 800488e:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <HMOTOR_GetWLSelectCalibration+0x24>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6013      	str	r3, [r2, #0]
	glbl_float32StepsPerNm = Copy_uint32StepsPerNm;
 8004894:	4a05      	ldr	r2, [pc, #20]	@ (80048ac <HMOTOR_GetWLSelectCalibration+0x28>)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6013      	str	r3, [r2, #0]
	return E_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	2000081c 	.word	0x2000081c
 80048ac:	20000820 	.word	0x20000820

080048b0 <HMOTOR_MoveWLSelectMotor>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor Successfully moved
 * @retval E_NOT_OK:									Motor not moved 
 */
Std_ReturnType HMOTOR_MoveWLSelectMotor                 (float32 Copy_float32NextWL)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.01f) && (Copy_float32NextWL < 0.01f))
 80048b8:	493c      	ldr	r1, [pc, #240]	@ (80049ac <HMOTOR_MoveWLSelectMotor+0xfc>)
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fc10 	bl	80010e0 <__aeabi_fcmpgt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d030      	beq.n	8004928 <HMOTOR_MoveWLSelectMotor+0x78>
 80048c6:	493a      	ldr	r1, [pc, #232]	@ (80049b0 <HMOTOR_MoveWLSelectMotor+0x100>)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fc fbeb 	bl	80010a4 <__aeabi_fcmplt>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d029      	beq.n	8004928 <HMOTOR_MoveWLSelectMotor+0x78>
	{
		// The motor is to be moved to the position of zero wavelength
		if(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] < glbl_sint32ZeroWLSteps)
 80048d4:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <HMOTOR_MoveWLSelectMotor+0x104>)
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HMOTOR_MoveWLSelectMotor+0x108>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	da0e      	bge.n	80048fe <HMOTOR_MoveWLSelectMotor+0x4e>
		{
			/*
				If the motor current position is less than the zero wavelength position, motor will move in the 
				clockwise direction
			*/
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)(abs(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] - glbl_sint32ZeroWLSteps)), HMOTORS_CLKWISE_DIRECTION, 4);
 80048e0:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <HMOTOR_MoveWLSelectMotor+0x104>)
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4b34      	ldr	r3, [pc, #208]	@ (80049b8 <HMOTOR_MoveWLSelectMotor+0x108>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bfb8      	it	lt
 80048ee:	425b      	neglt	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	2304      	movs	r3, #4
 80048f4:	2201      	movs	r2, #1
 80048f6:	2002      	movs	r0, #2
 80048f8:	f7ff fec0 	bl	800467c <HMOTOR_Step>
		if(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] < glbl_sint32ZeroWLSteps)
 80048fc:	e04f      	b.n	800499e <HMOTOR_MoveWLSelectMotor+0xee>
		}
		else if(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] > glbl_sint32ZeroWLSteps)
 80048fe:	4b2d      	ldr	r3, [pc, #180]	@ (80049b4 <HMOTOR_MoveWLSelectMotor+0x104>)
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <HMOTOR_MoveWLSelectMotor+0x108>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	dd49      	ble.n	800499e <HMOTOR_MoveWLSelectMotor+0xee>
		{
			/*
				If the motor current position is greater than the zero wavelength position, motor will move in the 
				counter-clockwise direction
			*/
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)(abs(glbl_sint32ZeroWLSteps - glbl_sint32MotorSteps[HMOTOR_WL_SELECT])), HMOTORS_CCLKWISE_DIRECTION, 4);
 800490a:	4b2b      	ldr	r3, [pc, #172]	@ (80049b8 <HMOTOR_MoveWLSelectMotor+0x108>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HMOTOR_MoveWLSelectMotor+0x104>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfb8      	it	lt
 8004918:	425b      	neglt	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	2304      	movs	r3, #4
 800491e:	2202      	movs	r2, #2
 8004920:	2002      	movs	r0, #2
 8004922:	f7ff feab 	bl	800467c <HMOTOR_Step>
		if(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] < glbl_sint32ZeroWLSteps)
 8004926:	e03a      	b.n	800499e <HMOTOR_MoveWLSelectMotor+0xee>

													number of steps
			Number of steps = Wavelength (nm) * ------------------------- + Zero WL Steps
														1 nm
		*/
		float32 Loc_uint32NextSteps = Copy_float32NextWL * glbl_float32StepsPerNm;
 8004928:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HMOTOR_MoveWLSelectMotor+0x10c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fa1a 	bl	8000d68 <__aeabi_fmul>
 8004934:	4603      	mov	r3, r0
 8004936:	60fb      	str	r3, [r7, #12]
		Loc_uint32NextSteps += glbl_sint32ZeroWLSteps;
 8004938:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HMOTOR_MoveWLSelectMotor+0x108>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fc f9bf 	bl	8000cc0 <__aeabi_i2f>
 8004942:	4603      	mov	r3, r0
 8004944:	4619      	mov	r1, r3
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7fc f906 	bl	8000b58 <__addsf3>
 800494c:	4603      	mov	r3, r0
 800494e:	60fb      	str	r3, [r7, #12]

		// Then, we calculate the difference between the current position and the calculated position
		sint32 Loc_uint32StepsDifference = roundf(Loc_uint32NextSteps - glbl_sint32MotorSteps[HMOTOR_WL_SELECT]);
 8004950:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <HMOTOR_MoveWLSelectMotor+0x104>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fc f9b3 	bl	8000cc0 <__aeabi_i2f>
 800495a:	4603      	mov	r3, r0
 800495c:	4619      	mov	r1, r3
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7fc f8f8 	bl	8000b54 <__aeabi_fsub>
 8004964:	4603      	mov	r3, r0
 8004966:	4618      	mov	r0, r3
 8004968:	f007 f814 	bl	800b994 <roundf>
 800496c:	4603      	mov	r3, r0
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fbc0 	bl	80010f4 <__aeabi_f2iz>
 8004974:	4603      	mov	r3, r0
 8004976:	60bb      	str	r3, [r7, #8]

		/*
			if the steps difference is greater than zero, motor will move in the clockwise direction,
			otherwise, motor will move in the counter-clockwise direction
		*/
		if(Loc_uint32StepsDifference > 0)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	dd06      	ble.n	800498c <HMOTOR_MoveWLSelectMotor+0xdc>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 4);
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	2304      	movs	r3, #4
 8004982:	2201      	movs	r2, #1
 8004984:	2002      	movs	r0, #2
 8004986:	f7ff fe79 	bl	800467c <HMOTOR_Step>
 800498a:	e009      	b.n	80049a0 <HMOTOR_MoveWLSelectMotor+0xf0>
		}
		else
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)(-Loc_uint32StepsDifference), HMOTORS_CCLKWISE_DIRECTION, 4);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	425b      	negs	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	2304      	movs	r3, #4
 8004994:	2202      	movs	r2, #2
 8004996:	2002      	movs	r0, #2
 8004998:	f7ff fe70 	bl	800467c <HMOTOR_Step>
 800499c:	e000      	b.n	80049a0 <HMOTOR_MoveWLSelectMotor+0xf0>
		if(glbl_sint32MotorSteps[HMOTOR_WL_SELECT] < glbl_sint32ZeroWLSteps)
 800499e:	bf00      	nop
		}
	}
	return E_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	bc23d70a 	.word	0xbc23d70a
 80049b0:	3c23d70a 	.word	0x3c23d70a
 80049b4:	2000080c 	.word	0x2000080c
 80049b8:	2000081c 	.word	0x2000081c
 80049bc:	20000820 	.word	0x20000820

080049c0 <HMOTOR_GoHome>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor successfully at homing position
 * @retval E_NOT_OK:									Motor not at home 
 */
Std_ReturnType HMOTOR_GoHome  (HMOTORS_Select_t Copy_uint32MotorSelect)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
	if(Copy_uint32MotorSelect > 0)
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 808e 	beq.w	8004aee <HMOTOR_GoHome+0x12e>
	{
		uint8 Loc_uint8SensorReading = MGPIO_HIGH;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
		uint32 Loc_uint8Index = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
		uint32 Loc_uint32NoSteps = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
		
		MSTK_uint8Delay(100);
 80049de:	2064      	movs	r0, #100	@ 0x64
 80049e0:	f002 f886 	bl	8006af0 <MSTK_uint8Delay>

		/*
			We check if the motor is already in the homing position or not by checking the status of the pin
			connected to the homing sensor
		*/
		switch(Copy_uint32MotorSelect)
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d002      	beq.n	80049f0 <HMOTOR_GoHome+0x30>
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d00f      	beq.n	8004a0e <HMOTOR_GoHome+0x4e>
 80049ee:	e016      	b.n	8004a1e <HMOTOR_GoHome+0x5e>
		{
			case HMOTOR_FILTER_SELECT:
			{
				MGPIO_GetPinValue(MGPIO_PORTC, MGPIO_PIN13, &Loc_uint8SensorReading);
 80049f0:	f107 030f 	add.w	r3, r7, #15
 80049f4:	461a      	mov	r2, r3
 80049f6:	210d      	movs	r1, #13
 80049f8:	2002      	movs	r0, #2
 80049fa:	f000 fe41 	bl	8005680 <MGPIO_GetPinValue>
				Loc_uint8SensorReading = !Loc_uint8SensorReading;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	73fb      	strb	r3, [r7, #15]
				break;
 8004a0c:	e009      	b.n	8004a22 <HMOTOR_GoHome+0x62>
			}
			case HMOTOR_WL_SELECT:
			{
				MGPIO_GetPinValue(MGPIO_PORTA, MGPIO_PIN0, &Loc_uint8SensorReading);
 8004a0e:	f107 030f 	add.w	r3, r7, #15
 8004a12:	461a      	mov	r2, r3
 8004a14:	2100      	movs	r1, #0
 8004a16:	2000      	movs	r0, #0
 8004a18:	f000 fe32 	bl	8005680 <MGPIO_GetPinValue>
				break;
 8004a1c:	e001      	b.n	8004a22 <HMOTOR_GoHome+0x62>
			}
			default:
			{
				return E_NOT_OK;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07b      	b.n	8004b1a <HMOTOR_GoHome+0x15a>
				break;
			}
		}

		// If the homing sensor pin reads low, it means that the motor is at its homing position
		if(Loc_uint8SensorReading == MGPIO_LOW)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <HMOTOR_GoHome+0x76>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 400, HMOTORS_CLKWISE_DIRECTION, 4);
 8004a28:	79f8      	ldrb	r0, [r7, #7]
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004a32:	f7ff fe23 	bl	800467c <HMOTOR_Step>
		}

		//We set the maximum number of steps the motor can move for each available motor
		switch(Copy_uint32MotorSelect)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d005      	beq.n	8004a48 <HMOTOR_GoHome+0x88>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d107      	bne.n	8004a50 <HMOTOR_GoHome+0x90>
			{
				/*
					As Wavelength select motor driver's microstepping is activated so that motor moves a half step per
					command, the maximum number of steps is doubled
				*/
				Loc_uint32NoSteps = 12000;
 8004a40:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8004a44:	613b      	str	r3, [r7, #16]
				break;
 8004a46:	e006      	b.n	8004a56 <HMOTOR_GoHome+0x96>
			}
			case HMOTOR_FILTER_SELECT:
			{
				Loc_uint32NoSteps = 6000;
 8004a48:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004a4c:	613b      	str	r3, [r7, #16]
				break;
 8004a4e:	e002      	b.n	8004a56 <HMOTOR_GoHome+0x96>
			}
			default:
			{
				Loc_uint32NoSteps = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
				break;
 8004a54:	bf00      	nop
		}

		/*
			We move the motor in the counter-clockwise direction until it reaches the homing sensor
		*/
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <HMOTOR_GoHome+0x164>)
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	54d1      	strb	r1, [r2, r3]
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e00e      	b.n	8004a82 <HMOTOR_GoHome+0xc2>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <HMOTOR_GoHome+0x164>)
 8004a68:	5cd3      	ldrb	r3, [r2, r3]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HMOTOR_GoHome+0xbc>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 4);
 8004a70:	79f8      	ldrb	r0, [r7, #7]
 8004a72:	2304      	movs	r3, #4
 8004a74:	2202      	movs	r2, #2
 8004a76:	2101      	movs	r1, #1
 8004a78:	f7ff fe00 	bl	800467c <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3ec      	bcc.n	8004a64 <HMOTOR_GoHome+0xa4>

		/*
			Then, We pull it away from the homing position and slowly move it towards the homing sensor
			for accurate positioning
		*/
		HMOTOR_Step(Copy_uint32MotorSelect, 320, HMOTORS_CLKWISE_DIRECTION, 4);
 8004a8a:	79f8      	ldrb	r0, [r7, #7]
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004a94:	f7ff fdf2 	bl	800467c <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HMOTOR_GoHome+0x164>)
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	54d1      	strb	r1, [r2, r3]

		Loc_uint8Index = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e00e      	b.n	8004ac8 <HMOTOR_GoHome+0x108>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	@ (8004b24 <HMOTOR_GoHome+0x164>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <HMOTOR_GoHome+0x102>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004ab6:	79f8      	ldrb	r0, [r7, #7]
 8004ab8:	230a      	movs	r3, #10
 8004aba:	2202      	movs	r2, #2
 8004abc:	2101      	movs	r1, #1
 8004abe:	f7ff fddd 	bl	800467c <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3ec      	bcc.n	8004aaa <HMOTOR_GoHome+0xea>
			}
		}
		if(Copy_uint32MotorSelect == HMOTOR_WL_SELECT)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d105      	bne.n	8004ae2 <HMOTOR_GoHome+0x122>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 20, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004ad6:	79f8      	ldrb	r0, [r7, #7]
 8004ad8:	230a      	movs	r3, #10
 8004ada:	2202      	movs	r2, #2
 8004adc:	2114      	movs	r1, #20
 8004ade:	f7ff fdcd 	bl	800467c <HMOTOR_Step>
		}

		// Then, we put our steps indicator's value to zero 
		glbl_sint32MotorSteps[Copy_uint32MotorSelect] = 0;
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	4a10      	ldr	r2, [pc, #64]	@ (8004b28 <HMOTOR_GoHome+0x168>)
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004aec:	e014      	b.n	8004b18 <HMOTOR_GoHome+0x158>

	}
	else if(Copy_uint32MotorSelect == HMOTOR_LAMP_SELECT)
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <HMOTOR_GoHome+0x154>
	{
		// In case of the lamp select motor, its homing position is simply the UV position and no need for homing
		// sensor to indicate its position
		HMOTOR_Step(Copy_uint32MotorSelect, 100, HMOTORS_CLKWISE_DIRECTION, 10);
 8004af4:	79f8      	ldrb	r0, [r7, #7]
 8004af6:	230a      	movs	r3, #10
 8004af8:	2201      	movs	r2, #1
 8004afa:	2164      	movs	r1, #100	@ 0x64
 8004afc:	f7ff fdbe 	bl	800467c <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_AT_HOME;
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	4a08      	ldr	r2, [pc, #32]	@ (8004b24 <HMOTOR_GoHome+0x164>)
 8004b04:	2101      	movs	r1, #1
 8004b06:	54d1      	strb	r1, [r2, r3]
		glbl_sint32MotorSteps[Copy_uint32MotorSelect] = 0;
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	4a07      	ldr	r2, [pc, #28]	@ (8004b28 <HMOTOR_GoHome+0x168>)
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004b12:	e001      	b.n	8004b18 <HMOTOR_GoHome+0x158>
	}
	else
	{
		return E_NOT_OK;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <HMOTOR_GoHome+0x15a>
	}
	return E_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000818 	.word	0x20000818
 8004b28:	2000080c 	.word	0x2000080c

08004b2c <HMOTOR_GetCurrentMotorSteps>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor's steps successfully retrieved
 * @retval E_NOT_OK:									Motor's steps not retrieved 
 */
Std_ReturnType HMOTOR_GetCurrentMotorSteps    (HMOTORS_Select_t Copy_uint32MotorSelect, sint32* P_sint32MotorSteps)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
	if(P_sint32MotorSteps != NULL_PTR)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HMOTOR_GetCurrentMotorSteps+0x28>
	{
		*P_sint32MotorSteps = glbl_sint32MotorSteps[Copy_uint32MotorSelect];
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	4a07      	ldr	r2, [pc, #28]	@ (8004b64 <HMOTOR_GetCurrentMotorSteps+0x38>)
 8004b46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e001      	b.n	8004b58 <HMOTOR_GetCurrentMotorSteps+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	2000080c 	.word	0x2000080c

08004b68 <HMOTOR_GetCurrentWL>:
 * @return Std_ReturnType
 * @retval E_OK:										Wavelength successfully retrieved
 * @retval E_NOT_OK:									Wavelength not retrieved 
 */
Std_ReturnType HMOTOR_GetCurrentWL            (float32* P_float32CurrentWL)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
	if(P_float32CurrentWL != NULL_PTR)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d015      	beq.n	8004ba6 <HMOTOR_GetCurrentWL+0x3e>
	{
		*P_float32CurrentWL = (glbl_sint32MotorSteps[HMOTOR_WL_SELECT] - glbl_sint32ZeroWLSteps) / glbl_float32StepsPerNm;
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HMOTOR_GetCurrentWL+0x4c>)
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb8 <HMOTOR_GetCurrentWL+0x50>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc f89b 	bl	8000cc0 <__aeabi_i2f>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HMOTOR_GetCurrentWL+0x54>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fc f99c 	bl	8000ed0 <__aeabi_fdiv>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	e001      	b.n	8004baa <HMOTOR_GetCurrentWL+0x42>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	2000080c 	.word	0x2000080c
 8004bb8:	2000081c 	.word	0x2000081c
 8004bbc:	20000820 	.word	0x20000820

08004bc0 <HMOTOR_StepNoDelay>:
 * @return Std_ReturnType
 * @retval E_OK:										Motor Successfully moved
 * @retval E_NOT_OK:									Motor not moved 
 */
Std_ReturnType HMOTOR_StepNoDelay(HMOTORS_Select_t Copy_uint32MotorSelect, uint8 Copy_uint8Direction)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460a      	mov	r2, r1
 8004bca:	71fb      	strb	r3, [r7, #7]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71bb      	strb	r3, [r7, #6]
	/************************************************************************************************* 
        1) Specify the direction of the motor movement (clockwise or counter-clockwise)
    *************************************************************************************************/
	switch(Copy_uint8Direction)
 8004bd0:	79bb      	ldrb	r3, [r7, #6]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d002      	beq.n	8004bdc <HMOTOR_StepNoDelay+0x1c>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d00d      	beq.n	8004bf6 <HMOTOR_StepNoDelay+0x36>
 8004bda:	e019      	b.n	8004c10 <HMOTOR_StepNoDelay+0x50>
	{
		case HMOTORS_CLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <HMOTOR_StepNoDelay+0xc8>)
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	b2d8      	uxtb	r0, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 8004be6:	4a29      	ldr	r2, [pc, #164]	@ (8004c8c <HMOTOR_StepNoDelay+0xcc>)
 8004be8:	5cd3      	ldrb	r3, [r2, r3]
 8004bea:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004bec:	2201      	movs	r2, #1
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f000 fcac 	bl	800554c <MGPIO_SetPinValue>
			break;
 8004bf4:	e00e      	b.n	8004c14 <HMOTOR_StepNoDelay+0x54>
		}
		case HMOTORS_CCLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <HMOTOR_StepNoDelay+0xc8>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	b2d8      	uxtb	r0, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004c00:	4a22      	ldr	r2, [pc, #136]	@ (8004c8c <HMOTOR_StepNoDelay+0xcc>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004c06:	2200      	movs	r2, #0
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f000 fc9f 	bl	800554c <MGPIO_SetPinValue>
			break;
 8004c0e:	e001      	b.n	8004c14 <HMOTOR_StepNoDelay+0x54>
		}
		default:
		{
			return E_NOT_OK;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e035      	b.n	8004c80 <HMOTOR_StepNoDelay+0xc0>
	}

	/************************************************************************************************* 
        2) Move motor one step by sending pulse with duration 10 us
    *************************************************************************************************/
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <HMOTOR_StepNoDelay+0xd0>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	b2d8      	uxtb	r0, r3
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <HMOTOR_StepNoDelay+0xd4>)
 8004c20:	5cd3      	ldrb	r3, [r2, r3]
 8004c22:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004c24:	2201      	movs	r2, #1
 8004c26:	4619      	mov	r1, r3
 8004c28:	f000 fc90 	bl	800554c <MGPIO_SetPinValue>
	
	MSTK_uint8DelayUs(10);
 8004c2c:	200a      	movs	r0, #10
 8004c2e:	f001 ffa3 	bl	8006b78 <MSTK_uint8DelayUs>
	
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <HMOTOR_StepNoDelay+0xd0>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	b2d8      	uxtb	r0, r3
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <HMOTOR_StepNoDelay+0xd4>)
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004c42:	2200      	movs	r2, #0
 8004c44:	4619      	mov	r1, r3
 8004c46:	f000 fc81 	bl	800554c <MGPIO_SetPinValue>

	// Update the value of the steps' indicator to keep track of the motor's current position
	if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 8004c4a:	79bb      	ldrb	r3, [r7, #6]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d108      	bne.n	8004c62 <HMOTOR_StepNoDelay+0xa2>
	{
		glbl_sint32MotorSteps[Copy_uint32MotorSelect] ++;
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	4a11      	ldr	r2, [pc, #68]	@ (8004c98 <HMOTOR_StepNoDelay+0xd8>)
 8004c54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c58:	3201      	adds	r2, #1
 8004c5a:	490f      	ldr	r1, [pc, #60]	@ (8004c98 <HMOTOR_StepNoDelay+0xd8>)
 8004c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c60:	e00d      	b.n	8004c7e <HMOTOR_StepNoDelay+0xbe>
	}
	else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 8004c62:	79bb      	ldrb	r3, [r7, #6]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d108      	bne.n	8004c7a <HMOTOR_StepNoDelay+0xba>
	{
		glbl_sint32MotorSteps[Copy_uint32MotorSelect] --;
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c98 <HMOTOR_StepNoDelay+0xd8>)
 8004c6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c70:	3a01      	subs	r2, #1
 8004c72:	4909      	ldr	r1, [pc, #36]	@ (8004c98 <HMOTOR_StepNoDelay+0xd8>)
 8004c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c78:	e001      	b.n	8004c7e <HMOTOR_StepNoDelay+0xbe>
	}
	else
	{
		return E_NOT_OK;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HMOTOR_StepNoDelay+0xc0>
	}
	return E_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000040c 	.word	0x2000040c
 8004c8c:	20000410 	.word	0x20000410
 8004c90:	20000404 	.word	0x20000404
 8004c94:	20000408 	.word	0x20000408
 8004c98:	2000080c 	.word	0x2000080c

08004c9c <HMOTOR_GetStepsPerNm>:
 * @return Std_ReturnType
 * @retval E_OK:										Value Successfully retrieved
 * @retval E_NOT_OK:									Value not retrieved 
 */
Std_ReturnType HMOTOR_GetStepsPerNm			(float32* P_float32StepsPerNm)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	if(P_float32StepsPerNm != NULL_PTR)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HMOTOR_GetStepsPerNm+0x1a>
	{
		*P_float32StepsPerNm = glbl_float32StepsPerNm;
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HMOTOR_GetStepsPerNm+0x28>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
		return E_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HMOTOR_GetStepsPerNm+0x1c>
	}
	else
	{
		return E_NOT_OK;
 8004cb6:	2301      	movs	r3, #1
	}
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000820 	.word	0x20000820

08004cc8 <HMOTOR_FilterHomeIndicator>:
		return E_NOT_OK;
	}
}

void HMOTOR_FilterHomeIndicator(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[1] = HMOTORS_MOTOR_AT_HOME;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	@ (8004cdc <HMOTOR_FilterHomeIndicator+0x14>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	705a      	strb	r2, [r3, #1]
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000818 	.word	0x20000818

08004ce0 <HMOTOR_WLHomeIndicator>:
void HMOTOR_WLHomeIndicator(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[2] = HMOTORS_MOTOR_AT_HOME;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	@ (8004cf4 <HMOTOR_WLHomeIndicator+0x14>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	709a      	strb	r2, [r3, #2]
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000818 	.word	0x20000818

08004cf8 <MADC_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                                    ADC successfully initialized
 * @retval E_NOT_OK:                                ADC not initialized 
 */
Std_ReturnType MADC_Init                            (ADC_Select_t Copy_uint32ADCSelect)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
    
    /************************************************************************************************* 
        1) Set ADC Operation Mode
    *************************************************************************************************/
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	4a4e      	ldr	r2, [pc, #312]	@ (8004e44 <MADC_Init+0x14c>)
 8004d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	494c      	ldr	r1, [pc, #304]	@ (8004e44 <MADC_Init+0x14c>)
 8004d14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d18:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004d1c:	605a      	str	r2, [r3, #4]
    ADC[Copy_uint32ADCSelect] -> CR1 |= ((MADC_OPERATION_MODE) << (MADC_CR1_DUALMOD_START_BIT));
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	4a48      	ldr	r2, [pc, #288]	@ (8004e44 <MADC_Init+0x14c>)
 8004d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	4946      	ldr	r1, [pc, #280]	@ (8004e44 <MADC_Init+0x14c>)
 8004d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d2e:	6852      	ldr	r2, [r2, #4]
 8004d30:	605a      	str	r2, [r3, #4]
        2) Set End of conversion interrupt status
    *************************************************************************************************/
    #if MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
    #elif MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <MADC_Init+0x14c>)
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	4941      	ldr	r1, [pc, #260]	@ (8004e44 <MADC_Init+0x14c>)
 8004d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d44:	f022 0220 	bic.w	r2, r2, #32
 8004d48:	605a      	str	r2, [r3, #4]
    #endif /*MADC_EOC_INTERRUPT_STATUS*/

    /************************************************************************************************* 
        3) Disable ADC Continuous Conversion
    *************************************************************************************************/
    CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CONT_BIT);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e44 <MADC_Init+0x14c>)
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	493b      	ldr	r1, [pc, #236]	@ (8004e44 <MADC_Init+0x14c>)
 8004d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d5c:	f022 0202 	bic.w	r2, r2, #2
 8004d60:	609a      	str	r2, [r3, #8]
    #if MADC_DATA_BITS_ADJUST_SELECT == MADC_RIGHT_ADJUST_DATA_BITS
        /*
            Right Align: means that the 12-bits data's least significant bit is at bit 0 in the
                            ADC data register
        */
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ALIGN_BIT);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4a37      	ldr	r2, [pc, #220]	@ (8004e44 <MADC_Init+0x14c>)
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	4935      	ldr	r1, [pc, #212]	@ (8004e44 <MADC_Init+0x14c>)
 8004d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d78:	609a      	str	r2, [r3, #8]

    /************************************************************************************************* 
        5) Configure External Trigger Status
    *************************************************************************************************/
    #if MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	@ (8004e44 <MADC_Init+0x14c>)
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	492f      	ldr	r1, [pc, #188]	@ (8004e44 <MADC_Init+0x14c>)
 8004d88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d8c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004d90:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	@ (8004e44 <MADC_Init+0x14c>)
 8004d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	4929      	ldr	r1, [pc, #164]	@ (8004e44 <MADC_Init+0x14c>)
 8004da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004da4:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 8004da8:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 |= ((MADC_EXTERNAL_TRIGGER_SELECT) << (MADC_CR2_EXTSEL_START_BIT));
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <MADC_Init+0x14c>)
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	4923      	ldr	r1, [pc, #140]	@ (8004e44 <MADC_Init+0x14c>)
 8004db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dbc:	f442 2260 	orr.w	r2, r2, #917504	@ 0xe0000
 8004dc0:	609a      	str	r2, [r3, #8]
    #endif /*MADC_EXTERNAL_TRIGGER_STATUS*/

    /************************************************************************************************* 
        6) Enable ADC Peripheral
    *************************************************************************************************/
    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ADON_BIT);
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e44 <MADC_Init+0x14c>)
 8004dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	491d      	ldr	r1, [pc, #116]	@ (8004e44 <MADC_Init+0x14c>)
 8004dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	609a      	str	r2, [r3, #8]

    /************************************************************************************************* 
        7) Reset ADC Calibration
    *************************************************************************************************/
    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT);
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <MADC_Init+0x14c>)
 8004dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	4917      	ldr	r1, [pc, #92]	@ (8004e44 <MADC_Init+0x14c>)
 8004de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dec:	f042 0208 	orr.w	r2, r2, #8
 8004df0:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT));
 8004df2:	bf00      	nop
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <MADC_Init+0x14c>)
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f6      	bne.n	8004df4 <MADC_Init+0xfc>

    /************************************************************************************************* 
        8) Start ADC Calibration
    *************************************************************************************************/
    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT);
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	4a0e      	ldr	r2, [pc, #56]	@ (8004e44 <MADC_Init+0x14c>)
 8004e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	490c      	ldr	r1, [pc, #48]	@ (8004e44 <MADC_Init+0x14c>)
 8004e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e18:	f042 0204 	orr.w	r2, r2, #4
 8004e1c:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT));
 8004e1e:	bf00      	nop
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	4a08      	ldr	r2, [pc, #32]	@ (8004e44 <MADC_Init+0x14c>)
 8004e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f6      	bne.n	8004e20 <MADC_Init+0x128>
    
    Loc_uint8FuncStatus = E_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000420 	.word	0x20000420

08004e48 <MADC_Conversion>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Conversion completed successfully and data retrieved
 * @retval E_NOT_OK:                                Conversion failed  
 */
Std_ReturnType MADC_Conversion                      (ADC_Select_t Copy_uint32ADCSelect, ADC_Channel_t Copy_uint32ChannelSelect, uint16* P_uint16ConvertedData)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	603a      	str	r2, [r7, #0]
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	460b      	mov	r3, r1
 8004e56:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
    if(P_uint16ConvertedData != NULL_PTR)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03e      	beq.n	8004ee0 <MADC_Conversion+0x98>
    {
        /************************************************************************************************* 
            1) Select Channel to read analog signal from
        *************************************************************************************************/
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	4920      	ldr	r1, [pc, #128]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e74:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	491a      	ldr	r1, [pc, #104]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e8c:	f022 021f 	bic.w	r2, r2, #31
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34
        ADC[Copy_uint32ADCSelect] -> SQR3 = (Copy_uint32ChannelSelect) << 0;
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	79ba      	ldrb	r2, [r7, #6]
 8004e9c:	635a      	str	r2, [r3, #52]	@ 0x34

        /************************************************************************************************* 
            2) Trigger ADC Conversion
        *************************************************************************************************/
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_SWSTART_BIT);
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	4911      	ldr	r1, [pc, #68]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004eac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eb0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004eb4:	609a      	str	r2, [r3, #8]

        /************************************************************************************************* 
            3) Wait for ADC conversion to complete
        *************************************************************************************************/
        while(!(GET_BIT((ADC[Copy_uint32ADCSelect] -> SR), MADC_SR_EOC_BIT)));
 8004eb6:	bf00      	nop
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f6      	beq.n	8004eb8 <MADC_Conversion+0x70>

        /************************************************************************************************* 
            4) Read Converted Data
        *************************************************************************************************/
        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <MADC_Conversion+0xa8>)
 8004ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e001      	b.n	8004ee4 <MADC_Conversion+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	20000420 	.word	0x20000420

08004ef4 <ADC1_2_IRQHandler>:
/**
 * @brief: Function that represents the Interrupt Service Routine for ADC 1 and 2 Conversion Complete Interrupts
 * 
 */
void ADC1_2_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
    if(GET_BIT((ADC[0] -> SR), MADC_SR_EOC_BIT))
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <ADC1_2_IRQHandler+0x44>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <ADC1_2_IRQHandler+0x22>
    {
        if(glbl_EOCCallbackFunc[0] != NULL_PTR)
 8004f06:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <ADC1_2_IRQHandler+0x48>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <ADC1_2_IRQHandler+0x3e>
        {
            (glbl_EOCCallbackFunc[0])();
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <ADC1_2_IRQHandler+0x48>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
}
 8004f14:	e00d      	b.n	8004f32 <ADC1_2_IRQHandler+0x3e>
    else if(GET_BIT((ADC[1] -> SR), MADC_SR_EOC_BIT))
 8004f16:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <ADC1_2_IRQHandler+0x44>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <ADC1_2_IRQHandler+0x3e>
		if(glbl_EOCCallbackFunc[1] != NULL_PTR)
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <ADC1_2_IRQHandler+0x48>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <ADC1_2_IRQHandler+0x3e>
            (glbl_EOCCallbackFunc[1])();
 8004f2c:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <ADC1_2_IRQHandler+0x48>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4798      	blx	r3
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000420 	.word	0x20000420
 8004f3c:	20000824 	.word	0x20000824

08004f40 <MAFIO_SetEXTIPinConfigurations>:
 * @return Std_ReturnType
 * @retval E_OK:                            Configuration Successfully Set
 * @retval E_NOT_OK:                        Configuration not set 
 */
Std_ReturnType MAFIO_SetEXTIPinConfigurations(uint8 Copy_uint8EXTILine, uint8 Copy_uint8Port)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	460a      	mov	r2, r1
 8004f4a:	71fb      	strb	r3, [r7, #7]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8Port <= MAFIO_PORTG_PIN) && (Copy_uint8EXTILine <= MAFIO_EXTI15))
 8004f54:	79bb      	ldrb	r3, [r7, #6]
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d82d      	bhi.n	8004fb6 <MAFIO_SetEXTIPinConfigurations+0x76>
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b0f      	cmp	r3, #15
 8004f5e:	d82a      	bhi.n	8004fb6 <MAFIO_SetEXTIPinConfigurations+0x76>
    {
        // Calculate the index and offset for the EXTICR register
        uint8 Loc_uint8RegIndex = Copy_uint8EXTILine / 4;
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	73bb      	strb	r3, [r7, #14]
        uint8 Loc_uint8RegOffset = Copy_uint8EXTILine % 4;
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	737b      	strb	r3, [r7, #13]

        // Clear the existing configuration for the specified EXTI line
        MAFIO ->EXTICR[Loc_uint8RegIndex] &= ~((0b1111) << Loc_uint8RegOffset * 4);
 8004f6e:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004f70:	7bbb      	ldrb	r3, [r7, #14]
 8004f72:	3302      	adds	r3, #2
 8004f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f78:	7b7b      	ldrb	r3, [r7, #13]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	210f      	movs	r1, #15
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	4618      	mov	r0, r3
 8004f86:	4910      	ldr	r1, [pc, #64]	@ (8004fc8 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	4002      	ands	r2, r0
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        
        // Set the new configuration for the specified EXTI line and port
        MAFIO ->EXTICR[Loc_uint8RegIndex] |= ((Copy_uint8Port) << Loc_uint8RegOffset * 4);
 8004f92:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc8 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	3302      	adds	r3, #2
 8004f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f9c:	79b9      	ldrb	r1, [r7, #6]
 8004f9e:	7b7b      	ldrb	r3, [r7, #13]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	4907      	ldr	r1, [pc, #28]	@ (8004fc8 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	4302      	orrs	r2, r0
 8004fae:	3302      	adds	r3, #2
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
 8004fb4:	e001      	b.n	8004fba <MAFIO_SetEXTIPinConfigurations+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000

08004fcc <MEXTI_EnableExternalInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK:                                Interrupt on EXTI Line successfully enabled
 * @retval E_NOT_OK:                            Interrupt on EXTI Line not enabled 
 */
Std_ReturnType MEXTI_EnableExternalInterrupt(uint8 Copy_uint8EXTILine, uint8 Copy_uint8EXTIMode)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	71fb      	strb	r3, [r7, #7]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]

    if((Copy_uint8EXTILine <= MEXTI_EXTI15) && (Copy_uint8EXTIMode <= MEXTI_INT_AT_BOTH_EDGES))
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	d84c      	bhi.n	8005080 <MEXTI_EnableExternalInterrupt+0xb4>
 8004fe6:	79bb      	ldrb	r3, [r7, #6]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d849      	bhi.n	8005080 <MEXTI_EnableExternalInterrupt+0xb4>
    {
        /************************************************************************************************* 
            1) Set External Interrupt Mode (Interrupt occurs at rising, falling or at both edges)
        *************************************************************************************************/
        switch(Copy_uint8EXTIMode)
 8004fec:	79bb      	ldrb	r3, [r7, #6]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d020      	beq.n	8005034 <MEXTI_EnableExternalInterrupt+0x68>
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	dc34      	bgt.n	8005060 <MEXTI_EnableExternalInterrupt+0x94>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <MEXTI_EnableExternalInterrupt+0x34>
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d00d      	beq.n	800501a <MEXTI_EnableExternalInterrupt+0x4e>
 8004ffe:	e02f      	b.n	8005060 <MEXTI_EnableExternalInterrupt+0x94>
        {
            case MEXTI_INT_AT_RISING_EDGE:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8005000:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	79fa      	ldrb	r2, [r7, #7]
 8005006:	2101      	movs	r1, #1
 8005008:	fa01 f202 	lsl.w	r2, r1, r2
 800500c:	4611      	mov	r1, r2
 800500e:	4a20      	ldr	r2, [pc, #128]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005010:	430b      	orrs	r3, r1
 8005012:	6093      	str	r3, [r2, #8]
                Loc_uint8FuncStatus = E_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
                break;
 8005018:	e025      	b.n	8005066 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_FALLING_EDGE:
            {
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	79fa      	ldrb	r2, [r7, #7]
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	4611      	mov	r1, r2
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 800502a:	430b      	orrs	r3, r1
 800502c:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
                break;
 8005032:	e018      	b.n	8005066 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_BOTH_EDGES:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8005034:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	79fa      	ldrb	r2, [r7, #7]
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f202 	lsl.w	r2, r1, r2
 8005040:	4611      	mov	r1, r2
 8005042:	4a13      	ldr	r2, [pc, #76]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6093      	str	r3, [r2, #8]
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	79fa      	ldrb	r2, [r7, #7]
 800504e:	2101      	movs	r1, #1
 8005050:	fa01 f202 	lsl.w	r2, r1, r2
 8005054:	4611      	mov	r1, r2
 8005056:	4a0e      	ldr	r2, [pc, #56]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005058:	430b      	orrs	r3, r1
 800505a:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
                break;
 8005064:	bf00      	nop
        }

        /************************************************************************************************* 
            2) Enable External Interrupt on specified EXTI Line
        *************************************************************************************************/
        SET_BIT((MEXTI -> IMR), Copy_uint8EXTILine);
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	79fa      	ldrb	r2, [r7, #7]
 800506c:	2101      	movs	r1, #1
 800506e:	fa01 f202 	lsl.w	r2, r1, r2
 8005072:	4611      	mov	r1, r2
 8005074:	4a06      	ldr	r2, [pc, #24]	@ (8005090 <MEXTI_EnableExternalInterrupt+0xc4>)
 8005076:	430b      	orrs	r3, r1
 8005078:	6013      	str	r3, [r2, #0]

        Loc_uint8FuncStatus = E_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	e001      	b.n	8005084 <MEXTI_EnableExternalInterrupt+0xb8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40010400 	.word	0x40010400

08005094 <MEXTI_SetCallbackFunction>:
 * @return Std_ReturnType
 * @retval E_OK:                                Interrupt function successfully set
 * @retval E_NOT_OK:                            Interrupt function not set 
 */
Std_ReturnType MEXTI_SetCallbackFunction(uint8 Copy_uint8EXTILine, ptr_to_EXTICallback P_EXTICallBackFunc)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint8EXTILine <= MEXTI_EXTI15)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d805      	bhi.n	80050b6 <MEXTI_SetCallbackFunction+0x22>
    {
        glbl_PEXTICallbackFunctions[Copy_uint8EXTILine] = P_EXTICallBackFunc;
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4906      	ldr	r1, [pc, #24]	@ (80050c8 <MEXTI_SetCallbackFunction+0x34>)
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80050b4:	e001      	b.n	80050ba <MEXTI_SetCallbackFunction+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000082c 	.word	0x2000082c

080050cc <EXTI0_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI0 Line
 * 
 */
void EXTI0_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[0] != NULL_PTR)
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <EXTI0_IRQHandler+0x24>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <EXTI0_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[0])();
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <EXTI0_IRQHandler+0x24>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 0);
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <EXTI0_IRQHandler+0x28>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <EXTI0_IRQHandler+0x28>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6153      	str	r3, [r2, #20]
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2000082c 	.word	0x2000082c
 80050f4:	40010400 	.word	0x40010400

080050f8 <EXTI1_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI1 Line
 * 
 */
void EXTI1_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[1] != NULL_PTR)
 80050fc:	4b07      	ldr	r3, [pc, #28]	@ (800511c <EXTI1_IRQHandler+0x24>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <EXTI1_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[1])();
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <EXTI1_IRQHandler+0x24>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 1);
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <EXTI1_IRQHandler+0x28>)
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <EXTI1_IRQHandler+0x28>)
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	6153      	str	r3, [r2, #20]
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	2000082c 	.word	0x2000082c
 8005120:	40010400 	.word	0x40010400

08005124 <EXTI2_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI2 Line
 * 
 */
void EXTI2_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[2] != NULL_PTR)
 8005128:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <EXTI2_IRQHandler+0x24>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <EXTI2_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[2])();
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <EXTI2_IRQHandler+0x24>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 2);
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <EXTI2_IRQHandler+0x28>)
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4a04      	ldr	r2, [pc, #16]	@ (800514c <EXTI2_IRQHandler+0x28>)
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	6153      	str	r3, [r2, #20]
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	2000082c 	.word	0x2000082c
 800514c:	40010400 	.word	0x40010400

08005150 <EXTI3_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI3 Line
 * 
 */
void EXTI3_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[3] != NULL_PTR)
 8005154:	4b07      	ldr	r3, [pc, #28]	@ (8005174 <EXTI3_IRQHandler+0x24>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <EXTI3_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[3])();
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <EXTI3_IRQHandler+0x24>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 3);
 8005162:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <EXTI3_IRQHandler+0x28>)
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	4a04      	ldr	r2, [pc, #16]	@ (8005178 <EXTI3_IRQHandler+0x28>)
 8005168:	f043 0308 	orr.w	r3, r3, #8
 800516c:	6153      	str	r3, [r2, #20]
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	2000082c 	.word	0x2000082c
 8005178:	40010400 	.word	0x40010400

0800517c <EXTI4_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI4 Line
 * 
 */
void EXTI4_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[4] != NULL_PTR)
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <EXTI4_IRQHandler+0x24>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <EXTI4_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[4])();
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <EXTI4_IRQHandler+0x24>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 4);
 800518e:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <EXTI4_IRQHandler+0x28>)
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4a04      	ldr	r2, [pc, #16]	@ (80051a4 <EXTI4_IRQHandler+0x28>)
 8005194:	f043 0310 	orr.w	r3, r3, #16
 8005198:	6153      	str	r3, [r2, #20]
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000082c 	.word	0x2000082c
 80051a4:	40010400 	.word	0x40010400

080051a8 <EXTI9_5_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI5 to EXTI9 Lines
 * 
 */
void EXTI9_5_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 5))
 80051ac:	4b32      	ldr	r3, [pc, #200]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <EXTI9_5_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[5] != NULL_PTR)
 80051b8:	4b30      	ldr	r3, [pc, #192]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <EXTI9_5_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[5])();
 80051c0:	4b2e      	ldr	r3, [pc, #184]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 5);
 80051c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051cc:	f043 0320 	orr.w	r3, r3, #32
 80051d0:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
}
 80051d2:	e04e      	b.n	8005272 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 6))
 80051d4:	4b28      	ldr	r3, [pc, #160]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <EXTI9_5_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[6] != NULL_PTR)
 80051e0:	4b26      	ldr	r3, [pc, #152]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <EXTI9_5_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[6])();
 80051e8:	4b24      	ldr	r3, [pc, #144]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 6);
 80051ee:	4b22      	ldr	r3, [pc, #136]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f8:	6153      	str	r3, [r2, #20]
}
 80051fa:	e03a      	b.n	8005272 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 7))
 80051fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <EXTI9_5_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[7] != NULL_PTR)
 8005208:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <EXTI9_5_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[7])();
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 7);
 8005216:	4b18      	ldr	r3, [pc, #96]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4a17      	ldr	r2, [pc, #92]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	6153      	str	r3, [r2, #20]
}
 8005222:	e026      	b.n	8005272 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 8))
 8005224:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00d      	beq.n	800524c <EXTI9_5_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[8] != NULL_PTR)
 8005230:	4b12      	ldr	r3, [pc, #72]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <EXTI9_5_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[8])();
 8005238:	4b10      	ldr	r3, [pc, #64]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 8);
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4a0d      	ldr	r2, [pc, #52]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005248:	6153      	str	r3, [r2, #20]
}
 800524a:	e012      	b.n	8005272 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 9))
 800524c:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <EXTI9_5_IRQHandler+0xca>
        if(glbl_PEXTICallbackFunctions[9] != NULL_PTR)
 8005258:	4b08      	ldr	r3, [pc, #32]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <EXTI9_5_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[9])();
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <EXTI9_5_IRQHandler+0xd4>)
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 9);
 8005266:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	4a03      	ldr	r2, [pc, #12]	@ (8005278 <EXTI9_5_IRQHandler+0xd0>)
 800526c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005270:	6153      	str	r3, [r2, #20]
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40010400 	.word	0x40010400
 800527c:	2000082c 	.word	0x2000082c

08005280 <EXTI15_10_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine for EXTI10 to EXTI15 Lines
 * 
 */
void EXTI15_10_IRQHandler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 10))
 8005284:	4b3c      	ldr	r3, [pc, #240]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <EXTI15_10_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[10] != NULL_PTR)
 8005290:	4b3a      	ldr	r3, [pc, #232]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <EXTI15_10_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[10])();
 8005298:	4b38      	ldr	r3, [pc, #224]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 10);
 800529e:	4b36      	ldr	r3, [pc, #216]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052a8:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
 80052aa:	e062      	b.n	8005372 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 11))
 80052ac:	4b32      	ldr	r3, [pc, #200]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <EXTI15_10_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[11] != NULL_PTR)
 80052b8:	4b30      	ldr	r3, [pc, #192]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <EXTI15_10_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[11])();
 80052c0:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 11);
 80052c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80052d0:	6153      	str	r3, [r2, #20]
 80052d2:	e04e      	b.n	8005372 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 12))
 80052d4:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <EXTI15_10_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[12] != NULL_PTR)
 80052e0:	4b26      	ldr	r3, [pc, #152]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <EXTI15_10_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[12])();
 80052e8:	4b24      	ldr	r3, [pc, #144]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 12);
 80052ee:	4b22      	ldr	r3, [pc, #136]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052f8:	6153      	str	r3, [r2, #20]
 80052fa:	e03a      	b.n	8005372 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 13))
 80052fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <EXTI15_10_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[13] != NULL_PTR)
 8005308:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <EXTI15_10_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[13])();
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 8005312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005314:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 13);
 8005316:	4b18      	ldr	r3, [pc, #96]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4a17      	ldr	r2, [pc, #92]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 800531c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005320:	6153      	str	r3, [r2, #20]
 8005322:	e026      	b.n	8005372 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 14))
 8005324:	4b14      	ldr	r3, [pc, #80]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <EXTI15_10_IRQHandler+0xcc>
        if(glbl_PEXTICallbackFunctions[14] != NULL_PTR)
 8005330:	4b12      	ldr	r3, [pc, #72]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <EXTI15_10_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[14])();
 8005338:	4b10      	ldr	r3, [pc, #64]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 14);
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4a0d      	ldr	r2, [pc, #52]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005348:	6153      	str	r3, [r2, #20]
 800534a:	e012      	b.n	8005372 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 15))
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <EXTI15_10_IRQHandler+0xf2>
        if(glbl_PEXTICallbackFunctions[15] != NULL_PTR)
 8005358:	4b08      	ldr	r3, [pc, #32]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <EXTI15_10_IRQHandler+0xe6>
            (glbl_PEXTICallbackFunctions[15])();
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <EXTI15_10_IRQHandler+0xfc>)
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 15);
 8005366:	4b04      	ldr	r3, [pc, #16]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4a03      	ldr	r2, [pc, #12]	@ (8005378 <EXTI15_10_IRQHandler+0xf8>)
 800536c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005370:	6153      	str	r3, [r2, #20]
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40010400 	.word	0x40010400
 800537c:	2000082c 	.word	0x2000082c

08005380 <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
 800538a:	460b      	mov	r3, r1
 800538c:	71bb      	strb	r3, [r7, #6]
 800538e:	4613      	mov	r3, r2
 8005390:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2b02      	cmp	r3, #2
 800539a:	f000 8081 	beq.w	80054a0 <MGPIO_SetPinMode+0x120>
 800539e:	2b02      	cmp	r3, #2
 80053a0:	f300 80ba 	bgt.w	8005518 <MGPIO_SetPinMode+0x198>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <MGPIO_SetPinMode+0x2e>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d03d      	beq.n	8005428 <MGPIO_SetPinMode+0xa8>
 80053ac:	e0b4      	b.n	8005518 <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 80053ae:	79bb      	ldrb	r3, [r7, #6]
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	d819      	bhi.n	80053e8 <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 80053b4:	4b5f      	ldr	r3, [pc, #380]	@ (8005534 <MGPIO_SetPinMode+0x1b4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	79ba      	ldrb	r2, [r7, #6]
 80053ba:	0092      	lsls	r2, r2, #2
 80053bc:	210f      	movs	r1, #15
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	43d2      	mvns	r2, r2
 80053c4:	4611      	mov	r1, r2
 80053c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005534 <MGPIO_SetPinMode+0x1b4>)
 80053c8:	400b      	ands	r3, r1
 80053ca:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <MGPIO_SetPinMode+0x1b4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	7979      	ldrb	r1, [r7, #5]
 80053d2:	79ba      	ldrb	r2, [r7, #6]
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	fa01 f202 	lsl.w	r2, r1, r2
 80053da:	4611      	mov	r1, r2
 80053dc:	4a55      	ldr	r2, [pc, #340]	@ (8005534 <MGPIO_SetPinMode+0x1b4>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80053e6:	e09a      	b.n	800551e <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80053e8:	79bb      	ldrb	r3, [r7, #6]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	f200 8097 	bhi.w	800551e <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80053f0:	4b51      	ldr	r3, [pc, #324]	@ (8005538 <MGPIO_SetPinMode+0x1b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	79ba      	ldrb	r2, [r7, #6]
 80053f6:	3a08      	subs	r2, #8
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	210f      	movs	r1, #15
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	43d2      	mvns	r2, r2
 8005402:	4611      	mov	r1, r2
 8005404:	4a4c      	ldr	r2, [pc, #304]	@ (8005538 <MGPIO_SetPinMode+0x1b8>)
 8005406:	400b      	ands	r3, r1
 8005408:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800540a:	4b4b      	ldr	r3, [pc, #300]	@ (8005538 <MGPIO_SetPinMode+0x1b8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	7979      	ldrb	r1, [r7, #5]
 8005410:	79ba      	ldrb	r2, [r7, #6]
 8005412:	3a08      	subs	r2, #8
 8005414:	0092      	lsls	r2, r2, #2
 8005416:	fa01 f202 	lsl.w	r2, r1, r2
 800541a:	4611      	mov	r1, r2
 800541c:	4a46      	ldr	r2, [pc, #280]	@ (8005538 <MGPIO_SetPinMode+0x1b8>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
            break;
 8005426:	e07a      	b.n	800551e <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8005428:	79bb      	ldrb	r3, [r7, #6]
 800542a:	2b07      	cmp	r3, #7
 800542c:	d819      	bhi.n	8005462 <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800542e:	4b43      	ldr	r3, [pc, #268]	@ (800553c <MGPIO_SetPinMode+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	79ba      	ldrb	r2, [r7, #6]
 8005434:	0092      	lsls	r2, r2, #2
 8005436:	210f      	movs	r1, #15
 8005438:	fa01 f202 	lsl.w	r2, r1, r2
 800543c:	43d2      	mvns	r2, r2
 800543e:	4611      	mov	r1, r2
 8005440:	4a3e      	ldr	r2, [pc, #248]	@ (800553c <MGPIO_SetPinMode+0x1bc>)
 8005442:	400b      	ands	r3, r1
 8005444:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8005446:	4b3d      	ldr	r3, [pc, #244]	@ (800553c <MGPIO_SetPinMode+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	7979      	ldrb	r1, [r7, #5]
 800544c:	79ba      	ldrb	r2, [r7, #6]
 800544e:	0092      	lsls	r2, r2, #2
 8005450:	fa01 f202 	lsl.w	r2, r1, r2
 8005454:	4611      	mov	r1, r2
 8005456:	4a39      	ldr	r2, [pc, #228]	@ (800553c <MGPIO_SetPinMode+0x1bc>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8005460:	e05f      	b.n	8005522 <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8005462:	79bb      	ldrb	r3, [r7, #6]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d85c      	bhi.n	8005522 <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <MGPIO_SetPinMode+0x1c0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	79ba      	ldrb	r2, [r7, #6]
 800546e:	3a08      	subs	r2, #8
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	210f      	movs	r1, #15
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	43d2      	mvns	r2, r2
 800547a:	4611      	mov	r1, r2
 800547c:	4a30      	ldr	r2, [pc, #192]	@ (8005540 <MGPIO_SetPinMode+0x1c0>)
 800547e:	400b      	ands	r3, r1
 8005480:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8005482:	4b2f      	ldr	r3, [pc, #188]	@ (8005540 <MGPIO_SetPinMode+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	7979      	ldrb	r1, [r7, #5]
 8005488:	79ba      	ldrb	r2, [r7, #6]
 800548a:	3a08      	subs	r2, #8
 800548c:	0092      	lsls	r2, r2, #2
 800548e:	fa01 f202 	lsl.w	r2, r1, r2
 8005492:	4611      	mov	r1, r2
 8005494:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <MGPIO_SetPinMode+0x1c0>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
            break;
 800549e:	e040      	b.n	8005522 <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 80054a0:	79bb      	ldrb	r3, [r7, #6]
 80054a2:	2b07      	cmp	r3, #7
 80054a4:	d819      	bhi.n	80054da <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 80054a6:	4b27      	ldr	r3, [pc, #156]	@ (8005544 <MGPIO_SetPinMode+0x1c4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	79ba      	ldrb	r2, [r7, #6]
 80054ac:	0092      	lsls	r2, r2, #2
 80054ae:	210f      	movs	r1, #15
 80054b0:	fa01 f202 	lsl.w	r2, r1, r2
 80054b4:	43d2      	mvns	r2, r2
 80054b6:	4611      	mov	r1, r2
 80054b8:	4a22      	ldr	r2, [pc, #136]	@ (8005544 <MGPIO_SetPinMode+0x1c4>)
 80054ba:	400b      	ands	r3, r1
 80054bc:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 80054be:	4b21      	ldr	r3, [pc, #132]	@ (8005544 <MGPIO_SetPinMode+0x1c4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	7979      	ldrb	r1, [r7, #5]
 80054c4:	79ba      	ldrb	r2, [r7, #6]
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	fa01 f202 	lsl.w	r2, r1, r2
 80054cc:	4611      	mov	r1, r2
 80054ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <MGPIO_SetPinMode+0x1c4>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80054d8:	e025      	b.n	8005526 <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80054da:	79bb      	ldrb	r3, [r7, #6]
 80054dc:	2b0f      	cmp	r3, #15
 80054de:	d822      	bhi.n	8005526 <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80054e0:	4b19      	ldr	r3, [pc, #100]	@ (8005548 <MGPIO_SetPinMode+0x1c8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	79ba      	ldrb	r2, [r7, #6]
 80054e6:	3a08      	subs	r2, #8
 80054e8:	0092      	lsls	r2, r2, #2
 80054ea:	210f      	movs	r1, #15
 80054ec:	fa01 f202 	lsl.w	r2, r1, r2
 80054f0:	43d2      	mvns	r2, r2
 80054f2:	4611      	mov	r1, r2
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <MGPIO_SetPinMode+0x1c8>)
 80054f6:	400b      	ands	r3, r1
 80054f8:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80054fa:	4b13      	ldr	r3, [pc, #76]	@ (8005548 <MGPIO_SetPinMode+0x1c8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	7979      	ldrb	r1, [r7, #5]
 8005500:	79ba      	ldrb	r2, [r7, #6]
 8005502:	3a08      	subs	r2, #8
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	fa01 f202 	lsl.w	r2, r1, r2
 800550a:	4611      	mov	r1, r2
 800550c:	4a0e      	ldr	r2, [pc, #56]	@ (8005548 <MGPIO_SetPinMode+0x1c8>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
            break;
 8005516:	e006      	b.n	8005526 <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
            break;
 800551c:	e004      	b.n	8005528 <MGPIO_SetPinMode+0x1a8>
            break;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <MGPIO_SetPinMode+0x1a8>
            break;
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <MGPIO_SetPinMode+0x1a8>
            break;
 8005526:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	40010800 	.word	0x40010800
 8005538:	40010804 	.word	0x40010804
 800553c:	40010c00 	.word	0x40010c00
 8005540:	40010c04 	.word	0x40010c04
 8005544:	40011000 	.word	0x40011000
 8005548:	40011004 	.word	0x40011004

0800554c <MGPIO_SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_SetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinValue)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	460b      	mov	r3, r1
 8005558:	71bb      	strb	r3, [r7, #6]
 800555a:	4613      	mov	r3, r2
 800555c:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d87c      	bhi.n	8005662 <MGPIO_SetPinValue+0x116>
 8005568:	79bb      	ldrb	r3, [r7, #6]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d879      	bhi.n	8005662 <MGPIO_SetPinValue+0x116>
    {
        switch (Copy_uint8PortID)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d04e      	beq.n	8005612 <MGPIO_SetPinValue+0xc6>
 8005574:	2b02      	cmp	r3, #2
 8005576:	dc70      	bgt.n	800565a <MGPIO_SetPinValue+0x10e>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <MGPIO_SetPinValue+0x36>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d024      	beq.n	80055ca <MGPIO_SetPinValue+0x7e>
 8005580:	e06b      	b.n	800565a <MGPIO_SetPinValue+0x10e>
        {
            case MGPIO_PORTA:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8005582:	797b      	ldrb	r3, [r7, #5]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10c      	bne.n	80055a2 <MGPIO_SetPinValue+0x56>
                {
                    SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005588:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <MGPIO_SetPinValue+0x128>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	79ba      	ldrb	r2, [r7, #6]
 800558e:	2101      	movs	r1, #1
 8005590:	fa01 f202 	lsl.w	r2, r1, r2
 8005594:	4611      	mov	r1, r2
 8005596:	4a37      	ldr	r2, [pc, #220]	@ (8005674 <MGPIO_SetPinValue+0x128>)
 8005598:	430b      	orrs	r3, r1
 800559a:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 80055a0:	e05e      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 80055a2:	797b      	ldrb	r3, [r7, #5]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <MGPIO_SetPinValue+0x78>
                    CLR_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80055a8:	4b32      	ldr	r3, [pc, #200]	@ (8005674 <MGPIO_SetPinValue+0x128>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	79ba      	ldrb	r2, [r7, #6]
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	43d2      	mvns	r2, r2
 80055b6:	4611      	mov	r1, r2
 80055b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <MGPIO_SetPinValue+0x128>)
 80055ba:	400b      	ands	r3, r1
 80055bc:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
                break;
 80055c2:	e04d      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
                break;
 80055c8:	e04a      	b.n	8005660 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTB:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 80055ca:	797b      	ldrb	r3, [r7, #5]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10c      	bne.n	80055ea <MGPIO_SetPinValue+0x9e>
                {
                    SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <MGPIO_SetPinValue+0x12c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	79ba      	ldrb	r2, [r7, #6]
 80055d6:	2101      	movs	r1, #1
 80055d8:	fa01 f202 	lsl.w	r2, r1, r2
 80055dc:	4611      	mov	r1, r2
 80055de:	4a26      	ldr	r2, [pc, #152]	@ (8005678 <MGPIO_SetPinValue+0x12c>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 80055e8:	e03a      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 80055ea:	797b      	ldrb	r3, [r7, #5]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <MGPIO_SetPinValue+0xc0>
                    CLR_BIT(MGPIOB_ODR, Copy_uint8PinID);
 80055f0:	4b21      	ldr	r3, [pc, #132]	@ (8005678 <MGPIO_SetPinValue+0x12c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	79ba      	ldrb	r2, [r7, #6]
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	43d2      	mvns	r2, r2
 80055fe:	4611      	mov	r1, r2
 8005600:	4a1d      	ldr	r2, [pc, #116]	@ (8005678 <MGPIO_SetPinValue+0x12c>)
 8005602:	400b      	ands	r3, r1
 8005604:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
                break;
 800560a:	e029      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
                break;
 8005610:	e026      	b.n	8005660 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTC:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8005612:	797b      	ldrb	r3, [r7, #5]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10c      	bne.n	8005632 <MGPIO_SetPinValue+0xe6>
                {
                    SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8005618:	4b18      	ldr	r3, [pc, #96]	@ (800567c <MGPIO_SetPinValue+0x130>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	79ba      	ldrb	r2, [r7, #6]
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f202 	lsl.w	r2, r1, r2
 8005624:	4611      	mov	r1, r2
 8005626:	4a15      	ldr	r2, [pc, #84]	@ (800567c <MGPIO_SetPinValue+0x130>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005630:	e016      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8005632:	797b      	ldrb	r3, [r7, #5]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <MGPIO_SetPinValue+0x108>
                    CLR_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8005638:	4b10      	ldr	r3, [pc, #64]	@ (800567c <MGPIO_SetPinValue+0x130>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	79ba      	ldrb	r2, [r7, #6]
 800563e:	2101      	movs	r1, #1
 8005640:	fa01 f202 	lsl.w	r2, r1, r2
 8005644:	43d2      	mvns	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <MGPIO_SetPinValue+0x130>)
 800564a:	400b      	ands	r3, r1
 800564c:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
                break;
 8005652:	e005      	b.n	8005660 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
                break;
 8005658:	e002      	b.n	8005660 <MGPIO_SetPinValue+0x114>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
                break;
 800565e:	bf00      	nop
        switch (Copy_uint8PortID)
 8005660:	e001      	b.n	8005666 <MGPIO_SetPinValue+0x11a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	4001080c 	.word	0x4001080c
 8005678:	40010c0c 	.word	0x40010c0c
 800567c:	4001100c 	.word	0x4001100c

08005680 <MGPIO_GetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been read successfully
 * @retval E_NOT_OK: Pin Value has not been read
 */
Std_ReturnType MGPIO_GetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8* P_uint8PinValue)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	603a      	str	r2, [r7, #0]
 800568a:	71fb      	strb	r3, [r7, #7]
 800568c:	460b      	mov	r3, r1
 800568e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]

    if((P_uint8PinValue != NULL_PTR) && (Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d03d      	beq.n	8005716 <MGPIO_GetPinValue+0x96>
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d83a      	bhi.n	8005716 <MGPIO_GetPinValue+0x96>
 80056a0:	79bb      	ldrb	r3, [r7, #6]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d837      	bhi.n	8005716 <MGPIO_GetPinValue+0x96>
    {
        switch(Copy_uint8PortID)
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d022      	beq.n	80056f2 <MGPIO_GetPinValue+0x72>
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	dc2e      	bgt.n	800570e <MGPIO_GetPinValue+0x8e>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <MGPIO_GetPinValue+0x3a>
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d00e      	beq.n	80056d6 <MGPIO_GetPinValue+0x56>
 80056b8:	e029      	b.n	800570e <MGPIO_GetPinValue+0x8e>
        {
            case MGPIO_PORTA:
            {
                *P_uint8PinValue = GET_BIT(MGPIOA_IDR, Copy_uint8PinID);
 80056ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <MGPIO_GetPinValue+0xa8>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	79bb      	ldrb	r3, [r7, #6]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
                break;
 80056d4:	e01e      	b.n	8005714 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTB:
            {
                *P_uint8PinValue = GET_BIT(MGPIOB_IDR, Copy_uint8PinID);
 80056d6:	4b15      	ldr	r3, [pc, #84]	@ (800572c <MGPIO_GetPinValue+0xac>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	79bb      	ldrb	r3, [r7, #6]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]
                break;
 80056f0:	e010      	b.n	8005714 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTC:
            {
                *P_uint8PinValue = GET_BIT(MGPIOC_IDR, Copy_uint8PinID);
 80056f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005730 <MGPIO_GetPinValue+0xb0>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	79bb      	ldrb	r3, [r7, #6]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]
                break;
 800570c:	e002      	b.n	8005714 <MGPIO_GetPinValue+0x94>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
                break;
 8005712:	bf00      	nop
        switch(Copy_uint8PortID)
 8005714:	e001      	b.n	800571a <MGPIO_GetPinValue+0x9a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010808 	.word	0x40010808
 800572c:	40010c08 	.word	0x40010c08
 8005730:	40011008 	.word	0x40011008

08005734 <MGPIO_ActivatePullUp>:
 * @return Std_ReturnType
 * @retval E_OK: Pull-up has been activated successfully
 * @retval E_NOT_OK: Pull-up has not been activated 
 */
Std_ReturnType MGPIO_ActivatePullUp(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	460a      	mov	r2, r1
 800573e:	71fb      	strb	r3, [r7, #7]
 8005740:	4613      	mov	r3, r2
 8005742:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d837      	bhi.n	80057be <MGPIO_ActivatePullUp+0x8a>
 800574e:	79bb      	ldrb	r3, [r7, #6]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d834      	bhi.n	80057be <MGPIO_ActivatePullUp+0x8a>
    {
        switch(Copy_uint8PortID)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d020      	beq.n	800579c <MGPIO_ActivatePullUp+0x68>
 800575a:	2b02      	cmp	r3, #2
 800575c:	dc2b      	bgt.n	80057b6 <MGPIO_ActivatePullUp+0x82>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <MGPIO_ActivatePullUp+0x34>
 8005762:	2b01      	cmp	r3, #1
 8005764:	d00d      	beq.n	8005782 <MGPIO_ActivatePullUp+0x4e>
 8005766:	e026      	b.n	80057b6 <MGPIO_ActivatePullUp+0x82>
        {
            case MGPIO_PORTA:
            {
                SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005768:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <MGPIO_ActivatePullUp+0x9c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	79ba      	ldrb	r2, [r7, #6]
 800576e:	2101      	movs	r1, #1
 8005770:	fa01 f202 	lsl.w	r2, r1, r2
 8005774:	4611      	mov	r1, r2
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <MGPIO_ActivatePullUp+0x9c>)
 8005778:	430b      	orrs	r3, r1
 800577a:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]
                break;
 8005780:	e01c      	b.n	80057bc <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTB:
            {
                SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <MGPIO_ActivatePullUp+0xa0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	79ba      	ldrb	r2, [r7, #6]
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f202 	lsl.w	r2, r1, r2
 800578e:	4611      	mov	r1, r2
 8005790:	4a10      	ldr	r2, [pc, #64]	@ (80057d4 <MGPIO_ActivatePullUp+0xa0>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
                break;
 800579a:	e00f      	b.n	80057bc <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTC:
            {
                SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 800579c:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <MGPIO_ActivatePullUp+0xa4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	79ba      	ldrb	r2, [r7, #6]
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f202 	lsl.w	r2, r1, r2
 80057a8:	4611      	mov	r1, r2
 80057aa:	4a0b      	ldr	r2, [pc, #44]	@ (80057d8 <MGPIO_ActivatePullUp+0xa4>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
                break;
 80057b4:	e002      	b.n	80057bc <MGPIO_ActivatePullUp+0x88>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
                break;
 80057ba:	bf00      	nop
        switch(Copy_uint8PortID)
 80057bc:	e001      	b.n	80057c2 <MGPIO_ActivatePullUp+0x8e>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	4001080c 	.word	0x4001080c
 80057d4:	40010c0c 	.word	0x40010c0c
 80057d8:	4001100c 	.word	0x4001100c

080057dc <MGPTMR_GetPreloadValue>:
 * @return Std_ReturnType
 * @retval E_OK:                                        Preload value successfully calculated
 * @retval E_NOT_OK:                                    Preload value not calculated 
 */
Std_ReturnType MGPTMR_GetPreloadValue                   (uint32 Copy_uint32PeriodInMs, uint16* P_uint16PreloadValue)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
    if(P_uint16PreloadValue != NULL_PTR)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d013      	beq.n	8005818 <MGPTMR_GetPreloadValue+0x3c>

                                      Time (seconds) * Timer Clock Frequency
            Timer Preload Value = ---------------------------------------------- - 1
                                                Timer Prescalar
        *************************************************************************************************/
        uint32 Loc_uint32TempPreload = (Copy_uint32PeriodInMs * (MGPTMR_CLK_FREQ / (MGPTMR_CLK_PRESCALER * 1000))) - 1;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60bb      	str	r3, [r7, #8]

        /************************************************************************************************* 
            As General Purpose Timers in STM32 are 16-bit counters, the maximum prescalar value is 0xFFFF
        *************************************************************************************************/
        if(Loc_uint32TempPreload <= 0xFFFF)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fe:	d204      	bcs.n	800580a <MGPTMR_GetPreloadValue+0x2e>
        {
            *P_uint16PreloadValue = Loc_uint32TempPreload;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	b29a      	uxth	r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e003      	b.n	8005812 <MGPTMR_GetPreloadValue+0x36>
        }
        else
        {
            *P_uint16PreloadValue = 0xFFFF;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005810:	801a      	strh	r2, [r3, #0]
        }
        Loc_uint8FuncStatus = E_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
 8005816:	e001      	b.n	800581c <MGPTMR_GetPreloadValue+0x40>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <MGPTMR_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Initialized.
 * @retval E_NOT_OK:                Timer not initialized.
 */
Std_ReturnType MGPTMR_Init                              (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
        1) Set Update Event Configuration
    *************************************************************************************************/
    #if MGPTMR_UEV_STATUS == MGPTMR_UEV_ENABLED

        //Enable update event by clearing UDIS "Update Disable" bit
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_UDIS_BIT);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4a3b      	ldr	r2, [pc, #236]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	4939      	ldr	r1, [pc, #228]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005840:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005844:	f022 0202 	bic.w	r2, r2, #2
 8005848:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_UEV_SOURCE == MGPTMR_UEV_SOURCE_ALL
            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_URS_BIT);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4a35      	ldr	r2, [pc, #212]	@ (8005924 <MGPTMR_Init+0xfc>)
 800584e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4933      	ldr	r1, [pc, #204]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800585c:	f022 0204 	bic.w	r2, r2, #4
 8005860:	601a      	str	r2, [r3, #0]
        2) Set One Pulse Mode Configurations
    *************************************************************************************************/
    #if MGPTMR_ONE_PULSE_MODE_STATUS == MGPTMR_ONE_PULSE_MODE_ENABLED
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
    #elif MGPTMR_ONE_PULSE_MODE_STATUS == MGPTMR_ONE_PULSE_MODE_DISABLED
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	4a2f      	ldr	r2, [pc, #188]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	492d      	ldr	r1, [pc, #180]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005874:	f022 0208 	bic.w	r2, r2, #8
 8005878:	601a      	str	r2, [r3, #0]

    /************************************************************************************************* 
        3) Set Counter Alignment and Direction Configuration
    *************************************************************************************************/
    #if MGPTMR_COUNTER_ALLIGNMENT == MGPTMR_EDGE_ALLIGNED_MODE
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT);
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	4a29      	ldr	r2, [pc, #164]	@ (8005924 <MGPTMR_Init+0xfc>)
 800587e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	4927      	ldr	r1, [pc, #156]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005888:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800588c:	f022 0220 	bic.w	r2, r2, #32
 8005890:	601a      	str	r2, [r3, #0]
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT + 1);
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	4a23      	ldr	r2, [pc, #140]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4921      	ldr	r1, [pc, #132]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a8:	601a      	str	r2, [r3, #0]

        #if MGPTMR_COUNTER_DIRECTION == MGPTMR_COUNTER_UPCOUNTER
            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_DIR_BIT);
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	491b      	ldr	r1, [pc, #108]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058bc:	f022 0210 	bic.w	r2, r2, #16
 80058c0:	601a      	str	r2, [r3, #0]
    
    /************************************************************************************************* 
        4) Set Auto-Reload Configuration
    *************************************************************************************************/
    #if MGPTMR_AUTO_RELOAD_STATUS == MGPTMR_AUTO_RELOAD_ENABLED
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_ARPE_BIT);
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	4915      	ldr	r1, [pc, #84]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058d8:	601a      	str	r2, [r3, #0]

    /************************************************************************************************* 
        5) Set Update Interrupt Configuration
    *************************************************************************************************/
    #if MGPTMR_UPDATE_INTERRUPT_STATUS == MGPTMR_UPDATE_INTERRUPT_ENABLED
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> DIER), MGPTMR_DIER_UIE_BIT);
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4a11      	ldr	r2, [pc, #68]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	490f      	ldr	r1, [pc, #60]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	60da      	str	r2, [r3, #12]

    /************************************************************************************************* 
        6) Set Clock Prescaler Configuration
    *************************************************************************************************/
    #if (MGPTMR_CLK_PRESCALER >= 1) || (MGPTMR_CLK_PRESCALER <= 65536)
        GPTMR[Copy_uint32TimerSelect] -> PSC = (uint16)((uint16)(MGPTMR_CLK_PRESCALER) - 1);
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005924 <MGPTMR_Init+0xfc>)
 80058f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80058fe:	629a      	str	r2, [r3, #40]	@ 0x28
    #endif /*MGPTMR_CLK_PRESCALER*/
	
    /************************************************************************************************* 
        7) Clear the Update Interrupt Flag
    *************************************************************************************************/
    CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> SR), MGPTMR_SR_UIF_BIT);
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	4a08      	ldr	r2, [pc, #32]	@ (8005924 <MGPTMR_Init+0xfc>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	4905      	ldr	r1, [pc, #20]	@ (8005924 <MGPTMR_Init+0xfc>)
 800590e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	611a      	str	r2, [r3, #16]

    return E_OK; 
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	20000428 	.word	0x20000428

08005928 <MGPTMR_StartTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Started to Count.
 * @retval E_NOT_OK:                Timer not started.
 */
Std_ReturnType MGPTMR_StartTimer                        (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]
    SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4a0b      	ldr	r2, [pc, #44]	@ (8005964 <MGPTMR_StartTimer+0x3c>)
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	4909      	ldr	r1, [pc, #36]	@ (8005964 <MGPTMR_StartTimer+0x3c>)
 8005940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
    GPTMR[Copy_uint32TimerSelect] -> CNT = 0;
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	4a05      	ldr	r2, [pc, #20]	@ (8005964 <MGPTMR_StartTimer+0x3c>)
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	2200      	movs	r2, #0
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24
    return E_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000428 	.word	0x20000428

08005968 <MGPTMR_StopTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Stopped Counting.
 * @retval E_NOT_OK:                Timer not stopped.
 */
Std_ReturnType MGPTMR_StopTimer                         (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	71fb      	strb	r3, [r7, #7]
    CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	4a08      	ldr	r2, [pc, #32]	@ (8005998 <MGPTMR_StopTimer+0x30>)
 8005976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	4906      	ldr	r1, [pc, #24]	@ (8005998 <MGPTMR_StopTimer+0x30>)
 8005980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    return E_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000428 	.word	0x20000428

0800599c <MGPTMR_SetTimerPeriod>:
 * @return Std_ReturnType
 * @retval E_OK:                    Period Successfully Set
 * @retval E_NOT_OK:                Period not set 
 */
Std_ReturnType MGPTMR_SetTimerPeriod                    (GPTMR_Select_t Copy_uint32TimerSelect, uint32 Copy_uint32PeriodInMs)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
    uint16 Loc_uint16PreloadValue = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	81bb      	strh	r3, [r7, #12]

    /************************************************************************************************* 
                    Get the preload value based on the specified period in milliseconds
    *************************************************************************************************/
    Loc_uint8FuncStatus = MGPTMR_GetPreloadValue(Copy_uint32PeriodInMs, &Loc_uint16PreloadValue);
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	4619      	mov	r1, r3
 80059b6:	6838      	ldr	r0, [r7, #0]
 80059b8:	f7ff ff10 	bl	80057dc <MGPTMR_GetPreloadValue>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]

    /************************************************************************************************* 
                        Check if the preload value was successfully calculated
    *************************************************************************************************/
    if(Loc_uint8FuncStatus == E_OK)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <MGPTMR_SetTimerPeriod+0x3e>
    {
        /************************************************************************************************* 
                    Set the Auto-Reload Register (ARR) with the calculated preload value
        *************************************************************************************************/
        GPTMR[Copy_uint32TimerSelect] -> ARR = Loc_uint16PreloadValue;
 80059c6:	89b9      	ldrh	r1, [r7, #12]
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4a07      	ldr	r2, [pc, #28]	@ (80059e8 <MGPTMR_SetTimerPeriod+0x4c>)
 80059cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d0:	460a      	mov	r2, r1
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c
        Loc_uint8FuncStatus = E_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e001      	b.n	80059de <MGPTMR_SetTimerPeriod+0x42>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000428 	.word	0x20000428

080059ec <MGPTMR_SetTimerUpdateCallbackFunc>:
 * @return Std_ReturnType
 * @retval E_OK:                    Function Successfully Set
 * @retval E_NOT_OK:                Function not set  
 */
Std_ReturnType MGPTMR_SetTimerUpdateCallbackFunc        (GPTMR_Select_t Copy_uint32TimerSelect, ptr_to_func_t P_UpdateCallbackFunc)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
    if(P_UpdateCallbackFunc != NULL_PTR)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <MGPTMR_SetTimerUpdateCallbackFunc+0x22>
    {
        glbl_PCallbackFunc[Copy_uint32TimerSelect] = P_UpdateCallbackFunc;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4906      	ldr	r1, [pc, #24]	@ (8005a20 <MGPTMR_SetTimerUpdateCallbackFunc+0x34>)
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a0c:	e001      	b.n	8005a12 <MGPTMR_SetTimerUpdateCallbackFunc+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	2000086c 	.word	0x2000086c

08005a24 <TIM2_IRQHandler>:
/**
 * @brief: This function represents the interrupt service routine for Timer 2 Interrupts
 * 
 */
void TIM2_IRQHandler(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[0] != NULL_PTR)
 8005a28:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <TIM2_IRQHandler+0x28>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <TIM2_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[0])();
 8005a30:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <TIM2_IRQHandler+0x28>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[0] -> SR), MGPTMR_SR_UIF_BIT);
 8005a36:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <TIM2_IRQHandler+0x2c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <TIM2_IRQHandler+0x2c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	611a      	str	r2, [r3, #16]
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000086c 	.word	0x2000086c
 8005a50:	20000428 	.word	0x20000428

08005a54 <TIM3_IRQHandler>:
/**
 * @brief: This function represents the interrupt service routine for Timer 3 Interrupts
 * 
 */
void TIM3_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[1] != NULL_PTR)
 8005a58:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <TIM3_IRQHandler+0x28>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <TIM3_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[1])();
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <TIM3_IRQHandler+0x28>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[1] -> SR), MGPTMR_SR_UIF_BIT);
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <TIM3_IRQHandler+0x2c>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <TIM3_IRQHandler+0x2c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	611a      	str	r2, [r3, #16]
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	2000086c 	.word	0x2000086c
 8005a80:	20000428 	.word	0x20000428

08005a84 <TIM4_IRQHandler>:
/**
 * @brief: This function represents the interrupt service routine for Timer 4 Interrupts
 * 
 */
void TIM4_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[2] != NULL_PTR)
 8005a88:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <TIM4_IRQHandler+0x28>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <TIM4_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[2])();
 8005a90:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <TIM4_IRQHandler+0x28>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[2] -> SR), MGPTMR_SR_UIF_BIT);
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <TIM4_IRQHandler+0x2c>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <TIM4_IRQHandler+0x2c>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	bf00      	nop
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000086c 	.word	0x2000086c
 8005ab0:	20000428 	.word	0x20000428

08005ab4 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8005ab4:	b5b0      	push	{r4, r5, r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	82fb      	strh	r3, [r7, #22]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 8005ac6:	4b57      	ldr	r3, [pc, #348]	@ (8005c24 <MCAL_I2C_Init+0x170>)
 8005ac8:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 8005aca:	2300      	movs	r3, #0
 8005acc:	81fb      	strh	r3, [r7, #14]

	

	//Enable RCC Clock
	if (I2Cx == I2C1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a55      	ldr	r2, [pc, #340]	@ (8005c28 <MCAL_I2C_Init+0x174>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10e      	bne.n	8005af4 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8005ad6:	4a55      	ldr	r2, [pc, #340]	@ (8005c2c <MCAL_I2C_Init+0x178>)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	4614      	mov	r4, r2
 8005adc:	461d      	mov	r5, r3
 8005ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ae6:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 8005aea:	2115      	movs	r1, #21
 8005aec:	2002      	movs	r0, #2
 8005aee:	f000 fbc5 	bl	800627c <MRCC_EnablePeripheralClock>
 8005af2:	e00e      	b.n	8005b12 <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8005af4:	4b4d      	ldr	r3, [pc, #308]	@ (8005c2c <MCAL_I2C_Init+0x178>)
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	f103 0418 	add.w	r4, r3, #24
 8005afc:	4615      	mov	r5, r2
 8005afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005b06:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 8005b0a:	2116      	movs	r1, #22
 8005b0c:	2002      	movs	r0, #2
 8005b0e:	f000 fbb5 	bl	800627c <MRCC_EnablePeripheralClock>
	}
	MCAL_I2C_RESET();
 8005b12:	f000 f893 	bl	8005c3c <MCAL_I2C_RESET>
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d178      	bne.n	8005c10 <MCAL_I2C_Init+0x15c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8005b24:	8afb      	ldrh	r3, [r7, #22]
 8005b26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b2a:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c24 <MCAL_I2C_Init+0x170>)
 8005b2e:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4a3f      	ldr	r2, [pc, #252]	@ (8005c30 <MCAL_I2C_Init+0x17c>)
 8005b34:	fba2 2303 	umull	r2, r3, r2, r3
 8005b38:	0c9b      	lsrs	r3, r3, #18
 8005b3a:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 8005b3c:	8afa      	ldrh	r2, [r7, #22]
 8005b3e:	8abb      	ldrh	r3, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 8005b44:	8afa      	ldrh	r2, [r7, #22]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a35      	ldr	r2, [pc, #212]	@ (8005c34 <MCAL_I2C_Init+0x180>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <MCAL_I2C_Init+0xba>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a33      	ldr	r2, [pc, #204]	@ (8005c38 <MCAL_I2C_Init+0x184>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d112      	bne.n	8005b94 <MCAL_I2C_Init+0xe0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8005b7c:	8afa      	ldrh	r2, [r7, #22]
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8005b84:	8afa      	ldrh	r2, [r7, #22]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8005b8a:	8abb      	ldrh	r3, [r7, #20]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	461a      	mov	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	8a1a      	ldrh	r2, [r3, #16]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	8a5b      	ldrh	r3, [r3, #18]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	88db      	ldrh	r3, [r3, #6]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	889b      	ldrh	r3, [r3, #4]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	8afb      	ldrh	r3, [r7, #22]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8005bbc:	8afa      	ldrh	r2, [r7, #22]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	891b      	ldrh	r3, [r3, #8]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10d      	bne.n	8005bea <MCAL_I2C_Init+0x136>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	899b      	ldrh	r3, [r3, #12]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	b21a      	sxth	r2, r3
 8005bda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b21b      	sxth	r3, r3
 8005be2:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8005be4:	8afa      	ldrh	r2, [r7, #22]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 8005bea:	2300      	movs	r3, #0
 8005bec:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	895b      	ldrh	r3, [r3, #10]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	b21a      	sxth	r2, r3
 8005bf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	b21b      	sxth	r3, r3
 8005bfe:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	89da      	ldrh	r2, [r3, #14]
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8005c0a:	8afa      	ldrh	r2, [r7, #22]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}
 8005c24:	007a1200 	.word	0x007a1200
 8005c28:	40005400 	.word	0x40005400
 8005c2c:	20000878 	.word	0x20000878
 8005c30:	431bde83 	.word	0x431bde83
 8005c34:	0007a120 	.word	0x0007a120
 8005c38:	000186a0 	.word	0x000186a0

08005c3c <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 8005c40:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <MCAL_I2C_RESET+0x48>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0f      	ldr	r2, [pc, #60]	@ (8005c84 <MCAL_I2C_RESET+0x48>)
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c4a:	6013      	str	r3, [r2, #0]
	MRCC_APB1RSTR |= (1 << 21);
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <MCAL_I2C_RESET+0x4c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0d      	ldr	r2, [pc, #52]	@ (8005c88 <MCAL_I2C_RESET+0x4c>)
 8005c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c56:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c5c:	f000 ff48 	bl	8006af0 <MSTK_uint8Delay>
	MRCC_APB1RSTR &= ~(1 << 21);
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <MCAL_I2C_RESET+0x4c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a08      	ldr	r2, [pc, #32]	@ (8005c88 <MCAL_I2C_RESET+0x4c>)
 8005c66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c6a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <MCAL_I2C_RESET+0x48>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a04      	ldr	r2, [pc, #16]	@ (8005c84 <MCAL_I2C_RESET+0x48>)
 8005c72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c76:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005c78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c7c:	f000 ff38 	bl	8006af0 <MSTK_uint8Delay>
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40005400 	.word	0x40005400
 8005c88:	40021010 	.word	0x40021010

08005c8c <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a10      	ldr	r2, [pc, #64]	@ (8005cd8 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10a      	bne.n	8005cb2 <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8005c9c:	220e      	movs	r2, #14
 8005c9e:	2106      	movs	r1, #6
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7ff fb6d 	bl	8005380 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8005ca6:	220e      	movs	r2, #14
 8005ca8:	2107      	movs	r1, #7
 8005caa:	2001      	movs	r0, #1
 8005cac:	f7ff fb68 	bl	8005380 <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8005cb0:	e00d      	b.n	8005cce <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a09      	ldr	r2, [pc, #36]	@ (8005cdc <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d109      	bne.n	8005cce <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005cba:	220d      	movs	r2, #13
 8005cbc:	210a      	movs	r1, #10
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f7ff fb5e 	bl	8005380 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005cc4:	220d      	movs	r2, #13
 8005cc6:	210b      	movs	r1, #11
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7ff fb59 	bl	8005380 <MGPIO_SetPinMode>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40005400 	.word	0x40005400
 8005cdc:	40005800 	.word	0x40005800

08005ce0 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	460b      	mov	r3, r1
 8005cee:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f8d3 	bl	8005ea8 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005d02:	bf00      	nop
 8005d04:	2101      	movs	r1, #1
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8f6 	bl	8005ef8 <I2C_GetFlagStatus>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f8      	beq.n	8005d04 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	2200      	movs	r2, #0
 8005d16:	4619      	mov	r1, r3
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f973 	bl	8006004 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005d1e:	bf00      	nop
 8005d20:	2102      	movs	r1, #2
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f8e8 	bl	8005ef8 <I2C_GetFlagStatus>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f8      	beq.n	8005d20 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8005d2e:	bf00      	nop
 8005d30:	4918      	ldr	r1, [pc, #96]	@ (8005d94 <MCAL_I2C_MASTER_TX+0xb4>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f8e0 	bl	8005ef8 <I2C_GetFlagStatus>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f8      	beq.n	8005d30 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e017      	b.n	8005d74 <MCAL_I2C_MASTER_TX+0x94>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8005d44:	bf00      	nop
 8005d46:	2104      	movs	r1, #4
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f8d5 	bl	8005ef8 <I2C_GetFlagStatus>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f8      	beq.n	8005d46 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i > 0)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dd02      	ble.n	8005d60 <MCAL_I2C_MASTER_TX+0x80>
		{
			delay_micro(100);
 8005d5a:	2064      	movs	r0, #100	@ 0x64
 8005d5c:	f7fd ffee 	bl	8003d3c <delay_micro>
		}
		I2Cx->DR = dataOut[i];
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3301      	adds	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d8e3      	bhi.n	8005d44 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8005d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <MCAL_I2C_MASTER_TX+0xac>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005d84:	2101      	movs	r1, #1
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f95b 	bl	8006042 <I2C_GenerateSTOP>
	}
}
 8005d8c:	bf00      	nop
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	00070080 	.word	0x00070080

08005d98 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start, I2C_SlaveSelect_t slave)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	460b      	mov	r3, r1
 8005da6:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a3d      	ldr	r2, [pc, #244]	@ (8005ea0 <MCAL_I2C_MASTER_RX+0x108>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f86f 	bl	8005ea8 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005dca:	bf00      	nop
 8005dcc:	2101      	movs	r1, #1
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f892 	bl	8005ef8 <I2C_GetFlagStatus>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f8      	beq.n	8005dcc <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4619      	mov	r1, r3
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f90f 	bl	8006004 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005de6:	bf00      	nop
 8005de8:	2102      	movs	r1, #2
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f884 	bl	8005ef8 <I2C_GetFlagStatus>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f8      	beq.n	8005de8 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8005df6:	2101      	movs	r1, #1
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f93d 	bl	8006078 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01c      	beq.n	8005e56 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e011      	b.n	8005e48 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8005e24:	bf00      	nop
 8005e26:	2103      	movs	r1, #3
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f865 	bl	8005ef8 <I2C_GetFlagStatus>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f8      	beq.n	8005e26 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6919      	ldr	r1, [r3, #16]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	b2ca      	uxtb	r2, r1
 8005e40:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	daea      	bge.n	8005e24 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8005e4e:	2100      	movs	r1, #0
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f911 	bl	8006078 <I2C_ACKnowledgeConfig>

	}
	if(slave == I2C_EEPROM)
 8005e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <MCAL_I2C_MASTER_RX+0xce>
		MSTK_uint8Delay(3000);
 8005e5e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005e62:	f000 fe45 	bl	8006af0 <MSTK_uint8Delay>
	if(Stop == With_Stop)
 8005e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <MCAL_I2C_MASTER_RX+0xde>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005e6e:	2101      	movs	r1, #1
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f8e6 	bl	8006042 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8005e76:	7cfa      	ldrb	r2, [r7, #19]
 8005e78:	490a      	ldr	r1, [pc, #40]	@ (8005ea4 <MCAL_I2C_MASTER_RX+0x10c>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	3310      	adds	r3, #16
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e8c:	d103      	bne.n	8005e96 <MCAL_I2C_MASTER_RX+0xfe>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f8f1 	bl	8006078 <I2C_ACKnowledgeConfig>
	}
}
 8005e96:	bf00      	nop
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40005400 	.word	0x40005400
 8005ea4:	20000878 	.word	0x20000878

08005ea8 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8005eb8:	78bb      	ldrb	r3, [r7, #2]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d007      	beq.n	8005ece <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8005ebe:	bf00      	nop
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f818 	bl	8005ef8 <I2C_GetFlagStatus>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f8      	bne.n	8005ec0 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8005ee0:	e005      	b.n	8005eee <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d811      	bhi.n	8005f3c <I2C_GetFlagStatus+0x44>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d86a      	bhi.n	8005ff4 <I2C_GetFlagStatus+0xfc>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <I2C_GetFlagStatus+0x2c>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f47 	.word	0x08005f47
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f77 	.word	0x08005f77
 8005f30:	08005fdd 	.word	0x08005fdd
 8005f34:	08005fc5 	.word	0x08005fc5
 8005f38:	08005fc5 	.word	0x08005fc5
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4a30      	ldr	r2, [pc, #192]	@ (8006000 <I2C_GetFlagStatus+0x108>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d024      	beq.n	8005f8e <I2C_GetFlagStatus+0x96>
 8005f44:	e056      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005f56:	e04d      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	75fb      	strb	r3, [r7, #23]
		break;
 8005f5c:	e04a      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005f6e:	e041      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]
		break;
 8005f74:	e03e      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8005f86:	e035      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]
		break;
 8005f8c:	e032      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005faa:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d102      	bne.n	8005fbe <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8005fbc:	e01a      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
		break;
 8005fc2:	e017      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005fd4:	e00e      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
		break;
 8005fda:	e00b      	b.n	8005ff4 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005fec:	e001      	b.n	8005ff2 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]
		break;
 8005ff2:	bf00      	nop
	}
	}
	return bitstatus;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	00070080 	.word	0x00070080

08006004 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
 8006010:	4613      	mov	r3, r2
 8006012:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8006014:	887b      	ldrh	r3, [r7, #2]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 800601a:	787b      	ldrb	r3, [r7, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8006020:	887b      	ldrh	r3, [r7, #2]
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	807b      	strh	r3, [r7, #2]
 8006028:	e003      	b.n	8006032 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	611a      	str	r2, [r3, #16]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8006060:	e005      	b.n	800606e <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8006096:	e005      	b.n	80060a4 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr
	...

080060b0 <MNVIC_EnableInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK: Peripheral Interrupt is enabled successfully
 * @retval E_NOT_OK: Peripheral Interrupt is not enabled 
 */
Std_ReturnType MNVIC_EnableInterrupt(MNVIC_InterruptType Copy_uint32InterruptNumber)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < 32)
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	2b1f      	cmp	r3, #31
 80060c2:	d80c      	bhi.n	80060de <MNVIC_EnableInterrupt+0x2e>
    {
        SET_BIT((NVIC -> ISER[0]), Copy_uint32InterruptNumber);
 80060c4:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <MNVIC_EnableInterrupt+0x64>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	79fa      	ldrb	r2, [r7, #7]
 80060ca:	2101      	movs	r1, #1
 80060cc:	fa01 f202 	lsl.w	r2, r1, r2
 80060d0:	4611      	mov	r1, r2
 80060d2:	4a10      	ldr	r2, [pc, #64]	@ (8006114 <MNVIC_EnableInterrupt+0x64>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	e014      	b.n	8006108 <MNVIC_EnableInterrupt+0x58>
    }
    else if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80060e2:	d80f      	bhi.n	8006104 <MNVIC_EnableInterrupt+0x54>
    {
        Copy_uint32InterruptNumber -= 32;
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	3b20      	subs	r3, #32
 80060e8:	71fb      	strb	r3, [r7, #7]
        SET_BIT((NVIC -> ISER[1]), Copy_uint32InterruptNumber);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <MNVIC_EnableInterrupt+0x64>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	79fa      	ldrb	r2, [r7, #7]
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f202 	lsl.w	r2, r1, r2
 80060f6:	4611      	mov	r1, r2
 80060f8:	4a06      	ldr	r2, [pc, #24]	@ (8006114 <MNVIC_EnableInterrupt+0x64>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6053      	str	r3, [r2, #4]
        Loc_uint8FuncStatus = E_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	e001      	b.n	8006108 <MNVIC_EnableInterrupt+0x58>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	e000e100 	.word	0xe000e100

08006118 <MNVIC_SetInterruptPriority>:
 * @return Std_ReturnType
 * @retval E_OK: Priority has been set successfully
 * @retval E_NOT_OK: Priority has not been set  
 */
Std_ReturnType MNVIC_SetInterruptPriority(MNVIC_InterruptType Copy_uint32InterruptNumber, uint8 Copy_uint8GroupPriority, uint8 Copy_uint8SubGroupPriority)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
 8006122:	460b      	mov	r3, r1
 8006124:	71bb      	strb	r3, [r7, #6]
 8006126:	4613      	mov	r3, r2
 8006128:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b3b      	cmp	r3, #59	@ 0x3b
 8006132:	d84e      	bhi.n	80061d2 <MNVIC_SetInterruptPriority+0xba>

                                             -----------------------------------
                                            |     Priority    ||||||||||||||||||                 
                                             -----------------------------------
        */
        uint16 Loc_uint16AIRCRPriorityGroupVal = (uint16)(MSCB_AIRCR & (0xFFFF));
 8006134:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <MNVIC_SetInterruptPriority+0xcc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	81bb      	strh	r3, [r7, #12]
        uint8 Loc_uint8PriorityValue = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	72fb      	strb	r3, [r7, #11]

        switch(Loc_uint16AIRCRPriorityGroupVal)
 800613e:	89bb      	ldrh	r3, [r7, #12]
 8006140:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006144:	d038      	beq.n	80061b8 <MNVIC_SetInterruptPriority+0xa0>
 8006146:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800614a:	dc3f      	bgt.n	80061cc <MNVIC_SetInterruptPriority+0xb4>
 800614c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006150:	d019      	beq.n	8006186 <MNVIC_SetInterruptPriority+0x6e>
 8006152:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006156:	dc39      	bgt.n	80061cc <MNVIC_SetInterruptPriority+0xb4>
 8006158:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800615c:	d013      	beq.n	8006186 <MNVIC_SetInterruptPriority+0x6e>
 800615e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006162:	dc33      	bgt.n	80061cc <MNVIC_SetInterruptPriority+0xb4>
 8006164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006168:	d003      	beq.n	8006172 <MNVIC_SetInterruptPriority+0x5a>
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616e:	d00a      	beq.n	8006186 <MNVIC_SetInterruptPriority+0x6e>
 8006170:	e02c      	b.n	80061cc <MNVIC_SetInterruptPriority+0xb4>
        {
            case MNVIC_PRIORITY_GROUP_4_SUB_0:
            {
                Loc_uint8PriorityValue = (Copy_uint8GroupPriority << 4);
 8006172:	79bb      	ldrb	r3, [r7, #6]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8006178:	4a1b      	ldr	r2, [pc, #108]	@ (80061e8 <MNVIC_SetInterruptPriority+0xd0>)
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	4413      	add	r3, r2
 800617e:	7afa      	ldrb	r2, [r7, #11]
 8006180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8006184:	e027      	b.n	80061d6 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_3_SUB_1:
            case MNVIC_PRIORITY_GROUP_2_SUB_2:
            case MNVIC_PRIORITY_GROUP_1_SUB_3:
            {
                Loc_uint8PriorityValue = ((Copy_uint8SubGroupPriority) | (Copy_uint8GroupPriority << ((Loc_uint16AIRCRPriorityGroupVal - (uint16)MNVIC_PRIORITY_GROUP_4_SUB_0) / 0x100)));
 8006186:	79ba      	ldrb	r2, [r7, #6]
 8006188:	89bb      	ldrh	r3, [r7, #12]
 800618a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	da00      	bge.n	8006194 <MNVIC_SetInterruptPriority+0x7c>
 8006192:	33ff      	adds	r3, #255	@ 0xff
 8006194:	121b      	asrs	r3, r3, #8
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	b25a      	sxtb	r2, r3
 800619c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue << 4;
 80061a6:	4910      	ldr	r1, [pc, #64]	@ (80061e8 <MNVIC_SetInterruptPriority+0xd0>)
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	7afa      	ldrb	r2, [r7, #11]
 80061ac:	0112      	lsls	r2, r2, #4
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	440b      	add	r3, r1
 80061b2:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 80061b6:	e00e      	b.n	80061d6 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_0_SUB_4:
            {
                Loc_uint8PriorityValue = (Copy_uint8SubGroupPriority << 4);
 80061b8:	797b      	ldrb	r3, [r7, #5]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 80061be:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <MNVIC_SetInterruptPriority+0xd0>)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4413      	add	r3, r2
 80061c4:	7afa      	ldrb	r2, [r7, #11]
 80061c6:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 80061ca:	e004      	b.n	80061d6 <MNVIC_SetInterruptPriority+0xbe>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
                break;
 80061d0:	e001      	b.n	80061d6 <MNVIC_SetInterruptPriority+0xbe>
        }

    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000ed0c 	.word	0xe000ed0c
 80061e8:	e000e100 	.word	0xe000e100

080061ec <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 80061f0:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <MRCC_InitClock+0x88>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006274 <MRCC_InitClock+0x88>)
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061fa:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 80061fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006274 <MRCC_InitClock+0x88>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <MRCC_InitClock+0x88>)
 8006202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006206:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8006208:	bf00      	nop
 800620a:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <MRCC_InitClock+0x88>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f9      	beq.n	800620a <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8006216:	4b18      	ldr	r3, [pc, #96]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a17      	ldr	r2, [pc, #92]	@ (8006278 <MRCC_InitClock+0x8c>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8006222:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006228:	f023 0302 	bic.w	r3, r3, #2
 800622c:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 800622e:	4b12      	ldr	r3, [pc, #72]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a11      	ldr	r2, [pc, #68]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006238:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <MRCC_InitClock+0x8c>)
 800623c:	4a0e      	ldr	r2, [pc, #56]	@ (8006278 <MRCC_InitClock+0x8c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006248:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800624c:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006250:	4a09      	ldr	r2, [pc, #36]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8006256:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a07      	ldr	r2, [pc, #28]	@ (8006278 <MRCC_InitClock+0x8c>)
 800625c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006260:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8006262:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <MRCC_InitClock+0x8c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6013      	str	r3, [r2, #0]

    return E_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	40021000 	.word	0x40021000
 8006278:	40021004 	.word	0x40021004

0800627c <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	460a      	mov	r2, r1
 8006286:	71fb      	strb	r3, [r7, #7]
 8006288:	4613      	mov	r3, r2
 800628a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d020      	beq.n	80062d8 <MRCC_EnablePeripheralClock+0x5c>
 8006296:	2b03      	cmp	r3, #3
 8006298:	dc2b      	bgt.n	80062f2 <MRCC_EnablePeripheralClock+0x76>
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <MRCC_EnablePeripheralClock+0x28>
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d00d      	beq.n	80062be <MRCC_EnablePeripheralClock+0x42>
 80062a2:	e026      	b.n	80062f2 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 80062a4:	4b17      	ldr	r3, [pc, #92]	@ (8006304 <MRCC_EnablePeripheralClock+0x88>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	79ba      	ldrb	r2, [r7, #6]
 80062aa:	2101      	movs	r1, #1
 80062ac:	fa01 f202 	lsl.w	r2, r1, r2
 80062b0:	4611      	mov	r1, r2
 80062b2:	4a14      	ldr	r2, [pc, #80]	@ (8006304 <MRCC_EnablePeripheralClock+0x88>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]
            break;
 80062bc:	e01c      	b.n	80062f8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 80062be:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <MRCC_EnablePeripheralClock+0x8c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	79ba      	ldrb	r2, [r7, #6]
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ca:	4611      	mov	r1, r2
 80062cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006308 <MRCC_EnablePeripheralClock+0x8c>)
 80062ce:	430b      	orrs	r3, r1
 80062d0:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
            break;
 80062d6:	e00f      	b.n	80062f8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 80062d8:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <MRCC_EnablePeripheralClock+0x90>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	79ba      	ldrb	r2, [r7, #6]
 80062de:	2101      	movs	r1, #1
 80062e0:	fa01 f202 	lsl.w	r2, r1, r2
 80062e4:	4611      	mov	r1, r2
 80062e6:	4a09      	ldr	r2, [pc, #36]	@ (800630c <MRCC_EnablePeripheralClock+0x90>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
            break;
 80062f0:	e002      	b.n	80062f8 <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
            break;
 80062f6:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	40021014 	.word	0x40021014
 8006308:	4002101c 	.word	0x4002101c
 800630c:	40021018 	.word	0x40021018

08006310 <MRTC_CalculateSeconds>:
 * @return Std_ReturnType
 * @retval E_OK:                        Calculation Success
 * @retval E_NOT_OK:                    Calculation Fail 
 */
Std_ReturnType MRTC_CalculateSeconds(Sdate_t* P_SDate, Stime_t* P_STime, uint32* P_uint32Seconds)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b09a      	sub	sp, #104	@ 0x68
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
    struct tm time = {};
 800631c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006320:	2224      	movs	r2, #36	@ 0x24
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f001 ff60 	bl	80081ea <memset>
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d03b      	beq.n	80063ae <MRTC_CalculateSeconds+0x9e>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d038      	beq.n	80063ae <MRTC_CalculateSeconds+0x9e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d035      	beq.n	80063ae <MRTC_CalculateSeconds+0x9e>
    {
        struct tm Loc_SspecificTime = {0};
 8006342:	f107 0310 	add.w	r3, r7, #16
 8006346:	2224      	movs	r2, #36	@ 0x24
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f001 ff4d 	bl	80081ea <memset>

        /************************************************************************************************* 
            1. Set the tm structure fields based on the input date and time
        *************************************************************************************************/
        Loc_SspecificTime.tm_year = (P_SDate -> m_years) - 1900;    //year since 1900
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mon = (P_SDate -> m_months) - 1;       //Month (0 ---> 11) (Jan = 0)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	789b      	ldrb	r3, [r3, #2]
 800635e:	3b01      	subs	r3, #1
 8006360:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_mday = (P_SDate -> m_days);            //Day (1 ---> 31)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	78db      	ldrb	r3, [r3, #3]
 8006366:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_hour = (P_STime -> m_hours);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_min = (P_STime -> m_minutes);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	617b      	str	r3, [r7, #20]
        Loc_SspecificTime.tm_sec = (P_STime -> m_seconds);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	613b      	str	r3, [r7, #16]

        /************************************************************************************************* 
            2. Convert the tm structure to time_t
        *************************************************************************************************/
        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f002 f98a 	bl	8008698 <mktime>
 8006384:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58

        /************************************************************************************************* 
            3. Check if the conversion was successful
        *************************************************************************************************/
        if (Loc_SspecificTime_t != (time_t)(-1)) {
 8006388:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	bf08      	it	eq
 8006392:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8006396:	d006      	beq.n	80063a6 <MRTC_CalculateSeconds+0x96>
            *P_uint32Seconds = (uint32)Loc_SspecificTime_t;
 8006398:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    {
 80063a4:	e006      	b.n	80063b4 <MRTC_CalculateSeconds+0xa4>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    {
 80063ac:	e002      	b.n	80063b4 <MRTC_CalculateSeconds+0xa4>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }
    return Loc_uint8FuncStatus;
 80063b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3768      	adds	r7, #104	@ 0x68
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <MRTC_CalculateDateTime>:
 * @return Std_ReturnType
 * @retval E_OK:                        Calculation Success
 * @retval E_NOT_OK:                    Calculation Fail
 */
Std_ReturnType MRTC_CalculateDateTime(uint32* P_uint32Seconds, Sdate_t* P_SDate, Stime_t* P_STime)
{
 80063c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063c4:	b098      	sub	sp, #96	@ 0x60
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d06b      	beq.n	80064b2 <MRTC_CalculateDateTime+0xf2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d068      	beq.n	80064b2 <MRTC_CalculateDateTime+0xf2>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d065      	beq.n	80064b2 <MRTC_CalculateDateTime+0xf2>
    {
        /************************************************************************************************* 
            1. Convert input seconds to time_t
        *************************************************************************************************/
        time_t Loc_tInputTime = (time_t)(*P_uint32Seconds);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	4698      	mov	r8, r3
 80063ee:	4691      	mov	r9, r2
 80063f0:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50
        
        /************************************************************************************************* 
            2. Set the tm structure fields based on the global reference date and time
        *************************************************************************************************/
        struct tm Loc_SspecificTime = {0};
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	2224      	movs	r2, #36	@ 0x24
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fef4 	bl	80081ea <memset>
        Loc_SspecificTime.tm_year = (glbl_SReferenceDate . m_years) - 1900;     //year since 1900
 8006402:	4b31      	ldr	r3, [pc, #196]	@ (80064c8 <MRTC_CalculateDateTime+0x108>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
        Loc_SspecificTime.tm_mon = (glbl_SReferenceDate . m_months) - 1;        //Month (0 ---> 11) (Jan = 0)
 800640e:	4b2e      	ldr	r3, [pc, #184]	@ (80064c8 <MRTC_CalculateDateTime+0x108>)
 8006410:	789b      	ldrb	r3, [r3, #2]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mday = (glbl_SReferenceDate . m_days);             //Day (1 ---> 31)
 8006418:	4b2b      	ldr	r3, [pc, #172]	@ (80064c8 <MRTC_CalculateDateTime+0x108>)
 800641a:	78db      	ldrb	r3, [r3, #3]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_hour = (glbl_SReferenceTime . m_hours);
 8006420:	4b2a      	ldr	r3, [pc, #168]	@ (80064cc <MRTC_CalculateDateTime+0x10c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_min = (glbl_SReferenceTime . m_minutes);
 8006428:	4b28      	ldr	r3, [pc, #160]	@ (80064cc <MRTC_CalculateDateTime+0x10c>)
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_sec = (glbl_SReferenceTime . m_seconds);
 8006430:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <MRTC_CalculateDateTime+0x10c>)
 8006432:	789b      	ldrb	r3, [r3, #2]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	617b      	str	r3, [r7, #20]

        /************************************************************************************************* 
            3. Convert the tm structure to time_t
        *************************************************************************************************/
        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	4618      	mov	r0, r3
 800643e:	f002 f92b 	bl	8008698 <mktime>
 8006442:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

        /************************************************************************************************* 
            4. Calculate the sum of input time and reference time in order to have the total number of
                seconds since January 1, 1970
        *************************************************************************************************/
        time_t Loc_tSumTime = Loc_tInputTime + Loc_SspecificTime_t;
 8006446:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800644a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800644e:	1884      	adds	r4, r0, r2
 8006450:	eb41 0503 	adc.w	r5, r1, r3
 8006454:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38

        /************************************************************************************************* 
            5. Convert the summed time back to broken-down time (years/months/days hours/minutes/seconds)
        *************************************************************************************************/
        struct tm* Loc_PBrokenTime = localtime(&Loc_tSumTime);
 8006458:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800645c:	4618      	mov	r0, r3
 800645e:	f001 ff3b 	bl	80082d8 <localtime>
 8006462:	6478      	str	r0, [r7, #68]	@ 0x44

        /************************************************************************************************* 
            6. Store the result in the output date and time structures
        *************************************************************************************************/
        P_SDate -> m_years = (Loc_PBrokenTime -> tm_year) + 1900;
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800646e:	b29a      	uxth	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	801a      	strh	r2, [r3, #0]
        P_SDate -> m_months = (Loc_PBrokenTime -> tm_mon) + 1;
 8006474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	709a      	strb	r2, [r3, #2]
        P_SDate -> m_days = (Loc_PBrokenTime -> tm_mday);
 8006482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	70da      	strb	r2, [r3, #3]
        P_STime -> m_hours = Loc_PBrokenTime -> tm_hour;
 800648c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	701a      	strb	r2, [r3, #0]
        P_STime -> m_minutes = Loc_PBrokenTime -> tm_min;
 8006496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	705a      	strb	r2, [r3, #1]
        P_STime ->m_seconds = Loc_PBrokenTime -> tm_sec;
 80064a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	709a      	strb	r2, [r3, #2]

        Loc_uint8FuncStatus = E_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    {
 80064b0:	e002      	b.n	80064b8 <MRTC_CalculateDateTime+0xf8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }
    return Loc_uint8FuncStatus;
 80064b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3760      	adds	r7, #96	@ 0x60
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064c6:	bf00      	nop
 80064c8:	20000434 	.word	0x20000434
 80064cc:	200008a8 	.word	0x200008a8

080064d0 <MRTC_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                RTC is Successfully initialized
 * @retval E_NOT_OK:            RTC is not initialized 
 */
Std_ReturnType MRTC_Init(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80064d6:	2301      	movs	r3, #1
 80064d8:	71fb      	strb	r3, [r7, #7]
    
    /************************************************************************************************* 
        1. Enable Power Control Clock in order to access backup and RTC Registers
    *************************************************************************************************/
    SET_BIT(MRCC_APB1ENR_R, MRCC_APB1ENR_PWREN_BIT);
 80064da:	4b37      	ldr	r3, [pc, #220]	@ (80065b8 <MRTC_Init+0xe8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a36      	ldr	r2, [pc, #216]	@ (80065b8 <MRTC_Init+0xe8>)
 80064e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e4:	6013      	str	r3, [r2, #0]
    
    /************************************************************************************************* 
        2. Enable access to backup and RTC Registers
    *************************************************************************************************/
    SET_BIT(MPWR_CR_R, MPWR_CR_DBP_BIT);
 80064e6:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <MRTC_Init+0xec>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a34      	ldr	r2, [pc, #208]	@ (80065bc <MRTC_Init+0xec>)
 80064ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f0:	6013      	str	r3, [r2, #0]
        3. Select RTC Clock Source
    *************************************************************************************************/
    #if MRTC_CLOCK_SOURCE == MRTC_LSE_CLOCK
        
        //Enable external 32KHz Oscillator
        SET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSEON_BIT);
 80064f2:	4b33      	ldr	r3, [pc, #204]	@ (80065c0 <MRTC_Init+0xf0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a32      	ldr	r2, [pc, #200]	@ (80065c0 <MRTC_Init+0xf0>)
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6013      	str	r3, [r2, #0]
        
        //Wait until external 32KHz Oscillator is ready
        while(!(GET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSERDY_BIT)));
 80064fe:	bf00      	nop
 8006500:	4b2f      	ldr	r3, [pc, #188]	@ (80065c0 <MRTC_Init+0xf0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f9      	beq.n	8006500 <MRTC_Init+0x30>
        
        //Set Clock Source of RTC to be Low-speed external clock
        SET_BIT(MRCC_BDCR_R , MRCC_BDCR_RTCSEL_START_BIT);
 800650c:	4b2c      	ldr	r3, [pc, #176]	@ (80065c0 <MRTC_Init+0xf0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2b      	ldr	r2, [pc, #172]	@ (80065c0 <MRTC_Init+0xf0>)
 8006512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006516:	6013      	str	r3, [r2, #0]
        CLR_BIT(MRCC_BDCR_R, (MRCC_BDCR_RTCSEL_START_BIT + 1));
 8006518:	4b29      	ldr	r3, [pc, #164]	@ (80065c0 <MRTC_Init+0xf0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a28      	ldr	r2, [pc, #160]	@ (80065c0 <MRTC_Init+0xf0>)
 800651e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006522:	6013      	str	r3, [r2, #0]
		SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 8006524:	4b26      	ldr	r3, [pc, #152]	@ (80065c0 <MRTC_Init+0xf0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a25      	ldr	r2, [pc, #148]	@ (80065c0 <MRTC_Init+0xf0>)
 800652a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652e:	6013      	str	r3, [r2, #0]
    #endif /*MRTC_CLOCK_SOURCE*/

    /************************************************************************************************* 
        4. Enter RTC Configuration Mode to set RTC Prescalar Value
    *************************************************************************************************/
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006530:	bf00      	nop
 8006532:	4b24      	ldr	r3, [pc, #144]	@ (80065c4 <MRTC_Init+0xf4>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f9      	beq.n	8006532 <MRTC_Init+0x62>
    SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 800653e:	4b21      	ldr	r3, [pc, #132]	@ (80065c4 <MRTC_Init+0xf4>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4a20      	ldr	r2, [pc, #128]	@ (80065c4 <MRTC_Init+0xf4>)
 8006544:	f043 0310 	orr.w	r3, r3, #16
 8006548:	6053      	str	r3, [r2, #4]
    
    //We Set the value of the prescalar to 0x7FFF which indicates that RTC will count every one second
    RTC -> PRLL = 0x7FFF;
 800654a:	4b1e      	ldr	r3, [pc, #120]	@ (80065c4 <MRTC_Init+0xf4>)
 800654c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006550:	60da      	str	r2, [r3, #12]
    
    CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006552:	4b1c      	ldr	r3, [pc, #112]	@ (80065c4 <MRTC_Init+0xf4>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4a1b      	ldr	r2, [pc, #108]	@ (80065c4 <MRTC_Init+0xf4>)
 8006558:	f023 0310 	bic.w	r3, r3, #16
 800655c:	6053      	str	r3, [r2, #4]
    while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 800655e:	bf00      	nop
 8006560:	4b18      	ldr	r3, [pc, #96]	@ (80065c4 <MRTC_Init+0xf4>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f9      	beq.n	8006560 <MRTC_Init+0x90>
        5. Set RTC Second Interrupt Status (Triggers interrupt every one second)
    *************************************************************************************************/
    #if MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_ENABLED
        SET_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
    #elif MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_DISABLED
        CLR_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
 800656c:	4b15      	ldr	r3, [pc, #84]	@ (80065c4 <MRTC_Init+0xf4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a14      	ldr	r2, [pc, #80]	@ (80065c4 <MRTC_Init+0xf4>)
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	6013      	str	r3, [r2, #0]
    #endif /*MRTC_SECOND_INTERRUPT_STATUS*/

    /************************************************************************************************* 
        6. Check for synchronization of RTC Registers
    *************************************************************************************************/
    CLR_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT);
 8006578:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <MRTC_Init+0xf4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4a11      	ldr	r2, [pc, #68]	@ (80065c4 <MRTC_Init+0xf4>)
 800657e:	f023 0308 	bic.w	r3, r3, #8
 8006582:	6053      	str	r3, [r2, #4]
    while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT)));
 8006584:	bf00      	nop
 8006586:	4b0f      	ldr	r3, [pc, #60]	@ (80065c4 <MRTC_Init+0xf4>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f9      	beq.n	8006586 <MRTC_Init+0xb6>

    /************************************************************************************************* 
        7. Enable RTC Clock
    *************************************************************************************************/
    SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <MRTC_Init+0xf0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0a      	ldr	r2, [pc, #40]	@ (80065c0 <MRTC_Init+0xf0>)
 8006598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659c:	6013      	str	r3, [r2, #0]

    MRTC_CalculateSeconds(&glbl_SReferenceDate, &glbl_SReferenceTime, &glbl_uint32ReferenceSeconds);
 800659e:	4a0a      	ldr	r2, [pc, #40]	@ (80065c8 <MRTC_Init+0xf8>)
 80065a0:	490a      	ldr	r1, [pc, #40]	@ (80065cc <MRTC_Init+0xfc>)
 80065a2:	480b      	ldr	r0, [pc, #44]	@ (80065d0 <MRTC_Init+0x100>)
 80065a4:	f7ff feb4 	bl	8006310 <MRTC_CalculateSeconds>

    Loc_uint8FuncStatus = E_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 80065ac:	79fb      	ldrb	r3, [r7, #7]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	4002101c 	.word	0x4002101c
 80065bc:	40007000 	.word	0x40007000
 80065c0:	40021020 	.word	0x40021020
 80065c4:	40002800 	.word	0x40002800
 80065c8:	200008ac 	.word	0x200008ac
 80065cc:	200008a8 	.word	0x200008a8
 80065d0:	20000434 	.word	0x20000434

080065d4 <MRTC_SetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK:                Date and time are successfully set
 * @retval E_NOT_OK:            Date and time are not set
 */
Std_ReturnType MRTC_SetDateAndTime         (Sdate_t* P_SDateToBeSet, Stime_t* P_STimeToBeSet)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeSet != NULL_PTR) && (P_STimeToBeSet != NULL_PTR))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d03d      	beq.n	8006664 <MRTC_SetDateAndTime+0x90>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d03a      	beq.n	8006664 <MRTC_SetDateAndTime+0x90>
    {
        uint32 Loc_uint32SecondsToBeSet = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]

        /************************************************************************************************* 
            1. Calculate Number of Seconds to be set in RTC Counter Register since January 1, 1970
        *************************************************************************************************/
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateSeconds(P_SDateToBeSet, P_STimeToBeSet, &Loc_uint32SecondsToBeSet);
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	461a      	mov	r2, r3
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fe88 	bl	8006310 <MRTC_CalculateSeconds>
 8006600:	4603      	mov	r3, r0
 8006602:	73bb      	strb	r3, [r7, #14]

        if(Loc_uint8FunctStatus == E_OK)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d129      	bne.n	800665e <MRTC_SetDateAndTime+0x8a>
        {
            /************************************************************************************************* 
                2. Calculate number of seconds since reference date and time
            *************************************************************************************************/
            Loc_uint32SecondsToBeSet -= glbl_uint32ReferenceSeconds;
 800660a:	4b1a      	ldr	r3, [pc, #104]	@ (8006674 <MRTC_SetDateAndTime+0xa0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	60bb      	str	r3, [r7, #8]

            /************************************************************************************************* 
                3. Enter Configuration Mode to set the number of seconds in the RTC counter
            *************************************************************************************************/
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006614:	bf00      	nop
 8006616:	4b18      	ldr	r3, [pc, #96]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f9      	beq.n	8006616 <MRTC_SetDateAndTime+0x42>
            SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006622:	4b15      	ldr	r3, [pc, #84]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4a14      	ldr	r2, [pc, #80]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006628:	f043 0310 	orr.w	r3, r3, #16
 800662c:	6053      	str	r3, [r2, #4]
            RTC -> CNTH = (Loc_uint32SecondsToBeSet >> 16);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a11      	ldr	r2, [pc, #68]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	6193      	str	r3, [r2, #24]
            RTC -> CNTL = (Loc_uint32SecondsToBeSet & 0xFFFF);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a0f      	ldr	r2, [pc, #60]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 800663a:	b29b      	uxth	r3, r3
 800663c:	61d3      	str	r3, [r2, #28]
            CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 800663e:	4b0e      	ldr	r3, [pc, #56]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a0d      	ldr	r2, [pc, #52]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 8006644:	f023 0310 	bic.w	r3, r3, #16
 8006648:	6053      	str	r3, [r2, #4]
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 800664a:	bf00      	nop
 800664c:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <MRTC_SetDateAndTime+0xa4>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f9      	beq.n	800664c <MRTC_SetDateAndTime+0x78>

            Loc_uint8FuncStatus = E_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
    {
 800665c:	e004      	b.n	8006668 <MRTC_SetDateAndTime+0x94>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 800665e:	2301      	movs	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
    {
 8006662:	e001      	b.n	8006668 <MRTC_SetDateAndTime+0x94>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200008ac 	.word	0x200008ac
 8006678:	40002800 	.word	0x40002800

0800667c <MRTC_GetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK:                        Date & Time is successfully read
 * @retval E_NOT_OK:                    Date & Time is not read
 */
Std_ReturnType MRTC_GetDateAndTime  (Sdate_t* P_SDateToBeRead, Stime_t* P_STimeToBeRead)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006686:	2301      	movs	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]

    if((P_SDateToBeRead != NULL_PTR) && (P_STimeToBeRead != NULL_PTR))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <MRTC_GetDateAndTime+0x4c>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <MRTC_GetDateAndTime+0x4c>
    {
        /************************************************************************************************* 
            Get Current Number of seconds from RTC Counter and calculate date and time using them
        *************************************************************************************************/
        uint32 Loc_uint32SecondsInReg = ((RTC -> CNTH) << 16) | (RTC -> CNTL);
 8006696:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <MRTC_GetDateAndTime+0x5c>)
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	041a      	lsls	r2, r3, #16
 800669c:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <MRTC_GetDateAndTime+0x5c>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateDateTime(&Loc_uint32SecondsInReg, P_SDateToBeRead, P_STimeToBeRead);
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fe87 	bl	80063c0 <MRTC_CalculateDateTime>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <MRTC_GetDateAndTime+0x46>
        {

            Loc_uint8FuncStatus = E_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
    {
 80066c0:	e004      	b.n	80066cc <MRTC_GetDateAndTime+0x50>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
    {
 80066c6:	e001      	b.n	80066cc <MRTC_GetDateAndTime+0x50>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40002800 	.word	0x40002800

080066dc <RTC_IRQHandler>:
/**
 * @brief: Function that represents the interrupt service routine of RTC interrupt
 * 
 */
void RTC_IRQHandler(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc != NULL_PTR)
 80066e0:	4b07      	ldr	r3, [pc, #28]	@ (8006700 <RTC_IRQHandler+0x24>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <RTC_IRQHandler+0x1e>
    {
        glbl_PCallbackFunc();
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <RTC_IRQHandler+0x24>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4798      	blx	r3
		CLR_BIT(RTC -> CRL, MRTC_CRL_SECF_BIT);
 80066ee:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <RTC_IRQHandler+0x28>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4a04      	ldr	r2, [pc, #16]	@ (8006704 <RTC_IRQHandler+0x28>)
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	6053      	str	r3, [r2, #4]
    }
    else
    {
        /*Do nothing*/
    }
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200008b0 	.word	0x200008b0
 8006704:	40002800 	.word	0x40002800

08006708 <MSCB_SetPriorityGrouping>:
 * @return Std_ReturnType
 * @retval E_OK: Priority Grouping has been set
 * @retval E_NOT_OK: Priority Grouping has not been set   
 */
Std_ReturnType MSCB_SetPriorityGrouping(uint32 Copy_uint32PriorityGrouping)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint32PriorityGrouping)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <MSCB_SetPriorityGrouping+0x6c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d01b      	beq.n	8006754 <MSCB_SetPriorityGrouping+0x4c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <MSCB_SetPriorityGrouping+0x6c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d81d      	bhi.n	8006760 <MSCB_SetPriorityGrouping+0x58>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a14      	ldr	r2, [pc, #80]	@ (8006778 <MSCB_SetPriorityGrouping+0x70>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <MSCB_SetPriorityGrouping+0x4c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a12      	ldr	r2, [pc, #72]	@ (8006778 <MSCB_SetPriorityGrouping+0x70>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d815      	bhi.n	8006760 <MSCB_SetPriorityGrouping+0x58>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a11      	ldr	r2, [pc, #68]	@ (800677c <MSCB_SetPriorityGrouping+0x74>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <MSCB_SetPriorityGrouping+0x4c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a0f      	ldr	r2, [pc, #60]	@ (800677c <MSCB_SetPriorityGrouping+0x74>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d80d      	bhi.n	8006760 <MSCB_SetPriorityGrouping+0x58>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a0e      	ldr	r2, [pc, #56]	@ (8006780 <MSCB_SetPriorityGrouping+0x78>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <MSCB_SetPriorityGrouping+0x4c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a0d      	ldr	r2, [pc, #52]	@ (8006784 <MSCB_SetPriorityGrouping+0x7c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d105      	bne.n	8006760 <MSCB_SetPriorityGrouping+0x58>
        case MSCB_PRIORITY_GROUP_1_SUB_3:
        case MSCB_PRIORITY_GROUP_2_SUB_2:
        case MSCB_PRIORITY_GROUP_3_SUB_1:
        case MSCB_PRIORITY_GROUP_4_SUB_0:
        {
            SCB -> AIRCR = Copy_uint32PriorityGrouping;
 8006754:	4a0c      	ldr	r2, [pc, #48]	@ (8006788 <MSCB_SetPriorityGrouping+0x80>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60d3      	str	r3, [r2, #12]
            Loc_uint8FuncStatus = E_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
            break;
 800675e:	e002      	b.n	8006766 <MSCB_SetPriorityGrouping+0x5e>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
            break;
 8006764:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	05fa0700 	.word	0x05fa0700
 8006778:	05fa0600 	.word	0x05fa0600
 800677c:	05fa0500 	.word	0x05fa0500
 8006780:	05fa0300 	.word	0x05fa0300
 8006784:	05fa0400 	.word	0x05fa0400
 8006788:	e000ed00 	.word	0xe000ed00

0800678c <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				-Support for SPI Full Duplex Master/Slave only  & NSS HW only for slave
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	uint16 tmpreg_CR1 = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	81fb      	strh	r3, [r7, #14]
	uint16 tmpreg_CR2 = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a38      	ldr	r2, [pc, #224]	@ (8006884 <MCAL_SPI_Init+0xf8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d111      	bne.n	80067ca <MCAL_SPI_Init+0x3e>
	{
		Global_SPI_Config1 = *SPI_Config ;
 80067a6:	4a38      	ldr	r2, [pc, #224]	@ (8006888 <MCAL_SPI_Init+0xfc>)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	4614      	mov	r4, r2
 80067ac:	461d      	mov	r5, r3
 80067ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80067b6:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 80067ba:	4b34      	ldr	r3, [pc, #208]	@ (800688c <MCAL_SPI_Init+0x100>)
 80067bc:	4a32      	ldr	r2, [pc, #200]	@ (8006888 <MCAL_SPI_Init+0xfc>)
 80067be:	601a      	str	r2, [r3, #0]
		MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_SPI1_EN);
 80067c0:	210c      	movs	r1, #12
 80067c2:	2003      	movs	r0, #3
 80067c4:	f7ff fd5a 	bl	800627c <MRCC_EnablePeripheralClock>
 80067c8:	e014      	b.n	80067f4 <MCAL_SPI_Init+0x68>

	}else if (SPIx == SPI2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a30      	ldr	r2, [pc, #192]	@ (8006890 <MCAL_SPI_Init+0x104>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d110      	bne.n	80067f4 <MCAL_SPI_Init+0x68>
	{
		Global_SPI_Config2 = *SPI_Config ;
 80067d2:	4a30      	ldr	r2, [pc, #192]	@ (8006894 <MCAL_SPI_Init+0x108>)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4614      	mov	r4, r2
 80067d8:	461d      	mov	r5, r3
 80067da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80067e2:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 80067e6:	4b29      	ldr	r3, [pc, #164]	@ (800688c <MCAL_SPI_Init+0x100>)
 80067e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006894 <MCAL_SPI_Init+0x108>)
 80067ea:	605a      	str	r2, [r3, #4]
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 80067ec:	210e      	movs	r1, #14
 80067ee:	2002      	movs	r0, #2
 80067f0:	f7ff fd44 	bl	800627c <MRCC_EnablePeripheralClock>

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 80067f4:	2340      	movs	r3, #64	@ 0x40
 80067f6:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	881a      	ldrh	r2, [r3, #0]
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	4313      	orrs	r3, r2
 8006800:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	885a      	ldrh	r2, [r3, #2]
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	4313      	orrs	r3, r2
 800680a:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	889a      	ldrh	r2, [r3, #4]
 8006810:	89fb      	ldrh	r3, [r7, #14]
 8006812:	4313      	orrs	r3, r2
 8006814:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88da      	ldrh	r2, [r3, #6]
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	4313      	orrs	r3, r2
 800681e:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	891a      	ldrh	r2, [r3, #8]
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	4313      	orrs	r3, r2
 8006828:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	895a      	ldrh	r2, [r3, #10]
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	4313      	orrs	r3, r2
 8006832:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	899b      	ldrh	r3, [r3, #12]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d105      	bne.n	8006848 <MCAL_SPI_Init+0xbc>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	899a      	ldrh	r2, [r3, #12]
 8006840:	89bb      	ldrh	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	81bb      	strh	r3, [r7, #12]
 8006846:	e004      	b.n	8006852 <MCAL_SPI_Init+0xc6>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	899a      	ldrh	r2, [r3, #12]
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	4313      	orrs	r3, r2
 8006850:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	89da      	ldrh	r2, [r3, #14]
 8006856:	89fb      	ldrh	r3, [r7, #14]
 8006858:	4313      	orrs	r3, r2
 800685a:	81fb      	strh	r3, [r7, #14]
//
//	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 800685c:	89fa      	ldrh	r2, [r7, #14]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 8006862:	89ba      	ldrh	r2, [r7, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
	  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	611a      	str	r2, [r3, #16]
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bdb0      	pop	{r4, r5, r7, pc}
 8006882:	bf00      	nop
 8006884:	40013000 	.word	0x40013000
 8006888:	200008bc 	.word	0x200008bc
 800688c:	200008b4 	.word	0x200008b4
 8006890:	40003800 	.word	0x40003800
 8006894:	200008d4 	.word	0x200008d4

08006898 <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16 *pTxBuffer,enum PollingMechism PollingEn )
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0 ;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a17      	ldr	r2, [pc, #92]	@ (800690c <MCAL_SPI_SendData+0x74>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d102      	bne.n	80068b8 <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
 80068b6:	e005      	b.n	80068c4 <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a15      	ldr	r2, [pc, #84]	@ (8006910 <MCAL_SPI_SendData+0x78>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d101      	bne.n	80068c4 <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_Direction_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_Direction_1LINE_transmit_only) {
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <MCAL_SPI_SendData+0x7c>)
 80068c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d007      	beq.n	80068e2 <MCAL_SPI_SendData+0x4a>
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006914 <MCAL_SPI_SendData+0x7c>)
 80068d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068da:	885b      	ldrh	r3, [r3, #2]
 80068dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068e0:	d10e      	bne.n	8006900 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE));
 80068e8:	bf00      	nop
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f9      	beq.n	80068ea <MCAL_SPI_SendData+0x52>


		SPIx->SPI_DR =  (*pTxBuffer ) ;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	60da      	str	r2, [r3, #12]
	else
	{
		//SPIx->SPI_DR =  (*pTxBuffer ) ;//todo
	}

}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40013000 	.word	0x40013000
 8006910:	40003800 	.word	0x40003800
 8006914:	200008b4 	.word	0x200008b4

08006918 <MCAL_SPI_GPIO_Set_Pins>:




void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	if (SPIx == SPI1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3a      	ldr	r2, [pc, #232]	@ (8006a0c <MCAL_SPI_GPIO_Set_Pins+0xf4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d139      	bne.n	800699c <MCAL_SPI_GPIO_Set_Pins+0x84>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8006928:	4b39      	ldr	r3, [pc, #228]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d11a      	bne.n	8006968 <MCAL_SPI_GPIO_Set_Pins+0x50>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 8006932:	4b37      	ldr	r3, [pc, #220]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	899b      	ldrh	r3, [r3, #12]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d105      	bne.n	8006948 <MCAL_SPI_GPIO_Set_Pins+0x30>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800693c:	2209      	movs	r2, #9
 800693e:	2104      	movs	r1, #4
 8006940:	2000      	movs	r0, #0
 8006942:	f7fe fd1d 	bl	8005380 <MGPIO_SetPinMode>
				break ;
 8006946:	bf00      	nop
			}


			//		PA5 : SPI1_SCK
			//			Master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006948:	2209      	movs	r2, #9
 800694a:	2105      	movs	r1, #5
 800694c:	2000      	movs	r0, #0
 800694e:	f7fe fd17 	bl	8005380 <MGPIO_SetPinMode>


			//		PA6 : SPI1_MISO  (supported only full duplex)
			//			Full duplex / master Input floating

			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_INPUT_FLOATING_MODE);
 8006952:	2204      	movs	r2, #4
 8006954:	2106      	movs	r1, #6
 8006956:	2000      	movs	r0, #0
 8006958:	f7fe fd12 	bl	8005380 <MGPIO_SetPinMode>
			//todo to suport half duplex and simplex


			//		PA7 : SPI1_MOSI
			//			Full duplex / master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800695c:	2209      	movs	r2, #9
 800695e:	2107      	movs	r1, #7
 8006960:	2000      	movs	r0, #0
 8006962:	f7fe fd0d 	bl	8005380 <MGPIO_SetPinMode>
		}


	}

}
 8006966:	e04c      	b.n	8006a02 <MCAL_SPI_GPIO_Set_Pins+0xea>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 8006968:	4b29      	ldr	r3, [pc, #164]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	899b      	ldrh	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <MCAL_SPI_GPIO_Set_Pins+0x64>
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_INPUT_FLOATING_MODE);
 8006972:	2204      	movs	r2, #4
 8006974:	2104      	movs	r1, #4
 8006976:	2000      	movs	r0, #0
 8006978:	f7fe fd02 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_INPUT_FLOATING_MODE);
 800697c:	2204      	movs	r2, #4
 800697e:	2105      	movs	r1, #5
 8006980:	2000      	movs	r0, #0
 8006982:	f7fe fcfd 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006986:	2209      	movs	r2, #9
 8006988:	2106      	movs	r1, #6
 800698a:	2000      	movs	r0, #0
 800698c:	f7fe fcf8 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_INPUT_FLOATING_MODE);
 8006990:	2204      	movs	r2, #4
 8006992:	2107      	movs	r1, #7
 8006994:	2000      	movs	r0, #0
 8006996:	f7fe fcf3 	bl	8005380 <MGPIO_SetPinMode>
}
 800699a:	e032      	b.n	8006a02 <MCAL_SPI_GPIO_Set_Pins+0xea>
	}else if (SPIx == SPI2)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1d      	ldr	r2, [pc, #116]	@ (8006a14 <MCAL_SPI_GPIO_Set_Pins+0xfc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d12e      	bne.n	8006a02 <MCAL_SPI_GPIO_Set_Pins+0xea>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 80069a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d115      	bne.n	80069da <MCAL_SPI_GPIO_Set_Pins+0xc2>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 80069ae:	4b18      	ldr	r3, [pc, #96]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	899b      	ldrh	r3, [r3, #12]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d105      	bne.n	80069c4 <MCAL_SPI_GPIO_Set_Pins+0xac>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80069b8:	2209      	movs	r2, #9
 80069ba:	210c      	movs	r1, #12
 80069bc:	2001      	movs	r0, #1
 80069be:	f7fe fcdf 	bl	8005380 <MGPIO_SetPinMode>
				break ;
 80069c2:	bf00      	nop
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80069c4:	2209      	movs	r2, #9
 80069c6:	210d      	movs	r1, #13
 80069c8:	2001      	movs	r0, #1
 80069ca:	f7fe fcd9 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80069ce:	2209      	movs	r2, #9
 80069d0:	210f      	movs	r1, #15
 80069d2:	2001      	movs	r0, #1
 80069d4:	f7fe fcd4 	bl	8005380 <MGPIO_SetPinMode>
}
 80069d8:	e013      	b.n	8006a02 <MCAL_SPI_GPIO_Set_Pins+0xea>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	899b      	ldrh	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <MCAL_SPI_GPIO_Set_Pins+0xd6>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_INPUT_FLOATING_MODE);
 80069e4:	2204      	movs	r2, #4
 80069e6:	210c      	movs	r1, #12
 80069e8:	2001      	movs	r0, #1
 80069ea:	f7fe fcc9 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_INPUT_FLOATING_MODE);
 80069ee:	2204      	movs	r2, #4
 80069f0:	210d      	movs	r1, #13
 80069f2:	2001      	movs	r0, #1
 80069f4:	f7fe fcc4 	bl	8005380 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80069f8:	2209      	movs	r2, #9
 80069fa:	210f      	movs	r1, #15
 80069fc:	2001      	movs	r0, #1
 80069fe:	f7fe fcbf 	bl	8005380 <MGPIO_SetPinMode>
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40013000 	.word	0x40013000
 8006a10:	200008b4 	.word	0x200008b4
 8006a14:	40003800 	.word	0x40003800

08006a18 <STK_uint8CalculateReloadValue>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValue(uint32 Copy_uint32msTime, uint32* P_uint32ReloadValue)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d014      	beq.n	8006a56 <STK_uint8CalculateReloadValue+0x3e>
    {
        uint32 Loc_uint32ReloadValue = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]
        /************************************************************************************************* 
            We Calculate Reload Value to be set by multiplying time period to be set by the Systick Timer 
                        Clock Frequency (AHB Clock Frequency or AHB Clock Frequency divided by 8)
        *************************************************************************************************/
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32msTime * (STK_AHB_CLOCK_FREQUENCY / 8000)));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	60bb      	str	r3, [r7, #8]
        #endif /*STK_CLOCK_SOURCE*/

        /************************************************************************************************* 
            Since the SysTick Timer is a 24-bit downcounter, Its maximum value to be set is 0xFFFFFF
        *************************************************************************************************/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a42:	d205      	bcs.n	8006a50 <STK_uint8CalculateReloadValue+0x38>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	e004      	b.n	8006a5a <STK_uint8CalculateReloadValue+0x42>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e001      	b.n	8006a5a <STK_uint8CalculateReloadValue+0x42>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006a56:	2301      	movs	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <STK_uint8CalculateReloadValueUs>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValueUs(uint32 Copy_uint32usTime, uint32* P_uint32ReloadValue)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d010      	beq.n	8006a9c <STK_uint8CalculateReloadValueUs+0x36>
    {
        uint32 Loc_uint32ReloadValue = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
        /************************************************************************************************* 
            We Calculate Reload Value to be set by multiplying time period to be set by the Systick Timer 
                        Clock Frequency (AHB Clock Frequency or AHB Clock Frequency divided by 8)
        *************************************************************************************************/
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32usTime * (STK_AHB_CLOCK_FREQUENCY / 8000000)));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60bb      	str	r3, [r7, #8]
        #endif /*STK_CLOCK_SOURCE*/
        
        /************************************************************************************************* 
            Since the SysTick Timer is a 24-bit downcounter, Its maximum value to be set is 0xFFFFFF
        *************************************************************************************************/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a88:	d205      	bcs.n	8006a96 <STK_uint8CalculateReloadValueUs+0x30>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e004      	b.n	8006aa0 <STK_uint8CalculateReloadValueUs+0x3a>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
 8006a9a:	e001      	b.n	8006aa0 <STK_uint8CalculateReloadValueUs+0x3a>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <MSTK_uint8Init>:
 * @return Std_ReturnType
 * @retval E_OK:        SysTick Timer is Successfully initialized
 * @retval E_NOT_OK:    SysTick Timer is not initialized 
 */
Std_ReturnType MSTK_uint8Init(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	71fb      	strb	r3, [r7, #7]

    /************************************************************************************************* 
            1. Initialize Value of LOAD "Reload Value" and VAL "counter" Registers
    *************************************************************************************************/
    STK -> LOAD = 0x000000;
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
    STK -> VAL = 0x000000;
 8006abc:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]

    /************************************************************************************************* 
            2. Select the SysTick Timer Clock Source ((AHB / 8) or AHB)
    *************************************************************************************************/
    #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
        CLR_BIT((STK -> CTRL), STK_CTRL_CLKSOURCE);
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a09      	ldr	r2, [pc, #36]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	6013      	str	r3, [r2, #0]
            3. Set the SysTick Timer Interrupt Status "When Timer Reaches Zero"
    *************************************************************************************************/
    #if STK_INTERRUPT_STATUS == STK_INTERRUPT_ENABLED
        SET_BIT((STK -> CTRL), STK_CTRL_TICKINT);
    #elif STK_INTERRUPT_STATUS == STK_INTERRUPT_DISABLED
        CLR_BIT((STK -> CTRL), STK_CTRL_TICKINT);
 8006ace:	4b07      	ldr	r3, [pc, #28]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a06      	ldr	r2, [pc, #24]	@ (8006aec <MSTK_uint8Init+0x40>)
 8006ad4:	f023 0302 	bic.w	r3, r3, #2
 8006ad8:	6013      	str	r3, [r2, #0]
    #else
        #error "Systick Timer Interrupt Status is not Identified"
    #endif /*STK_INTERRUPT_STATUS*/

    Loc_uint8FuncStatus = E_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8006ade:	79fb      	ldrb	r3, [r7, #7]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	e000e010 	.word	0xe000e010

08006af0 <MSTK_uint8Delay>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8Delay(uint32 Copy_uint32msTime)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60bb      	str	r3, [r7, #8]
    
    /************************************************************************************************* 
            1. Calculate the Reload Value to be set
    *************************************************************************************************/
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValue(Copy_uint32msTime, &Loc_uint32ReloadValue);
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff ff86 	bl	8006a18 <STK_uint8CalculateReloadValue>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73bb      	strb	r3, [r7, #14]
    
    if(Loc_uint8ReloadStatus == E_OK)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d127      	bne.n	8006b66 <MSTK_uint8Delay+0x76>
    {
        /************************************************************************************************* 
            2. Disable SysTick Timer
        *************************************************************************************************/
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006b16:	4b17      	ldr	r3, [pc, #92]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	6013      	str	r3, [r2, #0]

        /************************************************************************************************* 
            3. Make Sure that there is no value in the VAL register
        *************************************************************************************************/
        STK -> VAL = 0x000000;
 8006b22:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	609a      	str	r2, [r3, #8]

        /************************************************************************************************* 
            4. Set the Reload Value
        *************************************************************************************************/
        STK -> LOAD = Loc_uint32ReloadValue;
 8006b28:	4a12      	ldr	r2, [pc, #72]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6053      	str	r3, [r2, #4]

        /************************************************************************************************* 
            5. Start SysTick Timer
        *************************************************************************************************/
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006b2e:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a10      	ldr	r2, [pc, #64]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	6013      	str	r3, [r2, #0]

        /************************************************************************************************* 
            6. Wait Until Counter Reaches Zero
        *************************************************************************************************/
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 8006b3a:	bf00      	nop
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f9      	beq.n	8006b3c <MSTK_uint8Delay+0x4c>

        /************************************************************************************************* 
            7. Disable SysTick Timer and set the registers' values to zero
        *************************************************************************************************/
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a09      	ldr	r2, [pc, #36]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	6013      	str	r3, [r2, #0]

        STK -> VAL = 0x000000;
 8006b54:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 8006b5a:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <MSTK_uint8Delay+0x84>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
 8006b64:	e001      	b.n	8006b6a <MSTK_uint8Delay+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000e010 	.word	0xe000e010

08006b78 <MSTK_uint8DelayUs>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8DelayUs(uint32 Copy_uint32usTime)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60bb      	str	r3, [r7, #8]
    
    /************************************************************************************************* 
            1. Calculate the Reload Value to be set
    *************************************************************************************************/
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValueUs(Copy_uint32usTime, &Loc_uint32ReloadValue);
 8006b88:	f107 0308 	add.w	r3, r7, #8
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff ff69 	bl	8006a66 <STK_uint8CalculateReloadValueUs>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
    
    if(Loc_uint8ReloadStatus == E_OK)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d127      	bne.n	8006bee <MSTK_uint8DelayUs+0x76>
    {
        /************************************************************************************************* 
            2. Disable SysTick Timer
        *************************************************************************************************/
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006b9e:	4b17      	ldr	r3, [pc, #92]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a16      	ldr	r2, [pc, #88]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	6013      	str	r3, [r2, #0]

        /************************************************************************************************* 
            3. Make Sure that there is no value in the VAL register
        *************************************************************************************************/
        STK -> VAL = 0x000000;
 8006baa:	4b14      	ldr	r3, [pc, #80]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	609a      	str	r2, [r3, #8]

        /************************************************************************************************* 
            4. Set the Reload Value
        *************************************************************************************************/
        STK -> LOAD = Loc_uint32ReloadValue;
 8006bb0:	4a12      	ldr	r2, [pc, #72]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6053      	str	r3, [r2, #4]

        /************************************************************************************************* 
            5. Start SysTick Timer
        *************************************************************************************************/
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006bb6:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a10      	ldr	r2, [pc, #64]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	6013      	str	r3, [r2, #0]

        /************************************************************************************************* 
            6. Wait Until Counter Reaches Zero
        *************************************************************************************************/
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 8006bc2:	bf00      	nop
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f9      	beq.n	8006bc4 <MSTK_uint8DelayUs+0x4c>

        /************************************************************************************************* 
            7. Disable SysTick Timer and set the registers' values to zero
        *************************************************************************************************/
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a09      	ldr	r2, [pc, #36]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	6013      	str	r3, [r2, #0]

        STK -> VAL = 0x000000;
 8006bdc:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 8006be2:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <MSTK_uint8DelayUs+0x84>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	e001      	b.n	8006bf2 <MSTK_uint8DelayUs+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	e000e010 	.word	0xe000e010

08006c00 <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 8006c04:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <SysTick_Handler+0x18>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 8006c0c:	4b02      	ldr	r3, [pc, #8]	@ (8006c18 <SysTick_Handler+0x18>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200008ec 	.word	0x200008ec

08006c1c <MUART_Init>:
 * @return Std_ReturnType
 * @retval E_OK:        UART Peripheral is successfully initialized
 * @retval E_NOT_OK:    UART Peripheral is not initialized
 */
Std_ReturnType MUART_Init(MUART_Select_t Copy_UARTChoice)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006c26:	2301      	movs	r3, #1
 8006c28:	74fb      	strb	r3, [r7, #19]
    
    /*************************************************************************************************
                            1. Select the number of data bits (8 or 9)
    *************************************************************************************************/
    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_M_BIT);
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	4a61      	ldr	r2, [pc, #388]	@ (8006db4 <MUART_Init+0x198>)
 8006c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	495f      	ldr	r1, [pc, #380]	@ (8006db4 <MUART_Init+0x198>)
 8006c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c40:	60da      	str	r2, [r3, #12]

    /************************************************************************************************* 
                            2. Set Parity (No parity, even parity or odd parity)
    *************************************************************************************************/
    #if MUART_PARITY_CHOICE == MUART_NO_PARITY
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PCE_BIT);
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	4a5b      	ldr	r2, [pc, #364]	@ (8006db4 <MUART_Init+0x198>)
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	4959      	ldr	r1, [pc, #356]	@ (8006db4 <MUART_Init+0x198>)
 8006c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c58:	60da      	str	r2, [r3, #12]
    #endif

    /************************************************************************************************* 
                            3. Set the number of stop bits (0.5, 1, 1.5 or 2 bits)
    *************************************************************************************************/
    ((UART[Copy_UARTChoice]) -> CR2) &= ~(((uint32) 0b11) << MUART_CR2_STOP_START_BIT);
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	4a55      	ldr	r2, [pc, #340]	@ (8006db4 <MUART_Init+0x198>)
 8006c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	4953      	ldr	r1, [pc, #332]	@ (8006db4 <MUART_Init+0x198>)
 8006c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c6c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006c70:	611a      	str	r2, [r3, #16]
    
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
        ((UART[Copy_UARTChoice]) -> CR2) |= (((uint32) MUART_NO_OF_STOP_BITS) << MUART_CR2_STOP_START_BIT);
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4a4f      	ldr	r2, [pc, #316]	@ (8006db4 <MUART_Init+0x198>)
 8006c76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	494d      	ldr	r1, [pc, #308]	@ (8006db4 <MUART_Init+0x198>)
 8006c7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c82:	6912      	ldr	r2, [r2, #16]
 8006c84:	611a      	str	r2, [r3, #16]
                            4. Set the Tx Complete Interrupt Status (Enabled or Disabled)
    *************************************************************************************************/
    #if MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
    #elif MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_DISABLED
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	4a4a      	ldr	r2, [pc, #296]	@ (8006db4 <MUART_Init+0x198>)
 8006c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	4948      	ldr	r1, [pc, #288]	@ (8006db4 <MUART_Init+0x198>)
 8006c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c9c:	60da      	str	r2, [r3, #12]

    /************************************************************************************************* 
                            5. Set the Rx Complete Interrupt Status (Enabled or Disabled)
    *************************************************************************************************/
    #if MUART_RX_COMPLETE_INT_STATUS == MUART_RX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RXNEIE_BIT);
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	4a44      	ldr	r2, [pc, #272]	@ (8006db4 <MUART_Init+0x198>)
 8006ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	4942      	ldr	r1, [pc, #264]	@ (8006db4 <MUART_Init+0x198>)
 8006cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006cb0:	f042 0220 	orr.w	r2, r2, #32
 8006cb4:	60da      	str	r2, [r3, #12]
        
        Note that the minimum value for baud rate divisor is 1. So, for example, in case the clock
        frequency equals 8MHz, then the maximum allowed baud rate equals 500000 baud/s
    */
    #if (MUART_CLK_FREQ / (16 * MUART_BAUD_RATE)) >= 1
        float32 Loc_float32UARTDIV = (float32)MUART_CLK_FREQ / (16 * MUART_BAUD_RATE);
 8006cb6:	4b40      	ldr	r3, [pc, #256]	@ (8006db8 <MUART_Init+0x19c>)
 8006cb8:	60fb      	str	r3, [r7, #12]
            |                 Mantissa Part              |         Fraction Part             |
            ---------------------------------------------------------------------------------

            which are calculated using the equations below
        */
        uint16 Loc_uint16Mantissa = (uint16)Loc_float32UARTDIV;
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7fa fa40 	bl	8001140 <__aeabi_f2uiz>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	82fb      	strh	r3, [r7, #22]
        uint16 Loc_uint16Fraction = (uint16)(((Loc_float32UARTDIV - Loc_uint16Mantissa) * 16) + 0.5);
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7f9 fffa 	bl	8000cc0 <__aeabi_i2f>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7f9 ff3f 	bl	8000b54 <__aeabi_fsub>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa f843 	bl	8000d68 <__aeabi_fmul>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7f9 fbb9 	bl	800045c <__aeabi_f2d>
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	4b33      	ldr	r3, [pc, #204]	@ (8006dbc <MUART_Init+0x1a0>)
 8006cf0:	f7f9 fa56 	bl	80001a0 <__adddf3>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f7f9 feb6 	bl	8000a6c <__aeabi_d2uiz>
 8006d00:	4603      	mov	r3, r0
 8006d02:	82bb      	strh	r3, [r7, #20]

        if(Loc_uint16Fraction >= 16)
 8006d04:	8abb      	ldrh	r3, [r7, #20]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d905      	bls.n	8006d16 <MUART_Init+0xfa>
        {
            Loc_uint16Fraction -= 16;
 8006d0a:	8abb      	ldrh	r3, [r7, #20]
 8006d0c:	3b10      	subs	r3, #16
 8006d0e:	82bb      	strh	r3, [r7, #20]
            Loc_uint16Mantissa += 1;
 8006d10:	8afb      	ldrh	r3, [r7, #22]
 8006d12:	3301      	adds	r3, #1
 8006d14:	82fb      	strh	r3, [r7, #22]
        }
        ((UART[Copy_UARTChoice]) -> BRR) = (Loc_uint16Fraction << MUART_BRR_FRACTION_START_BIT) | (Loc_uint16Mantissa << MUART_BRR_MANTISSA_START_BIT);
 8006d16:	8aba      	ldrh	r2, [r7, #20]
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	ea42 0103 	orr.w	r1, r2, r3
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	4a24      	ldr	r2, [pc, #144]	@ (8006db4 <MUART_Init+0x198>)
 8006d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d28:	460a      	mov	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]
    #endif /*(MUART_CLK_FREQ / (16 * MUART_BAUD_RATE))*/

    /************************************************************************************************* 
                        7. Enable Tx Buffer, Rx Buffer and Enable UART Peripheral
    *************************************************************************************************/
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TE_BIT);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <MUART_Init+0x198>)
 8006d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	491e      	ldr	r1, [pc, #120]	@ (8006db4 <MUART_Init+0x198>)
 8006d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d3e:	f042 0208 	orr.w	r2, r2, #8
 8006d42:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RE_BIT);
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <MUART_Init+0x198>)
 8006d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	4918      	ldr	r1, [pc, #96]	@ (8006db4 <MUART_Init+0x198>)
 8006d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d56:	f042 0204 	orr.w	r2, r2, #4
 8006d5a:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_UE_BIT);
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <MUART_Init+0x198>)
 8006d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	4912      	ldr	r1, [pc, #72]	@ (8006db4 <MUART_Init+0x198>)
 8006d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d72:	60da      	str	r2, [r3, #12]
	
    /************************************************************************************************* 
                        8. Make Sure that Tx Complete and Rx not empty flags are cleared
    *************************************************************************************************/
	CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	4a0f      	ldr	r2, [pc, #60]	@ (8006db4 <MUART_Init+0x198>)
 8006d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	490c      	ldr	r1, [pc, #48]	@ (8006db4 <MUART_Init+0x198>)
 8006d82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d8a:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	4a09      	ldr	r2, [pc, #36]	@ (8006db4 <MUART_Init+0x198>)
 8006d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	4906      	ldr	r1, [pc, #24]	@ (8006db4 <MUART_Init+0x198>)
 8006d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d9e:	f022 0220 	bic.w	r2, r2, #32
 8006da2:	601a      	str	r2, [r3, #0]
    Loc_uint8FuncStatus = E_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	74fb      	strb	r3, [r7, #19]
    return Loc_uint8FuncStatus;
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000438 	.word	0x20000438
 8006db8:	408ae38e 	.word	0x408ae38e
 8006dbc:	3fe00000 	.word	0x3fe00000

08006dc0 <MUART_TxChar>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully sent
 * @retval E_NOT_OK:    Character not sent 
 */
Std_ReturnType MUART_TxChar(MUART_Select_t Copy_UARTChoice, uint16 Copy_uint16TxChar)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	460a      	mov	r2, r1
 8006dca:	71fb      	strb	r3, [r7, #7]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]

    /************************************************************************************************* 
                        1. Make Sure that Tx Buffer is empty before sending
    *************************************************************************************************/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
 8006dd4:	bf00      	nop
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	@ (8006e34 <MUART_TxChar+0x74>)
 8006dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f6      	beq.n	8006dd6 <MUART_TxChar+0x16>
    /*
        Here, we make sure that data is compatiable with UART number of data bits' configuration 
                set at initialization
    */
    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        (UART[Copy_UARTChoice] -> DR) = Copy_uint16TxChar & ((uint16)(0x00FF));
 8006de8:	88b9      	ldrh	r1, [r7, #4]
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	4a11      	ldr	r2, [pc, #68]	@ (8006e34 <MUART_TxChar+0x74>)
 8006dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df2:	b2ca      	uxtb	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
    #endif /*MUART_NO_OF_DATA_BITS*/
    
    /************************************************************************************************* 
                        3. Wait until transmit is complete
    *************************************************************************************************/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TC_BIT)));
 8006df6:	bf00      	nop
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <MUART_TxChar+0x74>)
 8006dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f6      	beq.n	8006df8 <MUART_TxChar+0x38>

    /************************************************************************************************* 
                        4. Clear Tx Complete Flag
    *************************************************************************************************/
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4a09      	ldr	r2, [pc, #36]	@ (8006e34 <MUART_TxChar+0x74>)
 8006e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	4907      	ldr	r1, [pc, #28]	@ (8006e34 <MUART_TxChar+0x74>)
 8006e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e20:	601a      	str	r2, [r3, #0]

    Loc_uint8FuncStatus = E_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000438 	.word	0x20000438

08006e38 <MUART_RxCharAsynchronous>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully received
 * @retval E_NOT_OK:    Character not received 
 */
Std_ReturnType MUART_RxCharAsynchronous(MUART_Select_t Copy_UARTChoice, uint16* P_uint16RxChar)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
    if(P_uint16RxChar != NULL_PTR)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <MUART_RxCharAsynchronous+0x48>
        /************************************************************************************************* 
                        1. Get Data from Rx buffer
        *************************************************************************************************/
        #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
            #if MUART_PARITY_CHOICE == MUART_NO_PARITY
                *P_uint16RxChar = (((UART[Copy_UARTChoice]) -> DR) & (uint16)(0xFF));
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	4a0f      	ldr	r2, [pc, #60]	@ (8006e90 <MUART_RxCharAsynchronous+0x58>)
 8006e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	801a      	strh	r2, [r3, #0]
        #endif /*MUART_NO_OF_DATA_BITS*/

        /************************************************************************************************* 
                        2. Clear Rx Not Empty Flag
        *************************************************************************************************/
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	4a0a      	ldr	r2, [pc, #40]	@ (8006e90 <MUART_RxCharAsynchronous+0x58>)
 8006e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	4908      	ldr	r1, [pc, #32]	@ (8006e90 <MUART_RxCharAsynchronous+0x58>)
 8006e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e74:	f022 0220 	bic.w	r2, r2, #32
 8006e78:	601a      	str	r2, [r3, #0]

		Loc_uint8FuncStatus = E_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e001      	b.n	8006e84 <MUART_RxCharAsynchronous+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr
 8006e90:	20000438 	.word	0x20000438

08006e94 <MUART_TxString>:
 * @return Std_ReturnType
 * @retval E_OK:        String successfully received
 * @retval E_NOT_OK:    String not received 
 */
Std_ReturnType MUART_TxString(MUART_Select_t Copy_UARTChoice, uint8* P_uint8TxString)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
    if(P_uint8TxString != NULL_PTR)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <MUART_TxString+0x48>
    {
        uint8 Loc_uint8Index = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73bb      	strb	r3, [r7, #14]

        /************************************************************************************************* 
                        Transmit each character in input string until null character is reached
        *************************************************************************************************/
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006eae:	e00c      	b.n	8006eca <MUART_TxString+0x36>
        {
            MUART_TxChar(Copy_UARTChoice, P_uint8TxString[Loc_uint8Index]);
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff ff7e 	bl	8006dc0 <MUART_TxChar>
            Loc_uint8Index++;
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	4413      	add	r3, r2
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ec      	bne.n	8006eb0 <MUART_TxString+0x1c>
        }
        Loc_uint8FuncStatus = E_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
 8006eda:	e001      	b.n	8006ee0 <MUART_TxString+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <MUART_SetRxCompleteCallback>:
 * @return Std_ReturnType
 * @retval E_OK:        Callback Function successfully set
 * @retval E_NOT_OK:    Callback function not set  
 */
Std_ReturnType MUART_SetRxCompleteCallback(MUART_Select_t Copy_UARTChoice, ptr_to_Callback P_RxCompleteCallbackFunc)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
    if(P_RxCompleteCallbackFunc != NULL_PTR)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <MUART_SetRxCompleteCallback+0x26>
    {
        /************************************************************************************************* 
                    Here, We set the function to be executed when the Rx Complete Interrupt of
                                UARTx Occurs
        *************************************************************************************************/
        Glbl_PRxCompleteFunc[Copy_UARTChoice] = P_RxCompleteCallbackFunc;
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	4907      	ldr	r1, [pc, #28]	@ (8006f24 <MUART_SetRxCompleteCallback+0x38>)
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Loc_uint8FuncStatus = E_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e001      	b.n	8006f16 <MUART_SetRxCompleteCallback+0x2a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200008f0 	.word	0x200008f0

08006f28 <MUART_SendIntegerValue>:
 * @return Std_ReturnType
 * @retval E_OK:        Integer Value Successfully Sent
 * @retval E_NOT_OK:    Integer Value not sent   
 */
Std_ReturnType MUART_SendIntegerValue(MUART_Select_t Copy_UARTChoice, uint32 Copy_uint32Value)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	@ 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if(Copy_uint32Value == 0)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <MUART_SendIntegerValue+0x2c>
    {
        /************************************************************************************************* 
                In order to convert an integer value to a character, simply add 48 ('0' character's 
                ASCII Value) to the integer
        *************************************************************************************************/
        MUART_TxChar(Copy_UARTChoice, (Copy_uint32Value + 48));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3330      	adds	r3, #48	@ 0x30
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff ff37 	bl	8006dc0 <MUART_TxChar>
 8006f52:	e051      	b.n	8006ff8 <MUART_SendIntegerValue+0xd0>
    }
    else
    {
        uint32 Loc_uint8TempValue = Copy_uint32Value;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8 Loc_uint8CharArray[20] = {0}, Loc_uint8Count = 0, Loc_uint8Index = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	f107 0310 	add.w	r3, r7, #16
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            1234 % 10 = 4 -------> Convert it to character -------> Add it to the array which will be used
                                                                    to send characters through UART
        2) Then, we divide the number by 10 to get rid of this digit
            (1234 / 10) = 123 "Integer value / Integer value = Integer value"
        *************************************************************************************************/
        while(Loc_uint8TempValue != 0)
 8006f76:	e01d      	b.n	8006fb4 <MUART_SendIntegerValue+0x8c>
        {
            Loc_uint8CharArray[Loc_uint8Count] = ((Loc_uint8TempValue % 10) + 48);
 8006f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7a:	4b24      	ldr	r3, [pc, #144]	@ (800700c <MUART_SendIntegerValue+0xe4>)
 8006f7c:	fba3 2301 	umull	r2, r3, r3, r1
 8006f80:	08da      	lsrs	r2, r3, #3
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	1aca      	subs	r2, r1, r3
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f92:	3230      	adds	r2, #48	@ 0x30
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	3328      	adds	r3, #40	@ 0x28
 8006f98:	443b      	add	r3, r7
 8006f9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
            Loc_uint8TempValue /= 10;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <MUART_SendIntegerValue+0xe4>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            Loc_uint8Count++;
 8006faa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        while(Loc_uint8TempValue != 0)
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1de      	bne.n	8006f78 <MUART_SendIntegerValue+0x50>
        /************************************************************************************************* 
                            We send the characters in the array one by one through UART
            note that the elements in the array has the numbers in opposite order to the original number
                    ex. if the number is 1234, the array will be equal to {'4', '3', '2', '1'}
        *************************************************************************************************/
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fc0:	e014      	b.n	8006fec <MUART_SendIntegerValue+0xc4>
        {
            MUART_TxChar(Copy_UARTChoice, Loc_uint8CharArray[Loc_uint8Count - Loc_uint8Index - 1]);
 8006fc2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006fc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	3328      	adds	r3, #40	@ 0x28
 8006fd0:	443b      	add	r3, r7
 8006fd2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff feef 	bl	8006dc0 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006fe2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d3e4      	bcc.n	8006fc2 <MUART_SendIntegerValue+0x9a>
        }
    }

    Loc_uint8FuncStatus = E_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    return Loc_uint8FuncStatus;
 8006ffe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
}
 8007002:	4618      	mov	r0, r3
 8007004:	3728      	adds	r7, #40	@ 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	cccccccd 	.word	0xcccccccd

08007010 <USART1_IRQHandler>:
 * @brief: 1) This function represents the interrupt service routine of UART 1 Peripheral.
 *         2) Inside the function, we call the corresponding pointer to the function which is set to be executed in
 *            case interrupt occurs
 */
void USART1_IRQHandler(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[0] != NULL_PTR)
 8007014:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <USART1_IRQHandler+0x38>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <USART1_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[0])();
 800701c:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <USART1_IRQHandler+0x38>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
 8007022:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <USART1_IRQHandler+0x3c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	4b08      	ldr	r3, [pc, #32]	@ (800704c <USART1_IRQHandler+0x3c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007030:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <USART1_IRQHandler+0x3c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b04      	ldr	r3, [pc, #16]	@ (800704c <USART1_IRQHandler+0x3c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0220 	bic.w	r2, r2, #32
 8007040:	601a      	str	r2, [r3, #0]
}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200008f0 	.word	0x200008f0
 800704c:	20000438 	.word	0x20000438

08007050 <USART2_IRQHandler>:
 * @brief: 1) This function represents the interrupt service routine of UART 2 Peripheral.
 *         2) Inside the function, we call the corresponding pointer to the function which is set to be executed in
 *            case interrupt occurs
 */
void USART2_IRQHandler(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
	if(Glbl_PRxCompleteFunc[1] != NULL_PTR)
 8007054:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <USART2_IRQHandler+0x38>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <USART2_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[1])();
 800705c:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <USART2_IRQHandler+0x38>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <USART2_IRQHandler+0x3c>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4b08      	ldr	r3, [pc, #32]	@ (800708c <USART2_IRQHandler+0x3c>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007070:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
 8007072:	4b06      	ldr	r3, [pc, #24]	@ (800708c <USART2_IRQHandler+0x3c>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b04      	ldr	r3, [pc, #16]	@ (800708c <USART2_IRQHandler+0x3c>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f022 0220 	bic.w	r2, r2, #32
 8007080:	601a      	str	r2, [r3, #0]

}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200008f0 	.word	0x200008f0
 800708c:	20000438 	.word	0x20000438

08007090 <USART3_IRQHandler>:
 * @brief: 1) This function represents the interrupt service routine of UART 3 Peripheral.
 *         2) Inside the function, we call the corresponding pointer to the function which is set to be executed in
 *            case interrupt occurs
 */
void USART3_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[2] != NULL_PTR)
 8007094:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <USART3_IRQHandler+0x38>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <USART3_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[2])();
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <USART3_IRQHandler+0x38>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <USART3_IRQHandler+0x3c>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <USART3_IRQHandler+0x3c>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b0:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
 80070b2:	4b06      	ldr	r3, [pc, #24]	@ (80070cc <USART3_IRQHandler+0x3c>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <USART3_IRQHandler+0x3c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f022 0220 	bic.w	r2, r2, #32
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200008f0 	.word	0x200008f0
 80070cc:	20000438 	.word	0x20000438

080070d0 <main>:

#include "HAL/EEPROM/I2C_Slave_EEPROM.h"
#include "APP/SPECTRO/SPECTRO_Interface.h"

int main(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	SPECTRO_InitSystem();
 80070d4:	f7fb fd38 	bl	8002b48 <SPECTRO_InitSystem>

	while(1)
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <main+0x8>

080070dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return 1;
 80070e0:	2301      	movs	r3, #1
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <_kill>:

int _kill(int pid, int sig)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80070f4:	f001 ffa4 	bl	8009040 <__errno>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2216      	movs	r2, #22
 80070fc:	601a      	str	r2, [r3, #0]
  return -1;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <_exit>:

void _exit (int status)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007112:	f04f 31ff 	mov.w	r1, #4294967295
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffe7 	bl	80070ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <_exit+0x12>

08007120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e00a      	b.n	8007148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007132:	f3af 8000 	nop.w
 8007136:	4601      	mov	r1, r0
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	60ba      	str	r2, [r7, #8]
 800713e:	b2ca      	uxtb	r2, r1
 8007140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	3301      	adds	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	dbf0      	blt.n	8007132 <_read+0x12>
  }

  return len;
 8007150:	687b      	ldr	r3, [r7, #4]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	e009      	b.n	8007180 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	60ba      	str	r2, [r7, #8]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3301      	adds	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	dbf1      	blt.n	800716c <_write+0x12>
  }
  return len;
 8007188:	687b      	ldr	r3, [r7, #4]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <_close>:

int _close(int file)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr

080071a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80071b8:	605a      	str	r2, [r3, #4]
  return 0;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <_isatty>:

int _isatty(int file)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80071ce:	2301      	movs	r3, #1
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
	...

080071f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071fc:	4a14      	ldr	r2, [pc, #80]	@ (8007250 <_sbrk+0x5c>)
 80071fe:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <_sbrk+0x60>)
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <_sbrk+0x64>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007210:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <_sbrk+0x64>)
 8007212:	4a12      	ldr	r2, [pc, #72]	@ (800725c <_sbrk+0x68>)
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <_sbrk+0x64>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d207      	bcs.n	8007234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007224:	f001 ff0c 	bl	8009040 <__errno>
 8007228:	4603      	mov	r3, r0
 800722a:	220c      	movs	r2, #12
 800722c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
 8007232:	e009      	b.n	8007248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007234:	4b08      	ldr	r3, [pc, #32]	@ (8007258 <_sbrk+0x64>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <_sbrk+0x64>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	4a05      	ldr	r2, [pc, #20]	@ (8007258 <_sbrk+0x64>)
 8007244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20005000 	.word	0x20005000
 8007254:	00000400 	.word	0x00000400
 8007258:	20000900 	.word	0x20000900
 800725c:	20000a78 	.word	0x20000a78

08007260 <Reset_Handler>:
 8007260:	480d      	ldr	r0, [pc, #52]	@ (8007298 <LoopForever+0x2>)
 8007262:	4685      	mov	sp, r0
 8007264:	f3af 8000 	nop.w
 8007268:	480c      	ldr	r0, [pc, #48]	@ (800729c <LoopForever+0x6>)
 800726a:	490d      	ldr	r1, [pc, #52]	@ (80072a0 <LoopForever+0xa>)
 800726c:	4a0d      	ldr	r2, [pc, #52]	@ (80072a4 <LoopForever+0xe>)
 800726e:	2300      	movs	r3, #0
 8007270:	e002      	b.n	8007278 <LoopCopyDataInit>

08007272 <CopyDataInit>:
 8007272:	58d4      	ldr	r4, [r2, r3]
 8007274:	50c4      	str	r4, [r0, r3]
 8007276:	3304      	adds	r3, #4

08007278 <LoopCopyDataInit>:
 8007278:	18c4      	adds	r4, r0, r3
 800727a:	428c      	cmp	r4, r1
 800727c:	d3f9      	bcc.n	8007272 <CopyDataInit>
 800727e:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <LoopForever+0x12>)
 8007280:	4c0a      	ldr	r4, [pc, #40]	@ (80072ac <LoopForever+0x16>)
 8007282:	2300      	movs	r3, #0
 8007284:	e001      	b.n	800728a <LoopFillZerobss>

08007286 <FillZerobss>:
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	3204      	adds	r2, #4

0800728a <LoopFillZerobss>:
 800728a:	42a2      	cmp	r2, r4
 800728c:	d3fb      	bcc.n	8007286 <FillZerobss>
 800728e:	f001 fedd 	bl	800904c <__libc_init_array>
 8007292:	f7ff ff1d 	bl	80070d0 <main>

08007296 <LoopForever>:
 8007296:	e7fe      	b.n	8007296 <LoopForever>
 8007298:	20005000 	.word	0x20005000
 800729c:	20000000 	.word	0x20000000
 80072a0:	20000680 	.word	0x20000680
 80072a4:	0800cdd0 	.word	0x0800cdd0
 80072a8:	20000680 	.word	0x20000680
 80072ac:	20000a74 	.word	0x20000a74

080072b0 <ADC3_IRQHandler>:
 80072b0:	e7fe      	b.n	80072b0 <ADC3_IRQHandler>

080072b2 <atof>:
 80072b2:	2100      	movs	r1, #0
 80072b4:	f000 be00 	b.w	8007eb8 <strtod>

080072b8 <atoi>:
 80072b8:	220a      	movs	r2, #10
 80072ba:	2100      	movs	r1, #0
 80072bc:	f000 be84 	b.w	8007fc8 <strtol>

080072c0 <sulp>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	460f      	mov	r7, r1
 80072c6:	4690      	mov	r8, r2
 80072c8:	f002 ff34 	bl	800a134 <__ulp>
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f1b8 0f00 	cmp.w	r8, #0
 80072d4:	d011      	beq.n	80072fa <sulp+0x3a>
 80072d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dd0b      	ble.n	80072fa <sulp+0x3a>
 80072e2:	2400      	movs	r4, #0
 80072e4:	051b      	lsls	r3, r3, #20
 80072e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80072ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	f7f9 f90b 	bl	800050c <__aeabi_dmul>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007302:	0000      	movs	r0, r0
 8007304:	0000      	movs	r0, r0
	...

08007308 <_strtod_l>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b09f      	sub	sp, #124	@ 0x7c
 800730e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007310:	2200      	movs	r2, #0
 8007312:	460c      	mov	r4, r1
 8007314:	921a      	str	r2, [sp, #104]	@ 0x68
 8007316:	f04f 0a00 	mov.w	sl, #0
 800731a:	f04f 0b00 	mov.w	fp, #0
 800731e:	460a      	mov	r2, r1
 8007320:	9005      	str	r0, [sp, #20]
 8007322:	9219      	str	r2, [sp, #100]	@ 0x64
 8007324:	7811      	ldrb	r1, [r2, #0]
 8007326:	292b      	cmp	r1, #43	@ 0x2b
 8007328:	d048      	beq.n	80073bc <_strtod_l+0xb4>
 800732a:	d836      	bhi.n	800739a <_strtod_l+0x92>
 800732c:	290d      	cmp	r1, #13
 800732e:	d830      	bhi.n	8007392 <_strtod_l+0x8a>
 8007330:	2908      	cmp	r1, #8
 8007332:	d830      	bhi.n	8007396 <_strtod_l+0x8e>
 8007334:	2900      	cmp	r1, #0
 8007336:	d039      	beq.n	80073ac <_strtod_l+0xa4>
 8007338:	2200      	movs	r2, #0
 800733a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800733c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800733e:	782a      	ldrb	r2, [r5, #0]
 8007340:	2a30      	cmp	r2, #48	@ 0x30
 8007342:	f040 80b1 	bne.w	80074a8 <_strtod_l+0x1a0>
 8007346:	786a      	ldrb	r2, [r5, #1]
 8007348:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800734c:	2a58      	cmp	r2, #88	@ 0x58
 800734e:	d16c      	bne.n	800742a <_strtod_l+0x122>
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007354:	4a8e      	ldr	r2, [pc, #568]	@ (8007590 <_strtod_l+0x288>)
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	ab1a      	add	r3, sp, #104	@ 0x68
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	9805      	ldr	r0, [sp, #20]
 800735e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007360:	a919      	add	r1, sp, #100	@ 0x64
 8007362:	f001 ff8f 	bl	8009284 <__gethex>
 8007366:	f010 060f 	ands.w	r6, r0, #15
 800736a:	4604      	mov	r4, r0
 800736c:	d005      	beq.n	800737a <_strtod_l+0x72>
 800736e:	2e06      	cmp	r6, #6
 8007370:	d126      	bne.n	80073c0 <_strtod_l+0xb8>
 8007372:	2300      	movs	r3, #0
 8007374:	3501      	adds	r5, #1
 8007376:	9519      	str	r5, [sp, #100]	@ 0x64
 8007378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800737a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8584 	bne.w	8007e8a <_strtod_l+0xb82>
 8007382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007384:	b1bb      	cbz	r3, 80073b6 <_strtod_l+0xae>
 8007386:	4650      	mov	r0, sl
 8007388:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800738c:	b01f      	add	sp, #124	@ 0x7c
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	2920      	cmp	r1, #32
 8007394:	d1d0      	bne.n	8007338 <_strtod_l+0x30>
 8007396:	3201      	adds	r2, #1
 8007398:	e7c3      	b.n	8007322 <_strtod_l+0x1a>
 800739a:	292d      	cmp	r1, #45	@ 0x2d
 800739c:	d1cc      	bne.n	8007338 <_strtod_l+0x30>
 800739e:	2101      	movs	r1, #1
 80073a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d1c7      	bne.n	800733c <_strtod_l+0x34>
 80073ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 8568 	bne.w	8007e86 <_strtod_l+0xb7e>
 80073b6:	4650      	mov	r0, sl
 80073b8:	4659      	mov	r1, fp
 80073ba:	e7e7      	b.n	800738c <_strtod_l+0x84>
 80073bc:	2100      	movs	r1, #0
 80073be:	e7ef      	b.n	80073a0 <_strtod_l+0x98>
 80073c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073c2:	b13a      	cbz	r2, 80073d4 <_strtod_l+0xcc>
 80073c4:	2135      	movs	r1, #53	@ 0x35
 80073c6:	a81c      	add	r0, sp, #112	@ 0x70
 80073c8:	f002 ffa4 	bl	800a314 <__copybits>
 80073cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073ce:	9805      	ldr	r0, [sp, #20]
 80073d0:	f002 fb7e 	bl	8009ad0 <_Bfree>
 80073d4:	3e01      	subs	r6, #1
 80073d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073d8:	2e04      	cmp	r6, #4
 80073da:	d806      	bhi.n	80073ea <_strtod_l+0xe2>
 80073dc:	e8df f006 	tbb	[pc, r6]
 80073e0:	201d0314 	.word	0x201d0314
 80073e4:	14          	.byte	0x14
 80073e5:	00          	.byte	0x00
 80073e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80073ea:	05e1      	lsls	r1, r4, #23
 80073ec:	bf48      	it	mi
 80073ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80073f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073f6:	0d1b      	lsrs	r3, r3, #20
 80073f8:	051b      	lsls	r3, r3, #20
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1bd      	bne.n	800737a <_strtod_l+0x72>
 80073fe:	f001 fe1f 	bl	8009040 <__errno>
 8007402:	2322      	movs	r3, #34	@ 0x22
 8007404:	6003      	str	r3, [r0, #0]
 8007406:	e7b8      	b.n	800737a <_strtod_l+0x72>
 8007408:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800740c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007410:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007414:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007418:	e7e7      	b.n	80073ea <_strtod_l+0xe2>
 800741a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007594 <_strtod_l+0x28c>
 800741e:	e7e4      	b.n	80073ea <_strtod_l+0xe2>
 8007420:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007424:	f04f 3aff 	mov.w	sl, #4294967295
 8007428:	e7df      	b.n	80073ea <_strtod_l+0xe2>
 800742a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b30      	cmp	r3, #48	@ 0x30
 8007434:	d0f9      	beq.n	800742a <_strtod_l+0x122>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d09f      	beq.n	800737a <_strtod_l+0x72>
 800743a:	2301      	movs	r3, #1
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007440:	220a      	movs	r2, #10
 8007442:	930c      	str	r3, [sp, #48]	@ 0x30
 8007444:	2300      	movs	r3, #0
 8007446:	461f      	mov	r7, r3
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	930a      	str	r3, [sp, #40]	@ 0x28
 800744c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800744e:	7805      	ldrb	r5, [r0, #0]
 8007450:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	2909      	cmp	r1, #9
 8007458:	d928      	bls.n	80074ac <_strtod_l+0x1a4>
 800745a:	2201      	movs	r2, #1
 800745c:	494e      	ldr	r1, [pc, #312]	@ (8007598 <_strtod_l+0x290>)
 800745e:	f000 fecc 	bl	80081fa <strncmp>
 8007462:	2800      	cmp	r0, #0
 8007464:	d032      	beq.n	80074cc <_strtod_l+0x1c4>
 8007466:	2000      	movs	r0, #0
 8007468:	462a      	mov	r2, r5
 800746a:	4681      	mov	r9, r0
 800746c:	463d      	mov	r5, r7
 800746e:	4603      	mov	r3, r0
 8007470:	2a65      	cmp	r2, #101	@ 0x65
 8007472:	d001      	beq.n	8007478 <_strtod_l+0x170>
 8007474:	2a45      	cmp	r2, #69	@ 0x45
 8007476:	d114      	bne.n	80074a2 <_strtod_l+0x19a>
 8007478:	b91d      	cbnz	r5, 8007482 <_strtod_l+0x17a>
 800747a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800747c:	4302      	orrs	r2, r0
 800747e:	d095      	beq.n	80073ac <_strtod_l+0xa4>
 8007480:	2500      	movs	r5, #0
 8007482:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007484:	1c62      	adds	r2, r4, #1
 8007486:	9219      	str	r2, [sp, #100]	@ 0x64
 8007488:	7862      	ldrb	r2, [r4, #1]
 800748a:	2a2b      	cmp	r2, #43	@ 0x2b
 800748c:	d077      	beq.n	800757e <_strtod_l+0x276>
 800748e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007490:	d07b      	beq.n	800758a <_strtod_l+0x282>
 8007492:	f04f 0c00 	mov.w	ip, #0
 8007496:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800749a:	2909      	cmp	r1, #9
 800749c:	f240 8082 	bls.w	80075a4 <_strtod_l+0x29c>
 80074a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	e0a2      	b.n	80075ee <_strtod_l+0x2e6>
 80074a8:	2300      	movs	r3, #0
 80074aa:	e7c7      	b.n	800743c <_strtod_l+0x134>
 80074ac:	2f08      	cmp	r7, #8
 80074ae:	bfd5      	itete	le
 80074b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80074b2:	9908      	ldrgt	r1, [sp, #32]
 80074b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80074b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074bc:	f100 0001 	add.w	r0, r0, #1
 80074c0:	bfd4      	ite	le
 80074c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80074c4:	9308      	strgt	r3, [sp, #32]
 80074c6:	3701      	adds	r7, #1
 80074c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80074ca:	e7bf      	b.n	800744c <_strtod_l+0x144>
 80074cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80074d2:	785a      	ldrb	r2, [r3, #1]
 80074d4:	b37f      	cbz	r7, 8007536 <_strtod_l+0x22e>
 80074d6:	4681      	mov	r9, r0
 80074d8:	463d      	mov	r5, r7
 80074da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d912      	bls.n	8007508 <_strtod_l+0x200>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7c4      	b.n	8007470 <_strtod_l+0x168>
 80074e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074e8:	3001      	adds	r0, #1
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ee:	785a      	ldrb	r2, [r3, #1]
 80074f0:	2a30      	cmp	r2, #48	@ 0x30
 80074f2:	d0f8      	beq.n	80074e6 <_strtod_l+0x1de>
 80074f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	f200 84cb 	bhi.w	8007e94 <_strtod_l+0xb8c>
 80074fe:	4681      	mov	r9, r0
 8007500:	2000      	movs	r0, #0
 8007502:	4605      	mov	r5, r0
 8007504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007506:	930c      	str	r3, [sp, #48]	@ 0x30
 8007508:	3a30      	subs	r2, #48	@ 0x30
 800750a:	f100 0301 	add.w	r3, r0, #1
 800750e:	d02a      	beq.n	8007566 <_strtod_l+0x25e>
 8007510:	4499      	add	r9, r3
 8007512:	210a      	movs	r1, #10
 8007514:	462b      	mov	r3, r5
 8007516:	eb00 0c05 	add.w	ip, r0, r5
 800751a:	4563      	cmp	r3, ip
 800751c:	d10d      	bne.n	800753a <_strtod_l+0x232>
 800751e:	1c69      	adds	r1, r5, #1
 8007520:	4401      	add	r1, r0
 8007522:	4428      	add	r0, r5
 8007524:	2808      	cmp	r0, #8
 8007526:	dc16      	bgt.n	8007556 <_strtod_l+0x24e>
 8007528:	230a      	movs	r3, #10
 800752a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800752c:	fb03 2300 	mla	r3, r3, r0, r2
 8007530:	930a      	str	r3, [sp, #40]	@ 0x28
 8007532:	2300      	movs	r3, #0
 8007534:	e018      	b.n	8007568 <_strtod_l+0x260>
 8007536:	4638      	mov	r0, r7
 8007538:	e7da      	b.n	80074f0 <_strtod_l+0x1e8>
 800753a:	2b08      	cmp	r3, #8
 800753c:	f103 0301 	add.w	r3, r3, #1
 8007540:	dc03      	bgt.n	800754a <_strtod_l+0x242>
 8007542:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007544:	434e      	muls	r6, r1
 8007546:	960a      	str	r6, [sp, #40]	@ 0x28
 8007548:	e7e7      	b.n	800751a <_strtod_l+0x212>
 800754a:	2b10      	cmp	r3, #16
 800754c:	bfde      	ittt	le
 800754e:	9e08      	ldrle	r6, [sp, #32]
 8007550:	434e      	mulle	r6, r1
 8007552:	9608      	strle	r6, [sp, #32]
 8007554:	e7e1      	b.n	800751a <_strtod_l+0x212>
 8007556:	280f      	cmp	r0, #15
 8007558:	dceb      	bgt.n	8007532 <_strtod_l+0x22a>
 800755a:	230a      	movs	r3, #10
 800755c:	9808      	ldr	r0, [sp, #32]
 800755e:	fb03 2300 	mla	r3, r3, r0, r2
 8007562:	9308      	str	r3, [sp, #32]
 8007564:	e7e5      	b.n	8007532 <_strtod_l+0x22a>
 8007566:	4629      	mov	r1, r5
 8007568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800756a:	460d      	mov	r5, r1
 800756c:	1c50      	adds	r0, r2, #1
 800756e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007570:	7852      	ldrb	r2, [r2, #1]
 8007572:	4618      	mov	r0, r3
 8007574:	e7b1      	b.n	80074da <_strtod_l+0x1d2>
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	2301      	movs	r3, #1
 800757c:	e77d      	b.n	800747a <_strtod_l+0x172>
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	1ca2      	adds	r2, r4, #2
 8007584:	9219      	str	r2, [sp, #100]	@ 0x64
 8007586:	78a2      	ldrb	r2, [r4, #2]
 8007588:	e785      	b.n	8007496 <_strtod_l+0x18e>
 800758a:	f04f 0c01 	mov.w	ip, #1
 800758e:	e7f8      	b.n	8007582 <_strtod_l+0x27a>
 8007590:	0800c818 	.word	0x0800c818
 8007594:	7ff00000 	.word	0x7ff00000
 8007598:	0800c7f4 	.word	0x0800c7f4
 800759c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800759e:	1c51      	adds	r1, r2, #1
 80075a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80075a2:	7852      	ldrb	r2, [r2, #1]
 80075a4:	2a30      	cmp	r2, #48	@ 0x30
 80075a6:	d0f9      	beq.n	800759c <_strtod_l+0x294>
 80075a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80075ac:	2908      	cmp	r1, #8
 80075ae:	f63f af78 	bhi.w	80074a2 <_strtod_l+0x19a>
 80075b2:	f04f 080a 	mov.w	r8, #10
 80075b6:	3a30      	subs	r2, #48	@ 0x30
 80075b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075c0:	1c56      	adds	r6, r2, #1
 80075c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80075c4:	7852      	ldrb	r2, [r2, #1]
 80075c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075ca:	f1be 0f09 	cmp.w	lr, #9
 80075ce:	d939      	bls.n	8007644 <_strtod_l+0x33c>
 80075d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075d6:	1a76      	subs	r6, r6, r1
 80075d8:	2e08      	cmp	r6, #8
 80075da:	dc03      	bgt.n	80075e4 <_strtod_l+0x2dc>
 80075dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075de:	4588      	cmp	r8, r1
 80075e0:	bfa8      	it	ge
 80075e2:	4688      	movge	r8, r1
 80075e4:	f1bc 0f00 	cmp.w	ip, #0
 80075e8:	d001      	beq.n	80075ee <_strtod_l+0x2e6>
 80075ea:	f1c8 0800 	rsb	r8, r8, #0
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d14e      	bne.n	8007690 <_strtod_l+0x388>
 80075f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f4:	4308      	orrs	r0, r1
 80075f6:	f47f aec0 	bne.w	800737a <_strtod_l+0x72>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f aed6 	bne.w	80073ac <_strtod_l+0xa4>
 8007600:	2a69      	cmp	r2, #105	@ 0x69
 8007602:	d028      	beq.n	8007656 <_strtod_l+0x34e>
 8007604:	dc25      	bgt.n	8007652 <_strtod_l+0x34a>
 8007606:	2a49      	cmp	r2, #73	@ 0x49
 8007608:	d025      	beq.n	8007656 <_strtod_l+0x34e>
 800760a:	2a4e      	cmp	r2, #78	@ 0x4e
 800760c:	f47f aece 	bne.w	80073ac <_strtod_l+0xa4>
 8007610:	499a      	ldr	r1, [pc, #616]	@ (800787c <_strtod_l+0x574>)
 8007612:	a819      	add	r0, sp, #100	@ 0x64
 8007614:	f002 f858 	bl	80096c8 <__match>
 8007618:	2800      	cmp	r0, #0
 800761a:	f43f aec7 	beq.w	80073ac <_strtod_l+0xa4>
 800761e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b28      	cmp	r3, #40	@ 0x28
 8007624:	d12e      	bne.n	8007684 <_strtod_l+0x37c>
 8007626:	4996      	ldr	r1, [pc, #600]	@ (8007880 <_strtod_l+0x578>)
 8007628:	aa1c      	add	r2, sp, #112	@ 0x70
 800762a:	a819      	add	r0, sp, #100	@ 0x64
 800762c:	f002 f860 	bl	80096f0 <__hexnan>
 8007630:	2805      	cmp	r0, #5
 8007632:	d127      	bne.n	8007684 <_strtod_l+0x37c>
 8007634:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007636:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800763a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800763e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007642:	e69a      	b.n	800737a <_strtod_l+0x72>
 8007644:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007646:	fb08 2101 	mla	r1, r8, r1, r2
 800764a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800764e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007650:	e7b5      	b.n	80075be <_strtod_l+0x2b6>
 8007652:	2a6e      	cmp	r2, #110	@ 0x6e
 8007654:	e7da      	b.n	800760c <_strtod_l+0x304>
 8007656:	498b      	ldr	r1, [pc, #556]	@ (8007884 <_strtod_l+0x57c>)
 8007658:	a819      	add	r0, sp, #100	@ 0x64
 800765a:	f002 f835 	bl	80096c8 <__match>
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f aea4 	beq.w	80073ac <_strtod_l+0xa4>
 8007664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007666:	4988      	ldr	r1, [pc, #544]	@ (8007888 <_strtod_l+0x580>)
 8007668:	3b01      	subs	r3, #1
 800766a:	a819      	add	r0, sp, #100	@ 0x64
 800766c:	9319      	str	r3, [sp, #100]	@ 0x64
 800766e:	f002 f82b 	bl	80096c8 <__match>
 8007672:	b910      	cbnz	r0, 800767a <_strtod_l+0x372>
 8007674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007676:	3301      	adds	r3, #1
 8007678:	9319      	str	r3, [sp, #100]	@ 0x64
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800788c <_strtod_l+0x584>
 8007682:	e67a      	b.n	800737a <_strtod_l+0x72>
 8007684:	4882      	ldr	r0, [pc, #520]	@ (8007890 <_strtod_l+0x588>)
 8007686:	f001 fd21 	bl	80090cc <nan>
 800768a:	4682      	mov	sl, r0
 800768c:	468b      	mov	fp, r1
 800768e:	e674      	b.n	800737a <_strtod_l+0x72>
 8007690:	eba8 0309 	sub.w	r3, r8, r9
 8007694:	2f00      	cmp	r7, #0
 8007696:	bf08      	it	eq
 8007698:	462f      	moveq	r7, r5
 800769a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800769c:	2d10      	cmp	r5, #16
 800769e:	462c      	mov	r4, r5
 80076a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a2:	bfa8      	it	ge
 80076a4:	2410      	movge	r4, #16
 80076a6:	f7f8 feb7 	bl	8000418 <__aeabi_ui2d>
 80076aa:	2d09      	cmp	r5, #9
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	dc11      	bgt.n	80076d6 <_strtod_l+0x3ce>
 80076b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f43f ae60 	beq.w	800737a <_strtod_l+0x72>
 80076ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076bc:	dd76      	ble.n	80077ac <_strtod_l+0x4a4>
 80076be:	2b16      	cmp	r3, #22
 80076c0:	dc5d      	bgt.n	800777e <_strtod_l+0x476>
 80076c2:	4974      	ldr	r1, [pc, #464]	@ (8007894 <_strtod_l+0x58c>)
 80076c4:	4652      	mov	r2, sl
 80076c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076ca:	465b      	mov	r3, fp
 80076cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d0:	f7f8 ff1c 	bl	800050c <__aeabi_dmul>
 80076d4:	e7d9      	b.n	800768a <_strtod_l+0x382>
 80076d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007894 <_strtod_l+0x58c>)
 80076d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80076e0:	f7f8 ff14 	bl	800050c <__aeabi_dmul>
 80076e4:	4682      	mov	sl, r0
 80076e6:	9808      	ldr	r0, [sp, #32]
 80076e8:	468b      	mov	fp, r1
 80076ea:	f7f8 fe95 	bl	8000418 <__aeabi_ui2d>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4650      	mov	r0, sl
 80076f4:	4659      	mov	r1, fp
 80076f6:	f7f8 fd53 	bl	80001a0 <__adddf3>
 80076fa:	2d0f      	cmp	r5, #15
 80076fc:	4682      	mov	sl, r0
 80076fe:	468b      	mov	fp, r1
 8007700:	ddd7      	ble.n	80076b2 <_strtod_l+0x3aa>
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	1b2c      	subs	r4, r5, r4
 8007706:	441c      	add	r4, r3
 8007708:	2c00      	cmp	r4, #0
 800770a:	f340 8096 	ble.w	800783a <_strtod_l+0x532>
 800770e:	f014 030f 	ands.w	r3, r4, #15
 8007712:	d00a      	beq.n	800772a <_strtod_l+0x422>
 8007714:	495f      	ldr	r1, [pc, #380]	@ (8007894 <_strtod_l+0x58c>)
 8007716:	4652      	mov	r2, sl
 8007718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800771c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007720:	465b      	mov	r3, fp
 8007722:	f7f8 fef3 	bl	800050c <__aeabi_dmul>
 8007726:	4682      	mov	sl, r0
 8007728:	468b      	mov	fp, r1
 800772a:	f034 040f 	bics.w	r4, r4, #15
 800772e:	d073      	beq.n	8007818 <_strtod_l+0x510>
 8007730:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007734:	dd48      	ble.n	80077c8 <_strtod_l+0x4c0>
 8007736:	2400      	movs	r4, #0
 8007738:	46a0      	mov	r8, r4
 800773a:	46a1      	mov	r9, r4
 800773c:	940a      	str	r4, [sp, #40]	@ 0x28
 800773e:	2322      	movs	r3, #34	@ 0x22
 8007740:	f04f 0a00 	mov.w	sl, #0
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800788c <_strtod_l+0x584>
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	f43f ae13 	beq.w	800737a <_strtod_l+0x72>
 8007754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	f002 f9ba 	bl	8009ad0 <_Bfree>
 800775c:	4649      	mov	r1, r9
 800775e:	9805      	ldr	r0, [sp, #20]
 8007760:	f002 f9b6 	bl	8009ad0 <_Bfree>
 8007764:	4641      	mov	r1, r8
 8007766:	9805      	ldr	r0, [sp, #20]
 8007768:	f002 f9b2 	bl	8009ad0 <_Bfree>
 800776c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	f002 f9ae 	bl	8009ad0 <_Bfree>
 8007774:	4621      	mov	r1, r4
 8007776:	9805      	ldr	r0, [sp, #20]
 8007778:	f002 f9aa 	bl	8009ad0 <_Bfree>
 800777c:	e5fd      	b.n	800737a <_strtod_l+0x72>
 800777e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007780:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007784:	4293      	cmp	r3, r2
 8007786:	dbbc      	blt.n	8007702 <_strtod_l+0x3fa>
 8007788:	4c42      	ldr	r4, [pc, #264]	@ (8007894 <_strtod_l+0x58c>)
 800778a:	f1c5 050f 	rsb	r5, r5, #15
 800778e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007792:	4652      	mov	r2, sl
 8007794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007798:	465b      	mov	r3, fp
 800779a:	f7f8 feb7 	bl	800050c <__aeabi_dmul>
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	1b5d      	subs	r5, r3, r5
 80077a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077aa:	e791      	b.n	80076d0 <_strtod_l+0x3c8>
 80077ac:	3316      	adds	r3, #22
 80077ae:	dba8      	blt.n	8007702 <_strtod_l+0x3fa>
 80077b0:	4b38      	ldr	r3, [pc, #224]	@ (8007894 <_strtod_l+0x58c>)
 80077b2:	eba9 0808 	sub.w	r8, r9, r8
 80077b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80077c0:	4659      	mov	r1, fp
 80077c2:	f7f8 ffcd 	bl	8000760 <__aeabi_ddiv>
 80077c6:	e760      	b.n	800768a <_strtod_l+0x382>
 80077c8:	4b33      	ldr	r3, [pc, #204]	@ (8007898 <_strtod_l+0x590>)
 80077ca:	4650      	mov	r0, sl
 80077cc:	9308      	str	r3, [sp, #32]
 80077ce:	2300      	movs	r3, #0
 80077d0:	4659      	mov	r1, fp
 80077d2:	461e      	mov	r6, r3
 80077d4:	1124      	asrs	r4, r4, #4
 80077d6:	2c01      	cmp	r4, #1
 80077d8:	dc21      	bgt.n	800781e <_strtod_l+0x516>
 80077da:	b10b      	cbz	r3, 80077e0 <_strtod_l+0x4d8>
 80077dc:	4682      	mov	sl, r0
 80077de:	468b      	mov	fp, r1
 80077e0:	492d      	ldr	r1, [pc, #180]	@ (8007898 <_strtod_l+0x590>)
 80077e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80077e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80077ea:	4652      	mov	r2, sl
 80077ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f0:	465b      	mov	r3, fp
 80077f2:	f7f8 fe8b 	bl	800050c <__aeabi_dmul>
 80077f6:	4b25      	ldr	r3, [pc, #148]	@ (800788c <_strtod_l+0x584>)
 80077f8:	460a      	mov	r2, r1
 80077fa:	400b      	ands	r3, r1
 80077fc:	4927      	ldr	r1, [pc, #156]	@ (800789c <_strtod_l+0x594>)
 80077fe:	4682      	mov	sl, r0
 8007800:	428b      	cmp	r3, r1
 8007802:	d898      	bhi.n	8007736 <_strtod_l+0x42e>
 8007804:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007808:	428b      	cmp	r3, r1
 800780a:	bf86      	itte	hi
 800780c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007810:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80078a0 <_strtod_l+0x598>
 8007814:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007818:	2300      	movs	r3, #0
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	e07a      	b.n	8007914 <_strtod_l+0x60c>
 800781e:	07e2      	lsls	r2, r4, #31
 8007820:	d505      	bpl.n	800782e <_strtod_l+0x526>
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fe70 	bl	800050c <__aeabi_dmul>
 800782c:	2301      	movs	r3, #1
 800782e:	9a08      	ldr	r2, [sp, #32]
 8007830:	3601      	adds	r6, #1
 8007832:	3208      	adds	r2, #8
 8007834:	1064      	asrs	r4, r4, #1
 8007836:	9208      	str	r2, [sp, #32]
 8007838:	e7cd      	b.n	80077d6 <_strtod_l+0x4ce>
 800783a:	d0ed      	beq.n	8007818 <_strtod_l+0x510>
 800783c:	4264      	negs	r4, r4
 800783e:	f014 020f 	ands.w	r2, r4, #15
 8007842:	d00a      	beq.n	800785a <_strtod_l+0x552>
 8007844:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <_strtod_l+0x58c>)
 8007846:	4650      	mov	r0, sl
 8007848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784c:	4659      	mov	r1, fp
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 ff85 	bl	8000760 <__aeabi_ddiv>
 8007856:	4682      	mov	sl, r0
 8007858:	468b      	mov	fp, r1
 800785a:	1124      	asrs	r4, r4, #4
 800785c:	d0dc      	beq.n	8007818 <_strtod_l+0x510>
 800785e:	2c1f      	cmp	r4, #31
 8007860:	dd20      	ble.n	80078a4 <_strtod_l+0x59c>
 8007862:	2400      	movs	r4, #0
 8007864:	46a0      	mov	r8, r4
 8007866:	46a1      	mov	r9, r4
 8007868:	940a      	str	r4, [sp, #40]	@ 0x28
 800786a:	2322      	movs	r3, #34	@ 0x22
 800786c:	9a05      	ldr	r2, [sp, #20]
 800786e:	f04f 0a00 	mov.w	sl, #0
 8007872:	f04f 0b00 	mov.w	fp, #0
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e768      	b.n	800774c <_strtod_l+0x444>
 800787a:	bf00      	nop
 800787c:	0800c7ff 	.word	0x0800c7ff
 8007880:	0800c804 	.word	0x0800c804
 8007884:	0800c7f6 	.word	0x0800c7f6
 8007888:	0800c7f9 	.word	0x0800c7f9
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	0800cb75 	.word	0x0800cb75
 8007894:	0800cc78 	.word	0x0800cc78
 8007898:	0800cc50 	.word	0x0800cc50
 800789c:	7ca00000 	.word	0x7ca00000
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	f014 0310 	ands.w	r3, r4, #16
 80078a8:	bf18      	it	ne
 80078aa:	236a      	movne	r3, #106	@ 0x6a
 80078ac:	4650      	mov	r0, sl
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	4659      	mov	r1, fp
 80078b2:	2300      	movs	r3, #0
 80078b4:	4ea9      	ldr	r6, [pc, #676]	@ (8007b5c <_strtod_l+0x854>)
 80078b6:	07e2      	lsls	r2, r4, #31
 80078b8:	d504      	bpl.n	80078c4 <_strtod_l+0x5bc>
 80078ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078be:	f7f8 fe25 	bl	800050c <__aeabi_dmul>
 80078c2:	2301      	movs	r3, #1
 80078c4:	1064      	asrs	r4, r4, #1
 80078c6:	f106 0608 	add.w	r6, r6, #8
 80078ca:	d1f4      	bne.n	80078b6 <_strtod_l+0x5ae>
 80078cc:	b10b      	cbz	r3, 80078d2 <_strtod_l+0x5ca>
 80078ce:	4682      	mov	sl, r0
 80078d0:	468b      	mov	fp, r1
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	b1b3      	cbz	r3, 8007904 <_strtod_l+0x5fc>
 80078d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80078de:	2b00      	cmp	r3, #0
 80078e0:	4659      	mov	r1, fp
 80078e2:	dd0f      	ble.n	8007904 <_strtod_l+0x5fc>
 80078e4:	2b1f      	cmp	r3, #31
 80078e6:	dd57      	ble.n	8007998 <_strtod_l+0x690>
 80078e8:	2b34      	cmp	r3, #52	@ 0x34
 80078ea:	bfd8      	it	le
 80078ec:	f04f 33ff 	movle.w	r3, #4294967295
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	bfcf      	iteee	gt
 80078f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80078fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80078fe:	4093      	lslle	r3, r2
 8007900:	ea03 0b01 	andle.w	fp, r3, r1
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4650      	mov	r0, sl
 800790a:	4659      	mov	r1, fp
 800790c:	f7f9 f866 	bl	80009dc <__aeabi_dcmpeq>
 8007910:	2800      	cmp	r0, #0
 8007912:	d1a6      	bne.n	8007862 <_strtod_l+0x55a>
 8007914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007916:	463a      	mov	r2, r7
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800791c:	462b      	mov	r3, r5
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	f002 f93e 	bl	8009ba0 <__s2b>
 8007924:	900a      	str	r0, [sp, #40]	@ 0x28
 8007926:	2800      	cmp	r0, #0
 8007928:	f43f af05 	beq.w	8007736 <_strtod_l+0x42e>
 800792c:	2400      	movs	r4, #0
 800792e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007930:	eba9 0308 	sub.w	r3, r9, r8
 8007934:	2a00      	cmp	r2, #0
 8007936:	bfa8      	it	ge
 8007938:	2300      	movge	r3, #0
 800793a:	46a0      	mov	r8, r4
 800793c:	9312      	str	r3, [sp, #72]	@ 0x48
 800793e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007942:	9316      	str	r3, [sp, #88]	@ 0x58
 8007944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007946:	9805      	ldr	r0, [sp, #20]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	f002 f881 	bl	8009a50 <_Balloc>
 800794e:	4681      	mov	r9, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	f43f aef4 	beq.w	800773e <_strtod_l+0x436>
 8007956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007958:	300c      	adds	r0, #12
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	f103 010c 	add.w	r1, r3, #12
 8007960:	3202      	adds	r2, #2
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	f001 fba3 	bl	80090ae <memcpy>
 8007968:	ab1c      	add	r3, sp, #112	@ 0x70
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4652      	mov	r2, sl
 8007972:	465b      	mov	r3, fp
 8007974:	9805      	ldr	r0, [sp, #20]
 8007976:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800797a:	f002 fc43 	bl	800a204 <__d2b>
 800797e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007980:	2800      	cmp	r0, #0
 8007982:	f43f aedc 	beq.w	800773e <_strtod_l+0x436>
 8007986:	2101      	movs	r1, #1
 8007988:	9805      	ldr	r0, [sp, #20]
 800798a:	f002 f99f 	bl	8009ccc <__i2b>
 800798e:	4680      	mov	r8, r0
 8007990:	b948      	cbnz	r0, 80079a6 <_strtod_l+0x69e>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	e6d2      	b.n	800773e <_strtod_l+0x436>
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	ea03 0a0a 	and.w	sl, r3, sl
 80079a4:	e7ae      	b.n	8007904 <_strtod_l+0x5fc>
 80079a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80079a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	bfab      	itete	ge
 80079ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80079b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80079b2:	18ef      	addge	r7, r5, r3
 80079b4:	1b5e      	sublt	r6, r3, r5
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	bfa8      	it	ge
 80079ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80079bc:	eba5 0503 	sub.w	r5, r5, r3
 80079c0:	4415      	add	r5, r2
 80079c2:	4b67      	ldr	r3, [pc, #412]	@ (8007b60 <_strtod_l+0x858>)
 80079c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80079c8:	bfb8      	it	lt
 80079ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079cc:	429d      	cmp	r5, r3
 80079ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079d2:	da50      	bge.n	8007a76 <_strtod_l+0x76e>
 80079d4:	1b5b      	subs	r3, r3, r5
 80079d6:	2b1f      	cmp	r3, #31
 80079d8:	f04f 0101 	mov.w	r1, #1
 80079dc:	eba2 0203 	sub.w	r2, r2, r3
 80079e0:	dc3d      	bgt.n	8007a5e <_strtod_l+0x756>
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079e8:	2300      	movs	r3, #0
 80079ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80079ec:	18bd      	adds	r5, r7, r2
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	42af      	cmp	r7, r5
 80079f2:	4416      	add	r6, r2
 80079f4:	441e      	add	r6, r3
 80079f6:	463b      	mov	r3, r7
 80079f8:	bfa8      	it	ge
 80079fa:	462b      	movge	r3, r5
 80079fc:	42b3      	cmp	r3, r6
 80079fe:	bfa8      	it	ge
 8007a00:	4633      	movge	r3, r6
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfc2      	ittt	gt
 8007a06:	1aed      	subgt	r5, r5, r3
 8007a08:	1af6      	subgt	r6, r6, r3
 8007a0a:	1aff      	subgt	r7, r7, r3
 8007a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd16      	ble.n	8007a40 <_strtod_l+0x738>
 8007a12:	4641      	mov	r1, r8
 8007a14:	461a      	mov	r2, r3
 8007a16:	9805      	ldr	r0, [sp, #20]
 8007a18:	f002 fa16 	bl	8009e48 <__pow5mult>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0b7      	beq.n	8007992 <_strtod_l+0x68a>
 8007a22:	4601      	mov	r1, r0
 8007a24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a26:	9805      	ldr	r0, [sp, #20]
 8007a28:	f002 f966 	bl	8009cf8 <__multiply>
 8007a2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f ae85 	beq.w	800773e <_strtod_l+0x436>
 8007a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a36:	9805      	ldr	r0, [sp, #20]
 8007a38:	f002 f84a 	bl	8009ad0 <_Bfree>
 8007a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	dc1d      	bgt.n	8007a80 <_strtod_l+0x778>
 8007a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd23      	ble.n	8007a92 <_strtod_l+0x78a>
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a4e:	9805      	ldr	r0, [sp, #20]
 8007a50:	f002 f9fa 	bl	8009e48 <__pow5mult>
 8007a54:	4681      	mov	r9, r0
 8007a56:	b9e0      	cbnz	r0, 8007a92 <_strtod_l+0x78a>
 8007a58:	f04f 0900 	mov.w	r9, #0
 8007a5c:	e66f      	b.n	800773e <_strtod_l+0x436>
 8007a5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a6a:	35e2      	adds	r5, #226	@ 0xe2
 8007a6c:	fa01 f305 	lsl.w	r3, r1, r5
 8007a70:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a72:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a74:	e7ba      	b.n	80079ec <_strtod_l+0x6e4>
 8007a76:	2300      	movs	r3, #0
 8007a78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a7e:	e7b5      	b.n	80079ec <_strtod_l+0x6e4>
 8007a80:	462a      	mov	r2, r5
 8007a82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	f002 fa39 	bl	8009efc <__lshift>
 8007a8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d1d9      	bne.n	8007a44 <_strtod_l+0x73c>
 8007a90:	e655      	b.n	800773e <_strtod_l+0x436>
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	dd07      	ble.n	8007aa6 <_strtod_l+0x79e>
 8007a96:	4649      	mov	r1, r9
 8007a98:	4632      	mov	r2, r6
 8007a9a:	9805      	ldr	r0, [sp, #20]
 8007a9c:	f002 fa2e 	bl	8009efc <__lshift>
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d0d8      	beq.n	8007a58 <_strtod_l+0x750>
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	dd08      	ble.n	8007abc <_strtod_l+0x7b4>
 8007aaa:	4641      	mov	r1, r8
 8007aac:	463a      	mov	r2, r7
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f002 fa24 	bl	8009efc <__lshift>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae41 	beq.w	800773e <_strtod_l+0x436>
 8007abc:	464a      	mov	r2, r9
 8007abe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ac0:	9805      	ldr	r0, [sp, #20]
 8007ac2:	f002 faa3 	bl	800a00c <__mdiff>
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f ae38 	beq.w	800773e <_strtod_l+0x436>
 8007ace:	68c3      	ldr	r3, [r0, #12]
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60c3      	str	r3, [r0, #12]
 8007ad8:	f002 fa7c 	bl	8009fd4 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	da45      	bge.n	8007b6c <_strtod_l+0x864>
 8007ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ae6:	d16b      	bne.n	8007bc0 <_strtod_l+0x8b8>
 8007ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d167      	bne.n	8007bc0 <_strtod_l+0x8b8>
 8007af0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007af4:	0d1b      	lsrs	r3, r3, #20
 8007af6:	051b      	lsls	r3, r3, #20
 8007af8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007afc:	d960      	bls.n	8007bc0 <_strtod_l+0x8b8>
 8007afe:	6963      	ldr	r3, [r4, #20]
 8007b00:	b913      	cbnz	r3, 8007b08 <_strtod_l+0x800>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	dd5b      	ble.n	8007bc0 <_strtod_l+0x8b8>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	f002 f9f5 	bl	8009efc <__lshift>
 8007b12:	4641      	mov	r1, r8
 8007b14:	4604      	mov	r4, r0
 8007b16:	f002 fa5d 	bl	8009fd4 <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	dd50      	ble.n	8007bc0 <_strtod_l+0x8b8>
 8007b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b22:	9a08      	ldr	r2, [sp, #32]
 8007b24:	0d1b      	lsrs	r3, r3, #20
 8007b26:	051b      	lsls	r3, r3, #20
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	d06a      	beq.n	8007c02 <_strtod_l+0x8fa>
 8007b2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b30:	d867      	bhi.n	8007c02 <_strtod_l+0x8fa>
 8007b32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b36:	f67f ae98 	bls.w	800786a <_strtod_l+0x562>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <_strtod_l+0x85c>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7f8 fce3 	bl	800050c <__aeabi_dmul>
 8007b46:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <_strtod_l+0x860>)
 8007b48:	4682      	mov	sl, r0
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	468b      	mov	fp, r1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f47f ae00 	bne.w	8007754 <_strtod_l+0x44c>
 8007b54:	2322      	movs	r3, #34	@ 0x22
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e5fb      	b.n	8007754 <_strtod_l+0x44c>
 8007b5c:	0800c830 	.word	0x0800c830
 8007b60:	fffffc02 	.word	0xfffffc02
 8007b64:	39500000 	.word	0x39500000
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b70:	d165      	bne.n	8007c3e <_strtod_l+0x936>
 8007b72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b78:	b35a      	cbz	r2, 8007bd2 <_strtod_l+0x8ca>
 8007b7a:	4a99      	ldr	r2, [pc, #612]	@ (8007de0 <_strtod_l+0xad8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d12b      	bne.n	8007bd8 <_strtod_l+0x8d0>
 8007b80:	9b08      	ldr	r3, [sp, #32]
 8007b82:	4651      	mov	r1, sl
 8007b84:	b303      	cbz	r3, 8007bc8 <_strtod_l+0x8c0>
 8007b86:	465a      	mov	r2, fp
 8007b88:	4b96      	ldr	r3, [pc, #600]	@ (8007de4 <_strtod_l+0xadc>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295
 8007b94:	d81b      	bhi.n	8007bce <_strtod_l+0x8c6>
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d119      	bne.n	8007bd8 <_strtod_l+0x8d0>
 8007ba4:	4b90      	ldr	r3, [pc, #576]	@ (8007de8 <_strtod_l+0xae0>)
 8007ba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d102      	bne.n	8007bb2 <_strtod_l+0x8aa>
 8007bac:	3101      	adds	r1, #1
 8007bae:	f43f adc6 	beq.w	800773e <_strtod_l+0x436>
 8007bb2:	f04f 0a00 	mov.w	sl, #0
 8007bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8007de4 <_strtod_l+0xadc>)
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bba:	401a      	ands	r2, r3
 8007bbc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1b9      	bne.n	8007b3a <_strtod_l+0x832>
 8007bc6:	e5c5      	b.n	8007754 <_strtod_l+0x44c>
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	e7e8      	b.n	8007ba0 <_strtod_l+0x898>
 8007bce:	4613      	mov	r3, r2
 8007bd0:	e7e6      	b.n	8007ba0 <_strtod_l+0x898>
 8007bd2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd6:	d0a2      	beq.n	8007b1e <_strtod_l+0x816>
 8007bd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bda:	b1db      	cbz	r3, 8007c14 <_strtod_l+0x90c>
 8007bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bde:	4213      	tst	r3, r2
 8007be0:	d0ee      	beq.n	8007bc0 <_strtod_l+0x8b8>
 8007be2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be4:	4650      	mov	r0, sl
 8007be6:	4659      	mov	r1, fp
 8007be8:	9a08      	ldr	r2, [sp, #32]
 8007bea:	b1bb      	cbz	r3, 8007c1c <_strtod_l+0x914>
 8007bec:	f7ff fb68 	bl	80072c0 <sulp>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bf8:	f7f8 fad2 	bl	80001a0 <__adddf3>
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	468b      	mov	fp, r1
 8007c00:	e7de      	b.n	8007bc0 <_strtod_l+0x8b8>
 8007c02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c12:	e7d5      	b.n	8007bc0 <_strtod_l+0x8b8>
 8007c14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c16:	ea13 0f0a 	tst.w	r3, sl
 8007c1a:	e7e1      	b.n	8007be0 <_strtod_l+0x8d8>
 8007c1c:	f7ff fb50 	bl	80072c0 <sulp>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c28:	f7f8 fab8 	bl	800019c <__aeabi_dsub>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	f7f8 fed2 	bl	80009dc <__aeabi_dcmpeq>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d0c1      	beq.n	8007bc0 <_strtod_l+0x8b8>
 8007c3c:	e615      	b.n	800786a <_strtod_l+0x562>
 8007c3e:	4641      	mov	r1, r8
 8007c40:	4620      	mov	r0, r4
 8007c42:	f002 fb37 	bl	800a2b4 <__ratio>
 8007c46:	2200      	movs	r2, #0
 8007c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	460f      	mov	r7, r1
 8007c50:	f7f8 fed8 	bl	8000a04 <__aeabi_dcmple>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d06d      	beq.n	8007d34 <_strtod_l+0xa2c>
 8007c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d178      	bne.n	8007d50 <_strtod_l+0xa48>
 8007c5e:	f1ba 0f00 	cmp.w	sl, #0
 8007c62:	d156      	bne.n	8007d12 <_strtod_l+0xa0a>
 8007c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d158      	bne.n	8007d20 <_strtod_l+0xa18>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	4b5d      	ldr	r3, [pc, #372]	@ (8007dec <_strtod_l+0xae4>)
 8007c76:	f7f8 febb 	bl	80009f0 <__aeabi_dcmplt>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d157      	bne.n	8007d2e <_strtod_l+0xa26>
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	2200      	movs	r2, #0
 8007c84:	4b5a      	ldr	r3, [pc, #360]	@ (8007df0 <_strtod_l+0xae8>)
 8007c86:	f7f8 fc41 	bl	800050c <__aeabi_dmul>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007c92:	9606      	str	r6, [sp, #24]
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c9a:	4d52      	ldr	r5, [pc, #328]	@ (8007de4 <_strtod_l+0xadc>)
 8007c9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca2:	401d      	ands	r5, r3
 8007ca4:	4b53      	ldr	r3, [pc, #332]	@ (8007df4 <_strtod_l+0xaec>)
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	f040 80aa 	bne.w	8007e00 <_strtod_l+0xaf8>
 8007cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	f002 fa3d 	bl	800a134 <__ulp>
 8007cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cbe:	f7f8 fc25 	bl	800050c <__aeabi_dmul>
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	f7f8 fa6b 	bl	80001a0 <__adddf3>
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4945      	ldr	r1, [pc, #276]	@ (8007de4 <_strtod_l+0xadc>)
 8007cce:	4a4a      	ldr	r2, [pc, #296]	@ (8007df8 <_strtod_l+0xaf0>)
 8007cd0:	4019      	ands	r1, r3
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	d942      	bls.n	8007d5e <_strtod_l+0xa56>
 8007cd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cda:	4b43      	ldr	r3, [pc, #268]	@ (8007de8 <_strtod_l+0xae0>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d103      	bne.n	8007ce8 <_strtod_l+0x9e0>
 8007ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f43f ad2b 	beq.w	800773e <_strtod_l+0x436>
 8007ce8:	f04f 3aff 	mov.w	sl, #4294967295
 8007cec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007de8 <_strtod_l+0xae0>
 8007cf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cf2:	9805      	ldr	r0, [sp, #20]
 8007cf4:	f001 feec 	bl	8009ad0 <_Bfree>
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	9805      	ldr	r0, [sp, #20]
 8007cfc:	f001 fee8 	bl	8009ad0 <_Bfree>
 8007d00:	4641      	mov	r1, r8
 8007d02:	9805      	ldr	r0, [sp, #20]
 8007d04:	f001 fee4 	bl	8009ad0 <_Bfree>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	9805      	ldr	r0, [sp, #20]
 8007d0c:	f001 fee0 	bl	8009ad0 <_Bfree>
 8007d10:	e618      	b.n	8007944 <_strtod_l+0x63c>
 8007d12:	f1ba 0f01 	cmp.w	sl, #1
 8007d16:	d103      	bne.n	8007d20 <_strtod_l+0xa18>
 8007d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f43f ada5 	beq.w	800786a <_strtod_l+0x562>
 8007d20:	2200      	movs	r2, #0
 8007d22:	4b36      	ldr	r3, [pc, #216]	@ (8007dfc <_strtod_l+0xaf4>)
 8007d24:	2600      	movs	r6, #0
 8007d26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d2a:	4f30      	ldr	r7, [pc, #192]	@ (8007dec <_strtod_l+0xae4>)
 8007d2c:	e7b3      	b.n	8007c96 <_strtod_l+0x98e>
 8007d2e:	2600      	movs	r6, #0
 8007d30:	4f2f      	ldr	r7, [pc, #188]	@ (8007df0 <_strtod_l+0xae8>)
 8007d32:	e7ac      	b.n	8007c8e <_strtod_l+0x986>
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	4b2d      	ldr	r3, [pc, #180]	@ (8007df0 <_strtod_l+0xae8>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f7f8 fbe6 	bl	800050c <__aeabi_dmul>
 8007d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0a1      	beq.n	8007c8e <_strtod_l+0x986>
 8007d4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d4e:	e7a2      	b.n	8007c96 <_strtod_l+0x98e>
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b26      	ldr	r3, [pc, #152]	@ (8007dec <_strtod_l+0xae4>)
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d5c:	e79b      	b.n	8007c96 <_strtod_l+0x98e>
 8007d5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1c1      	bne.n	8007cf0 <_strtod_l+0x9e8>
 8007d6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d70:	0d1b      	lsrs	r3, r3, #20
 8007d72:	051b      	lsls	r3, r3, #20
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d1bb      	bne.n	8007cf0 <_strtod_l+0x9e8>
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f9 fa50 	bl	8001220 <__aeabi_d2lz>
 8007d80:	f7f8 fb96 	bl	80004b0 <__aeabi_l2d>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fa06 	bl	800019c <__aeabi_dsub>
 8007d90:	460b      	mov	r3, r1
 8007d92:	4602      	mov	r2, r0
 8007d94:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d9e:	ea46 060a 	orr.w	r6, r6, sl
 8007da2:	431e      	orrs	r6, r3
 8007da4:	d069      	beq.n	8007e7a <_strtod_l+0xb72>
 8007da6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007dd0 <_strtod_l+0xac8>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fe20 	bl	80009f0 <__aeabi_dcmplt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f47f accf 	bne.w	8007754 <_strtod_l+0x44c>
 8007db6:	a308      	add	r3, pc, #32	@ (adr r3, 8007dd8 <_strtod_l+0xad0>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dc0:	f7f8 fe34 	bl	8000a2c <__aeabi_dcmpgt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d093      	beq.n	8007cf0 <_strtod_l+0x9e8>
 8007dc8:	e4c4      	b.n	8007754 <_strtod_l+0x44c>
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	94a03595 	.word	0x94a03595
 8007dd4:	3fdfffff 	.word	0x3fdfffff
 8007dd8:	35afe535 	.word	0x35afe535
 8007ddc:	3fe00000 	.word	0x3fe00000
 8007de0:	000fffff 	.word	0x000fffff
 8007de4:	7ff00000 	.word	0x7ff00000
 8007de8:	7fefffff 	.word	0x7fefffff
 8007dec:	3ff00000 	.word	0x3ff00000
 8007df0:	3fe00000 	.word	0x3fe00000
 8007df4:	7fe00000 	.word	0x7fe00000
 8007df8:	7c9fffff 	.word	0x7c9fffff
 8007dfc:	bff00000 	.word	0xbff00000
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	b323      	cbz	r3, 8007e4e <_strtod_l+0xb46>
 8007e04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e08:	d821      	bhi.n	8007e4e <_strtod_l+0xb46>
 8007e0a:	a327      	add	r3, pc, #156	@ (adr r3, 8007ea8 <_strtod_l+0xba0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fdf6 	bl	8000a04 <__aeabi_dcmple>
 8007e18:	b1a0      	cbz	r0, 8007e44 <_strtod_l+0xb3c>
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7f8 fe25 	bl	8000a6c <__aeabi_d2uiz>
 8007e22:	2801      	cmp	r0, #1
 8007e24:	bf38      	it	cc
 8007e26:	2001      	movcc	r0, #1
 8007e28:	f7f8 faf6 	bl	8000418 <__aeabi_ui2d>
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	b9fb      	cbnz	r3, 8007e74 <_strtod_l+0xb6c>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e38:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e4a:	1b5b      	subs	r3, r3, r5
 8007e4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e56:	f002 f96d 	bl	800a134 <__ulp>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fb53 	bl	800050c <__aeabi_dmul>
 8007e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e6a:	f7f8 f999 	bl	80001a0 <__adddf3>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	468b      	mov	fp, r1
 8007e72:	e776      	b.n	8007d62 <_strtod_l+0xa5a>
 8007e74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007e78:	e7e0      	b.n	8007e3c <_strtod_l+0xb34>
 8007e7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007eb0 <_strtod_l+0xba8>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 fdb6 	bl	80009f0 <__aeabi_dcmplt>
 8007e84:	e79e      	b.n	8007dc4 <_strtod_l+0xabc>
 8007e86:	2300      	movs	r3, #0
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	f7ff ba77 	b.w	8007382 <_strtod_l+0x7a>
 8007e94:	2a65      	cmp	r2, #101	@ 0x65
 8007e96:	f43f ab6e 	beq.w	8007576 <_strtod_l+0x26e>
 8007e9a:	2a45      	cmp	r2, #69	@ 0x45
 8007e9c:	f43f ab6b 	beq.w	8007576 <_strtod_l+0x26e>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f7ff bba6 	b.w	80075f2 <_strtod_l+0x2ea>
 8007ea6:	bf00      	nop
 8007ea8:	ffc00000 	.word	0xffc00000
 8007eac:	41dfffff 	.word	0x41dfffff
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fcfffff 	.word	0x3fcfffff

08007eb8 <strtod>:
 8007eb8:	460a      	mov	r2, r1
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4802      	ldr	r0, [pc, #8]	@ (8007ec8 <strtod+0x10>)
 8007ebe:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <strtod+0x14>)
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	f7ff ba21 	b.w	8007308 <_strtod_l>
 8007ec6:	bf00      	nop
 8007ec8:	200005c8 	.word	0x200005c8
 8007ecc:	2000045c 	.word	0x2000045c

08007ed0 <_strtol_l.constprop.0>:
 8007ed0:	2b24      	cmp	r3, #36	@ 0x24
 8007ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed6:	4686      	mov	lr, r0
 8007ed8:	4690      	mov	r8, r2
 8007eda:	d801      	bhi.n	8007ee0 <_strtol_l.constprop.0+0x10>
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d106      	bne.n	8007eee <_strtol_l.constprop.0+0x1e>
 8007ee0:	f001 f8ae 	bl	8009040 <__errno>
 8007ee4:	2316      	movs	r3, #22
 8007ee6:	6003      	str	r3, [r0, #0]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eee:	460d      	mov	r5, r1
 8007ef0:	4833      	ldr	r0, [pc, #204]	@ (8007fc0 <_strtol_l.constprop.0+0xf0>)
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ef8:	5d06      	ldrb	r6, [r0, r4]
 8007efa:	f016 0608 	ands.w	r6, r6, #8
 8007efe:	d1f8      	bne.n	8007ef2 <_strtol_l.constprop.0+0x22>
 8007f00:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f02:	d12d      	bne.n	8007f60 <_strtol_l.constprop.0+0x90>
 8007f04:	2601      	movs	r6, #1
 8007f06:	782c      	ldrb	r4, [r5, #0]
 8007f08:	1c95      	adds	r5, r2, #2
 8007f0a:	f033 0210 	bics.w	r2, r3, #16
 8007f0e:	d109      	bne.n	8007f24 <_strtol_l.constprop.0+0x54>
 8007f10:	2c30      	cmp	r4, #48	@ 0x30
 8007f12:	d12a      	bne.n	8007f6a <_strtol_l.constprop.0+0x9a>
 8007f14:	782a      	ldrb	r2, [r5, #0]
 8007f16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f1a:	2a58      	cmp	r2, #88	@ 0x58
 8007f1c:	d125      	bne.n	8007f6a <_strtol_l.constprop.0+0x9a>
 8007f1e:	2310      	movs	r3, #16
 8007f20:	786c      	ldrb	r4, [r5, #1]
 8007f22:	3502      	adds	r5, #2
 8007f24:	2200      	movs	r2, #0
 8007f26:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f2e:	fbbc f9f3 	udiv	r9, ip, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f3c:	2f09      	cmp	r7, #9
 8007f3e:	d81b      	bhi.n	8007f78 <_strtol_l.constprop.0+0xa8>
 8007f40:	463c      	mov	r4, r7
 8007f42:	42a3      	cmp	r3, r4
 8007f44:	dd27      	ble.n	8007f96 <_strtol_l.constprop.0+0xc6>
 8007f46:	1c57      	adds	r7, r2, #1
 8007f48:	d007      	beq.n	8007f5a <_strtol_l.constprop.0+0x8a>
 8007f4a:	4581      	cmp	r9, r0
 8007f4c:	d320      	bcc.n	8007f90 <_strtol_l.constprop.0+0xc0>
 8007f4e:	d101      	bne.n	8007f54 <_strtol_l.constprop.0+0x84>
 8007f50:	45a2      	cmp	sl, r4
 8007f52:	db1d      	blt.n	8007f90 <_strtol_l.constprop.0+0xc0>
 8007f54:	2201      	movs	r2, #1
 8007f56:	fb00 4003 	mla	r0, r0, r3, r4
 8007f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f5e:	e7eb      	b.n	8007f38 <_strtol_l.constprop.0+0x68>
 8007f60:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f62:	bf04      	itt	eq
 8007f64:	782c      	ldrbeq	r4, [r5, #0]
 8007f66:	1c95      	addeq	r5, r2, #2
 8007f68:	e7cf      	b.n	8007f0a <_strtol_l.constprop.0+0x3a>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1da      	bne.n	8007f24 <_strtol_l.constprop.0+0x54>
 8007f6e:	2c30      	cmp	r4, #48	@ 0x30
 8007f70:	bf0c      	ite	eq
 8007f72:	2308      	moveq	r3, #8
 8007f74:	230a      	movne	r3, #10
 8007f76:	e7d5      	b.n	8007f24 <_strtol_l.constprop.0+0x54>
 8007f78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f7c:	2f19      	cmp	r7, #25
 8007f7e:	d801      	bhi.n	8007f84 <_strtol_l.constprop.0+0xb4>
 8007f80:	3c37      	subs	r4, #55	@ 0x37
 8007f82:	e7de      	b.n	8007f42 <_strtol_l.constprop.0+0x72>
 8007f84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f88:	2f19      	cmp	r7, #25
 8007f8a:	d804      	bhi.n	8007f96 <_strtol_l.constprop.0+0xc6>
 8007f8c:	3c57      	subs	r4, #87	@ 0x57
 8007f8e:	e7d8      	b.n	8007f42 <_strtol_l.constprop.0+0x72>
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295
 8007f94:	e7e1      	b.n	8007f5a <_strtol_l.constprop.0+0x8a>
 8007f96:	1c53      	adds	r3, r2, #1
 8007f98:	d108      	bne.n	8007fac <_strtol_l.constprop.0+0xdc>
 8007f9a:	2322      	movs	r3, #34	@ 0x22
 8007f9c:	4660      	mov	r0, ip
 8007f9e:	f8ce 3000 	str.w	r3, [lr]
 8007fa2:	f1b8 0f00 	cmp.w	r8, #0
 8007fa6:	d0a0      	beq.n	8007eea <_strtol_l.constprop.0+0x1a>
 8007fa8:	1e69      	subs	r1, r5, #1
 8007faa:	e006      	b.n	8007fba <_strtol_l.constprop.0+0xea>
 8007fac:	b106      	cbz	r6, 8007fb0 <_strtol_l.constprop.0+0xe0>
 8007fae:	4240      	negs	r0, r0
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	d099      	beq.n	8007eea <_strtol_l.constprop.0+0x1a>
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1f6      	bne.n	8007fa8 <_strtol_l.constprop.0+0xd8>
 8007fba:	f8c8 1000 	str.w	r1, [r8]
 8007fbe:	e794      	b.n	8007eea <_strtol_l.constprop.0+0x1a>
 8007fc0:	0800c859 	.word	0x0800c859

08007fc4 <_strtol_r>:
 8007fc4:	f7ff bf84 	b.w	8007ed0 <_strtol_l.constprop.0>

08007fc8 <strtol>:
 8007fc8:	4613      	mov	r3, r2
 8007fca:	460a      	mov	r2, r1
 8007fcc:	4601      	mov	r1, r0
 8007fce:	4802      	ldr	r0, [pc, #8]	@ (8007fd8 <strtol+0x10>)
 8007fd0:	6800      	ldr	r0, [r0, #0]
 8007fd2:	f7ff bf7d 	b.w	8007ed0 <_strtol_l.constprop.0>
 8007fd6:	bf00      	nop
 8007fd8:	200005c8 	.word	0x200005c8

08007fdc <std>:
 8007fdc:	2300      	movs	r3, #0
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fea:	6083      	str	r3, [r0, #8]
 8007fec:	8181      	strh	r1, [r0, #12]
 8007fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ff0:	81c2      	strh	r2, [r0, #14]
 8007ff2:	6183      	str	r3, [r0, #24]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	305c      	adds	r0, #92	@ 0x5c
 8007ffa:	f000 f8f6 	bl	80081ea <memset>
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <std+0x58>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	6263      	str	r3, [r4, #36]	@ 0x24
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <std+0x5c>)
 8008006:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008008:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <std+0x60>)
 800800a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800800c:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <std+0x64>)
 800800e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008010:	4b0c      	ldr	r3, [pc, #48]	@ (8008044 <std+0x68>)
 8008012:	429c      	cmp	r4, r3
 8008014:	d006      	beq.n	8008024 <std+0x48>
 8008016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800801a:	4294      	cmp	r4, r2
 800801c:	d002      	beq.n	8008024 <std+0x48>
 800801e:	33d0      	adds	r3, #208	@ 0xd0
 8008020:	429c      	cmp	r4, r3
 8008022:	d105      	bne.n	8008030 <std+0x54>
 8008024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800802c:	f001 b832 	b.w	8009094 <__retarget_lock_init_recursive>
 8008030:	bd10      	pop	{r4, pc}
 8008032:	bf00      	nop
 8008034:	08008161 	.word	0x08008161
 8008038:	08008187 	.word	0x08008187
 800803c:	080081bf 	.word	0x080081bf
 8008040:	080081e3 	.word	0x080081e3
 8008044:	20000904 	.word	0x20000904

08008048 <stdio_exit_handler>:
 8008048:	4a02      	ldr	r2, [pc, #8]	@ (8008054 <stdio_exit_handler+0xc>)
 800804a:	4903      	ldr	r1, [pc, #12]	@ (8008058 <stdio_exit_handler+0x10>)
 800804c:	4803      	ldr	r0, [pc, #12]	@ (800805c <stdio_exit_handler+0x14>)
 800804e:	f000 b869 	b.w	8008124 <_fwalk_sglue>
 8008052:	bf00      	nop
 8008054:	20000448 	.word	0x20000448
 8008058:	0800a5ad 	.word	0x0800a5ad
 800805c:	200005cc 	.word	0x200005cc

08008060 <cleanup_stdio>:
 8008060:	6841      	ldr	r1, [r0, #4]
 8008062:	4b0c      	ldr	r3, [pc, #48]	@ (8008094 <cleanup_stdio+0x34>)
 8008064:	b510      	push	{r4, lr}
 8008066:	4299      	cmp	r1, r3
 8008068:	4604      	mov	r4, r0
 800806a:	d001      	beq.n	8008070 <cleanup_stdio+0x10>
 800806c:	f002 fa9e 	bl	800a5ac <_fflush_r>
 8008070:	68a1      	ldr	r1, [r4, #8]
 8008072:	4b09      	ldr	r3, [pc, #36]	@ (8008098 <cleanup_stdio+0x38>)
 8008074:	4299      	cmp	r1, r3
 8008076:	d002      	beq.n	800807e <cleanup_stdio+0x1e>
 8008078:	4620      	mov	r0, r4
 800807a:	f002 fa97 	bl	800a5ac <_fflush_r>
 800807e:	68e1      	ldr	r1, [r4, #12]
 8008080:	4b06      	ldr	r3, [pc, #24]	@ (800809c <cleanup_stdio+0x3c>)
 8008082:	4299      	cmp	r1, r3
 8008084:	d004      	beq.n	8008090 <cleanup_stdio+0x30>
 8008086:	4620      	mov	r0, r4
 8008088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800808c:	f002 ba8e 	b.w	800a5ac <_fflush_r>
 8008090:	bd10      	pop	{r4, pc}
 8008092:	bf00      	nop
 8008094:	20000904 	.word	0x20000904
 8008098:	2000096c 	.word	0x2000096c
 800809c:	200009d4 	.word	0x200009d4

080080a0 <global_stdio_init.part.0>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <global_stdio_init.part.0+0x30>)
 80080a4:	4c0b      	ldr	r4, [pc, #44]	@ (80080d4 <global_stdio_init.part.0+0x34>)
 80080a6:	4a0c      	ldr	r2, [pc, #48]	@ (80080d8 <global_stdio_init.part.0+0x38>)
 80080a8:	4620      	mov	r0, r4
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	2104      	movs	r1, #4
 80080ae:	2200      	movs	r2, #0
 80080b0:	f7ff ff94 	bl	8007fdc <std>
 80080b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080b8:	2201      	movs	r2, #1
 80080ba:	2109      	movs	r1, #9
 80080bc:	f7ff ff8e 	bl	8007fdc <std>
 80080c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080c4:	2202      	movs	r2, #2
 80080c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ca:	2112      	movs	r1, #18
 80080cc:	f7ff bf86 	b.w	8007fdc <std>
 80080d0:	20000a3c 	.word	0x20000a3c
 80080d4:	20000904 	.word	0x20000904
 80080d8:	08008049 	.word	0x08008049

080080dc <__sfp_lock_acquire>:
 80080dc:	4801      	ldr	r0, [pc, #4]	@ (80080e4 <__sfp_lock_acquire+0x8>)
 80080de:	f000 bfdb 	b.w	8009098 <__retarget_lock_acquire_recursive>
 80080e2:	bf00      	nop
 80080e4:	20000a6b 	.word	0x20000a6b

080080e8 <__sfp_lock_release>:
 80080e8:	4801      	ldr	r0, [pc, #4]	@ (80080f0 <__sfp_lock_release+0x8>)
 80080ea:	f000 bfd7 	b.w	800909c <__retarget_lock_release_recursive>
 80080ee:	bf00      	nop
 80080f0:	20000a6b 	.word	0x20000a6b

080080f4 <__sinit>:
 80080f4:	b510      	push	{r4, lr}
 80080f6:	4604      	mov	r4, r0
 80080f8:	f7ff fff0 	bl	80080dc <__sfp_lock_acquire>
 80080fc:	6a23      	ldr	r3, [r4, #32]
 80080fe:	b11b      	cbz	r3, 8008108 <__sinit+0x14>
 8008100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008104:	f7ff bff0 	b.w	80080e8 <__sfp_lock_release>
 8008108:	4b04      	ldr	r3, [pc, #16]	@ (800811c <__sinit+0x28>)
 800810a:	6223      	str	r3, [r4, #32]
 800810c:	4b04      	ldr	r3, [pc, #16]	@ (8008120 <__sinit+0x2c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1f5      	bne.n	8008100 <__sinit+0xc>
 8008114:	f7ff ffc4 	bl	80080a0 <global_stdio_init.part.0>
 8008118:	e7f2      	b.n	8008100 <__sinit+0xc>
 800811a:	bf00      	nop
 800811c:	08008061 	.word	0x08008061
 8008120:	20000a3c 	.word	0x20000a3c

08008124 <_fwalk_sglue>:
 8008124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008128:	4607      	mov	r7, r0
 800812a:	4688      	mov	r8, r1
 800812c:	4614      	mov	r4, r2
 800812e:	2600      	movs	r6, #0
 8008130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008134:	f1b9 0901 	subs.w	r9, r9, #1
 8008138:	d505      	bpl.n	8008146 <_fwalk_sglue+0x22>
 800813a:	6824      	ldr	r4, [r4, #0]
 800813c:	2c00      	cmp	r4, #0
 800813e:	d1f7      	bne.n	8008130 <_fwalk_sglue+0xc>
 8008140:	4630      	mov	r0, r6
 8008142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d907      	bls.n	800815c <_fwalk_sglue+0x38>
 800814c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008150:	3301      	adds	r3, #1
 8008152:	d003      	beq.n	800815c <_fwalk_sglue+0x38>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	47c0      	blx	r8
 800815a:	4306      	orrs	r6, r0
 800815c:	3568      	adds	r5, #104	@ 0x68
 800815e:	e7e9      	b.n	8008134 <_fwalk_sglue+0x10>

08008160 <__sread>:
 8008160:	b510      	push	{r4, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	f000 ff46 	bl	8008ff8 <_read_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	bfab      	itete	ge
 8008170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008172:	89a3      	ldrhlt	r3, [r4, #12]
 8008174:	181b      	addge	r3, r3, r0
 8008176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800817a:	bfac      	ite	ge
 800817c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800817e:	81a3      	strhlt	r3, [r4, #12]
 8008180:	bd10      	pop	{r4, pc}

08008182 <__seofread>:
 8008182:	2000      	movs	r0, #0
 8008184:	4770      	bx	lr

08008186 <__swrite>:
 8008186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	461f      	mov	r7, r3
 800818c:	898b      	ldrh	r3, [r1, #12]
 800818e:	4605      	mov	r5, r0
 8008190:	05db      	lsls	r3, r3, #23
 8008192:	460c      	mov	r4, r1
 8008194:	4616      	mov	r6, r2
 8008196:	d505      	bpl.n	80081a4 <__swrite+0x1e>
 8008198:	2302      	movs	r3, #2
 800819a:	2200      	movs	r2, #0
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	f000 ff18 	bl	8008fd4 <_lseek_r>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	4632      	mov	r2, r6
 80081a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	4628      	mov	r0, r5
 80081b0:	463b      	mov	r3, r7
 80081b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ba:	f000 bf2f 	b.w	800901c <_write_r>

080081be <__sseek>:
 80081be:	b510      	push	{r4, lr}
 80081c0:	460c      	mov	r4, r1
 80081c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c6:	f000 ff05 	bl	8008fd4 <_lseek_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	bf15      	itete	ne
 80081d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081da:	81a3      	strheq	r3, [r4, #12]
 80081dc:	bf18      	it	ne
 80081de:	81a3      	strhne	r3, [r4, #12]
 80081e0:	bd10      	pop	{r4, pc}

080081e2 <__sclose>:
 80081e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e6:	f000 bee5 	b.w	8008fb4 <_close_r>

080081ea <memset>:
 80081ea:	4603      	mov	r3, r0
 80081ec:	4402      	add	r2, r0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d100      	bne.n	80081f4 <memset+0xa>
 80081f2:	4770      	bx	lr
 80081f4:	f803 1b01 	strb.w	r1, [r3], #1
 80081f8:	e7f9      	b.n	80081ee <memset+0x4>

080081fa <strncmp>:
 80081fa:	b510      	push	{r4, lr}
 80081fc:	b16a      	cbz	r2, 800821a <strncmp+0x20>
 80081fe:	3901      	subs	r1, #1
 8008200:	1884      	adds	r4, r0, r2
 8008202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008206:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800820a:	429a      	cmp	r2, r3
 800820c:	d103      	bne.n	8008216 <strncmp+0x1c>
 800820e:	42a0      	cmp	r0, r4
 8008210:	d001      	beq.n	8008216 <strncmp+0x1c>
 8008212:	2a00      	cmp	r2, #0
 8008214:	d1f5      	bne.n	8008202 <strncmp+0x8>
 8008216:	1ad0      	subs	r0, r2, r3
 8008218:	bd10      	pop	{r4, pc}
 800821a:	4610      	mov	r0, r2
 800821c:	e7fc      	b.n	8008218 <strncmp+0x1e>
	...

08008220 <strtok>:
 8008220:	4b16      	ldr	r3, [pc, #88]	@ (800827c <strtok+0x5c>)
 8008222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008226:	681f      	ldr	r7, [r3, #0]
 8008228:	4605      	mov	r5, r0
 800822a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800822c:	460e      	mov	r6, r1
 800822e:	b9ec      	cbnz	r4, 800826c <strtok+0x4c>
 8008230:	2050      	movs	r0, #80	@ 0x50
 8008232:	f001 fb3d 	bl	80098b0 <malloc>
 8008236:	4602      	mov	r2, r0
 8008238:	6478      	str	r0, [r7, #68]	@ 0x44
 800823a:	b920      	cbnz	r0, 8008246 <strtok+0x26>
 800823c:	215b      	movs	r1, #91	@ 0x5b
 800823e:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <strtok+0x60>)
 8008240:	4810      	ldr	r0, [pc, #64]	@ (8008284 <strtok+0x64>)
 8008242:	f000 ff49 	bl	80090d8 <__assert_func>
 8008246:	e9c0 4400 	strd	r4, r4, [r0]
 800824a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800824e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008252:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008256:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800825a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800825e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008262:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008266:	6184      	str	r4, [r0, #24]
 8008268:	7704      	strb	r4, [r0, #28]
 800826a:	6244      	str	r4, [r0, #36]	@ 0x24
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008272:	2301      	movs	r3, #1
 8008274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	f000 b806 	b.w	8008288 <__strtok_r>
 800827c:	200005c8 	.word	0x200005c8
 8008280:	0800c959 	.word	0x0800c959
 8008284:	0800c970 	.word	0x0800c970

08008288 <__strtok_r>:
 8008288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828a:	4604      	mov	r4, r0
 800828c:	b908      	cbnz	r0, 8008292 <__strtok_r+0xa>
 800828e:	6814      	ldr	r4, [r2, #0]
 8008290:	b144      	cbz	r4, 80082a4 <__strtok_r+0x1c>
 8008292:	460f      	mov	r7, r1
 8008294:	4620      	mov	r0, r4
 8008296:	f814 5b01 	ldrb.w	r5, [r4], #1
 800829a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800829e:	b91e      	cbnz	r6, 80082a8 <__strtok_r+0x20>
 80082a0:	b965      	cbnz	r5, 80082bc <__strtok_r+0x34>
 80082a2:	6015      	str	r5, [r2, #0]
 80082a4:	2000      	movs	r0, #0
 80082a6:	e005      	b.n	80082b4 <__strtok_r+0x2c>
 80082a8:	42b5      	cmp	r5, r6
 80082aa:	d1f6      	bne.n	800829a <__strtok_r+0x12>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f0      	bne.n	8008292 <__strtok_r+0xa>
 80082b0:	6014      	str	r4, [r2, #0]
 80082b2:	7003      	strb	r3, [r0, #0]
 80082b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b6:	461c      	mov	r4, r3
 80082b8:	e00c      	b.n	80082d4 <__strtok_r+0x4c>
 80082ba:	b915      	cbnz	r5, 80082c2 <__strtok_r+0x3a>
 80082bc:	460e      	mov	r6, r1
 80082be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80082c6:	42ab      	cmp	r3, r5
 80082c8:	d1f7      	bne.n	80082ba <__strtok_r+0x32>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f3      	beq.n	80082b6 <__strtok_r+0x2e>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80082d4:	6014      	str	r4, [r2, #0]
 80082d6:	e7ed      	b.n	80082b4 <__strtok_r+0x2c>

080082d8 <localtime>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <localtime+0x30>)
 80082dc:	4604      	mov	r4, r0
 80082de:	681d      	ldr	r5, [r3, #0]
 80082e0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80082e2:	b953      	cbnz	r3, 80082fa <localtime+0x22>
 80082e4:	2024      	movs	r0, #36	@ 0x24
 80082e6:	f001 fae3 	bl	80098b0 <malloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6368      	str	r0, [r5, #52]	@ 0x34
 80082ee:	b920      	cbnz	r0, 80082fa <localtime+0x22>
 80082f0:	2132      	movs	r1, #50	@ 0x32
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <localtime+0x34>)
 80082f4:	4806      	ldr	r0, [pc, #24]	@ (8008310 <localtime+0x38>)
 80082f6:	f000 feef 	bl	80090d8 <__assert_func>
 80082fa:	4620      	mov	r0, r4
 80082fc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80082fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008302:	f000 b807 	b.w	8008314 <localtime_r>
 8008306:	bf00      	nop
 8008308:	200005c8 	.word	0x200005c8
 800830c:	0800c959 	.word	0x0800c959
 8008310:	0800c9ca 	.word	0x0800c9ca

08008314 <localtime_r>:
 8008314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	4680      	mov	r8, r0
 800831c:	f002 f9aa 	bl	800a674 <__gettzinfo>
 8008320:	4621      	mov	r1, r4
 8008322:	4605      	mov	r5, r0
 8008324:	4640      	mov	r0, r8
 8008326:	f002 f9a9 	bl	800a67c <gmtime_r>
 800832a:	6943      	ldr	r3, [r0, #20]
 800832c:	4604      	mov	r4, r0
 800832e:	0799      	lsls	r1, r3, #30
 8008330:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8008334:	d106      	bne.n	8008344 <localtime_r+0x30>
 8008336:	2264      	movs	r2, #100	@ 0x64
 8008338:	fb97 f3f2 	sdiv	r3, r7, r2
 800833c:	fb02 7313 	mls	r3, r2, r3, r7
 8008340:	2b00      	cmp	r3, #0
 8008342:	d170      	bne.n	8008426 <localtime_r+0x112>
 8008344:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008348:	fb97 f3f2 	sdiv	r3, r7, r2
 800834c:	fb02 7313 	mls	r3, r2, r3, r7
 8008350:	fab3 f383 	clz	r3, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	2230      	movs	r2, #48	@ 0x30
 8008358:	4e63      	ldr	r6, [pc, #396]	@ (80084e8 <localtime_r+0x1d4>)
 800835a:	fb02 6603 	mla	r6, r2, r3, r6
 800835e:	f000 fbf3 	bl	8008b48 <__tz_lock>
 8008362:	f000 fbfd 	bl	8008b60 <_tzset_unlocked>
 8008366:	4b61      	ldr	r3, [pc, #388]	@ (80084ec <localtime_r+0x1d8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d06a      	beq.n	8008444 <localtime_r+0x130>
 800836e:	686b      	ldr	r3, [r5, #4]
 8008370:	42bb      	cmp	r3, r7
 8008372:	d15a      	bne.n	800842a <localtime_r+0x116>
 8008374:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008378:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800837c:	682f      	ldr	r7, [r5, #0]
 800837e:	2f00      	cmp	r7, #0
 8008380:	d15b      	bne.n	800843a <localtime_r+0x126>
 8008382:	4282      	cmp	r2, r0
 8008384:	eb73 0101 	sbcs.w	r1, r3, r1
 8008388:	db5e      	blt.n	8008448 <localtime_r+0x134>
 800838a:	2301      	movs	r3, #1
 800838c:	6223      	str	r3, [r4, #32]
 800838e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008390:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008394:	fb93 f0f2 	sdiv	r0, r3, r2
 8008398:	fb02 3310 	mls	r3, r2, r0, r3
 800839c:	223c      	movs	r2, #60	@ 0x3c
 800839e:	fb93 f5f2 	sdiv	r5, r3, r2
 80083a2:	fb02 3215 	mls	r2, r2, r5, r3
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	68a2      	ldr	r2, [r4, #8]
 80083ae:	1b49      	subs	r1, r1, r5
 80083b0:	1a12      	subs	r2, r2, r0
 80083b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	6061      	str	r1, [r4, #4]
 80083b8:	60a2      	str	r2, [r4, #8]
 80083ba:	dd51      	ble.n	8008460 <localtime_r+0x14c>
 80083bc:	3101      	adds	r1, #1
 80083be:	6061      	str	r1, [r4, #4]
 80083c0:	3b3c      	subs	r3, #60	@ 0x3c
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80083c8:	dd50      	ble.n	800846c <localtime_r+0x158>
 80083ca:	3201      	adds	r2, #1
 80083cc:	60a2      	str	r2, [r4, #8]
 80083ce:	3b3c      	subs	r3, #60	@ 0x3c
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	2b17      	cmp	r3, #23
 80083d6:	dd4f      	ble.n	8008478 <localtime_r+0x164>
 80083d8:	69e2      	ldr	r2, [r4, #28]
 80083da:	3b18      	subs	r3, #24
 80083dc:	3201      	adds	r2, #1
 80083de:	61e2      	str	r2, [r4, #28]
 80083e0:	69a2      	ldr	r2, [r4, #24]
 80083e2:	60a3      	str	r3, [r4, #8]
 80083e4:	3201      	adds	r2, #1
 80083e6:	2a07      	cmp	r2, #7
 80083e8:	bfa8      	it	ge
 80083ea:	2200      	movge	r2, #0
 80083ec:	61a2      	str	r2, [r4, #24]
 80083ee:	68e2      	ldr	r2, [r4, #12]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	3201      	adds	r2, #1
 80083f4:	60e2      	str	r2, [r4, #12]
 80083f6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80083fa:	428a      	cmp	r2, r1
 80083fc:	dd0e      	ble.n	800841c <localtime_r+0x108>
 80083fe:	2b0b      	cmp	r3, #11
 8008400:	eba2 0201 	sub.w	r2, r2, r1
 8008404:	60e2      	str	r2, [r4, #12]
 8008406:	f103 0201 	add.w	r2, r3, #1
 800840a:	bf05      	ittet	eq
 800840c:	2200      	moveq	r2, #0
 800840e:	6963      	ldreq	r3, [r4, #20]
 8008410:	6122      	strne	r2, [r4, #16]
 8008412:	3301      	addeq	r3, #1
 8008414:	bf02      	ittt	eq
 8008416:	6122      	streq	r2, [r4, #16]
 8008418:	6163      	streq	r3, [r4, #20]
 800841a:	61e2      	streq	r2, [r4, #28]
 800841c:	f000 fb9a 	bl	8008b54 <__tz_unlock>
 8008420:	4620      	mov	r0, r4
 8008422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008426:	2301      	movs	r3, #1
 8008428:	e795      	b.n	8008356 <localtime_r+0x42>
 800842a:	4638      	mov	r0, r7
 800842c:	f000 fae4 	bl	80089f8 <__tzcalc_limits>
 8008430:	2800      	cmp	r0, #0
 8008432:	d19f      	bne.n	8008374 <localtime_r+0x60>
 8008434:	f04f 33ff 	mov.w	r3, #4294967295
 8008438:	e004      	b.n	8008444 <localtime_r+0x130>
 800843a:	4282      	cmp	r2, r0
 800843c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008440:	da02      	bge.n	8008448 <localtime_r+0x134>
 8008442:	2300      	movs	r3, #0
 8008444:	6223      	str	r3, [r4, #32]
 8008446:	e009      	b.n	800845c <localtime_r+0x148>
 8008448:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800844c:	4282      	cmp	r2, r0
 800844e:	418b      	sbcs	r3, r1
 8008450:	bfb4      	ite	lt
 8008452:	2301      	movlt	r3, #1
 8008454:	2300      	movge	r3, #0
 8008456:	6223      	str	r3, [r4, #32]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d198      	bne.n	800838e <localtime_r+0x7a>
 800845c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800845e:	e797      	b.n	8008390 <localtime_r+0x7c>
 8008460:	2b00      	cmp	r3, #0
 8008462:	daaf      	bge.n	80083c4 <localtime_r+0xb0>
 8008464:	3901      	subs	r1, #1
 8008466:	6061      	str	r1, [r4, #4]
 8008468:	333c      	adds	r3, #60	@ 0x3c
 800846a:	e7aa      	b.n	80083c2 <localtime_r+0xae>
 800846c:	2b00      	cmp	r3, #0
 800846e:	dab0      	bge.n	80083d2 <localtime_r+0xbe>
 8008470:	3a01      	subs	r2, #1
 8008472:	60a2      	str	r2, [r4, #8]
 8008474:	333c      	adds	r3, #60	@ 0x3c
 8008476:	e7ab      	b.n	80083d0 <localtime_r+0xbc>
 8008478:	2b00      	cmp	r3, #0
 800847a:	dacf      	bge.n	800841c <localtime_r+0x108>
 800847c:	69e2      	ldr	r2, [r4, #28]
 800847e:	3318      	adds	r3, #24
 8008480:	3a01      	subs	r2, #1
 8008482:	61e2      	str	r2, [r4, #28]
 8008484:	69a2      	ldr	r2, [r4, #24]
 8008486:	60a3      	str	r3, [r4, #8]
 8008488:	3a01      	subs	r2, #1
 800848a:	bf48      	it	mi
 800848c:	2206      	movmi	r2, #6
 800848e:	61a2      	str	r2, [r4, #24]
 8008490:	68e2      	ldr	r2, [r4, #12]
 8008492:	3a01      	subs	r2, #1
 8008494:	60e2      	str	r2, [r4, #12]
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1c0      	bne.n	800841c <localtime_r+0x108>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	3b01      	subs	r3, #1
 800849e:	d405      	bmi.n	80084ac <localtime_r+0x198>
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80084a8:	60e3      	str	r3, [r4, #12]
 80084aa:	e7b7      	b.n	800841c <localtime_r+0x108>
 80084ac:	230b      	movs	r3, #11
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	6963      	ldr	r3, [r4, #20]
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	6162      	str	r2, [r4, #20]
 80084b6:	0792      	lsls	r2, r2, #30
 80084b8:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80084bc:	d105      	bne.n	80084ca <localtime_r+0x1b6>
 80084be:	2164      	movs	r1, #100	@ 0x64
 80084c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80084c4:	fb01 3212 	mls	r2, r1, r2, r3
 80084c8:	b962      	cbnz	r2, 80084e4 <localtime_r+0x1d0>
 80084ca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80084ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80084d2:	fb02 3311 	mls	r3, r2, r1, r3
 80084d6:	fab3 f383 	clz	r3, r3
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80084e0:	61e3      	str	r3, [r4, #28]
 80084e2:	e7de      	b.n	80084a2 <localtime_r+0x18e>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f9      	b.n	80084dc <localtime_r+0x1c8>
 80084e8:	0800ca84 	.word	0x0800ca84
 80084ec:	20000a60 	.word	0x20000a60

080084f0 <validate_structure>:
 80084f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084f2:	6801      	ldr	r1, [r0, #0]
 80084f4:	4604      	mov	r4, r0
 80084f6:	293b      	cmp	r1, #59	@ 0x3b
 80084f8:	d911      	bls.n	800851e <validate_structure+0x2e>
 80084fa:	223c      	movs	r2, #60	@ 0x3c
 80084fc:	4668      	mov	r0, sp
 80084fe:	f000 fe09 	bl	8009114 <div>
 8008502:	9a01      	ldr	r2, [sp, #4]
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	9900      	ldr	r1, [sp, #0]
 8008508:	2a00      	cmp	r2, #0
 800850a:	440b      	add	r3, r1
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bfbb      	ittet	lt
 8008510:	323c      	addlt	r2, #60	@ 0x3c
 8008512:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008516:	6022      	strge	r2, [r4, #0]
 8008518:	6022      	strlt	r2, [r4, #0]
 800851a:	bfb8      	it	lt
 800851c:	6063      	strlt	r3, [r4, #4]
 800851e:	6861      	ldr	r1, [r4, #4]
 8008520:	293b      	cmp	r1, #59	@ 0x3b
 8008522:	d911      	bls.n	8008548 <validate_structure+0x58>
 8008524:	223c      	movs	r2, #60	@ 0x3c
 8008526:	4668      	mov	r0, sp
 8008528:	f000 fdf4 	bl	8009114 <div>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	9900      	ldr	r1, [sp, #0]
 8008532:	2a00      	cmp	r2, #0
 8008534:	440b      	add	r3, r1
 8008536:	60a3      	str	r3, [r4, #8]
 8008538:	bfbb      	ittet	lt
 800853a:	323c      	addlt	r2, #60	@ 0x3c
 800853c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008540:	6062      	strge	r2, [r4, #4]
 8008542:	6062      	strlt	r2, [r4, #4]
 8008544:	bfb8      	it	lt
 8008546:	60a3      	strlt	r3, [r4, #8]
 8008548:	68a1      	ldr	r1, [r4, #8]
 800854a:	2917      	cmp	r1, #23
 800854c:	d911      	bls.n	8008572 <validate_structure+0x82>
 800854e:	2218      	movs	r2, #24
 8008550:	4668      	mov	r0, sp
 8008552:	f000 fddf 	bl	8009114 <div>
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	68e3      	ldr	r3, [r4, #12]
 800855a:	9900      	ldr	r1, [sp, #0]
 800855c:	2a00      	cmp	r2, #0
 800855e:	440b      	add	r3, r1
 8008560:	60e3      	str	r3, [r4, #12]
 8008562:	bfbb      	ittet	lt
 8008564:	3218      	addlt	r2, #24
 8008566:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800856a:	60a2      	strge	r2, [r4, #8]
 800856c:	60a2      	strlt	r2, [r4, #8]
 800856e:	bfb8      	it	lt
 8008570:	60e3      	strlt	r3, [r4, #12]
 8008572:	6921      	ldr	r1, [r4, #16]
 8008574:	290b      	cmp	r1, #11
 8008576:	d911      	bls.n	800859c <validate_structure+0xac>
 8008578:	220c      	movs	r2, #12
 800857a:	4668      	mov	r0, sp
 800857c:	f000 fdca 	bl	8009114 <div>
 8008580:	9a01      	ldr	r2, [sp, #4]
 8008582:	6963      	ldr	r3, [r4, #20]
 8008584:	9900      	ldr	r1, [sp, #0]
 8008586:	2a00      	cmp	r2, #0
 8008588:	440b      	add	r3, r1
 800858a:	6163      	str	r3, [r4, #20]
 800858c:	bfbb      	ittet	lt
 800858e:	320c      	addlt	r2, #12
 8008590:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008594:	6122      	strge	r2, [r4, #16]
 8008596:	6122      	strlt	r2, [r4, #16]
 8008598:	bfb8      	it	lt
 800859a:	6163      	strlt	r3, [r4, #20]
 800859c:	6963      	ldr	r3, [r4, #20]
 800859e:	079a      	lsls	r2, r3, #30
 80085a0:	d11c      	bne.n	80085dc <validate_structure+0xec>
 80085a2:	2164      	movs	r1, #100	@ 0x64
 80085a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80085a8:	fb01 3212 	mls	r2, r1, r2, r3
 80085ac:	b9c2      	cbnz	r2, 80085e0 <validate_structure+0xf0>
 80085ae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80085b2:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80085b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80085ba:	fb02 3311 	mls	r3, r2, r1, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf14      	ite	ne
 80085c2:	231c      	movne	r3, #28
 80085c4:	231d      	moveq	r3, #29
 80085c6:	68e2      	ldr	r2, [r4, #12]
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	dc0b      	bgt.n	80085e4 <validate_structure+0xf4>
 80085cc:	200b      	movs	r0, #11
 80085ce:	2164      	movs	r1, #100	@ 0x64
 80085d0:	4d30      	ldr	r5, [pc, #192]	@ (8008694 <validate_structure+0x1a4>)
 80085d2:	68e6      	ldr	r6, [r4, #12]
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	dd30      	ble.n	800863a <validate_structure+0x14a>
 80085d8:	b003      	add	sp, #12
 80085da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085dc:	231c      	movs	r3, #28
 80085de:	e7f2      	b.n	80085c6 <validate_structure+0xd6>
 80085e0:	231d      	movs	r3, #29
 80085e2:	e7f0      	b.n	80085c6 <validate_structure+0xd6>
 80085e4:	4d2b      	ldr	r5, [pc, #172]	@ (8008694 <validate_structure+0x1a4>)
 80085e6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80085ea:	2a01      	cmp	r2, #1
 80085ec:	bf0c      	ite	eq
 80085ee:	4618      	moveq	r0, r3
 80085f0:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80085f4:	4281      	cmp	r1, r0
 80085f6:	ddef      	ble.n	80085d8 <validate_structure+0xe8>
 80085f8:	3201      	adds	r2, #1
 80085fa:	1a09      	subs	r1, r1, r0
 80085fc:	2a0c      	cmp	r2, #12
 80085fe:	60e1      	str	r1, [r4, #12]
 8008600:	6122      	str	r2, [r4, #16]
 8008602:	d1f0      	bne.n	80085e6 <validate_structure+0xf6>
 8008604:	2100      	movs	r1, #0
 8008606:	6963      	ldr	r3, [r4, #20]
 8008608:	6121      	str	r1, [r4, #16]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	0791      	lsls	r1, r2, #30
 800860e:	6162      	str	r2, [r4, #20]
 8008610:	d13c      	bne.n	800868c <validate_structure+0x19c>
 8008612:	2164      	movs	r1, #100	@ 0x64
 8008614:	fb92 f0f1 	sdiv	r0, r2, r1
 8008618:	fb01 2210 	mls	r2, r1, r0, r2
 800861c:	2a00      	cmp	r2, #0
 800861e:	d137      	bne.n	8008690 <validate_structure+0x1a0>
 8008620:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008624:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8008628:	fb93 f1f2 	sdiv	r1, r3, r2
 800862c:	fb02 3311 	mls	r3, r2, r1, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf14      	ite	ne
 8008634:	231c      	movne	r3, #28
 8008636:	231d      	moveq	r3, #29
 8008638:	e7d5      	b.n	80085e6 <validate_structure+0xf6>
 800863a:	6922      	ldr	r2, [r4, #16]
 800863c:	3a01      	subs	r2, #1
 800863e:	6122      	str	r2, [r4, #16]
 8008640:	3201      	adds	r2, #1
 8008642:	d116      	bne.n	8008672 <validate_structure+0x182>
 8008644:	6963      	ldr	r3, [r4, #20]
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	0797      	lsls	r7, r2, #30
 800864a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800864e:	d119      	bne.n	8008684 <validate_structure+0x194>
 8008650:	fb92 f7f1 	sdiv	r7, r2, r1
 8008654:	fb01 2217 	mls	r2, r1, r7, r2
 8008658:	b9b2      	cbnz	r2, 8008688 <validate_structure+0x198>
 800865a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800865e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8008662:	fb93 f7f2 	sdiv	r7, r3, r2
 8008666:	fb02 3317 	mls	r3, r2, r7, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf14      	ite	ne
 800866e:	231c      	movne	r3, #28
 8008670:	231d      	moveq	r3, #29
 8008672:	6922      	ldr	r2, [r4, #16]
 8008674:	2a01      	cmp	r2, #1
 8008676:	bf0c      	ite	eq
 8008678:	461a      	moveq	r2, r3
 800867a:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800867e:	4432      	add	r2, r6
 8008680:	60e2      	str	r2, [r4, #12]
 8008682:	e7a6      	b.n	80085d2 <validate_structure+0xe2>
 8008684:	231c      	movs	r3, #28
 8008686:	e7f4      	b.n	8008672 <validate_structure+0x182>
 8008688:	231d      	movs	r3, #29
 800868a:	e7f2      	b.n	8008672 <validate_structure+0x182>
 800868c:	231c      	movs	r3, #28
 800868e:	e7aa      	b.n	80085e6 <validate_structure+0xf6>
 8008690:	231d      	movs	r3, #29
 8008692:	e7a8      	b.n	80085e6 <validate_structure+0xf6>
 8008694:	0800ca54 	.word	0x0800ca54

08008698 <mktime>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	b085      	sub	sp, #20
 800869e:	4607      	mov	r7, r0
 80086a0:	f001 ffe8 	bl	800a674 <__gettzinfo>
 80086a4:	4681      	mov	r9, r0
 80086a6:	4638      	mov	r0, r7
 80086a8:	f7ff ff22 	bl	80084f0 <validate_structure>
 80086ac:	e9d7 4300 	ldrd	r4, r3, [r7]
 80086b0:	223c      	movs	r2, #60	@ 0x3c
 80086b2:	fb02 4403 	mla	r4, r2, r3, r4
 80086b6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	697d      	ldr	r5, [r7, #20]
 80086be:	fb02 4403 	mla	r4, r2, r3, r4
 80086c2:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 80086c6:	4ac1      	ldr	r2, [pc, #772]	@ (80089cc <mktime+0x334>)
 80086c8:	3e01      	subs	r6, #1
 80086ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	4416      	add	r6, r2
 80086d2:	dd11      	ble.n	80086f8 <mktime+0x60>
 80086d4:	07a9      	lsls	r1, r5, #30
 80086d6:	d10f      	bne.n	80086f8 <mktime+0x60>
 80086d8:	2264      	movs	r2, #100	@ 0x64
 80086da:	fb95 f3f2 	sdiv	r3, r5, r2
 80086de:	fb02 5313 	mls	r3, r2, r3, r5
 80086e2:	b943      	cbnz	r3, 80086f6 <mktime+0x5e>
 80086e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80086e8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80086ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80086f0:	fb02 3311 	mls	r3, r2, r1, r3
 80086f4:	b903      	cbnz	r3, 80086f8 <mktime+0x60>
 80086f6:	3601      	adds	r6, #1
 80086f8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80086fc:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008700:	3310      	adds	r3, #16
 8008702:	4293      	cmp	r3, r2
 8008704:	61fe      	str	r6, [r7, #28]
 8008706:	f200 8167 	bhi.w	80089d8 <mktime+0x340>
 800870a:	2d46      	cmp	r5, #70	@ 0x46
 800870c:	f340 808e 	ble.w	800882c <mktime+0x194>
 8008710:	2346      	movs	r3, #70	@ 0x46
 8008712:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008716:	2164      	movs	r1, #100	@ 0x64
 8008718:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800871c:	079a      	lsls	r2, r3, #30
 800871e:	d17f      	bne.n	8008820 <mktime+0x188>
 8008720:	fb93 f2f1 	sdiv	r2, r3, r1
 8008724:	fb01 3212 	mls	r2, r1, r2, r3
 8008728:	2a00      	cmp	r2, #0
 800872a:	d17c      	bne.n	8008826 <mktime+0x18e>
 800872c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008730:	fb92 fef0 	sdiv	lr, r2, r0
 8008734:	fb00 221e 	mls	r2, r0, lr, r2
 8008738:	2a00      	cmp	r2, #0
 800873a:	bf14      	ite	ne
 800873c:	4662      	movne	r2, ip
 800873e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008742:	3301      	adds	r3, #1
 8008744:	429d      	cmp	r5, r3
 8008746:	4416      	add	r6, r2
 8008748:	d1e8      	bne.n	800871c <mktime+0x84>
 800874a:	4ba1      	ldr	r3, [pc, #644]	@ (80089d0 <mktime+0x338>)
 800874c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008750:	fbc6 4803 	smlal	r4, r8, r6, r3
 8008754:	f000 f9f8 	bl	8008b48 <__tz_lock>
 8008758:	f000 fa02 	bl	8008b60 <_tzset_unlocked>
 800875c:	4b9d      	ldr	r3, [pc, #628]	@ (80089d4 <mktime+0x33c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8140 	beq.w	80089e6 <mktime+0x34e>
 8008766:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	4653      	mov	r3, sl
 800876e:	2b01      	cmp	r3, #1
 8008770:	bfa8      	it	ge
 8008772:	2301      	movge	r3, #1
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800877a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800877e:	4283      	cmp	r3, r0
 8008780:	f040 8096 	bne.w	80088b0 <mktime+0x218>
 8008784:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008788:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800878c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008790:	1a13      	subs	r3, r2, r0
 8008792:	9303      	str	r3, [sp, #12]
 8008794:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008798:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	9a02      	ldr	r2, [sp, #8]
 80087a0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80087a4:	ebb2 0e03 	subs.w	lr, r2, r3
 80087a8:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80087ac:	4574      	cmp	r4, lr
 80087ae:	eb78 0201 	sbcs.w	r2, r8, r1
 80087b2:	f280 8085 	bge.w	80088c0 <mktime+0x228>
 80087b6:	f8d9 2000 	ldr.w	r2, [r9]
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	f000 808d 	beq.w	80088da <mktime+0x242>
 80087c0:	9a03      	ldr	r2, [sp, #12]
 80087c2:	4294      	cmp	r4, r2
 80087c4:	eb78 020b 	sbcs.w	r2, r8, fp
 80087c8:	f2c0 810a 	blt.w	80089e0 <mktime+0x348>
 80087cc:	4574      	cmp	r4, lr
 80087ce:	eb78 0101 	sbcs.w	r1, r8, r1
 80087d2:	bfb4      	ite	lt
 80087d4:	f04f 0b01 	movlt.w	fp, #1
 80087d8:	f04f 0b00 	movge.w	fp, #0
 80087dc:	f1ba 0f00 	cmp.w	sl, #0
 80087e0:	f280 8087 	bge.w	80088f2 <mktime+0x25a>
 80087e4:	f1bb 0f01 	cmp.w	fp, #1
 80087e8:	f040 80ff 	bne.w	80089ea <mktime+0x352>
 80087ec:	f04f 0b01 	mov.w	fp, #1
 80087f0:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80087f4:	191c      	adds	r4, r3, r4
 80087f6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80087fa:	f000 f9ab 	bl	8008b54 <__tz_unlock>
 80087fe:	2307      	movs	r3, #7
 8008800:	3604      	adds	r6, #4
 8008802:	fb96 f3f3 	sdiv	r3, r6, r3
 8008806:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800880a:	1af6      	subs	r6, r6, r3
 800880c:	f100 80db 	bmi.w	80089c6 <mktime+0x32e>
 8008810:	f8c7 b020 	str.w	fp, [r7, #32]
 8008814:	61be      	str	r6, [r7, #24]
 8008816:	4620      	mov	r0, r4
 8008818:	4641      	mov	r1, r8
 800881a:	b005      	add	sp, #20
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	f240 126d 	movw	r2, #365	@ 0x16d
 8008824:	e78d      	b.n	8008742 <mktime+0xaa>
 8008826:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800882a:	e78a      	b.n	8008742 <mktime+0xaa>
 800882c:	d08d      	beq.n	800874a <mktime+0xb2>
 800882e:	2345      	movs	r3, #69	@ 0x45
 8008830:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008834:	2164      	movs	r1, #100	@ 0x64
 8008836:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800883a:	e012      	b.n	8008862 <mktime+0x1ca>
 800883c:	bb62      	cbnz	r2, 8008898 <mktime+0x200>
 800883e:	fb93 f2f1 	sdiv	r2, r3, r1
 8008842:	fb01 3212 	mls	r2, r1, r2, r3
 8008846:	bb52      	cbnz	r2, 800889e <mktime+0x206>
 8008848:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800884c:	fb92 fef0 	sdiv	lr, r2, r0
 8008850:	fb00 221e 	mls	r2, r0, lr, r2
 8008854:	2a00      	cmp	r2, #0
 8008856:	bf14      	ite	ne
 8008858:	4662      	movne	r2, ip
 800885a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800885e:	1ab6      	subs	r6, r6, r2
 8008860:	3b01      	subs	r3, #1
 8008862:	429d      	cmp	r5, r3
 8008864:	f003 0203 	and.w	r2, r3, #3
 8008868:	dbe8      	blt.n	800883c <mktime+0x1a4>
 800886a:	b9da      	cbnz	r2, 80088a4 <mktime+0x20c>
 800886c:	2264      	movs	r2, #100	@ 0x64
 800886e:	fb95 f3f2 	sdiv	r3, r5, r2
 8008872:	fb02 5313 	mls	r3, r2, r3, r5
 8008876:	b9c3      	cbnz	r3, 80088aa <mktime+0x212>
 8008878:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800887c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008880:	fb93 f1f2 	sdiv	r1, r3, r2
 8008884:	fb02 3311 	mls	r3, r2, r1, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	f240 136d 	movw	r3, #365	@ 0x16d
 800888e:	bf08      	it	eq
 8008890:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008894:	1af6      	subs	r6, r6, r3
 8008896:	e758      	b.n	800874a <mktime+0xb2>
 8008898:	f240 126d 	movw	r2, #365	@ 0x16d
 800889c:	e7df      	b.n	800885e <mktime+0x1c6>
 800889e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80088a2:	e7dc      	b.n	800885e <mktime+0x1c6>
 80088a4:	f240 136d 	movw	r3, #365	@ 0x16d
 80088a8:	e7f4      	b.n	8008894 <mktime+0x1fc>
 80088aa:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80088ae:	e7f1      	b.n	8008894 <mktime+0x1fc>
 80088b0:	f000 f8a2 	bl	80089f8 <__tzcalc_limits>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f47f af65 	bne.w	8008784 <mktime+0xec>
 80088ba:	f8dd b004 	ldr.w	fp, [sp, #4]
 80088be:	e791      	b.n	80087e4 <mktime+0x14c>
 80088c0:	9a02      	ldr	r2, [sp, #8]
 80088c2:	1a12      	subs	r2, r2, r0
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80088ca:	eb6c 0c02 	sbc.w	ip, ip, r2
 80088ce:	9a02      	ldr	r2, [sp, #8]
 80088d0:	4294      	cmp	r4, r2
 80088d2:	eb78 0c0c 	sbcs.w	ip, r8, ip
 80088d6:	dbf0      	blt.n	80088ba <mktime+0x222>
 80088d8:	e76d      	b.n	80087b6 <mktime+0x11e>
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	4294      	cmp	r4, r2
 80088de:	eb78 020b 	sbcs.w	r2, r8, fp
 80088e2:	f6ff af73 	blt.w	80087cc <mktime+0x134>
 80088e6:	f1ba 0f00 	cmp.w	sl, #0
 80088ea:	f6ff af7f 	blt.w	80087ec <mktime+0x154>
 80088ee:	f04f 0b01 	mov.w	fp, #1
 80088f2:	9a01      	ldr	r2, [sp, #4]
 80088f4:	ea82 020b 	eor.w	r2, r2, fp
 80088f8:	2a01      	cmp	r2, #1
 80088fa:	f47f af73 	bne.w	80087e4 <mktime+0x14c>
 80088fe:	f1bb 0f00 	cmp.w	fp, #0
 8008902:	d035      	beq.n	8008970 <mktime+0x2d8>
 8008904:	1a1b      	subs	r3, r3, r0
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	191c      	adds	r4, r3, r4
 800890a:	441a      	add	r2, r3
 800890c:	603a      	str	r2, [r7, #0]
 800890e:	4638      	mov	r0, r7
 8008910:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008914:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008918:	f7ff fdea 	bl	80084f0 <validate_structure>
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	ebb2 020a 	subs.w	r2, r2, sl
 8008922:	f43f af5f 	beq.w	80087e4 <mktime+0x14c>
 8008926:	2a01      	cmp	r2, #1
 8008928:	dc24      	bgt.n	8008974 <mktime+0x2dc>
 800892a:	1c93      	adds	r3, r2, #2
 800892c:	bfd8      	it	le
 800892e:	2201      	movle	r2, #1
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	18d3      	adds	r3, r2, r3
 8008934:	d527      	bpl.n	8008986 <mktime+0x2ee>
 8008936:	1e6b      	subs	r3, r5, #1
 8008938:	0798      	lsls	r0, r3, #30
 800893a:	d11e      	bne.n	800897a <mktime+0x2e2>
 800893c:	2164      	movs	r1, #100	@ 0x64
 800893e:	fb93 f0f1 	sdiv	r0, r3, r1
 8008942:	fb01 3310 	mls	r3, r1, r0, r3
 8008946:	b9db      	cbnz	r3, 8008980 <mktime+0x2e8>
 8008948:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800894c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008950:	fb95 f1f3 	sdiv	r1, r5, r3
 8008954:	fb03 5511 	mls	r5, r3, r1, r5
 8008958:	2d00      	cmp	r5, #0
 800895a:	f240 136d 	movw	r3, #365	@ 0x16d
 800895e:	bf18      	it	ne
 8008960:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	4416      	add	r6, r2
 8008968:	e73c      	b.n	80087e4 <mktime+0x14c>
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	e7c0      	b.n	80088f2 <mktime+0x25a>
 8008970:	1ac3      	subs	r3, r0, r3
 8008972:	e7c8      	b.n	8008906 <mktime+0x26e>
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	e7da      	b.n	8008930 <mktime+0x298>
 800897a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800897e:	e7f1      	b.n	8008964 <mktime+0x2cc>
 8008980:	f240 136d 	movw	r3, #365	@ 0x16d
 8008984:	e7ee      	b.n	8008964 <mktime+0x2cc>
 8008986:	07a9      	lsls	r1, r5, #30
 8008988:	d117      	bne.n	80089ba <mktime+0x322>
 800898a:	2064      	movs	r0, #100	@ 0x64
 800898c:	fb95 f1f0 	sdiv	r1, r5, r0
 8008990:	fb00 5111 	mls	r1, r0, r1, r5
 8008994:	b9a1      	cbnz	r1, 80089c0 <mktime+0x328>
 8008996:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800899a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800899e:	fb95 f0f1 	sdiv	r0, r5, r1
 80089a2:	fb01 5510 	mls	r5, r1, r0, r5
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	f240 116d 	movw	r1, #365	@ 0x16d
 80089ac:	bf08      	it	eq
 80089ae:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 80089b2:	428b      	cmp	r3, r1
 80089b4:	bfa8      	it	ge
 80089b6:	1a5b      	subge	r3, r3, r1
 80089b8:	e7d4      	b.n	8008964 <mktime+0x2cc>
 80089ba:	f240 116d 	movw	r1, #365	@ 0x16d
 80089be:	e7f8      	b.n	80089b2 <mktime+0x31a>
 80089c0:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80089c4:	e7f5      	b.n	80089b2 <mktime+0x31a>
 80089c6:	3607      	adds	r6, #7
 80089c8:	e722      	b.n	8008810 <mktime+0x178>
 80089ca:	bf00      	nop
 80089cc:	0800ca24 	.word	0x0800ca24
 80089d0:	00015180 	.word	0x00015180
 80089d4:	20000a60 	.word	0x20000a60
 80089d8:	f04f 34ff 	mov.w	r4, #4294967295
 80089dc:	46a0      	mov	r8, r4
 80089de:	e71a      	b.n	8008816 <mktime+0x17e>
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	dac1      	bge.n	800896a <mktime+0x2d2>
 80089e6:	f04f 0b00 	mov.w	fp, #0
 80089ea:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80089ee:	191c      	adds	r4, r3, r4
 80089f0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80089f4:	e701      	b.n	80087fa <mktime+0x162>
 80089f6:	bf00      	nop

080089f8 <__tzcalc_limits>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	4604      	mov	r4, r0
 80089fe:	f001 fe39 	bl	800a674 <__gettzinfo>
 8008a02:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008a06:	429c      	cmp	r4, r3
 8008a08:	f340 8098 	ble.w	8008b3c <__tzcalc_limits+0x144>
 8008a0c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8008a10:	f240 126d 	movw	r2, #365	@ 0x16d
 8008a14:	19e5      	adds	r5, r4, r7
 8008a16:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8008a1a:	10ad      	asrs	r5, r5, #2
 8008a1c:	fb02 5503 	mla	r5, r2, r3, r5
 8008a20:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008a24:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a2c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8008a30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008a34:	441d      	add	r5, r3
 8008a36:	eb04 030c 	add.w	r3, r4, ip
 8008a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3e:	4601      	mov	r1, r0
 8008a40:	4f3f      	ldr	r7, [pc, #252]	@ (8008b40 <__tzcalc_limits+0x148>)
 8008a42:	6044      	str	r4, [r0, #4]
 8008a44:	441d      	add	r5, r3
 8008a46:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8008a4a:	7a0b      	ldrb	r3, [r1, #8]
 8008a4c:	694a      	ldr	r2, [r1, #20]
 8008a4e:	2b4a      	cmp	r3, #74	@ 0x4a
 8008a50:	d133      	bne.n	8008aba <__tzcalc_limits+0xc2>
 8008a52:	07a6      	lsls	r6, r4, #30
 8008a54:	eb05 0302 	add.w	r3, r5, r2
 8008a58:	d106      	bne.n	8008a68 <__tzcalc_limits+0x70>
 8008a5a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8008a5e:	fb94 f6fe 	sdiv	r6, r4, lr
 8008a62:	fb0e 4616 	mls	r6, lr, r6, r4
 8008a66:	b936      	cbnz	r6, 8008a76 <__tzcalc_limits+0x7e>
 8008a68:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8008a6c:	fb94 f6fe 	sdiv	r6, r4, lr
 8008a70:	fb0e 4616 	mls	r6, lr, r6, r4
 8008a74:	b9fe      	cbnz	r6, 8008ab6 <__tzcalc_limits+0xbe>
 8008a76:	2a3b      	cmp	r2, #59	@ 0x3b
 8008a78:	bfd4      	ite	le
 8008a7a:	2200      	movle	r2, #0
 8008a7c:	2201      	movgt	r2, #1
 8008a7e:	4413      	add	r3, r2
 8008a80:	3b01      	subs	r3, #1
 8008a82:	698a      	ldr	r2, [r1, #24]
 8008a84:	17d6      	asrs	r6, r2, #31
 8008a86:	fbc3 2607 	smlal	r2, r6, r3, r7
 8008a8a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008a8c:	18d2      	adds	r2, r2, r3
 8008a8e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8008a92:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008a96:	3128      	adds	r1, #40	@ 0x28
 8008a98:	458c      	cmp	ip, r1
 8008a9a:	d1d6      	bne.n	8008a4a <__tzcalc_limits+0x52>
 8008a9c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8008aa0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8008aa4:	428c      	cmp	r4, r1
 8008aa6:	4193      	sbcs	r3, r2
 8008aa8:	bfb4      	ite	lt
 8008aaa:	2301      	movlt	r3, #1
 8008aac:	2300      	movge	r3, #0
 8008aae:	6003      	str	r3, [r0, #0]
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e7e1      	b.n	8008a7e <__tzcalc_limits+0x86>
 8008aba:	2b44      	cmp	r3, #68	@ 0x44
 8008abc:	d101      	bne.n	8008ac2 <__tzcalc_limits+0xca>
 8008abe:	18ab      	adds	r3, r5, r2
 8008ac0:	e7df      	b.n	8008a82 <__tzcalc_limits+0x8a>
 8008ac2:	07a3      	lsls	r3, r4, #30
 8008ac4:	d105      	bne.n	8008ad2 <__tzcalc_limits+0xda>
 8008ac6:	2664      	movs	r6, #100	@ 0x64
 8008ac8:	fb94 f3f6 	sdiv	r3, r4, r6
 8008acc:	fb06 4313 	mls	r3, r6, r3, r4
 8008ad0:	bb73      	cbnz	r3, 8008b30 <__tzcalc_limits+0x138>
 8008ad2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008ad6:	fb94 f6f3 	sdiv	r6, r4, r3
 8008ada:	fb03 4616 	mls	r6, r3, r6, r4
 8008ade:	fab6 f686 	clz	r6, r6
 8008ae2:	0976      	lsrs	r6, r6, #5
 8008ae4:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8008ae8:	462b      	mov	r3, r5
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	f8df e054 	ldr.w	lr, [pc, #84]	@ 8008b44 <__tzcalc_limits+0x14c>
 8008af2:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008af6:	fb0a e606 	mla	r6, sl, r6, lr
 8008afa:	f108 0801 	add.w	r8, r8, #1
 8008afe:	45c1      	cmp	r9, r8
 8008b00:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8008b04:	dc16      	bgt.n	8008b34 <__tzcalc_limits+0x13c>
 8008b06:	2607      	movs	r6, #7
 8008b08:	f103 0804 	add.w	r8, r3, #4
 8008b0c:	fb98 f6f6 	sdiv	r6, r8, r6
 8008b10:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008b14:	eba8 0606 	sub.w	r6, r8, r6
 8008b18:	1b92      	subs	r2, r2, r6
 8008b1a:	690e      	ldr	r6, [r1, #16]
 8008b1c:	bf48      	it	mi
 8008b1e:	3207      	addmi	r2, #7
 8008b20:	3e01      	subs	r6, #1
 8008b22:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008b26:	4432      	add	r2, r6
 8008b28:	4572      	cmp	r2, lr
 8008b2a:	da05      	bge.n	8008b38 <__tzcalc_limits+0x140>
 8008b2c:	4413      	add	r3, r2
 8008b2e:	e7a8      	b.n	8008a82 <__tzcalc_limits+0x8a>
 8008b30:	2601      	movs	r6, #1
 8008b32:	e7d7      	b.n	8008ae4 <__tzcalc_limits+0xec>
 8008b34:	4473      	add	r3, lr
 8008b36:	e7e0      	b.n	8008afa <__tzcalc_limits+0x102>
 8008b38:	3a07      	subs	r2, #7
 8008b3a:	e7f5      	b.n	8008b28 <__tzcalc_limits+0x130>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e7b8      	b.n	8008ab2 <__tzcalc_limits+0xba>
 8008b40:	00015180 	.word	0x00015180
 8008b44:	0800ca80 	.word	0x0800ca80

08008b48 <__tz_lock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__tz_lock+0x8>)
 8008b4a:	f000 baa4 	b.w	8009096 <__retarget_lock_acquire>
 8008b4e:	bf00      	nop
 8008b50:	20000a68 	.word	0x20000a68

08008b54 <__tz_unlock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	@ (8008b5c <__tz_unlock+0x8>)
 8008b56:	f000 baa0 	b.w	800909a <__retarget_lock_release>
 8008b5a:	bf00      	nop
 8008b5c:	20000a68 	.word	0x20000a68

08008b60 <_tzset_unlocked>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	@ (8008b68 <_tzset_unlocked+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	f000 b802 	b.w	8008b6c <_tzset_unlocked_r>
 8008b68:	200005c8 	.word	0x200005c8

08008b6c <_tzset_unlocked_r>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	b08d      	sub	sp, #52	@ 0x34
 8008b72:	4607      	mov	r7, r0
 8008b74:	f001 fd7e 	bl	800a674 <__gettzinfo>
 8008b78:	496d      	ldr	r1, [pc, #436]	@ (8008d30 <_tzset_unlocked_r+0x1c4>)
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f000 fe8f 	bl	80098a0 <_getenv_r>
 8008b82:	4d6c      	ldr	r5, [pc, #432]	@ (8008d34 <_tzset_unlocked_r+0x1c8>)
 8008b84:	4606      	mov	r6, r0
 8008b86:	bb10      	cbnz	r0, 8008bce <_tzset_unlocked_r+0x62>
 8008b88:	4b6b      	ldr	r3, [pc, #428]	@ (8008d38 <_tzset_unlocked_r+0x1cc>)
 8008b8a:	4a6c      	ldr	r2, [pc, #432]	@ (8008d3c <_tzset_unlocked_r+0x1d0>)
 8008b8c:	6018      	str	r0, [r3, #0]
 8008b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8008d40 <_tzset_unlocked_r+0x1d4>)
 8008b90:	214a      	movs	r1, #74	@ 0x4a
 8008b92:	6018      	str	r0, [r3, #0]
 8008b94:	4b6b      	ldr	r3, [pc, #428]	@ (8008d44 <_tzset_unlocked_r+0x1d8>)
 8008b96:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008b9a:	e9c3 2200 	strd	r2, r2, [r3]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8008ba6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8008baa:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8008bae:	62a0      	str	r0, [r4, #40]	@ 0x28
 8008bb0:	6520      	str	r0, [r4, #80]	@ 0x50
 8008bb2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008bba:	6828      	ldr	r0, [r5, #0]
 8008bbc:	7221      	strb	r1, [r4, #8]
 8008bbe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008bc2:	f000 fe7d 	bl	80098c0 <free>
 8008bc6:	602e      	str	r6, [r5, #0]
 8008bc8:	b00d      	add	sp, #52	@ 0x34
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	6829      	ldr	r1, [r5, #0]
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	f040 808e 	bne.w	8008cf2 <_tzset_unlocked_r+0x186>
 8008bd6:	6828      	ldr	r0, [r5, #0]
 8008bd8:	f000 fe72 	bl	80098c0 <free>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7f7 fad1 	bl	8000184 <strlen>
 8008be2:	1c41      	adds	r1, r0, #1
 8008be4:	4638      	mov	r0, r7
 8008be6:	f000 fe95 	bl	8009914 <_malloc_r>
 8008bea:	6028      	str	r0, [r5, #0]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f040 8086 	bne.w	8008cfe <_tzset_unlocked_r+0x192>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4a52      	ldr	r2, [pc, #328]	@ (8008d40 <_tzset_unlocked_r+0x1d4>)
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4a52      	ldr	r2, [pc, #328]	@ (8008d48 <_tzset_unlocked_r+0x1dc>)
 8008bfe:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8008d44 <_tzset_unlocked_r+0x1d8>
 8008c02:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008c06:	e9c8 2200 	strd	r2, r2, [r8]
 8008c0a:	224a      	movs	r2, #74	@ 0x4a
 8008c0c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008c10:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8008c14:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8008c18:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008c1c:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008c20:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8008d38 <_tzset_unlocked_r+0x1cc>
 8008c24:	7222      	strb	r2, [r4, #8]
 8008c26:	f8ca 3000 	str.w	r3, [sl]
 8008c2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c2c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008c30:	6523      	str	r3, [r4, #80]	@ 0x50
 8008c32:	7833      	ldrb	r3, [r6, #0]
 8008c34:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c36:	bf08      	it	eq
 8008c38:	3601      	addeq	r6, #1
 8008c3a:	7833      	ldrb	r3, [r6, #0]
 8008c3c:	2b3c      	cmp	r3, #60	@ 0x3c
 8008c3e:	d162      	bne.n	8008d06 <_tzset_unlocked_r+0x19a>
 8008c40:	1c75      	adds	r5, r6, #1
 8008c42:	4628      	mov	r0, r5
 8008c44:	4a41      	ldr	r2, [pc, #260]	@ (8008d4c <_tzset_unlocked_r+0x1e0>)
 8008c46:	4942      	ldr	r1, [pc, #264]	@ (8008d50 <_tzset_unlocked_r+0x1e4>)
 8008c48:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c4a:	f001 fce9 	bl	800a620 <siscanf>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	ddba      	ble.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c54:	1eda      	subs	r2, r3, #3
 8008c56:	2a07      	cmp	r2, #7
 8008c58:	d8b6      	bhi.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008c5a:	5ceb      	ldrb	r3, [r5, r3]
 8008c5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c5e:	d1b3      	bne.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008c60:	3602      	adds	r6, #2
 8008c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c64:	18f5      	adds	r5, r6, r3
 8008c66:	5cf3      	ldrb	r3, [r6, r3]
 8008c68:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c6a:	d15a      	bne.n	8008d22 <_tzset_unlocked_r+0x1b6>
 8008c6c:	f04f 39ff 	mov.w	r9, #4294967295
 8008c70:	3501      	adds	r5, #1
 8008c72:	2300      	movs	r3, #0
 8008c74:	af08      	add	r7, sp, #32
 8008c76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008c7a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008c7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c80:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	f10d 031e 	add.w	r3, sp, #30
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	4931      	ldr	r1, [pc, #196]	@ (8008d54 <_tzset_unlocked_r+0x1e8>)
 8008c90:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c92:	aa07      	add	r2, sp, #28
 8008c94:	f001 fcc4 	bl	800a620 <siscanf>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	dd95      	ble.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008c9c:	223c      	movs	r2, #60	@ 0x3c
 8008c9e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008ca2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8008ca6:	fb02 6603 	mla	r6, r2, r3, r6
 8008caa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008cae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008cb2:	fb02 6603 	mla	r6, r2, r3, r6
 8008cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cb8:	fb09 f606 	mul.w	r6, r9, r6
 8008cbc:	eb05 0903 	add.w	r9, r5, r3
 8008cc0:	5ceb      	ldrb	r3, [r5, r3]
 8008cc2:	2b3c      	cmp	r3, #60	@ 0x3c
 8008cc4:	f040 80e8 	bne.w	8008e98 <_tzset_unlocked_r+0x32c>
 8008cc8:	f109 0501 	add.w	r5, r9, #1
 8008ccc:	4628      	mov	r0, r5
 8008cce:	4a22      	ldr	r2, [pc, #136]	@ (8008d58 <_tzset_unlocked_r+0x1ec>)
 8008cd0:	491f      	ldr	r1, [pc, #124]	@ (8008d50 <_tzset_unlocked_r+0x1e4>)
 8008cd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008cd4:	f001 fca4 	bl	800a620 <siscanf>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	dc41      	bgt.n	8008d60 <_tzset_unlocked_r+0x1f4>
 8008cdc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ce2:	d13d      	bne.n	8008d60 <_tzset_unlocked_r+0x1f4>
 8008ce4:	4b19      	ldr	r3, [pc, #100]	@ (8008d4c <_tzset_unlocked_r+0x1e0>)
 8008ce6:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008ce8:	e9c8 3300 	strd	r3, r3, [r8]
 8008cec:	f8ca 6000 	str.w	r6, [sl]
 8008cf0:	e76a      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008cf2:	f7f7 fa3d 	bl	8000170 <strcmp>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f47f af6d 	bne.w	8008bd6 <_tzset_unlocked_r+0x6a>
 8008cfc:	e764      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008cfe:	4631      	mov	r1, r6
 8008d00:	f000 f9cd 	bl	800909e <strcpy>
 8008d04:	e775      	b.n	8008bf2 <_tzset_unlocked_r+0x86>
 8008d06:	4630      	mov	r0, r6
 8008d08:	4a10      	ldr	r2, [pc, #64]	@ (8008d4c <_tzset_unlocked_r+0x1e0>)
 8008d0a:	4914      	ldr	r1, [pc, #80]	@ (8008d5c <_tzset_unlocked_r+0x1f0>)
 8008d0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d0e:	f001 fc87 	bl	800a620 <siscanf>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f77f af58 	ble.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1a:	3b03      	subs	r3, #3
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	d9a0      	bls.n	8008c62 <_tzset_unlocked_r+0xf6>
 8008d20:	e752      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008d22:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	bf08      	it	eq
 8008d2a:	3501      	addeq	r5, #1
 8008d2c:	e7a1      	b.n	8008c72 <_tzset_unlocked_r+0x106>
 8008d2e:	bf00      	nop
 8008d30:	0800cae4 	.word	0x0800cae4
 8008d34:	20000a40 	.word	0x20000a40
 8008d38:	20000a5c 	.word	0x20000a5c
 8008d3c:	0800cae7 	.word	0x0800cae7
 8008d40:	20000a60 	.word	0x20000a60
 8008d44:	20000454 	.word	0x20000454
 8008d48:	0800cb75 	.word	0x0800cb75
 8008d4c:	20000a50 	.word	0x20000a50
 8008d50:	0800caeb 	.word	0x0800caeb
 8008d54:	0800cb20 	.word	0x0800cb20
 8008d58:	20000a44 	.word	0x20000a44
 8008d5c:	0800cafe 	.word	0x0800cafe
 8008d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d62:	1eda      	subs	r2, r3, #3
 8008d64:	2a07      	cmp	r2, #7
 8008d66:	f63f af2f 	bhi.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008d6a:	5ceb      	ldrb	r3, [r5, r3]
 8008d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d6e:	f47f af2b 	bne.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008d72:	f109 0902 	add.w	r9, r9, #2
 8008d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d78:	eb09 0503 	add.w	r5, r9, r3
 8008d7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008d80:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d82:	f040 8098 	bne.w	8008eb6 <_tzset_unlocked_r+0x34a>
 8008d86:	f04f 39ff 	mov.w	r9, #4294967295
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008d92:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d96:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d9c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d9e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	f10d 031e 	add.w	r3, sp, #30
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4628      	mov	r0, r5
 8008dac:	497a      	ldr	r1, [pc, #488]	@ (8008f98 <_tzset_unlocked_r+0x42c>)
 8008dae:	ab0a      	add	r3, sp, #40	@ 0x28
 8008db0:	aa07      	add	r2, sp, #28
 8008db2:	f001 fc35 	bl	800a620 <siscanf>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f300 8083 	bgt.w	8008ec2 <_tzset_unlocked_r+0x356>
 8008dbc:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8008dc0:	4627      	mov	r7, r4
 8008dc2:	f04f 0b00 	mov.w	fp, #0
 8008dc6:	9304      	str	r3, [sp, #16]
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dca:	441d      	add	r5, r3
 8008dcc:	782b      	ldrb	r3, [r5, #0]
 8008dce:	2b2c      	cmp	r3, #44	@ 0x2c
 8008dd0:	bf08      	it	eq
 8008dd2:	3501      	addeq	r5, #1
 8008dd4:	f895 9000 	ldrb.w	r9, [r5]
 8008dd8:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8008ddc:	f040 8084 	bne.w	8008ee8 <_tzset_unlocked_r+0x37c>
 8008de0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008de2:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8008de6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008dea:	aa09      	add	r2, sp, #36	@ 0x24
 8008dec:	9200      	str	r2, [sp, #0]
 8008dee:	4628      	mov	r0, r5
 8008df0:	496a      	ldr	r1, [pc, #424]	@ (8008f9c <_tzset_unlocked_r+0x430>)
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8008df8:	f001 fc12 	bl	800a620 <siscanf>
 8008dfc:	2803      	cmp	r0, #3
 8008dfe:	f47f aee3 	bne.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008e02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8008e06:	1e4b      	subs	r3, r1, #1
 8008e08:	2b0b      	cmp	r3, #11
 8008e0a:	f63f aedd 	bhi.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008e0e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8008e12:	1e53      	subs	r3, r2, #1
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	f63f aed7 	bhi.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008e1a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	f63f aed2 	bhi.w	8008bc8 <_tzset_unlocked_r+0x5c>
 8008e24:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008e28:	f887 9008 	strb.w	r9, [r7, #8]
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e30:	eb05 0903 	add.w	r9, r5, r3
 8008e34:	2500      	movs	r5, #0
 8008e36:	f04f 0302 	mov.w	r3, #2
 8008e3a:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008e3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008e42:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008e46:	950a      	str	r5, [sp, #40]	@ 0x28
 8008e48:	f899 3000 	ldrb.w	r3, [r9]
 8008e4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e4e:	d177      	bne.n	8008f40 <_tzset_unlocked_r+0x3d4>
 8008e50:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e52:	aa08      	add	r2, sp, #32
 8008e54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e58:	f10d 021e 	add.w	r2, sp, #30
 8008e5c:	9200      	str	r2, [sp, #0]
 8008e5e:	4648      	mov	r0, r9
 8008e60:	494f      	ldr	r1, [pc, #316]	@ (8008fa0 <_tzset_unlocked_r+0x434>)
 8008e62:	9303      	str	r3, [sp, #12]
 8008e64:	aa07      	add	r2, sp, #28
 8008e66:	f001 fbdb 	bl	800a620 <siscanf>
 8008e6a:	42a8      	cmp	r0, r5
 8008e6c:	dc68      	bgt.n	8008f40 <_tzset_unlocked_r+0x3d4>
 8008e6e:	214a      	movs	r1, #74	@ 0x4a
 8008e70:	2200      	movs	r2, #0
 8008e72:	2300      	movs	r3, #0
 8008e74:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8008e78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008e7c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008e84:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8008e88:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008e8c:	7221      	strb	r1, [r4, #8]
 8008e8e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8008e90:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008e94:	6525      	str	r5, [r4, #80]	@ 0x50
 8008e96:	e697      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008e98:	4648      	mov	r0, r9
 8008e9a:	4a42      	ldr	r2, [pc, #264]	@ (8008fa4 <_tzset_unlocked_r+0x438>)
 8008e9c:	4942      	ldr	r1, [pc, #264]	@ (8008fa8 <_tzset_unlocked_r+0x43c>)
 8008e9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ea0:	f001 fbbe 	bl	800a620 <siscanf>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f77f af1d 	ble.w	8008ce4 <_tzset_unlocked_r+0x178>
 8008eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eac:	3b03      	subs	r3, #3
 8008eae:	2b07      	cmp	r3, #7
 8008eb0:	f67f af61 	bls.w	8008d76 <_tzset_unlocked_r+0x20a>
 8008eb4:	e688      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008eb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008eb8:	f04f 0901 	mov.w	r9, #1
 8008ebc:	bf08      	it	eq
 8008ebe:	3501      	addeq	r5, #1
 8008ec0:	e764      	b.n	8008d8c <_tzset_unlocked_r+0x220>
 8008ec2:	213c      	movs	r1, #60	@ 0x3c
 8008ec4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008ec8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008ecc:	fb01 3302 	mla	r3, r1, r2, r3
 8008ed0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008ed4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008ed8:	fb01 3302 	mla	r3, r1, r2, r3
 8008edc:	fb09 f303 	mul.w	r3, r9, r3
 8008ee0:	e76e      	b.n	8008dc0 <_tzset_unlocked_r+0x254>
 8008ee2:	f04f 0b01 	mov.w	fp, #1
 8008ee6:	e771      	b.n	8008dcc <_tzset_unlocked_r+0x260>
 8008ee8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008eec:	bf0a      	itet	eq
 8008eee:	464b      	moveq	r3, r9
 8008ef0:	2344      	movne	r3, #68	@ 0x44
 8008ef2:	3501      	addeq	r5, #1
 8008ef4:	220a      	movs	r2, #10
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	a90b      	add	r1, sp, #44	@ 0x2c
 8008efa:	9305      	str	r3, [sp, #20]
 8008efc:	f001 fabe 	bl	800a47c <strtoul>
 8008f00:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008f04:	9b05      	ldr	r3, [sp, #20]
 8008f06:	45a9      	cmp	r9, r5
 8008f08:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008f0c:	d114      	bne.n	8008f38 <_tzset_unlocked_r+0x3cc>
 8008f0e:	234d      	movs	r3, #77	@ 0x4d
 8008f10:	f1bb 0f00 	cmp.w	fp, #0
 8008f14:	d107      	bne.n	8008f26 <_tzset_unlocked_r+0x3ba>
 8008f16:	2103      	movs	r1, #3
 8008f18:	7223      	strb	r3, [r4, #8]
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008f20:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8008f24:	e786      	b.n	8008e34 <_tzset_unlocked_r+0x2c8>
 8008f26:	220b      	movs	r2, #11
 8008f28:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8008f32:	2300      	movs	r3, #0
 8008f34:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008f36:	e77d      	b.n	8008e34 <_tzset_unlocked_r+0x2c8>
 8008f38:	b280      	uxth	r0, r0
 8008f3a:	723b      	strb	r3, [r7, #8]
 8008f3c:	6178      	str	r0, [r7, #20]
 8008f3e:	e779      	b.n	8008e34 <_tzset_unlocked_r+0x2c8>
 8008f40:	213c      	movs	r1, #60	@ 0x3c
 8008f42:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008f46:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008f4a:	3728      	adds	r7, #40	@ 0x28
 8008f4c:	fb01 3302 	mla	r3, r1, r2, r3
 8008f50:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008f54:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008f58:	fb01 3302 	mla	r3, r1, r2, r3
 8008f5c:	f847 3c10 	str.w	r3, [r7, #-16]
 8008f60:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008f62:	444d      	add	r5, r9
 8008f64:	f1bb 0f00 	cmp.w	fp, #0
 8008f68:	d0bb      	beq.n	8008ee2 <_tzset_unlocked_r+0x376>
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	6860      	ldr	r0, [r4, #4]
 8008f6e:	6523      	str	r3, [r4, #80]	@ 0x50
 8008f70:	4b0e      	ldr	r3, [pc, #56]	@ (8008fac <_tzset_unlocked_r+0x440>)
 8008f72:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008f74:	f8c8 3000 	str.w	r3, [r8]
 8008f78:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa4 <_tzset_unlocked_r+0x438>)
 8008f7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008f7e:	f7ff fd3b 	bl	80089f8 <__tzcalc_limits>
 8008f82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008f84:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008f86:	f8ca 2000 	str.w	r2, [sl]
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	bf18      	it	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	4a07      	ldr	r2, [pc, #28]	@ (8008fb0 <_tzset_unlocked_r+0x444>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	e618      	b.n	8008bc8 <_tzset_unlocked_r+0x5c>
 8008f96:	bf00      	nop
 8008f98:	0800cb20 	.word	0x0800cb20
 8008f9c:	0800cb0c 	.word	0x0800cb0c
 8008fa0:	0800cb1f 	.word	0x0800cb1f
 8008fa4:	20000a44 	.word	0x20000a44
 8008fa8:	0800cafe 	.word	0x0800cafe
 8008fac:	20000a50 	.word	0x20000a50
 8008fb0:	20000a60 	.word	0x20000a60

08008fb4 <_close_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4d05      	ldr	r5, [pc, #20]	@ (8008fd0 <_close_r+0x1c>)
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	f7fe f8e7 	bl	8007192 <_close>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_close_r+0x1a>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_close_r+0x1a>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	20000a64 	.word	0x20000a64

08008fd4 <_lseek_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4d05      	ldr	r5, [pc, #20]	@ (8008ff4 <_lseek_r+0x20>)
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7fe f8f9 	bl	80071da <_lseek>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_lseek_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_lseek_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20000a64 	.word	0x20000a64

08008ff8 <_read_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	4611      	mov	r1, r2
 8009000:	2200      	movs	r2, #0
 8009002:	4d05      	ldr	r5, [pc, #20]	@ (8009018 <_read_r+0x20>)
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7fe f88a 	bl	8007120 <_read>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_read_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_read_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000a64 	.word	0x20000a64

0800901c <_write_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	4611      	mov	r1, r2
 8009024:	2200      	movs	r2, #0
 8009026:	4d05      	ldr	r5, [pc, #20]	@ (800903c <_write_r+0x20>)
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7fe f895 	bl	800715a <_write>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_write_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_write_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000a64 	.word	0x20000a64

08009040 <__errno>:
 8009040:	4b01      	ldr	r3, [pc, #4]	@ (8009048 <__errno+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	200005c8 	.word	0x200005c8

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	2600      	movs	r6, #0
 8009050:	4d0c      	ldr	r5, [pc, #48]	@ (8009084 <__libc_init_array+0x38>)
 8009052:	4c0d      	ldr	r4, [pc, #52]	@ (8009088 <__libc_init_array+0x3c>)
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	f003 fb60 	bl	800c720 <_init>
 8009060:	2600      	movs	r6, #0
 8009062:	4d0a      	ldr	r5, [pc, #40]	@ (800908c <__libc_init_array+0x40>)
 8009064:	4c0a      	ldr	r4, [pc, #40]	@ (8009090 <__libc_init_array+0x44>)
 8009066:	1b64      	subs	r4, r4, r5
 8009068:	10a4      	asrs	r4, r4, #2
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	0800cdc8 	.word	0x0800cdc8
 8009088:	0800cdc8 	.word	0x0800cdc8
 800908c:	0800cdc8 	.word	0x0800cdc8
 8009090:	0800cdcc 	.word	0x0800cdcc

08009094 <__retarget_lock_init_recursive>:
 8009094:	4770      	bx	lr

08009096 <__retarget_lock_acquire>:
 8009096:	4770      	bx	lr

08009098 <__retarget_lock_acquire_recursive>:
 8009098:	4770      	bx	lr

0800909a <__retarget_lock_release>:
 800909a:	4770      	bx	lr

0800909c <__retarget_lock_release_recursive>:
 800909c:	4770      	bx	lr

0800909e <strcpy>:
 800909e:	4603      	mov	r3, r0
 80090a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a4:	f803 2b01 	strb.w	r2, [r3], #1
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d1f9      	bne.n	80090a0 <strcpy+0x2>
 80090ac:	4770      	bx	lr

080090ae <memcpy>:
 80090ae:	440a      	add	r2, r1
 80090b0:	4291      	cmp	r1, r2
 80090b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b6:	d100      	bne.n	80090ba <memcpy+0xc>
 80090b8:	4770      	bx	lr
 80090ba:	b510      	push	{r4, lr}
 80090bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c0:	4291      	cmp	r1, r2
 80090c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c6:	d1f9      	bne.n	80090bc <memcpy+0xe>
 80090c8:	bd10      	pop	{r4, pc}
	...

080090cc <nan>:
 80090cc:	2000      	movs	r0, #0
 80090ce:	4901      	ldr	r1, [pc, #4]	@ (80090d4 <nan+0x8>)
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	7ff80000 	.word	0x7ff80000

080090d8 <__assert_func>:
 80090d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090da:	4614      	mov	r4, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <__assert_func+0x2c>)
 80090e0:	4605      	mov	r5, r0
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68d8      	ldr	r0, [r3, #12]
 80090e6:	b954      	cbnz	r4, 80090fe <__assert_func+0x26>
 80090e8:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <__assert_func+0x30>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f0:	9100      	str	r1, [sp, #0]
 80090f2:	462b      	mov	r3, r5
 80090f4:	4905      	ldr	r1, [pc, #20]	@ (800910c <__assert_func+0x34>)
 80090f6:	f001 fa81 	bl	800a5fc <fiprintf>
 80090fa:	f001 fb75 	bl	800a7e8 <abort>
 80090fe:	4b04      	ldr	r3, [pc, #16]	@ (8009110 <__assert_func+0x38>)
 8009100:	e7f4      	b.n	80090ec <__assert_func+0x14>
 8009102:	bf00      	nop
 8009104:	200005c8 	.word	0x200005c8
 8009108:	0800cb75 	.word	0x0800cb75
 800910c:	0800cb47 	.word	0x0800cb47
 8009110:	0800cb3a 	.word	0x0800cb3a

08009114 <div>:
 8009114:	b510      	push	{r4, lr}
 8009116:	fb91 f4f2 	sdiv	r4, r1, r2
 800911a:	fb02 1114 	mls	r1, r2, r4, r1
 800911e:	6004      	str	r4, [r0, #0]
 8009120:	6041      	str	r1, [r0, #4]
 8009122:	bd10      	pop	{r4, pc}

08009124 <_free_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4605      	mov	r5, r0
 8009128:	2900      	cmp	r1, #0
 800912a:	d040      	beq.n	80091ae <_free_r+0x8a>
 800912c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009130:	1f0c      	subs	r4, r1, #4
 8009132:	2b00      	cmp	r3, #0
 8009134:	bfb8      	it	lt
 8009136:	18e4      	addlt	r4, r4, r3
 8009138:	f000 fc7e 	bl	8009a38 <__malloc_lock>
 800913c:	4a1c      	ldr	r2, [pc, #112]	@ (80091b0 <_free_r+0x8c>)
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	b933      	cbnz	r3, 8009150 <_free_r+0x2c>
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	6014      	str	r4, [r2, #0]
 8009146:	4628      	mov	r0, r5
 8009148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800914c:	f000 bc7a 	b.w	8009a44 <__malloc_unlock>
 8009150:	42a3      	cmp	r3, r4
 8009152:	d908      	bls.n	8009166 <_free_r+0x42>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	1821      	adds	r1, r4, r0
 8009158:	428b      	cmp	r3, r1
 800915a:	bf01      	itttt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	1809      	addeq	r1, r1, r0
 8009162:	6021      	streq	r1, [r4, #0]
 8009164:	e7ed      	b.n	8009142 <_free_r+0x1e>
 8009166:	461a      	mov	r2, r3
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	b10b      	cbz	r3, 8009170 <_free_r+0x4c>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d9fa      	bls.n	8009166 <_free_r+0x42>
 8009170:	6811      	ldr	r1, [r2, #0]
 8009172:	1850      	adds	r0, r2, r1
 8009174:	42a0      	cmp	r0, r4
 8009176:	d10b      	bne.n	8009190 <_free_r+0x6c>
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	4401      	add	r1, r0
 800917c:	1850      	adds	r0, r2, r1
 800917e:	4283      	cmp	r3, r0
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	d1e0      	bne.n	8009146 <_free_r+0x22>
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	4408      	add	r0, r1
 800918a:	6010      	str	r0, [r2, #0]
 800918c:	6053      	str	r3, [r2, #4]
 800918e:	e7da      	b.n	8009146 <_free_r+0x22>
 8009190:	d902      	bls.n	8009198 <_free_r+0x74>
 8009192:	230c      	movs	r3, #12
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	e7d6      	b.n	8009146 <_free_r+0x22>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	1821      	adds	r1, r4, r0
 800919c:	428b      	cmp	r3, r1
 800919e:	bf01      	itttt	eq
 80091a0:	6819      	ldreq	r1, [r3, #0]
 80091a2:	685b      	ldreq	r3, [r3, #4]
 80091a4:	1809      	addeq	r1, r1, r0
 80091a6:	6021      	streq	r1, [r4, #0]
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6054      	str	r4, [r2, #4]
 80091ac:	e7cb      	b.n	8009146 <_free_r+0x22>
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20000a70 	.word	0x20000a70

080091b4 <rshift>:
 80091b4:	6903      	ldr	r3, [r0, #16]
 80091b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091be:	f100 0414 	add.w	r4, r0, #20
 80091c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091c6:	dd46      	ble.n	8009256 <rshift+0xa2>
 80091c8:	f011 011f 	ands.w	r1, r1, #31
 80091cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091d4:	d10c      	bne.n	80091f0 <rshift+0x3c>
 80091d6:	4629      	mov	r1, r5
 80091d8:	f100 0710 	add.w	r7, r0, #16
 80091dc:	42b1      	cmp	r1, r6
 80091de:	d335      	bcc.n	800924c <rshift+0x98>
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	1eea      	subs	r2, r5, #3
 80091e6:	4296      	cmp	r6, r2
 80091e8:	bf38      	it	cc
 80091ea:	2300      	movcc	r3, #0
 80091ec:	4423      	add	r3, r4
 80091ee:	e015      	b.n	800921c <rshift+0x68>
 80091f0:	46a1      	mov	r9, r4
 80091f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091f6:	f1c1 0820 	rsb	r8, r1, #32
 80091fa:	40cf      	lsrs	r7, r1
 80091fc:	f105 0e04 	add.w	lr, r5, #4
 8009200:	4576      	cmp	r6, lr
 8009202:	46f4      	mov	ip, lr
 8009204:	d816      	bhi.n	8009234 <rshift+0x80>
 8009206:	1a9a      	subs	r2, r3, r2
 8009208:	0092      	lsls	r2, r2, #2
 800920a:	3a04      	subs	r2, #4
 800920c:	3501      	adds	r5, #1
 800920e:	42ae      	cmp	r6, r5
 8009210:	bf38      	it	cc
 8009212:	2200      	movcc	r2, #0
 8009214:	18a3      	adds	r3, r4, r2
 8009216:	50a7      	str	r7, [r4, r2]
 8009218:	b107      	cbz	r7, 800921c <rshift+0x68>
 800921a:	3304      	adds	r3, #4
 800921c:	42a3      	cmp	r3, r4
 800921e:	eba3 0204 	sub.w	r2, r3, r4
 8009222:	bf08      	it	eq
 8009224:	2300      	moveq	r3, #0
 8009226:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800922a:	6102      	str	r2, [r0, #16]
 800922c:	bf08      	it	eq
 800922e:	6143      	streq	r3, [r0, #20]
 8009230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009234:	f8dc c000 	ldr.w	ip, [ip]
 8009238:	fa0c fc08 	lsl.w	ip, ip, r8
 800923c:	ea4c 0707 	orr.w	r7, ip, r7
 8009240:	f849 7b04 	str.w	r7, [r9], #4
 8009244:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009248:	40cf      	lsrs	r7, r1
 800924a:	e7d9      	b.n	8009200 <rshift+0x4c>
 800924c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009250:	f847 cf04 	str.w	ip, [r7, #4]!
 8009254:	e7c2      	b.n	80091dc <rshift+0x28>
 8009256:	4623      	mov	r3, r4
 8009258:	e7e0      	b.n	800921c <rshift+0x68>

0800925a <__hexdig_fun>:
 800925a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800925e:	2b09      	cmp	r3, #9
 8009260:	d802      	bhi.n	8009268 <__hexdig_fun+0xe>
 8009262:	3820      	subs	r0, #32
 8009264:	b2c0      	uxtb	r0, r0
 8009266:	4770      	bx	lr
 8009268:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800926c:	2b05      	cmp	r3, #5
 800926e:	d801      	bhi.n	8009274 <__hexdig_fun+0x1a>
 8009270:	3847      	subs	r0, #71	@ 0x47
 8009272:	e7f7      	b.n	8009264 <__hexdig_fun+0xa>
 8009274:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009278:	2b05      	cmp	r3, #5
 800927a:	d801      	bhi.n	8009280 <__hexdig_fun+0x26>
 800927c:	3827      	subs	r0, #39	@ 0x27
 800927e:	e7f1      	b.n	8009264 <__hexdig_fun+0xa>
 8009280:	2000      	movs	r0, #0
 8009282:	4770      	bx	lr

08009284 <__gethex>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	468a      	mov	sl, r1
 800928a:	4690      	mov	r8, r2
 800928c:	b085      	sub	sp, #20
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	680b      	ldr	r3, [r1, #0]
 8009292:	9001      	str	r0, [sp, #4]
 8009294:	1c9c      	adds	r4, r3, #2
 8009296:	46a1      	mov	r9, r4
 8009298:	f814 0b01 	ldrb.w	r0, [r4], #1
 800929c:	2830      	cmp	r0, #48	@ 0x30
 800929e:	d0fa      	beq.n	8009296 <__gethex+0x12>
 80092a0:	eba9 0303 	sub.w	r3, r9, r3
 80092a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80092a8:	f7ff ffd7 	bl	800925a <__hexdig_fun>
 80092ac:	4605      	mov	r5, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d168      	bne.n	8009384 <__gethex+0x100>
 80092b2:	2201      	movs	r2, #1
 80092b4:	4648      	mov	r0, r9
 80092b6:	499f      	ldr	r1, [pc, #636]	@ (8009534 <__gethex+0x2b0>)
 80092b8:	f7fe ff9f 	bl	80081fa <strncmp>
 80092bc:	4607      	mov	r7, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d167      	bne.n	8009392 <__gethex+0x10e>
 80092c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092c6:	4626      	mov	r6, r4
 80092c8:	f7ff ffc7 	bl	800925a <__hexdig_fun>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d062      	beq.n	8009396 <__gethex+0x112>
 80092d0:	4623      	mov	r3, r4
 80092d2:	7818      	ldrb	r0, [r3, #0]
 80092d4:	4699      	mov	r9, r3
 80092d6:	2830      	cmp	r0, #48	@ 0x30
 80092d8:	f103 0301 	add.w	r3, r3, #1
 80092dc:	d0f9      	beq.n	80092d2 <__gethex+0x4e>
 80092de:	f7ff ffbc 	bl	800925a <__hexdig_fun>
 80092e2:	fab0 f580 	clz	r5, r0
 80092e6:	f04f 0b01 	mov.w	fp, #1
 80092ea:	096d      	lsrs	r5, r5, #5
 80092ec:	464a      	mov	r2, r9
 80092ee:	4616      	mov	r6, r2
 80092f0:	7830      	ldrb	r0, [r6, #0]
 80092f2:	3201      	adds	r2, #1
 80092f4:	f7ff ffb1 	bl	800925a <__hexdig_fun>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d1f8      	bne.n	80092ee <__gethex+0x6a>
 80092fc:	2201      	movs	r2, #1
 80092fe:	4630      	mov	r0, r6
 8009300:	498c      	ldr	r1, [pc, #560]	@ (8009534 <__gethex+0x2b0>)
 8009302:	f7fe ff7a 	bl	80081fa <strncmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	d13f      	bne.n	800938a <__gethex+0x106>
 800930a:	b944      	cbnz	r4, 800931e <__gethex+0x9a>
 800930c:	1c74      	adds	r4, r6, #1
 800930e:	4622      	mov	r2, r4
 8009310:	4616      	mov	r6, r2
 8009312:	7830      	ldrb	r0, [r6, #0]
 8009314:	3201      	adds	r2, #1
 8009316:	f7ff ffa0 	bl	800925a <__hexdig_fun>
 800931a:	2800      	cmp	r0, #0
 800931c:	d1f8      	bne.n	8009310 <__gethex+0x8c>
 800931e:	1ba4      	subs	r4, r4, r6
 8009320:	00a7      	lsls	r7, r4, #2
 8009322:	7833      	ldrb	r3, [r6, #0]
 8009324:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009328:	2b50      	cmp	r3, #80	@ 0x50
 800932a:	d13e      	bne.n	80093aa <__gethex+0x126>
 800932c:	7873      	ldrb	r3, [r6, #1]
 800932e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009330:	d033      	beq.n	800939a <__gethex+0x116>
 8009332:	2b2d      	cmp	r3, #45	@ 0x2d
 8009334:	d034      	beq.n	80093a0 <__gethex+0x11c>
 8009336:	2400      	movs	r4, #0
 8009338:	1c71      	adds	r1, r6, #1
 800933a:	7808      	ldrb	r0, [r1, #0]
 800933c:	f7ff ff8d 	bl	800925a <__hexdig_fun>
 8009340:	1e43      	subs	r3, r0, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b18      	cmp	r3, #24
 8009346:	d830      	bhi.n	80093aa <__gethex+0x126>
 8009348:	f1a0 0210 	sub.w	r2, r0, #16
 800934c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009350:	f7ff ff83 	bl	800925a <__hexdig_fun>
 8009354:	f100 3cff 	add.w	ip, r0, #4294967295
 8009358:	fa5f fc8c 	uxtb.w	ip, ip
 800935c:	f1bc 0f18 	cmp.w	ip, #24
 8009360:	f04f 030a 	mov.w	r3, #10
 8009364:	d91e      	bls.n	80093a4 <__gethex+0x120>
 8009366:	b104      	cbz	r4, 800936a <__gethex+0xe6>
 8009368:	4252      	negs	r2, r2
 800936a:	4417      	add	r7, r2
 800936c:	f8ca 1000 	str.w	r1, [sl]
 8009370:	b1ed      	cbz	r5, 80093ae <__gethex+0x12a>
 8009372:	f1bb 0f00 	cmp.w	fp, #0
 8009376:	bf0c      	ite	eq
 8009378:	2506      	moveq	r5, #6
 800937a:	2500      	movne	r5, #0
 800937c:	4628      	mov	r0, r5
 800937e:	b005      	add	sp, #20
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	2500      	movs	r5, #0
 8009386:	462c      	mov	r4, r5
 8009388:	e7b0      	b.n	80092ec <__gethex+0x68>
 800938a:	2c00      	cmp	r4, #0
 800938c:	d1c7      	bne.n	800931e <__gethex+0x9a>
 800938e:	4627      	mov	r7, r4
 8009390:	e7c7      	b.n	8009322 <__gethex+0x9e>
 8009392:	464e      	mov	r6, r9
 8009394:	462f      	mov	r7, r5
 8009396:	2501      	movs	r5, #1
 8009398:	e7c3      	b.n	8009322 <__gethex+0x9e>
 800939a:	2400      	movs	r4, #0
 800939c:	1cb1      	adds	r1, r6, #2
 800939e:	e7cc      	b.n	800933a <__gethex+0xb6>
 80093a0:	2401      	movs	r4, #1
 80093a2:	e7fb      	b.n	800939c <__gethex+0x118>
 80093a4:	fb03 0002 	mla	r0, r3, r2, r0
 80093a8:	e7ce      	b.n	8009348 <__gethex+0xc4>
 80093aa:	4631      	mov	r1, r6
 80093ac:	e7de      	b.n	800936c <__gethex+0xe8>
 80093ae:	4629      	mov	r1, r5
 80093b0:	eba6 0309 	sub.w	r3, r6, r9
 80093b4:	3b01      	subs	r3, #1
 80093b6:	2b07      	cmp	r3, #7
 80093b8:	dc0a      	bgt.n	80093d0 <__gethex+0x14c>
 80093ba:	9801      	ldr	r0, [sp, #4]
 80093bc:	f000 fb48 	bl	8009a50 <_Balloc>
 80093c0:	4604      	mov	r4, r0
 80093c2:	b940      	cbnz	r0, 80093d6 <__gethex+0x152>
 80093c4:	4602      	mov	r2, r0
 80093c6:	21e4      	movs	r1, #228	@ 0xe4
 80093c8:	4b5b      	ldr	r3, [pc, #364]	@ (8009538 <__gethex+0x2b4>)
 80093ca:	485c      	ldr	r0, [pc, #368]	@ (800953c <__gethex+0x2b8>)
 80093cc:	f7ff fe84 	bl	80090d8 <__assert_func>
 80093d0:	3101      	adds	r1, #1
 80093d2:	105b      	asrs	r3, r3, #1
 80093d4:	e7ef      	b.n	80093b6 <__gethex+0x132>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f100 0a14 	add.w	sl, r0, #20
 80093dc:	4655      	mov	r5, sl
 80093de:	469b      	mov	fp, r3
 80093e0:	45b1      	cmp	r9, r6
 80093e2:	d337      	bcc.n	8009454 <__gethex+0x1d0>
 80093e4:	f845 bb04 	str.w	fp, [r5], #4
 80093e8:	eba5 050a 	sub.w	r5, r5, sl
 80093ec:	10ad      	asrs	r5, r5, #2
 80093ee:	6125      	str	r5, [r4, #16]
 80093f0:	4658      	mov	r0, fp
 80093f2:	f000 fc1f 	bl	8009c34 <__hi0bits>
 80093f6:	016d      	lsls	r5, r5, #5
 80093f8:	f8d8 6000 	ldr.w	r6, [r8]
 80093fc:	1a2d      	subs	r5, r5, r0
 80093fe:	42b5      	cmp	r5, r6
 8009400:	dd54      	ble.n	80094ac <__gethex+0x228>
 8009402:	1bad      	subs	r5, r5, r6
 8009404:	4629      	mov	r1, r5
 8009406:	4620      	mov	r0, r4
 8009408:	f000 ffa7 	bl	800a35a <__any_on>
 800940c:	4681      	mov	r9, r0
 800940e:	b178      	cbz	r0, 8009430 <__gethex+0x1ac>
 8009410:	f04f 0901 	mov.w	r9, #1
 8009414:	1e6b      	subs	r3, r5, #1
 8009416:	1159      	asrs	r1, r3, #5
 8009418:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800941c:	f003 021f 	and.w	r2, r3, #31
 8009420:	fa09 f202 	lsl.w	r2, r9, r2
 8009424:	420a      	tst	r2, r1
 8009426:	d003      	beq.n	8009430 <__gethex+0x1ac>
 8009428:	454b      	cmp	r3, r9
 800942a:	dc36      	bgt.n	800949a <__gethex+0x216>
 800942c:	f04f 0902 	mov.w	r9, #2
 8009430:	4629      	mov	r1, r5
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff febe 	bl	80091b4 <rshift>
 8009438:	442f      	add	r7, r5
 800943a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800943e:	42bb      	cmp	r3, r7
 8009440:	da42      	bge.n	80094c8 <__gethex+0x244>
 8009442:	4621      	mov	r1, r4
 8009444:	9801      	ldr	r0, [sp, #4]
 8009446:	f000 fb43 	bl	8009ad0 <_Bfree>
 800944a:	2300      	movs	r3, #0
 800944c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800944e:	25a3      	movs	r5, #163	@ 0xa3
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e793      	b.n	800937c <__gethex+0xf8>
 8009454:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009458:	2a2e      	cmp	r2, #46	@ 0x2e
 800945a:	d012      	beq.n	8009482 <__gethex+0x1fe>
 800945c:	2b20      	cmp	r3, #32
 800945e:	d104      	bne.n	800946a <__gethex+0x1e6>
 8009460:	f845 bb04 	str.w	fp, [r5], #4
 8009464:	f04f 0b00 	mov.w	fp, #0
 8009468:	465b      	mov	r3, fp
 800946a:	7830      	ldrb	r0, [r6, #0]
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	f7ff fef4 	bl	800925a <__hexdig_fun>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	f000 000f 	and.w	r0, r0, #15
 8009478:	4098      	lsls	r0, r3
 800947a:	ea4b 0b00 	orr.w	fp, fp, r0
 800947e:	3304      	adds	r3, #4
 8009480:	e7ae      	b.n	80093e0 <__gethex+0x15c>
 8009482:	45b1      	cmp	r9, r6
 8009484:	d8ea      	bhi.n	800945c <__gethex+0x1d8>
 8009486:	2201      	movs	r2, #1
 8009488:	4630      	mov	r0, r6
 800948a:	492a      	ldr	r1, [pc, #168]	@ (8009534 <__gethex+0x2b0>)
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	f7fe feb4 	bl	80081fa <strncmp>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	2800      	cmp	r0, #0
 8009496:	d1e1      	bne.n	800945c <__gethex+0x1d8>
 8009498:	e7a2      	b.n	80093e0 <__gethex+0x15c>
 800949a:	4620      	mov	r0, r4
 800949c:	1ea9      	subs	r1, r5, #2
 800949e:	f000 ff5c 	bl	800a35a <__any_on>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0c2      	beq.n	800942c <__gethex+0x1a8>
 80094a6:	f04f 0903 	mov.w	r9, #3
 80094aa:	e7c1      	b.n	8009430 <__gethex+0x1ac>
 80094ac:	da09      	bge.n	80094c2 <__gethex+0x23e>
 80094ae:	1b75      	subs	r5, r6, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	462a      	mov	r2, r5
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	f000 fd21 	bl	8009efc <__lshift>
 80094ba:	4604      	mov	r4, r0
 80094bc:	1b7f      	subs	r7, r7, r5
 80094be:	f100 0a14 	add.w	sl, r0, #20
 80094c2:	f04f 0900 	mov.w	r9, #0
 80094c6:	e7b8      	b.n	800943a <__gethex+0x1b6>
 80094c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094cc:	42bd      	cmp	r5, r7
 80094ce:	dd6f      	ble.n	80095b0 <__gethex+0x32c>
 80094d0:	1bed      	subs	r5, r5, r7
 80094d2:	42ae      	cmp	r6, r5
 80094d4:	dc34      	bgt.n	8009540 <__gethex+0x2bc>
 80094d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d022      	beq.n	8009524 <__gethex+0x2a0>
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d024      	beq.n	800952c <__gethex+0x2a8>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d115      	bne.n	8009512 <__gethex+0x28e>
 80094e6:	42ae      	cmp	r6, r5
 80094e8:	d113      	bne.n	8009512 <__gethex+0x28e>
 80094ea:	2e01      	cmp	r6, #1
 80094ec:	d10b      	bne.n	8009506 <__gethex+0x282>
 80094ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094f2:	9a02      	ldr	r2, [sp, #8]
 80094f4:	2562      	movs	r5, #98	@ 0x62
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	2301      	movs	r3, #1
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	f8ca 3000 	str.w	r3, [sl]
 8009500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009502:	601c      	str	r4, [r3, #0]
 8009504:	e73a      	b.n	800937c <__gethex+0xf8>
 8009506:	4620      	mov	r0, r4
 8009508:	1e71      	subs	r1, r6, #1
 800950a:	f000 ff26 	bl	800a35a <__any_on>
 800950e:	2800      	cmp	r0, #0
 8009510:	d1ed      	bne.n	80094ee <__gethex+0x26a>
 8009512:	4621      	mov	r1, r4
 8009514:	9801      	ldr	r0, [sp, #4]
 8009516:	f000 fadb 	bl	8009ad0 <_Bfree>
 800951a:	2300      	movs	r3, #0
 800951c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800951e:	2550      	movs	r5, #80	@ 0x50
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	e72b      	b.n	800937c <__gethex+0xf8>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1f3      	bne.n	8009512 <__gethex+0x28e>
 800952a:	e7e0      	b.n	80094ee <__gethex+0x26a>
 800952c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1dd      	bne.n	80094ee <__gethex+0x26a>
 8009532:	e7ee      	b.n	8009512 <__gethex+0x28e>
 8009534:	0800c7f4 	.word	0x0800c7f4
 8009538:	0800cb76 	.word	0x0800cb76
 800953c:	0800cb87 	.word	0x0800cb87
 8009540:	1e6f      	subs	r7, r5, #1
 8009542:	f1b9 0f00 	cmp.w	r9, #0
 8009546:	d130      	bne.n	80095aa <__gethex+0x326>
 8009548:	b127      	cbz	r7, 8009554 <__gethex+0x2d0>
 800954a:	4639      	mov	r1, r7
 800954c:	4620      	mov	r0, r4
 800954e:	f000 ff04 	bl	800a35a <__any_on>
 8009552:	4681      	mov	r9, r0
 8009554:	2301      	movs	r3, #1
 8009556:	4629      	mov	r1, r5
 8009558:	1b76      	subs	r6, r6, r5
 800955a:	2502      	movs	r5, #2
 800955c:	117a      	asrs	r2, r7, #5
 800955e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009562:	f007 071f 	and.w	r7, r7, #31
 8009566:	40bb      	lsls	r3, r7
 8009568:	4213      	tst	r3, r2
 800956a:	4620      	mov	r0, r4
 800956c:	bf18      	it	ne
 800956e:	f049 0902 	orrne.w	r9, r9, #2
 8009572:	f7ff fe1f 	bl	80091b4 <rshift>
 8009576:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800957a:	f1b9 0f00 	cmp.w	r9, #0
 800957e:	d047      	beq.n	8009610 <__gethex+0x38c>
 8009580:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d015      	beq.n	80095b4 <__gethex+0x330>
 8009588:	2b03      	cmp	r3, #3
 800958a:	d017      	beq.n	80095bc <__gethex+0x338>
 800958c:	2b01      	cmp	r3, #1
 800958e:	d109      	bne.n	80095a4 <__gethex+0x320>
 8009590:	f019 0f02 	tst.w	r9, #2
 8009594:	d006      	beq.n	80095a4 <__gethex+0x320>
 8009596:	f8da 3000 	ldr.w	r3, [sl]
 800959a:	ea49 0903 	orr.w	r9, r9, r3
 800959e:	f019 0f01 	tst.w	r9, #1
 80095a2:	d10e      	bne.n	80095c2 <__gethex+0x33e>
 80095a4:	f045 0510 	orr.w	r5, r5, #16
 80095a8:	e032      	b.n	8009610 <__gethex+0x38c>
 80095aa:	f04f 0901 	mov.w	r9, #1
 80095ae:	e7d1      	b.n	8009554 <__gethex+0x2d0>
 80095b0:	2501      	movs	r5, #1
 80095b2:	e7e2      	b.n	800957a <__gethex+0x2f6>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	f1c3 0301 	rsb	r3, r3, #1
 80095ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0f0      	beq.n	80095a4 <__gethex+0x320>
 80095c2:	f04f 0c00 	mov.w	ip, #0
 80095c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095ca:	f104 0314 	add.w	r3, r4, #20
 80095ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095e0:	d01b      	beq.n	800961a <__gethex+0x396>
 80095e2:	3201      	adds	r2, #1
 80095e4:	6002      	str	r2, [r0, #0]
 80095e6:	2d02      	cmp	r5, #2
 80095e8:	f104 0314 	add.w	r3, r4, #20
 80095ec:	d13c      	bne.n	8009668 <__gethex+0x3e4>
 80095ee:	f8d8 2000 	ldr.w	r2, [r8]
 80095f2:	3a01      	subs	r2, #1
 80095f4:	42b2      	cmp	r2, r6
 80095f6:	d109      	bne.n	800960c <__gethex+0x388>
 80095f8:	2201      	movs	r2, #1
 80095fa:	1171      	asrs	r1, r6, #5
 80095fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009600:	f006 061f 	and.w	r6, r6, #31
 8009604:	fa02 f606 	lsl.w	r6, r2, r6
 8009608:	421e      	tst	r6, r3
 800960a:	d13a      	bne.n	8009682 <__gethex+0x3fe>
 800960c:	f045 0520 	orr.w	r5, r5, #32
 8009610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009612:	601c      	str	r4, [r3, #0]
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	601f      	str	r7, [r3, #0]
 8009618:	e6b0      	b.n	800937c <__gethex+0xf8>
 800961a:	4299      	cmp	r1, r3
 800961c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009620:	d8d9      	bhi.n	80095d6 <__gethex+0x352>
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	459b      	cmp	fp, r3
 8009626:	db17      	blt.n	8009658 <__gethex+0x3d4>
 8009628:	6861      	ldr	r1, [r4, #4]
 800962a:	9801      	ldr	r0, [sp, #4]
 800962c:	3101      	adds	r1, #1
 800962e:	f000 fa0f 	bl	8009a50 <_Balloc>
 8009632:	4681      	mov	r9, r0
 8009634:	b918      	cbnz	r0, 800963e <__gethex+0x3ba>
 8009636:	4602      	mov	r2, r0
 8009638:	2184      	movs	r1, #132	@ 0x84
 800963a:	4b19      	ldr	r3, [pc, #100]	@ (80096a0 <__gethex+0x41c>)
 800963c:	e6c5      	b.n	80093ca <__gethex+0x146>
 800963e:	6922      	ldr	r2, [r4, #16]
 8009640:	f104 010c 	add.w	r1, r4, #12
 8009644:	3202      	adds	r2, #2
 8009646:	0092      	lsls	r2, r2, #2
 8009648:	300c      	adds	r0, #12
 800964a:	f7ff fd30 	bl	80090ae <memcpy>
 800964e:	4621      	mov	r1, r4
 8009650:	9801      	ldr	r0, [sp, #4]
 8009652:	f000 fa3d 	bl	8009ad0 <_Bfree>
 8009656:	464c      	mov	r4, r9
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	6122      	str	r2, [r4, #16]
 800965e:	2201      	movs	r2, #1
 8009660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009664:	615a      	str	r2, [r3, #20]
 8009666:	e7be      	b.n	80095e6 <__gethex+0x362>
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	455a      	cmp	r2, fp
 800966c:	dd0b      	ble.n	8009686 <__gethex+0x402>
 800966e:	2101      	movs	r1, #1
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff fd9f 	bl	80091b4 <rshift>
 8009676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800967a:	3701      	adds	r7, #1
 800967c:	42bb      	cmp	r3, r7
 800967e:	f6ff aee0 	blt.w	8009442 <__gethex+0x1be>
 8009682:	2501      	movs	r5, #1
 8009684:	e7c2      	b.n	800960c <__gethex+0x388>
 8009686:	f016 061f 	ands.w	r6, r6, #31
 800968a:	d0fa      	beq.n	8009682 <__gethex+0x3fe>
 800968c:	4453      	add	r3, sl
 800968e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009692:	f000 facf 	bl	8009c34 <__hi0bits>
 8009696:	f1c6 0620 	rsb	r6, r6, #32
 800969a:	42b0      	cmp	r0, r6
 800969c:	dbe7      	blt.n	800966e <__gethex+0x3ea>
 800969e:	e7f0      	b.n	8009682 <__gethex+0x3fe>
 80096a0:	0800cb76 	.word	0x0800cb76

080096a4 <L_shift>:
 80096a4:	f1c2 0208 	rsb	r2, r2, #8
 80096a8:	0092      	lsls	r2, r2, #2
 80096aa:	b570      	push	{r4, r5, r6, lr}
 80096ac:	f1c2 0620 	rsb	r6, r2, #32
 80096b0:	6843      	ldr	r3, [r0, #4]
 80096b2:	6804      	ldr	r4, [r0, #0]
 80096b4:	fa03 f506 	lsl.w	r5, r3, r6
 80096b8:	432c      	orrs	r4, r5
 80096ba:	40d3      	lsrs	r3, r2
 80096bc:	6004      	str	r4, [r0, #0]
 80096be:	f840 3f04 	str.w	r3, [r0, #4]!
 80096c2:	4288      	cmp	r0, r1
 80096c4:	d3f4      	bcc.n	80096b0 <L_shift+0xc>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}

080096c8 <__match>:
 80096c8:	b530      	push	{r4, r5, lr}
 80096ca:	6803      	ldr	r3, [r0, #0]
 80096cc:	3301      	adds	r3, #1
 80096ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d2:	b914      	cbnz	r4, 80096da <__match+0x12>
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	2001      	movs	r0, #1
 80096d8:	bd30      	pop	{r4, r5, pc}
 80096da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096e2:	2d19      	cmp	r5, #25
 80096e4:	bf98      	it	ls
 80096e6:	3220      	addls	r2, #32
 80096e8:	42a2      	cmp	r2, r4
 80096ea:	d0f0      	beq.n	80096ce <__match+0x6>
 80096ec:	2000      	movs	r0, #0
 80096ee:	e7f3      	b.n	80096d8 <__match+0x10>

080096f0 <__hexnan>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	2500      	movs	r5, #0
 80096f6:	680b      	ldr	r3, [r1, #0]
 80096f8:	4682      	mov	sl, r0
 80096fa:	115e      	asrs	r6, r3, #5
 80096fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009700:	f013 031f 	ands.w	r3, r3, #31
 8009704:	bf18      	it	ne
 8009706:	3604      	addne	r6, #4
 8009708:	1f37      	subs	r7, r6, #4
 800970a:	4690      	mov	r8, r2
 800970c:	46b9      	mov	r9, r7
 800970e:	463c      	mov	r4, r7
 8009710:	46ab      	mov	fp, r5
 8009712:	b087      	sub	sp, #28
 8009714:	6801      	ldr	r1, [r0, #0]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	f846 5c04 	str.w	r5, [r6, #-4]
 800971c:	9502      	str	r5, [sp, #8]
 800971e:	784a      	ldrb	r2, [r1, #1]
 8009720:	1c4b      	adds	r3, r1, #1
 8009722:	9303      	str	r3, [sp, #12]
 8009724:	b342      	cbz	r2, 8009778 <__hexnan+0x88>
 8009726:	4610      	mov	r0, r2
 8009728:	9105      	str	r1, [sp, #20]
 800972a:	9204      	str	r2, [sp, #16]
 800972c:	f7ff fd95 	bl	800925a <__hexdig_fun>
 8009730:	2800      	cmp	r0, #0
 8009732:	d151      	bne.n	80097d8 <__hexnan+0xe8>
 8009734:	9a04      	ldr	r2, [sp, #16]
 8009736:	9905      	ldr	r1, [sp, #20]
 8009738:	2a20      	cmp	r2, #32
 800973a:	d818      	bhi.n	800976e <__hexnan+0x7e>
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	459b      	cmp	fp, r3
 8009740:	dd13      	ble.n	800976a <__hexnan+0x7a>
 8009742:	454c      	cmp	r4, r9
 8009744:	d206      	bcs.n	8009754 <__hexnan+0x64>
 8009746:	2d07      	cmp	r5, #7
 8009748:	dc04      	bgt.n	8009754 <__hexnan+0x64>
 800974a:	462a      	mov	r2, r5
 800974c:	4649      	mov	r1, r9
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff ffa8 	bl	80096a4 <L_shift>
 8009754:	4544      	cmp	r4, r8
 8009756:	d952      	bls.n	80097fe <__hexnan+0x10e>
 8009758:	2300      	movs	r3, #0
 800975a:	f1a4 0904 	sub.w	r9, r4, #4
 800975e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009762:	461d      	mov	r5, r3
 8009764:	464c      	mov	r4, r9
 8009766:	f8cd b008 	str.w	fp, [sp, #8]
 800976a:	9903      	ldr	r1, [sp, #12]
 800976c:	e7d7      	b.n	800971e <__hexnan+0x2e>
 800976e:	2a29      	cmp	r2, #41	@ 0x29
 8009770:	d157      	bne.n	8009822 <__hexnan+0x132>
 8009772:	3102      	adds	r1, #2
 8009774:	f8ca 1000 	str.w	r1, [sl]
 8009778:	f1bb 0f00 	cmp.w	fp, #0
 800977c:	d051      	beq.n	8009822 <__hexnan+0x132>
 800977e:	454c      	cmp	r4, r9
 8009780:	d206      	bcs.n	8009790 <__hexnan+0xa0>
 8009782:	2d07      	cmp	r5, #7
 8009784:	dc04      	bgt.n	8009790 <__hexnan+0xa0>
 8009786:	462a      	mov	r2, r5
 8009788:	4649      	mov	r1, r9
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff ff8a 	bl	80096a4 <L_shift>
 8009790:	4544      	cmp	r4, r8
 8009792:	d936      	bls.n	8009802 <__hexnan+0x112>
 8009794:	4623      	mov	r3, r4
 8009796:	f1a8 0204 	sub.w	r2, r8, #4
 800979a:	f853 1b04 	ldr.w	r1, [r3], #4
 800979e:	429f      	cmp	r7, r3
 80097a0:	f842 1f04 	str.w	r1, [r2, #4]!
 80097a4:	d2f9      	bcs.n	800979a <__hexnan+0xaa>
 80097a6:	1b3b      	subs	r3, r7, r4
 80097a8:	f023 0303 	bic.w	r3, r3, #3
 80097ac:	3304      	adds	r3, #4
 80097ae:	3401      	adds	r4, #1
 80097b0:	3e03      	subs	r6, #3
 80097b2:	42b4      	cmp	r4, r6
 80097b4:	bf88      	it	hi
 80097b6:	2304      	movhi	r3, #4
 80097b8:	2200      	movs	r2, #0
 80097ba:	4443      	add	r3, r8
 80097bc:	f843 2b04 	str.w	r2, [r3], #4
 80097c0:	429f      	cmp	r7, r3
 80097c2:	d2fb      	bcs.n	80097bc <__hexnan+0xcc>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	b91b      	cbnz	r3, 80097d0 <__hexnan+0xe0>
 80097c8:	4547      	cmp	r7, r8
 80097ca:	d128      	bne.n	800981e <__hexnan+0x12e>
 80097cc:	2301      	movs	r3, #1
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	2005      	movs	r0, #5
 80097d2:	b007      	add	sp, #28
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	3501      	adds	r5, #1
 80097da:	2d08      	cmp	r5, #8
 80097dc:	f10b 0b01 	add.w	fp, fp, #1
 80097e0:	dd06      	ble.n	80097f0 <__hexnan+0x100>
 80097e2:	4544      	cmp	r4, r8
 80097e4:	d9c1      	bls.n	800976a <__hexnan+0x7a>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2501      	movs	r5, #1
 80097ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ee:	3c04      	subs	r4, #4
 80097f0:	6822      	ldr	r2, [r4, #0]
 80097f2:	f000 000f 	and.w	r0, r0, #15
 80097f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	e7b5      	b.n	800976a <__hexnan+0x7a>
 80097fe:	2508      	movs	r5, #8
 8009800:	e7b3      	b.n	800976a <__hexnan+0x7a>
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0dd      	beq.n	80097c4 <__hexnan+0xd4>
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	f1c3 0320 	rsb	r3, r3, #32
 8009810:	40da      	lsrs	r2, r3
 8009812:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009816:	4013      	ands	r3, r2
 8009818:	f846 3c04 	str.w	r3, [r6, #-4]
 800981c:	e7d2      	b.n	80097c4 <__hexnan+0xd4>
 800981e:	3f04      	subs	r7, #4
 8009820:	e7d0      	b.n	80097c4 <__hexnan+0xd4>
 8009822:	2004      	movs	r0, #4
 8009824:	e7d5      	b.n	80097d2 <__hexnan+0xe2>
	...

08009828 <_findenv_r>:
 8009828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800989c <_findenv_r+0x74>
 8009830:	4606      	mov	r6, r0
 8009832:	4689      	mov	r9, r1
 8009834:	4617      	mov	r7, r2
 8009836:	f000 fff3 	bl	800a820 <__env_lock>
 800983a:	f8da 4000 	ldr.w	r4, [sl]
 800983e:	b134      	cbz	r4, 800984e <_findenv_r+0x26>
 8009840:	464b      	mov	r3, r9
 8009842:	4698      	mov	r8, r3
 8009844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009848:	b13a      	cbz	r2, 800985a <_findenv_r+0x32>
 800984a:	2a3d      	cmp	r2, #61	@ 0x3d
 800984c:	d1f9      	bne.n	8009842 <_findenv_r+0x1a>
 800984e:	4630      	mov	r0, r6
 8009850:	f000 ffec 	bl	800a82c <__env_unlock>
 8009854:	2000      	movs	r0, #0
 8009856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	eba8 0809 	sub.w	r8, r8, r9
 800985e:	46a3      	mov	fp, r4
 8009860:	f854 0b04 	ldr.w	r0, [r4], #4
 8009864:	2800      	cmp	r0, #0
 8009866:	d0f2      	beq.n	800984e <_findenv_r+0x26>
 8009868:	4642      	mov	r2, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7fe fcc5 	bl	80081fa <strncmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	d1f4      	bne.n	800985e <_findenv_r+0x36>
 8009874:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009878:	eb03 0508 	add.w	r5, r3, r8
 800987c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009880:	2b3d      	cmp	r3, #61	@ 0x3d
 8009882:	d1ec      	bne.n	800985e <_findenv_r+0x36>
 8009884:	f8da 3000 	ldr.w	r3, [sl]
 8009888:	4630      	mov	r0, r6
 800988a:	ebab 0303 	sub.w	r3, fp, r3
 800988e:	109b      	asrs	r3, r3, #2
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	f000 ffcb 	bl	800a82c <__env_unlock>
 8009896:	1c68      	adds	r0, r5, #1
 8009898:	e7dd      	b.n	8009856 <_findenv_r+0x2e>
 800989a:	bf00      	nop
 800989c:	20000444 	.word	0x20000444

080098a0 <_getenv_r>:
 80098a0:	b507      	push	{r0, r1, r2, lr}
 80098a2:	aa01      	add	r2, sp, #4
 80098a4:	f7ff ffc0 	bl	8009828 <_findenv_r>
 80098a8:	b003      	add	sp, #12
 80098aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080098b0 <malloc>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	@ (80098bc <malloc+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f000 b82d 	b.w	8009914 <_malloc_r>
 80098ba:	bf00      	nop
 80098bc:	200005c8 	.word	0x200005c8

080098c0 <free>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	@ (80098cc <free+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff bc2d 	b.w	8009124 <_free_r>
 80098ca:	bf00      	nop
 80098cc:	200005c8 	.word	0x200005c8

080098d0 <sbrk_aligned>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4e0f      	ldr	r6, [pc, #60]	@ (8009910 <sbrk_aligned+0x40>)
 80098d4:	460c      	mov	r4, r1
 80098d6:	6831      	ldr	r1, [r6, #0]
 80098d8:	4605      	mov	r5, r0
 80098da:	b911      	cbnz	r1, 80098e2 <sbrk_aligned+0x12>
 80098dc:	f000 ff74 	bl	800a7c8 <_sbrk_r>
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	4621      	mov	r1, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 ff6f 	bl	800a7c8 <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d103      	bne.n	80098f6 <sbrk_aligned+0x26>
 80098ee:	f04f 34ff 	mov.w	r4, #4294967295
 80098f2:	4620      	mov	r0, r4
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	1cc4      	adds	r4, r0, #3
 80098f8:	f024 0403 	bic.w	r4, r4, #3
 80098fc:	42a0      	cmp	r0, r4
 80098fe:	d0f8      	beq.n	80098f2 <sbrk_aligned+0x22>
 8009900:	1a21      	subs	r1, r4, r0
 8009902:	4628      	mov	r0, r5
 8009904:	f000 ff60 	bl	800a7c8 <_sbrk_r>
 8009908:	3001      	adds	r0, #1
 800990a:	d1f2      	bne.n	80098f2 <sbrk_aligned+0x22>
 800990c:	e7ef      	b.n	80098ee <sbrk_aligned+0x1e>
 800990e:	bf00      	nop
 8009910:	20000a6c 	.word	0x20000a6c

08009914 <_malloc_r>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	1ccd      	adds	r5, r1, #3
 800991a:	f025 0503 	bic.w	r5, r5, #3
 800991e:	3508      	adds	r5, #8
 8009920:	2d0c      	cmp	r5, #12
 8009922:	bf38      	it	cc
 8009924:	250c      	movcc	r5, #12
 8009926:	2d00      	cmp	r5, #0
 8009928:	4606      	mov	r6, r0
 800992a:	db01      	blt.n	8009930 <_malloc_r+0x1c>
 800992c:	42a9      	cmp	r1, r5
 800992e:	d904      	bls.n	800993a <_malloc_r+0x26>
 8009930:	230c      	movs	r3, #12
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	2000      	movs	r0, #0
 8009936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a10 <_malloc_r+0xfc>
 800993e:	f000 f87b 	bl	8009a38 <__malloc_lock>
 8009942:	f8d8 3000 	ldr.w	r3, [r8]
 8009946:	461c      	mov	r4, r3
 8009948:	bb44      	cbnz	r4, 800999c <_malloc_r+0x88>
 800994a:	4629      	mov	r1, r5
 800994c:	4630      	mov	r0, r6
 800994e:	f7ff ffbf 	bl	80098d0 <sbrk_aligned>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	4604      	mov	r4, r0
 8009956:	d158      	bne.n	8009a0a <_malloc_r+0xf6>
 8009958:	f8d8 4000 	ldr.w	r4, [r8]
 800995c:	4627      	mov	r7, r4
 800995e:	2f00      	cmp	r7, #0
 8009960:	d143      	bne.n	80099ea <_malloc_r+0xd6>
 8009962:	2c00      	cmp	r4, #0
 8009964:	d04b      	beq.n	80099fe <_malloc_r+0xea>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	4639      	mov	r1, r7
 800996a:	4630      	mov	r0, r6
 800996c:	eb04 0903 	add.w	r9, r4, r3
 8009970:	f000 ff2a 	bl	800a7c8 <_sbrk_r>
 8009974:	4581      	cmp	r9, r0
 8009976:	d142      	bne.n	80099fe <_malloc_r+0xea>
 8009978:	6821      	ldr	r1, [r4, #0]
 800997a:	4630      	mov	r0, r6
 800997c:	1a6d      	subs	r5, r5, r1
 800997e:	4629      	mov	r1, r5
 8009980:	f7ff ffa6 	bl	80098d0 <sbrk_aligned>
 8009984:	3001      	adds	r0, #1
 8009986:	d03a      	beq.n	80099fe <_malloc_r+0xea>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	442b      	add	r3, r5
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	f8d8 3000 	ldr.w	r3, [r8]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	bb62      	cbnz	r2, 80099f0 <_malloc_r+0xdc>
 8009996:	f8c8 7000 	str.w	r7, [r8]
 800999a:	e00f      	b.n	80099bc <_malloc_r+0xa8>
 800999c:	6822      	ldr	r2, [r4, #0]
 800999e:	1b52      	subs	r2, r2, r5
 80099a0:	d420      	bmi.n	80099e4 <_malloc_r+0xd0>
 80099a2:	2a0b      	cmp	r2, #11
 80099a4:	d917      	bls.n	80099d6 <_malloc_r+0xc2>
 80099a6:	1961      	adds	r1, r4, r5
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	6025      	str	r5, [r4, #0]
 80099ac:	bf18      	it	ne
 80099ae:	6059      	strne	r1, [r3, #4]
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	bf08      	it	eq
 80099b4:	f8c8 1000 	streq.w	r1, [r8]
 80099b8:	5162      	str	r2, [r4, r5]
 80099ba:	604b      	str	r3, [r1, #4]
 80099bc:	4630      	mov	r0, r6
 80099be:	f000 f841 	bl	8009a44 <__malloc_unlock>
 80099c2:	f104 000b 	add.w	r0, r4, #11
 80099c6:	1d23      	adds	r3, r4, #4
 80099c8:	f020 0007 	bic.w	r0, r0, #7
 80099cc:	1ac2      	subs	r2, r0, r3
 80099ce:	bf1c      	itt	ne
 80099d0:	1a1b      	subne	r3, r3, r0
 80099d2:	50a3      	strne	r3, [r4, r2]
 80099d4:	e7af      	b.n	8009936 <_malloc_r+0x22>
 80099d6:	6862      	ldr	r2, [r4, #4]
 80099d8:	42a3      	cmp	r3, r4
 80099da:	bf0c      	ite	eq
 80099dc:	f8c8 2000 	streq.w	r2, [r8]
 80099e0:	605a      	strne	r2, [r3, #4]
 80099e2:	e7eb      	b.n	80099bc <_malloc_r+0xa8>
 80099e4:	4623      	mov	r3, r4
 80099e6:	6864      	ldr	r4, [r4, #4]
 80099e8:	e7ae      	b.n	8009948 <_malloc_r+0x34>
 80099ea:	463c      	mov	r4, r7
 80099ec:	687f      	ldr	r7, [r7, #4]
 80099ee:	e7b6      	b.n	800995e <_malloc_r+0x4a>
 80099f0:	461a      	mov	r2, r3
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d1fb      	bne.n	80099f0 <_malloc_r+0xdc>
 80099f8:	2300      	movs	r3, #0
 80099fa:	6053      	str	r3, [r2, #4]
 80099fc:	e7de      	b.n	80099bc <_malloc_r+0xa8>
 80099fe:	230c      	movs	r3, #12
 8009a00:	4630      	mov	r0, r6
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f000 f81e 	bl	8009a44 <__malloc_unlock>
 8009a08:	e794      	b.n	8009934 <_malloc_r+0x20>
 8009a0a:	6005      	str	r5, [r0, #0]
 8009a0c:	e7d6      	b.n	80099bc <_malloc_r+0xa8>
 8009a0e:	bf00      	nop
 8009a10:	20000a70 	.word	0x20000a70

08009a14 <__ascii_mbtowc>:
 8009a14:	b082      	sub	sp, #8
 8009a16:	b901      	cbnz	r1, 8009a1a <__ascii_mbtowc+0x6>
 8009a18:	a901      	add	r1, sp, #4
 8009a1a:	b142      	cbz	r2, 8009a2e <__ascii_mbtowc+0x1a>
 8009a1c:	b14b      	cbz	r3, 8009a32 <__ascii_mbtowc+0x1e>
 8009a1e:	7813      	ldrb	r3, [r2, #0]
 8009a20:	600b      	str	r3, [r1, #0]
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	1e10      	subs	r0, r2, #0
 8009a26:	bf18      	it	ne
 8009a28:	2001      	movne	r0, #1
 8009a2a:	b002      	add	sp, #8
 8009a2c:	4770      	bx	lr
 8009a2e:	4610      	mov	r0, r2
 8009a30:	e7fb      	b.n	8009a2a <__ascii_mbtowc+0x16>
 8009a32:	f06f 0001 	mvn.w	r0, #1
 8009a36:	e7f8      	b.n	8009a2a <__ascii_mbtowc+0x16>

08009a38 <__malloc_lock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	@ (8009a40 <__malloc_lock+0x8>)
 8009a3a:	f7ff bb2d 	b.w	8009098 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	20000a6a 	.word	0x20000a6a

08009a44 <__malloc_unlock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	@ (8009a4c <__malloc_unlock+0x8>)
 8009a46:	f7ff bb29 	b.w	800909c <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20000a6a 	.word	0x20000a6a

08009a50 <_Balloc>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	69c6      	ldr	r6, [r0, #28]
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Balloc+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ff28 	bl	80098b0 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	61e0      	str	r0, [r4, #28]
 8009a64:	b920      	cbnz	r0, 8009a70 <_Balloc+0x20>
 8009a66:	216b      	movs	r1, #107	@ 0x6b
 8009a68:	4b17      	ldr	r3, [pc, #92]	@ (8009ac8 <_Balloc+0x78>)
 8009a6a:	4818      	ldr	r0, [pc, #96]	@ (8009acc <_Balloc+0x7c>)
 8009a6c:	f7ff fb34 	bl	80090d8 <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	69e6      	ldr	r6, [r4, #28]
 8009a7a:	68f3      	ldr	r3, [r6, #12]
 8009a7c:	b183      	cbz	r3, 8009aa0 <_Balloc+0x50>
 8009a7e:	69e3      	ldr	r3, [r4, #28]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a86:	b9b8      	cbnz	r0, 8009ab8 <_Balloc+0x68>
 8009a88:	2101      	movs	r1, #1
 8009a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a8e:	1d72      	adds	r2, r6, #5
 8009a90:	4620      	mov	r0, r4
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	f000 feaf 	bl	800a7f6 <_calloc_r>
 8009a98:	b160      	cbz	r0, 8009ab4 <_Balloc+0x64>
 8009a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a9e:	e00e      	b.n	8009abe <_Balloc+0x6e>
 8009aa0:	2221      	movs	r2, #33	@ 0x21
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fea6 	bl	800a7f6 <_calloc_r>
 8009aaa:	69e3      	ldr	r3, [r4, #28]
 8009aac:	60f0      	str	r0, [r6, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e4      	bne.n	8009a7e <_Balloc+0x2e>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	6802      	ldr	r2, [r0, #0]
 8009aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ac4:	e7f7      	b.n	8009ab6 <_Balloc+0x66>
 8009ac6:	bf00      	nop
 8009ac8:	0800c959 	.word	0x0800c959
 8009acc:	0800cbe7 	.word	0x0800cbe7

08009ad0 <_Bfree>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	69c6      	ldr	r6, [r0, #28]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b976      	cbnz	r6, 8009af8 <_Bfree+0x28>
 8009ada:	2010      	movs	r0, #16
 8009adc:	f7ff fee8 	bl	80098b0 <malloc>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	61e8      	str	r0, [r5, #28]
 8009ae4:	b920      	cbnz	r0, 8009af0 <_Bfree+0x20>
 8009ae6:	218f      	movs	r1, #143	@ 0x8f
 8009ae8:	4b08      	ldr	r3, [pc, #32]	@ (8009b0c <_Bfree+0x3c>)
 8009aea:	4809      	ldr	r0, [pc, #36]	@ (8009b10 <_Bfree+0x40>)
 8009aec:	f7ff faf4 	bl	80090d8 <__assert_func>
 8009af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af4:	6006      	str	r6, [r0, #0]
 8009af6:	60c6      	str	r6, [r0, #12]
 8009af8:	b13c      	cbz	r4, 8009b0a <_Bfree+0x3a>
 8009afa:	69eb      	ldr	r3, [r5, #28]
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b04:	6021      	str	r1, [r4, #0]
 8009b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	0800c959 	.word	0x0800c959
 8009b10:	0800cbe7 	.word	0x0800cbe7

08009b14 <__multadd>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	461e      	mov	r6, r3
 8009b1e:	2000      	movs	r0, #0
 8009b20:	690d      	ldr	r5, [r1, #16]
 8009b22:	f101 0c14 	add.w	ip, r1, #20
 8009b26:	f8dc 3000 	ldr.w	r3, [ip]
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	b299      	uxth	r1, r3
 8009b2e:	fb02 6101 	mla	r1, r2, r1, r6
 8009b32:	0c1e      	lsrs	r6, r3, #16
 8009b34:	0c0b      	lsrs	r3, r1, #16
 8009b36:	fb02 3306 	mla	r3, r2, r6, r3
 8009b3a:	b289      	uxth	r1, r1
 8009b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b40:	4285      	cmp	r5, r0
 8009b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b46:	f84c 1b04 	str.w	r1, [ip], #4
 8009b4a:	dcec      	bgt.n	8009b26 <__multadd+0x12>
 8009b4c:	b30e      	cbz	r6, 8009b92 <__multadd+0x7e>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	42ab      	cmp	r3, r5
 8009b52:	dc19      	bgt.n	8009b88 <__multadd+0x74>
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	4638      	mov	r0, r7
 8009b58:	3101      	adds	r1, #1
 8009b5a:	f7ff ff79 	bl	8009a50 <_Balloc>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	b928      	cbnz	r0, 8009b6e <__multadd+0x5a>
 8009b62:	4602      	mov	r2, r0
 8009b64:	21ba      	movs	r1, #186	@ 0xba
 8009b66:	4b0c      	ldr	r3, [pc, #48]	@ (8009b98 <__multadd+0x84>)
 8009b68:	480c      	ldr	r0, [pc, #48]	@ (8009b9c <__multadd+0x88>)
 8009b6a:	f7ff fab5 	bl	80090d8 <__assert_func>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	f104 010c 	add.w	r1, r4, #12
 8009b74:	3202      	adds	r2, #2
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7ff fa98 	bl	80090ae <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff ffa5 	bl	8009ad0 <_Bfree>
 8009b86:	4644      	mov	r4, r8
 8009b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	615e      	str	r6, [r3, #20]
 8009b90:	6125      	str	r5, [r4, #16]
 8009b92:	4620      	mov	r0, r4
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	0800cb76 	.word	0x0800cb76
 8009b9c:	0800cbe7 	.word	0x0800cbe7

08009ba0 <__s2b>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	2209      	movs	r2, #9
 8009ba8:	461f      	mov	r7, r3
 8009baa:	3308      	adds	r3, #8
 8009bac:	460c      	mov	r4, r1
 8009bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	db09      	blt.n	8009bd0 <__s2b+0x30>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff ff47 	bl	8009a50 <_Balloc>
 8009bc2:	b940      	cbnz	r0, 8009bd6 <__s2b+0x36>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	21d3      	movs	r1, #211	@ 0xd3
 8009bc8:	4b18      	ldr	r3, [pc, #96]	@ (8009c2c <__s2b+0x8c>)
 8009bca:	4819      	ldr	r0, [pc, #100]	@ (8009c30 <__s2b+0x90>)
 8009bcc:	f7ff fa84 	bl	80090d8 <__assert_func>
 8009bd0:	0052      	lsls	r2, r2, #1
 8009bd2:	3101      	adds	r1, #1
 8009bd4:	e7f0      	b.n	8009bb8 <__s2b+0x18>
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	2d09      	cmp	r5, #9
 8009bda:	6143      	str	r3, [r0, #20]
 8009bdc:	f04f 0301 	mov.w	r3, #1
 8009be0:	6103      	str	r3, [r0, #16]
 8009be2:	dd16      	ble.n	8009c12 <__s2b+0x72>
 8009be4:	f104 0909 	add.w	r9, r4, #9
 8009be8:	46c8      	mov	r8, r9
 8009bea:	442c      	add	r4, r5
 8009bec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	3b30      	subs	r3, #48	@ 0x30
 8009bf8:	f7ff ff8c 	bl	8009b14 <__multadd>
 8009bfc:	45a0      	cmp	r8, r4
 8009bfe:	d1f5      	bne.n	8009bec <__s2b+0x4c>
 8009c00:	f1a5 0408 	sub.w	r4, r5, #8
 8009c04:	444c      	add	r4, r9
 8009c06:	1b2d      	subs	r5, r5, r4
 8009c08:	1963      	adds	r3, r4, r5
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	db04      	blt.n	8009c18 <__s2b+0x78>
 8009c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c12:	2509      	movs	r5, #9
 8009c14:	340a      	adds	r4, #10
 8009c16:	e7f6      	b.n	8009c06 <__s2b+0x66>
 8009c18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	220a      	movs	r2, #10
 8009c20:	4630      	mov	r0, r6
 8009c22:	3b30      	subs	r3, #48	@ 0x30
 8009c24:	f7ff ff76 	bl	8009b14 <__multadd>
 8009c28:	e7ee      	b.n	8009c08 <__s2b+0x68>
 8009c2a:	bf00      	nop
 8009c2c:	0800cb76 	.word	0x0800cb76
 8009c30:	0800cbe7 	.word	0x0800cbe7

08009c34 <__hi0bits>:
 8009c34:	4603      	mov	r3, r0
 8009c36:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c3a:	bf3a      	itte	cc
 8009c3c:	0403      	lslcc	r3, r0, #16
 8009c3e:	2010      	movcc	r0, #16
 8009c40:	2000      	movcs	r0, #0
 8009c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c46:	bf3c      	itt	cc
 8009c48:	021b      	lslcc	r3, r3, #8
 8009c4a:	3008      	addcc	r0, #8
 8009c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c50:	bf3c      	itt	cc
 8009c52:	011b      	lslcc	r3, r3, #4
 8009c54:	3004      	addcc	r0, #4
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c5a:	bf3c      	itt	cc
 8009c5c:	009b      	lslcc	r3, r3, #2
 8009c5e:	3002      	addcc	r0, #2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	db05      	blt.n	8009c70 <__hi0bits+0x3c>
 8009c64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c68:	f100 0001 	add.w	r0, r0, #1
 8009c6c:	bf08      	it	eq
 8009c6e:	2020      	moveq	r0, #32
 8009c70:	4770      	bx	lr

08009c72 <__lo0bits>:
 8009c72:	6803      	ldr	r3, [r0, #0]
 8009c74:	4602      	mov	r2, r0
 8009c76:	f013 0007 	ands.w	r0, r3, #7
 8009c7a:	d00b      	beq.n	8009c94 <__lo0bits+0x22>
 8009c7c:	07d9      	lsls	r1, r3, #31
 8009c7e:	d421      	bmi.n	8009cc4 <__lo0bits+0x52>
 8009c80:	0798      	lsls	r0, r3, #30
 8009c82:	bf49      	itett	mi
 8009c84:	085b      	lsrmi	r3, r3, #1
 8009c86:	089b      	lsrpl	r3, r3, #2
 8009c88:	2001      	movmi	r0, #1
 8009c8a:	6013      	strmi	r3, [r2, #0]
 8009c8c:	bf5c      	itt	pl
 8009c8e:	2002      	movpl	r0, #2
 8009c90:	6013      	strpl	r3, [r2, #0]
 8009c92:	4770      	bx	lr
 8009c94:	b299      	uxth	r1, r3
 8009c96:	b909      	cbnz	r1, 8009c9c <__lo0bits+0x2a>
 8009c98:	2010      	movs	r0, #16
 8009c9a:	0c1b      	lsrs	r3, r3, #16
 8009c9c:	b2d9      	uxtb	r1, r3
 8009c9e:	b909      	cbnz	r1, 8009ca4 <__lo0bits+0x32>
 8009ca0:	3008      	adds	r0, #8
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	0719      	lsls	r1, r3, #28
 8009ca6:	bf04      	itt	eq
 8009ca8:	091b      	lsreq	r3, r3, #4
 8009caa:	3004      	addeq	r0, #4
 8009cac:	0799      	lsls	r1, r3, #30
 8009cae:	bf04      	itt	eq
 8009cb0:	089b      	lsreq	r3, r3, #2
 8009cb2:	3002      	addeq	r0, #2
 8009cb4:	07d9      	lsls	r1, r3, #31
 8009cb6:	d403      	bmi.n	8009cc0 <__lo0bits+0x4e>
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	f100 0001 	add.w	r0, r0, #1
 8009cbe:	d003      	beq.n	8009cc8 <__lo0bits+0x56>
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	4770      	bx	lr
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	4770      	bx	lr
 8009cc8:	2020      	movs	r0, #32
 8009cca:	4770      	bx	lr

08009ccc <__i2b>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	460c      	mov	r4, r1
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	f7ff febd 	bl	8009a50 <_Balloc>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	b928      	cbnz	r0, 8009ce6 <__i2b+0x1a>
 8009cda:	f240 1145 	movw	r1, #325	@ 0x145
 8009cde:	4b04      	ldr	r3, [pc, #16]	@ (8009cf0 <__i2b+0x24>)
 8009ce0:	4804      	ldr	r0, [pc, #16]	@ (8009cf4 <__i2b+0x28>)
 8009ce2:	f7ff f9f9 	bl	80090d8 <__assert_func>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	6144      	str	r4, [r0, #20]
 8009cea:	6103      	str	r3, [r0, #16]
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	bf00      	nop
 8009cf0:	0800cb76 	.word	0x0800cb76
 8009cf4:	0800cbe7 	.word	0x0800cbe7

08009cf8 <__multiply>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	4614      	mov	r4, r2
 8009cfe:	690a      	ldr	r2, [r1, #16]
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	460f      	mov	r7, r1
 8009d04:	429a      	cmp	r2, r3
 8009d06:	bfa2      	ittt	ge
 8009d08:	4623      	movge	r3, r4
 8009d0a:	460c      	movge	r4, r1
 8009d0c:	461f      	movge	r7, r3
 8009d0e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d12:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	6861      	ldr	r1, [r4, #4]
 8009d1a:	eb0a 0609 	add.w	r6, sl, r9
 8009d1e:	42b3      	cmp	r3, r6
 8009d20:	b085      	sub	sp, #20
 8009d22:	bfb8      	it	lt
 8009d24:	3101      	addlt	r1, #1
 8009d26:	f7ff fe93 	bl	8009a50 <_Balloc>
 8009d2a:	b930      	cbnz	r0, 8009d3a <__multiply+0x42>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d32:	4b43      	ldr	r3, [pc, #268]	@ (8009e40 <__multiply+0x148>)
 8009d34:	4843      	ldr	r0, [pc, #268]	@ (8009e44 <__multiply+0x14c>)
 8009d36:	f7ff f9cf 	bl	80090d8 <__assert_func>
 8009d3a:	f100 0514 	add.w	r5, r0, #20
 8009d3e:	462b      	mov	r3, r5
 8009d40:	2200      	movs	r2, #0
 8009d42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d46:	4543      	cmp	r3, r8
 8009d48:	d321      	bcc.n	8009d8e <__multiply+0x96>
 8009d4a:	f107 0114 	add.w	r1, r7, #20
 8009d4e:	f104 0214 	add.w	r2, r4, #20
 8009d52:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d56:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	1b13      	subs	r3, r2, r4
 8009d5e:	3b15      	subs	r3, #21
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	3304      	adds	r3, #4
 8009d66:	f104 0715 	add.w	r7, r4, #21
 8009d6a:	42ba      	cmp	r2, r7
 8009d6c:	bf38      	it	cc
 8009d6e:	2304      	movcc	r3, #4
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	9b02      	ldr	r3, [sp, #8]
 8009d74:	9103      	str	r1, [sp, #12]
 8009d76:	428b      	cmp	r3, r1
 8009d78:	d80c      	bhi.n	8009d94 <__multiply+0x9c>
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	dd03      	ble.n	8009d86 <__multiply+0x8e>
 8009d7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d05a      	beq.n	8009e3c <__multiply+0x144>
 8009d86:	6106      	str	r6, [r0, #16]
 8009d88:	b005      	add	sp, #20
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	f843 2b04 	str.w	r2, [r3], #4
 8009d92:	e7d8      	b.n	8009d46 <__multiply+0x4e>
 8009d94:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d98:	f1ba 0f00 	cmp.w	sl, #0
 8009d9c:	d023      	beq.n	8009de6 <__multiply+0xee>
 8009d9e:	46a9      	mov	r9, r5
 8009da0:	f04f 0c00 	mov.w	ip, #0
 8009da4:	f104 0e14 	add.w	lr, r4, #20
 8009da8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dac:	f8d9 3000 	ldr.w	r3, [r9]
 8009db0:	fa1f fb87 	uxth.w	fp, r7
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dba:	4463      	add	r3, ip
 8009dbc:	f8d9 c000 	ldr.w	ip, [r9]
 8009dc0:	0c3f      	lsrs	r7, r7, #16
 8009dc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009dc6:	fb0a c707 	mla	r7, sl, r7, ip
 8009dca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dd4:	4572      	cmp	r2, lr
 8009dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dda:	f849 3b04 	str.w	r3, [r9], #4
 8009dde:	d8e3      	bhi.n	8009da8 <__multiply+0xb0>
 8009de0:	9b01      	ldr	r3, [sp, #4]
 8009de2:	f845 c003 	str.w	ip, [r5, r3]
 8009de6:	9b03      	ldr	r3, [sp, #12]
 8009de8:	3104      	adds	r1, #4
 8009dea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dee:	f1b9 0f00 	cmp.w	r9, #0
 8009df2:	d021      	beq.n	8009e38 <__multiply+0x140>
 8009df4:	46ae      	mov	lr, r5
 8009df6:	f04f 0a00 	mov.w	sl, #0
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	f104 0c14 	add.w	ip, r4, #20
 8009e00:	f8bc b000 	ldrh.w	fp, [ip]
 8009e04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	fb09 770b 	mla	r7, r9, fp, r7
 8009e0e:	4457      	add	r7, sl
 8009e10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e14:	f84e 3b04 	str.w	r3, [lr], #4
 8009e18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e20:	f8be 3000 	ldrh.w	r3, [lr]
 8009e24:	4562      	cmp	r2, ip
 8009e26:	fb09 330a 	mla	r3, r9, sl, r3
 8009e2a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e32:	d8e5      	bhi.n	8009e00 <__multiply+0x108>
 8009e34:	9f01      	ldr	r7, [sp, #4]
 8009e36:	51eb      	str	r3, [r5, r7]
 8009e38:	3504      	adds	r5, #4
 8009e3a:	e79a      	b.n	8009d72 <__multiply+0x7a>
 8009e3c:	3e01      	subs	r6, #1
 8009e3e:	e79c      	b.n	8009d7a <__multiply+0x82>
 8009e40:	0800cb76 	.word	0x0800cb76
 8009e44:	0800cbe7 	.word	0x0800cbe7

08009e48 <__pow5mult>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	f012 0203 	ands.w	r2, r2, #3
 8009e52:	4607      	mov	r7, r0
 8009e54:	460e      	mov	r6, r1
 8009e56:	d007      	beq.n	8009e68 <__pow5mult+0x20>
 8009e58:	4c25      	ldr	r4, [pc, #148]	@ (8009ef0 <__pow5mult+0xa8>)
 8009e5a:	3a01      	subs	r2, #1
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e62:	f7ff fe57 	bl	8009b14 <__multadd>
 8009e66:	4606      	mov	r6, r0
 8009e68:	10ad      	asrs	r5, r5, #2
 8009e6a:	d03d      	beq.n	8009ee8 <__pow5mult+0xa0>
 8009e6c:	69fc      	ldr	r4, [r7, #28]
 8009e6e:	b97c      	cbnz	r4, 8009e90 <__pow5mult+0x48>
 8009e70:	2010      	movs	r0, #16
 8009e72:	f7ff fd1d 	bl	80098b0 <malloc>
 8009e76:	4602      	mov	r2, r0
 8009e78:	61f8      	str	r0, [r7, #28]
 8009e7a:	b928      	cbnz	r0, 8009e88 <__pow5mult+0x40>
 8009e7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e80:	4b1c      	ldr	r3, [pc, #112]	@ (8009ef4 <__pow5mult+0xac>)
 8009e82:	481d      	ldr	r0, [pc, #116]	@ (8009ef8 <__pow5mult+0xb0>)
 8009e84:	f7ff f928 	bl	80090d8 <__assert_func>
 8009e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e8c:	6004      	str	r4, [r0, #0]
 8009e8e:	60c4      	str	r4, [r0, #12]
 8009e90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e98:	b94c      	cbnz	r4, 8009eae <__pow5mult+0x66>
 8009e9a:	f240 2171 	movw	r1, #625	@ 0x271
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff ff14 	bl	8009ccc <__i2b>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eac:	6003      	str	r3, [r0, #0]
 8009eae:	f04f 0900 	mov.w	r9, #0
 8009eb2:	07eb      	lsls	r3, r5, #31
 8009eb4:	d50a      	bpl.n	8009ecc <__pow5mult+0x84>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7ff ff1c 	bl	8009cf8 <__multiply>
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f7ff fe03 	bl	8009ad0 <_Bfree>
 8009eca:	4646      	mov	r6, r8
 8009ecc:	106d      	asrs	r5, r5, #1
 8009ece:	d00b      	beq.n	8009ee8 <__pow5mult+0xa0>
 8009ed0:	6820      	ldr	r0, [r4, #0]
 8009ed2:	b938      	cbnz	r0, 8009ee4 <__pow5mult+0x9c>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f7ff ff0d 	bl	8009cf8 <__multiply>
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	f8c0 9000 	str.w	r9, [r0]
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	e7e4      	b.n	8009eb2 <__pow5mult+0x6a>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800cc40 	.word	0x0800cc40
 8009ef4:	0800c959 	.word	0x0800c959
 8009ef8:	0800cbe7 	.word	0x0800cbe7

08009efc <__lshift>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	4607      	mov	r7, r0
 8009f04:	4691      	mov	r9, r2
 8009f06:	6923      	ldr	r3, [r4, #16]
 8009f08:	6849      	ldr	r1, [r1, #4]
 8009f0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f14:	f108 0601 	add.w	r6, r8, #1
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	db0b      	blt.n	8009f34 <__lshift+0x38>
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff fd97 	bl	8009a50 <_Balloc>
 8009f22:	4605      	mov	r5, r0
 8009f24:	b948      	cbnz	r0, 8009f3a <__lshift+0x3e>
 8009f26:	4602      	mov	r2, r0
 8009f28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f2c:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <__lshift+0xd0>)
 8009f2e:	4828      	ldr	r0, [pc, #160]	@ (8009fd0 <__lshift+0xd4>)
 8009f30:	f7ff f8d2 	bl	80090d8 <__assert_func>
 8009f34:	3101      	adds	r1, #1
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	e7ee      	b.n	8009f18 <__lshift+0x1c>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f100 0114 	add.w	r1, r0, #20
 8009f40:	f100 0210 	add.w	r2, r0, #16
 8009f44:	4618      	mov	r0, r3
 8009f46:	4553      	cmp	r3, sl
 8009f48:	db33      	blt.n	8009fb2 <__lshift+0xb6>
 8009f4a:	6920      	ldr	r0, [r4, #16]
 8009f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f50:	f104 0314 	add.w	r3, r4, #20
 8009f54:	f019 091f 	ands.w	r9, r9, #31
 8009f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f60:	d02b      	beq.n	8009fba <__lshift+0xbe>
 8009f62:	468a      	mov	sl, r1
 8009f64:	2200      	movs	r2, #0
 8009f66:	f1c9 0e20 	rsb	lr, r9, #32
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f70:	4310      	orrs	r0, r2
 8009f72:	f84a 0b04 	str.w	r0, [sl], #4
 8009f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7a:	459c      	cmp	ip, r3
 8009f7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f80:	d8f3      	bhi.n	8009f6a <__lshift+0x6e>
 8009f82:	ebac 0304 	sub.w	r3, ip, r4
 8009f86:	3b15      	subs	r3, #21
 8009f88:	f023 0303 	bic.w	r3, r3, #3
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	f104 0015 	add.w	r0, r4, #21
 8009f92:	4584      	cmp	ip, r0
 8009f94:	bf38      	it	cc
 8009f96:	2304      	movcc	r3, #4
 8009f98:	50ca      	str	r2, [r1, r3]
 8009f9a:	b10a      	cbz	r2, 8009fa0 <__lshift+0xa4>
 8009f9c:	f108 0602 	add.w	r6, r8, #2
 8009fa0:	3e01      	subs	r6, #1
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	612e      	str	r6, [r5, #16]
 8009fa8:	f7ff fd92 	bl	8009ad0 <_Bfree>
 8009fac:	4628      	mov	r0, r5
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	e7c5      	b.n	8009f46 <__lshift+0x4a>
 8009fba:	3904      	subs	r1, #4
 8009fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc0:	459c      	cmp	ip, r3
 8009fc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fc6:	d8f9      	bhi.n	8009fbc <__lshift+0xc0>
 8009fc8:	e7ea      	b.n	8009fa0 <__lshift+0xa4>
 8009fca:	bf00      	nop
 8009fcc:	0800cb76 	.word	0x0800cb76
 8009fd0:	0800cbe7 	.word	0x0800cbe7

08009fd4 <__mcmp>:
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	690a      	ldr	r2, [r1, #16]
 8009fd8:	6900      	ldr	r0, [r0, #16]
 8009fda:	b530      	push	{r4, r5, lr}
 8009fdc:	1a80      	subs	r0, r0, r2
 8009fde:	d10e      	bne.n	8009ffe <__mcmp+0x2a>
 8009fe0:	3314      	adds	r3, #20
 8009fe2:	3114      	adds	r1, #20
 8009fe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ff4:	4295      	cmp	r5, r2
 8009ff6:	d003      	beq.n	800a000 <__mcmp+0x2c>
 8009ff8:	d205      	bcs.n	800a006 <__mcmp+0x32>
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffe:	bd30      	pop	{r4, r5, pc}
 800a000:	42a3      	cmp	r3, r4
 800a002:	d3f3      	bcc.n	8009fec <__mcmp+0x18>
 800a004:	e7fb      	b.n	8009ffe <__mcmp+0x2a>
 800a006:	2001      	movs	r0, #1
 800a008:	e7f9      	b.n	8009ffe <__mcmp+0x2a>
	...

0800a00c <__mdiff>:
 800a00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	4689      	mov	r9, r1
 800a012:	4606      	mov	r6, r0
 800a014:	4611      	mov	r1, r2
 800a016:	4648      	mov	r0, r9
 800a018:	4614      	mov	r4, r2
 800a01a:	f7ff ffdb 	bl	8009fd4 <__mcmp>
 800a01e:	1e05      	subs	r5, r0, #0
 800a020:	d112      	bne.n	800a048 <__mdiff+0x3c>
 800a022:	4629      	mov	r1, r5
 800a024:	4630      	mov	r0, r6
 800a026:	f7ff fd13 	bl	8009a50 <_Balloc>
 800a02a:	4602      	mov	r2, r0
 800a02c:	b928      	cbnz	r0, 800a03a <__mdiff+0x2e>
 800a02e:	f240 2137 	movw	r1, #567	@ 0x237
 800a032:	4b3e      	ldr	r3, [pc, #248]	@ (800a12c <__mdiff+0x120>)
 800a034:	483e      	ldr	r0, [pc, #248]	@ (800a130 <__mdiff+0x124>)
 800a036:	f7ff f84f 	bl	80090d8 <__assert_func>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a040:	4610      	mov	r0, r2
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	bfbc      	itt	lt
 800a04a:	464b      	movlt	r3, r9
 800a04c:	46a1      	movlt	r9, r4
 800a04e:	4630      	mov	r0, r6
 800a050:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a054:	bfba      	itte	lt
 800a056:	461c      	movlt	r4, r3
 800a058:	2501      	movlt	r5, #1
 800a05a:	2500      	movge	r5, #0
 800a05c:	f7ff fcf8 	bl	8009a50 <_Balloc>
 800a060:	4602      	mov	r2, r0
 800a062:	b918      	cbnz	r0, 800a06c <__mdiff+0x60>
 800a064:	f240 2145 	movw	r1, #581	@ 0x245
 800a068:	4b30      	ldr	r3, [pc, #192]	@ (800a12c <__mdiff+0x120>)
 800a06a:	e7e3      	b.n	800a034 <__mdiff+0x28>
 800a06c:	f100 0b14 	add.w	fp, r0, #20
 800a070:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a074:	f109 0310 	add.w	r3, r9, #16
 800a078:	60c5      	str	r5, [r0, #12]
 800a07a:	f04f 0c00 	mov.w	ip, #0
 800a07e:	f109 0514 	add.w	r5, r9, #20
 800a082:	46d9      	mov	r9, fp
 800a084:	6926      	ldr	r6, [r4, #16]
 800a086:	f104 0e14 	add.w	lr, r4, #20
 800a08a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a08e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a09a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a09e:	b281      	uxth	r1, r0
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	fa1f f38a 	uxth.w	r3, sl
 800a0a6:	1a5b      	subs	r3, r3, r1
 800a0a8:	0c00      	lsrs	r0, r0, #16
 800a0aa:	4463      	add	r3, ip
 800a0ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0ba:	4576      	cmp	r6, lr
 800a0bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0c0:	f849 3b04 	str.w	r3, [r9], #4
 800a0c4:	d8e6      	bhi.n	800a094 <__mdiff+0x88>
 800a0c6:	1b33      	subs	r3, r6, r4
 800a0c8:	3b15      	subs	r3, #21
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	3415      	adds	r4, #21
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	bf38      	it	cc
 800a0d6:	2304      	movcc	r3, #4
 800a0d8:	441d      	add	r5, r3
 800a0da:	445b      	add	r3, fp
 800a0dc:	461e      	mov	r6, r3
 800a0de:	462c      	mov	r4, r5
 800a0e0:	4544      	cmp	r4, r8
 800a0e2:	d30e      	bcc.n	800a102 <__mdiff+0xf6>
 800a0e4:	f108 0103 	add.w	r1, r8, #3
 800a0e8:	1b49      	subs	r1, r1, r5
 800a0ea:	f021 0103 	bic.w	r1, r1, #3
 800a0ee:	3d03      	subs	r5, #3
 800a0f0:	45a8      	cmp	r8, r5
 800a0f2:	bf38      	it	cc
 800a0f4:	2100      	movcc	r1, #0
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0fc:	b199      	cbz	r1, 800a126 <__mdiff+0x11a>
 800a0fe:	6117      	str	r7, [r2, #16]
 800a100:	e79e      	b.n	800a040 <__mdiff+0x34>
 800a102:	46e6      	mov	lr, ip
 800a104:	f854 1b04 	ldr.w	r1, [r4], #4
 800a108:	fa1f fc81 	uxth.w	ip, r1
 800a10c:	44f4      	add	ip, lr
 800a10e:	0c08      	lsrs	r0, r1, #16
 800a110:	4471      	add	r1, lr
 800a112:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a116:	b289      	uxth	r1, r1
 800a118:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a11c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a120:	f846 1b04 	str.w	r1, [r6], #4
 800a124:	e7dc      	b.n	800a0e0 <__mdiff+0xd4>
 800a126:	3f01      	subs	r7, #1
 800a128:	e7e6      	b.n	800a0f8 <__mdiff+0xec>
 800a12a:	bf00      	nop
 800a12c:	0800cb76 	.word	0x0800cb76
 800a130:	0800cbe7 	.word	0x0800cbe7

0800a134 <__ulp>:
 800a134:	4b0e      	ldr	r3, [pc, #56]	@ (800a170 <__ulp+0x3c>)
 800a136:	400b      	ands	r3, r1
 800a138:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dc08      	bgt.n	800a152 <__ulp+0x1e>
 800a140:	425b      	negs	r3, r3
 800a142:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a146:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a14a:	da04      	bge.n	800a156 <__ulp+0x22>
 800a14c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a150:	4113      	asrs	r3, r2
 800a152:	2200      	movs	r2, #0
 800a154:	e008      	b.n	800a168 <__ulp+0x34>
 800a156:	f1a2 0314 	sub.w	r3, r2, #20
 800a15a:	2b1e      	cmp	r3, #30
 800a15c:	bfd6      	itet	le
 800a15e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a162:	2201      	movgt	r2, #1
 800a164:	40da      	lsrle	r2, r3
 800a166:	2300      	movs	r3, #0
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	7ff00000 	.word	0x7ff00000

0800a174 <__b2d>:
 800a174:	6902      	ldr	r2, [r0, #16]
 800a176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a178:	f100 0614 	add.w	r6, r0, #20
 800a17c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a180:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a184:	4f1e      	ldr	r7, [pc, #120]	@ (800a200 <__b2d+0x8c>)
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff fd54 	bl	8009c34 <__hi0bits>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f1c0 0020 	rsb	r0, r0, #32
 800a192:	2b0a      	cmp	r3, #10
 800a194:	f1a2 0504 	sub.w	r5, r2, #4
 800a198:	6008      	str	r0, [r1, #0]
 800a19a:	dc12      	bgt.n	800a1c2 <__b2d+0x4e>
 800a19c:	42ae      	cmp	r6, r5
 800a19e:	bf2c      	ite	cs
 800a1a0:	2200      	movcs	r2, #0
 800a1a2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a1a6:	f1c3 0c0b 	rsb	ip, r3, #11
 800a1aa:	3315      	adds	r3, #21
 800a1ac:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a1b0:	fa04 f303 	lsl.w	r3, r4, r3
 800a1b4:	fa22 f20c 	lsr.w	r2, r2, ip
 800a1b8:	ea4e 0107 	orr.w	r1, lr, r7
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	4610      	mov	r0, r2
 800a1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c2:	42ae      	cmp	r6, r5
 800a1c4:	bf36      	itet	cc
 800a1c6:	f1a2 0508 	subcc.w	r5, r2, #8
 800a1ca:	2200      	movcs	r2, #0
 800a1cc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a1d0:	3b0b      	subs	r3, #11
 800a1d2:	d012      	beq.n	800a1fa <__b2d+0x86>
 800a1d4:	f1c3 0720 	rsb	r7, r3, #32
 800a1d8:	fa22 f107 	lsr.w	r1, r2, r7
 800a1dc:	409c      	lsls	r4, r3
 800a1de:	430c      	orrs	r4, r1
 800a1e0:	42b5      	cmp	r5, r6
 800a1e2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a1e6:	bf94      	ite	ls
 800a1e8:	2400      	movls	r4, #0
 800a1ea:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a1ee:	409a      	lsls	r2, r3
 800a1f0:	40fc      	lsrs	r4, r7
 800a1f2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a1f6:	4322      	orrs	r2, r4
 800a1f8:	e7e1      	b.n	800a1be <__b2d+0x4a>
 800a1fa:	ea44 0107 	orr.w	r1, r4, r7
 800a1fe:	e7de      	b.n	800a1be <__b2d+0x4a>
 800a200:	3ff00000 	.word	0x3ff00000

0800a204 <__d2b>:
 800a204:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a208:	2101      	movs	r1, #1
 800a20a:	4690      	mov	r8, r2
 800a20c:	4699      	mov	r9, r3
 800a20e:	9e08      	ldr	r6, [sp, #32]
 800a210:	f7ff fc1e 	bl	8009a50 <_Balloc>
 800a214:	4604      	mov	r4, r0
 800a216:	b930      	cbnz	r0, 800a226 <__d2b+0x22>
 800a218:	4602      	mov	r2, r0
 800a21a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a21e:	4b23      	ldr	r3, [pc, #140]	@ (800a2ac <__d2b+0xa8>)
 800a220:	4823      	ldr	r0, [pc, #140]	@ (800a2b0 <__d2b+0xac>)
 800a222:	f7fe ff59 	bl	80090d8 <__assert_func>
 800a226:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a22a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a22e:	b10d      	cbz	r5, 800a234 <__d2b+0x30>
 800a230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	f1b8 0300 	subs.w	r3, r8, #0
 800a23a:	d024      	beq.n	800a286 <__d2b+0x82>
 800a23c:	4668      	mov	r0, sp
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	f7ff fd17 	bl	8009c72 <__lo0bits>
 800a244:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a248:	b1d8      	cbz	r0, 800a282 <__d2b+0x7e>
 800a24a:	f1c0 0320 	rsb	r3, r0, #32
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	430b      	orrs	r3, r1
 800a254:	40c2      	lsrs	r2, r0
 800a256:	6163      	str	r3, [r4, #20]
 800a258:	9201      	str	r2, [sp, #4]
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bf0c      	ite	eq
 800a260:	2201      	moveq	r2, #1
 800a262:	2202      	movne	r2, #2
 800a264:	61a3      	str	r3, [r4, #24]
 800a266:	6122      	str	r2, [r4, #16]
 800a268:	b1ad      	cbz	r5, 800a296 <__d2b+0x92>
 800a26a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a26e:	4405      	add	r5, r0
 800a270:	6035      	str	r5, [r6, #0]
 800a272:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a278:	6018      	str	r0, [r3, #0]
 800a27a:	4620      	mov	r0, r4
 800a27c:	b002      	add	sp, #8
 800a27e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a282:	6161      	str	r1, [r4, #20]
 800a284:	e7e9      	b.n	800a25a <__d2b+0x56>
 800a286:	a801      	add	r0, sp, #4
 800a288:	f7ff fcf3 	bl	8009c72 <__lo0bits>
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	6163      	str	r3, [r4, #20]
 800a292:	3020      	adds	r0, #32
 800a294:	e7e7      	b.n	800a266 <__d2b+0x62>
 800a296:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a29a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a29e:	6030      	str	r0, [r6, #0]
 800a2a0:	6918      	ldr	r0, [r3, #16]
 800a2a2:	f7ff fcc7 	bl	8009c34 <__hi0bits>
 800a2a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2aa:	e7e4      	b.n	800a276 <__d2b+0x72>
 800a2ac:	0800cb76 	.word	0x0800cb76
 800a2b0:	0800cbe7 	.word	0x0800cbe7

0800a2b4 <__ratio>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	e9cd 1000 	strd	r1, r0, [sp]
 800a2be:	a902      	add	r1, sp, #8
 800a2c0:	f7ff ff58 	bl	800a174 <__b2d>
 800a2c4:	468b      	mov	fp, r1
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	9800      	ldr	r0, [sp, #0]
 800a2cc:	a903      	add	r1, sp, #12
 800a2ce:	f7ff ff51 	bl	800a174 <__b2d>
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	6919      	ldr	r1, [r3, #16]
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	1ac9      	subs	r1, r1, r3
 800a2e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bfcd      	iteet	gt
 800a2f2:	463a      	movgt	r2, r7
 800a2f4:	462a      	movle	r2, r5
 800a2f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2fa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a2fe:	bfd8      	it	le
 800a300:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a304:	464b      	mov	r3, r9
 800a306:	4622      	mov	r2, r4
 800a308:	4659      	mov	r1, fp
 800a30a:	f7f6 fa29 	bl	8000760 <__aeabi_ddiv>
 800a30e:	b005      	add	sp, #20
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a314 <__copybits>:
 800a314:	3901      	subs	r1, #1
 800a316:	b570      	push	{r4, r5, r6, lr}
 800a318:	1149      	asrs	r1, r1, #5
 800a31a:	6914      	ldr	r4, [r2, #16]
 800a31c:	3101      	adds	r1, #1
 800a31e:	f102 0314 	add.w	r3, r2, #20
 800a322:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a326:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a32a:	1f05      	subs	r5, r0, #4
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	d30c      	bcc.n	800a34a <__copybits+0x36>
 800a330:	1aa3      	subs	r3, r4, r2
 800a332:	3b11      	subs	r3, #17
 800a334:	f023 0303 	bic.w	r3, r3, #3
 800a338:	3211      	adds	r2, #17
 800a33a:	42a2      	cmp	r2, r4
 800a33c:	bf88      	it	hi
 800a33e:	2300      	movhi	r3, #0
 800a340:	4418      	add	r0, r3
 800a342:	2300      	movs	r3, #0
 800a344:	4288      	cmp	r0, r1
 800a346:	d305      	bcc.n	800a354 <__copybits+0x40>
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a34e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a352:	e7eb      	b.n	800a32c <__copybits+0x18>
 800a354:	f840 3b04 	str.w	r3, [r0], #4
 800a358:	e7f4      	b.n	800a344 <__copybits+0x30>

0800a35a <__any_on>:
 800a35a:	f100 0214 	add.w	r2, r0, #20
 800a35e:	6900      	ldr	r0, [r0, #16]
 800a360:	114b      	asrs	r3, r1, #5
 800a362:	4298      	cmp	r0, r3
 800a364:	b510      	push	{r4, lr}
 800a366:	db11      	blt.n	800a38c <__any_on+0x32>
 800a368:	dd0a      	ble.n	800a380 <__any_on+0x26>
 800a36a:	f011 011f 	ands.w	r1, r1, #31
 800a36e:	d007      	beq.n	800a380 <__any_on+0x26>
 800a370:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a374:	fa24 f001 	lsr.w	r0, r4, r1
 800a378:	fa00 f101 	lsl.w	r1, r0, r1
 800a37c:	428c      	cmp	r4, r1
 800a37e:	d10b      	bne.n	800a398 <__any_on+0x3e>
 800a380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a384:	4293      	cmp	r3, r2
 800a386:	d803      	bhi.n	800a390 <__any_on+0x36>
 800a388:	2000      	movs	r0, #0
 800a38a:	bd10      	pop	{r4, pc}
 800a38c:	4603      	mov	r3, r0
 800a38e:	e7f7      	b.n	800a380 <__any_on+0x26>
 800a390:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a394:	2900      	cmp	r1, #0
 800a396:	d0f5      	beq.n	800a384 <__any_on+0x2a>
 800a398:	2001      	movs	r0, #1
 800a39a:	e7f6      	b.n	800a38a <__any_on+0x30>

0800a39c <_strtoul_l.constprop.0>:
 800a39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	4686      	mov	lr, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4e33      	ldr	r6, [pc, #204]	@ (800a474 <_strtoul_l.constprop.0+0xd8>)
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ac:	5d37      	ldrb	r7, [r6, r4]
 800a3ae:	f017 0708 	ands.w	r7, r7, #8
 800a3b2:	d1f8      	bne.n	800a3a6 <_strtoul_l.constprop.0+0xa>
 800a3b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3b6:	d12f      	bne.n	800a418 <_strtoul_l.constprop.0+0x7c>
 800a3b8:	2701      	movs	r7, #1
 800a3ba:	782c      	ldrb	r4, [r5, #0]
 800a3bc:	1c85      	adds	r5, r0, #2
 800a3be:	f033 0010 	bics.w	r0, r3, #16
 800a3c2:	d109      	bne.n	800a3d8 <_strtoul_l.constprop.0+0x3c>
 800a3c4:	2c30      	cmp	r4, #48	@ 0x30
 800a3c6:	d12c      	bne.n	800a422 <_strtoul_l.constprop.0+0x86>
 800a3c8:	7828      	ldrb	r0, [r5, #0]
 800a3ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a3ce:	2858      	cmp	r0, #88	@ 0x58
 800a3d0:	d127      	bne.n	800a422 <_strtoul_l.constprop.0+0x86>
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	786c      	ldrb	r4, [r5, #1]
 800a3d6:	3502      	adds	r5, #2
 800a3d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a3dc:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	fb03 f908 	mul.w	r9, r3, r8
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	ea6f 0909 	mvn.w	r9, r9
 800a3ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a3f0:	f1bc 0f09 	cmp.w	ip, #9
 800a3f4:	d81c      	bhi.n	800a430 <_strtoul_l.constprop.0+0x94>
 800a3f6:	4664      	mov	r4, ip
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	dd2a      	ble.n	800a452 <_strtoul_l.constprop.0+0xb6>
 800a3fc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a400:	d007      	beq.n	800a412 <_strtoul_l.constprop.0+0x76>
 800a402:	4580      	cmp	r8, r0
 800a404:	d322      	bcc.n	800a44c <_strtoul_l.constprop.0+0xb0>
 800a406:	d101      	bne.n	800a40c <_strtoul_l.constprop.0+0x70>
 800a408:	45a1      	cmp	r9, r4
 800a40a:	db1f      	blt.n	800a44c <_strtoul_l.constprop.0+0xb0>
 800a40c:	2601      	movs	r6, #1
 800a40e:	fb00 4003 	mla	r0, r0, r3, r4
 800a412:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a416:	e7e9      	b.n	800a3ec <_strtoul_l.constprop.0+0x50>
 800a418:	2c2b      	cmp	r4, #43	@ 0x2b
 800a41a:	bf04      	itt	eq
 800a41c:	782c      	ldrbeq	r4, [r5, #0]
 800a41e:	1c85      	addeq	r5, r0, #2
 800a420:	e7cd      	b.n	800a3be <_strtoul_l.constprop.0+0x22>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1d8      	bne.n	800a3d8 <_strtoul_l.constprop.0+0x3c>
 800a426:	2c30      	cmp	r4, #48	@ 0x30
 800a428:	bf0c      	ite	eq
 800a42a:	2308      	moveq	r3, #8
 800a42c:	230a      	movne	r3, #10
 800a42e:	e7d3      	b.n	800a3d8 <_strtoul_l.constprop.0+0x3c>
 800a430:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a434:	f1bc 0f19 	cmp.w	ip, #25
 800a438:	d801      	bhi.n	800a43e <_strtoul_l.constprop.0+0xa2>
 800a43a:	3c37      	subs	r4, #55	@ 0x37
 800a43c:	e7dc      	b.n	800a3f8 <_strtoul_l.constprop.0+0x5c>
 800a43e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a442:	f1bc 0f19 	cmp.w	ip, #25
 800a446:	d804      	bhi.n	800a452 <_strtoul_l.constprop.0+0xb6>
 800a448:	3c57      	subs	r4, #87	@ 0x57
 800a44a:	e7d5      	b.n	800a3f8 <_strtoul_l.constprop.0+0x5c>
 800a44c:	f04f 36ff 	mov.w	r6, #4294967295
 800a450:	e7df      	b.n	800a412 <_strtoul_l.constprop.0+0x76>
 800a452:	1c73      	adds	r3, r6, #1
 800a454:	d106      	bne.n	800a464 <_strtoul_l.constprop.0+0xc8>
 800a456:	2322      	movs	r3, #34	@ 0x22
 800a458:	4630      	mov	r0, r6
 800a45a:	f8ce 3000 	str.w	r3, [lr]
 800a45e:	b932      	cbnz	r2, 800a46e <_strtoul_l.constprop.0+0xd2>
 800a460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a464:	b107      	cbz	r7, 800a468 <_strtoul_l.constprop.0+0xcc>
 800a466:	4240      	negs	r0, r0
 800a468:	2a00      	cmp	r2, #0
 800a46a:	d0f9      	beq.n	800a460 <_strtoul_l.constprop.0+0xc4>
 800a46c:	b106      	cbz	r6, 800a470 <_strtoul_l.constprop.0+0xd4>
 800a46e:	1e69      	subs	r1, r5, #1
 800a470:	6011      	str	r1, [r2, #0]
 800a472:	e7f5      	b.n	800a460 <_strtoul_l.constprop.0+0xc4>
 800a474:	0800c859 	.word	0x0800c859

0800a478 <_strtoul_r>:
 800a478:	f7ff bf90 	b.w	800a39c <_strtoul_l.constprop.0>

0800a47c <strtoul>:
 800a47c:	4613      	mov	r3, r2
 800a47e:	460a      	mov	r2, r1
 800a480:	4601      	mov	r1, r0
 800a482:	4802      	ldr	r0, [pc, #8]	@ (800a48c <strtoul+0x10>)
 800a484:	6800      	ldr	r0, [r0, #0]
 800a486:	f7ff bf89 	b.w	800a39c <_strtoul_l.constprop.0>
 800a48a:	bf00      	nop
 800a48c:	200005c8 	.word	0x200005c8

0800a490 <__ascii_wctomb>:
 800a490:	4603      	mov	r3, r0
 800a492:	4608      	mov	r0, r1
 800a494:	b141      	cbz	r1, 800a4a8 <__ascii_wctomb+0x18>
 800a496:	2aff      	cmp	r2, #255	@ 0xff
 800a498:	d904      	bls.n	800a4a4 <__ascii_wctomb+0x14>
 800a49a:	228a      	movs	r2, #138	@ 0x8a
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	4770      	bx	lr
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	700a      	strb	r2, [r1, #0]
 800a4a8:	4770      	bx	lr
	...

0800a4ac <__sflush_r>:
 800a4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	0716      	lsls	r6, r2, #28
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	d454      	bmi.n	800a564 <__sflush_r+0xb8>
 800a4ba:	684b      	ldr	r3, [r1, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc02      	bgt.n	800a4c6 <__sflush_r+0x1a>
 800a4c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd48      	ble.n	800a558 <__sflush_r+0xac>
 800a4c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	d045      	beq.n	800a558 <__sflush_r+0xac>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4d2:	682f      	ldr	r7, [r5, #0]
 800a4d4:	6a21      	ldr	r1, [r4, #32]
 800a4d6:	602b      	str	r3, [r5, #0]
 800a4d8:	d030      	beq.n	800a53c <__sflush_r+0x90>
 800a4da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	0759      	lsls	r1, r3, #29
 800a4e0:	d505      	bpl.n	800a4ee <__sflush_r+0x42>
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	1ad2      	subs	r2, r2, r3
 800a4e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4e8:	b10b      	cbz	r3, 800a4ee <__sflush_r+0x42>
 800a4ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4f4:	6a21      	ldr	r1, [r4, #32]
 800a4f6:	47b0      	blx	r6
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	d106      	bne.n	800a50c <__sflush_r+0x60>
 800a4fe:	6829      	ldr	r1, [r5, #0]
 800a500:	291d      	cmp	r1, #29
 800a502:	d82b      	bhi.n	800a55c <__sflush_r+0xb0>
 800a504:	4a28      	ldr	r2, [pc, #160]	@ (800a5a8 <__sflush_r+0xfc>)
 800a506:	410a      	asrs	r2, r1
 800a508:	07d6      	lsls	r6, r2, #31
 800a50a:	d427      	bmi.n	800a55c <__sflush_r+0xb0>
 800a50c:	2200      	movs	r2, #0
 800a50e:	6062      	str	r2, [r4, #4]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	04d9      	lsls	r1, r3, #19
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	d504      	bpl.n	800a522 <__sflush_r+0x76>
 800a518:	1c42      	adds	r2, r0, #1
 800a51a:	d101      	bne.n	800a520 <__sflush_r+0x74>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b903      	cbnz	r3, 800a522 <__sflush_r+0x76>
 800a520:	6560      	str	r0, [r4, #84]	@ 0x54
 800a522:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a524:	602f      	str	r7, [r5, #0]
 800a526:	b1b9      	cbz	r1, 800a558 <__sflush_r+0xac>
 800a528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a52c:	4299      	cmp	r1, r3
 800a52e:	d002      	beq.n	800a536 <__sflush_r+0x8a>
 800a530:	4628      	mov	r0, r5
 800a532:	f7fe fdf7 	bl	8009124 <_free_r>
 800a536:	2300      	movs	r3, #0
 800a538:	6363      	str	r3, [r4, #52]	@ 0x34
 800a53a:	e00d      	b.n	800a558 <__sflush_r+0xac>
 800a53c:	2301      	movs	r3, #1
 800a53e:	4628      	mov	r0, r5
 800a540:	47b0      	blx	r6
 800a542:	4602      	mov	r2, r0
 800a544:	1c50      	adds	r0, r2, #1
 800a546:	d1c9      	bne.n	800a4dc <__sflush_r+0x30>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c6      	beq.n	800a4dc <__sflush_r+0x30>
 800a54e:	2b1d      	cmp	r3, #29
 800a550:	d001      	beq.n	800a556 <__sflush_r+0xaa>
 800a552:	2b16      	cmp	r3, #22
 800a554:	d11d      	bne.n	800a592 <__sflush_r+0xe6>
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	2000      	movs	r0, #0
 800a55a:	e021      	b.n	800a5a0 <__sflush_r+0xf4>
 800a55c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a560:	b21b      	sxth	r3, r3
 800a562:	e01a      	b.n	800a59a <__sflush_r+0xee>
 800a564:	690f      	ldr	r7, [r1, #16]
 800a566:	2f00      	cmp	r7, #0
 800a568:	d0f6      	beq.n	800a558 <__sflush_r+0xac>
 800a56a:	0793      	lsls	r3, r2, #30
 800a56c:	bf18      	it	ne
 800a56e:	2300      	movne	r3, #0
 800a570:	680e      	ldr	r6, [r1, #0]
 800a572:	bf08      	it	eq
 800a574:	694b      	ldreq	r3, [r1, #20]
 800a576:	1bf6      	subs	r6, r6, r7
 800a578:	600f      	str	r7, [r1, #0]
 800a57a:	608b      	str	r3, [r1, #8]
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	ddeb      	ble.n	800a558 <__sflush_r+0xac>
 800a580:	4633      	mov	r3, r6
 800a582:	463a      	mov	r2, r7
 800a584:	4628      	mov	r0, r5
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a58c:	47e0      	blx	ip
 800a58e:	2800      	cmp	r0, #0
 800a590:	dc07      	bgt.n	800a5a2 <__sflush_r+0xf6>
 800a592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a2:	4407      	add	r7, r0
 800a5a4:	1a36      	subs	r6, r6, r0
 800a5a6:	e7e9      	b.n	800a57c <__sflush_r+0xd0>
 800a5a8:	dfbffffe 	.word	0xdfbffffe

0800a5ac <_fflush_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b913      	cbnz	r3, 800a5bc <_fflush_r+0x10>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	b118      	cbz	r0, 800a5c6 <_fflush_r+0x1a>
 800a5be:	6a03      	ldr	r3, [r0, #32]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <_fflush_r+0x1a>
 800a5c2:	f7fd fd97 	bl	80080f4 <__sinit>
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0f3      	beq.n	800a5b6 <_fflush_r+0xa>
 800a5ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5d0:	07d0      	lsls	r0, r2, #31
 800a5d2:	d404      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d4:	0599      	lsls	r1, r3, #22
 800a5d6:	d402      	bmi.n	800a5de <_fflush_r+0x32>
 800a5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5da:	f7fe fd5d 	bl	8009098 <__retarget_lock_acquire_recursive>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f7ff ff63 	bl	800a4ac <__sflush_r>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	07da      	lsls	r2, r3, #31
 800a5ec:	d4e4      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d4e1      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5f6:	f7fe fd51 	bl	800909c <__retarget_lock_release_recursive>
 800a5fa:	e7dd      	b.n	800a5b8 <_fflush_r+0xc>

0800a5fc <fiprintf>:
 800a5fc:	b40e      	push	{r1, r2, r3}
 800a5fe:	b503      	push	{r0, r1, lr}
 800a600:	4601      	mov	r1, r0
 800a602:	ab03      	add	r3, sp, #12
 800a604:	4805      	ldr	r0, [pc, #20]	@ (800a61c <fiprintf+0x20>)
 800a606:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60a:	6800      	ldr	r0, [r0, #0]
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	f000 fb05 	bl	800ac1c <_vfiprintf_r>
 800a612:	b002      	add	sp, #8
 800a614:	f85d eb04 	ldr.w	lr, [sp], #4
 800a618:	b003      	add	sp, #12
 800a61a:	4770      	bx	lr
 800a61c:	200005c8 	.word	0x200005c8

0800a620 <siscanf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a626:	b530      	push	{r4, r5, lr}
 800a628:	b09c      	sub	sp, #112	@ 0x70
 800a62a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a62c:	f854 5b04 	ldr.w	r5, [r4], #4
 800a630:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a634:	9002      	str	r0, [sp, #8]
 800a636:	9006      	str	r0, [sp, #24]
 800a638:	f7f5 fda4 	bl	8000184 <strlen>
 800a63c:	4b0b      	ldr	r3, [pc, #44]	@ (800a66c <siscanf+0x4c>)
 800a63e:	9003      	str	r0, [sp, #12]
 800a640:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a642:	2300      	movs	r3, #0
 800a644:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a646:	9314      	str	r3, [sp, #80]	@ 0x50
 800a648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a64c:	9007      	str	r0, [sp, #28]
 800a64e:	4808      	ldr	r0, [pc, #32]	@ (800a670 <siscanf+0x50>)
 800a650:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a654:	462a      	mov	r2, r5
 800a656:	4623      	mov	r3, r4
 800a658:	a902      	add	r1, sp, #8
 800a65a:	6800      	ldr	r0, [r0, #0]
 800a65c:	9401      	str	r4, [sp, #4]
 800a65e:	f000 f943 	bl	800a8e8 <__ssvfiscanf_r>
 800a662:	b01c      	add	sp, #112	@ 0x70
 800a664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a668:	b003      	add	sp, #12
 800a66a:	4770      	bx	lr
 800a66c:	08008183 	.word	0x08008183
 800a670:	200005c8 	.word	0x200005c8

0800a674 <__gettzinfo>:
 800a674:	4800      	ldr	r0, [pc, #0]	@ (800a678 <__gettzinfo+0x4>)
 800a676:	4770      	bx	lr
 800a678:	20000618 	.word	0x20000618

0800a67c <gmtime_r>:
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	2300      	movs	r3, #0
 800a682:	460c      	mov	r4, r1
 800a684:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a688:	4a4b      	ldr	r2, [pc, #300]	@ (800a7b8 <gmtime_r+0x13c>)
 800a68a:	f7f6 fd79 	bl	8001180 <__aeabi_ldivmod>
 800a68e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a692:	2a00      	cmp	r2, #0
 800a694:	bfbc      	itt	lt
 800a696:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800a69a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800a69e:	fbb2 f3f1 	udiv	r3, r2, r1
 800a6a2:	fb01 2213 	mls	r2, r1, r3, r2
 800a6a6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800a6aa:	60a3      	str	r3, [r4, #8]
 800a6ac:	fbb2 f3f1 	udiv	r3, r2, r1
 800a6b0:	fb01 2213 	mls	r2, r1, r3, r2
 800a6b4:	6022      	str	r2, [r4, #0]
 800a6b6:	f04f 0207 	mov.w	r2, #7
 800a6ba:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800a6be:	bfac      	ite	ge
 800a6c0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800a6c4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	1cc3      	adds	r3, r0, #3
 800a6cc:	fb93 f2f2 	sdiv	r2, r3, r2
 800a6d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	bf48      	it	mi
 800a6d8:	3307      	addmi	r3, #7
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	4937      	ldr	r1, [pc, #220]	@ (800a7bc <gmtime_r+0x140>)
 800a6de:	61a3      	str	r3, [r4, #24]
 800a6e0:	bfbd      	ittte	lt
 800a6e2:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800a6e6:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800a6ea:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a6ee:	fb90 f1f1 	sdivge	r1, r0, r1
 800a6f2:	4b33      	ldr	r3, [pc, #204]	@ (800a7c0 <gmtime_r+0x144>)
 800a6f4:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800a6f8:	fb03 0001 	mla	r0, r3, r1, r0
 800a6fc:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800a700:	fbb0 f3f3 	udiv	r3, r0, r3
 800a704:	fbb0 f2fc 	udiv	r2, r0, ip
 800a708:	4403      	add	r3, r0
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	4a2d      	ldr	r2, [pc, #180]	@ (800a7c4 <gmtime_r+0x148>)
 800a70e:	f240 176d 	movw	r7, #365	@ 0x16d
 800a712:	fbb0 f2f2 	udiv	r2, r0, r2
 800a716:	1a9b      	subs	r3, r3, r2
 800a718:	fbb3 f2f7 	udiv	r2, r3, r7
 800a71c:	2664      	movs	r6, #100	@ 0x64
 800a71e:	fbb3 f3fc 	udiv	r3, r3, ip
 800a722:	fbb2 f5f6 	udiv	r5, r2, r6
 800a726:	1aeb      	subs	r3, r5, r3
 800a728:	4403      	add	r3, r0
 800a72a:	2099      	movs	r0, #153	@ 0x99
 800a72c:	fb07 3312 	mls	r3, r7, r2, r3
 800a730:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a734:	3702      	adds	r7, #2
 800a736:	fbb7 fcf0 	udiv	ip, r7, r0
 800a73a:	f04f 0805 	mov.w	r8, #5
 800a73e:	fb00 f00c 	mul.w	r0, r0, ip
 800a742:	3002      	adds	r0, #2
 800a744:	fbb0 f0f8 	udiv	r0, r0, r8
 800a748:	f103 0e01 	add.w	lr, r3, #1
 800a74c:	ebae 0000 	sub.w	r0, lr, r0
 800a750:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800a754:	4577      	cmp	r7, lr
 800a756:	bf8c      	ite	hi
 800a758:	f06f 0709 	mvnhi.w	r7, #9
 800a75c:	2702      	movls	r7, #2
 800a75e:	4467      	add	r7, ip
 800a760:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800a764:	fb0c 2101 	mla	r1, ip, r1, r2
 800a768:	2f01      	cmp	r7, #1
 800a76a:	bf98      	it	ls
 800a76c:	3101      	addls	r1, #1
 800a76e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800a772:	d30c      	bcc.n	800a78e <gmtime_r+0x112>
 800a774:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a778:	61e3      	str	r3, [r4, #28]
 800a77a:	2300      	movs	r3, #0
 800a77c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800a780:	60e0      	str	r0, [r4, #12]
 800a782:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a786:	4620      	mov	r0, r4
 800a788:	6223      	str	r3, [r4, #32]
 800a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a78e:	f012 0f03 	tst.w	r2, #3
 800a792:	d102      	bne.n	800a79a <gmtime_r+0x11e>
 800a794:	fb06 2515 	mls	r5, r6, r5, r2
 800a798:	b95d      	cbnz	r5, 800a7b2 <gmtime_r+0x136>
 800a79a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a79e:	fbb2 f6f5 	udiv	r6, r2, r5
 800a7a2:	fb05 2216 	mls	r2, r5, r6, r2
 800a7a6:	fab2 f282 	clz	r2, r2
 800a7aa:	0952      	lsrs	r2, r2, #5
 800a7ac:	333b      	adds	r3, #59	@ 0x3b
 800a7ae:	4413      	add	r3, r2
 800a7b0:	e7e2      	b.n	800a778 <gmtime_r+0xfc>
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	e7fa      	b.n	800a7ac <gmtime_r+0x130>
 800a7b6:	bf00      	nop
 800a7b8:	00015180 	.word	0x00015180
 800a7bc:	00023ab1 	.word	0x00023ab1
 800a7c0:	fffdc54f 	.word	0xfffdc54f
 800a7c4:	00023ab0 	.word	0x00023ab0

0800a7c8 <_sbrk_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	4d05      	ldr	r5, [pc, #20]	@ (800a7e4 <_sbrk_r+0x1c>)
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f7fc fd0e 	bl	80071f4 <_sbrk>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d102      	bne.n	800a7e2 <_sbrk_r+0x1a>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b103      	cbz	r3, 800a7e2 <_sbrk_r+0x1a>
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	20000a64 	.word	0x20000a64

0800a7e8 <abort>:
 800a7e8:	2006      	movs	r0, #6
 800a7ea:	b508      	push	{r3, lr}
 800a7ec:	f000 ff3a 	bl	800b664 <raise>
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f7fc fc8a 	bl	800710a <_exit>

0800a7f6 <_calloc_r>:
 800a7f6:	b570      	push	{r4, r5, r6, lr}
 800a7f8:	fba1 5402 	umull	r5, r4, r1, r2
 800a7fc:	b93c      	cbnz	r4, 800a80e <_calloc_r+0x18>
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7ff f888 	bl	8009914 <_malloc_r>
 800a804:	4606      	mov	r6, r0
 800a806:	b928      	cbnz	r0, 800a814 <_calloc_r+0x1e>
 800a808:	2600      	movs	r6, #0
 800a80a:	4630      	mov	r0, r6
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	220c      	movs	r2, #12
 800a810:	6002      	str	r2, [r0, #0]
 800a812:	e7f9      	b.n	800a808 <_calloc_r+0x12>
 800a814:	462a      	mov	r2, r5
 800a816:	4621      	mov	r1, r4
 800a818:	f7fd fce7 	bl	80081ea <memset>
 800a81c:	e7f5      	b.n	800a80a <_calloc_r+0x14>
	...

0800a820 <__env_lock>:
 800a820:	4801      	ldr	r0, [pc, #4]	@ (800a828 <__env_lock+0x8>)
 800a822:	f7fe bc39 	b.w	8009098 <__retarget_lock_acquire_recursive>
 800a826:	bf00      	nop
 800a828:	20000a69 	.word	0x20000a69

0800a82c <__env_unlock>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__env_unlock+0x8>)
 800a82e:	f7fe bc35 	b.w	800909c <__retarget_lock_release_recursive>
 800a832:	bf00      	nop
 800a834:	20000a69 	.word	0x20000a69

0800a838 <_sungetc_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	1c4b      	adds	r3, r1, #1
 800a83c:	4614      	mov	r4, r2
 800a83e:	d103      	bne.n	800a848 <_sungetc_r+0x10>
 800a840:	f04f 35ff 	mov.w	r5, #4294967295
 800a844:	4628      	mov	r0, r5
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	8993      	ldrh	r3, [r2, #12]
 800a84a:	b2cd      	uxtb	r5, r1
 800a84c:	f023 0320 	bic.w	r3, r3, #32
 800a850:	8193      	strh	r3, [r2, #12]
 800a852:	6853      	ldr	r3, [r2, #4]
 800a854:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a856:	b18a      	cbz	r2, 800a87c <_sungetc_r+0x44>
 800a858:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a85a:	429a      	cmp	r2, r3
 800a85c:	dd08      	ble.n	800a870 <_sungetc_r+0x38>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	1e5a      	subs	r2, r3, #1
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	3301      	adds	r3, #1
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	e7e9      	b.n	800a844 <_sungetc_r+0xc>
 800a870:	4621      	mov	r1, r4
 800a872:	f000 fe02 	bl	800b47a <__submore>
 800a876:	2800      	cmp	r0, #0
 800a878:	d0f1      	beq.n	800a85e <_sungetc_r+0x26>
 800a87a:	e7e1      	b.n	800a840 <_sungetc_r+0x8>
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	b141      	cbz	r1, 800a894 <_sungetc_r+0x5c>
 800a882:	4291      	cmp	r1, r2
 800a884:	d206      	bcs.n	800a894 <_sungetc_r+0x5c>
 800a886:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a88a:	42a9      	cmp	r1, r5
 800a88c:	d102      	bne.n	800a894 <_sungetc_r+0x5c>
 800a88e:	3a01      	subs	r2, #1
 800a890:	6022      	str	r2, [r4, #0]
 800a892:	e7ea      	b.n	800a86a <_sungetc_r+0x32>
 800a894:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a89c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a89e:	2303      	movs	r3, #3
 800a8a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e7de      	b.n	800a86c <_sungetc_r+0x34>

0800a8ae <__ssrefill_r>:
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a8b4:	b169      	cbz	r1, 800a8d2 <__ssrefill_r+0x24>
 800a8b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	d001      	beq.n	800a8c2 <__ssrefill_r+0x14>
 800a8be:	f7fe fc31 	bl	8009124 <_free_r>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8c6:	6360      	str	r0, [r4, #52]	@ 0x34
 800a8c8:	6063      	str	r3, [r4, #4]
 800a8ca:	b113      	cbz	r3, 800a8d2 <__ssrefill_r+0x24>
 800a8cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	f043 0320 	orr.w	r3, r3, #32
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	e7f3      	b.n	800a8d0 <__ssrefill_r+0x22>

0800a8e8 <__ssvfiscanf_r>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a8f6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a8fa:	49aa      	ldr	r1, [pc, #680]	@ (800aba4 <__ssvfiscanf_r+0x2bc>)
 800a8fc:	f10d 0804 	add.w	r8, sp, #4
 800a900:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a902:	49a9      	ldr	r1, [pc, #676]	@ (800aba8 <__ssvfiscanf_r+0x2c0>)
 800a904:	4fa9      	ldr	r7, [pc, #676]	@ (800abac <__ssvfiscanf_r+0x2c4>)
 800a906:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a90a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	7813      	ldrb	r3, [r2, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8159 	beq.w	800abc8 <__ssvfiscanf_r+0x2e0>
 800a916:	5cf9      	ldrb	r1, [r7, r3]
 800a918:	1c55      	adds	r5, r2, #1
 800a91a:	f011 0108 	ands.w	r1, r1, #8
 800a91e:	d019      	beq.n	800a954 <__ssvfiscanf_r+0x6c>
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd0f      	ble.n	800a946 <__ssvfiscanf_r+0x5e>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	5cba      	ldrb	r2, [r7, r2]
 800a92c:	0712      	lsls	r2, r2, #28
 800a92e:	d401      	bmi.n	800a934 <__ssvfiscanf_r+0x4c>
 800a930:	462a      	mov	r2, r5
 800a932:	e7ec      	b.n	800a90e <__ssvfiscanf_r+0x26>
 800a934:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a936:	3301      	adds	r3, #1
 800a938:	3201      	adds	r2, #1
 800a93a:	9245      	str	r2, [sp, #276]	@ 0x114
 800a93c:	6862      	ldr	r2, [r4, #4]
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	3a01      	subs	r2, #1
 800a942:	6062      	str	r2, [r4, #4]
 800a944:	e7ec      	b.n	800a920 <__ssvfiscanf_r+0x38>
 800a946:	4621      	mov	r1, r4
 800a948:	4630      	mov	r0, r6
 800a94a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a94c:	4798      	blx	r3
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0e9      	beq.n	800a926 <__ssvfiscanf_r+0x3e>
 800a952:	e7ed      	b.n	800a930 <__ssvfiscanf_r+0x48>
 800a954:	2b25      	cmp	r3, #37	@ 0x25
 800a956:	d012      	beq.n	800a97e <__ssvfiscanf_r+0x96>
 800a958:	4699      	mov	r9, r3
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f340 8094 	ble.w	800aa8a <__ssvfiscanf_r+0x1a2>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	7813      	ldrb	r3, [r2, #0]
 800a966:	454b      	cmp	r3, r9
 800a968:	f040 812e 	bne.w	800abc8 <__ssvfiscanf_r+0x2e0>
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	3201      	adds	r2, #1
 800a970:	3b01      	subs	r3, #1
 800a972:	6063      	str	r3, [r4, #4]
 800a974:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a976:	6022      	str	r2, [r4, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	9345      	str	r3, [sp, #276]	@ 0x114
 800a97c:	e7d8      	b.n	800a930 <__ssvfiscanf_r+0x48>
 800a97e:	9141      	str	r1, [sp, #260]	@ 0x104
 800a980:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a982:	7853      	ldrb	r3, [r2, #1]
 800a984:	2b2a      	cmp	r3, #42	@ 0x2a
 800a986:	bf04      	itt	eq
 800a988:	2310      	moveq	r3, #16
 800a98a:	1c95      	addeq	r5, r2, #2
 800a98c:	f04f 020a 	mov.w	r2, #10
 800a990:	bf08      	it	eq
 800a992:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a994:	46a9      	mov	r9, r5
 800a996:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a99a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d91e      	bls.n	800a9e0 <__ssvfiscanf_r+0xf8>
 800a9a2:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800abb0 <__ssvfiscanf_r+0x2c8>
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	4650      	mov	r0, sl
 800a9aa:	f000 fe77 	bl	800b69c <memchr>
 800a9ae:	b138      	cbz	r0, 800a9c0 <__ssvfiscanf_r+0xd8>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	464d      	mov	r5, r9
 800a9b4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a9b6:	eba0 000a 	sub.w	r0, r0, sl
 800a9ba:	4083      	lsls	r3, r0
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	9341      	str	r3, [sp, #260]	@ 0x104
 800a9c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9c4:	2b78      	cmp	r3, #120	@ 0x78
 800a9c6:	d806      	bhi.n	800a9d6 <__ssvfiscanf_r+0xee>
 800a9c8:	2b57      	cmp	r3, #87	@ 0x57
 800a9ca:	d810      	bhi.n	800a9ee <__ssvfiscanf_r+0x106>
 800a9cc:	2b25      	cmp	r3, #37	@ 0x25
 800a9ce:	d0c3      	beq.n	800a958 <__ssvfiscanf_r+0x70>
 800a9d0:	d856      	bhi.n	800aa80 <__ssvfiscanf_r+0x198>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d064      	beq.n	800aaa0 <__ssvfiscanf_r+0x1b8>
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a9da:	230a      	movs	r3, #10
 800a9dc:	9342      	str	r3, [sp, #264]	@ 0x108
 800a9de:	e077      	b.n	800aad0 <__ssvfiscanf_r+0x1e8>
 800a9e0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a9e2:	464d      	mov	r5, r9
 800a9e4:	fb02 1103 	mla	r1, r2, r3, r1
 800a9e8:	3930      	subs	r1, #48	@ 0x30
 800a9ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a9ec:	e7d2      	b.n	800a994 <__ssvfiscanf_r+0xac>
 800a9ee:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a9f2:	2a20      	cmp	r2, #32
 800a9f4:	d8ef      	bhi.n	800a9d6 <__ssvfiscanf_r+0xee>
 800a9f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a9fc <__ssvfiscanf_r+0x114>)
 800a9f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9fc:	0800aaaf 	.word	0x0800aaaf
 800aa00:	0800a9d7 	.word	0x0800a9d7
 800aa04:	0800a9d7 	.word	0x0800a9d7
 800aa08:	0800ab09 	.word	0x0800ab09
 800aa0c:	0800a9d7 	.word	0x0800a9d7
 800aa10:	0800a9d7 	.word	0x0800a9d7
 800aa14:	0800a9d7 	.word	0x0800a9d7
 800aa18:	0800a9d7 	.word	0x0800a9d7
 800aa1c:	0800a9d7 	.word	0x0800a9d7
 800aa20:	0800a9d7 	.word	0x0800a9d7
 800aa24:	0800a9d7 	.word	0x0800a9d7
 800aa28:	0800ab1f 	.word	0x0800ab1f
 800aa2c:	0800ab05 	.word	0x0800ab05
 800aa30:	0800aa87 	.word	0x0800aa87
 800aa34:	0800aa87 	.word	0x0800aa87
 800aa38:	0800aa87 	.word	0x0800aa87
 800aa3c:	0800a9d7 	.word	0x0800a9d7
 800aa40:	0800aac1 	.word	0x0800aac1
 800aa44:	0800a9d7 	.word	0x0800a9d7
 800aa48:	0800a9d7 	.word	0x0800a9d7
 800aa4c:	0800a9d7 	.word	0x0800a9d7
 800aa50:	0800a9d7 	.word	0x0800a9d7
 800aa54:	0800ab2f 	.word	0x0800ab2f
 800aa58:	0800aac9 	.word	0x0800aac9
 800aa5c:	0800aaa7 	.word	0x0800aaa7
 800aa60:	0800a9d7 	.word	0x0800a9d7
 800aa64:	0800a9d7 	.word	0x0800a9d7
 800aa68:	0800ab2b 	.word	0x0800ab2b
 800aa6c:	0800a9d7 	.word	0x0800a9d7
 800aa70:	0800ab05 	.word	0x0800ab05
 800aa74:	0800a9d7 	.word	0x0800a9d7
 800aa78:	0800a9d7 	.word	0x0800a9d7
 800aa7c:	0800aaaf 	.word	0x0800aaaf
 800aa80:	3b45      	subs	r3, #69	@ 0x45
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d8a7      	bhi.n	800a9d6 <__ssvfiscanf_r+0xee>
 800aa86:	2305      	movs	r3, #5
 800aa88:	e021      	b.n	800aace <__ssvfiscanf_r+0x1e6>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa90:	4798      	blx	r3
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f43f af65 	beq.w	800a962 <__ssvfiscanf_r+0x7a>
 800aa98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	f040 808c 	bne.w	800abb8 <__ssvfiscanf_r+0x2d0>
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e08c      	b.n	800abc0 <__ssvfiscanf_r+0x2d8>
 800aaa6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aaa8:	f042 0220 	orr.w	r2, r2, #32
 800aaac:	9241      	str	r2, [sp, #260]	@ 0x104
 800aaae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aab4:	9241      	str	r2, [sp, #260]	@ 0x104
 800aab6:	2210      	movs	r2, #16
 800aab8:	2b6e      	cmp	r3, #110	@ 0x6e
 800aaba:	9242      	str	r2, [sp, #264]	@ 0x108
 800aabc:	d902      	bls.n	800aac4 <__ssvfiscanf_r+0x1dc>
 800aabe:	e005      	b.n	800aacc <__ssvfiscanf_r+0x1e4>
 800aac0:	2300      	movs	r3, #0
 800aac2:	9342      	str	r3, [sp, #264]	@ 0x108
 800aac4:	2303      	movs	r3, #3
 800aac6:	e002      	b.n	800aace <__ssvfiscanf_r+0x1e6>
 800aac8:	2308      	movs	r3, #8
 800aaca:	9342      	str	r3, [sp, #264]	@ 0x108
 800aacc:	2304      	movs	r3, #4
 800aace:	9347      	str	r3, [sp, #284]	@ 0x11c
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd39      	ble.n	800ab4a <__ssvfiscanf_r+0x262>
 800aad6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aad8:	0659      	lsls	r1, r3, #25
 800aada:	d404      	bmi.n	800aae6 <__ssvfiscanf_r+0x1fe>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	5cba      	ldrb	r2, [r7, r2]
 800aae2:	0712      	lsls	r2, r2, #28
 800aae4:	d438      	bmi.n	800ab58 <__ssvfiscanf_r+0x270>
 800aae6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	dc47      	bgt.n	800ab7c <__ssvfiscanf_r+0x294>
 800aaec:	466b      	mov	r3, sp
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	a941      	add	r1, sp, #260	@ 0x104
 800aaf4:	f000 fb3c 	bl	800b170 <_scanf_chars>
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d065      	beq.n	800abc8 <__ssvfiscanf_r+0x2e0>
 800aafc:	2802      	cmp	r0, #2
 800aafe:	f47f af17 	bne.w	800a930 <__ssvfiscanf_r+0x48>
 800ab02:	e7c9      	b.n	800aa98 <__ssvfiscanf_r+0x1b0>
 800ab04:	220a      	movs	r2, #10
 800ab06:	e7d7      	b.n	800aab8 <__ssvfiscanf_r+0x1d0>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f000 fc7c 	bl	800b408 <__sccl>
 800ab10:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab12:	4605      	mov	r5, r0
 800ab14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab18:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e7d7      	b.n	800aace <__ssvfiscanf_r+0x1e6>
 800ab1e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab24:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab26:	2300      	movs	r3, #0
 800ab28:	e7d1      	b.n	800aace <__ssvfiscanf_r+0x1e6>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e7cf      	b.n	800aace <__ssvfiscanf_r+0x1e6>
 800ab2e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ab30:	06c3      	lsls	r3, r0, #27
 800ab32:	f53f aefd 	bmi.w	800a930 <__ssvfiscanf_r+0x48>
 800ab36:	9b00      	ldr	r3, [sp, #0]
 800ab38:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab3a:	1d19      	adds	r1, r3, #4
 800ab3c:	9100      	str	r1, [sp, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	07c0      	lsls	r0, r0, #31
 800ab42:	bf4c      	ite	mi
 800ab44:	801a      	strhmi	r2, [r3, #0]
 800ab46:	601a      	strpl	r2, [r3, #0]
 800ab48:	e6f2      	b.n	800a930 <__ssvfiscanf_r+0x48>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab50:	4798      	blx	r3
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0bf      	beq.n	800aad6 <__ssvfiscanf_r+0x1ee>
 800ab56:	e79f      	b.n	800aa98 <__ssvfiscanf_r+0x1b0>
 800ab58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	9245      	str	r2, [sp, #276]	@ 0x114
 800ab5e:	6862      	ldr	r2, [r4, #4]
 800ab60:	3a01      	subs	r2, #1
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	6062      	str	r2, [r4, #4]
 800ab66:	dd02      	ble.n	800ab6e <__ssvfiscanf_r+0x286>
 800ab68:	3301      	adds	r3, #1
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	e7b6      	b.n	800aadc <__ssvfiscanf_r+0x1f4>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4630      	mov	r0, r6
 800ab72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab74:	4798      	blx	r3
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0b0      	beq.n	800aadc <__ssvfiscanf_r+0x1f4>
 800ab7a:	e78d      	b.n	800aa98 <__ssvfiscanf_r+0x1b0>
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	dc06      	bgt.n	800ab8e <__ssvfiscanf_r+0x2a6>
 800ab80:	466b      	mov	r3, sp
 800ab82:	4622      	mov	r2, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	a941      	add	r1, sp, #260	@ 0x104
 800ab88:	f000 fb4c 	bl	800b224 <_scanf_i>
 800ab8c:	e7b4      	b.n	800aaf8 <__ssvfiscanf_r+0x210>
 800ab8e:	4b09      	ldr	r3, [pc, #36]	@ (800abb4 <__ssvfiscanf_r+0x2cc>)
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f43f aecd 	beq.w	800a930 <__ssvfiscanf_r+0x48>
 800ab96:	466b      	mov	r3, sp
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	a941      	add	r1, sp, #260	@ 0x104
 800ab9e:	f3af 8000 	nop.w
 800aba2:	e7a9      	b.n	800aaf8 <__ssvfiscanf_r+0x210>
 800aba4:	0800a839 	.word	0x0800a839
 800aba8:	0800a8af 	.word	0x0800a8af
 800abac:	0800c859 	.word	0x0800c859
 800abb0:	0800cd40 	.word	0x0800cd40
 800abb4:	00000000 	.word	0x00000000
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	065b      	lsls	r3, r3, #25
 800abbc:	f53f af70 	bmi.w	800aaa0 <__ssvfiscanf_r+0x1b8>
 800abc0:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800abca:	e7f9      	b.n	800abc0 <__ssvfiscanf_r+0x2d8>

0800abcc <__sfputc_r>:
 800abcc:	6893      	ldr	r3, [r2, #8]
 800abce:	b410      	push	{r4}
 800abd0:	3b01      	subs	r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	6093      	str	r3, [r2, #8]
 800abd6:	da07      	bge.n	800abe8 <__sfputc_r+0x1c>
 800abd8:	6994      	ldr	r4, [r2, #24]
 800abda:	42a3      	cmp	r3, r4
 800abdc:	db01      	blt.n	800abe2 <__sfputc_r+0x16>
 800abde:	290a      	cmp	r1, #10
 800abe0:	d102      	bne.n	800abe8 <__sfputc_r+0x1c>
 800abe2:	bc10      	pop	{r4}
 800abe4:	f000 bc81 	b.w	800b4ea <__swbuf_r>
 800abe8:	6813      	ldr	r3, [r2, #0]
 800abea:	1c58      	adds	r0, r3, #1
 800abec:	6010      	str	r0, [r2, #0]
 800abee:	7019      	strb	r1, [r3, #0]
 800abf0:	4608      	mov	r0, r1
 800abf2:	bc10      	pop	{r4}
 800abf4:	4770      	bx	lr

0800abf6 <__sfputs_r>:
 800abf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf8:	4606      	mov	r6, r0
 800abfa:	460f      	mov	r7, r1
 800abfc:	4614      	mov	r4, r2
 800abfe:	18d5      	adds	r5, r2, r3
 800ac00:	42ac      	cmp	r4, r5
 800ac02:	d101      	bne.n	800ac08 <__sfputs_r+0x12>
 800ac04:	2000      	movs	r0, #0
 800ac06:	e007      	b.n	800ac18 <__sfputs_r+0x22>
 800ac08:	463a      	mov	r2, r7
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	f7ff ffdc 	bl	800abcc <__sfputc_r>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d1f3      	bne.n	800ac00 <__sfputs_r+0xa>
 800ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac1c <_vfiprintf_r>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	460d      	mov	r5, r1
 800ac22:	4614      	mov	r4, r2
 800ac24:	4698      	mov	r8, r3
 800ac26:	4606      	mov	r6, r0
 800ac28:	b09d      	sub	sp, #116	@ 0x74
 800ac2a:	b118      	cbz	r0, 800ac34 <_vfiprintf_r+0x18>
 800ac2c:	6a03      	ldr	r3, [r0, #32]
 800ac2e:	b90b      	cbnz	r3, 800ac34 <_vfiprintf_r+0x18>
 800ac30:	f7fd fa60 	bl	80080f4 <__sinit>
 800ac34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac36:	07d9      	lsls	r1, r3, #31
 800ac38:	d405      	bmi.n	800ac46 <_vfiprintf_r+0x2a>
 800ac3a:	89ab      	ldrh	r3, [r5, #12]
 800ac3c:	059a      	lsls	r2, r3, #22
 800ac3e:	d402      	bmi.n	800ac46 <_vfiprintf_r+0x2a>
 800ac40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac42:	f7fe fa29 	bl	8009098 <__retarget_lock_acquire_recursive>
 800ac46:	89ab      	ldrh	r3, [r5, #12]
 800ac48:	071b      	lsls	r3, r3, #28
 800ac4a:	d501      	bpl.n	800ac50 <_vfiprintf_r+0x34>
 800ac4c:	692b      	ldr	r3, [r5, #16]
 800ac4e:	b99b      	cbnz	r3, 800ac78 <_vfiprintf_r+0x5c>
 800ac50:	4629      	mov	r1, r5
 800ac52:	4630      	mov	r0, r6
 800ac54:	f000 fc88 	bl	800b568 <__swsetup_r>
 800ac58:	b170      	cbz	r0, 800ac78 <_vfiprintf_r+0x5c>
 800ac5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac5c:	07dc      	lsls	r4, r3, #31
 800ac5e:	d504      	bpl.n	800ac6a <_vfiprintf_r+0x4e>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	b01d      	add	sp, #116	@ 0x74
 800ac66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	0598      	lsls	r0, r3, #22
 800ac6e:	d4f7      	bmi.n	800ac60 <_vfiprintf_r+0x44>
 800ac70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac72:	f7fe fa13 	bl	800909c <__retarget_lock_release_recursive>
 800ac76:	e7f3      	b.n	800ac60 <_vfiprintf_r+0x44>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac7c:	2320      	movs	r3, #32
 800ac7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac82:	2330      	movs	r3, #48	@ 0x30
 800ac84:	f04f 0901 	mov.w	r9, #1
 800ac88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae38 <_vfiprintf_r+0x21c>
 800ac90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac94:	4623      	mov	r3, r4
 800ac96:	469a      	mov	sl, r3
 800ac98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac9c:	b10a      	cbz	r2, 800aca2 <_vfiprintf_r+0x86>
 800ac9e:	2a25      	cmp	r2, #37	@ 0x25
 800aca0:	d1f9      	bne.n	800ac96 <_vfiprintf_r+0x7a>
 800aca2:	ebba 0b04 	subs.w	fp, sl, r4
 800aca6:	d00b      	beq.n	800acc0 <_vfiprintf_r+0xa4>
 800aca8:	465b      	mov	r3, fp
 800acaa:	4622      	mov	r2, r4
 800acac:	4629      	mov	r1, r5
 800acae:	4630      	mov	r0, r6
 800acb0:	f7ff ffa1 	bl	800abf6 <__sfputs_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	f000 80a7 	beq.w	800ae08 <_vfiprintf_r+0x1ec>
 800acba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acbc:	445a      	add	r2, fp
 800acbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800acc0:	f89a 3000 	ldrb.w	r3, [sl]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 809f 	beq.w	800ae08 <_vfiprintf_r+0x1ec>
 800acca:	2300      	movs	r3, #0
 800accc:	f04f 32ff 	mov.w	r2, #4294967295
 800acd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acd4:	f10a 0a01 	add.w	sl, sl, #1
 800acd8:	9304      	str	r3, [sp, #16]
 800acda:	9307      	str	r3, [sp, #28]
 800acdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ace0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ace2:	4654      	mov	r4, sl
 800ace4:	2205      	movs	r2, #5
 800ace6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acea:	4853      	ldr	r0, [pc, #332]	@ (800ae38 <_vfiprintf_r+0x21c>)
 800acec:	f000 fcd6 	bl	800b69c <memchr>
 800acf0:	9a04      	ldr	r2, [sp, #16]
 800acf2:	b9d8      	cbnz	r0, 800ad2c <_vfiprintf_r+0x110>
 800acf4:	06d1      	lsls	r1, r2, #27
 800acf6:	bf44      	itt	mi
 800acf8:	2320      	movmi	r3, #32
 800acfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acfe:	0713      	lsls	r3, r2, #28
 800ad00:	bf44      	itt	mi
 800ad02:	232b      	movmi	r3, #43	@ 0x2b
 800ad04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad08:	f89a 3000 	ldrb.w	r3, [sl]
 800ad0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad0e:	d015      	beq.n	800ad3c <_vfiprintf_r+0x120>
 800ad10:	4654      	mov	r4, sl
 800ad12:	2000      	movs	r0, #0
 800ad14:	f04f 0c0a 	mov.w	ip, #10
 800ad18:	9a07      	ldr	r2, [sp, #28]
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad20:	3b30      	subs	r3, #48	@ 0x30
 800ad22:	2b09      	cmp	r3, #9
 800ad24:	d94b      	bls.n	800adbe <_vfiprintf_r+0x1a2>
 800ad26:	b1b0      	cbz	r0, 800ad56 <_vfiprintf_r+0x13a>
 800ad28:	9207      	str	r2, [sp, #28]
 800ad2a:	e014      	b.n	800ad56 <_vfiprintf_r+0x13a>
 800ad2c:	eba0 0308 	sub.w	r3, r0, r8
 800ad30:	fa09 f303 	lsl.w	r3, r9, r3
 800ad34:	4313      	orrs	r3, r2
 800ad36:	46a2      	mov	sl, r4
 800ad38:	9304      	str	r3, [sp, #16]
 800ad3a:	e7d2      	b.n	800ace2 <_vfiprintf_r+0xc6>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	1d19      	adds	r1, r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	9103      	str	r1, [sp, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfbb      	ittet	lt
 800ad48:	425b      	neglt	r3, r3
 800ad4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad4e:	9307      	strge	r3, [sp, #28]
 800ad50:	9307      	strlt	r3, [sp, #28]
 800ad52:	bfb8      	it	lt
 800ad54:	9204      	strlt	r2, [sp, #16]
 800ad56:	7823      	ldrb	r3, [r4, #0]
 800ad58:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad5a:	d10a      	bne.n	800ad72 <_vfiprintf_r+0x156>
 800ad5c:	7863      	ldrb	r3, [r4, #1]
 800ad5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad60:	d132      	bne.n	800adc8 <_vfiprintf_r+0x1ac>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	3402      	adds	r4, #2
 800ad66:	1d1a      	adds	r2, r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	9203      	str	r2, [sp, #12]
 800ad6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ae3c <_vfiprintf_r+0x220>
 800ad76:	2203      	movs	r2, #3
 800ad78:	4650      	mov	r0, sl
 800ad7a:	7821      	ldrb	r1, [r4, #0]
 800ad7c:	f000 fc8e 	bl	800b69c <memchr>
 800ad80:	b138      	cbz	r0, 800ad92 <_vfiprintf_r+0x176>
 800ad82:	2240      	movs	r2, #64	@ 0x40
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	eba0 000a 	sub.w	r0, r0, sl
 800ad8a:	4082      	lsls	r2, r0
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	3401      	adds	r4, #1
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	2206      	movs	r2, #6
 800ad98:	4829      	ldr	r0, [pc, #164]	@ (800ae40 <_vfiprintf_r+0x224>)
 800ad9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad9e:	f000 fc7d 	bl	800b69c <memchr>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d03f      	beq.n	800ae26 <_vfiprintf_r+0x20a>
 800ada6:	4b27      	ldr	r3, [pc, #156]	@ (800ae44 <_vfiprintf_r+0x228>)
 800ada8:	bb1b      	cbnz	r3, 800adf2 <_vfiprintf_r+0x1d6>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	3307      	adds	r3, #7
 800adae:	f023 0307 	bic.w	r3, r3, #7
 800adb2:	3308      	adds	r3, #8
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb8:	443b      	add	r3, r7
 800adba:	9309      	str	r3, [sp, #36]	@ 0x24
 800adbc:	e76a      	b.n	800ac94 <_vfiprintf_r+0x78>
 800adbe:	460c      	mov	r4, r1
 800adc0:	2001      	movs	r0, #1
 800adc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800adc6:	e7a8      	b.n	800ad1a <_vfiprintf_r+0xfe>
 800adc8:	2300      	movs	r3, #0
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	4619      	mov	r1, r3
 800add0:	3401      	adds	r4, #1
 800add2:	9305      	str	r3, [sp, #20]
 800add4:	4620      	mov	r0, r4
 800add6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adda:	3a30      	subs	r2, #48	@ 0x30
 800addc:	2a09      	cmp	r2, #9
 800adde:	d903      	bls.n	800ade8 <_vfiprintf_r+0x1cc>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0c6      	beq.n	800ad72 <_vfiprintf_r+0x156>
 800ade4:	9105      	str	r1, [sp, #20]
 800ade6:	e7c4      	b.n	800ad72 <_vfiprintf_r+0x156>
 800ade8:	4604      	mov	r4, r0
 800adea:	2301      	movs	r3, #1
 800adec:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf0:	e7f0      	b.n	800add4 <_vfiprintf_r+0x1b8>
 800adf2:	ab03      	add	r3, sp, #12
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	462a      	mov	r2, r5
 800adf8:	4630      	mov	r0, r6
 800adfa:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <_vfiprintf_r+0x22c>)
 800adfc:	a904      	add	r1, sp, #16
 800adfe:	f3af 8000 	nop.w
 800ae02:	4607      	mov	r7, r0
 800ae04:	1c78      	adds	r0, r7, #1
 800ae06:	d1d6      	bne.n	800adb6 <_vfiprintf_r+0x19a>
 800ae08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae0a:	07d9      	lsls	r1, r3, #31
 800ae0c:	d405      	bmi.n	800ae1a <_vfiprintf_r+0x1fe>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	059a      	lsls	r2, r3, #22
 800ae12:	d402      	bmi.n	800ae1a <_vfiprintf_r+0x1fe>
 800ae14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae16:	f7fe f941 	bl	800909c <__retarget_lock_release_recursive>
 800ae1a:	89ab      	ldrh	r3, [r5, #12]
 800ae1c:	065b      	lsls	r3, r3, #25
 800ae1e:	f53f af1f 	bmi.w	800ac60 <_vfiprintf_r+0x44>
 800ae22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae24:	e71e      	b.n	800ac64 <_vfiprintf_r+0x48>
 800ae26:	ab03      	add	r3, sp, #12
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4b06      	ldr	r3, [pc, #24]	@ (800ae48 <_vfiprintf_r+0x22c>)
 800ae30:	a904      	add	r1, sp, #16
 800ae32:	f000 f87d 	bl	800af30 <_printf_i>
 800ae36:	e7e4      	b.n	800ae02 <_vfiprintf_r+0x1e6>
 800ae38:	0800cd44 	.word	0x0800cd44
 800ae3c:	0800cd40 	.word	0x0800cd40
 800ae40:	0800cd4a 	.word	0x0800cd4a
 800ae44:	00000000 	.word	0x00000000
 800ae48:	0800abf7 	.word	0x0800abf7

0800ae4c <_printf_common>:
 800ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae50:	4616      	mov	r6, r2
 800ae52:	4698      	mov	r8, r3
 800ae54:	688a      	ldr	r2, [r1, #8]
 800ae56:	690b      	ldr	r3, [r1, #16]
 800ae58:	4607      	mov	r7, r0
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	bfb8      	it	lt
 800ae5e:	4613      	movlt	r3, r2
 800ae60:	6033      	str	r3, [r6, #0]
 800ae62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae66:	460c      	mov	r4, r1
 800ae68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae6c:	b10a      	cbz	r2, 800ae72 <_printf_common+0x26>
 800ae6e:	3301      	adds	r3, #1
 800ae70:	6033      	str	r3, [r6, #0]
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	0699      	lsls	r1, r3, #26
 800ae76:	bf42      	ittt	mi
 800ae78:	6833      	ldrmi	r3, [r6, #0]
 800ae7a:	3302      	addmi	r3, #2
 800ae7c:	6033      	strmi	r3, [r6, #0]
 800ae7e:	6825      	ldr	r5, [r4, #0]
 800ae80:	f015 0506 	ands.w	r5, r5, #6
 800ae84:	d106      	bne.n	800ae94 <_printf_common+0x48>
 800ae86:	f104 0a19 	add.w	sl, r4, #25
 800ae8a:	68e3      	ldr	r3, [r4, #12]
 800ae8c:	6832      	ldr	r2, [r6, #0]
 800ae8e:	1a9b      	subs	r3, r3, r2
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	dc2b      	bgt.n	800aeec <_printf_common+0xa0>
 800ae94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae98:	6822      	ldr	r2, [r4, #0]
 800ae9a:	3b00      	subs	r3, #0
 800ae9c:	bf18      	it	ne
 800ae9e:	2301      	movne	r3, #1
 800aea0:	0692      	lsls	r2, r2, #26
 800aea2:	d430      	bmi.n	800af06 <_printf_common+0xba>
 800aea4:	4641      	mov	r1, r8
 800aea6:	4638      	mov	r0, r7
 800aea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aeac:	47c8      	blx	r9
 800aeae:	3001      	adds	r0, #1
 800aeb0:	d023      	beq.n	800aefa <_printf_common+0xae>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	6922      	ldr	r2, [r4, #16]
 800aeb6:	f003 0306 	and.w	r3, r3, #6
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	bf14      	ite	ne
 800aebe:	2500      	movne	r5, #0
 800aec0:	6833      	ldreq	r3, [r6, #0]
 800aec2:	f04f 0600 	mov.w	r6, #0
 800aec6:	bf08      	it	eq
 800aec8:	68e5      	ldreq	r5, [r4, #12]
 800aeca:	f104 041a 	add.w	r4, r4, #26
 800aece:	bf08      	it	eq
 800aed0:	1aed      	subeq	r5, r5, r3
 800aed2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aed6:	bf08      	it	eq
 800aed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aedc:	4293      	cmp	r3, r2
 800aede:	bfc4      	itt	gt
 800aee0:	1a9b      	subgt	r3, r3, r2
 800aee2:	18ed      	addgt	r5, r5, r3
 800aee4:	42b5      	cmp	r5, r6
 800aee6:	d11a      	bne.n	800af1e <_printf_common+0xd2>
 800aee8:	2000      	movs	r0, #0
 800aeea:	e008      	b.n	800aefe <_printf_common+0xb2>
 800aeec:	2301      	movs	r3, #1
 800aeee:	4652      	mov	r2, sl
 800aef0:	4641      	mov	r1, r8
 800aef2:	4638      	mov	r0, r7
 800aef4:	47c8      	blx	r9
 800aef6:	3001      	adds	r0, #1
 800aef8:	d103      	bne.n	800af02 <_printf_common+0xb6>
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	3501      	adds	r5, #1
 800af04:	e7c1      	b.n	800ae8a <_printf_common+0x3e>
 800af06:	2030      	movs	r0, #48	@ 0x30
 800af08:	18e1      	adds	r1, r4, r3
 800af0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af14:	4422      	add	r2, r4
 800af16:	3302      	adds	r3, #2
 800af18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af1c:	e7c2      	b.n	800aea4 <_printf_common+0x58>
 800af1e:	2301      	movs	r3, #1
 800af20:	4622      	mov	r2, r4
 800af22:	4641      	mov	r1, r8
 800af24:	4638      	mov	r0, r7
 800af26:	47c8      	blx	r9
 800af28:	3001      	adds	r0, #1
 800af2a:	d0e6      	beq.n	800aefa <_printf_common+0xae>
 800af2c:	3601      	adds	r6, #1
 800af2e:	e7d9      	b.n	800aee4 <_printf_common+0x98>

0800af30 <_printf_i>:
 800af30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	7e0f      	ldrb	r7, [r1, #24]
 800af36:	4691      	mov	r9, r2
 800af38:	2f78      	cmp	r7, #120	@ 0x78
 800af3a:	4680      	mov	r8, r0
 800af3c:	460c      	mov	r4, r1
 800af3e:	469a      	mov	sl, r3
 800af40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af46:	d807      	bhi.n	800af58 <_printf_i+0x28>
 800af48:	2f62      	cmp	r7, #98	@ 0x62
 800af4a:	d80a      	bhi.n	800af62 <_printf_i+0x32>
 800af4c:	2f00      	cmp	r7, #0
 800af4e:	f000 80d3 	beq.w	800b0f8 <_printf_i+0x1c8>
 800af52:	2f58      	cmp	r7, #88	@ 0x58
 800af54:	f000 80ba 	beq.w	800b0cc <_printf_i+0x19c>
 800af58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af60:	e03a      	b.n	800afd8 <_printf_i+0xa8>
 800af62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af66:	2b15      	cmp	r3, #21
 800af68:	d8f6      	bhi.n	800af58 <_printf_i+0x28>
 800af6a:	a101      	add	r1, pc, #4	@ (adr r1, 800af70 <_printf_i+0x40>)
 800af6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af70:	0800afc9 	.word	0x0800afc9
 800af74:	0800afdd 	.word	0x0800afdd
 800af78:	0800af59 	.word	0x0800af59
 800af7c:	0800af59 	.word	0x0800af59
 800af80:	0800af59 	.word	0x0800af59
 800af84:	0800af59 	.word	0x0800af59
 800af88:	0800afdd 	.word	0x0800afdd
 800af8c:	0800af59 	.word	0x0800af59
 800af90:	0800af59 	.word	0x0800af59
 800af94:	0800af59 	.word	0x0800af59
 800af98:	0800af59 	.word	0x0800af59
 800af9c:	0800b0df 	.word	0x0800b0df
 800afa0:	0800b007 	.word	0x0800b007
 800afa4:	0800b099 	.word	0x0800b099
 800afa8:	0800af59 	.word	0x0800af59
 800afac:	0800af59 	.word	0x0800af59
 800afb0:	0800b101 	.word	0x0800b101
 800afb4:	0800af59 	.word	0x0800af59
 800afb8:	0800b007 	.word	0x0800b007
 800afbc:	0800af59 	.word	0x0800af59
 800afc0:	0800af59 	.word	0x0800af59
 800afc4:	0800b0a1 	.word	0x0800b0a1
 800afc8:	6833      	ldr	r3, [r6, #0]
 800afca:	1d1a      	adds	r2, r3, #4
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6032      	str	r2, [r6, #0]
 800afd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afd8:	2301      	movs	r3, #1
 800afda:	e09e      	b.n	800b11a <_printf_i+0x1ea>
 800afdc:	6833      	ldr	r3, [r6, #0]
 800afde:	6820      	ldr	r0, [r4, #0]
 800afe0:	1d19      	adds	r1, r3, #4
 800afe2:	6031      	str	r1, [r6, #0]
 800afe4:	0606      	lsls	r6, r0, #24
 800afe6:	d501      	bpl.n	800afec <_printf_i+0xbc>
 800afe8:	681d      	ldr	r5, [r3, #0]
 800afea:	e003      	b.n	800aff4 <_printf_i+0xc4>
 800afec:	0645      	lsls	r5, r0, #25
 800afee:	d5fb      	bpl.n	800afe8 <_printf_i+0xb8>
 800aff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aff4:	2d00      	cmp	r5, #0
 800aff6:	da03      	bge.n	800b000 <_printf_i+0xd0>
 800aff8:	232d      	movs	r3, #45	@ 0x2d
 800affa:	426d      	negs	r5, r5
 800affc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b000:	230a      	movs	r3, #10
 800b002:	4859      	ldr	r0, [pc, #356]	@ (800b168 <_printf_i+0x238>)
 800b004:	e011      	b.n	800b02a <_printf_i+0xfa>
 800b006:	6821      	ldr	r1, [r4, #0]
 800b008:	6833      	ldr	r3, [r6, #0]
 800b00a:	0608      	lsls	r0, r1, #24
 800b00c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b010:	d402      	bmi.n	800b018 <_printf_i+0xe8>
 800b012:	0649      	lsls	r1, r1, #25
 800b014:	bf48      	it	mi
 800b016:	b2ad      	uxthmi	r5, r5
 800b018:	2f6f      	cmp	r7, #111	@ 0x6f
 800b01a:	6033      	str	r3, [r6, #0]
 800b01c:	bf14      	ite	ne
 800b01e:	230a      	movne	r3, #10
 800b020:	2308      	moveq	r3, #8
 800b022:	4851      	ldr	r0, [pc, #324]	@ (800b168 <_printf_i+0x238>)
 800b024:	2100      	movs	r1, #0
 800b026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b02a:	6866      	ldr	r6, [r4, #4]
 800b02c:	2e00      	cmp	r6, #0
 800b02e:	bfa8      	it	ge
 800b030:	6821      	ldrge	r1, [r4, #0]
 800b032:	60a6      	str	r6, [r4, #8]
 800b034:	bfa4      	itt	ge
 800b036:	f021 0104 	bicge.w	r1, r1, #4
 800b03a:	6021      	strge	r1, [r4, #0]
 800b03c:	b90d      	cbnz	r5, 800b042 <_printf_i+0x112>
 800b03e:	2e00      	cmp	r6, #0
 800b040:	d04b      	beq.n	800b0da <_printf_i+0x1aa>
 800b042:	4616      	mov	r6, r2
 800b044:	fbb5 f1f3 	udiv	r1, r5, r3
 800b048:	fb03 5711 	mls	r7, r3, r1, r5
 800b04c:	5dc7      	ldrb	r7, [r0, r7]
 800b04e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b052:	462f      	mov	r7, r5
 800b054:	42bb      	cmp	r3, r7
 800b056:	460d      	mov	r5, r1
 800b058:	d9f4      	bls.n	800b044 <_printf_i+0x114>
 800b05a:	2b08      	cmp	r3, #8
 800b05c:	d10b      	bne.n	800b076 <_printf_i+0x146>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	07df      	lsls	r7, r3, #31
 800b062:	d508      	bpl.n	800b076 <_printf_i+0x146>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	6861      	ldr	r1, [r4, #4]
 800b068:	4299      	cmp	r1, r3
 800b06a:	bfde      	ittt	le
 800b06c:	2330      	movle	r3, #48	@ 0x30
 800b06e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b072:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b076:	1b92      	subs	r2, r2, r6
 800b078:	6122      	str	r2, [r4, #16]
 800b07a:	464b      	mov	r3, r9
 800b07c:	4621      	mov	r1, r4
 800b07e:	4640      	mov	r0, r8
 800b080:	f8cd a000 	str.w	sl, [sp]
 800b084:	aa03      	add	r2, sp, #12
 800b086:	f7ff fee1 	bl	800ae4c <_printf_common>
 800b08a:	3001      	adds	r0, #1
 800b08c:	d14a      	bne.n	800b124 <_printf_i+0x1f4>
 800b08e:	f04f 30ff 	mov.w	r0, #4294967295
 800b092:	b004      	add	sp, #16
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	f043 0320 	orr.w	r3, r3, #32
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	2778      	movs	r7, #120	@ 0x78
 800b0a2:	4832      	ldr	r0, [pc, #200]	@ (800b16c <_printf_i+0x23c>)
 800b0a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	061f      	lsls	r7, r3, #24
 800b0ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0b2:	d402      	bmi.n	800b0ba <_printf_i+0x18a>
 800b0b4:	065f      	lsls	r7, r3, #25
 800b0b6:	bf48      	it	mi
 800b0b8:	b2ad      	uxthmi	r5, r5
 800b0ba:	6031      	str	r1, [r6, #0]
 800b0bc:	07d9      	lsls	r1, r3, #31
 800b0be:	bf44      	itt	mi
 800b0c0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c4:	6023      	strmi	r3, [r4, #0]
 800b0c6:	b11d      	cbz	r5, 800b0d0 <_printf_i+0x1a0>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	e7ab      	b.n	800b024 <_printf_i+0xf4>
 800b0cc:	4826      	ldr	r0, [pc, #152]	@ (800b168 <_printf_i+0x238>)
 800b0ce:	e7e9      	b.n	800b0a4 <_printf_i+0x174>
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	f023 0320 	bic.w	r3, r3, #32
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	e7f6      	b.n	800b0c8 <_printf_i+0x198>
 800b0da:	4616      	mov	r6, r2
 800b0dc:	e7bd      	b.n	800b05a <_printf_i+0x12a>
 800b0de:	6833      	ldr	r3, [r6, #0]
 800b0e0:	6825      	ldr	r5, [r4, #0]
 800b0e2:	1d18      	adds	r0, r3, #4
 800b0e4:	6961      	ldr	r1, [r4, #20]
 800b0e6:	6030      	str	r0, [r6, #0]
 800b0e8:	062e      	lsls	r6, r5, #24
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	d501      	bpl.n	800b0f2 <_printf_i+0x1c2>
 800b0ee:	6019      	str	r1, [r3, #0]
 800b0f0:	e002      	b.n	800b0f8 <_printf_i+0x1c8>
 800b0f2:	0668      	lsls	r0, r5, #25
 800b0f4:	d5fb      	bpl.n	800b0ee <_printf_i+0x1be>
 800b0f6:	8019      	strh	r1, [r3, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4616      	mov	r6, r2
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	e7bc      	b.n	800b07a <_printf_i+0x14a>
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	2100      	movs	r1, #0
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	681e      	ldr	r6, [r3, #0]
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 fac5 	bl	800b69c <memchr>
 800b112:	b108      	cbz	r0, 800b118 <_printf_i+0x1e8>
 800b114:	1b80      	subs	r0, r0, r6
 800b116:	6060      	str	r0, [r4, #4]
 800b118:	6863      	ldr	r3, [r4, #4]
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	2300      	movs	r3, #0
 800b11e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b122:	e7aa      	b.n	800b07a <_printf_i+0x14a>
 800b124:	4632      	mov	r2, r6
 800b126:	4649      	mov	r1, r9
 800b128:	4640      	mov	r0, r8
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	47d0      	blx	sl
 800b12e:	3001      	adds	r0, #1
 800b130:	d0ad      	beq.n	800b08e <_printf_i+0x15e>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	079b      	lsls	r3, r3, #30
 800b136:	d413      	bmi.n	800b160 <_printf_i+0x230>
 800b138:	68e0      	ldr	r0, [r4, #12]
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	4298      	cmp	r0, r3
 800b13e:	bfb8      	it	lt
 800b140:	4618      	movlt	r0, r3
 800b142:	e7a6      	b.n	800b092 <_printf_i+0x162>
 800b144:	2301      	movs	r3, #1
 800b146:	4632      	mov	r2, r6
 800b148:	4649      	mov	r1, r9
 800b14a:	4640      	mov	r0, r8
 800b14c:	47d0      	blx	sl
 800b14e:	3001      	adds	r0, #1
 800b150:	d09d      	beq.n	800b08e <_printf_i+0x15e>
 800b152:	3501      	adds	r5, #1
 800b154:	68e3      	ldr	r3, [r4, #12]
 800b156:	9903      	ldr	r1, [sp, #12]
 800b158:	1a5b      	subs	r3, r3, r1
 800b15a:	42ab      	cmp	r3, r5
 800b15c:	dcf2      	bgt.n	800b144 <_printf_i+0x214>
 800b15e:	e7eb      	b.n	800b138 <_printf_i+0x208>
 800b160:	2500      	movs	r5, #0
 800b162:	f104 0619 	add.w	r6, r4, #25
 800b166:	e7f5      	b.n	800b154 <_printf_i+0x224>
 800b168:	0800cd51 	.word	0x0800cd51
 800b16c:	0800cd62 	.word	0x0800cd62

0800b170 <_scanf_chars>:
 800b170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b174:	4615      	mov	r5, r2
 800b176:	688a      	ldr	r2, [r1, #8]
 800b178:	4680      	mov	r8, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	b932      	cbnz	r2, 800b18c <_scanf_chars+0x1c>
 800b17e:	698a      	ldr	r2, [r1, #24]
 800b180:	2a00      	cmp	r2, #0
 800b182:	bf14      	ite	ne
 800b184:	f04f 32ff 	movne.w	r2, #4294967295
 800b188:	2201      	moveq	r2, #1
 800b18a:	608a      	str	r2, [r1, #8]
 800b18c:	2700      	movs	r7, #0
 800b18e:	6822      	ldr	r2, [r4, #0]
 800b190:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800b220 <_scanf_chars+0xb0>
 800b194:	06d1      	lsls	r1, r2, #27
 800b196:	bf5f      	itttt	pl
 800b198:	681a      	ldrpl	r2, [r3, #0]
 800b19a:	1d11      	addpl	r1, r2, #4
 800b19c:	6019      	strpl	r1, [r3, #0]
 800b19e:	6816      	ldrpl	r6, [r2, #0]
 800b1a0:	69a0      	ldr	r0, [r4, #24]
 800b1a2:	b188      	cbz	r0, 800b1c8 <_scanf_chars+0x58>
 800b1a4:	2801      	cmp	r0, #1
 800b1a6:	d107      	bne.n	800b1b8 <_scanf_chars+0x48>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	6963      	ldr	r3, [r4, #20]
 800b1ae:	5c9b      	ldrb	r3, [r3, r2]
 800b1b0:	b953      	cbnz	r3, 800b1c8 <_scanf_chars+0x58>
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	d031      	beq.n	800b21a <_scanf_chars+0xaa>
 800b1b6:	e022      	b.n	800b1fe <_scanf_chars+0x8e>
 800b1b8:	2802      	cmp	r0, #2
 800b1ba:	d120      	bne.n	800b1fe <_scanf_chars+0x8e>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b1c4:	071b      	lsls	r3, r3, #28
 800b1c6:	d41a      	bmi.n	800b1fe <_scanf_chars+0x8e>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	3701      	adds	r7, #1
 800b1cc:	06da      	lsls	r2, r3, #27
 800b1ce:	bf5e      	ittt	pl
 800b1d0:	682b      	ldrpl	r3, [r5, #0]
 800b1d2:	781b      	ldrbpl	r3, [r3, #0]
 800b1d4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b1d8:	682a      	ldr	r2, [r5, #0]
 800b1da:	686b      	ldr	r3, [r5, #4]
 800b1dc:	3201      	adds	r2, #1
 800b1de:	602a      	str	r2, [r5, #0]
 800b1e0:	68a2      	ldr	r2, [r4, #8]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	3a01      	subs	r2, #1
 800b1e6:	606b      	str	r3, [r5, #4]
 800b1e8:	60a2      	str	r2, [r4, #8]
 800b1ea:	b142      	cbz	r2, 800b1fe <_scanf_chars+0x8e>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dcd7      	bgt.n	800b1a0 <_scanf_chars+0x30>
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1f8:	4798      	blx	r3
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d0d0      	beq.n	800b1a0 <_scanf_chars+0x30>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f013 0310 	ands.w	r3, r3, #16
 800b204:	d105      	bne.n	800b212 <_scanf_chars+0xa2>
 800b206:	68e2      	ldr	r2, [r4, #12]
 800b208:	3201      	adds	r2, #1
 800b20a:	60e2      	str	r2, [r4, #12]
 800b20c:	69a2      	ldr	r2, [r4, #24]
 800b20e:	b102      	cbz	r2, 800b212 <_scanf_chars+0xa2>
 800b210:	7033      	strb	r3, [r6, #0]
 800b212:	2000      	movs	r0, #0
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	443b      	add	r3, r7
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b21e:	bf00      	nop
 800b220:	0800c859 	.word	0x0800c859

0800b224 <_scanf_i>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	460c      	mov	r4, r1
 800b22a:	4698      	mov	r8, r3
 800b22c:	4b72      	ldr	r3, [pc, #456]	@ (800b3f8 <_scanf_i+0x1d4>)
 800b22e:	b087      	sub	sp, #28
 800b230:	4682      	mov	sl, r0
 800b232:	4616      	mov	r6, r2
 800b234:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b238:	ab03      	add	r3, sp, #12
 800b23a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b23e:	4b6f      	ldr	r3, [pc, #444]	@ (800b3fc <_scanf_i+0x1d8>)
 800b240:	69a1      	ldr	r1, [r4, #24]
 800b242:	4a6f      	ldr	r2, [pc, #444]	@ (800b400 <_scanf_i+0x1dc>)
 800b244:	4627      	mov	r7, r4
 800b246:	2903      	cmp	r1, #3
 800b248:	bf08      	it	eq
 800b24a:	461a      	moveq	r2, r3
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	9201      	str	r2, [sp, #4]
 800b250:	1e5a      	subs	r2, r3, #1
 800b252:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b256:	bf81      	itttt	hi
 800b258:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b25c:	eb03 0905 	addhi.w	r9, r3, r5
 800b260:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b264:	60a3      	strhi	r3, [r4, #8]
 800b266:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b26a:	bf98      	it	ls
 800b26c:	f04f 0900 	movls.w	r9, #0
 800b270:	463d      	mov	r5, r7
 800b272:	f04f 0b00 	mov.w	fp, #0
 800b276:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	6831      	ldr	r1, [r6, #0]
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	2202      	movs	r2, #2
 800b282:	7809      	ldrb	r1, [r1, #0]
 800b284:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b288:	f000 fa08 	bl	800b69c <memchr>
 800b28c:	b328      	cbz	r0, 800b2da <_scanf_i+0xb6>
 800b28e:	f1bb 0f01 	cmp.w	fp, #1
 800b292:	d159      	bne.n	800b348 <_scanf_i+0x124>
 800b294:	6862      	ldr	r2, [r4, #4]
 800b296:	b92a      	cbnz	r2, 800b2a4 <_scanf_i+0x80>
 800b298:	2108      	movs	r1, #8
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	6061      	str	r1, [r4, #4]
 800b29e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2a2:	6022      	str	r2, [r4, #0]
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b2aa:	6022      	str	r2, [r4, #0]
 800b2ac:	68a2      	ldr	r2, [r4, #8]
 800b2ae:	1e51      	subs	r1, r2, #1
 800b2b0:	60a1      	str	r1, [r4, #8]
 800b2b2:	b192      	cbz	r2, 800b2da <_scanf_i+0xb6>
 800b2b4:	6832      	ldr	r2, [r6, #0]
 800b2b6:	1c51      	adds	r1, r2, #1
 800b2b8:	6031      	str	r1, [r6, #0]
 800b2ba:	7812      	ldrb	r2, [r2, #0]
 800b2bc:	f805 2b01 	strb.w	r2, [r5], #1
 800b2c0:	6872      	ldr	r2, [r6, #4]
 800b2c2:	3a01      	subs	r2, #1
 800b2c4:	2a00      	cmp	r2, #0
 800b2c6:	6072      	str	r2, [r6, #4]
 800b2c8:	dc07      	bgt.n	800b2da <_scanf_i+0xb6>
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4650      	mov	r0, sl
 800b2ce:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b2d2:	4790      	blx	r2
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f040 8085 	bne.w	800b3e4 <_scanf_i+0x1c0>
 800b2da:	f10b 0b01 	add.w	fp, fp, #1
 800b2de:	f1bb 0f03 	cmp.w	fp, #3
 800b2e2:	d1cb      	bne.n	800b27c <_scanf_i+0x58>
 800b2e4:	6863      	ldr	r3, [r4, #4]
 800b2e6:	b90b      	cbnz	r3, 800b2ec <_scanf_i+0xc8>
 800b2e8:	230a      	movs	r3, #10
 800b2ea:	6063      	str	r3, [r4, #4]
 800b2ec:	6863      	ldr	r3, [r4, #4]
 800b2ee:	4945      	ldr	r1, [pc, #276]	@ (800b404 <_scanf_i+0x1e0>)
 800b2f0:	6960      	ldr	r0, [r4, #20]
 800b2f2:	1ac9      	subs	r1, r1, r3
 800b2f4:	f000 f888 	bl	800b408 <__sccl>
 800b2f8:	f04f 0b00 	mov.w	fp, #0
 800b2fc:	68a3      	ldr	r3, [r4, #8]
 800b2fe:	6822      	ldr	r2, [r4, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d03d      	beq.n	800b380 <_scanf_i+0x15c>
 800b304:	6831      	ldr	r1, [r6, #0]
 800b306:	6960      	ldr	r0, [r4, #20]
 800b308:	f891 c000 	ldrb.w	ip, [r1]
 800b30c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b310:	2800      	cmp	r0, #0
 800b312:	d035      	beq.n	800b380 <_scanf_i+0x15c>
 800b314:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b318:	d124      	bne.n	800b364 <_scanf_i+0x140>
 800b31a:	0510      	lsls	r0, r2, #20
 800b31c:	d522      	bpl.n	800b364 <_scanf_i+0x140>
 800b31e:	f10b 0b01 	add.w	fp, fp, #1
 800b322:	f1b9 0f00 	cmp.w	r9, #0
 800b326:	d003      	beq.n	800b330 <_scanf_i+0x10c>
 800b328:	3301      	adds	r3, #1
 800b32a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b32e:	60a3      	str	r3, [r4, #8]
 800b330:	6873      	ldr	r3, [r6, #4]
 800b332:	3b01      	subs	r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	6073      	str	r3, [r6, #4]
 800b338:	dd1b      	ble.n	800b372 <_scanf_i+0x14e>
 800b33a:	6833      	ldr	r3, [r6, #0]
 800b33c:	3301      	adds	r3, #1
 800b33e:	6033      	str	r3, [r6, #0]
 800b340:	68a3      	ldr	r3, [r4, #8]
 800b342:	3b01      	subs	r3, #1
 800b344:	60a3      	str	r3, [r4, #8]
 800b346:	e7d9      	b.n	800b2fc <_scanf_i+0xd8>
 800b348:	f1bb 0f02 	cmp.w	fp, #2
 800b34c:	d1ae      	bne.n	800b2ac <_scanf_i+0x88>
 800b34e:	6822      	ldr	r2, [r4, #0]
 800b350:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b354:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b358:	d1bf      	bne.n	800b2da <_scanf_i+0xb6>
 800b35a:	2110      	movs	r1, #16
 800b35c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b360:	6061      	str	r1, [r4, #4]
 800b362:	e7a2      	b.n	800b2aa <_scanf_i+0x86>
 800b364:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b368:	6022      	str	r2, [r4, #0]
 800b36a:	780b      	ldrb	r3, [r1, #0]
 800b36c:	f805 3b01 	strb.w	r3, [r5], #1
 800b370:	e7de      	b.n	800b330 <_scanf_i+0x10c>
 800b372:	4631      	mov	r1, r6
 800b374:	4650      	mov	r0, sl
 800b376:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b37a:	4798      	blx	r3
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d0df      	beq.n	800b340 <_scanf_i+0x11c>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	05d9      	lsls	r1, r3, #23
 800b384:	d50d      	bpl.n	800b3a2 <_scanf_i+0x17e>
 800b386:	42bd      	cmp	r5, r7
 800b388:	d909      	bls.n	800b39e <_scanf_i+0x17a>
 800b38a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b38e:	4632      	mov	r2, r6
 800b390:	4650      	mov	r0, sl
 800b392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b396:	f105 39ff 	add.w	r9, r5, #4294967295
 800b39a:	4798      	blx	r3
 800b39c:	464d      	mov	r5, r9
 800b39e:	42bd      	cmp	r5, r7
 800b3a0:	d028      	beq.n	800b3f4 <_scanf_i+0x1d0>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	f012 0210 	ands.w	r2, r2, #16
 800b3a8:	d113      	bne.n	800b3d2 <_scanf_i+0x1ae>
 800b3aa:	702a      	strb	r2, [r5, #0]
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	9e01      	ldr	r6, [sp, #4]
 800b3b4:	47b0      	blx	r6
 800b3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	f8c8 2000 	str.w	r2, [r8]
 800b3c2:	f011 0f20 	tst.w	r1, #32
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	d00f      	beq.n	800b3ea <_scanf_i+0x1c6>
 800b3ca:	6018      	str	r0, [r3, #0]
 800b3cc:	68e3      	ldr	r3, [r4, #12]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	60e3      	str	r3, [r4, #12]
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	1bed      	subs	r5, r5, r7
 800b3d8:	445d      	add	r5, fp
 800b3da:	442b      	add	r3, r5
 800b3dc:	6123      	str	r3, [r4, #16]
 800b3de:	b007      	add	sp, #28
 800b3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e4:	f04f 0b00 	mov.w	fp, #0
 800b3e8:	e7ca      	b.n	800b380 <_scanf_i+0x15c>
 800b3ea:	07ca      	lsls	r2, r1, #31
 800b3ec:	bf4c      	ite	mi
 800b3ee:	8018      	strhmi	r0, [r3, #0]
 800b3f0:	6018      	strpl	r0, [r3, #0]
 800b3f2:	e7eb      	b.n	800b3cc <_scanf_i+0x1a8>
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	e7f2      	b.n	800b3de <_scanf_i+0x1ba>
 800b3f8:	0800c7e8 	.word	0x0800c7e8
 800b3fc:	08007fc5 	.word	0x08007fc5
 800b400:	0800a479 	.word	0x0800a479
 800b404:	0800cd83 	.word	0x0800cd83

0800b408 <__sccl>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	780b      	ldrb	r3, [r1, #0]
 800b40c:	4604      	mov	r4, r0
 800b40e:	2b5e      	cmp	r3, #94	@ 0x5e
 800b410:	bf0b      	itete	eq
 800b412:	784b      	ldrbeq	r3, [r1, #1]
 800b414:	1c4a      	addne	r2, r1, #1
 800b416:	1c8a      	addeq	r2, r1, #2
 800b418:	2100      	movne	r1, #0
 800b41a:	bf08      	it	eq
 800b41c:	2101      	moveq	r1, #1
 800b41e:	3801      	subs	r0, #1
 800b420:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b424:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b428:	42a8      	cmp	r0, r5
 800b42a:	d1fb      	bne.n	800b424 <__sccl+0x1c>
 800b42c:	b90b      	cbnz	r3, 800b432 <__sccl+0x2a>
 800b42e:	1e50      	subs	r0, r2, #1
 800b430:	bd70      	pop	{r4, r5, r6, pc}
 800b432:	f081 0101 	eor.w	r1, r1, #1
 800b436:	4610      	mov	r0, r2
 800b438:	54e1      	strb	r1, [r4, r3]
 800b43a:	4602      	mov	r2, r0
 800b43c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b440:	2d2d      	cmp	r5, #45	@ 0x2d
 800b442:	d005      	beq.n	800b450 <__sccl+0x48>
 800b444:	2d5d      	cmp	r5, #93	@ 0x5d
 800b446:	d016      	beq.n	800b476 <__sccl+0x6e>
 800b448:	2d00      	cmp	r5, #0
 800b44a:	d0f1      	beq.n	800b430 <__sccl+0x28>
 800b44c:	462b      	mov	r3, r5
 800b44e:	e7f2      	b.n	800b436 <__sccl+0x2e>
 800b450:	7846      	ldrb	r6, [r0, #1]
 800b452:	2e5d      	cmp	r6, #93	@ 0x5d
 800b454:	d0fa      	beq.n	800b44c <__sccl+0x44>
 800b456:	42b3      	cmp	r3, r6
 800b458:	dcf8      	bgt.n	800b44c <__sccl+0x44>
 800b45a:	461a      	mov	r2, r3
 800b45c:	3002      	adds	r0, #2
 800b45e:	3201      	adds	r2, #1
 800b460:	4296      	cmp	r6, r2
 800b462:	54a1      	strb	r1, [r4, r2]
 800b464:	dcfb      	bgt.n	800b45e <__sccl+0x56>
 800b466:	1af2      	subs	r2, r6, r3
 800b468:	3a01      	subs	r2, #1
 800b46a:	42b3      	cmp	r3, r6
 800b46c:	bfa8      	it	ge
 800b46e:	2200      	movge	r2, #0
 800b470:	1c5d      	adds	r5, r3, #1
 800b472:	18ab      	adds	r3, r5, r2
 800b474:	e7e1      	b.n	800b43a <__sccl+0x32>
 800b476:	4610      	mov	r0, r2
 800b478:	e7da      	b.n	800b430 <__sccl+0x28>

0800b47a <__submore>:
 800b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	460c      	mov	r4, r1
 800b480:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b486:	4299      	cmp	r1, r3
 800b488:	d11b      	bne.n	800b4c2 <__submore+0x48>
 800b48a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b48e:	f7fe fa41 	bl	8009914 <_malloc_r>
 800b492:	b918      	cbnz	r0, 800b49c <__submore+0x22>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b4a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b4a6:	6360      	str	r0, [r4, #52]	@ 0x34
 800b4a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b4ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b4b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b4b4:	7043      	strb	r3, [r0, #1]
 800b4b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b4ba:	7003      	strb	r3, [r0, #0]
 800b4bc:	6020      	str	r0, [r4, #0]
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e7ea      	b.n	800b498 <__submore+0x1e>
 800b4c2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b4c4:	0077      	lsls	r7, r6, #1
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	f000 f8f6 	bl	800b6b8 <_realloc_r>
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d0e0      	beq.n	800b494 <__submore+0x1a>
 800b4d2:	eb00 0806 	add.w	r8, r0, r6
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4640      	mov	r0, r8
 800b4dc:	f7fd fde7 	bl	80090ae <memcpy>
 800b4e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b4e4:	f8c4 8000 	str.w	r8, [r4]
 800b4e8:	e7e9      	b.n	800b4be <__submore+0x44>

0800b4ea <__swbuf_r>:
 800b4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ec:	460e      	mov	r6, r1
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	b118      	cbz	r0, 800b4fc <__swbuf_r+0x12>
 800b4f4:	6a03      	ldr	r3, [r0, #32]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <__swbuf_r+0x12>
 800b4f8:	f7fc fdfc 	bl	80080f4 <__sinit>
 800b4fc:	69a3      	ldr	r3, [r4, #24]
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	071a      	lsls	r2, r3, #28
 800b504:	d501      	bpl.n	800b50a <__swbuf_r+0x20>
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	b943      	cbnz	r3, 800b51c <__swbuf_r+0x32>
 800b50a:	4621      	mov	r1, r4
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 f82b 	bl	800b568 <__swsetup_r>
 800b512:	b118      	cbz	r0, 800b51c <__swbuf_r+0x32>
 800b514:	f04f 37ff 	mov.w	r7, #4294967295
 800b518:	4638      	mov	r0, r7
 800b51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	b2f6      	uxtb	r6, r6
 800b522:	1a98      	subs	r0, r3, r2
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	4637      	mov	r7, r6
 800b528:	4283      	cmp	r3, r0
 800b52a:	dc05      	bgt.n	800b538 <__swbuf_r+0x4e>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f7ff f83c 	bl	800a5ac <_fflush_r>
 800b534:	2800      	cmp	r0, #0
 800b536:	d1ed      	bne.n	800b514 <__swbuf_r+0x2a>
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	6022      	str	r2, [r4, #0]
 800b544:	701e      	strb	r6, [r3, #0]
 800b546:	6962      	ldr	r2, [r4, #20]
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d004      	beq.n	800b558 <__swbuf_r+0x6e>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	07db      	lsls	r3, r3, #31
 800b552:	d5e1      	bpl.n	800b518 <__swbuf_r+0x2e>
 800b554:	2e0a      	cmp	r6, #10
 800b556:	d1df      	bne.n	800b518 <__swbuf_r+0x2e>
 800b558:	4621      	mov	r1, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	f7ff f826 	bl	800a5ac <_fflush_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	d0d9      	beq.n	800b518 <__swbuf_r+0x2e>
 800b564:	e7d6      	b.n	800b514 <__swbuf_r+0x2a>
	...

0800b568 <__swsetup_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4b29      	ldr	r3, [pc, #164]	@ (800b610 <__swsetup_r+0xa8>)
 800b56c:	4605      	mov	r5, r0
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	460c      	mov	r4, r1
 800b572:	b118      	cbz	r0, 800b57c <__swsetup_r+0x14>
 800b574:	6a03      	ldr	r3, [r0, #32]
 800b576:	b90b      	cbnz	r3, 800b57c <__swsetup_r+0x14>
 800b578:	f7fc fdbc 	bl	80080f4 <__sinit>
 800b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b580:	0719      	lsls	r1, r3, #28
 800b582:	d422      	bmi.n	800b5ca <__swsetup_r+0x62>
 800b584:	06da      	lsls	r2, r3, #27
 800b586:	d407      	bmi.n	800b598 <__swsetup_r+0x30>
 800b588:	2209      	movs	r2, #9
 800b58a:	602a      	str	r2, [r5, #0]
 800b58c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	81a3      	strh	r3, [r4, #12]
 800b596:	e033      	b.n	800b600 <__swsetup_r+0x98>
 800b598:	0758      	lsls	r0, r3, #29
 800b59a:	d512      	bpl.n	800b5c2 <__swsetup_r+0x5a>
 800b59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b59e:	b141      	cbz	r1, 800b5b2 <__swsetup_r+0x4a>
 800b5a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__swsetup_r+0x46>
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7fd fdbb 	bl	8009124 <_free_r>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f043 0308 	orr.w	r3, r3, #8
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <__swsetup_r+0x7a>
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d8:	d003      	beq.n	800b5e2 <__swsetup_r+0x7a>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f8be 	bl	800b75e <__smakebuf_r>
 800b5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e6:	f013 0201 	ands.w	r2, r3, #1
 800b5ea:	d00a      	beq.n	800b602 <__swsetup_r+0x9a>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	60a2      	str	r2, [r4, #8]
 800b5f0:	6962      	ldr	r2, [r4, #20]
 800b5f2:	4252      	negs	r2, r2
 800b5f4:	61a2      	str	r2, [r4, #24]
 800b5f6:	6922      	ldr	r2, [r4, #16]
 800b5f8:	b942      	cbnz	r2, 800b60c <__swsetup_r+0xa4>
 800b5fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5fe:	d1c5      	bne.n	800b58c <__swsetup_r+0x24>
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	0799      	lsls	r1, r3, #30
 800b604:	bf58      	it	pl
 800b606:	6962      	ldrpl	r2, [r4, #20]
 800b608:	60a2      	str	r2, [r4, #8]
 800b60a:	e7f4      	b.n	800b5f6 <__swsetup_r+0x8e>
 800b60c:	2000      	movs	r0, #0
 800b60e:	e7f7      	b.n	800b600 <__swsetup_r+0x98>
 800b610:	200005c8 	.word	0x200005c8

0800b614 <_raise_r>:
 800b614:	291f      	cmp	r1, #31
 800b616:	b538      	push	{r3, r4, r5, lr}
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	d904      	bls.n	800b628 <_raise_r+0x14>
 800b61e:	2316      	movs	r3, #22
 800b620:	6003      	str	r3, [r0, #0]
 800b622:	f04f 30ff 	mov.w	r0, #4294967295
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b62a:	b112      	cbz	r2, 800b632 <_raise_r+0x1e>
 800b62c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b630:	b94b      	cbnz	r3, 800b646 <_raise_r+0x32>
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f830 	bl	800b698 <_getpid_r>
 800b638:	4622      	mov	r2, r4
 800b63a:	4601      	mov	r1, r0
 800b63c:	4628      	mov	r0, r5
 800b63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b642:	f000 b817 	b.w	800b674 <_kill_r>
 800b646:	2b01      	cmp	r3, #1
 800b648:	d00a      	beq.n	800b660 <_raise_r+0x4c>
 800b64a:	1c59      	adds	r1, r3, #1
 800b64c:	d103      	bne.n	800b656 <_raise_r+0x42>
 800b64e:	2316      	movs	r3, #22
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	2001      	movs	r0, #1
 800b654:	e7e7      	b.n	800b626 <_raise_r+0x12>
 800b656:	2100      	movs	r1, #0
 800b658:	4620      	mov	r0, r4
 800b65a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b65e:	4798      	blx	r3
 800b660:	2000      	movs	r0, #0
 800b662:	e7e0      	b.n	800b626 <_raise_r+0x12>

0800b664 <raise>:
 800b664:	4b02      	ldr	r3, [pc, #8]	@ (800b670 <raise+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f7ff bfd3 	b.w	800b614 <_raise_r>
 800b66e:	bf00      	nop
 800b670:	200005c8 	.word	0x200005c8

0800b674 <_kill_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	2300      	movs	r3, #0
 800b678:	4d06      	ldr	r5, [pc, #24]	@ (800b694 <_kill_r+0x20>)
 800b67a:	4604      	mov	r4, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	4611      	mov	r1, r2
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	f7fb fd32 	bl	80070ea <_kill>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	d102      	bne.n	800b690 <_kill_r+0x1c>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	b103      	cbz	r3, 800b690 <_kill_r+0x1c>
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	bf00      	nop
 800b694:	20000a64 	.word	0x20000a64

0800b698 <_getpid_r>:
 800b698:	f7fb bd20 	b.w	80070dc <_getpid>

0800b69c <memchr>:
 800b69c:	4603      	mov	r3, r0
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	b2c9      	uxtb	r1, r1
 800b6a2:	4402      	add	r2, r0
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	d101      	bne.n	800b6ae <memchr+0x12>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e003      	b.n	800b6b6 <memchr+0x1a>
 800b6ae:	7804      	ldrb	r4, [r0, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	428c      	cmp	r4, r1
 800b6b4:	d1f6      	bne.n	800b6a4 <memchr+0x8>
 800b6b6:	bd10      	pop	{r4, pc}

0800b6b8 <_realloc_r>:
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4615      	mov	r5, r2
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	b921      	cbnz	r1, 800b6ce <_realloc_r+0x16>
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ca:	f7fe b923 	b.w	8009914 <_malloc_r>
 800b6ce:	b92a      	cbnz	r2, 800b6dc <_realloc_r+0x24>
 800b6d0:	f7fd fd28 	bl	8009124 <_free_r>
 800b6d4:	2400      	movs	r4, #0
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6dc:	f000 f89e 	bl	800b81c <_malloc_usable_size_r>
 800b6e0:	4285      	cmp	r5, r0
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	d802      	bhi.n	800b6ec <_realloc_r+0x34>
 800b6e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b6ea:	d8f4      	bhi.n	800b6d6 <_realloc_r+0x1e>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	f7fe f910 	bl	8009914 <_malloc_r>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0ec      	beq.n	800b6d4 <_realloc_r+0x1c>
 800b6fa:	42b5      	cmp	r5, r6
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	4621      	mov	r1, r4
 800b700:	bf28      	it	cs
 800b702:	4632      	movcs	r2, r6
 800b704:	f7fd fcd3 	bl	80090ae <memcpy>
 800b708:	4621      	mov	r1, r4
 800b70a:	4640      	mov	r0, r8
 800b70c:	f7fd fd0a 	bl	8009124 <_free_r>
 800b710:	463c      	mov	r4, r7
 800b712:	e7e0      	b.n	800b6d6 <_realloc_r+0x1e>

0800b714 <__swhatbuf_r>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	460c      	mov	r4, r1
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	4615      	mov	r5, r2
 800b71e:	2900      	cmp	r1, #0
 800b720:	461e      	mov	r6, r3
 800b722:	b096      	sub	sp, #88	@ 0x58
 800b724:	da0c      	bge.n	800b740 <__swhatbuf_r+0x2c>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	2100      	movs	r1, #0
 800b72a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b72e:	bf14      	ite	ne
 800b730:	2340      	movne	r3, #64	@ 0x40
 800b732:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b736:	2000      	movs	r0, #0
 800b738:	6031      	str	r1, [r6, #0]
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	b016      	add	sp, #88	@ 0x58
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	466a      	mov	r2, sp
 800b742:	f000 f849 	bl	800b7d8 <_fstat_r>
 800b746:	2800      	cmp	r0, #0
 800b748:	dbed      	blt.n	800b726 <__swhatbuf_r+0x12>
 800b74a:	9901      	ldr	r1, [sp, #4]
 800b74c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b750:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b754:	4259      	negs	r1, r3
 800b756:	4159      	adcs	r1, r3
 800b758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b75c:	e7eb      	b.n	800b736 <__swhatbuf_r+0x22>

0800b75e <__smakebuf_r>:
 800b75e:	898b      	ldrh	r3, [r1, #12]
 800b760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b762:	079d      	lsls	r5, r3, #30
 800b764:	4606      	mov	r6, r0
 800b766:	460c      	mov	r4, r1
 800b768:	d507      	bpl.n	800b77a <__smakebuf_r+0x1c>
 800b76a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	2301      	movs	r3, #1
 800b774:	6163      	str	r3, [r4, #20]
 800b776:	b003      	add	sp, #12
 800b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77a:	466a      	mov	r2, sp
 800b77c:	ab01      	add	r3, sp, #4
 800b77e:	f7ff ffc9 	bl	800b714 <__swhatbuf_r>
 800b782:	9f00      	ldr	r7, [sp, #0]
 800b784:	4605      	mov	r5, r0
 800b786:	4639      	mov	r1, r7
 800b788:	4630      	mov	r0, r6
 800b78a:	f7fe f8c3 	bl	8009914 <_malloc_r>
 800b78e:	b948      	cbnz	r0, 800b7a4 <__smakebuf_r+0x46>
 800b790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b794:	059a      	lsls	r2, r3, #22
 800b796:	d4ee      	bmi.n	800b776 <__smakebuf_r+0x18>
 800b798:	f023 0303 	bic.w	r3, r3, #3
 800b79c:	f043 0302 	orr.w	r3, r3, #2
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	e7e2      	b.n	800b76a <__smakebuf_r+0xc>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	6020      	str	r0, [r4, #0]
 800b7b4:	b15b      	cbz	r3, 800b7ce <__smakebuf_r+0x70>
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7bc:	f000 f81e 	bl	800b7fc <_isatty_r>
 800b7c0:	b128      	cbz	r0, 800b7ce <__smakebuf_r+0x70>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	f043 0301 	orr.w	r3, r3, #1
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	431d      	orrs	r5, r3
 800b7d2:	81a5      	strh	r5, [r4, #12]
 800b7d4:	e7cf      	b.n	800b776 <__smakebuf_r+0x18>
	...

0800b7d8 <_fstat_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	2300      	movs	r3, #0
 800b7dc:	4d06      	ldr	r5, [pc, #24]	@ (800b7f8 <_fstat_r+0x20>)
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	f7fb fcdf 	bl	80071a8 <_fstat>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	d102      	bne.n	800b7f4 <_fstat_r+0x1c>
 800b7ee:	682b      	ldr	r3, [r5, #0]
 800b7f0:	b103      	cbz	r3, 800b7f4 <_fstat_r+0x1c>
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000a64 	.word	0x20000a64

0800b7fc <_isatty_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	2300      	movs	r3, #0
 800b800:	4d05      	ldr	r5, [pc, #20]	@ (800b818 <_isatty_r+0x1c>)
 800b802:	4604      	mov	r4, r0
 800b804:	4608      	mov	r0, r1
 800b806:	602b      	str	r3, [r5, #0]
 800b808:	f7fb fcdd 	bl	80071c6 <_isatty>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_isatty_r+0x1a>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_isatty_r+0x1a>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	20000a64 	.word	0x20000a64

0800b81c <_malloc_usable_size_r>:
 800b81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b820:	1f18      	subs	r0, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	bfbc      	itt	lt
 800b826:	580b      	ldrlt	r3, [r1, r0]
 800b828:	18c0      	addlt	r0, r0, r3
 800b82a:	4770      	bx	lr

0800b82c <pow>:
 800b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b830:	4614      	mov	r4, r2
 800b832:	461d      	mov	r5, r3
 800b834:	4680      	mov	r8, r0
 800b836:	4689      	mov	r9, r1
 800b838:	f000 f8d2 	bl	800b9e0 <__ieee754_pow>
 800b83c:	4622      	mov	r2, r4
 800b83e:	4606      	mov	r6, r0
 800b840:	460f      	mov	r7, r1
 800b842:	462b      	mov	r3, r5
 800b844:	4620      	mov	r0, r4
 800b846:	4629      	mov	r1, r5
 800b848:	f7f5 f8fa 	bl	8000a40 <__aeabi_dcmpun>
 800b84c:	bbc8      	cbnz	r0, 800b8c2 <pow+0x96>
 800b84e:	2200      	movs	r2, #0
 800b850:	2300      	movs	r3, #0
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f5 f8c1 	bl	80009dc <__aeabi_dcmpeq>
 800b85a:	b1b8      	cbz	r0, 800b88c <pow+0x60>
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	4620      	mov	r0, r4
 800b862:	4629      	mov	r1, r5
 800b864:	f7f5 f8ba 	bl	80009dc <__aeabi_dcmpeq>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d141      	bne.n	800b8f0 <pow+0xc4>
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f000 f844 	bl	800b8fc <finite>
 800b874:	b328      	cbz	r0, 800b8c2 <pow+0x96>
 800b876:	2200      	movs	r2, #0
 800b878:	2300      	movs	r3, #0
 800b87a:	4620      	mov	r0, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7f5 f8b7 	bl	80009f0 <__aeabi_dcmplt>
 800b882:	b1f0      	cbz	r0, 800b8c2 <pow+0x96>
 800b884:	f7fd fbdc 	bl	8009040 <__errno>
 800b888:	2322      	movs	r3, #34	@ 0x22
 800b88a:	e019      	b.n	800b8c0 <pow+0x94>
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	f000 f834 	bl	800b8fc <finite>
 800b894:	b9c8      	cbnz	r0, 800b8ca <pow+0x9e>
 800b896:	4640      	mov	r0, r8
 800b898:	4649      	mov	r1, r9
 800b89a:	f000 f82f 	bl	800b8fc <finite>
 800b89e:	b1a0      	cbz	r0, 800b8ca <pow+0x9e>
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f000 f82a 	bl	800b8fc <finite>
 800b8a8:	b178      	cbz	r0, 800b8ca <pow+0x9e>
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	463b      	mov	r3, r7
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f5 f8c5 	bl	8000a40 <__aeabi_dcmpun>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d0e4      	beq.n	800b884 <pow+0x58>
 800b8ba:	f7fd fbc1 	bl	8009040 <__errno>
 800b8be:	2321      	movs	r3, #33	@ 0x21
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	4639      	mov	r1, r7
 800b8d2:	f7f5 f883 	bl	80009dc <__aeabi_dcmpeq>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d0f3      	beq.n	800b8c2 <pow+0x96>
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4649      	mov	r1, r9
 800b8de:	f000 f80d 	bl	800b8fc <finite>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0ed      	beq.n	800b8c2 <pow+0x96>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	f000 f807 	bl	800b8fc <finite>
 800b8ee:	e7c8      	b.n	800b882 <pow+0x56>
 800b8f0:	2600      	movs	r6, #0
 800b8f2:	4f01      	ldr	r7, [pc, #4]	@ (800b8f8 <pow+0xcc>)
 800b8f4:	e7e5      	b.n	800b8c2 <pow+0x96>
 800b8f6:	bf00      	nop
 800b8f8:	3ff00000 	.word	0x3ff00000

0800b8fc <finite>:
 800b8fc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b900:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b904:	0fc0      	lsrs	r0, r0, #31
 800b906:	4770      	bx	lr

0800b908 <round>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b90e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800b912:	2a13      	cmp	r2, #19
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	460b      	mov	r3, r1
 800b91a:	dc1a      	bgt.n	800b952 <round+0x4a>
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	da0b      	bge.n	800b938 <round+0x30>
 800b920:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b924:	3201      	adds	r2, #1
 800b926:	bf04      	itt	eq
 800b928:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b92c:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b930:	2200      	movs	r2, #0
 800b932:	461d      	mov	r5, r3
 800b934:	4614      	mov	r4, r2
 800b936:	e016      	b.n	800b966 <round+0x5e>
 800b938:	4815      	ldr	r0, [pc, #84]	@ (800b990 <round+0x88>)
 800b93a:	4110      	asrs	r0, r2
 800b93c:	4001      	ands	r1, r0
 800b93e:	4321      	orrs	r1, r4
 800b940:	d011      	beq.n	800b966 <round+0x5e>
 800b942:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b946:	fa41 f202 	asr.w	r2, r1, r2
 800b94a:	4413      	add	r3, r2
 800b94c:	ea23 0300 	bic.w	r3, r3, r0
 800b950:	e7ee      	b.n	800b930 <round+0x28>
 800b952:	2a33      	cmp	r2, #51	@ 0x33
 800b954:	dd0a      	ble.n	800b96c <round+0x64>
 800b956:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b95a:	d104      	bne.n	800b966 <round+0x5e>
 800b95c:	4602      	mov	r2, r0
 800b95e:	f7f4 fc1f 	bl	80001a0 <__adddf3>
 800b962:	4604      	mov	r4, r0
 800b964:	460d      	mov	r5, r1
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b974:	40f8      	lsrs	r0, r7
 800b976:	4220      	tst	r0, r4
 800b978:	d0f5      	beq.n	800b966 <round+0x5e>
 800b97a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b97e:	2201      	movs	r2, #1
 800b980:	408a      	lsls	r2, r1
 800b982:	1912      	adds	r2, r2, r4
 800b984:	bf28      	it	cs
 800b986:	3301      	addcs	r3, #1
 800b988:	ea22 0200 	bic.w	r2, r2, r0
 800b98c:	e7d1      	b.n	800b932 <round+0x2a>
 800b98e:	bf00      	nop
 800b990:	000fffff 	.word	0x000fffff

0800b994 <roundf>:
 800b994:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b998:	3b7f      	subs	r3, #127	@ 0x7f
 800b99a:	2b16      	cmp	r3, #22
 800b99c:	4601      	mov	r1, r0
 800b99e:	b510      	push	{r4, lr}
 800b9a0:	dc14      	bgt.n	800b9cc <roundf+0x38>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	da07      	bge.n	800b9b6 <roundf+0x22>
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800b9ac:	d101      	bne.n	800b9b2 <roundf+0x1e>
 800b9ae:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	4a08      	ldr	r2, [pc, #32]	@ (800b9d8 <roundf+0x44>)
 800b9b8:	411a      	asrs	r2, r3
 800b9ba:	4202      	tst	r2, r0
 800b9bc:	d0f9      	beq.n	800b9b2 <roundf+0x1e>
 800b9be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9c2:	4119      	asrs	r1, r3
 800b9c4:	4401      	add	r1, r0
 800b9c6:	ea21 0102 	bic.w	r1, r1, r2
 800b9ca:	e7f2      	b.n	800b9b2 <roundf+0x1e>
 800b9cc:	2b80      	cmp	r3, #128	@ 0x80
 800b9ce:	d1f0      	bne.n	800b9b2 <roundf+0x1e>
 800b9d0:	f7f5 f8c2 	bl	8000b58 <__addsf3>
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	e7ec      	b.n	800b9b2 <roundf+0x1e>
 800b9d8:	007fffff 	.word	0x007fffff
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <__ieee754_pow>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	b091      	sub	sp, #68	@ 0x44
 800b9e6:	e9cd 2300 	strd	r2, r3, [sp]
 800b9ea:	468b      	mov	fp, r1
 800b9ec:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b9f0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	ea57 0001 	orrs.w	r0, r7, r1
 800b9fa:	d112      	bne.n	800ba22 <__ieee754_pow+0x42>
 800b9fc:	4653      	mov	r3, sl
 800b9fe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ba02:	18db      	adds	r3, r3, r3
 800ba04:	4152      	adcs	r2, r2
 800ba06:	4298      	cmp	r0, r3
 800ba08:	4b91      	ldr	r3, [pc, #580]	@ (800bc50 <__ieee754_pow+0x270>)
 800ba0a:	4193      	sbcs	r3, r2
 800ba0c:	f080 84ce 	bcs.w	800c3ac <__ieee754_pow+0x9cc>
 800ba10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba14:	4650      	mov	r0, sl
 800ba16:	4659      	mov	r1, fp
 800ba18:	f7f4 fbc2 	bl	80001a0 <__adddf3>
 800ba1c:	b011      	add	sp, #68	@ 0x44
 800ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba22:	4b8c      	ldr	r3, [pc, #560]	@ (800bc54 <__ieee754_pow+0x274>)
 800ba24:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800ba28:	429e      	cmp	r6, r3
 800ba2a:	465d      	mov	r5, fp
 800ba2c:	46d1      	mov	r9, sl
 800ba2e:	d807      	bhi.n	800ba40 <__ieee754_pow+0x60>
 800ba30:	d102      	bne.n	800ba38 <__ieee754_pow+0x58>
 800ba32:	f1ba 0f00 	cmp.w	sl, #0
 800ba36:	d1eb      	bne.n	800ba10 <__ieee754_pow+0x30>
 800ba38:	429f      	cmp	r7, r3
 800ba3a:	d801      	bhi.n	800ba40 <__ieee754_pow+0x60>
 800ba3c:	d10f      	bne.n	800ba5e <__ieee754_pow+0x7e>
 800ba3e:	b171      	cbz	r1, 800ba5e <__ieee754_pow+0x7e>
 800ba40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ba44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ba48:	ea55 0509 	orrs.w	r5, r5, r9
 800ba4c:	d1e0      	bne.n	800ba10 <__ieee754_pow+0x30>
 800ba4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba52:	18db      	adds	r3, r3, r3
 800ba54:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ba58:	4152      	adcs	r2, r2
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	e7d4      	b.n	800ba08 <__ieee754_pow+0x28>
 800ba5e:	2d00      	cmp	r5, #0
 800ba60:	4633      	mov	r3, r6
 800ba62:	da39      	bge.n	800bad8 <__ieee754_pow+0xf8>
 800ba64:	4a7c      	ldr	r2, [pc, #496]	@ (800bc58 <__ieee754_pow+0x278>)
 800ba66:	4297      	cmp	r7, r2
 800ba68:	d84e      	bhi.n	800bb08 <__ieee754_pow+0x128>
 800ba6a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ba6e:	4297      	cmp	r7, r2
 800ba70:	f240 84ab 	bls.w	800c3ca <__ieee754_pow+0x9ea>
 800ba74:	153a      	asrs	r2, r7, #20
 800ba76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ba7a:	2a14      	cmp	r2, #20
 800ba7c:	dd0f      	ble.n	800ba9e <__ieee754_pow+0xbe>
 800ba7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ba82:	fa21 f402 	lsr.w	r4, r1, r2
 800ba86:	fa04 f202 	lsl.w	r2, r4, r2
 800ba8a:	428a      	cmp	r2, r1
 800ba8c:	f040 849d 	bne.w	800c3ca <__ieee754_pow+0x9ea>
 800ba90:	f004 0401 	and.w	r4, r4, #1
 800ba94:	f1c4 0402 	rsb	r4, r4, #2
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	d15a      	bne.n	800bb52 <__ieee754_pow+0x172>
 800ba9c:	e00e      	b.n	800babc <__ieee754_pow+0xdc>
 800ba9e:	2900      	cmp	r1, #0
 800baa0:	d156      	bne.n	800bb50 <__ieee754_pow+0x170>
 800baa2:	f1c2 0214 	rsb	r2, r2, #20
 800baa6:	fa47 f402 	asr.w	r4, r7, r2
 800baaa:	fa04 f202 	lsl.w	r2, r4, r2
 800baae:	42ba      	cmp	r2, r7
 800bab0:	f040 8488 	bne.w	800c3c4 <__ieee754_pow+0x9e4>
 800bab4:	f004 0401 	and.w	r4, r4, #1
 800bab8:	f1c4 0402 	rsb	r4, r4, #2
 800babc:	4a67      	ldr	r2, [pc, #412]	@ (800bc5c <__ieee754_pow+0x27c>)
 800babe:	4297      	cmp	r7, r2
 800bac0:	d130      	bne.n	800bb24 <__ieee754_pow+0x144>
 800bac2:	f1b8 0f00 	cmp.w	r8, #0
 800bac6:	f280 8479 	bge.w	800c3bc <__ieee754_pow+0x9dc>
 800baca:	4652      	mov	r2, sl
 800bacc:	465b      	mov	r3, fp
 800bace:	2000      	movs	r0, #0
 800bad0:	4962      	ldr	r1, [pc, #392]	@ (800bc5c <__ieee754_pow+0x27c>)
 800bad2:	f7f4 fe45 	bl	8000760 <__aeabi_ddiv>
 800bad6:	e7a1      	b.n	800ba1c <__ieee754_pow+0x3c>
 800bad8:	2400      	movs	r4, #0
 800bada:	2900      	cmp	r1, #0
 800badc:	d139      	bne.n	800bb52 <__ieee754_pow+0x172>
 800bade:	4a5d      	ldr	r2, [pc, #372]	@ (800bc54 <__ieee754_pow+0x274>)
 800bae0:	4297      	cmp	r7, r2
 800bae2:	d1eb      	bne.n	800babc <__ieee754_pow+0xdc>
 800bae4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800bae8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800baec:	ea53 0309 	orrs.w	r3, r3, r9
 800baf0:	f000 845c 	beq.w	800c3ac <__ieee754_pow+0x9cc>
 800baf4:	4b5a      	ldr	r3, [pc, #360]	@ (800bc60 <__ieee754_pow+0x280>)
 800baf6:	429e      	cmp	r6, r3
 800baf8:	d908      	bls.n	800bb0c <__ieee754_pow+0x12c>
 800bafa:	f1b8 0f00 	cmp.w	r8, #0
 800bafe:	f2c0 8459 	blt.w	800c3b4 <__ieee754_pow+0x9d4>
 800bb02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb06:	e789      	b.n	800ba1c <__ieee754_pow+0x3c>
 800bb08:	2402      	movs	r4, #2
 800bb0a:	e7e6      	b.n	800bada <__ieee754_pow+0xfa>
 800bb0c:	f1b8 0f00 	cmp.w	r8, #0
 800bb10:	f04f 0000 	mov.w	r0, #0
 800bb14:	f04f 0100 	mov.w	r1, #0
 800bb18:	da80      	bge.n	800ba1c <__ieee754_pow+0x3c>
 800bb1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb22:	e77b      	b.n	800ba1c <__ieee754_pow+0x3c>
 800bb24:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bb28:	d106      	bne.n	800bb38 <__ieee754_pow+0x158>
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	465b      	mov	r3, fp
 800bb2e:	4650      	mov	r0, sl
 800bb30:	4659      	mov	r1, fp
 800bb32:	f7f4 fceb 	bl	800050c <__aeabi_dmul>
 800bb36:	e771      	b.n	800ba1c <__ieee754_pow+0x3c>
 800bb38:	4a4a      	ldr	r2, [pc, #296]	@ (800bc64 <__ieee754_pow+0x284>)
 800bb3a:	4590      	cmp	r8, r2
 800bb3c:	d109      	bne.n	800bb52 <__ieee754_pow+0x172>
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	db07      	blt.n	800bb52 <__ieee754_pow+0x172>
 800bb42:	4650      	mov	r0, sl
 800bb44:	4659      	mov	r1, fp
 800bb46:	b011      	add	sp, #68	@ 0x44
 800bb48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	f000 bd12 	b.w	800c574 <__ieee754_sqrt>
 800bb50:	2400      	movs	r4, #0
 800bb52:	4650      	mov	r0, sl
 800bb54:	4659      	mov	r1, fp
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	f000 fc6a 	bl	800c430 <fabs>
 800bb5c:	9b02      	ldr	r3, [sp, #8]
 800bb5e:	f1b9 0f00 	cmp.w	r9, #0
 800bb62:	d127      	bne.n	800bbb4 <__ieee754_pow+0x1d4>
 800bb64:	4a3d      	ldr	r2, [pc, #244]	@ (800bc5c <__ieee754_pow+0x27c>)
 800bb66:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800bb6a:	4594      	cmp	ip, r2
 800bb6c:	d000      	beq.n	800bb70 <__ieee754_pow+0x190>
 800bb6e:	bb0e      	cbnz	r6, 800bbb4 <__ieee754_pow+0x1d4>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	da05      	bge.n	800bb82 <__ieee754_pow+0x1a2>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	4937      	ldr	r1, [pc, #220]	@ (800bc5c <__ieee754_pow+0x27c>)
 800bb7e:	f7f4 fdef 	bl	8000760 <__aeabi_ddiv>
 800bb82:	2d00      	cmp	r5, #0
 800bb84:	f6bf af4a 	bge.w	800ba1c <__ieee754_pow+0x3c>
 800bb88:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bb8c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bb90:	4326      	orrs	r6, r4
 800bb92:	d108      	bne.n	800bba6 <__ieee754_pow+0x1c6>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	f7f4 fafe 	bl	800019c <__aeabi_dsub>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	e795      	b.n	800bad2 <__ieee754_pow+0xf2>
 800bba6:	2c01      	cmp	r4, #1
 800bba8:	f47f af38 	bne.w	800ba1c <__ieee754_pow+0x3c>
 800bbac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	e733      	b.n	800ba1c <__ieee754_pow+0x3c>
 800bbb4:	0fea      	lsrs	r2, r5, #31
 800bbb6:	3a01      	subs	r2, #1
 800bbb8:	ea52 0c04 	orrs.w	ip, r2, r4
 800bbbc:	d102      	bne.n	800bbc4 <__ieee754_pow+0x1e4>
 800bbbe:	4652      	mov	r2, sl
 800bbc0:	465b      	mov	r3, fp
 800bbc2:	e7e9      	b.n	800bb98 <__ieee754_pow+0x1b8>
 800bbc4:	f04f 0900 	mov.w	r9, #0
 800bbc8:	3c01      	subs	r4, #1
 800bbca:	4314      	orrs	r4, r2
 800bbcc:	bf14      	ite	ne
 800bbce:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bc5c <__ieee754_pow+0x27c>
 800bbd2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bc68 <__ieee754_pow+0x288>
 800bbd6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bbda:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bbde:	f240 8107 	bls.w	800bdf0 <__ieee754_pow+0x410>
 800bbe2:	4b22      	ldr	r3, [pc, #136]	@ (800bc6c <__ieee754_pow+0x28c>)
 800bbe4:	429f      	cmp	r7, r3
 800bbe6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc60 <__ieee754_pow+0x280>)
 800bbe8:	d913      	bls.n	800bc12 <__ieee754_pow+0x232>
 800bbea:	429e      	cmp	r6, r3
 800bbec:	d808      	bhi.n	800bc00 <__ieee754_pow+0x220>
 800bbee:	f1b8 0f00 	cmp.w	r8, #0
 800bbf2:	da08      	bge.n	800bc06 <__ieee754_pow+0x226>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	b011      	add	sp, #68	@ 0x44
 800bbf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	f000 bcb4 	b.w	800c568 <__math_oflow>
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	dcf6      	bgt.n	800bbf4 <__ieee754_pow+0x214>
 800bc06:	2000      	movs	r0, #0
 800bc08:	b011      	add	sp, #68	@ 0x44
 800bc0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0e:	f000 bca6 	b.w	800c55e <__math_uflow>
 800bc12:	429e      	cmp	r6, r3
 800bc14:	d20c      	bcs.n	800bc30 <__ieee754_pow+0x250>
 800bc16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f7f4 fee7 	bl	80009f0 <__aeabi_dcmplt>
 800bc22:	3800      	subs	r0, #0
 800bc24:	bf18      	it	ne
 800bc26:	2001      	movne	r0, #1
 800bc28:	f1b8 0f00 	cmp.w	r8, #0
 800bc2c:	daec      	bge.n	800bc08 <__ieee754_pow+0x228>
 800bc2e:	e7e2      	b.n	800bbf6 <__ieee754_pow+0x216>
 800bc30:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <__ieee754_pow+0x27c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	429e      	cmp	r6, r3
 800bc36:	d91b      	bls.n	800bc70 <__ieee754_pow+0x290>
 800bc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f7f4 fed7 	bl	80009f0 <__aeabi_dcmplt>
 800bc42:	3800      	subs	r0, #0
 800bc44:	bf18      	it	ne
 800bc46:	2001      	movne	r0, #1
 800bc48:	f1b8 0f00 	cmp.w	r8, #0
 800bc4c:	dcd3      	bgt.n	800bbf6 <__ieee754_pow+0x216>
 800bc4e:	e7db      	b.n	800bc08 <__ieee754_pow+0x228>
 800bc50:	fff00000 	.word	0xfff00000
 800bc54:	7ff00000 	.word	0x7ff00000
 800bc58:	433fffff 	.word	0x433fffff
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	3fefffff 	.word	0x3fefffff
 800bc64:	3fe00000 	.word	0x3fe00000
 800bc68:	bff00000 	.word	0xbff00000
 800bc6c:	43f00000 	.word	0x43f00000
 800bc70:	4b5b      	ldr	r3, [pc, #364]	@ (800bde0 <__ieee754_pow+0x400>)
 800bc72:	f7f4 fa93 	bl	800019c <__aeabi_dsub>
 800bc76:	a352      	add	r3, pc, #328	@ (adr r3, 800bdc0 <__ieee754_pow+0x3e0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	f7f4 fc44 	bl	800050c <__aeabi_dmul>
 800bc84:	a350      	add	r3, pc, #320	@ (adr r3, 800bdc8 <__ieee754_pow+0x3e8>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 fc3b 	bl	800050c <__aeabi_dmul>
 800bc96:	2200      	movs	r2, #0
 800bc98:	4682      	mov	sl, r0
 800bc9a:	468b      	mov	fp, r1
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4b50      	ldr	r3, [pc, #320]	@ (800bde4 <__ieee754_pow+0x404>)
 800bca2:	f7f4 fc33 	bl	800050c <__aeabi_dmul>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	a149      	add	r1, pc, #292	@ (adr r1, 800bdd0 <__ieee754_pow+0x3f0>)
 800bcac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb0:	f7f4 fa74 	bl	800019c <__aeabi_dsub>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	462b      	mov	r3, r5
 800bcb8:	f7f4 fc28 	bl	800050c <__aeabi_dmul>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	4949      	ldr	r1, [pc, #292]	@ (800bde8 <__ieee754_pow+0x408>)
 800bcc4:	f7f4 fa6a 	bl	800019c <__aeabi_dsub>
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4680      	mov	r8, r0
 800bccc:	4689      	mov	r9, r1
 800bcce:	462b      	mov	r3, r5
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fc1a 	bl	800050c <__aeabi_dmul>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4640      	mov	r0, r8
 800bcde:	4649      	mov	r1, r9
 800bce0:	f7f4 fc14 	bl	800050c <__aeabi_dmul>
 800bce4:	a33c      	add	r3, pc, #240	@ (adr r3, 800bdd8 <__ieee754_pow+0x3f8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fc0f 	bl	800050c <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	f7f4 fa51 	bl	800019c <__aeabi_dsub>
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4680      	mov	r8, r0
 800bd02:	4689      	mov	r9, r1
 800bd04:	4630      	mov	r0, r6
 800bd06:	4639      	mov	r1, r7
 800bd08:	f7f4 fa4a 	bl	80001a0 <__adddf3>
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	4620      	mov	r0, r4
 800bd12:	460d      	mov	r5, r1
 800bd14:	f7f4 fa42 	bl	800019c <__aeabi_dsub>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4649      	mov	r1, r9
 800bd20:	f7f4 fa3c 	bl	800019c <__aeabi_dsub>
 800bd24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9304      	str	r3, [sp, #16]
 800bd30:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bd34:	4606      	mov	r6, r0
 800bd36:	460f      	mov	r7, r1
 800bd38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 fa2c 	bl	800019c <__aeabi_dsub>
 800bd44:	4622      	mov	r2, r4
 800bd46:	462b      	mov	r3, r5
 800bd48:	f7f4 fbe0 	bl	800050c <__aeabi_dmul>
 800bd4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd50:	4680      	mov	r8, r0
 800bd52:	4689      	mov	r9, r1
 800bd54:	4630      	mov	r0, r6
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 fbd8 	bl	800050c <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4640      	mov	r0, r8
 800bd62:	4649      	mov	r1, r9
 800bd64:	f7f4 fa1c 	bl	80001a0 <__adddf3>
 800bd68:	4652      	mov	r2, sl
 800bd6a:	465b      	mov	r3, fp
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f7f4 fbca 	bl	800050c <__aeabi_dmul>
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fa0c 	bl	80001a0 <__adddf3>
 800bd88:	4b18      	ldr	r3, [pc, #96]	@ (800bdec <__ieee754_pow+0x40c>)
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4299      	cmp	r1, r3
 800bd8e:	460d      	mov	r5, r1
 800bd90:	468a      	mov	sl, r1
 800bd92:	468b      	mov	fp, r1
 800bd94:	f340 82e0 	ble.w	800c358 <__ieee754_pow+0x978>
 800bd98:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bd9c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bda0:	4303      	orrs	r3, r0
 800bda2:	f000 81df 	beq.w	800c164 <__ieee754_pow+0x784>
 800bda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2300      	movs	r3, #0
 800bdae:	f7f4 fe1f 	bl	80009f0 <__aeabi_dcmplt>
 800bdb2:	3800      	subs	r0, #0
 800bdb4:	bf18      	it	ne
 800bdb6:	2001      	movne	r0, #1
 800bdb8:	e71d      	b.n	800bbf6 <__ieee754_pow+0x216>
 800bdba:	bf00      	nop
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	60000000 	.word	0x60000000
 800bdc4:	3ff71547 	.word	0x3ff71547
 800bdc8:	f85ddf44 	.word	0xf85ddf44
 800bdcc:	3e54ae0b 	.word	0x3e54ae0b
 800bdd0:	55555555 	.word	0x55555555
 800bdd4:	3fd55555 	.word	0x3fd55555
 800bdd8:	652b82fe 	.word	0x652b82fe
 800bddc:	3ff71547 	.word	0x3ff71547
 800bde0:	3ff00000 	.word	0x3ff00000
 800bde4:	3fd00000 	.word	0x3fd00000
 800bde8:	3fe00000 	.word	0x3fe00000
 800bdec:	408fffff 	.word	0x408fffff
 800bdf0:	4ad3      	ldr	r2, [pc, #844]	@ (800c140 <__ieee754_pow+0x760>)
 800bdf2:	402a      	ands	r2, r5
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	f040 817a 	bne.w	800c0ee <__ieee754_pow+0x70e>
 800bdfa:	4bd2      	ldr	r3, [pc, #840]	@ (800c144 <__ieee754_pow+0x764>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f7f4 fb85 	bl	800050c <__aeabi_dmul>
 800be02:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800be06:	460b      	mov	r3, r1
 800be08:	151a      	asrs	r2, r3, #20
 800be0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be0e:	4422      	add	r2, r4
 800be10:	920a      	str	r2, [sp, #40]	@ 0x28
 800be12:	4acd      	ldr	r2, [pc, #820]	@ (800c148 <__ieee754_pow+0x768>)
 800be14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be18:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800be1c:	4293      	cmp	r3, r2
 800be1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be22:	dd08      	ble.n	800be36 <__ieee754_pow+0x456>
 800be24:	4ac9      	ldr	r2, [pc, #804]	@ (800c14c <__ieee754_pow+0x76c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	f340 8163 	ble.w	800c0f2 <__ieee754_pow+0x712>
 800be2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be2e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800be32:	3301      	adds	r3, #1
 800be34:	930a      	str	r3, [sp, #40]	@ 0x28
 800be36:	2600      	movs	r6, #0
 800be38:	00f3      	lsls	r3, r6, #3
 800be3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be3c:	4bc4      	ldr	r3, [pc, #784]	@ (800c150 <__ieee754_pow+0x770>)
 800be3e:	4629      	mov	r1, r5
 800be40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be44:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be48:	461a      	mov	r2, r3
 800be4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800be4e:	4623      	mov	r3, r4
 800be50:	4682      	mov	sl, r0
 800be52:	f7f4 f9a3 	bl	800019c <__aeabi_dsub>
 800be56:	4652      	mov	r2, sl
 800be58:	462b      	mov	r3, r5
 800be5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800be5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be62:	f7f4 f99d 	bl	80001a0 <__adddf3>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	2000      	movs	r0, #0
 800be6c:	49b9      	ldr	r1, [pc, #740]	@ (800c154 <__ieee754_pow+0x774>)
 800be6e:	f7f4 fc77 	bl	8000760 <__aeabi_ddiv>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be7e:	f7f4 fb45 	bl	800050c <__aeabi_dmul>
 800be82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800be8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be8e:	2300      	movs	r3, #0
 800be90:	2200      	movs	r2, #0
 800be92:	46ab      	mov	fp, r5
 800be94:	106d      	asrs	r5, r5, #1
 800be96:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bea0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bea4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	4614      	mov	r4, r2
 800beae:	461d      	mov	r5, r3
 800beb0:	f7f4 fb2c 	bl	800050c <__aeabi_dmul>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bebc:	f7f4 f96e 	bl	800019c <__aeabi_dsub>
 800bec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bec4:	4606      	mov	r6, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f966 	bl	800019c <__aeabi_dsub>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4650      	mov	r0, sl
 800bed6:	4659      	mov	r1, fp
 800bed8:	f7f4 f960 	bl	800019c <__aeabi_dsub>
 800bedc:	4642      	mov	r2, r8
 800bede:	464b      	mov	r3, r9
 800bee0:	f7f4 fb14 	bl	800050c <__aeabi_dmul>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 f956 	bl	800019c <__aeabi_dsub>
 800bef0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bef4:	f7f4 fb0a 	bl	800050c <__aeabi_dmul>
 800bef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800befc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf00:	4610      	mov	r0, r2
 800bf02:	4619      	mov	r1, r3
 800bf04:	f7f4 fb02 	bl	800050c <__aeabi_dmul>
 800bf08:	a37b      	add	r3, pc, #492	@ (adr r3, 800c0f8 <__ieee754_pow+0x718>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	f7f4 fafb 	bl	800050c <__aeabi_dmul>
 800bf16:	a37a      	add	r3, pc, #488	@ (adr r3, 800c100 <__ieee754_pow+0x720>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 f940 	bl	80001a0 <__adddf3>
 800bf20:	4622      	mov	r2, r4
 800bf22:	462b      	mov	r3, r5
 800bf24:	f7f4 faf2 	bl	800050c <__aeabi_dmul>
 800bf28:	a377      	add	r3, pc, #476	@ (adr r3, 800c108 <__ieee754_pow+0x728>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 f937 	bl	80001a0 <__adddf3>
 800bf32:	4622      	mov	r2, r4
 800bf34:	462b      	mov	r3, r5
 800bf36:	f7f4 fae9 	bl	800050c <__aeabi_dmul>
 800bf3a:	a375      	add	r3, pc, #468	@ (adr r3, 800c110 <__ieee754_pow+0x730>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 f92e 	bl	80001a0 <__adddf3>
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	f7f4 fae0 	bl	800050c <__aeabi_dmul>
 800bf4c:	a372      	add	r3, pc, #456	@ (adr r3, 800c118 <__ieee754_pow+0x738>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 f925 	bl	80001a0 <__adddf3>
 800bf56:	4622      	mov	r2, r4
 800bf58:	462b      	mov	r3, r5
 800bf5a:	f7f4 fad7 	bl	800050c <__aeabi_dmul>
 800bf5e:	a370      	add	r3, pc, #448	@ (adr r3, 800c120 <__ieee754_pow+0x740>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7f4 f91c 	bl	80001a0 <__adddf3>
 800bf68:	4622      	mov	r2, r4
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	460f      	mov	r7, r1
 800bf6e:	462b      	mov	r3, r5
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 faca 	bl	800050c <__aeabi_dmul>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f7f4 fac4 	bl	800050c <__aeabi_dmul>
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	464b      	mov	r3, r9
 800bf90:	f7f4 f906 	bl	80001a0 <__adddf3>
 800bf94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf98:	f7f4 fab8 	bl	800050c <__aeabi_dmul>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	f7f4 f8fe 	bl	80001a0 <__adddf3>
 800bfa4:	4642      	mov	r2, r8
 800bfa6:	4682      	mov	sl, r0
 800bfa8:	468b      	mov	fp, r1
 800bfaa:	464b      	mov	r3, r9
 800bfac:	4640      	mov	r0, r8
 800bfae:	4649      	mov	r1, r9
 800bfb0:	f7f4 faac 	bl	800050c <__aeabi_dmul>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4b68      	ldr	r3, [pc, #416]	@ (800c158 <__ieee754_pow+0x778>)
 800bfb8:	4606      	mov	r6, r0
 800bfba:	460f      	mov	r7, r1
 800bfbc:	f7f4 f8f0 	bl	80001a0 <__adddf3>
 800bfc0:	4652      	mov	r2, sl
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	f7f4 f8ec 	bl	80001a0 <__adddf3>
 800bfc8:	2400      	movs	r4, #0
 800bfca:	460d      	mov	r5, r1
 800bfcc:	4622      	mov	r2, r4
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	f7f4 fa9a 	bl	800050c <__aeabi_dmul>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	4680      	mov	r8, r0
 800bfdc:	4689      	mov	r9, r1
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4b5d      	ldr	r3, [pc, #372]	@ (800c158 <__ieee754_pow+0x778>)
 800bfe4:	f7f4 f8da 	bl	800019c <__aeabi_dsub>
 800bfe8:	4632      	mov	r2, r6
 800bfea:	463b      	mov	r3, r7
 800bfec:	f7f4 f8d6 	bl	800019c <__aeabi_dsub>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4650      	mov	r0, sl
 800bff6:	4659      	mov	r1, fp
 800bff8:	f7f4 f8d0 	bl	800019c <__aeabi_dsub>
 800bffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c000:	f7f4 fa84 	bl	800050c <__aeabi_dmul>
 800c004:	4622      	mov	r2, r4
 800c006:	4606      	mov	r6, r0
 800c008:	460f      	mov	r7, r1
 800c00a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c00e:	462b      	mov	r3, r5
 800c010:	f7f4 fa7c 	bl	800050c <__aeabi_dmul>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4630      	mov	r0, r6
 800c01a:	4639      	mov	r1, r7
 800c01c:	f7f4 f8c0 	bl	80001a0 <__adddf3>
 800c020:	2400      	movs	r4, #0
 800c022:	4606      	mov	r6, r0
 800c024:	460f      	mov	r7, r1
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4640      	mov	r0, r8
 800c02c:	4649      	mov	r1, r9
 800c02e:	f7f4 f8b7 	bl	80001a0 <__adddf3>
 800c032:	a33d      	add	r3, pc, #244	@ (adr r3, 800c128 <__ieee754_pow+0x748>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	4620      	mov	r0, r4
 800c03a:	460d      	mov	r5, r1
 800c03c:	f7f4 fa66 	bl	800050c <__aeabi_dmul>
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c048:	4620      	mov	r0, r4
 800c04a:	4629      	mov	r1, r5
 800c04c:	f7f4 f8a6 	bl	800019c <__aeabi_dsub>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 f8a0 	bl	800019c <__aeabi_dsub>
 800c05c:	a334      	add	r3, pc, #208	@ (adr r3, 800c130 <__ieee754_pow+0x750>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 fa53 	bl	800050c <__aeabi_dmul>
 800c066:	a334      	add	r3, pc, #208	@ (adr r3, 800c138 <__ieee754_pow+0x758>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	4606      	mov	r6, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 fa4a 	bl	800050c <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4630      	mov	r0, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	f7f4 f88e 	bl	80001a0 <__adddf3>
 800c084:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c086:	4b35      	ldr	r3, [pc, #212]	@ (800c15c <__ieee754_pow+0x77c>)
 800c088:	2400      	movs	r4, #0
 800c08a:	4413      	add	r3, r2
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 f886 	bl	80001a0 <__adddf3>
 800c094:	4682      	mov	sl, r0
 800c096:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c098:	468b      	mov	fp, r1
 800c09a:	f7f4 f9cd 	bl	8000438 <__aeabi_i2d>
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c160 <__ieee754_pow+0x780>)
 800c0a6:	4413      	add	r3, r2
 800c0a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0ac:	4652      	mov	r2, sl
 800c0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0b2:	465b      	mov	r3, fp
 800c0b4:	f7f4 f874 	bl	80001a0 <__adddf3>
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	f7f4 f870 	bl	80001a0 <__adddf3>
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	463b      	mov	r3, r7
 800c0c4:	f7f4 f86c 	bl	80001a0 <__adddf3>
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	463b      	mov	r3, r7
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	460d      	mov	r5, r1
 800c0d0:	f7f4 f864 	bl	800019c <__aeabi_dsub>
 800c0d4:	4642      	mov	r2, r8
 800c0d6:	464b      	mov	r3, r9
 800c0d8:	f7f4 f860 	bl	800019c <__aeabi_dsub>
 800c0dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0e0:	f7f4 f85c 	bl	800019c <__aeabi_dsub>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	4659      	mov	r1, fp
 800c0ec:	e618      	b.n	800bd20 <__ieee754_pow+0x340>
 800c0ee:	2400      	movs	r4, #0
 800c0f0:	e68a      	b.n	800be08 <__ieee754_pow+0x428>
 800c0f2:	2601      	movs	r6, #1
 800c0f4:	e6a0      	b.n	800be38 <__ieee754_pow+0x458>
 800c0f6:	bf00      	nop
 800c0f8:	4a454eef 	.word	0x4a454eef
 800c0fc:	3fca7e28 	.word	0x3fca7e28
 800c100:	93c9db65 	.word	0x93c9db65
 800c104:	3fcd864a 	.word	0x3fcd864a
 800c108:	a91d4101 	.word	0xa91d4101
 800c10c:	3fd17460 	.word	0x3fd17460
 800c110:	518f264d 	.word	0x518f264d
 800c114:	3fd55555 	.word	0x3fd55555
 800c118:	db6fabff 	.word	0xdb6fabff
 800c11c:	3fdb6db6 	.word	0x3fdb6db6
 800c120:	33333303 	.word	0x33333303
 800c124:	3fe33333 	.word	0x3fe33333
 800c128:	e0000000 	.word	0xe0000000
 800c12c:	3feec709 	.word	0x3feec709
 800c130:	dc3a03fd 	.word	0xdc3a03fd
 800c134:	3feec709 	.word	0x3feec709
 800c138:	145b01f5 	.word	0x145b01f5
 800c13c:	be3e2fe0 	.word	0xbe3e2fe0
 800c140:	7ff00000 	.word	0x7ff00000
 800c144:	43400000 	.word	0x43400000
 800c148:	0003988e 	.word	0x0003988e
 800c14c:	000bb679 	.word	0x000bb679
 800c150:	0800cdb0 	.word	0x0800cdb0
 800c154:	3ff00000 	.word	0x3ff00000
 800c158:	40080000 	.word	0x40080000
 800c15c:	0800cd90 	.word	0x0800cd90
 800c160:	0800cda0 	.word	0x0800cda0
 800c164:	a39a      	add	r3, pc, #616	@ (adr r3, 800c3d0 <__ieee754_pow+0x9f0>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	4630      	mov	r0, r6
 800c16c:	4639      	mov	r1, r7
 800c16e:	f7f4 f817 	bl	80001a0 <__adddf3>
 800c172:	4642      	mov	r2, r8
 800c174:	e9cd 0100 	strd	r0, r1, [sp]
 800c178:	464b      	mov	r3, r9
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	f7f4 f80d 	bl	800019c <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c18a:	f7f4 fc4f 	bl	8000a2c <__aeabi_dcmpgt>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f47f ae09 	bne.w	800bda6 <__ieee754_pow+0x3c6>
 800c194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c198:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c19c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c1a0:	fa43 fa0a 	asr.w	sl, r3, sl
 800c1a4:	44da      	add	sl, fp
 800c1a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c1aa:	489b      	ldr	r0, [pc, #620]	@ (800c418 <__ieee754_pow+0xa38>)
 800c1ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c1b0:	4108      	asrs	r0, r1
 800c1b2:	ea00 030a 	and.w	r3, r0, sl
 800c1b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c1ba:	f1c1 0114 	rsb	r1, r1, #20
 800c1be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	fa4a fa01 	asr.w	sl, sl, r1
 800c1c8:	f1bb 0f00 	cmp.w	fp, #0
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	bfb8      	it	lt
 800c1d4:	f1ca 0a00 	rsblt	sl, sl, #0
 800c1d8:	f7f3 ffe0 	bl	800019c <__aeabi_dsub>
 800c1dc:	4680      	mov	r8, r0
 800c1de:	4689      	mov	r9, r1
 800c1e0:	2400      	movs	r4, #0
 800c1e2:	4632      	mov	r2, r6
 800c1e4:	463b      	mov	r3, r7
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	f7f3 ffd9 	bl	80001a0 <__adddf3>
 800c1ee:	a37a      	add	r3, pc, #488	@ (adr r3, 800c3d8 <__ieee754_pow+0x9f8>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	f7f4 f988 	bl	800050c <__aeabi_dmul>
 800c1fc:	4642      	mov	r2, r8
 800c1fe:	464b      	mov	r3, r9
 800c200:	e9cd 0100 	strd	r0, r1, [sp]
 800c204:	4620      	mov	r0, r4
 800c206:	4629      	mov	r1, r5
 800c208:	f7f3 ffc8 	bl	800019c <__aeabi_dsub>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f3 ffc2 	bl	800019c <__aeabi_dsub>
 800c218:	a371      	add	r3, pc, #452	@ (adr r3, 800c3e0 <__ieee754_pow+0xa00>)
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	f7f4 f975 	bl	800050c <__aeabi_dmul>
 800c222:	a371      	add	r3, pc, #452	@ (adr r3, 800c3e8 <__ieee754_pow+0xa08>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	4680      	mov	r8, r0
 800c22a:	4689      	mov	r9, r1
 800c22c:	4620      	mov	r0, r4
 800c22e:	4629      	mov	r1, r5
 800c230:	f7f4 f96c 	bl	800050c <__aeabi_dmul>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4640      	mov	r0, r8
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7f3 ffb0 	bl	80001a0 <__adddf3>
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c24c:	f7f3 ffa8 	bl	80001a0 <__adddf3>
 800c250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c254:	4680      	mov	r8, r0
 800c256:	4689      	mov	r9, r1
 800c258:	f7f3 ffa0 	bl	800019c <__aeabi_dsub>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4620      	mov	r0, r4
 800c262:	4629      	mov	r1, r5
 800c264:	f7f3 ff9a 	bl	800019c <__aeabi_dsub>
 800c268:	4642      	mov	r2, r8
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	464b      	mov	r3, r9
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 f94a 	bl	800050c <__aeabi_dmul>
 800c278:	a35d      	add	r3, pc, #372	@ (adr r3, 800c3f0 <__ieee754_pow+0xa10>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	4604      	mov	r4, r0
 800c280:	460d      	mov	r5, r1
 800c282:	f7f4 f943 	bl	800050c <__aeabi_dmul>
 800c286:	a35c      	add	r3, pc, #368	@ (adr r3, 800c3f8 <__ieee754_pow+0xa18>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f3 ff86 	bl	800019c <__aeabi_dsub>
 800c290:	4622      	mov	r2, r4
 800c292:	462b      	mov	r3, r5
 800c294:	f7f4 f93a 	bl	800050c <__aeabi_dmul>
 800c298:	a359      	add	r3, pc, #356	@ (adr r3, 800c400 <__ieee754_pow+0xa20>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f3 ff7f 	bl	80001a0 <__adddf3>
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	f7f4 f931 	bl	800050c <__aeabi_dmul>
 800c2aa:	a357      	add	r3, pc, #348	@ (adr r3, 800c408 <__ieee754_pow+0xa28>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f3 ff74 	bl	800019c <__aeabi_dsub>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f4 f928 	bl	800050c <__aeabi_dmul>
 800c2bc:	a354      	add	r3, pc, #336	@ (adr r3, 800c410 <__ieee754_pow+0xa30>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 ff6d 	bl	80001a0 <__adddf3>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	f7f4 f91f 	bl	800050c <__aeabi_dmul>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f7f3 ff61 	bl	800019c <__aeabi_dsub>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	460d      	mov	r5, r1
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	f7f4 f911 	bl	800050c <__aeabi_dmul>
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c2f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f3 ff50 	bl	800019c <__aeabi_dsub>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c304:	f7f4 fa2c 	bl	8000760 <__aeabi_ddiv>
 800c308:	4632      	mov	r2, r6
 800c30a:	4604      	mov	r4, r0
 800c30c:	460d      	mov	r5, r1
 800c30e:	463b      	mov	r3, r7
 800c310:	4640      	mov	r0, r8
 800c312:	4649      	mov	r1, r9
 800c314:	f7f4 f8fa 	bl	800050c <__aeabi_dmul>
 800c318:	4632      	mov	r2, r6
 800c31a:	463b      	mov	r3, r7
 800c31c:	f7f3 ff40 	bl	80001a0 <__adddf3>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4620      	mov	r0, r4
 800c326:	4629      	mov	r1, r5
 800c328:	f7f3 ff38 	bl	800019c <__aeabi_dsub>
 800c32c:	4642      	mov	r2, r8
 800c32e:	464b      	mov	r3, r9
 800c330:	f7f3 ff34 	bl	800019c <__aeabi_dsub>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	2000      	movs	r0, #0
 800c33a:	4938      	ldr	r1, [pc, #224]	@ (800c41c <__ieee754_pow+0xa3c>)
 800c33c:	f7f3 ff2e 	bl	800019c <__aeabi_dsub>
 800c340:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c344:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c348:	da2e      	bge.n	800c3a8 <__ieee754_pow+0x9c8>
 800c34a:	4652      	mov	r2, sl
 800c34c:	f000 f874 	bl	800c438 <scalbn>
 800c350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c354:	f7ff bbed 	b.w	800bb32 <__ieee754_pow+0x152>
 800c358:	4c31      	ldr	r4, [pc, #196]	@ (800c420 <__ieee754_pow+0xa40>)
 800c35a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c35e:	42a3      	cmp	r3, r4
 800c360:	d91a      	bls.n	800c398 <__ieee754_pow+0x9b8>
 800c362:	4b30      	ldr	r3, [pc, #192]	@ (800c424 <__ieee754_pow+0xa44>)
 800c364:	440b      	add	r3, r1
 800c366:	4303      	orrs	r3, r0
 800c368:	d009      	beq.n	800c37e <__ieee754_pow+0x99e>
 800c36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	2300      	movs	r3, #0
 800c372:	f7f4 fb3d 	bl	80009f0 <__aeabi_dcmplt>
 800c376:	3800      	subs	r0, #0
 800c378:	bf18      	it	ne
 800c37a:	2001      	movne	r0, #1
 800c37c:	e444      	b.n	800bc08 <__ieee754_pow+0x228>
 800c37e:	4642      	mov	r2, r8
 800c380:	464b      	mov	r3, r9
 800c382:	f7f3 ff0b 	bl	800019c <__aeabi_dsub>
 800c386:	4632      	mov	r2, r6
 800c388:	463b      	mov	r3, r7
 800c38a:	f7f4 fb45 	bl	8000a18 <__aeabi_dcmpge>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d1eb      	bne.n	800c36a <__ieee754_pow+0x98a>
 800c392:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800c428 <__ieee754_pow+0xa48>
 800c396:	e6fd      	b.n	800c194 <__ieee754_pow+0x7b4>
 800c398:	469a      	mov	sl, r3
 800c39a:	4b24      	ldr	r3, [pc, #144]	@ (800c42c <__ieee754_pow+0xa4c>)
 800c39c:	459a      	cmp	sl, r3
 800c39e:	f63f aef9 	bhi.w	800c194 <__ieee754_pow+0x7b4>
 800c3a2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c3a6:	e71b      	b.n	800c1e0 <__ieee754_pow+0x800>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	e7d1      	b.n	800c350 <__ieee754_pow+0x970>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	491b      	ldr	r1, [pc, #108]	@ (800c41c <__ieee754_pow+0xa3c>)
 800c3b0:	f7ff bb34 	b.w	800ba1c <__ieee754_pow+0x3c>
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	f7ff bb30 	b.w	800ba1c <__ieee754_pow+0x3c>
 800c3bc:	4650      	mov	r0, sl
 800c3be:	4659      	mov	r1, fp
 800c3c0:	f7ff bb2c 	b.w	800ba1c <__ieee754_pow+0x3c>
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	f7ff bb79 	b.w	800babc <__ieee754_pow+0xdc>
 800c3ca:	2400      	movs	r4, #0
 800c3cc:	f7ff bb64 	b.w	800ba98 <__ieee754_pow+0xb8>
 800c3d0:	652b82fe 	.word	0x652b82fe
 800c3d4:	3c971547 	.word	0x3c971547
 800c3d8:	00000000 	.word	0x00000000
 800c3dc:	3fe62e43 	.word	0x3fe62e43
 800c3e0:	fefa39ef 	.word	0xfefa39ef
 800c3e4:	3fe62e42 	.word	0x3fe62e42
 800c3e8:	0ca86c39 	.word	0x0ca86c39
 800c3ec:	be205c61 	.word	0xbe205c61
 800c3f0:	72bea4d0 	.word	0x72bea4d0
 800c3f4:	3e663769 	.word	0x3e663769
 800c3f8:	c5d26bf1 	.word	0xc5d26bf1
 800c3fc:	3ebbbd41 	.word	0x3ebbbd41
 800c400:	af25de2c 	.word	0xaf25de2c
 800c404:	3f11566a 	.word	0x3f11566a
 800c408:	16bebd93 	.word	0x16bebd93
 800c40c:	3f66c16c 	.word	0x3f66c16c
 800c410:	5555553e 	.word	0x5555553e
 800c414:	3fc55555 	.word	0x3fc55555
 800c418:	fff00000 	.word	0xfff00000
 800c41c:	3ff00000 	.word	0x3ff00000
 800c420:	4090cbff 	.word	0x4090cbff
 800c424:	3f6f3400 	.word	0x3f6f3400
 800c428:	4090cc00 	.word	0x4090cc00
 800c42c:	3fe00000 	.word	0x3fe00000

0800c430 <fabs>:
 800c430:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c434:	4619      	mov	r1, r3
 800c436:	4770      	bx	lr

0800c438 <scalbn>:
 800c438:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c43c:	4616      	mov	r6, r2
 800c43e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c442:	4683      	mov	fp, r0
 800c444:	468c      	mov	ip, r1
 800c446:	460b      	mov	r3, r1
 800c448:	b982      	cbnz	r2, 800c46c <scalbn+0x34>
 800c44a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c44e:	4303      	orrs	r3, r0
 800c450:	d039      	beq.n	800c4c6 <scalbn+0x8e>
 800c452:	4b2f      	ldr	r3, [pc, #188]	@ (800c510 <scalbn+0xd8>)
 800c454:	2200      	movs	r2, #0
 800c456:	f7f4 f859 	bl	800050c <__aeabi_dmul>
 800c45a:	4b2e      	ldr	r3, [pc, #184]	@ (800c514 <scalbn+0xdc>)
 800c45c:	4683      	mov	fp, r0
 800c45e:	429e      	cmp	r6, r3
 800c460:	468c      	mov	ip, r1
 800c462:	da0d      	bge.n	800c480 <scalbn+0x48>
 800c464:	a326      	add	r3, pc, #152	@ (adr r3, 800c500 <scalbn+0xc8>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	e01b      	b.n	800c4a4 <scalbn+0x6c>
 800c46c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c470:	42ba      	cmp	r2, r7
 800c472:	d109      	bne.n	800c488 <scalbn+0x50>
 800c474:	4602      	mov	r2, r0
 800c476:	f7f3 fe93 	bl	80001a0 <__adddf3>
 800c47a:	4683      	mov	fp, r0
 800c47c:	468c      	mov	ip, r1
 800c47e:	e022      	b.n	800c4c6 <scalbn+0x8e>
 800c480:	460b      	mov	r3, r1
 800c482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c486:	3a36      	subs	r2, #54	@ 0x36
 800c488:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c48c:	428e      	cmp	r6, r1
 800c48e:	dd0c      	ble.n	800c4aa <scalbn+0x72>
 800c490:	a31d      	add	r3, pc, #116	@ (adr r3, 800c508 <scalbn+0xd0>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	461c      	mov	r4, r3
 800c498:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c49c:	f361 74df 	bfi	r4, r1, #31, #1
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	481d      	ldr	r0, [pc, #116]	@ (800c518 <scalbn+0xe0>)
 800c4a4:	f7f4 f832 	bl	800050c <__aeabi_dmul>
 800c4a8:	e7e7      	b.n	800c47a <scalbn+0x42>
 800c4aa:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c4ae:	4432      	add	r2, r6
 800c4b0:	428a      	cmp	r2, r1
 800c4b2:	dced      	bgt.n	800c490 <scalbn+0x58>
 800c4b4:	2a00      	cmp	r2, #0
 800c4b6:	dd0a      	ble.n	800c4ce <scalbn+0x96>
 800c4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4c4:	46ac      	mov	ip, r5
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	4661      	mov	r1, ip
 800c4ca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c4ce:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c4d2:	da09      	bge.n	800c4e8 <scalbn+0xb0>
 800c4d4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c4d8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c4dc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c4e0:	480e      	ldr	r0, [pc, #56]	@ (800c51c <scalbn+0xe4>)
 800c4e2:	f041 011f 	orr.w	r1, r1, #31
 800c4e6:	e7bd      	b.n	800c464 <scalbn+0x2c>
 800c4e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4ec:	3236      	adds	r2, #54	@ 0x36
 800c4ee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4f6:	4658      	mov	r0, fp
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4b08      	ldr	r3, [pc, #32]	@ (800c520 <scalbn+0xe8>)
 800c4fe:	e7d1      	b.n	800c4a4 <scalbn+0x6c>
 800c500:	c2f8f359 	.word	0xc2f8f359
 800c504:	01a56e1f 	.word	0x01a56e1f
 800c508:	8800759c 	.word	0x8800759c
 800c50c:	7e37e43c 	.word	0x7e37e43c
 800c510:	43500000 	.word	0x43500000
 800c514:	ffff3cb0 	.word	0xffff3cb0
 800c518:	8800759c 	.word	0x8800759c
 800c51c:	c2f8f359 	.word	0xc2f8f359
 800c520:	3c900000 	.word	0x3c900000

0800c524 <with_errno>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4604      	mov	r4, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	4616      	mov	r6, r2
 800c52c:	f7fc fd88 	bl	8009040 <__errno>
 800c530:	4629      	mov	r1, r5
 800c532:	6006      	str	r6, [r0, #0]
 800c534:	4620      	mov	r0, r4
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <xflow>:
 800c538:	b513      	push	{r0, r1, r4, lr}
 800c53a:	4604      	mov	r4, r0
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	b10c      	cbz	r4, 800c546 <xflow+0xe>
 800c542:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c546:	e9cd 2300 	strd	r2, r3, [sp]
 800c54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c54e:	f7f3 ffdd 	bl	800050c <__aeabi_dmul>
 800c552:	2222      	movs	r2, #34	@ 0x22
 800c554:	b002      	add	sp, #8
 800c556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c55a:	f7ff bfe3 	b.w	800c524 <with_errno>

0800c55e <__math_uflow>:
 800c55e:	2200      	movs	r2, #0
 800c560:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c564:	f7ff bfe8 	b.w	800c538 <xflow>

0800c568 <__math_oflow>:
 800c568:	2200      	movs	r2, #0
 800c56a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c56e:	f7ff bfe3 	b.w	800c538 <xflow>
	...

0800c574 <__ieee754_sqrt>:
 800c574:	4a67      	ldr	r2, [pc, #412]	@ (800c714 <__ieee754_sqrt+0x1a0>)
 800c576:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57a:	438a      	bics	r2, r1
 800c57c:	4606      	mov	r6, r0
 800c57e:	460f      	mov	r7, r1
 800c580:	460b      	mov	r3, r1
 800c582:	4604      	mov	r4, r0
 800c584:	d10e      	bne.n	800c5a4 <__ieee754_sqrt+0x30>
 800c586:	4602      	mov	r2, r0
 800c588:	f7f3 ffc0 	bl	800050c <__aeabi_dmul>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4630      	mov	r0, r6
 800c592:	4639      	mov	r1, r7
 800c594:	f7f3 fe04 	bl	80001a0 <__adddf3>
 800c598:	4606      	mov	r6, r0
 800c59a:	460f      	mov	r7, r1
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	dc0c      	bgt.n	800c5c2 <__ieee754_sqrt+0x4e>
 800c5a8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c5ac:	4302      	orrs	r2, r0
 800c5ae:	d0f5      	beq.n	800c59c <__ieee754_sqrt+0x28>
 800c5b0:	b189      	cbz	r1, 800c5d6 <__ieee754_sqrt+0x62>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	f7f3 fdf2 	bl	800019c <__aeabi_dsub>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	f7f4 f8d0 	bl	8000760 <__aeabi_ddiv>
 800c5c0:	e7ea      	b.n	800c598 <__ieee754_sqrt+0x24>
 800c5c2:	150a      	asrs	r2, r1, #20
 800c5c4:	d115      	bne.n	800c5f2 <__ieee754_sqrt+0x7e>
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	e009      	b.n	800c5de <__ieee754_sqrt+0x6a>
 800c5ca:	0ae3      	lsrs	r3, r4, #11
 800c5cc:	3a15      	subs	r2, #21
 800c5ce:	0564      	lsls	r4, r4, #21
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d0fa      	beq.n	800c5ca <__ieee754_sqrt+0x56>
 800c5d4:	e7f7      	b.n	800c5c6 <__ieee754_sqrt+0x52>
 800c5d6:	460a      	mov	r2, r1
 800c5d8:	e7fa      	b.n	800c5d0 <__ieee754_sqrt+0x5c>
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	3101      	adds	r1, #1
 800c5de:	02d8      	lsls	r0, r3, #11
 800c5e0:	d5fb      	bpl.n	800c5da <__ieee754_sqrt+0x66>
 800c5e2:	1e48      	subs	r0, r1, #1
 800c5e4:	1a12      	subs	r2, r2, r0
 800c5e6:	f1c1 0020 	rsb	r0, r1, #32
 800c5ea:	fa24 f000 	lsr.w	r0, r4, r0
 800c5ee:	4303      	orrs	r3, r0
 800c5f0:	408c      	lsls	r4, r1
 800c5f2:	2600      	movs	r6, #0
 800c5f4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c5f8:	2116      	movs	r1, #22
 800c5fa:	07d2      	lsls	r2, r2, #31
 800c5fc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c600:	4632      	mov	r2, r6
 800c602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c60a:	bf5c      	itt	pl
 800c60c:	005b      	lslpl	r3, r3, #1
 800c60e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c612:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c616:	bf58      	it	pl
 800c618:	0064      	lslpl	r4, r4, #1
 800c61a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c61e:	107f      	asrs	r7, r7, #1
 800c620:	0064      	lsls	r4, r4, #1
 800c622:	1815      	adds	r5, r2, r0
 800c624:	429d      	cmp	r5, r3
 800c626:	bfde      	ittt	le
 800c628:	182a      	addle	r2, r5, r0
 800c62a:	1b5b      	suble	r3, r3, r5
 800c62c:	1836      	addle	r6, r6, r0
 800c62e:	0fe5      	lsrs	r5, r4, #31
 800c630:	3901      	subs	r1, #1
 800c632:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c636:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c63a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c63e:	d1f0      	bne.n	800c622 <__ieee754_sqrt+0xae>
 800c640:	460d      	mov	r5, r1
 800c642:	f04f 0a20 	mov.w	sl, #32
 800c646:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c64a:	429a      	cmp	r2, r3
 800c64c:	eb01 0c00 	add.w	ip, r1, r0
 800c650:	db02      	blt.n	800c658 <__ieee754_sqrt+0xe4>
 800c652:	d113      	bne.n	800c67c <__ieee754_sqrt+0x108>
 800c654:	45a4      	cmp	ip, r4
 800c656:	d811      	bhi.n	800c67c <__ieee754_sqrt+0x108>
 800c658:	f1bc 0f00 	cmp.w	ip, #0
 800c65c:	eb0c 0100 	add.w	r1, ip, r0
 800c660:	da42      	bge.n	800c6e8 <__ieee754_sqrt+0x174>
 800c662:	2900      	cmp	r1, #0
 800c664:	db40      	blt.n	800c6e8 <__ieee754_sqrt+0x174>
 800c666:	f102 0e01 	add.w	lr, r2, #1
 800c66a:	1a9b      	subs	r3, r3, r2
 800c66c:	4672      	mov	r2, lr
 800c66e:	45a4      	cmp	ip, r4
 800c670:	bf88      	it	hi
 800c672:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c676:	eba4 040c 	sub.w	r4, r4, ip
 800c67a:	4405      	add	r5, r0
 800c67c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c680:	f1ba 0a01 	subs.w	sl, sl, #1
 800c684:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c688:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c68c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c690:	d1db      	bne.n	800c64a <__ieee754_sqrt+0xd6>
 800c692:	431c      	orrs	r4, r3
 800c694:	d01a      	beq.n	800c6cc <__ieee754_sqrt+0x158>
 800c696:	4c20      	ldr	r4, [pc, #128]	@ (800c718 <__ieee754_sqrt+0x1a4>)
 800c698:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c71c <__ieee754_sqrt+0x1a8>
 800c69c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6a0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6a4:	f7f3 fd7a 	bl	800019c <__aeabi_dsub>
 800c6a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f4 f9a6 	bl	8000a04 <__aeabi_dcmple>
 800c6b8:	b140      	cbz	r0, 800c6cc <__ieee754_sqrt+0x158>
 800c6ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6be:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c6c6:	d111      	bne.n	800c6ec <__ieee754_sqrt+0x178>
 800c6c8:	4655      	mov	r5, sl
 800c6ca:	3601      	adds	r6, #1
 800c6cc:	1072      	asrs	r2, r6, #1
 800c6ce:	086b      	lsrs	r3, r5, #1
 800c6d0:	07f1      	lsls	r1, r6, #31
 800c6d2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c6d6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c6da:	bf48      	it	mi
 800c6dc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c6e6:	e757      	b.n	800c598 <__ieee754_sqrt+0x24>
 800c6e8:	4696      	mov	lr, r2
 800c6ea:	e7be      	b.n	800c66a <__ieee754_sqrt+0xf6>
 800c6ec:	f7f3 fd58 	bl	80001a0 <__adddf3>
 800c6f0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f4 f978 	bl	80009f0 <__aeabi_dcmplt>
 800c700:	b120      	cbz	r0, 800c70c <__ieee754_sqrt+0x198>
 800c702:	1ca8      	adds	r0, r5, #2
 800c704:	bf08      	it	eq
 800c706:	3601      	addeq	r6, #1
 800c708:	3502      	adds	r5, #2
 800c70a:	e7df      	b.n	800c6cc <__ieee754_sqrt+0x158>
 800c70c:	1c6b      	adds	r3, r5, #1
 800c70e:	f023 0501 	bic.w	r5, r3, #1
 800c712:	e7db      	b.n	800c6cc <__ieee754_sqrt+0x158>
 800c714:	7ff00000 	.word	0x7ff00000
 800c718:	20000678 	.word	0x20000678
 800c71c:	20000670 	.word	0x20000670

0800c720 <_init>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	bf00      	nop
 800c724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c726:	bc08      	pop	{r3}
 800c728:	469e      	mov	lr, r3
 800c72a:	4770      	bx	lr

0800c72c <_fini>:
 800c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72e:	bf00      	nop
 800c730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c732:	bc08      	pop	{r3}
 800c734:	469e      	mov	lr, r3
 800c736:	4770      	bx	lr
