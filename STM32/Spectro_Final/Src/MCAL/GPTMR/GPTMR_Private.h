/**
 * @file GPTMR_Private.h
 * @author Ahmed Atia Said (atiaa6501@gmail.com)
 * 
 * @version 1.0
 * @date 2024-02-24
 * 
 * @copyright Copyright (c) 2024
 * 
 */
#ifndef _GPTMR_PRIVATE_H_
#define _GPTMR_PRIVATE_H_

#define MGPTMR_TIM2_BASE_ADDRESS                                0x40000000U
#define MGPTMR_TIM3_BASE_ADDRESS                                0x40000400U
#define MGPTMR_TIM4_BASE_ADDRESS                                0x40000800U

typedef struct MGPTMR_Registers
{
    /*Timer Control Register 1*/
    volatile uint32 CR1;

    /*Timer Control Register 2*/
    volatile uint32 CR2;

    /*Timer Slave Mode Control Register*/
    volatile uint32 SMCR;

    /*Timer DMA/Interrupt Enable Register*/
    volatile uint32 DIER;

    /*Timer Status Register*/
    volatile uint32 SR;

    /*Timer event generation register*/
    volatile uint32 EGR;

    /*Timer Capture/Compare Mode Registers*/
    volatile uint32 CCMR1;
    volatile uint32 CCMR2;
    
    /*Timer Capture/Compare Enable Register*/
    volatile uint32 CCER;

    /*Timer Counter*/
    volatile uint32 CNT;

    /*Timer Prescaler*/
    volatile uint32 PSC;

    /*Timer Auto-Reload Register*/
    volatile uint32 ARR;

    /*Timer Capture/Compare Registers*/
    volatile uint32 CCR1;
    volatile uint32 CCR2;
    volatile uint32 CCR3;
    volatile uint32 CCR4;

    /*Timer DMA Control Register*/
    volatile uint32 DCR;

    /*Timer DMA Address for Full Transfer*/
    volatile uint32 DMAR;
} MGPTMR_Typedef_t;

#define TIM2                                                    ((volatile MGPTMR_Typedef_t*)(MGPTMR_TIM2_BASE_ADDRESS))
#define TIM3                                                    ((volatile MGPTMR_Typedef_t*)(MGPTMR_TIM3_BASE_ADDRESS))
#define TIM4                                                    ((volatile MGPTMR_Typedef_t*)(MGPTMR_TIM4_BASE_ADDRESS))

/*****************************************Timer Control Register 1 (TIMx_CR1) bits*********************************/

/*
Timer Counter Enable:
    Cleared automatically in one-pulse mode, when an update event occurs.
*/
#define MGPTMR_CR1_CEN_BIT                                      0
/*
Update Disable:
    Set and Cleared by Software to enable/disable update event generation
        0 ----> UEV enabled. The UEV event is generated by one of the following events:
                    1. Counter Overflow/Underflow
                    2. Setting the UG bit
                    3. Update generation through the slave mode controller
                Buffered registers are then loaded with their preload values
        1 ----> UEV disabled
*/
#define MGPTMR_CR1_UDIS_BIT                                     1
/*
Update Request Source:
    Set and cleared by Software to select the UEV event sources.
        0 ----> Any of the following events generate an update interrupt or DMA request if enabled
                    1. Counter Overflow/Underflow
                    2. Setting the UG bit
                    3. Update generation through the slave mode controller
        1 ----> Only Counter Overflow/Underflow generates an update interrupt or DMA request if enabled
*/
#define MGPTMR_CR1_URS_BIT                                      2
/*
One-pulse mode:
    0 ----> Counter is not stopped at update event.
    1 ----> Counter Stops Counting at the next update event "Clear the CEN bit"
*/
#define MGPTMR_CR1_OPM_BIT                                      3
/*
Direction:
    0 ----> Counter used as upcounter
    1 ----> Counter used as downcounter
*/
#define MGPTMR_CR1_DIR_BIT                                      4
/*
Center-aligned mode selection "Two bits":
    00 ----> Edge-Aligned Mode "Counter counts up or down depending on the direction"
    01 ----> Center-Aligned Mode 1:
                1) Counter Counts up and down alternatively.
                2) Output Compare Interrupt Flags of channels configured in output
                    (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down.
    10 ----> Center-Aligned Mode 2:
                1) Counter Counts up and down alternatively.
                2) Output Compare Interrupt Flags of channels configured in output
                    (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up.
    11 ----> Center-Aligned Mode 3:
                1) Counter Counts up and down alternatively.
                2) Output Compare Interrupt Flags of channels configured in output
                    (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up or down.
    
!Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as counter is enabled.
*/
#define MGPTMR_CR1_CMS_START_BIT                                5
/*Auto-reload preload enable*/
#define MGPTMR_CR1_ARPE_BIT                                     7
/*
Clock Division:
    Indicates the division ratio between the timer clock frequency and sampling clock used by the
    digital filters.
    00 ----> T_sample = T_timer
    01 ----> T_sample = 2 * T_timer
    10 ----> T_sample = 4 * T_timer
    11 ----> Reserved
*/
#define MGPTMR_CR1_CKD_START_BIT                                8

/*************************************Timer DMA/Interrupt Enable Register (TIMx_DIER) bits*********************************/

/*Update Interrupt Enable*/
#define MGPTMR_DIER_UIE_BIT                                     0
/*Capture/Compare 1 interrupt enable*/
#define MGPTMR_DIER_CC1IE_BIT                                   1
/*Capture/Compare 2 interrupt enable*/
#define MGPTMR_DIER_CC2IE_BIT                                   2
/*Capture/Compare 3 interrupt enable*/
#define MGPTMR_DIER_CC3IE_BIT                                   3
/*Capture/Compare 4 interrupt enable*/
#define MGPTMR_DIER_CC4IE_BIT                                   4
/*Trigger Interrupt Enable*/
#define MGPTMR_DIER_TIE_BIT                                     6

/*************************************Timer Status Register (TIMx_SR) bits*********************************/

/*
Update Interrupt Flag:
1) Set by hardware on an update event:
    1. At Overflow or Underflow and if the UDIS = 0 in TIMx_CR1 register
    2. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS = 0
        and UDIS = 0 in the TIMx_CR1 register.
    3. When CNT is reinitialized by a trigger event (refer to the synchro control register description),
        if URS=0 and UDIS=0 in the TIMx_CR1 register. 
2) Cleared by Software.
*/
#define MGPTMR_SR_UIF_BIT                                       0

/**********************************************Configuration Parameters**********************************************/

#define MGPTMR_UEV_ENABLED                                      1
#define MGPTMR_UEV_DISABLED                                     2

#define MGPTMR_UEV_SOURCE_ALL                                   1
#define MGPTMR_UEV_SOURCE_OVERFLOW_UNDERFLOW                    2

#define MGPTMR_ONE_PULSE_MODE_ENABLED                           1
#define MGPTMR_ONE_PULSE_MODE_DISABLED                          2

#define MGPTMR_COUNTER_UPCOUNTER                                1
#define MGPTMR_COUNTER_DOWNCOUNTER                              2

#define MGPTMR_EDGE_ALLIGNED_MODE                               1
#define MGPTMR_CENTER_ALLIGNED_MODE_1                           2
#define MGPTMR_CENTER_ALLIGNED_MODE_2                           3
#define MGPTMR_CENTER_ALLIGNED_MODE_3                           4

#define MGPTMR_AUTO_RELOAD_ENABLED                              1
#define MGPTMR_AUTO_RELOAD_DISABLED                             2

#define MGPTMR_UPDATE_INTERRUPT_ENABLED                         1
#define MGPTMR_UPDATE_INTERRUPT_DISABLED                        2

/**
 * @brief: Function to calculate the preload value from a given period in ms
 * 
 * @param Copy_uint32PeriodInMs:                        Period in ms 
 * @param P_uint16PreloadValue:                         Preload value to be set
 *  
 * @return Std_ReturnType
 * @retval E_OK:                                        Preload value successfully calculated
 * @retval E_NOT_OK:                                    Preload value not calculated 
 */
Std_ReturnType MGPTMR_GetPreloadValue                   (uint32 Copy_uint32PeriodInMs, uint16* P_uint16PreloadValue);
#endif /*_GPTMR_PRIVATE_H_*/