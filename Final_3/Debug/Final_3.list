
Final_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c180  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800c2b0  0800c2b0  0000d2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c918  0800c918  0000e618  2**0
                  CONTENTS
  4 .ARM          00000008  0800c918  0800c918  0000d918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c920  0800c920  0000e618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c920  0800c920  0000d920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c924  0800c924  0000d924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  0800c928  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000618  0800cf40  0000e618  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  0800cf40  0000e9d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e618  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093e9  00000000  00000000  0000e641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bd  00000000  00000000  00017a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000042ce  00000000  00000000  00019ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0001dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0001e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005200  00000000  00000000  0001f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fd5  00000000  00000000  00024330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000149f2  00000000  00000000  0002d305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00041cf7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003da4  00000000  00000000  00041d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000618 	.word	0x20000618
 800014c:	00000000 	.word	0x00000000
 8000150:	0800c298 	.word	0x0800c298

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000061c 	.word	0x2000061c
 800016c:	0800c298 	.word	0x0800c298

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	@ 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	@ 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	3a01      	subs	r2, #1
 8000c06:	bf28      	it	cs
 8000c08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c0c:	d2ed      	bcs.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dba:	2afd      	cmp	r2, #253	@ 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	@ 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	@ 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	@ 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_ldivmod>:
 8001180:	b97b      	cbnz	r3, 80011a2 <__aeabi_ldivmod+0x22>
 8001182:	b972      	cbnz	r2, 80011a2 <__aeabi_ldivmod+0x22>
 8001184:	2900      	cmp	r1, #0
 8001186:	bfbe      	ittt	lt
 8001188:	2000      	movlt	r0, #0
 800118a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800118e:	e006      	blt.n	800119e <__aeabi_ldivmod+0x1e>
 8001190:	bf08      	it	eq
 8001192:	2800      	cmpeq	r0, #0
 8001194:	bf1c      	itt	ne
 8001196:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800119a:	f04f 30ff 	movne.w	r0, #4294967295
 800119e:	f000 b9d1 	b.w	8001544 <__aeabi_idiv0>
 80011a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011aa:	2900      	cmp	r1, #0
 80011ac:	db09      	blt.n	80011c2 <__aeabi_ldivmod+0x42>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db1a      	blt.n	80011e8 <__aeabi_ldivmod+0x68>
 80011b2:	f000 f86b 	bl	800128c <__udivmoddi4>
 80011b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011be:	b004      	add	sp, #16
 80011c0:	4770      	bx	lr
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db1b      	blt.n	8001204 <__aeabi_ldivmod+0x84>
 80011cc:	f000 f85e 	bl	800128c <__udivmoddi4>
 80011d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d8:	b004      	add	sp, #16
 80011da:	4240      	negs	r0, r0
 80011dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	4770      	bx	lr
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	f000 f84d 	bl	800128c <__udivmoddi4>
 80011f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fa:	b004      	add	sp, #16
 80011fc:	4240      	negs	r0, r0
 80011fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f83f 	bl	800128c <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4252      	negs	r2, r2
 800121a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121e:	4770      	bx	lr

08001220 <__aeabi_d2lz>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f7ff fbe1 	bl	80009f0 <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x1c>
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4620      	mov	r0, r4
 800123e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f957 	bl	800050c <__aeabi_dmul>
 800125e:	f7ff fc05 	bl	8000a6c <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f8d8 	bl	8000418 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f94e 	bl	800050c <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ff90 	bl	800019c <__aeabi_dsub>
 800127c:	f7ff fbf6 	bl	8000a6c <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <__udivmoddi4>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	9d08      	ldr	r5, [sp, #32]
 8001292:	460c      	mov	r4, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d14e      	bne.n	8001336 <__udivmoddi4+0xaa>
 8001298:	4694      	mov	ip, r2
 800129a:	458c      	cmp	ip, r1
 800129c:	4686      	mov	lr, r0
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	d962      	bls.n	800136a <__udivmoddi4+0xde>
 80012a4:	b14a      	cbz	r2, 80012ba <__udivmoddi4+0x2e>
 80012a6:	f1c2 0320 	rsb	r3, r2, #32
 80012aa:	4091      	lsls	r1, r2
 80012ac:	fa20 f303 	lsr.w	r3, r0, r3
 80012b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b4:	4319      	orrs	r1, r3
 80012b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80012ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012be:	fbb1 f4f7 	udiv	r4, r1, r7
 80012c2:	fb07 1114 	mls	r1, r7, r4, r1
 80012c6:	fa1f f68c 	uxth.w	r6, ip
 80012ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	fb04 f106 	mul.w	r1, r4, r6
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d90a      	bls.n	80012f0 <__udivmoddi4+0x64>
 80012da:	eb1c 0303 	adds.w	r3, ip, r3
 80012de:	f104 30ff 	add.w	r0, r4, #4294967295
 80012e2:	f080 8110 	bcs.w	8001506 <__udivmoddi4+0x27a>
 80012e6:	4299      	cmp	r1, r3
 80012e8:	f240 810d 	bls.w	8001506 <__udivmoddi4+0x27a>
 80012ec:	3c02      	subs	r4, #2
 80012ee:	4463      	add	r3, ip
 80012f0:	1a59      	subs	r1, r3, r1
 80012f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80012f6:	fb07 1110 	mls	r1, r7, r0, r1
 80012fa:	fb00 f606 	mul.w	r6, r0, r6
 80012fe:	fa1f f38e 	uxth.w	r3, lr
 8001302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001306:	429e      	cmp	r6, r3
 8001308:	d90a      	bls.n	8001320 <__udivmoddi4+0x94>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001312:	f080 80fa 	bcs.w	800150a <__udivmoddi4+0x27e>
 8001316:	429e      	cmp	r6, r3
 8001318:	f240 80f7 	bls.w	800150a <__udivmoddi4+0x27e>
 800131c:	4463      	add	r3, ip
 800131e:	3802      	subs	r0, #2
 8001320:	2100      	movs	r1, #0
 8001322:	1b9b      	subs	r3, r3, r6
 8001324:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001328:	b11d      	cbz	r5, 8001332 <__udivmoddi4+0xa6>
 800132a:	40d3      	lsrs	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	e9c5 3200 	strd	r3, r2, [r5]
 8001332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001336:	428b      	cmp	r3, r1
 8001338:	d905      	bls.n	8001346 <__udivmoddi4+0xba>
 800133a:	b10d      	cbz	r5, 8001340 <__udivmoddi4+0xb4>
 800133c:	e9c5 0100 	strd	r0, r1, [r5]
 8001340:	2100      	movs	r1, #0
 8001342:	4608      	mov	r0, r1
 8001344:	e7f5      	b.n	8001332 <__udivmoddi4+0xa6>
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d146      	bne.n	80013dc <__udivmoddi4+0x150>
 800134e:	42a3      	cmp	r3, r4
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0xcc>
 8001352:	4290      	cmp	r0, r2
 8001354:	f0c0 80ee 	bcc.w	8001534 <__udivmoddi4+0x2a8>
 8001358:	1a86      	subs	r6, r0, r2
 800135a:	eb64 0303 	sbc.w	r3, r4, r3
 800135e:	2001      	movs	r0, #1
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0e6      	beq.n	8001332 <__udivmoddi4+0xa6>
 8001364:	e9c5 6300 	strd	r6, r3, [r5]
 8001368:	e7e3      	b.n	8001332 <__udivmoddi4+0xa6>
 800136a:	2a00      	cmp	r2, #0
 800136c:	f040 808f 	bne.w	800148e <__udivmoddi4+0x202>
 8001370:	eba1 040c 	sub.w	r4, r1, ip
 8001374:	2101      	movs	r1, #1
 8001376:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800137a:	fa1f f78c 	uxth.w	r7, ip
 800137e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001382:	fb08 4416 	mls	r4, r8, r6, r4
 8001386:	fb07 f006 	mul.w	r0, r7, r6
 800138a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800138e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d908      	bls.n	80013a8 <__udivmoddi4+0x11c>
 8001396:	eb1c 0303 	adds.w	r3, ip, r3
 800139a:	f106 34ff 	add.w	r4, r6, #4294967295
 800139e:	d202      	bcs.n	80013a6 <__udivmoddi4+0x11a>
 80013a0:	4298      	cmp	r0, r3
 80013a2:	f200 80cb 	bhi.w	800153c <__udivmoddi4+0x2b0>
 80013a6:	4626      	mov	r6, r4
 80013a8:	1a1c      	subs	r4, r3, r0
 80013aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ae:	fb08 4410 	mls	r4, r8, r0, r4
 80013b2:	fb00 f707 	mul.w	r7, r0, r7
 80013b6:	fa1f f38e 	uxth.w	r3, lr
 80013ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013be:	429f      	cmp	r7, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x148>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80013ca:	d202      	bcs.n	80013d2 <__udivmoddi4+0x146>
 80013cc:	429f      	cmp	r7, r3
 80013ce:	f200 80ae 	bhi.w	800152e <__udivmoddi4+0x2a2>
 80013d2:	4620      	mov	r0, r4
 80013d4:	1bdb      	subs	r3, r3, r7
 80013d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013da:	e7a5      	b.n	8001328 <__udivmoddi4+0x9c>
 80013dc:	f1c1 0720 	rsb	r7, r1, #32
 80013e0:	408b      	lsls	r3, r1
 80013e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ea:	fa24 f607 	lsr.w	r6, r4, r7
 80013ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013f2:	fbb6 f8f9 	udiv	r8, r6, r9
 80013f6:	fa1f fe8c 	uxth.w	lr, ip
 80013fa:	fb09 6618 	mls	r6, r9, r8, r6
 80013fe:	fa20 f307 	lsr.w	r3, r0, r7
 8001402:	408c      	lsls	r4, r1
 8001404:	fa00 fa01 	lsl.w	sl, r0, r1
 8001408:	fb08 f00e 	mul.w	r0, r8, lr
 800140c:	431c      	orrs	r4, r3
 800140e:	0c23      	lsrs	r3, r4, #16
 8001410:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001414:	4298      	cmp	r0, r3
 8001416:	fa02 f201 	lsl.w	r2, r2, r1
 800141a:	d90a      	bls.n	8001432 <__udivmoddi4+0x1a6>
 800141c:	eb1c 0303 	adds.w	r3, ip, r3
 8001420:	f108 36ff 	add.w	r6, r8, #4294967295
 8001424:	f080 8081 	bcs.w	800152a <__udivmoddi4+0x29e>
 8001428:	4298      	cmp	r0, r3
 800142a:	d97e      	bls.n	800152a <__udivmoddi4+0x29e>
 800142c:	f1a8 0802 	sub.w	r8, r8, #2
 8001430:	4463      	add	r3, ip
 8001432:	1a1e      	subs	r6, r3, r0
 8001434:	fbb6 f3f9 	udiv	r3, r6, r9
 8001438:	fb09 6613 	mls	r6, r9, r3, r6
 800143c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001440:	b2a4      	uxth	r4, r4
 8001442:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001446:	45a6      	cmp	lr, r4
 8001448:	d908      	bls.n	800145c <__udivmoddi4+0x1d0>
 800144a:	eb1c 0404 	adds.w	r4, ip, r4
 800144e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001452:	d266      	bcs.n	8001522 <__udivmoddi4+0x296>
 8001454:	45a6      	cmp	lr, r4
 8001456:	d964      	bls.n	8001522 <__udivmoddi4+0x296>
 8001458:	3b02      	subs	r3, #2
 800145a:	4464      	add	r4, ip
 800145c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001460:	fba0 8302 	umull	r8, r3, r0, r2
 8001464:	eba4 040e 	sub.w	r4, r4, lr
 8001468:	429c      	cmp	r4, r3
 800146a:	46c6      	mov	lr, r8
 800146c:	461e      	mov	r6, r3
 800146e:	d350      	bcc.n	8001512 <__udivmoddi4+0x286>
 8001470:	d04d      	beq.n	800150e <__udivmoddi4+0x282>
 8001472:	b155      	cbz	r5, 800148a <__udivmoddi4+0x1fe>
 8001474:	ebba 030e 	subs.w	r3, sl, lr
 8001478:	eb64 0406 	sbc.w	r4, r4, r6
 800147c:	fa04 f707 	lsl.w	r7, r4, r7
 8001480:	40cb      	lsrs	r3, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c5 7400 	strd	r7, r4, [r5]
 800148a:	2100      	movs	r1, #0
 800148c:	e751      	b.n	8001332 <__udivmoddi4+0xa6>
 800148e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001492:	f1c2 0320 	rsb	r3, r2, #32
 8001496:	40d9      	lsrs	r1, r3
 8001498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800149c:	fa20 f303 	lsr.w	r3, r0, r3
 80014a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80014a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80014a8:	fb08 1110 	mls	r1, r8, r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	431c      	orrs	r4, r3
 80014b0:	fa1f f78c 	uxth.w	r7, ip
 80014b4:	0c23      	lsrs	r3, r4, #16
 80014b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014ba:	fb00 f107 	mul.w	r1, r0, r7
 80014be:	4299      	cmp	r1, r3
 80014c0:	d908      	bls.n	80014d4 <__udivmoddi4+0x248>
 80014c2:	eb1c 0303 	adds.w	r3, ip, r3
 80014c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80014ca:	d22c      	bcs.n	8001526 <__udivmoddi4+0x29a>
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d92a      	bls.n	8001526 <__udivmoddi4+0x29a>
 80014d0:	3802      	subs	r0, #2
 80014d2:	4463      	add	r3, ip
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	fbb3 f1f8 	udiv	r1, r3, r8
 80014da:	fb08 3311 	mls	r3, r8, r1, r3
 80014de:	b2a4      	uxth	r4, r4
 80014e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014e4:	fb01 f307 	mul.w	r3, r1, r7
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d908      	bls.n	80014fe <__udivmoddi4+0x272>
 80014ec:	eb1c 0404 	adds.w	r4, ip, r4
 80014f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80014f4:	d213      	bcs.n	800151e <__udivmoddi4+0x292>
 80014f6:	42a3      	cmp	r3, r4
 80014f8:	d911      	bls.n	800151e <__udivmoddi4+0x292>
 80014fa:	3902      	subs	r1, #2
 80014fc:	4464      	add	r4, ip
 80014fe:	1ae4      	subs	r4, r4, r3
 8001500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001504:	e73b      	b.n	800137e <__udivmoddi4+0xf2>
 8001506:	4604      	mov	r4, r0
 8001508:	e6f2      	b.n	80012f0 <__udivmoddi4+0x64>
 800150a:	4608      	mov	r0, r1
 800150c:	e708      	b.n	8001320 <__udivmoddi4+0x94>
 800150e:	45c2      	cmp	sl, r8
 8001510:	d2af      	bcs.n	8001472 <__udivmoddi4+0x1e6>
 8001512:	ebb8 0e02 	subs.w	lr, r8, r2
 8001516:	eb63 060c 	sbc.w	r6, r3, ip
 800151a:	3801      	subs	r0, #1
 800151c:	e7a9      	b.n	8001472 <__udivmoddi4+0x1e6>
 800151e:	4631      	mov	r1, r6
 8001520:	e7ed      	b.n	80014fe <__udivmoddi4+0x272>
 8001522:	4603      	mov	r3, r0
 8001524:	e79a      	b.n	800145c <__udivmoddi4+0x1d0>
 8001526:	4630      	mov	r0, r6
 8001528:	e7d4      	b.n	80014d4 <__udivmoddi4+0x248>
 800152a:	46b0      	mov	r8, r6
 800152c:	e781      	b.n	8001432 <__udivmoddi4+0x1a6>
 800152e:	4463      	add	r3, ip
 8001530:	3802      	subs	r0, #2
 8001532:	e74f      	b.n	80013d4 <__udivmoddi4+0x148>
 8001534:	4606      	mov	r6, r0
 8001536:	4623      	mov	r3, r4
 8001538:	4608      	mov	r0, r1
 800153a:	e711      	b.n	8001360 <__udivmoddi4+0xd4>
 800153c:	3e02      	subs	r6, #2
 800153e:	4463      	add	r3, ip
 8001540:	e732      	b.n	80013a8 <__udivmoddi4+0x11c>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <SCommands_Init>:
#include "SCommands_Interface.h"
#include "SCommands_Private.h"


Std_ReturnType SCommands_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HESP32_SetCommandCallbackFunction       (0, SCommands_GetUVStatus);
 800154c:	493c      	ldr	r1, [pc, #240]	@ (8001640 <SCommands_Init+0xf8>)
 800154e:	2000      	movs	r0, #0
 8001550:	f001 fdbc 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (1, SCommands_SetUVOn);
 8001554:	493b      	ldr	r1, [pc, #236]	@ (8001644 <SCommands_Init+0xfc>)
 8001556:	2001      	movs	r0, #1
 8001558:	f001 fdb8 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (2, SCommands_SetUVOff);
 800155c:	493a      	ldr	r1, [pc, #232]	@ (8001648 <SCommands_Init+0x100>)
 800155e:	2002      	movs	r0, #2
 8001560:	f001 fdb4 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (3, SCommands_GetVisStatus);
 8001564:	4939      	ldr	r1, [pc, #228]	@ (800164c <SCommands_Init+0x104>)
 8001566:	2003      	movs	r0, #3
 8001568:	f001 fdb0 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (4, SCommands_SetVisOn);
 800156c:	4938      	ldr	r1, [pc, #224]	@ (8001650 <SCommands_Init+0x108>)
 800156e:	2004      	movs	r0, #4
 8001570:	f001 fdac 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (5, SCommands_SetVisOff);
 8001574:	4937      	ldr	r1, [pc, #220]	@ (8001654 <SCommands_Init+0x10c>)
 8001576:	2005      	movs	r0, #5
 8001578:	f001 fda8 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (6, SCommands_GetSupplyVoltages);
 800157c:	4936      	ldr	r1, [pc, #216]	@ (8001658 <SCommands_Init+0x110>)
 800157e:	2006      	movs	r0, #6
 8001580:	f001 fda4 	bl	80030cc <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackFunction       (7, SCommands_SendCurrentMotorsSteps);
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <SCommands_Init+0x114>)
 8001586:	2007      	movs	r0, #7
 8001588:	f001 fda0 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (8, SCommands_HomeLampMotor);
 800158c:	4934      	ldr	r1, [pc, #208]	@ (8001660 <SCommands_Init+0x118>)
 800158e:	2008      	movs	r0, #8
 8001590:	f001 fd9c 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (9, SCommands_HomeWLSelectMotor);
 8001594:	4933      	ldr	r1, [pc, #204]	@ (8001664 <SCommands_Init+0x11c>)
 8001596:	2009      	movs	r0, #9
 8001598:	f001 fd98 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (10, SCommands_HomeFilterSelectMotor);
 800159c:	4932      	ldr	r1, [pc, #200]	@ (8001668 <SCommands_Init+0x120>)
 800159e:	200a      	movs	r0, #10
 80015a0:	f001 fd94 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (11, SCommands_SendCurrentWL);
 80015a4:	4931      	ldr	r1, [pc, #196]	@ (800166c <SCommands_Init+0x124>)
 80015a6:	200b      	movs	r0, #11
 80015a8:	f001 fd90 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (12, SCommands_SendCurrentDateTime);
 80015ac:	4930      	ldr	r1, [pc, #192]	@ (8001670 <SCommands_Init+0x128>)
 80015ae:	200c      	movs	r0, #12
 80015b0:	f001 fd8c 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (13, SCommands_SendCurrentDetectorValues);
 80015b4:	492f      	ldr	r1, [pc, #188]	@ (8001674 <SCommands_Init+0x12c>)
 80015b6:	200d      	movs	r0, #13
 80015b8:	f001 fd88 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (14, SCommands_GetLampMotorPosition);
 80015bc:	492e      	ldr	r1, [pc, #184]	@ (8001678 <SCommands_Init+0x130>)
 80015be:	200e      	movs	r0, #14
 80015c0:	f001 fd84 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (15, SCommands_SetLampMotorVisible);
 80015c4:	492d      	ldr	r1, [pc, #180]	@ (800167c <SCommands_Init+0x134>)
 80015c6:	200f      	movs	r0, #15
 80015c8:	f001 fd80 	bl	80030cc <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (16, SCommands_SetLampMotorUV);
 80015cc:	492c      	ldr	r1, [pc, #176]	@ (8001680 <SCommands_Init+0x138>)
 80015ce:	2010      	movs	r0, #16
 80015d0:	f001 fd7c 	bl	80030cc <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackArgFunction    (17, SCommands_UpdateDateTime);
 80015d4:	492b      	ldr	r1, [pc, #172]	@ (8001684 <SCommands_Init+0x13c>)
 80015d6:	2011      	movs	r0, #17
 80015d8:	f001 fd98 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (18, SCommands_SaveFilterMotorCalibSteps);
 80015dc:	492a      	ldr	r1, [pc, #168]	@ (8001688 <SCommands_Init+0x140>)
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 fd94 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (19, SCommands_SaveFilterMotorCalibWL);
 80015e4:	4929      	ldr	r1, [pc, #164]	@ (800168c <SCommands_Init+0x144>)
 80015e6:	2013      	movs	r0, #19
 80015e8:	f001 fd90 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (20, SCommands_StartOperation);
 80015ec:	4928      	ldr	r1, [pc, #160]	@ (8001690 <SCommands_Init+0x148>)
 80015ee:	2014      	movs	r0, #20
 80015f0:	f001 fd8c 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (21, SCommands_SetReferenceGain);
 80015f4:	4927      	ldr	r1, [pc, #156]	@ (8001694 <SCommands_Init+0x14c>)
 80015f6:	2015      	movs	r0, #21
 80015f8:	f001 fd88 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (22, SCommands_SetSampleGain);
 80015fc:	4926      	ldr	r1, [pc, #152]	@ (8001698 <SCommands_Init+0x150>)
 80015fe:	2016      	movs	r0, #22
 8001600:	f001 fd84 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (23, SCommands_MoveFilterLeft);
 8001604:	4925      	ldr	r1, [pc, #148]	@ (800169c <SCommands_Init+0x154>)
 8001606:	2017      	movs	r0, #23
 8001608:	f001 fd80 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (24, SCommands_MoveFilterRight);
 800160c:	4924      	ldr	r1, [pc, #144]	@ (80016a0 <SCommands_Init+0x158>)
 800160e:	2018      	movs	r0, #24
 8001610:	f001 fd7c 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (25, SCommands_SelectFilter);
 8001614:	4923      	ldr	r1, [pc, #140]	@ (80016a4 <SCommands_Init+0x15c>)
 8001616:	2019      	movs	r0, #25
 8001618:	f001 fd78 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (26, SCommands_SelectGratingWL);
 800161c:	4922      	ldr	r1, [pc, #136]	@ (80016a8 <SCommands_Init+0x160>)
 800161e:	201a      	movs	r0, #26
 8001620:	f001 fd74 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (27, SCommands_MoveGratingLeft);
 8001624:	4921      	ldr	r1, [pc, #132]	@ (80016ac <SCommands_Init+0x164>)
 8001626:	201b      	movs	r0, #27
 8001628:	f001 fd70 	bl	800310c <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (28, SCommands_MoveGratingRight);
 800162c:	4920      	ldr	r1, [pc, #128]	@ (80016b0 <SCommands_Init+0x168>)
 800162e:	201c      	movs	r0, #28
 8001630:	f001 fd6c 	bl	800310c <HESP32_SetCommandCallbackArgFunction>

	HESP32_InitInterface();
 8001634:	f001 fd00 	bl	8003038 <HESP32_InitInterface>

	return E_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	080016b5 	.word	0x080016b5
 8001644:	08001701 	.word	0x08001701
 8001648:	0800173d 	.word	0x0800173d
 800164c:	08001779 	.word	0x08001779
 8001650:	080017b9 	.word	0x080017b9
 8001654:	080017f5 	.word	0x080017f5
 8001658:	08001831 	.word	0x08001831
 800165c:	08001a79 	.word	0x08001a79
 8001660:	08001ae3 	.word	0x08001ae3
 8001664:	08001b29 	.word	0x08001b29
 8001668:	08001b6f 	.word	0x08001b6f
 800166c:	08001bb5 	.word	0x08001bb5
 8001670:	08001cb5 	.word	0x08001cb5
 8001674:	08001ce9 	.word	0x08001ce9
 8001678:	08001c09 	.word	0x08001c09
 800167c:	08001c4d 	.word	0x08001c4d
 8001680:	08001c81 	.word	0x08001c81
 8001684:	08001df5 	.word	0x08001df5
 8001688:	08001f45 	.word	0x08001f45
 800168c:	08001f95 	.word	0x08001f95
 8001690:	08001fe5 	.word	0x08001fe5
 8001694:	08002149 	.word	0x08002149
 8001698:	0800219d 	.word	0x0800219d
 800169c:	08002241 	.word	0x08002241
 80016a0:	080021f1 	.word	0x080021f1
 80016a4:	08002291 	.word	0x08002291
 80016a8:	080022dd 	.word	0x080022dd
 80016ac:	08002331 	.word	0x08002331
 80016b0:	08002381 	.word	0x08002381

080016b4 <SCommands_GetUVStatus>:

void SCommands_GetUVStatus(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f001 f9e8 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint8 Loc_uint8LampStatus = MGPIO_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
	MGPIO_GetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, &Loc_uint8LampStatus);
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	461a      	mov	r2, r3
 80016c8:	2109      	movs	r1, #9
 80016ca:	2000      	movs	r0, #0
 80016cc:	f003 fdae 	bl	800522c <MGPIO_GetPinValue>
	if(Loc_uint8LampStatus == MGPIO_LOW)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <SCommands_GetUVStatus+0x2a>
	{
		HESP32_SendCommand("on");
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <SCommands_GetUVStatus+0x44>)
 80016d8:	f001 fcdc 	bl	8003094 <HESP32_SendCommand>
 80016dc:	e005      	b.n	80016ea <SCommands_GetUVStatus+0x36>
	}
	else if(Loc_uint8LampStatus == MGPIO_HIGH)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <SCommands_GetUVStatus+0x36>
	{
		HESP32_SendCommand("off");
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <SCommands_GetUVStatus+0x48>)
 80016e6:	f001 fcd5 	bl	8003094 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f001 f9d0 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800c2b0 	.word	0x0800c2b0
 80016fc:	0800c2b4 	.word	0x0800c2b4

08001700 <SCommands_SetUVOn>:


void SCommands_SetUVOn(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
//	HESP32_SendCommand("on");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8001706:	2101      	movs	r1, #1
 8001708:	2000      	movs	r0, #0
 800170a:	f002 f977 	bl	80039fc <HPWRSupply_SetSupplyMode>
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <SCommands_SetUVOn+0x20>
	{
	    HESP32_SendCommand("on");
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <SCommands_SetUVOn+0x34>)
 800171a:	f001 fcbb 	bl	8003094 <HESP32_SendCommand>
 800171e:	e002      	b.n	8001726 <SCommands_SetUVOn+0x26>
	}
	else
	{
	    HESP32_SendCommand("off");
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <SCommands_SetUVOn+0x38>)
 8001722:	f001 fcb7 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001726:	2000      	movs	r0, #0
 8001728:	f001 f9b2 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	0800c2b0 	.word	0x0800c2b0
 8001738:	0800c2b4 	.word	0x0800c2b4

0800173c <SCommands_SetUVOff>:


void SCommands_SetUVOff(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_LOW);
//	HESP32_SendCommand("off");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f002 f959 	bl	80039fc <HPWRSupply_SetSupplyMode>
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <SCommands_SetUVOff+0x20>
	{
	    HESP32_SendCommand("off");
 8001754:	4806      	ldr	r0, [pc, #24]	@ (8001770 <SCommands_SetUVOff+0x34>)
 8001756:	f001 fc9d 	bl	8003094 <HESP32_SendCommand>
 800175a:	e002      	b.n	8001762 <SCommands_SetUVOff+0x26>
	}
	else
	{
	    HESP32_SendCommand("on");
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <SCommands_SetUVOff+0x38>)
 800175e:	f001 fc99 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001762:	2000      	movs	r0, #0
 8001764:	f001 f994 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800c2b4 	.word	0x0800c2b4
 8001774:	0800c2b0 	.word	0x0800c2b0

08001778 <SCommands_GetVisStatus>:


void SCommands_GetVisStatus(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		/*Do nothing*/
//	}
	HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 800177e:	2304      	movs	r3, #4
 8001780:	71fb      	strb	r3, [r7, #7]
	HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	4619      	mov	r1, r3
 8001786:	2001      	movs	r0, #1
 8001788:	f002 f9d0 	bl	8003b2c <HPWRSupply_CheckSupplyStatus>
	if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d103      	bne.n	800179a <SCommands_GetVisStatus+0x22>
	{
	    HESP32_SendCommand("on");
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <SCommands_GetVisStatus+0x38>)
 8001794:	f001 fc7e 	bl	8003094 <HESP32_SendCommand>
 8001798:	e002      	b.n	80017a0 <SCommands_GetVisStatus+0x28>
	}
	else
	{
	    HESP32_SendCommand("off");
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <SCommands_GetVisStatus+0x3c>)
 800179c:	f001 fc7a 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f001 f975 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800c2b0 	.word	0x0800c2b0
 80017b4:	0800c2b4 	.word	0x0800c2b4

080017b8 <SCommands_SetVisOn>:


void SCommands_SetVisOn(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
//	HESP32_SendCommand("on");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 80017be:	2101      	movs	r1, #1
 80017c0:	2001      	movs	r0, #1
 80017c2:	f002 f91b 	bl	80039fc <HPWRSupply_SetSupplyMode>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <SCommands_SetVisOn+0x20>
	{
	    HESP32_SendCommand("on");
 80017d0:	4806      	ldr	r0, [pc, #24]	@ (80017ec <SCommands_SetVisOn+0x34>)
 80017d2:	f001 fc5f 	bl	8003094 <HESP32_SendCommand>
 80017d6:	e002      	b.n	80017de <SCommands_SetVisOn+0x26>
	}
	else
	{
	    HESP32_SendCommand("off");
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <SCommands_SetVisOn+0x38>)
 80017da:	f001 fc5b 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 f956 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800c2b0 	.word	0x0800c2b0
 80017f0:	0800c2b4 	.word	0x0800c2b4

080017f4 <SCommands_SetVisOff>:


void SCommands_SetVisOff(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_LOW);
//	HESP32_SendCommand("off");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 80017fa:	2100      	movs	r1, #0
 80017fc:	2001      	movs	r0, #1
 80017fe:	f002 f8fd 	bl	80039fc <HPWRSupply_SetSupplyMode>
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <SCommands_SetVisOff+0x20>
	{
	    HESP32_SendCommand("off");
 800180c:	4806      	ldr	r0, [pc, #24]	@ (8001828 <SCommands_SetVisOff+0x34>)
 800180e:	f001 fc41 	bl	8003094 <HESP32_SendCommand>
 8001812:	e002      	b.n	800181a <SCommands_SetVisOff+0x26>
	}
	else
	{
	    HESP32_SendCommand("on");
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <SCommands_SetVisOff+0x38>)
 8001816:	f001 fc3d 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800181a:	2000      	movs	r0, #0
 800181c:	f001 f938 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	0800c2b4 	.word	0x0800c2b4
 800182c:	0800c2b0 	.word	0x0800c2b0

08001830 <SCommands_GetSupplyVoltages>:

void SCommands_GetSupplyVoltages(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ae      	sub	sp, #184	@ 0xb8
 8001834:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001836:	2001      	movs	r0, #1
 8001838:	f001 f92a 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint16 Loc_uint16VoltageConversion = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	float32 Loc_float32VoltageValue = 0.0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint8 glbl_uint8VoltageBuffer[5][32] = {{0}};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	22a0      	movs	r2, #160	@ 0xa0
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 faa1 	bl	8007d9a <memset>
	uint16 Loc_uint16EnteredVoltageConversion = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
	uint16 Loc_uint16_33VoltageConversion = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	80bb      	strh	r3, [r7, #4]
	float32 Loc_float32EnteredVoltageValue = 0.0;
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float32 Loc_float32_33VoltageValue = 0.0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	/*************************************************P12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_POS_12, &Loc_uint16VoltageConversion);
 8001870:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001874:	4619      	mov	r1, r3
 8001876:	2004      	movs	r0, #4
 8001878:	f002 fa40 	bl	8003cfc <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 800187c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa19 	bl	8000cb8 <__aeabi_ui2f>
 8001886:	4603      	mov	r3, r0
 8001888:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb1f 	bl	8000ed0 <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	4976      	ldr	r1, [pc, #472]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fa66 	bl	8000d68 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa60 	bl	8000d68 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	float_to_string_manual((glbl_uint8VoltageBuffer[0] + 1),Loc_float32VoltageValue, 3);
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	3301      	adds	r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fa46 	bl	8002d4c <float_to_string_manual>
	glbl_uint8VoltageBuffer[0][0] = '+';
 80018c0:	232b      	movs	r3, #43	@ 0x2b
 80018c2:	723b      	strb	r3, [r7, #8]

	/************************************************N12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_NEG_12, &Loc_uint16EnteredVoltageConversion);
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	4619      	mov	r1, r3
 80018c8:	2001      	movs	r0, #1
 80018ca:	f002 fa17 	bl	8003cfc <SPWRVolt_GetVoltage>
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16_33VoltageConversion);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	f002 fa12 	bl	8003cfc <SPWRVolt_GetVoltage>

	Loc_float32EnteredVoltageValue = (float32)((float32)((float32)Loc_uint16EnteredVoltageConversion / 4096) * 3.3f) ;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9ec 	bl	8000cb8 <__aeabi_ui2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff faf2 	bl	8000ed0 <__aeabi_fdiv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4960      	ldr	r1, [pc, #384]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa39 	bl	8000d68 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	Loc_float32_33VoltageValue = (float32)((float32)((float32)Loc_uint16_33VoltageConversion / 4096) * 3.3f) * 2 ;
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9da 	bl	8000cb8 <__aeabi_ui2f>
 8001904:	4603      	mov	r3, r0
 8001906:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fae0 	bl	8000ed0 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	4957      	ldr	r1, [pc, #348]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa27 	bl	8000d68 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f91a 	bl	8000b58 <__addsf3>
 8001924:	4603      	mov	r3, r0
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	Loc_float32VoltageValue = ((Loc_float32_33VoltageValue - Loc_float32EnteredVoltageValue) * 11) - 3.3f;
 800192a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800192e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001932:	f7ff f90f 	bl	8000b54 <__aeabi_fsub>
 8001936:	4603      	mov	r3, r0
 8001938:	494e      	ldr	r1, [pc, #312]	@ (8001a74 <SCommands_GetSupplyVoltages+0x244>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa14 	bl	8000d68 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	494b      	ldr	r1, [pc, #300]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f905 	bl	8000b54 <__aeabi_fsub>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf((glbl_uint8VoltageBuffer + 1), (sizeof(glbl_uint8VoltageBuffer) - 1), "%.*f", 3,Loc_float32FinalVoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[1] + 1),Loc_float32VoltageValue, 3);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	3320      	adds	r3, #32
 8001956:	3301      	adds	r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800195e:	4618      	mov	r0, r3
 8001960:	f001 f9f4 	bl	8002d4c <float_to_string_manual>
	glbl_uint8VoltageBuffer[1][0] = '-';
 8001964:	232d      	movs	r3, #45	@ 0x2d
 8001966:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	/************************************************P5*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_5, &Loc_uint16VoltageConversion);
 800196a:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 800196e:	4619      	mov	r1, r3
 8001970:	2003      	movs	r0, #3
 8001972:	f002 f9c3 	bl	8003cfc <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = ((float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f)) * 2;
 8001976:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f99c 	bl	8000cb8 <__aeabi_ui2f>
 8001980:	4603      	mov	r3, r0
 8001982:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff faa2 	bl	8000ed0 <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	4938      	ldr	r1, [pc, #224]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9e9 	bl	8000d68 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f8dc 	bl	8000b58 <__addsf3>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[2]),Loc_float32VoltageValue, 3);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	3340      	adds	r3, #64	@ 0x40
 80019ac:	2203      	movs	r2, #3
 80019ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 f9ca 	bl	8002d4c <float_to_string_manual>

	/***********************************************P3.3****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16VoltageConversion);
 80019b8:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 80019bc:	4619      	mov	r1, r3
 80019be:	2000      	movs	r0, #0
 80019c0:	f002 f99c 	bl	8003cfc <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 2;
 80019c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f975 	bl	8000cb8 <__aeabi_ui2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fa7b 	bl	8000ed0 <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	4924      	ldr	r1, [pc, #144]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9c2 	bl	8000d68 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f8b5 	bl	8000b58 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[3]),Loc_float32VoltageValue, 3);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	3360      	adds	r3, #96	@ 0x60
 80019fa:	2203      	movs	r2, #3
 80019fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 f9a3 	bl	8002d4c <float_to_string_manual>

	/***********************************************Supply 12***********************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_12, &Loc_uint16VoltageConversion);
 8001a06:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f002 f975 	bl	8003cfc <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 8001a12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f94e 	bl	8000cb8 <__aeabi_ui2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa54 	bl	8000ed0 <__aeabi_fdiv>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4911      	ldr	r1, [pc, #68]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f99b 	bl	8000d68 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f995 	bl	8000d68 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[4]),Loc_float32VoltageValue, 3);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	3380      	adds	r3, #128	@ 0x80
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 f97b 	bl	8002d4c <float_to_string_manual>

	/*******************************************Send Voltages***********************************************/
	HESP32_SendVoltages(glbl_uint8VoltageBuffer);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fcb6 	bl	80033cc <HESP32_SendVoltages>
	SpectroStatus_SetNewStatus(IDLE);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 f815 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001a66:	bf00      	nop
 8001a68:	37b8      	adds	r7, #184	@ 0xb8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40533333 	.word	0x40533333
 8001a74:	41300000 	.word	0x41300000

08001a78 <SCommands_SendCurrentMotorsSteps>:


void SCommands_SendCurrentMotorsSteps   (void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f001 f806 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32MotorsCurrentSteps[3] = {0};
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
	uint32 Loc_uint32CurrentWL = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
	uint8 Loc_uint8Index = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]

	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	e00c      	b.n	8001ab8 <SCommands_SendCurrentMotorsSteps+0x40>
	{
		HMOTOR_GetCurrentMotorSteps(Loc_uint8Index, &Loc_uint32MotorsCurrentSteps[Loc_uint8Index]);
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f107 0208 	add.w	r2, r7, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	441a      	add	r2, r3
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fe55 	bl	800475c <HMOTOR_GetCurrentMotorSteps>
	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d9ef      	bls.n	8001a9e <SCommands_SendCurrentMotorsSteps+0x26>
	}
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fe69 	bl	8004798 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(Loc_uint32MotorsCurrentSteps, &Loc_uint32CurrentWL, 3);
 8001ac6:	1d39      	adds	r1, r7, #4
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	2203      	movs	r2, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fb3e 	bl	8003150 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 ffdb 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <SCommands_HomeLampMotor>:


void SCommands_HomeLampMotor    (void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 ffd1 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32LampCurrentSteps = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f002 fd7e 	bl	80045f8 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampCurrentSteps);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	2000      	movs	r0, #0
 8001b02:	f002 fe2b 	bl	800475c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b06:	463b      	mov	r3, r7
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fe45 	bl	8004798 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32LampCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b0e:	4639      	mov	r1, r7
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2201      	movs	r2, #1
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fb1b 	bl	8003150 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 ffb8 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SCommands_HomeWLSelectMotor>:


void SCommands_HomeWLSelectMotor (void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 ffae 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32WLCurrentSteps = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f002 fd5b 	bl	80045f8 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32WLCurrentSteps);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	2002      	movs	r0, #2
 8001b48:	f002 fe08 	bl	800475c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fe22 	bl	8004798 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32WLCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b54:	4639      	mov	r1, r7
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 faf8 	bl	8003150 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 ff95 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <SCommands_HomeFilterSelectMotor>:


void SCommands_HomeFilterSelectMotor  (void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f000 ff8b 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32FilterCurrentSteps = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f002 fd38 	bl	80045f8 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_FILTER_SELECT, &Loc_uint32FilterCurrentSteps);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f002 fde5 	bl	800475c <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b92:	463b      	mov	r3, r7
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fdff 	bl	8004798 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32FilterCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b9a:	4639      	mov	r1, r7
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fad5 	bl	8003150 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 ff72 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SCommands_SendCurrentWL>:


void SCommands_SendCurrentWL    (void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 ff68 	bl	8002a90 <SpectroStatus_SetNewStatus>
	uint8 P_uint8WL[20] = {0};
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
	uint32 Loc_uint32CurrentWL = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fddd 	bl	8004798 <HMOTOR_GetCurrentWL>
	//snprintf(P_uint8WL, sizeof(P_uint8WL), "%d", Loc_uint32CurrentWL);
	float_to_string_manual(P_uint8WL, Loc_uint32CurrentWL, 0);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f869 	bl	8000cb8 <__aeabi_ui2f>
 8001be6:	4601      	mov	r1, r0
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 f8ad 	bl	8002d4c <float_to_string_manual>
	HESP32_SendCommand(P_uint8WL);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fa4d 	bl	8003094 <HESP32_SendCommand>
	SpectroStatus_SetNewStatus(IDLE);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 ff48 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <SCommands_GetLampMotorPosition>:

void SCommands_GetLampMotorPosition(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 ff3e 	bl	8002a90 <SpectroStatus_SetNewStatus>

	uint32 Loc_uint32LampSteps = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampSteps);
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f002 fd9d 	bl	800475c <HMOTOR_GetCurrentMotorSteps>

	if(Loc_uint32LampSteps == 0)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <SCommands_GetLampMotorPosition+0x28>
	{
		HESP32_SendCommand("UV Lamp");
 8001c28:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <SCommands_GetLampMotorPosition+0x3c>)
 8001c2a:	f001 fa33 	bl	8003094 <HESP32_SendCommand>
	}
	else
	{
		/*Do nothing*/
	}
}
 8001c2e:	e005      	b.n	8001c3c <SCommands_GetLampMotorPosition+0x34>
	else if(Loc_uint32LampSteps == 100)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d102      	bne.n	8001c3c <SCommands_GetLampMotorPosition+0x34>
		HESP32_SendCommand("VI Lamp");
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <SCommands_GetLampMotorPosition+0x40>)
 8001c38:	f001 fa2c 	bl	8003094 <HESP32_SendCommand>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800c2b8 	.word	0x0800c2b8
 8001c48:	0800c2c0 	.word	0x0800c2c0

08001c4c <SCommands_SetLampMotorVisible>:

void SCommands_SetLampMotorVisible(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f002 f994 	bl	8003f80 <HMOTOR_MoveLampMotor>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <SCommands_SetLampMotorVisible+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <SCommands_SetLampMotorVisible+0x2c>)
 8001c64:	f001 fa16 	bl	8003094 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c68:	e002      	b.n	8001c70 <SCommands_SetLampMotorVisible+0x24>
		HESP32_SendCommand("failed to move");
 8001c6a:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <SCommands_SetLampMotorVisible+0x30>)
 8001c6c:	f001 fa12 	bl	8003094 <HESP32_SendCommand>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800c2c8 	.word	0x0800c2c8
 8001c7c:	0800c2d0 	.word	0x0800c2d0

08001c80 <SCommands_SetLampMotorUV>:

void SCommands_SetLampMotorUV(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f002 f97a 	bl	8003f80 <HMOTOR_MoveLampMotor>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <SCommands_SetLampMotorUV+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <SCommands_SetLampMotorUV+0x2c>)
 8001c98:	f001 f9fc 	bl	8003094 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c9c:	e002      	b.n	8001ca4 <SCommands_SetLampMotorUV+0x24>
		HESP32_SendCommand("failed to move");
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <SCommands_SetLampMotorUV+0x30>)
 8001ca0:	f001 f9f8 	bl	8003094 <HESP32_SendCommand>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800c2c8 	.word	0x0800c2c8
 8001cb0:	0800c2d0 	.word	0x0800c2d0

08001cb4 <SCommands_SendCurrentDateTime>:

void SCommands_SendCurrentDateTime(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 fee8 	bl	8002a90 <SpectroStatus_SetNewStatus>
	Sdate_t current_date;
	Stime_t current_time;

	MRTC_GetDateAndTime(&current_date, &current_time);
 8001cc0:	463a      	mov	r2, r7
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fab2 	bl	8006230 <MRTC_GetDateAndTime>

	HESP32_SendDateTime(&current_date, &current_time);
 8001ccc:	463a      	mov	r2, r7
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fa8b 	bl	80031ee <HESP32_SendDateTime>
	SpectroStatus_SetNewStatus(IDLE);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 fed9 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <SCommands_SendCurrentDetectorValues>:

void SCommands_SendCurrentDetectorValues(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 fece 	bl	8002a90 <SpectroStatus_SetNewStatus>
	float32 Loc_float32Readings[4] = {0.0f};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
	float32 Loc_float32SampleReading = 0.0f;
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
	float32 Loc_float32ReferenceReading = 0.0f;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
	float32 Loc_float32Gain[2] = {0.0f};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]

	read_reference_voltage(&Loc_float32ReferenceReading, &Loc_float32Gain[0]);
 8001d16:	463a      	mov	r2, r7
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fcf2 	bl	8002708 <read_reference_voltage>

	if((Loc_float32Gain[0] > 0.98f) && (Loc_float32Gain[0] < 1.01f))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4931      	ldr	r1, [pc, #196]	@ (8001dec <SCommands_SendCurrentDetectorValues+0x104>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f9d9 	bl	80010e0 <__aeabi_fcmpgt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00c      	beq.n	8001d4e <SCommands_SendCurrentDetectorValues+0x66>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	492e      	ldr	r1, [pc, #184]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f9b3 	bl	80010a4 <__aeabi_fcmplt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <SCommands_SendCurrentDetectorValues+0x66>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e011      	b.n	8001d72 <SCommands_SendCurrentDetectorValues+0x8a>
	}
	else if(Loc_float32Gain[0] > 1.01f)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4927      	ldr	r1, [pc, #156]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f9c4 	bl	80010e0 <__aeabi_fcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <SCommands_SendCurrentDetectorValues+0x8a>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading / Loc_float32Gain[0];
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8b3 	bl	8000ed0 <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	617b      	str	r3, [r7, #20]
	else
	{
		/*Do nothing*/
	}

	read_sample_voltage(&Loc_float32SampleReading, &Loc_float32Gain[1]);
 8001d72:	463b      	mov	r3, r7
 8001d74:	1d1a      	adds	r2, r3, #4
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fda7 	bl	80028d0 <read_sample_voltage>

	if((Loc_float32Gain[1] > 0.98f) && (Loc_float32Gain[1] < 1.01f))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4919      	ldr	r1, [pc, #100]	@ (8001dec <SCommands_SendCurrentDetectorValues+0x104>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f9aa 	bl	80010e0 <__aeabi_fcmpgt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <SCommands_SendCurrentDetectorValues+0xc4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4916      	ldr	r1, [pc, #88]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f984 	bl	80010a4 <__aeabi_fcmplt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <SCommands_SendCurrentDetectorValues+0xc4>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e011      	b.n	8001dd0 <SCommands_SendCurrentDetectorValues+0xe8>
	}
	else if(Loc_float32Gain[1] > 1.01f)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4910      	ldr	r1, [pc, #64]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f995 	bl	80010e0 <__aeabi_fcmpgt>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <SCommands_SendCurrentDetectorValues+0xe8>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading / Loc_float32Gain[1];
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f884 	bl	8000ed0 <__aeabi_fdiv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	61fb      	str	r3, [r7, #28]
	{
		/*Do nothing*/
	}


	HESP32_SendAllDetectorValues(Loc_float32Readings, Loc_float32Gain);
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fb23 	bl	8003424 <HESP32_SendAllDetectorValues>
	SpectroStatus_SetNewStatus(IDLE);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 fe56 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	3f7ae148 	.word	0x3f7ae148
 8001df0:	3f8147ae 	.word	0x3f8147ae

08001df4 <SCommands_UpdateDateTime>:

void SCommands_UpdateDateTime(uint8* P_uint8DateTime)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f000 fe47 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8DateTime != NULL_PTR)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8089 	beq.w	8001f1c <SCommands_UpdateDateTime+0x128>
	{
		Sdate_t date;
		Stime_t time;

		uint8* Loc_PToken = NULL_PTR;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
		uint8 Loc_uint8Count = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74fb      	strb	r3, [r7, #19]
		Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8001e12:	2301      	movs	r3, #1
 8001e14:	74bb      	strb	r3, [r7, #18]

		Loc_PToken = strtok(P_uint8DateTime, "/");
 8001e16:	4946      	ldr	r1, [pc, #280]	@ (8001f30 <SCommands_UpdateDateTime+0x13c>)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 ffd9 	bl	8007dd0 <strtok>
 8001e1e:	6178      	str	r0, [r7, #20]

		if(Loc_PToken != NULL_PTR)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d05e      	beq.n	8001ee4 <SCommands_UpdateDateTime+0xf0>
		{
			date.m_months = atoi(Loc_PToken);
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f005 f820 	bl	8006e6c <atoi>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	73bb      	strb	r3, [r7, #14]

			while(Loc_PToken != NULL_PTR)
 8001e32:	e054      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
			{
				Loc_uint8Count++;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	3301      	adds	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]

				if(Loc_uint8Count < 3)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d81a      	bhi.n	8001e76 <SCommands_UpdateDateTime+0x82>
				{
					Loc_PToken = strtok(NULL_PTR, "/");
 8001e40:	493b      	ldr	r1, [pc, #236]	@ (8001f30 <SCommands_UpdateDateTime+0x13c>)
 8001e42:	2000      	movs	r0, #0
 8001e44:	f005 ffc4 	bl	8007dd0 <strtok>
 8001e48:	6178      	str	r0, [r7, #20]

					if(Loc_PToken != NULL_PTR)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d046      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d002      	beq.n	8001e5c <SCommands_UpdateDateTime+0x68>
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d007      	beq.n	8001e6a <SCommands_UpdateDateTime+0x76>
 8001e5a:	e040      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						{
						case 1:
						{
							date.m_days = atoi(Loc_PToken);
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f005 f805 	bl	8006e6c <atoi>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73fb      	strb	r3, [r7, #15]
							break;
 8001e68:	e039      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						case 2:
						{
							Loc_PToken = strtok(Loc_PToken, " ");
 8001e6a:	4932      	ldr	r1, [pc, #200]	@ (8001f34 <SCommands_UpdateDateTime+0x140>)
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f005 ffaf 	bl	8007dd0 <strtok>
 8001e72:	6178      	str	r0, [r7, #20]
							break;
 8001e74:	e033      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						}
					}
				}
				else if(Loc_uint8Count == 3)
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d114      	bne.n	8001ea6 <SCommands_UpdateDateTime+0xb2>
				{
					date.m_years = atoi(Loc_PToken);
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f004 fff5 	bl	8006e6c <atoi>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	81bb      	strh	r3, [r7, #12]
					Loc_PToken = strtok(NULL_PTR, ":");
 8001e88:	492b      	ldr	r1, [pc, #172]	@ (8001f38 <SCommands_UpdateDateTime+0x144>)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f005 ffa0 	bl	8007dd0 <strtok>
 8001e90:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						time.m_hours = atoi(Loc_PToken);
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f004 ffe7 	bl	8006e6c <atoi>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	723b      	strb	r3, [r7, #8]
 8001ea4:	e01b      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
					}
				}
				else
				{
					Loc_PToken = strtok(NULL_PTR, ":");
 8001ea6:	4924      	ldr	r1, [pc, #144]	@ (8001f38 <SCommands_UpdateDateTime+0x144>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f005 ff91 	bl	8007dd0 <strtok>
 8001eae:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d013      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d002      	beq.n	8001ec2 <SCommands_UpdateDateTime+0xce>
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d007      	beq.n	8001ed0 <SCommands_UpdateDateTime+0xdc>
 8001ec0:	e00d      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						{
						case 4:
						{
							time.m_minutes = atoi(Loc_PToken);
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f004 ffd2 	bl	8006e6c <atoi>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	727b      	strb	r3, [r7, #9]
							break;
 8001ece:	e006      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						case 5:
						{
							time.m_seconds = atoi(Loc_PToken);
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f004 ffcb 	bl	8006e6c <atoi>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	72bb      	strb	r3, [r7, #10]
							break;
 8001edc:	bf00      	nop
			while(Loc_PToken != NULL_PTR)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1a7      	bne.n	8001e34 <SCommands_UpdateDateTime+0x40>
					}
				}
			}
		}

		if(Loc_uint8Count == 6)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d114      	bne.n	8001f14 <SCommands_UpdateDateTime+0x120>
		{
			Loc_uint8FuncStatus = MRTC_SetDateAndTime(&date, &time);
 8001eea:	f107 0208 	add.w	r2, r7, #8
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 f947 	bl	8006188 <MRTC_SetDateAndTime>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74bb      	strb	r3, [r7, #18]
			if(Loc_uint8FuncStatus == E_OK)
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <SCommands_UpdateDateTime+0x118>
			{
				HESP32_SendCommand("time update success");
 8001f04:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <SCommands_UpdateDateTime+0x148>)
 8001f06:	f001 f8c5 	bl	8003094 <HESP32_SendCommand>
 8001f0a:	e00a      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
			}
			else
			{
				HESP32_SendCommand("time update failed");
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f0e:	f001 f8c1 	bl	8003094 <HESP32_SendCommand>
 8001f12:	e006      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
			}
		}
		else
		{
			HESP32_SendCommand("time update failed");
 8001f14:	480a      	ldr	r0, [pc, #40]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f16:	f001 f8bd 	bl	8003094 <HESP32_SendCommand>
 8001f1a:	e002      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
		}
	}
	else
	{
		HESP32_SendCommand("time update failed");
 8001f1c:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f1e:	f001 f8b9 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 fdb4 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800c2e0 	.word	0x0800c2e0
 8001f34:	0800c2e4 	.word	0x0800c2e4
 8001f38:	0800c2e8 	.word	0x0800c2e8
 8001f3c:	0800c2ec 	.word	0x0800c2ec
 8001f40:	0800c300 	.word	0x0800c300

08001f44 <SCommands_SaveFilterMotorCalibSteps>:
	SpectroStatus_SetNewStatus(IDLE);
}


void SCommands_SaveFilterMotorCalibSteps          (uint8* P_uint8MotorSteps)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f000 fd9f 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8MotorSteps != NULL_PTR)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00f      	beq.n	8001f78 <SCommands_SaveFilterMotorCalibSteps+0x34>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8MotorSteps);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f004 ff87 	bl	8006e6c <atoi>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint32FilterSteps, 4);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2204      	movs	r2, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	20d8      	movs	r0, #216	@ 0xd8
 8001f6c:	f000 fe62 	bl	8002c34 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001f70:	4806      	ldr	r0, [pc, #24]	@ (8001f8c <SCommands_SaveFilterMotorCalibSteps+0x48>)
 8001f72:	f001 f88f 	bl	8003094 <HESP32_SendCommand>
 8001f76:	e002      	b.n	8001f7e <SCommands_SaveFilterMotorCalibSteps+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <SCommands_SaveFilterMotorCalibSteps+0x4c>)
 8001f7a:	f001 f88b 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 fd86 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	0800c314 	.word	0x0800c314
 8001f90:	0800c31c 	.word	0x0800c31c

08001f94 <SCommands_SaveFilterMotorCalibWL>:


void SCommands_SaveFilterMotorCalibWL          (uint8* P_uint8Wavelength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f000 fd77 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8Wavelength != NULL_PTR)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00f      	beq.n	8001fc8 <SCommands_SaveFilterMotorCalibWL+0x34>
	{
		uint32 Loc_uint32FilterWL = atoi(P_uint8Wavelength);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f004 ff5f 	bl	8006e6c <atoi>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_WL_MEM_ADDRESS, &Loc_uint32FilterWL, 4);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	20d0      	movs	r0, #208	@ 0xd0
 8001fbc:	f000 fe3a 	bl	8002c34 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001fc0:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <SCommands_SaveFilterMotorCalibWL+0x48>)
 8001fc2:	f001 f867 	bl	8003094 <HESP32_SendCommand>
 8001fc6:	e002      	b.n	8001fce <SCommands_SaveFilterMotorCalibWL+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001fc8:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <SCommands_SaveFilterMotorCalibWL+0x4c>)
 8001fca:	f001 f863 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 fd5e 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	0800c314 	.word	0x0800c314
 8001fe0:	0800c31c 	.word	0x0800c31c

08001fe4 <SCommands_StartOperation>:
}
float32 gain_ref;
float32 gain_sample;

void SCommands_StartOperation         (uint8* P_uint8ScanParam)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b08f      	sub	sp, #60	@ 0x3c
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f000 fd4f 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8ScanParam != NULL_PTR)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8099 	beq.w	800212c <SCommands_StartOperation+0x148>
	{
		//Loc_float32ScanParameters[0] --> start wavelength
		//Loc_float32ScanParameters[1] --> end wavelength
		//Loc_float32ScanParameters[2] --> wavelength resolution
		float32 Loc_float32ScanParameters[3] = {0.0};
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
		uint8* P_uint8Token = NULL_PTR;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
		uint8 Loc_uint8Index = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		// separate the string input P_uint8ScanParam to three strings
		P_uint8Token = strtok(P_uint8ScanParam, " ");
 8002010:	494a      	ldr	r1, [pc, #296]	@ (800213c <SCommands_StartOperation+0x158>)
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f005 fedc 	bl	8007dd0 <strtok>
 8002018:	62f8      	str	r0, [r7, #44]	@ 0x2c
		Loc_float32ScanParameters[Loc_uint8Index] = atof(P_uint8Token);
 800201a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800201c:	f004 ff23 	bl	8006e66 <atof>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	f897 402b 	ldrb.w	r4, [r7, #43]	@ 0x2b
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fd3e 	bl	8000aac <__aeabi_d2f>
 8002030:	4602      	mov	r2, r0
 8002032:	00a3      	lsls	r3, r4, #2
 8002034:	3330      	adds	r3, #48	@ 0x30
 8002036:	443b      	add	r3, r7
 8002038:	f843 2c18 	str.w	r2, [r3, #-24]
		Loc_uint8Index++;
 800203c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002040:	3301      	adds	r3, #1
 8002042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 8002046:	e019      	b.n	800207c <SCommands_StartOperation+0x98>
		{
			P_uint8Token = strtok(NULL_PTR, " ");
 8002048:	493c      	ldr	r1, [pc, #240]	@ (800213c <SCommands_StartOperation+0x158>)
 800204a:	2000      	movs	r0, #0
 800204c:	f005 fec0 	bl	8007dd0 <strtok>
 8002050:	62f8      	str	r0, [r7, #44]	@ 0x2c
			Loc_float32ScanParameters[Loc_uint8Index++] = atof(P_uint8Token);
 8002052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002054:	f004 ff07 	bl	8006e66 <atof>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002060:	1c48      	adds	r0, r1, #1
 8002062:	f887 002b 	strb.w	r0, [r7, #43]	@ 0x2b
 8002066:	460c      	mov	r4, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fd1e 	bl	8000aac <__aeabi_d2f>
 8002070:	4602      	mov	r2, r0
 8002072:	00a3      	lsls	r3, r4, #2
 8002074:	3330      	adds	r3, #48	@ 0x30
 8002076:	443b      	add	r3, r7
 8002078:	f843 2c18 	str.w	r2, [r3, #-24]
		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 800207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <SCommands_StartOperation+0xa6>
 8002082:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002086:	2b02      	cmp	r3, #2
 8002088:	d9de      	bls.n	8002048 <SCommands_StartOperation+0x64>
		//			//HESP32_SendCommand("done");
		//        }



		if(Loc_uint8Index == 3)
 800208a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800208e:	2b03      	cmp	r3, #3
 8002090:	d14c      	bne.n	800212c <SCommands_StartOperation+0x148>
		{
			//HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
			// Move the motor to the location of the first wavelength


			float32 Loc_float32Index = Loc_float32ScanParameters[0];
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
			float32 Loc_float32RefIntensity = 0.0;
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
			float32 Loc_float32SampleIntensity = 0.0;
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]

			Sdate_t Loc_SCurrentDate = {0};
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
			Stime_t Loc_SCurrentTime = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2100      	movs	r1, #0
 80020ac:	460a      	mov	r2, r1
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	460a      	mov	r2, r1
 80020b2:	709a      	strb	r2, [r3, #2]

			while(Loc_float32Index < Loc_float32ScanParameters[1])
 80020b4:	e032      	b.n	800211c <SCommands_StartOperation+0x138>
			{
				HMOTOR_MoveMotors(Loc_float32Index);
 80020b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020b8:	f7fe f9d0 	bl	800045c <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f002 f9be 	bl	8004444 <HMOTOR_MoveMotors>
				read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	491c      	ldr	r1, [pc, #112]	@ (8002140 <SCommands_StartOperation+0x15c>)
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fb1a 	bl	8002708 <read_reference_voltage>
				read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	491a      	ldr	r1, [pc, #104]	@ (8002144 <SCommands_StartOperation+0x160>)
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fbf8 	bl	80028d0 <read_sample_voltage>
				MRTC_GetDateAndTime(&Loc_SCurrentDate, &Loc_SCurrentTime);
 80020e0:	f107 0208 	add.w	r2, r7, #8
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f8a0 	bl	8006230 <MRTC_GetDateAndTime>
				HESP32_SendIntensities(Loc_float32Index, Loc_float32RefIntensity, Loc_float32SampleIntensity, &Loc_SCurrentDate, &Loc_SCurrentTime);
 80020f0:	6979      	ldr	r1, [r7, #20]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f107 000c 	add.w	r0, r7, #12
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f001 f8c7 	bl	8003294 <HESP32_SendIntensities>
				MSTK_uint8Delay(1000);
 8002106:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800210a:	f004 facb 	bl	80066a4 <MSTK_uint8Delay>
				Loc_float32Index += Loc_float32ScanParameters[2];
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	4619      	mov	r1, r3
 8002112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002114:	f7fe fd20 	bl	8000b58 <__addsf3>
 8002118:	4603      	mov	r3, r0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
			while(Loc_float32Index < Loc_float32ScanParameters[1])
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4619      	mov	r1, r3
 8002120:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002122:	f7fe ffbf 	bl	80010a4 <__aeabi_fcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1c4      	bne.n	80020b6 <SCommands_StartOperation+0xd2>
	}
	else
	{
		/*Do nothing*/
	}
	SpectroStatus_SetNewStatus(IDLE);
 800212c:	2000      	movs	r0, #0
 800212e:	f000 fcaf 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8002132:	bf00      	nop
 8002134:	3734      	adds	r7, #52	@ 0x34
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	0800c2e4 	.word	0x0800c2e4
 8002140:	20000634 	.word	0x20000634
 8002144:	20000638 	.word	0x20000638

08002148 <SCommands_SetReferenceGain>:

void SCommands_SetReferenceGain(uint8* P_uint8GainToBeSet)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002150:	2001      	movs	r0, #1
 8002152:	f000 fc9d 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d011      	beq.n	8002180 <SCommands_SetReferenceGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f004 fe82 	bl	8006e66 <atof>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fc9f 	bl	8000aac <__aeabi_d2f>
 800216e:	4603      	mov	r3, r0
 8002170:	60fb      	str	r3, [r7, #12]
		Set_Reference_Gain(Loc_uint32GainToBeSet);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f001 faa2 	bl	80036bc <Set_Reference_Gain>
		HESP32_SendCommand("applied");
 8002178:	4806      	ldr	r0, [pc, #24]	@ (8002194 <SCommands_SetReferenceGain+0x4c>)
 800217a:	f000 ff8b 	bl	8003094 <HESP32_SendCommand>
 800217e:	e002      	b.n	8002186 <SCommands_SetReferenceGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <SCommands_SetReferenceGain+0x50>)
 8002182:	f000 ff87 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 fc82 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0800c32c 	.word	0x0800c32c
 8002198:	0800c334 	.word	0x0800c334

0800219c <SCommands_SetSampleGain>:
void SCommands_SetSampleGain(uint8* P_uint8GainToBeSet)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f000 fc73 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d011      	beq.n	80021d4 <SCommands_SetSampleGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 fe58 	bl	8006e66 <atof>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc75 	bl	8000aac <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	60fb      	str	r3, [r7, #12]
		Set_Sample_Gain(Loc_uint32GainToBeSet);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 fa56 	bl	8003678 <Set_Sample_Gain>
		HESP32_SendCommand("applied");
 80021cc:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <SCommands_SetSampleGain+0x4c>)
 80021ce:	f000 ff61 	bl	8003094 <HESP32_SendCommand>
 80021d2:	e002      	b.n	80021da <SCommands_SetSampleGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <SCommands_SetSampleGain+0x50>)
 80021d6:	f000 ff5d 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 fc58 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	0800c32c 	.word	0x0800c32c
 80021ec:	0800c334 	.word	0x0800c334

080021f0 <SCommands_MoveFilterRight>:

void SCommands_MoveFilterRight(uint8* P_uint8FilterSteps)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f000 fc49 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <SCommands_MoveFilterRight+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 fe31 	bl	8006e6c <atoi>
 800220a:	4603      	mov	r3, r0
 800220c:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 800220e:	2304      	movs	r3, #4
 8002210:	2201      	movs	r2, #1
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	2001      	movs	r0, #1
 8002216:	f001 fe25 	bl	8003e64 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800221a:	4807      	ldr	r0, [pc, #28]	@ (8002238 <SCommands_MoveFilterRight+0x48>)
 800221c:	f000 ff3a 	bl	8003094 <HESP32_SendCommand>
 8002220:	e002      	b.n	8002228 <SCommands_MoveFilterRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <SCommands_MoveFilterRight+0x4c>)
 8002224:	f000 ff36 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002228:	2000      	movs	r0, #0
 800222a:	f000 fc31 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	0800c2c8 	.word	0x0800c2c8
 800223c:	0800c2d0 	.word	0x0800c2d0

08002240 <SCommands_MoveFilterLeft>:
void SCommands_MoveFilterLeft(uint8* P_uint8FilterSteps)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fc21 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <SCommands_MoveFilterLeft+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f004 fe09 	bl	8006e6c <atoi>
 800225a:	4603      	mov	r3, r0
 800225c:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 800225e:	2304      	movs	r3, #4
 8002260:	2202      	movs	r2, #2
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	2001      	movs	r0, #1
 8002266:	f001 fdfd 	bl	8003e64 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800226a:	4807      	ldr	r0, [pc, #28]	@ (8002288 <SCommands_MoveFilterLeft+0x48>)
 800226c:	f000 ff12 	bl	8003094 <HESP32_SendCommand>
 8002270:	e002      	b.n	8002278 <SCommands_MoveFilterLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002272:	4806      	ldr	r0, [pc, #24]	@ (800228c <SCommands_MoveFilterLeft+0x4c>)
 8002274:	f000 ff0e 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002278:	2000      	movs	r0, #0
 800227a:	f000 fc09 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	0800c2c8 	.word	0x0800c2c8
 800228c:	0800c2d0 	.word	0x0800c2d0

08002290 <SCommands_SelectFilter>:
void SCommands_SelectFilter(uint8* P_uint8FilterSelect)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002298:	2001      	movs	r0, #1
 800229a:	f000 fbf9 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSelect != NULL_PTR)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <SCommands_SelectFilter+0x2e>
	{
		HMOTOR_Filter_Select_t Loc_uint8FilterSelect = (P_uint8FilterSelect[1] - '0') - 1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3301      	adds	r3, #1
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3b31      	subs	r3, #49	@ 0x31
 80022ac:	73fb      	strb	r3, [r7, #15]
		HMOTOR_MoveFilterMotor(Loc_uint8FilterSelect);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fe97 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
		HESP32_SendCommand("moved");
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <SCommands_SelectFilter+0x44>)
 80022b8:	f000 feec 	bl	8003094 <HESP32_SendCommand>
 80022bc:	e002      	b.n	80022c4 <SCommands_SelectFilter+0x34>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <SCommands_SelectFilter+0x48>)
 80022c0:	f000 fee8 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f000 fbe3 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	0800c2c8 	.word	0x0800c2c8
 80022d8:	0800c2d0 	.word	0x0800c2d0

080022dc <SCommands_SelectGratingWL>:

void SCommands_SelectGratingWL(uint8* P_uint8WL)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f000 fbd3 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8WL != NULL_PTR)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d011      	beq.n	8002314 <SCommands_SelectGratingWL+0x38>
	{
		float32 Loc_float32WL = atof(P_uint8WL);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f004 fdb8 	bl	8006e66 <atof>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fbd5 	bl	8000aac <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	60fb      	str	r3, [r7, #12]
		HMOTOR_MoveWLSelectMotor(Loc_float32WL);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f002 f808 	bl	800431c <HMOTOR_MoveWLSelectMotor>
		HESP32_SendCommand("moved");
 800230c:	4806      	ldr	r0, [pc, #24]	@ (8002328 <SCommands_SelectGratingWL+0x4c>)
 800230e:	f000 fec1 	bl	8003094 <HESP32_SendCommand>
 8002312:	e002      	b.n	800231a <SCommands_SelectGratingWL+0x3e>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <SCommands_SelectGratingWL+0x50>)
 8002316:	f000 febd 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 fbb8 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	0800c2c8 	.word	0x0800c2c8
 800232c:	0800c2d0 	.word	0x0800c2d0

08002330 <SCommands_MoveGratingLeft>:
void SCommands_MoveGratingLeft(uint8* P_uint8WLSteps)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002338:	2001      	movs	r0, #1
 800233a:	f000 fba9 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <SCommands_MoveGratingLeft+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f004 fd91 	bl	8006e6c <atoi>
 800234a:	4603      	mov	r3, r0
 800234c:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 800234e:	2304      	movs	r3, #4
 8002350:	2202      	movs	r2, #2
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	2002      	movs	r0, #2
 8002356:	f001 fd85 	bl	8003e64 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <SCommands_MoveGratingLeft+0x48>)
 800235c:	f000 fe9a 	bl	8003094 <HESP32_SendCommand>
 8002360:	e002      	b.n	8002368 <SCommands_MoveGratingLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <SCommands_MoveGratingLeft+0x4c>)
 8002364:	f000 fe96 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002368:	2000      	movs	r0, #0
 800236a:	f000 fb91 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	0800c2c8 	.word	0x0800c2c8
 800237c:	0800c2d0 	.word	0x0800c2d0

08002380 <SCommands_MoveGratingRight>:
void SCommands_MoveGratingRight(uint8* P_uint8WLSteps)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002388:	2001      	movs	r0, #1
 800238a:	f000 fb81 	bl	8002a90 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <SCommands_MoveGratingRight+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f004 fd69 	bl	8006e6c <atoi>
 800239a:	4603      	mov	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 800239e:	2304      	movs	r3, #4
 80023a0:	2201      	movs	r2, #1
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	2002      	movs	r0, #2
 80023a6:	f001 fd5d 	bl	8003e64 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 80023aa:	4807      	ldr	r0, [pc, #28]	@ (80023c8 <SCommands_MoveGratingRight+0x48>)
 80023ac:	f000 fe72 	bl	8003094 <HESP32_SendCommand>
 80023b0:	e002      	b.n	80023b8 <SCommands_MoveGratingRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80023b2:	4806      	ldr	r0, [pc, #24]	@ (80023cc <SCommands_MoveGratingRight+0x4c>)
 80023b4:	f000 fe6e 	bl	8003094 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 fb69 	bl	8002a90 <SpectroStatus_SetNewStatus>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800c2c8 	.word	0x0800c2c8
 80023cc:	0800c2d0 	.word	0x0800c2d0

080023d0 <SPECTRO_InitSystem>:
#include "../../APP/SpectroStatus/SpectroStatus_Interface.h"
#include "../../APP/Signal_Conditioning/signal_conditioning.h"


Std_ReturnType SPECTRO_InitSystem(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(INITIALIZING);
 80023d6:	2002      	movs	r0, #2
 80023d8:	f000 fb5a 	bl	8002a90 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80023dc:	2301      	movs	r3, #1
 80023de:	71fb      	strb	r3, [r7, #7]
	Loc_uint8InitStatus = SPECTRO_InitSoftware();
 80023e0:	f000 f81c 	bl	800241c <SPECTRO_InitSoftware>
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8InitStatus == E_OK)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10e      	bne.n	800240c <SPECTRO_InitSystem+0x3c>
	{
		Loc_uint8InitStatus = SPECTRO_InitHardware();
 80023ee:	f000 f877 	bl	80024e0 <SPECTRO_InitHardware>
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <SPECTRO_InitSystem+0x34>
		{
			SpectroStatus_SetNewStatus(IDLE);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f000 fb47 	bl	8002a90 <SpectroStatus_SetNewStatus>
 8002402:	e006      	b.n	8002412 <SPECTRO_InitSystem+0x42>
		}
		else
		{
			SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 fb43 	bl	8002a90 <SpectroStatus_SetNewStatus>
 800240a:	e002      	b.n	8002412 <SPECTRO_InitSystem+0x42>
		}
	}
	else
	{
		SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 fb3f 	bl	8002a90 <SpectroStatus_SetNewStatus>
	}
	return Loc_uint8InitStatus;
 8002412:	79fb      	ldrb	r3, [r7, #7]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <SPECTRO_InitSoftware>:

Std_ReturnType SPECTRO_InitSoftware(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
	/***********************************Initialize System Clock***********************************/
	MRCC_InitClock();
 8002422:	f003 fcbb 	bl	8005d9c <MRCC_InitClock>

	/***********************************Enable Peripherals' clocks***********************************/

	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPA_EN);
 8002426:	2102      	movs	r1, #2
 8002428:	2003      	movs	r0, #3
 800242a:	f003 fcff 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPB_EN);
 800242e:	2103      	movs	r1, #3
 8002430:	2003      	movs	r0, #3
 8002432:	f003 fcfb 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_IOPC_EN);
 8002436:	2104      	movs	r1, #4
 8002438:	2003      	movs	r0, #3
 800243a:	f003 fcf7 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_AFIO_EN);
 800243e:	2100      	movs	r1, #0
 8002440:	2003      	movs	r0, #3
 8002442:	f003 fcf3 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_SPI2_EN);
 8002446:	210e      	movs	r1, #14
 8002448:	2002      	movs	r0, #2
 800244a:	f003 fcef 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_TIM2_EN);
 800244e:	2100      	movs	r1, #0
 8002450:	2002      	movs	r0, #2
 8002452:	f003 fceb 	bl	8005e2c <MRCC_EnablePeripheralClock>


	/***********************************Setting Interrupts' Priorities***********************************/
	MSCB_SetPriorityGrouping                (MSCB_PRIORITY_GROUP_4_SUB_0);
 8002456:	4821      	ldr	r0, [pc, #132]	@ (80024dc <SPECTRO_InitSoftware+0xc0>)
 8002458:	f003 ff30 	bl	80062bc <MSCB_SetPriorityGrouping>
	MNVIC_SetInterruptPriority              (MNVIC_EXTI15_10, 0, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	2028      	movs	r0, #40	@ 0x28
 8002462:	f003 fc31 	bl	8005cc8 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority              (MNVIC_USART3, 1, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2101      	movs	r1, #1
 800246a:	2027      	movs	r0, #39	@ 0x27
 800246c:	f003 fc2c 	bl	8005cc8 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority				(MNVIC_TIM5, 2, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	2032      	movs	r0, #50	@ 0x32
 8002476:	f003 fc27 	bl	8005cc8 <MNVIC_SetInterruptPriority>

	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 800247a:	2202      	movs	r2, #2
 800247c:	2108      	movs	r1, #8
 800247e:	2000      	movs	r0, #0
 8002480:	f002 fd54 	bl	8004f2c <MGPIO_SetPinMode>
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8002484:	2202      	movs	r2, #2
 8002486:	2102      	movs	r1, #2
 8002488:	2000      	movs	r0, #0
 800248a:	f002 fd4f 	bl	8004f2c <MGPIO_SetPinMode>

	MRTC_Init();
 800248e:	f003 fdf9 	bl	8006084 <MRTC_Init>
	MSTK_uint8Init();
 8002492:	f004 f8e5 	bl	8006660 <MSTK_uint8Init>
	adc_init();
 8002496:	f000 fb0b 	bl	8002ab0 <adc_init>
	//eeprom_init();
	uint8 Loc_uint8dummyData = 27;
 800249a:	231b      	movs	r3, #27
 800249c:	71fb      	strb	r3, [r7, #7]
	eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint8dummyData, 1);
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	2201      	movs	r2, #1
 80024a2:	4619      	mov	r1, r3
 80024a4:	20d8      	movs	r0, #216	@ 0xd8
 80024a6:	f000 fbc5 	bl	8002c34 <eeprom_write_Nbytes>
	SCommands_Init();
 80024aa:	f7ff f84d 	bl	8001548 <SCommands_Init>
	SPWRVolt_Init();
 80024ae:	f001 fbe1 	bl	8003c74 <SPWRVolt_Init>


	//eeprom_init();

	MCP4151_Init();
 80024b2:	f001 f8bb 	bl	800362c <MCP4151_Init>
	HPWRSupply_InitSupplies();
 80024b6:	f001 fa49 	bl	800394c <HPWRSupply_InitSupplies>
	HMOTORS_Init();
 80024ba:	f001 fc3f 	bl	8003d3c <HMOTORS_Init>

	MNVIC_EnableInterrupt(MNVIC_TIM2);
 80024be:	201c      	movs	r0, #28
 80024c0:	f003 fbce 	bl	8005c60 <MNVIC_EnableInterrupt>
	MGPTMR_SetTimerPeriod(MGPTMR2, 5);
 80024c4:	2105      	movs	r1, #5
 80024c6:	2000      	movs	r0, #0
 80024c8:	f003 f83e 	bl	8005548 <MGPTMR_SetTimerPeriod>
	MGPTMR_Init(MGPTMR2);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f002 ff81 	bl	80053d4 <MGPTMR_Init>



	return E_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	05fa0300 	.word	0x05fa0300

080024e0 <SPECTRO_InitHardware>:
Std_ReturnType SPECTRO_InitHardware(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80024e6:	2301      	movs	r3, #1
 80024e8:	71fb      	strb	r3, [r7, #7]

	Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f001 fa85 	bl	80039fc <HPWRSupply_SetSupplyMode>
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]

	if(Loc_uint8InitStatus == E_OK)
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11e      	bne.n	800253a <SPECTRO_InitHardware+0x5a>
	{
		Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f001 fa7c 	bl	80039fc <HPWRSupply_SetSupplyMode>
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <SPECTRO_InitHardware+0x5a>
		{
			Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f001 fa73 	bl	80039fc <HPWRSupply_SetSupplyMode>
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
			if(Loc_uint8InitStatus == E_OK)
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <SPECTRO_InitHardware+0x5a>
			{
				Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 8002520:	2100      	movs	r1, #0
 8002522:	2001      	movs	r0, #1
 8002524:	f001 fa6a 	bl	80039fc <HPWRSupply_SetSupplyMode>
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
				if(Loc_uint8InitStatus == E_OK)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <SPECTRO_InitHardware+0x5a>
				{
					Loc_uint8InitStatus = SPECTRO_InitCalibration();
 8002532:	f000 f8bd 	bl	80026b0 <SPECTRO_InitCalibration>
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_uint8InitStatus;
 800253a:	79fb      	ldrb	r3, [r7, #7]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <SPECTRO_CalibrationScan>:
static volatile uint32 glbl_float32MaxStepsIndex = 0;
static volatile float32 glbl_float32MaxSteps[2] = {0.0};
static volatile uint8 glbl_uint8Buffer[32] = {0};

void SPECTRO_CalibrationScan(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
	glbl_uint32FunctionCounter++;
 800254a:	4b55      	ldr	r3, [pc, #340]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	4a53      	ldr	r2, [pc, #332]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002552:	6013      	str	r3, [r2, #0]
	HMOTOR_StepNoDelay(HMOTOR_WL_SELECT, HMOTORS_CLKWISE_DIRECTION);
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f002 f954 	bl	8004804 <HMOTOR_StepNoDelay>
	if((glbl_uint32FunctionCounter <= 400) || (glbl_uint32FunctionCounter >= 6620))
 800255c:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002564:	d906      	bls.n	8002574 <SPECTRO_CalibrationScan+0x30>
 8002566:	4b4e      	ldr	r3, [pc, #312]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f641 12db 	movw	r2, #6619	@ 0x19db
 800256e:	4293      	cmp	r3, r2
 8002570:	f240 8092 	bls.w	8002698 <SPECTRO_CalibrationScan+0x154>
	{
		float32 de7k = 0.0, gain = 0.0;
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	603b      	str	r3, [r7, #0]
		if(glbl_uint32FunctionCounter <= 400)
 8002580:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002588:	d838      	bhi.n	80025fc <SPECTRO_CalibrationScan+0xb8>
		{
			read_reference_voltage(&de7k, &gain);
 800258a:	463a      	mov	r2, r7
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f8b9 	bl	8002708 <read_reference_voltage>
			MUART_SendIntegerValue(UART3, glbl_uint32FunctionCounter);
 8002596:	4b42      	ldr	r3, [pc, #264]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	2002      	movs	r0, #2
 800259e:	f004 fa9d 	bl	8006adc <MUART_SendIntegerValue>
			MUART_TxChar(UART3, ':');
 80025a2:	213a      	movs	r1, #58	@ 0x3a
 80025a4:	2002      	movs	r0, #2
 80025a6:	f004 f9e5 	bl	8006974 <MUART_TxChar>
			MUART_TxChar(UART3, ' ');
 80025aa:	2120      	movs	r1, #32
 80025ac:	2002      	movs	r0, #2
 80025ae:	f004 f9e1 	bl	8006974 <MUART_TxChar>

			float_to_string_manual(glbl_uint8Buffer, de7k, 3);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2203      	movs	r2, #3
 80025b6:	4619      	mov	r1, r3
 80025b8:	483a      	ldr	r0, [pc, #232]	@ (80026a4 <SPECTRO_CalibrationScan+0x160>)
 80025ba:	f000 fbc7 	bl	8002d4c <float_to_string_manual>
			MUART_TxString(UART3, glbl_uint8Buffer);
 80025be:	4939      	ldr	r1, [pc, #228]	@ (80026a4 <SPECTRO_CalibrationScan+0x160>)
 80025c0:	2002      	movs	r0, #2
 80025c2:	f004 fa41 	bl	8006a48 <MUART_TxString>
			MUART_TxChar(UART3, '\n');
 80025c6:	210a      	movs	r1, #10
 80025c8:	2002      	movs	r0, #2
 80025ca:	f004 f9d3 	bl	8006974 <MUART_TxChar>

			if(de7k > glbl_float32MaxValue[0])
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <SPECTRO_CalibrationScan+0x164>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fd64 	bl	80010a4 <__aeabi_fcmplt>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d100      	bne.n	80025e4 <SPECTRO_CalibrationScan+0xa0>
		}
	}
	else
	{
	}
}
 80025e2:	e059      	b.n	8002698 <SPECTRO_CalibrationScan+0x154>
				glbl_float32MaxValue[0] = de7k;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a30      	ldr	r2, [pc, #192]	@ (80026a8 <SPECTRO_CalibrationScan+0x164>)
 80025e8:	6013      	str	r3, [r2, #0]
				glbl_float32MaxSteps[0] = glbl_uint32FunctionCounter;
 80025ea:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fb62 	bl	8000cb8 <__aeabi_ui2f>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a2d      	ldr	r2, [pc, #180]	@ (80026ac <SPECTRO_CalibrationScan+0x168>)
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	e04d      	b.n	8002698 <SPECTRO_CalibrationScan+0x154>
		else if((glbl_uint32FunctionCounter >= 6300) && (glbl_uint32FunctionCounter < 7300))
 80025fc:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f641 029b 	movw	r2, #6299	@ 0x189b
 8002604:	4293      	cmp	r3, r2
 8002606:	d93d      	bls.n	8002684 <SPECTRO_CalibrationScan+0x140>
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f641 4283 	movw	r2, #7299	@ 0x1c83
 8002610:	4293      	cmp	r3, r2
 8002612:	d837      	bhi.n	8002684 <SPECTRO_CalibrationScan+0x140>
			read_reference_voltage(&de7k, &gain);
 8002614:	463a      	mov	r2, r7
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f874 	bl	8002708 <read_reference_voltage>
			MUART_SendIntegerValue(UART3, glbl_uint32FunctionCounter);
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	2002      	movs	r0, #2
 8002628:	f004 fa58 	bl	8006adc <MUART_SendIntegerValue>
			MUART_TxChar(UART3, ':');
 800262c:	213a      	movs	r1, #58	@ 0x3a
 800262e:	2002      	movs	r0, #2
 8002630:	f004 f9a0 	bl	8006974 <MUART_TxChar>
			MUART_TxChar(UART3, ' ');
 8002634:	2120      	movs	r1, #32
 8002636:	2002      	movs	r0, #2
 8002638:	f004 f99c 	bl	8006974 <MUART_TxChar>
			float_to_string_manual(glbl_uint8Buffer, de7k, 3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	4619      	mov	r1, r3
 8002642:	4818      	ldr	r0, [pc, #96]	@ (80026a4 <SPECTRO_CalibrationScan+0x160>)
 8002644:	f000 fb82 	bl	8002d4c <float_to_string_manual>
			MUART_TxString(UART3, glbl_uint8Buffer);
 8002648:	4916      	ldr	r1, [pc, #88]	@ (80026a4 <SPECTRO_CalibrationScan+0x160>)
 800264a:	2002      	movs	r0, #2
 800264c:	f004 f9fc 	bl	8006a48 <MUART_TxString>
			MUART_TxChar(UART3, '\n');
 8002650:	210a      	movs	r1, #10
 8002652:	2002      	movs	r0, #2
 8002654:	f004 f98e 	bl	8006974 <MUART_TxChar>
			if(de7k > glbl_float32MaxValue[1])
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <SPECTRO_CalibrationScan+0x164>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fd1f 	bl	80010a4 <__aeabi_fcmplt>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <SPECTRO_CalibrationScan+0x154>
				glbl_float32MaxValue[1] = de7k;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <SPECTRO_CalibrationScan+0x164>)
 8002670:	6053      	str	r3, [r2, #4]
				glbl_float32MaxSteps[1] = glbl_uint32FunctionCounter;
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb1e 	bl	8000cb8 <__aeabi_ui2f>
 800267c:	4603      	mov	r3, r0
 800267e:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <SPECTRO_CalibrationScan+0x168>)
 8002680:	6053      	str	r3, [r2, #4]
			if(de7k > glbl_float32MaxValue[1])
 8002682:	e009      	b.n	8002698 <SPECTRO_CalibrationScan+0x154>
		else if((glbl_uint32FunctionCounter >= 7300))
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <SPECTRO_CalibrationScan+0x15c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f641 4283 	movw	r2, #7299	@ 0x1c83
 800268c:	4293      	cmp	r3, r2
 800268e:	d903      	bls.n	8002698 <SPECTRO_CalibrationScan+0x154>
			MGPTMR_StopTimer(MGPTMR2);
 8002690:	2000      	movs	r0, #0
 8002692:	f002 ff3f 	bl	8005514 <MGPTMR_StopTimer>
}
 8002696:	e7ff      	b.n	8002698 <SPECTRO_CalibrationScan+0x154>
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000063c 	.word	0x2000063c
 80026a4:	20000650 	.word	0x20000650
 80026a8:	20000640 	.word	0x20000640
 80026ac:	20000648 	.word	0x20000648

080026b0 <SPECTRO_InitCalibration>:

Std_ReturnType SPECTRO_InitCalibration(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
	float32 Loc_uint32StepsPerNm = 0;
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 80026bc:	2000      	movs	r0, #0
 80026be:	f001 ff9b 	bl	80045f8 <HMOTOR_GoHome>
	//HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f001 ff98 	bl	80045f8 <HMOTOR_GoHome>

	//turn on visible lamp
	HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 80026c8:	2101      	movs	r1, #1
 80026ca:	2000      	movs	r0, #0
 80026cc:	f001 f996 	bl	80039fc <HPWRSupply_SetSupplyMode>
	HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f001 fc55 	bl	8003f80 <HMOTOR_MoveLampMotor>
	//HMOTOR_MoveFilterMotor(HMOTOR_FILTER_AIR);

	//Zero Wavelength
	uint32 Loc_uint32Index = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
	float32	Loc_float32Gain = 0;
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
	//float32 Loc_uint32WhiteLightIntensities[110] = {0};
	float32 Loc_float32Reading = 0.0;
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]

	MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SPECTRO_CalibrationScan);
 80026e6:	4906      	ldr	r1, [pc, #24]	@ (8002700 <SPECTRO_InitCalibration+0x50>)
 80026e8:	2000      	movs	r0, #0
 80026ea:	f002 ff55 	bl	8005598 <MGPTMR_SetTimerUpdateCallbackFunc>
	MGPTMR_StartTimer(MGPTMR2);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f002 fef0 	bl	80054d4 <MGPTMR_StartTimer>
	//MUART_TxString(UART3, Loc_uint8Buffer);
	//MUART_TxChar(UART3, '\n');
	//HMOTOR_GetWLSelectCalibration(Loc_uint32ZeroWLSteps, Loc_uint32StepsPerNm);
	//HMOTOR_GoHome(HMOTOR_WL_SELECT);
	//HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32ZeroWLSteps, HMOTORS_CLKWISE_DIRECTION, 4);
	return E_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	08002545 	.word	0x08002545
 8002704:	00000000 	.word	0x00000000

08002708 <read_reference_voltage>:
	GAIN_30,
	GAIN_15
}ADC_gain_t;

void read_reference_voltage(float32 *ref, float32 *gain)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8002712:	7a7b      	ldrb	r3, [r7, #9]
 8002714:	f36f 13c7 	bfc	r3, #7, #1
 8002718:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN0_GND;
 800271a:	7a7b      	ldrb	r3, [r7, #9]
 800271c:	2204      	movs	r2, #4
 800271e:	f362 1306 	bfi	r3, r2, #4, #3
 8002722:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	2201      	movs	r2, #1
 8002728:	f362 0343 	bfi	r3, r2, #1, #3
 800272c:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 800272e:	7a7b      	ldrb	r3, [r7, #9]
 8002730:	f36f 0300 	bfc	r3, #0, #1
 8002734:	727b      	strb	r3, [r7, #9]
	config.DR = DR_475SPS;
 8002736:	7a3b      	ldrb	r3, [r7, #8]
 8002738:	2206      	movs	r2, #6
 800273a:	f362 1347 	bfi	r3, r2, #5, #3
 800273e:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002740:	7a3b      	ldrb	r3, [r7, #8]
 8002742:	f36f 1304 	bfc	r3, #4, #1
 8002746:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002748:	7a3b      	ldrb	r3, [r7, #8]
 800274a:	f36f 03c3 	bfc	r3, #3, #1
 800274e:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002750:	7a3b      	ldrb	r3, [r7, #8]
 8002752:	f36f 0382 	bfc	r3, #2, #1
 8002756:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002758:	7a3b      	ldrb	r3, [r7, #8]
 800275a:	f043 0303 	orr.w	r3, r3, #3
 800275e:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002766:	601a      	str	r2, [r3, #0]

	static ADC_gain_t ref_gain_t = NO_GAIN;
	ref_sample x;
	x = REFERENCE;
 8002768:	2300      	movs	r3, #0
 800276a:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 800276c:	8938      	ldrh	r0, [r7, #8]
 800276e:	f000 f9c7 	bl	8002b00 <adc_read_mv>
 8002772:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002774:	4950      	ldr	r1, [pc, #320]	@ (80028b8 <read_reference_voltage+0x1b0>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7fe fc94 	bl	80010a4 <__aeabi_fcmplt>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <read_reference_voltage+0xc2>
	{
		if(ref_gain_t != GAIN_50)
 8002782:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <read_reference_voltage+0x1b4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <read_reference_voltage+0x8e>
		{
			Set_Reference_Gain(50.0);
 800278a:	484b      	ldr	r0, [pc, #300]	@ (80028b8 <read_reference_voltage+0x1b0>)
 800278c:	f000 ff96 	bl	80036bc <Set_Reference_Gain>
			ref_gain_t = GAIN_50;
 8002790:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <read_reference_voltage+0x1b4>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002796:	7a7b      	ldrb	r3, [r7, #9]
 8002798:	2205      	movs	r2, #5
 800279a:	f362 1306 	bfi	r3, r2, #4, #3
 800279e:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 80027a0:	8938      	ldrh	r0, [r7, #8]
 80027a2:	f000 f9ad 	bl	8002b00 <adc_read_mv>
 80027a6:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 80027a8:	4843      	ldr	r0, [pc, #268]	@ (80028b8 <read_reference_voltage+0x1b0>)
 80027aa:	f001 f801 	bl	80037b0 <get_reference_gain>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4619      	mov	r1, r3
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7fe fb8c 	bl	8000ed0 <__aeabi_fdiv>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(50.0);
 80027bc:	483e      	ldr	r0, [pc, #248]	@ (80028b8 <read_reference_voltage+0x1b0>)
 80027be:	f000 fff7 	bl	80037b0 <get_reference_gain>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e058      	b.n	800287c <read_reference_voltage+0x174>
	}
	else if(reading < 100.0)
 80027ca:	493d      	ldr	r1, [pc, #244]	@ (80028c0 <read_reference_voltage+0x1b8>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7fe fc69 	bl	80010a4 <__aeabi_fcmplt>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <read_reference_voltage+0x118>
	{
		if(ref_gain_t != GAIN_30)
 80027d8:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <read_reference_voltage+0x1b4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d005      	beq.n	80027ec <read_reference_voltage+0xe4>
		{
			Set_Reference_Gain(30.0);
 80027e0:	4838      	ldr	r0, [pc, #224]	@ (80028c4 <read_reference_voltage+0x1bc>)
 80027e2:	f000 ff6b 	bl	80036bc <Set_Reference_Gain>
			ref_gain_t = GAIN_30;
 80027e6:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <read_reference_voltage+0x1b4>)
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 80027ec:	7a7b      	ldrb	r3, [r7, #9]
 80027ee:	2205      	movs	r2, #5
 80027f0:	f362 1306 	bfi	r3, r2, #4, #3
 80027f4:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 80027f6:	8938      	ldrh	r0, [r7, #8]
 80027f8:	f000 f982 	bl	8002b00 <adc_read_mv>
 80027fc:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(30.0);
 80027fe:	4831      	ldr	r0, [pc, #196]	@ (80028c4 <read_reference_voltage+0x1bc>)
 8002800:	f000 ffd6 	bl	80037b0 <get_reference_gain>
 8002804:	4603      	mov	r3, r0
 8002806:	4619      	mov	r1, r3
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7fe fb61 	bl	8000ed0 <__aeabi_fdiv>
 800280e:	4603      	mov	r3, r0
 8002810:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(30.0);
 8002812:	482c      	ldr	r0, [pc, #176]	@ (80028c4 <read_reference_voltage+0x1bc>)
 8002814:	f000 ffcc 	bl	80037b0 <get_reference_gain>
 8002818:	4602      	mov	r2, r0
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e02d      	b.n	800287c <read_reference_voltage+0x174>
	}
	else if(reading < 200.0)
 8002820:	4929      	ldr	r1, [pc, #164]	@ (80028c8 <read_reference_voltage+0x1c0>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7fe fc3e 	bl	80010a4 <__aeabi_fcmplt>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <read_reference_voltage+0x16e>
	{
		if(ref_gain_t != GAIN_15)
 800282e:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <read_reference_voltage+0x1b4>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d005      	beq.n	8002842 <read_reference_voltage+0x13a>
		{
			Set_Reference_Gain(15.0);
 8002836:	4825      	ldr	r0, [pc, #148]	@ (80028cc <read_reference_voltage+0x1c4>)
 8002838:	f000 ff40 	bl	80036bc <Set_Reference_Gain>
			ref_gain_t = GAIN_15;
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <read_reference_voltage+0x1b4>)
 800283e:	2203      	movs	r2, #3
 8002840:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002842:	7a7b      	ldrb	r3, [r7, #9]
 8002844:	2205      	movs	r2, #5
 8002846:	f362 1306 	bfi	r3, r2, #4, #3
 800284a:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 800284c:	8938      	ldrh	r0, [r7, #8]
 800284e:	f000 f957 	bl	8002b00 <adc_read_mv>
 8002852:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(15.0);
 8002854:	481d      	ldr	r0, [pc, #116]	@ (80028cc <read_reference_voltage+0x1c4>)
 8002856:	f000 ffab 	bl	80037b0 <get_reference_gain>
 800285a:	4603      	mov	r3, r0
 800285c:	4619      	mov	r1, r3
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7fe fb36 	bl	8000ed0 <__aeabi_fdiv>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(15.0);
 8002868:	4818      	ldr	r0, [pc, #96]	@ (80028cc <read_reference_voltage+0x1c4>)
 800286a:	f000 ffa1 	bl	80037b0 <get_reference_gain>
 800286e:	4602      	mov	r2, r0
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e002      	b.n	800287c <read_reference_voltage+0x174>
	}
	else
	{
		ref_gain_t = NO_GAIN;
 8002876:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <read_reference_voltage+0x1b4>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
	//		Set_Reference_Gain(3.0);
	//		reading = adc_read_mv(config);
	//		reading /= get_reference_gain(3.0);
	//		*gain = get_reference_gain(3.0);
	//	};
	reading *= (11.0 + 29.4)/11.0;
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7fd fded 	bl	800045c <__aeabi_f2d>
 8002882:	a30b      	add	r3, pc, #44	@ (adr r3, 80028b0 <read_reference_voltage+0x1a8>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fe40 	bl	800050c <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f90a 	bl	8000aac <__aeabi_d2f>
 8002898:	4603      	mov	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]
	*ref = reading;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	d61bed61 	.word	0xd61bed61
 80028b4:	400d61be 	.word	0x400d61be
 80028b8:	42480000 	.word	0x42480000
 80028bc:	20000670 	.word	0x20000670
 80028c0:	42c80000 	.word	0x42c80000
 80028c4:	41f00000 	.word	0x41f00000
 80028c8:	43480000 	.word	0x43480000
 80028cc:	41700000 	.word	0x41700000

080028d0 <read_sample_voltage>:

void read_sample_voltage(float32 *sample, float32 *gain)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	f36f 13c7 	bfc	r3, #7, #1
 80028e0:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN2_GND;
 80028e2:	7a7b      	ldrb	r3, [r7, #9]
 80028e4:	2206      	movs	r2, #6
 80028e6:	f362 1306 	bfi	r3, r2, #4, #3
 80028ea:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f362 0343 	bfi	r3, r2, #1, #3
 80028f4:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 80028f6:	7a7b      	ldrb	r3, [r7, #9]
 80028f8:	f36f 0300 	bfc	r3, #0, #1
 80028fc:	727b      	strb	r3, [r7, #9]
	config.DR = DR_475SPS;
 80028fe:	7a3b      	ldrb	r3, [r7, #8]
 8002900:	2206      	movs	r2, #6
 8002902:	f362 1347 	bfi	r3, r2, #5, #3
 8002906:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002908:	7a3b      	ldrb	r3, [r7, #8]
 800290a:	f36f 1304 	bfc	r3, #4, #1
 800290e:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002910:	7a3b      	ldrb	r3, [r7, #8]
 8002912:	f36f 03c3 	bfc	r3, #3, #1
 8002916:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002918:	7a3b      	ldrb	r3, [r7, #8]
 800291a:	f36f 0382 	bfc	r3, #2, #1
 800291e:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002920:	7a3b      	ldrb	r3, [r7, #8]
 8002922:	f043 0303 	orr.w	r3, r3, #3
 8002926:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800292e:	601a      	str	r2, [r3, #0]

	static ADC_gain_t sample_gain_t = NO_GAIN;
	ref_sample x;
	x = SAMPLE;
 8002930:	2301      	movs	r3, #1
 8002932:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8002934:	8938      	ldrh	r0, [r7, #8]
 8002936:	f000 f8e3 	bl	8002b00 <adc_read_mv>
 800293a:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 800293c:	494e      	ldr	r1, [pc, #312]	@ (8002a78 <read_sample_voltage+0x1a8>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7fe fbb0 	bl	80010a4 <__aeabi_fcmplt>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d022      	beq.n	8002990 <read_sample_voltage+0xc0>
	{
		if(sample_gain_t != GAIN_50)
 800294a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a7c <read_sample_voltage+0x1ac>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <read_sample_voltage+0x8e>
		{
			Set_Sample_Gain(50.0);
 8002952:	4849      	ldr	r0, [pc, #292]	@ (8002a78 <read_sample_voltage+0x1a8>)
 8002954:	f000 fe90 	bl	8003678 <Set_Sample_Gain>
			sample_gain_t = GAIN_50;
 8002958:	4b48      	ldr	r3, [pc, #288]	@ (8002a7c <read_sample_voltage+0x1ac>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 800295e:	7a7b      	ldrb	r3, [r7, #9]
 8002960:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002964:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002966:	8938      	ldrh	r0, [r7, #8]
 8002968:	f000 f8ca 	bl	8002b00 <adc_read_mv>
 800296c:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 800296e:	4842      	ldr	r0, [pc, #264]	@ (8002a78 <read_sample_voltage+0x1a8>)
 8002970:	f000 ff1e 	bl	80037b0 <get_reference_gain>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7fe faa9 	bl	8000ed0 <__aeabi_fdiv>
 800297e:	4603      	mov	r3, r0
 8002980:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(50.0);
 8002982:	483d      	ldr	r0, [pc, #244]	@ (8002a78 <read_sample_voltage+0x1a8>)
 8002984:	f000 ff58 	bl	8003838 <get_sample_gain>
 8002988:	4602      	mov	r2, r0
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e056      	b.n	8002a3e <read_sample_voltage+0x16e>
	}
	else if(reading < 100.0)
 8002990:	493b      	ldr	r1, [pc, #236]	@ (8002a80 <read_sample_voltage+0x1b0>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7fe fb86 	bl	80010a4 <__aeabi_fcmplt>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d022      	beq.n	80029e4 <read_sample_voltage+0x114>
	{
		if(sample_gain_t != GAIN_30)
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <read_sample_voltage+0x1ac>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d005      	beq.n	80029b2 <read_sample_voltage+0xe2>
		{
			Set_Sample_Gain(30.0);
 80029a6:	4837      	ldr	r0, [pc, #220]	@ (8002a84 <read_sample_voltage+0x1b4>)
 80029a8:	f000 fe66 	bl	8003678 <Set_Sample_Gain>
			sample_gain_t = GAIN_30;
 80029ac:	4b33      	ldr	r3, [pc, #204]	@ (8002a7c <read_sample_voltage+0x1ac>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 80029b2:	7a7b      	ldrb	r3, [r7, #9]
 80029b4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80029b8:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 80029ba:	8938      	ldrh	r0, [r7, #8]
 80029bc:	f000 f8a0 	bl	8002b00 <adc_read_mv>
 80029c0:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(30.0);
 80029c2:	4830      	ldr	r0, [pc, #192]	@ (8002a84 <read_sample_voltage+0x1b4>)
 80029c4:	f000 ff38 	bl	8003838 <get_sample_gain>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7fe fa7f 	bl	8000ed0 <__aeabi_fdiv>
 80029d2:	4603      	mov	r3, r0
 80029d4:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(30.0);
 80029d6:	482b      	ldr	r0, [pc, #172]	@ (8002a84 <read_sample_voltage+0x1b4>)
 80029d8:	f000 ff2e 	bl	8003838 <get_sample_gain>
 80029dc:	4602      	mov	r2, r0
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e02c      	b.n	8002a3e <read_sample_voltage+0x16e>
	}
	else if(reading < 200.0)
 80029e4:	4928      	ldr	r1, [pc, #160]	@ (8002a88 <read_sample_voltage+0x1b8>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7fe fb5c 	bl	80010a4 <__aeabi_fcmplt>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d022      	beq.n	8002a38 <read_sample_voltage+0x168>
	{
		if(sample_gain_t != GAIN_15)
 80029f2:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <read_sample_voltage+0x1ac>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d005      	beq.n	8002a06 <read_sample_voltage+0x136>
		{
			Set_Sample_Gain(15.0);
 80029fa:	4824      	ldr	r0, [pc, #144]	@ (8002a8c <read_sample_voltage+0x1bc>)
 80029fc:	f000 fe3c 	bl	8003678 <Set_Sample_Gain>
			sample_gain_t = GAIN_15;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <read_sample_voltage+0x1ac>)
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 8002a06:	7a7b      	ldrb	r3, [r7, #9]
 8002a08:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002a0c:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002a0e:	8938      	ldrh	r0, [r7, #8]
 8002a10:	f000 f876 	bl	8002b00 <adc_read_mv>
 8002a14:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(15.0);
 8002a16:	481d      	ldr	r0, [pc, #116]	@ (8002a8c <read_sample_voltage+0x1bc>)
 8002a18:	f000 ff0e 	bl	8003838 <get_sample_gain>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7fe fa55 	bl	8000ed0 <__aeabi_fdiv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(15.0);
 8002a2a:	4818      	ldr	r0, [pc, #96]	@ (8002a8c <read_sample_voltage+0x1bc>)
 8002a2c:	f000 ff04 	bl	8003838 <get_sample_gain>
 8002a30:	4602      	mov	r2, r0
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e002      	b.n	8002a3e <read_sample_voltage+0x16e>
	}
	else
		{
		sample_gain_t = NO_GAIN;
 8002a38:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <read_sample_voltage+0x1ac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
	//		reading = adc_read_mv(config);
	//		reading /= get_sample_gain(3.0);
	//		*gain = get_sample_gain(3.0);
	//	};

	reading *= (11.0 + 29.4)/11.0;
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7fd fd0c 	bl	800045c <__aeabi_f2d>
 8002a44:	a30a      	add	r3, pc, #40	@ (adr r3, 8002a70 <read_sample_voltage+0x1a0>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fd5f 	bl	800050c <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f829 	bl	8000aac <__aeabi_d2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60fb      	str	r3, [r7, #12]
	*sample = reading;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	f3af 8000 	nop.w
 8002a70:	d61bed61 	.word	0xd61bed61
 8002a74:	400d61be 	.word	0x400d61be
 8002a78:	42480000 	.word	0x42480000
 8002a7c:	20000671 	.word	0x20000671
 8002a80:	42c80000 	.word	0x42c80000
 8002a84:	41f00000 	.word	0x41f00000
 8002a88:	43480000 	.word	0x43480000
 8002a8c:	41700000 	.word	0x41700000

08002a90 <SpectroStatus_SetNewStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                    Spectrophotometer's Status Successfully Set
 * @retval E_NOT_OK:                Spectrophotometer's Status not Set 
 */
Std_ReturnType SpectroStatus_SetNewStatus           (SPECTRO_Status_t Copy_uint32SpectroStatus)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
    glbl_uint32SpectroCurrentStatus = Copy_uint32SpectroStatus;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <SpectroStatus_SetNewStatus+0x1c>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	7013      	strb	r3, [r2, #0]
    return E_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000672 	.word	0x20000672

08002ab0 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8002ab6:	2340      	movs	r3, #64	@ 0x40
 8002ab8:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 8002aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abe:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <adc_init+0x48>)
 8002ac2:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8002acc:	2300      	movs	r3, #0
 8002ace:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8002ad0:	480a      	ldr	r0, [pc, #40]	@ (8002afc <adc_init+0x4c>)
 8002ad2:	f002 feb1 	bl	8005838 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4808      	ldr	r0, [pc, #32]	@ (8002afc <adc_init+0x4c>)
 8002adc:	f002 fdc0 	bl	8005660 <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 8002ae0:	f002 fe82 	bl	80057e8 <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4804      	ldr	r0, [pc, #16]	@ (8002afc <adc_init+0x4c>)
 8002aea:	f002 fdb9 	bl	8005660 <MCAL_I2C_Init>
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	000186a0 	.word	0x000186a0
 8002afc:	40005400 	.word	0x40005400

08002b00 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	@ 0x30
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x48;
 8002b08:	2348      	movs	r3, #72	@ 0x48
 8002b0a:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x01;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	753b      	strb	r3, [r7, #20]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 8002b10:	797b      	ldrb	r3, [r7, #5]
 8002b12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	01db      	lsls	r3, r3, #7
 8002b1a:	b25a      	sxtb	r2, r3
 8002b1c:	797b      	ldrb	r3, [r7, #5]
 8002b1e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	797b      	ldrb	r3, [r7, #5]
 8002b2e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	797b      	ldrb	r3, [r7, #5]
 8002b3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	757b      	strb	r3, [r7, #21]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 8002b4e:	793b      	ldrb	r3, [r7, #4]
 8002b50:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	015b      	lsls	r3, r3, #5
 8002b58:	b25a      	sxtb	r2, r3
 8002b5a:	793b      	ldrb	r3, [r7, #4]
 8002b5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	793b      	ldrb	r3, [r7, #4]
 8002b6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	793b      	ldrb	r3, [r7, #4]
 8002b7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b25a      	sxtb	r2, r3
 8002b8a:	793b      	ldrb	r3, [r7, #4]
 8002b8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b25b      	sxtb	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	75bb      	strb	r3, [r7, #22]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 8002b9c:	f107 0214 	add.w	r2, r7, #20
 8002ba0:	8bf9      	ldrh	r1, [r7, #30]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2303      	movs	r3, #3
 8002bac:	481e      	ldr	r0, [pc, #120]	@ (8002c28 <adc_read_mv+0x128>)
 8002bae:	f002 fe6d 	bl	800588c <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8002bb6:	f107 0214 	add.w	r2, r7, #20
 8002bba:	8bf9      	ldrh	r1, [r7, #30]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4818      	ldr	r0, [pc, #96]	@ (8002c28 <adc_read_mv+0x128>)
 8002bc8:	f002 fe60 	bl	800588c <MCAL_I2C_MASTER_TX>
	delay_ms(3);
 8002bcc:	2003      	movs	r0, #3
 8002bce:	f000 fc98 	bl	8003502 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start, I2C_ADC);
 8002bd2:	f107 020c 	add.w	r2, r7, #12
 8002bd6:	8bf9      	ldrh	r1, [r7, #30]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2302      	movs	r3, #2
 8002be6:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <adc_read_mv+0x128>)
 8002be8:	f002 feae 	bl	8005948 <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 8002bec:	7b7b      	ldrb	r3, [r7, #13]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	7b3b      	ldrb	r3, [r7, #12]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 8002bfc:	8bbb      	ldrh	r3, [r7, #28]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f85a 	bl	8000cb8 <__aeabi_ui2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4909      	ldr	r1, [pc, #36]	@ (8002c2c <adc_read_mv+0x12c>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe f8ad 	bl	8000d68 <__aeabi_fmul>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <adc_read_mv+0x130>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f8a8 	bl	8000d68 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	61bb      	str	r3, [r7, #24]
	return mv;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	3903126f 	.word	0x3903126f
 8002c30:	447a0000 	.word	0x447a0000

08002c34 <eeprom_write_Nbytes>:
//	MCAL_I2C_Init(I2C1, &I2C1CFG);


}
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0c8      	sub	sp, #288	@ 0x120
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c42:	6018      	str	r0, [r3, #0]
 8002c44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c4c:	6019      	str	r1, [r3, #0]
 8002c4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c52:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002c56:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256]  ;
	//buffer[0] = (u8)(Memory_address>>8) ; 	//upper byte Memory Address
	//buffer[1] = (u8)Memory_address ; 	//lower byte Memory Address
	buffer[0] = (uint8)(Memory_address) ; 	//Memory Address
 8002c5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c72:	701a      	strb	r2, [r3, #0]

	for (i=1 ; i<(Data_Length+1) ; i++ )
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002c7a:	e015      	b.n	8002ca8 <eeprom_write_Nbytes+0x74>
	{buffer[i] = bytes[i-1] ;}
 8002c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c80:	3b01      	subs	r3, #1
 8002c82:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002c86:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c92:	7811      	ldrb	r1, [r2, #0]
 8002c94:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002c98:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002c9c:	54d1      	strb	r1, [r2, r3]
	for (i=1 ; i<(Data_Length+1) ; i++ )
 8002c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002ca8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cac:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d2e0      	bcs.n	8002c7c <eeprom_write_Nbytes+0x48>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+1), With_Stop, Start);
 8002cba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cbe:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f107 0214 	add.w	r2, r7, #20
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	2150      	movs	r1, #80	@ 0x50
 8002cd8:	4804      	ldr	r0, [pc, #16]	@ (8002cec <eeprom_write_Nbytes+0xb8>)
 8002cda:	f002 fdd7 	bl	800588c <MCAL_I2C_MASTER_TX>

	return 0;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40005400 	.word	0x40005400

08002cf0 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	//buffer[0] = (u8)(address>>8) ; 	//Upper Memory Address
	//buffer[1] = (u8)(address) ; 	//Lower Memory Address
	buffer[0] = (uint8)(address) ; 	//Memory Address
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	753b      	strb	r3, [r7, #20]

	delay_ms(100);
 8002d04:	2064      	movs	r0, #100	@ 0x64
 8002d06:	f000 fbfc 	bl	8003502 <delay_ms>
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 1,Without_Stop ,Start); //Write Address Only
 8002d0a:	f107 0214 	add.w	r2, r7, #20
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	2150      	movs	r1, #80	@ 0x50
 8002d1a:	480b      	ldr	r0, [pc, #44]	@ (8002d48 <eeprom_read_byte+0x58>)
 8002d1c:	f002 fdb6 	bl	800588c <MCAL_I2C_MASTER_TX>
	delay_ms(100);
 8002d20:	2064      	movs	r0, #100	@ 0x64
 8002d22:	f000 fbee 	bl	8003502 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start, I2C_EEPROM); 			//Read Data
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	9202      	str	r2, [sp, #8]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	9201      	str	r2, [sp, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	9200      	str	r2, [sp, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	2150      	movs	r1, #80	@ 0x50
 8002d38:	4803      	ldr	r0, [pc, #12]	@ (8002d48 <eeprom_read_byte+0x58>)
 8002d3a:	f002 fe05 	bl	8005948 <MCAL_I2C_MASTER_RX>

	return 0;
 8002d3e:	2300      	movs	r3, #0

}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40005400 	.word	0x40005400

08002d4c <float_to_string_manual>:

static volatile uint8 glbl_uint8CommandBuffer[HESP32_MAX_BUFFER_SPACE] = {0};
static volatile uint8 glbl_uint8BufferIndex = 0;

void float_to_string_manual(uint8* P_uint8Buffer, float32 Copy_float32FloatNum, uint32 Loc_uint32precision) 
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b090      	sub	sp, #64	@ 0x40
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
    uint32 Loc_uint32IntPart = 0, Loc_uint32DecimalPart = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32 i = 0, k = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8 Loc_uint8TempBuffer[8] = {0};
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    boolean is_negative = FALSE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Handle sign and extract integer part (modify for specific needs)
    if (Copy_float32FloatNum < 0) 
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	68b8      	ldr	r0, [r7, #8]
 8002d7c:	f7fe f992 	bl	80010a4 <__aeabi_fcmplt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <float_to_string_manual+0x48>
    {
        Copy_float32FloatNum = -Copy_float32FloatNum;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d8c:	60bb      	str	r3, [r7, #8]
        is_negative = TRUE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    Loc_uint32IntPart = (sint32)Copy_float32FloatNum;
 8002d94:	68b8      	ldr	r0, [r7, #8]
 8002d96:	f7fe f9ad 	bl	80010f4 <__aeabi_f2iz>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Handle decimal part if needed (modify for precision)
    if (Loc_uint32precision > 0) 
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d021      	beq.n	8002de8 <float_to_string_manual+0x9c>
    {
        Copy_float32FloatNum *= pow(10, Loc_uint32precision);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fb37 	bl	8000418 <__aeabi_ui2d>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	4952      	ldr	r1, [pc, #328]	@ (8002efc <float_to_string_manual+0x1b0>)
 8002db4:	f008 fb1a 	bl	800b3ec <pow>
 8002db8:	4604      	mov	r4, r0
 8002dba:	460d      	mov	r5, r1
 8002dbc:	68b8      	ldr	r0, [r7, #8]
 8002dbe:	f7fd fb4d 	bl	800045c <__aeabi_f2d>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f7fd fb9f 	bl	800050c <__aeabi_dmul>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7fd fe69 	bl	8000aac <__aeabi_d2f>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	60bb      	str	r3, [r7, #8]
        Loc_uint32DecimalPart = (uint32)Copy_float32FloatNum;
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	f7fe f9ae 	bl	8001140 <__aeabi_f2uiz>
 8002de4:	4603      	mov	r3, r0
 8002de6:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    // Convert integer part to string (replace with your implementation)
    if (is_negative) 
 8002de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <float_to_string_manual+0xb2>
    {
        P_uint8Buffer[i++] = '-';
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	637a      	str	r2, [r7, #52]	@ 0x34
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	222d      	movs	r2, #45	@ 0x2d
 8002dfc:	701a      	strb	r2, [r3, #0]
    }
    do 
    {
        //buf[i++] = int_part % 10 + '0';
        Loc_uint8TempBuffer[k++] = Loc_uint32IntPart % 10 + '0';
 8002dfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e00:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <float_to_string_manual+0x1b4>)
 8002e02:	fba3 2301 	umull	r2, r3, r3, r1
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	1aca      	subs	r2, r1, r3
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e1a:	3230      	adds	r2, #48	@ 0x30
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	3340      	adds	r3, #64	@ 0x40
 8002e20:	443b      	add	r3, r7
 8002e22:	f803 2c2c 	strb.w	r2, [r3, #-44]
        Loc_uint32IntPart /= 10;
 8002e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e28:	4a35      	ldr	r2, [pc, #212]	@ (8002f00 <float_to_string_manual+0x1b4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    } while (Loc_uint32IntPart > 0);
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e2      	bne.n	8002dfe <float_to_string_manual+0xb2>

    // Append sign, decimal point, and decimal digits (modify for precision)
    for(sint32 j = (k - 1); j >= 0; j--)
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3e:	e00d      	b.n	8002e5c <float_to_string_manual+0x110>
    {
        P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f107 0114 	add.w	r1, r7, #20
 8002e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e50:	440a      	add	r2, r1
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
    for(sint32 j = (k - 1); j >= 0; j--)
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	daee      	bge.n	8002e40 <float_to_string_manual+0xf4>
    }

    if (Loc_uint32precision > 0) 
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d040      	beq.n	8002eea <float_to_string_manual+0x19e>
    {
        uint8 temp = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
        P_uint8Buffer[i++] = '.';
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	222e      	movs	r2, #46	@ 0x2e
 8002e78:	701a      	strb	r2, [r3, #0]
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7e:	e01b      	b.n	8002eb8 <float_to_string_manual+0x16c>
        {
            Loc_uint8TempBuffer[j] = Loc_uint32DecimalPart % 10 + '0';
 8002e80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e82:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <float_to_string_manual+0x1b4>)
 8002e84:	fba3 2301 	umull	r2, r3, r3, r1
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	1aca      	subs	r2, r1, r3
 8002e94:	b2d3      	uxtb	r3, r2
 8002e96:	3330      	adds	r3, #48	@ 0x30
 8002e98:	b2d9      	uxtb	r1, r3
 8002e9a:	f107 0214 	add.w	r2, r7, #20
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	4413      	add	r3, r2
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]
            Loc_uint32DecimalPart /= 10;
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <float_to_string_manual+0x1b4>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	08db      	lsrs	r3, r3, #3
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8df      	bhi.n	8002e80 <float_to_string_manual+0x134>
        }
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e00d      	b.n	8002ee4 <float_to_string_manual+0x198>
        {
            P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f107 0114 	add.w	r1, r7, #20
 8002ed6:	6a3a      	ldr	r2, [r7, #32]
 8002ed8:	440a      	add	r2, r1
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	701a      	strb	r2, [r3, #0]
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	daee      	bge.n	8002ec8 <float_to_string_manual+0x17c>
        }
    }
    P_uint8Buffer[i] = '\0'; // Null terminate the string
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eee:	4413      	add	r3, r2
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3740      	adds	r7, #64	@ 0x40
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}
 8002efc:	40240000 	.word	0x40240000
 8002f00:	cccccccd 	.word	0xcccccccd

08002f04 <HESP32_ParseReceivedCommand>:

void HESP32_ParseReceivedCommand  (void)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
    uint16 Loc_uint16RxChar = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	807b      	strh	r3, [r7, #2]
    MUART_RxCharAsynchronous(HESP32_UART_CHOICE, &Loc_uint16RxChar);
 8002f0e:	1cbb      	adds	r3, r7, #2
 8002f10:	4619      	mov	r1, r3
 8002f12:	2002      	movs	r0, #2
 8002f14:	f003 fd6a 	bl	80069ec <MUART_RxCharAsynchronous>
	
    if(glbl_uint8BufferIndex < HESP32_MAX_BUFFER_SPACE)
 8002f18:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b27      	cmp	r3, #39	@ 0x27
 8002f20:	d879      	bhi.n	8003016 <HESP32_ParseReceivedCommand+0x112>
    {
        if((uint8)Loc_uint16RxChar == '\n')
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b0a      	cmp	r3, #10
 8002f28:	d165      	bne.n	8002ff6 <HESP32_ParseReceivedCommand+0xf2>
        {
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = '\0';
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <HESP32_ParseReceivedCommand+0x124>)
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]
            
            uint8 Loc_uint8Index = 0; 
 8002f38:	2300      	movs	r3, #0
 8002f3a:	71fb      	strb	r3, [r7, #7]
	    	uint8 Loc_uint8FoundCommand = HESP32_COMMAND_NOT_FOUND;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	71bb      	strb	r3, [r7, #6]
	    	uint8 Loc_uint8Compare = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	717b      	strb	r3, [r7, #5]

            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	e04c      	b.n	8002fe4 <HESP32_ParseReceivedCommand+0xe0>
            {
	    		Loc_uint8Compare = strncmp((HESP32_AvailableTasks[Loc_uint8Index]), glbl_uint8CommandBuffer, strlen((HESP32_AvailableTasks[Loc_uint8Index])));
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4a35      	ldr	r2, [pc, #212]	@ (800302c <HESP32_ParseReceivedCommand+0x128>)
 8002f56:	189c      	adds	r4, r3, r2
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4a32      	ldr	r2, [pc, #200]	@ (800302c <HESP32_ParseReceivedCommand+0x128>)
 8002f64:	4413      	add	r3, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd f90c 	bl	8000184 <strlen>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	492d      	ldr	r1, [pc, #180]	@ (8003028 <HESP32_ParseReceivedCommand+0x124>)
 8002f72:	4620      	mov	r0, r4
 8002f74:	f004 ff19 	bl	8007daa <strncmp>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	717b      	strb	r3, [r7, #5]
                if(Loc_uint8Compare == 0)
 8002f7c:	797b      	ldrb	r3, [r7, #5]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d12d      	bne.n	8002fde <HESP32_ParseReceivedCommand+0xda>
                {
                    Loc_uint8FoundCommand = HESP32_COMMAND_FOUND;
 8002f82:	2301      	movs	r3, #1
 8002f84:	71bb      	strb	r3, [r7, #6]
                    //HESP32_SendCommand("acknowledged");
                    
                    if(Loc_uint8Index < HESP32_NO_OF_NON_ARG_COMMANDS)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d80b      	bhi.n	8002fa4 <HESP32_ParseReceivedCommand+0xa0>
                    {
                        if((glbl_PCallbackFunc[Loc_uint8Index]) != NULL_PTR)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <HESP32_ParseReceivedCommand+0x12c>)
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d029      	beq.n	8002fec <HESP32_ParseReceivedCommand+0xe8>
                        {
                            (glbl_PCallbackFunc[Loc_uint8Index])();
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4a25      	ldr	r2, [pc, #148]	@ (8003030 <HESP32_ParseReceivedCommand+0x12c>)
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	4798      	blx	r3
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
                            }
                        #else
                        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
                    }
	    			break;
 8002fa2:	e023      	b.n	8002fec <HESP32_ParseReceivedCommand+0xe8>
                            if((glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS]) != NULL_PTR)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	3b11      	subs	r3, #17
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HESP32_ParseReceivedCommand+0x130>)
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01c      	beq.n	8002fec <HESP32_ParseReceivedCommand+0xe8>
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	3b11      	subs	r3, #17
 8002fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <HESP32_ParseReceivedCommand+0x130>)
 8002fb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002fbc:	79fa      	ldrb	r2, [r7, #7]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HESP32_ParseReceivedCommand+0x128>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd f8da 	bl	8000184 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a14      	ldr	r2, [pc, #80]	@ (8003028 <HESP32_ParseReceivedCommand+0x124>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	47a0      	blx	r4
	    			break;
 8002fdc:	e006      	b.n	8002fec <HESP32_ParseReceivedCommand+0xe8>
            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	71fb      	strb	r3, [r7, #7]
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	2b1c      	cmp	r3, #28
 8002fe8:	d9af      	bls.n	8002f4a <HESP32_ParseReceivedCommand+0x46>
 8002fea:	e000      	b.n	8002fee <HESP32_ParseReceivedCommand+0xea>
	    			break;
 8002fec:	bf00      	nop
                else
	    		{
                    /*Do nothing*/
                }
            }
            glbl_uint8BufferIndex = 0;
 8002fee:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    else
    {
        glbl_uint8BufferIndex = 0;
    }

}
 8002ff4:	e012      	b.n	800301c <HESP32_ParseReceivedCommand+0x118>
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = (uint8)(Loc_uint16RxChar);
 8002ff6:	8879      	ldrh	r1, [r7, #2]
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HESP32_ParseReceivedCommand+0x124>)
 8003004:	5499      	strb	r1, [r3, r2]
            glbl_uint8BufferIndex++;
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8003012:	701a      	strb	r2, [r3, #0]
}
 8003014:	e002      	b.n	800301c <HESP32_ParseReceivedCommand+0x118>
        glbl_uint8BufferIndex = 0;
 8003016:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <HESP32_ParseReceivedCommand+0x120>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	2000073c 	.word	0x2000073c
 8003028:	20000714 	.word	0x20000714
 800302c:	20000000 	.word	0x20000000
 8003030:	20000674 	.word	0x20000674
 8003034:	200006e4 	.word	0x200006e4

08003038 <HESP32_InitInterface>:
 * @return Std_ReturnType
 * @retval E_OK:        Initialization is successful
 * @retval E_NOT_OK:    Failed to initialize communication 
 */
Std_ReturnType HESP32_InitInterface              (void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800303e:	2301      	movs	r3, #1
 8003040:	71fb      	strb	r3, [r7, #7]

        //Initialize UART 2 peripheral
        MUART_Init(UART2);
    #elif HESP32_UART_CHOICE == HESP32_UART3
        //Enable Clock for UART3 and its tx and rx pins
        MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_USART3_EN);
 8003042:	2112      	movs	r1, #18
 8003044:	2002      	movs	r0, #2
 8003046:	f002 fef1 	bl	8005e2c <MRCC_EnablePeripheralClock>
        MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 800304a:	2103      	movs	r1, #3
 800304c:	2003      	movs	r0, #3
 800304e:	f002 feed 	bl	8005e2c <MRCC_EnablePeripheralClock>

        //Set Tx pin to be output alternate function and rx to be input pull-up
        MGPIO_SetPinMode(MUART3_TX_PORT_ID, MUART3_TX_PIN_ID, MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ);
 8003052:	220a      	movs	r2, #10
 8003054:	210a      	movs	r1, #10
 8003056:	2001      	movs	r0, #1
 8003058:	f001 ff68 	bl	8004f2c <MGPIO_SetPinMode>
        MGPIO_SetPinMode(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID, MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 800305c:	2208      	movs	r2, #8
 800305e:	210b      	movs	r1, #11
 8003060:	2001      	movs	r0, #1
 8003062:	f001 ff63 	bl	8004f2c <MGPIO_SetPinMode>
        MGPIO_ActivatePullUp(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID);
 8003066:	210b      	movs	r1, #11
 8003068:	2001      	movs	r0, #1
 800306a:	f002 f939 	bl	80052e0 <MGPIO_ActivatePullUp>

        //Enable Interrupt for UART 3
        MNVIC_EnableInterrupt(MNVIC_USART3);
 800306e:	2027      	movs	r0, #39	@ 0x27
 8003070:	f002 fdf6 	bl	8005c60 <MNVIC_EnableInterrupt>

        MUART_SetRxCompleteCallback(UART3, HESP32_ParseReceivedCommand);
 8003074:	4906      	ldr	r1, [pc, #24]	@ (8003090 <HESP32_InitInterface+0x58>)
 8003076:	2002      	movs	r0, #2
 8003078:	f003 fd12 	bl	8006aa0 <MUART_SetRxCompleteCallback>
        
        //Initialize UART 1 peripheral
        MUART_Init(UART3);
 800307c:	2002      	movs	r0, #2
 800307e:	f003 fba7 	bl	80067d0 <MUART_Init>
    #else
        #error "UART Choice for communication is not specified"
    #endif /*HESP32_UART_CHOICE*/
    Loc_uint8FuncStatus = E_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8003086:	79fb      	ldrb	r3, [r7, #7]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	08002f05 	.word	0x08002f05

08003094 <HESP32_SendCommand>:

Std_ReturnType HESP32_SendCommand                (uint8* P_uint8Command)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
    if(P_uint8Command != NULL_PTR)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HESP32_SendCommand+0x28>
    {
        MUART_TxString(HESP32_UART_CHOICE , P_uint8Command);
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	2002      	movs	r0, #2
 80030aa:	f003 fccd 	bl	8006a48 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80030ae:	210a      	movs	r1, #10
 80030b0:	2002      	movs	r0, #2
 80030b2:	f003 fc5f 	bl	8006974 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e001      	b.n	80030c0 <HESP32_SendCommand+0x2c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HESP32_SetCommandCallbackFunction>:

Std_ReturnType HESP32_SetCommandCallbackFunction    (uint8 Copy_uint8CommandNumber,ptr_to_Callback_func P_CommandCallbackFunc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2b1c      	cmp	r3, #28
 80030e0:	d80a      	bhi.n	80030f8 <HESP32_SetCommandCallbackFunction+0x2c>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HESP32_SetCommandCallbackFunction+0x2c>
    {
        glbl_PCallbackFunc[Copy_uint8CommandNumber] = P_CommandCallbackFunc;
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4907      	ldr	r1, [pc, #28]	@ (8003108 <HESP32_SetCommandCallbackFunction+0x3c>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Loc_uint8FuncStatus = E_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e001      	b.n	80030fc <HESP32_SetCommandCallbackFunction+0x30>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	20000674 	.word	0x20000674

0800310c <HESP32_SetCommandCallbackArgFunction>:

Std_ReturnType HESP32_SetCommandCallbackArgFunction (uint8 Copy_uint8CommandNumber, ptr_to_Arg_Callback_func P_CommandCallbackFunc)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b1c      	cmp	r3, #28
 8003120:	d80b      	bhi.n	800313a <HESP32_SetCommandCallbackArgFunction+0x2e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HESP32_SetCommandCallbackArgFunction+0x2e>
    {
        #if HESP32_NO_OF_ARG_COMMANDS == 1
            glbl_PArgCallbackFunc = P_CommandCallbackFunc;
        #elif HESP32_NO_OF_ARG_COMMANDS > 1
            glbl_PArgCallbackFunc[Copy_uint8CommandNumber - HESP32_NO_OF_NON_ARG_COMMANDS] = P_CommandCallbackFunc;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	3b11      	subs	r3, #17
 800312c:	4907      	ldr	r1, [pc, #28]	@ (800314c <HESP32_SetCommandCallbackArgFunction+0x40>)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        #else
        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
        
        Loc_uint8FuncStatus = E_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e001      	b.n	800313e <HESP32_SetCommandCallbackArgFunction+0x32>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	200006e4 	.word	0x200006e4

08003150 <HESP32_SendMotorStatus>:

Std_ReturnType HESP32_SendMotorStatus               (uint32* P_uint32MotorSteps, uint32* P_uint32CurrentWL, uint8 Copy_uint8MotorNum)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    if((P_uint32MotorSteps != NULL_PTR) && (P_uint32CurrentWL != NULL_PTR) && ((Copy_uint8MotorNum == 1) || (Copy_uint8MotorNum == 3)))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03b      	beq.n	80031e0 <HESP32_SendMotorStatus+0x90>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d038      	beq.n	80031e0 <HESP32_SendMotorStatus+0x90>
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d002      	beq.n	800317a <HESP32_SendMotorStatus+0x2a>
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d132      	bne.n	80031e0 <HESP32_SendMotorStatus+0x90>
    {
        uint8 Loc_uint8Index = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	75bb      	strb	r3, [r7, #22]
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 800317e:	2300      	movs	r3, #0
 8003180:	75bb      	strb	r3, [r7, #22]
 8003182:	e015      	b.n	80031b0 <HESP32_SendMotorStatus+0x60>
        {
            MUART_SendIntegerValue(HESP32_UART_CHOICE, P_uint32MotorSteps[Loc_uint8Index]);
 8003184:	7dbb      	ldrb	r3, [r7, #22]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	2002      	movs	r0, #2
 8003192:	f003 fca3 	bl	8006adc <MUART_SendIntegerValue>
            if((Loc_uint8Index < 2) && (Copy_uint8MotorNum == 3))
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d80d      	bhi.n	80031b8 <HESP32_SendMotorStatus+0x68>
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d10a      	bne.n	80031b8 <HESP32_SendMotorStatus+0x68>
            {
                MUART_TxChar(HESP32_UART_CHOICE, '-');
 80031a2:	212d      	movs	r1, #45	@ 0x2d
 80031a4:	2002      	movs	r0, #2
 80031a6:	f003 fbe5 	bl	8006974 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 80031aa:	7dbb      	ldrb	r3, [r7, #22]
 80031ac:	3301      	adds	r3, #1
 80031ae:	75bb      	strb	r3, [r7, #22]
 80031b0:	7dba      	ldrb	r2, [r7, #22]
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d3e5      	bcc.n	8003184 <HESP32_SendMotorStatus+0x34>
			else
			{
				break;
			}
        }
        if(Copy_uint8MotorNum == 3)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d109      	bne.n	80031d2 <HESP32_SendMotorStatus+0x82>
        {
			MUART_TxChar(HESP32_UART_CHOICE, '-');
 80031be:	212d      	movs	r1, #45	@ 0x2d
 80031c0:	2002      	movs	r0, #2
 80031c2:	f003 fbd7 	bl	8006974 <MUART_TxChar>
            MUART_SendIntegerValue(HESP32_UART_CHOICE, *P_uint32CurrentWL);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	2002      	movs	r0, #2
 80031ce:	f003 fc85 	bl	8006adc <MUART_SendIntegerValue>
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80031d2:	210a      	movs	r1, #10
 80031d4:	2002      	movs	r0, #2
 80031d6:	f003 fbcd 	bl	8006974 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    {
 80031de:	e001      	b.n	80031e4 <HESP32_SendMotorStatus+0x94>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HESP32_SendDateTime>:
Std_ReturnType HESP32_SendDateTime                  (Sdate_t* P_SDateToBeSent, Stime_t* P_STimeToBeSent)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]

    if((P_SDateToBeSent != NULL_PTR) && (P_STimeToBeSent != NULL_PTR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d041      	beq.n	8003286 <HESP32_SendDateTime+0x98>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03e      	beq.n	8003286 <HESP32_SendDateTime+0x98>
    {
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_months));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	789b      	ldrb	r3, [r3, #2]
 800320c:	4619      	mov	r1, r3
 800320e:	2002      	movs	r0, #2
 8003210:	f003 fc64 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003214:	212f      	movs	r1, #47	@ 0x2f
 8003216:	2002      	movs	r0, #2
 8003218:	f003 fbac 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_days));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	78db      	ldrb	r3, [r3, #3]
 8003220:	4619      	mov	r1, r3
 8003222:	2002      	movs	r0, #2
 8003224:	f003 fc5a 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003228:	212f      	movs	r1, #47	@ 0x2f
 800322a:	2002      	movs	r0, #2
 800322c:	f003 fba2 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_years));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	2002      	movs	r0, #2
 8003238:	f003 fc50 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 800323c:	2120      	movs	r1, #32
 800323e:	2002      	movs	r0, #2
 8003240:	f003 fb98 	bl	8006974 <MUART_TxChar>
        
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_hours));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	2002      	movs	r0, #2
 800324c:	f003 fc46 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003250:	213a      	movs	r1, #58	@ 0x3a
 8003252:	2002      	movs	r0, #2
 8003254:	f003 fb8e 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_minutes));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	4619      	mov	r1, r3
 800325e:	2002      	movs	r0, #2
 8003260:	f003 fc3c 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003264:	213a      	movs	r1, #58	@ 0x3a
 8003266:	2002      	movs	r0, #2
 8003268:	f003 fb84 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_seconds));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	789b      	ldrb	r3, [r3, #2]
 8003270:	4619      	mov	r1, r3
 8003272:	2002      	movs	r0, #2
 8003274:	f003 fc32 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003278:	210a      	movs	r1, #10
 800327a:	2002      	movs	r0, #2
 800327c:	f003 fb7a 	bl	8006974 <MUART_TxChar>
        
        Loc_uint8FuncStatus = E_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e001      	b.n	800328a <HESP32_SendDateTime+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
    }

    return Loc_uint8FuncStatus;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HESP32_SendIntensities>:

Std_ReturnType HESP32_SendIntensities\               
    (float32 Copy_float32CurrentWL ,float32 P_float32RefIntensity, float32 P_float32SampleIntensity, Sdate_t* P_SCurrentDate, Stime_t* P_SCurrentTime)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08e      	sub	sp, #56	@ 0x38
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if((P_SCurrentDate != NULL_PTR) && (P_SCurrentTime != NULL_PTR))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8082 	beq.w	80033b4 <HESP32_SendIntensities+0x120>
 80032b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d07e      	beq.n	80033b4 <HESP32_SendIntensities+0x120>
    {
        uint8 Loc_uint8IntensityBuffer[32] = {0};
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	615a      	str	r2, [r3, #20]
 80032cc:	619a      	str	r2, [r3, #24]
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_months));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	789b      	ldrb	r3, [r3, #2]
 80032d2:	4619      	mov	r1, r3
 80032d4:	2002      	movs	r0, #2
 80032d6:	f003 fc01 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 80032da:	212f      	movs	r1, #47	@ 0x2f
 80032dc:	2002      	movs	r0, #2
 80032de:	f003 fb49 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_days));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	78db      	ldrb	r3, [r3, #3]
 80032e6:	4619      	mov	r1, r3
 80032e8:	2002      	movs	r0, #2
 80032ea:	f003 fbf7 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 80032ee:	212f      	movs	r1, #47	@ 0x2f
 80032f0:	2002      	movs	r0, #2
 80032f2:	f003 fb3f 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_years));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	2002      	movs	r0, #2
 80032fe:	f003 fbed 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxString(HESP32_UART_CHOICE, "||");
 8003302:	4931      	ldr	r1, [pc, #196]	@ (80033c8 <HESP32_SendIntensities+0x134>)
 8003304:	2002      	movs	r0, #2
 8003306:	f003 fb9f 	bl	8006a48 <MUART_TxString>

        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_hours));
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	2002      	movs	r0, #2
 8003312:	f003 fbe3 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003316:	213a      	movs	r1, #58	@ 0x3a
 8003318:	2002      	movs	r0, #2
 800331a:	f003 fb2b 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_minutes));
 800331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	4619      	mov	r1, r3
 8003324:	2002      	movs	r0, #2
 8003326:	f003 fbd9 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 800332a:	213a      	movs	r1, #58	@ 0x3a
 800332c:	2002      	movs	r0, #2
 800332e:	f003 fb21 	bl	8006974 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_seconds));
 8003332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003334:	789b      	ldrb	r3, [r3, #2]
 8003336:	4619      	mov	r1, r3
 8003338:	2002      	movs	r0, #2
 800333a:	f003 fbcf 	bl	8006adc <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 800333e:	2120      	movs	r1, #32
 8003340:	2002      	movs	r0, #2
 8003342:	f003 fb17 	bl	8006974 <MUART_TxChar>

        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", Copy_float32CurrentWL);
        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32CurrentWL, 3);
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	2203      	movs	r2, #3
 800334c:	68f9      	ldr	r1, [r7, #12]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fcfc 	bl	8002d4c <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	2002      	movs	r0, #2
 800335c:	f003 fb74 	bl	8006a48 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003360:	2120      	movs	r1, #32
 8003362:	2002      	movs	r0, #2
 8003364:	f003 fb06 	bl	8006974 <MUART_TxChar>
        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", *P_float32RefIntensity);
        float_to_string_manual(Loc_uint8IntensityBuffer, P_float32RefIntensity, 3);
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2203      	movs	r2, #3
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fceb 	bl	8002d4c <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	2002      	movs	r0, #2
 800337e:	f003 fb63 	bl	8006a48 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003382:	2120      	movs	r1, #32
 8003384:	2002      	movs	r0, #2
 8003386:	f003 faf5 	bl	8006974 <MUART_TxChar>
        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", *P_float32SampleIntensity);
        float_to_string_manual(Loc_uint8IntensityBuffer, P_float32SampleIntensity, 3);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	2203      	movs	r2, #3
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fcda 	bl	8002d4c <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4619      	mov	r1, r3
 800339e:	2002      	movs	r0, #2
 80033a0:	f003 fb52 	bl	8006a48 <MUART_TxString>
        
        
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80033a4:	210a      	movs	r1, #10
 80033a6:	2002      	movs	r0, #2
 80033a8:	f003 fae4 	bl	8006974 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    {
 80033b2:	e002      	b.n	80033ba <HESP32_SendIntensities+0x126>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    return Loc_uint8FuncStatus;
 80033ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3738      	adds	r7, #56	@ 0x38
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	0800c340 	.word	0x0800c340

080033cc <HESP32_SendVoltages>:

Std_ReturnType HESP32_SendVoltages(uint8 PP_uint8Voltages[][32])
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    if(PP_uint8Voltages != NULL_PTR)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01f      	beq.n	800341a <HESP32_SendVoltages+0x4e>
    {
        uint8 Loc_uint8Index = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e011      	b.n	8003408 <HESP32_SendVoltages+0x3c>
        {
            MUART_TxString(HESP32_UART_CHOICE, PP_uint8Voltages[Loc_uint8Index]);
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	015b      	lsls	r3, r3, #5
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	2002      	movs	r0, #2
 80033f0:	f003 fb2a 	bl	8006a48 <MUART_TxString>
            if(Loc_uint8Index < 4)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d803      	bhi.n	8003402 <HESP32_SendVoltages+0x36>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80033fa:	2120      	movs	r1, #32
 80033fc:	2002      	movs	r0, #2
 80033fe:	f003 fab9 	bl	8006974 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	3301      	adds	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d9ea      	bls.n	80033e4 <HESP32_SendVoltages+0x18>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 800340e:	210a      	movs	r1, #10
 8003410:	2002      	movs	r0, #2
 8003412:	f003 faaf 	bl	8006974 <MUART_TxChar>
        return E_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HESP32_SendVoltages+0x50>

    }
    else
    {
        return E_NOT_OK;
 800341a:	2301      	movs	r3, #1
    }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HESP32_SendAllDetectorValues>:
        return E_NOT_OK;
    }
}

Std_ReturnType HESP32_SendAllDetectorValues(float32* P_float32Readings, float32* P_float32GainValues)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	@ 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    if((P_float32GainValues != NULL_PTR) && (P_float32Readings != NULL_PTR))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d061      	beq.n	80034f8 <HESP32_SendAllDetectorValues+0xd4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d05e      	beq.n	80034f8 <HESP32_SendAllDetectorValues+0xd4>
    {
        uint8 Loc_uint8Index = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        uint8 Loc_uint8DetBuffer[32] = {0};
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	619a      	str	r2, [r3, #24]
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 8003458:	2300      	movs	r3, #0
 800345a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800345e:	e01a      	b.n	8003496 <HESP32_SendAllDetectorValues+0x72>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32Readings[Loc_uint8Index], 3);
 8003460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	2203      	movs	r2, #3
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fc6a 	bl	8002d4c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	4619      	mov	r1, r3
 800347e:	2002      	movs	r0, #2
 8003480:	f003 fae2 	bl	8006a48 <MUART_TxString>
            MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003484:	2120      	movs	r1, #32
 8003486:	2002      	movs	r0, #2
 8003488:	f003 fa74 	bl	8006974 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 800348c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003490:	3301      	adds	r3, #1
 8003492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800349a:	2b03      	cmp	r3, #3
 800349c:	d9e0      	bls.n	8003460 <HESP32_SendAllDetectorValues+0x3c>
        }
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80034a4:	e01e      	b.n	80034e4 <HESP32_SendAllDetectorValues+0xc0>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32GainValues[Loc_uint8Index], 3);
 80034a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	2203      	movs	r2, #3
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc47 	bl	8002d4c <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	4619      	mov	r1, r3
 80034c4:	2002      	movs	r0, #2
 80034c6:	f003 fabf 	bl	8006a48 <MUART_TxString>
            if(Loc_uint8Index < 1)
 80034ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HESP32_SendAllDetectorValues+0xb6>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80034d2:	2120      	movs	r1, #32
 80034d4:	2002      	movs	r0, #2
 80034d6:	f003 fa4d 	bl	8006974 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 80034da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034de:	3301      	adds	r3, #1
 80034e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80034e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d9dc      	bls.n	80034a6 <HESP32_SendAllDetectorValues+0x82>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80034ec:	210a      	movs	r1, #10
 80034ee:	2002      	movs	r0, #2
 80034f0:	f003 fa40 	bl	8006974 <MUART_TxChar>
        return E_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HESP32_SendAllDetectorValues+0xd6>
    }
    else
    {
        return E_NOT_OK;
 80034f8:	2301      	movs	r3, #1
    }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3730      	adds	r7, #48	@ 0x30
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <delay_ms>:
 */
#include "MCP4151.h"
#include "math.h"

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e002      	b.n	8003522 <delay_ms+0x20>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3f8      	bcc.n	800351c <delay_ms+0x1a>
		// Do nothing
	}
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <delay_micro>:
void delay_micro(uint32 milliseconds) {
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <delay_micro+0x18>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3f8      	bcc.n	8003548 <delay_micro+0x12>
		// Do nothing
	}
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <MCP4151_Sample_SetWiperPosition>:
void MCP4151_Sample_SetWiperPosition(uint8 position){
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 800356e:	2300      	movs	r3, #0
 8003570:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_LOW);
 8003572:	2200      	movs	r2, #0
 8003574:	2108      	movs	r1, #8
 8003576:	2000      	movs	r0, #0
 8003578:	f001 fdbe 	bl	80050f8 <MGPIO_SetPinValue>
	delay_micro(10);
 800357c:	200a      	movs	r0, #10
 800357e:	f7ff ffda 	bl	8003536 <delay_micro>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003582:	f107 030e 	add.w	r3, r7, #14
 8003586:	2200      	movs	r2, #0
 8003588:	4619      	mov	r1, r3
 800358a:	480e      	ldr	r0, [pc, #56]	@ (80035c4 <MCP4151_Sample_SetWiperPosition+0x60>)
 800358c:	f002 ff5e 	bl	800644c <MCAL_SPI_SendData>
	delay_micro(10);
 8003590:	200a      	movs	r0, #10
 8003592:	f7ff ffd0 	bl	8003536 <delay_micro>
	command = position;
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	b29b      	uxth	r3, r3
 800359a:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 800359c:	f107 030e 	add.w	r3, r7, #14
 80035a0:	2200      	movs	r2, #0
 80035a2:	4619      	mov	r1, r3
 80035a4:	4807      	ldr	r0, [pc, #28]	@ (80035c4 <MCP4151_Sample_SetWiperPosition+0x60>)
 80035a6:	f002 ff51 	bl	800644c <MCAL_SPI_SendData>
	delay_micro(10);
 80035aa:	200a      	movs	r0, #10
 80035ac:	f7ff ffc3 	bl	8003536 <delay_micro>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 80035b0:	2201      	movs	r2, #1
 80035b2:	2108      	movs	r1, #8
 80035b4:	2000      	movs	r0, #0
 80035b6:	f001 fd9f 	bl	80050f8 <MGPIO_SetPinValue>
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40003800 	.word	0x40003800

080035c8 <MCP4151_Referance_SetWiperPosition>:

void MCP4151_Referance_SetWiperPosition(uint8 position){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 80035d2:	2300      	movs	r3, #0
 80035d4:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_LOW);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2102      	movs	r1, #2
 80035da:	2000      	movs	r0, #0
 80035dc:	f001 fd8c 	bl	80050f8 <MGPIO_SetPinValue>
	delay_ms(10);
 80035e0:	200a      	movs	r0, #10
 80035e2:	f7ff ff8e 	bl	8003502 <delay_ms>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80035e6:	f107 030e 	add.w	r3, r7, #14
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	480e      	ldr	r0, [pc, #56]	@ (8003628 <MCP4151_Referance_SetWiperPosition+0x60>)
 80035f0:	f002 ff2c 	bl	800644c <MCAL_SPI_SendData>
	delay_ms(10);
 80035f4:	200a      	movs	r0, #10
 80035f6:	f7ff ff84 	bl	8003502 <delay_ms>
	command = position;
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003600:	f107 030e 	add.w	r3, r7, #14
 8003604:	2200      	movs	r2, #0
 8003606:	4619      	mov	r1, r3
 8003608:	4807      	ldr	r0, [pc, #28]	@ (8003628 <MCP4151_Referance_SetWiperPosition+0x60>)
 800360a:	f002 ff1f 	bl	800644c <MCAL_SPI_SendData>
	delay_ms(10);
 800360e:	200a      	movs	r0, #10
 8003610:	f7ff ff77 	bl	8003502 <delay_ms>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 8003614:	2201      	movs	r2, #1
 8003616:	2102      	movs	r1, #2
 8003618:	2000      	movs	r0, #0
 800361a:	f001 fd6d 	bl	80050f8 <MGPIO_SetPinValue>
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40003800 	.word	0x40003800

0800362c <MCP4151_Init>:
 * @param[in]		 -none
 * @retval			 -none
 * Note				 -SPI2 used
 */
void MCP4151_Init()
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
	//SPI Init

	SPI_Config SPI2CFG;

	SPI2CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8003632:	2301      	movs	r3, #1
 8003634:	817b      	strh	r3, [r7, #10]
	SPI2CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8003636:	2302      	movs	r3, #2
 8003638:	813b      	strh	r3, [r7, #8]
	SPI2CFG.DataSize = SPI_DataSize_8BIT;
 800363a:	2300      	movs	r3, #0
 800363c:	80fb      	strh	r3, [r7, #6]
	SPI2CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 800363e:	2300      	movs	r3, #0
 8003640:	80bb      	strh	r3, [r7, #4]
	SPI2CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_16;
 8003642:	2318      	movs	r3, #24
 8003644:	81fb      	strh	r3, [r7, #14]
	SPI2CFG.Communication_Mode = SPI_Direction_2LINES;
 8003646:	2300      	movs	r3, #0
 8003648:	807b      	strh	r3, [r7, #2]

#ifdef MCU_Act_As_Master

	SPI2CFG.Device_Mode = SPI_Device_Mode_MASTER;
 800364a:	2304      	movs	r3, #4
 800364c:	803b      	strh	r3, [r7, #0]
	SPI2CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 800364e:	2300      	movs	r3, #0
 8003650:	823b      	strh	r3, [r7, #16]
	SPI2CFG.NSS = SPI_NSS_soft_NSSInternalSoft_Set;
 8003652:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003656:	81bb      	strh	r3, [r7, #12]
	SPI2CFG.P_IRQ_CallBack = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_Init(SPI2,&SPI2CFG);
 800365c:	463b      	mov	r3, r7
 800365e:	4619      	mov	r1, r3
 8003660:	4804      	ldr	r0, [pc, #16]	@ (8003674 <MCP4151_Init+0x48>)
 8003662:	f002 fe6d 	bl	8006340 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins (SPI2);
 8003666:	4803      	ldr	r0, [pc, #12]	@ (8003674 <MCP4151_Init+0x48>)
 8003668:	f002 ff30 	bl	80064cc <MCAL_SPI_GPIO_Set_Pins>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40003800 	.word	0x40003800

08003678 <Set_Sample_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_reference_gain"
 */
void Set_Sample_Gain(float32 gain)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	//Sample
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 8003680:	2201      	movs	r2, #1
 8003682:	2108      	movs	r1, #8
 8003684:	2000      	movs	r0, #0
 8003686:	f001 fc51 	bl	8004f2c <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 800368a:	2201      	movs	r2, #1
 800368c:	2108      	movs	r1, #8
 800368e:	2000      	movs	r0, #0
 8003690:	f001 fd32 	bl	80050f8 <MGPIO_SetPinValue>
	delay_micro(5);
 8003694:	2005      	movs	r0, #5
 8003696:	f7ff ff4e 	bl	8003536 <delay_micro>
	ref_sample x = SAMPLE;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f82c 	bl	8003700 <steps_calculate>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73bb      	strb	r3, [r7, #14]
	MCP4151_Sample_SetWiperPosition(steps);
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff58 	bl	8003564 <MCP4151_Sample_SetWiperPosition>
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <Set_Reference_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_sample_gain"
 */
void Set_Reference_Gain(float32 gain)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	//Referance
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 80036c4:	2201      	movs	r2, #1
 80036c6:	2102      	movs	r1, #2
 80036c8:	2000      	movs	r0, #0
 80036ca:	f001 fc2f 	bl	8004f2c <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 80036ce:	2201      	movs	r2, #1
 80036d0:	2102      	movs	r1, #2
 80036d2:	2000      	movs	r0, #0
 80036d4:	f001 fd10 	bl	80050f8 <MGPIO_SetPinValue>
	delay_ms(5);
 80036d8:	2005      	movs	r0, #5
 80036da:	f7ff ff12 	bl	8003502 <delay_ms>
	ref_sample x = REFERENCE;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f80a 	bl	8003700 <steps_calculate>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73bb      	strb	r3, [r7, #14]
	MCP4151_Referance_SetWiperPosition(steps);
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ff68 	bl	80035c8 <MCP4151_Referance_SetWiperPosition>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <steps_calculate>:
 * @param[in]		 -x: where x can be REFERENCE or SAMPLE
 * @retval			 -steps: calculated no. of steps
 * Note			 	 -The number of steps is rounded to the nearest integer
 */
uint8 steps_calculate(float32 gain, ref_sample x)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
	int total_resistance;
	if (x == REFERENCE)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <steps_calculate+0x1a>
		total_resistance = MCP_TOTAL_RESISTANCE_REFERENCE;
 8003712:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e002      	b.n	8003720 <steps_calculate+0x20>
	else
		total_resistance = MCP_TOTAL_RESISTANCE_SAMPLE;
 800371a:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 800371e:	617b      	str	r3, [r7, #20]
	float32 R;
	R = (RESISTANCE_ON_PCB / (gain - 1)) + WIPER_RESISTANCE;
 8003720:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd fa15 	bl	8000b54 <__aeabi_fsub>
 800372a:	4603      	mov	r3, r0
 800372c:	4619      	mov	r1, r3
 800372e:	481d      	ldr	r0, [pc, #116]	@ (80037a4 <steps_calculate+0xa4>)
 8003730:	f7fd fbce 	bl	8000ed0 <__aeabi_fdiv>
 8003734:	4603      	mov	r3, r0
 8003736:	491c      	ldr	r1, [pc, #112]	@ (80037a8 <steps_calculate+0xa8>)
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd fa0d 	bl	8000b58 <__addsf3>
 800373e:	4603      	mov	r3, r0
 8003740:	613b      	str	r3, [r7, #16]
	float32 steps_result;
	steps_result = ((total_resistance - R) * 256) / total_resistance;
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7fd fabc 	bl	8000cc0 <__aeabi_i2f>
 8003748:	4603      	mov	r3, r0
 800374a:	6939      	ldr	r1, [r7, #16]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fa01 	bl	8000b54 <__aeabi_fsub>
 8003752:	4603      	mov	r3, r0
 8003754:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fb05 	bl	8000d68 <__aeabi_fmul>
 800375e:	4603      	mov	r3, r0
 8003760:	461c      	mov	r4, r3
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7fd faac 	bl	8000cc0 <__aeabi_i2f>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4620      	mov	r0, r4
 800376e:	f7fd fbaf 	bl	8000ed0 <__aeabi_fdiv>
 8003772:	4603      	mov	r3, r0
 8003774:	60fb      	str	r3, [r7, #12]
	uint8 steps = round(steps_result);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7fc fe70 	bl	800045c <__aeabi_f2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f007 fea0 	bl	800b4c8 <round>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd f96c 	bl	8000a6c <__aeabi_d2uiz>
 8003794:	4603      	mov	r3, r0
 8003796:	72fb      	strb	r3, [r7, #11]
	return steps;
 8003798:	7afb      	ldrb	r3, [r7, #11]
}
 800379a:	4618      	mov	r0, r3
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	47c35000 	.word	0x47c35000
 80037a8:	439b8000 	.word	0x439b8000
 80037ac:	00000000 	.word	0x00000000

080037b0 <get_reference_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the reference
 * Note			 	 -none
 */
float32 get_reference_gain(float32 gain)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	ref_sample x = REFERENCE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff9d 	bl	8003700 <steps_calculate>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_REFERENCE - steps * (MCP_TOTAL_RESISTANCE_REFERENCE / 256.0);
 80037ca:	7bbb      	ldrb	r3, [r7, #14]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fe33 	bl	8000438 <__aeabi_i2d>
 80037d2:	a313      	add	r3, pc, #76	@ (adr r3, 8003820 <get_reference_gain+0x70>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc fe98 	bl	800050c <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	a111      	add	r1, pc, #68	@ (adr r1, 8003828 <get_reference_gain+0x78>)
 80037e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037e6:	f7fc fcd9 	bl	800019c <__aeabi_dsub>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f7fd f95b 	bl	8000aac <__aeabi_d2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	480c      	ldr	r0, [pc, #48]	@ (8003830 <get_reference_gain+0x80>)
 80037fe:	f7fd fb67 	bl	8000ed0 <__aeabi_fdiv>
 8003802:	4603      	mov	r3, r0
 8003804:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd f9a5 	bl	8000b58 <__addsf3>
 800380e:	4603      	mov	r3, r0
 8003810:	607b      	str	r3, [r7, #4]
	return gain;
 8003812:	687b      	ldr	r3, [r7, #4]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	f3af 8000 	nop.w
 8003820:	00000000 	.word	0x00000000
 8003824:	4067a200 	.word	0x4067a200
 8003828:	00000000 	.word	0x00000000
 800382c:	40e7a200 	.word	0x40e7a200
 8003830:	47c35000 	.word	0x47c35000
 8003834:	00000000 	.word	0x00000000

08003838 <get_sample_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the sample
 * Note			 	 -none
 */
float32 get_sample_gain(float32 gain)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	ref_sample x = SAMPLE;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff59 	bl	8003700 <steps_calculate>
 800384e:	4603      	mov	r3, r0
 8003850:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_SAMPLE- steps * (MCP_TOTAL_RESISTANCE_SAMPLE / 256.0);
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fc fdef 	bl	8000438 <__aeabi_i2d>
 800385a:	a313      	add	r3, pc, #76	@ (adr r3, 80038a8 <get_sample_gain+0x70>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fc fe54 	bl	800050c <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	a111      	add	r1, pc, #68	@ (adr r1, 80038b0 <get_sample_gain+0x78>)
 800386a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800386e:	f7fc fc95 	bl	800019c <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f917 	bl	8000aac <__aeabi_d2f>
 800387e:	4603      	mov	r3, r0
 8003880:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	480c      	ldr	r0, [pc, #48]	@ (80038b8 <get_sample_gain+0x80>)
 8003886:	f7fd fb23 	bl	8000ed0 <__aeabi_fdiv>
 800388a:	4603      	mov	r3, r0
 800388c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd f961 	bl	8000b58 <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	607b      	str	r3, [r7, #4]
	return gain;
 800389a:	687b      	ldr	r3, [r7, #4]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	f3af 8000 	nop.w
 80038a8:	00000000 	.word	0x00000000
 80038ac:	4067a200 	.word	0x4067a200
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40e7a200 	.word	0x40e7a200
 80038b8:	47c35000 	.word	0x47c35000

080038bc <HPWRSupply_GetSenseValue>:
static volatile uint16 glbl_uint16SenseValue[HPWRSUPPLY_NO_OF_SENSE_CHANNELS] = {0};
static volatile uint8 glbl_uint8SlowChannelFlag = 0;


void HPWRSupply_GetSenseValue(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	80fb      	strh	r3, [r7, #6]
    
    /****************************Check if VIS supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[0] == HPWRSUPPLY_ON)
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HPWRSupply_GetSenseValue+0x80>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d121      	bne.n	8003914 <HPWRSupply_GetSenseValue+0x58>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[0], &Loc_uint16VoltageValue);
 80038d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <HPWRSupply_GetSenseValue+0x84>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	1dba      	adds	r2, r7, #6
 80038d8:	4619      	mov	r1, r3
 80038da:	2000      	movs	r0, #0
 80038dc:	f001 f88a 	bl	80049f4 <MADC_Conversion>
        glbl_uint16SenseValue[0] = Loc_uint16VoltageValue;
 80038e0:	88fa      	ldrh	r2, [r7, #6]
 80038e2:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <HPWRSupply_GetSenseValue+0x88>)
 80038e4:	801a      	strh	r2, [r3, #0]
        if(glbl_uint8SlowChannelFlag == 1)
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <HPWRSupply_GetSenseValue+0x8c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10e      	bne.n	800390e <HPWRSupply_GetSenseValue+0x52>
        {
            MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[1], &Loc_uint16VoltageValue);
 80038f0:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <HPWRSupply_GetSenseValue+0x84>)
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	1dba      	adds	r2, r7, #6
 80038f8:	4619      	mov	r1, r3
 80038fa:	2000      	movs	r0, #0
 80038fc:	f001 f87a 	bl	80049f4 <MADC_Conversion>
            glbl_uint16SenseValue[1] = Loc_uint16VoltageValue;
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HPWRSupply_GetSenseValue+0x88>)
 8003904:	805a      	strh	r2, [r3, #2]
            glbl_uint8SlowChannelFlag = 0;
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HPWRSupply_GetSenseValue+0x8c>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e002      	b.n	8003914 <HPWRSupply_GetSenseValue+0x58>
        }
        else
        {
            glbl_uint8SlowChannelFlag = 1;
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HPWRSupply_GetSenseValue+0x8c>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
    {
        /*Do nothing*/
    }

    /****************************Check if UV supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[1] == HPWRSUPPLY_ON)
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HPWRSupply_GetSenseValue+0x80>)
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10a      	bne.n	8003934 <HPWRSupply_GetSenseValue+0x78>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[2], &Loc_uint16VoltageValue);
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <HPWRSupply_GetSenseValue+0x84>)
 8003920:	789b      	ldrb	r3, [r3, #2]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	4619      	mov	r1, r3
 8003928:	2000      	movs	r0, #0
 800392a:	f001 f863 	bl	80049f4 <MADC_Conversion>
        glbl_uint16SenseValue[2] = Loc_uint16VoltageValue;
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <HPWRSupply_GetSenseValue+0x88>)
 8003932:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        /*Do nothing*/
    }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000740 	.word	0x20000740
 8003940:	20000368 	.word	0x20000368
 8003944:	20000744 	.word	0x20000744
 8003948:	2000074a 	.word	0x2000074a

0800394c <HPWRSupply_InitSupplies>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Interface Initialized
 * @retval E_NOT_OK:                                Interface not initialized 
 */
Std_ReturnType HPWRSupply_InitSupplies              (void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM4_EN);
 8003952:	2102      	movs	r1, #2
 8003954:	2002      	movs	r0, #2
 8003956:	f002 fa69 	bl	8005e2c <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 800395a:	2109      	movs	r1, #9
 800395c:	2003      	movs	r0, #3
 800395e:	f002 fa65 	bl	8005e2c <MRCC_EnablePeripheralClock>
    uint8 Loc_uint8Index = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]

    /************************Initialize Pins Used in PWRSupply Interface************************/
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003966:	2300      	movs	r3, #0
 8003968:	71fb      	strb	r3, [r7, #7]
 800396a:	e00e      	b.n	800398a <HPWRSupply_InitSupplies+0x3e>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	4a1e      	ldr	r2, [pc, #120]	@ (80039e8 <HPWRSupply_InitSupplies+0x9c>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplySensePinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003976:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HPWRSupply_InitSupplies+0xa0>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 800397c:	2200      	movs	r2, #0
 800397e:	4619      	mov	r1, r3
 8003980:	f001 fad4 	bl	8004f2c <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	3301      	adds	r3, #1
 8003988:	71fb      	strb	r3, [r7, #7]
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d9ed      	bls.n	800396c <HPWRSupply_InitSupplies+0x20>
    }

    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8003990:	2300      	movs	r3, #0
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	e00e      	b.n	80039b4 <HPWRSupply_InitSupplies+0x68>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <HPWRSupply_InitSupplies+0xa4>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	b2d8      	uxtb	r0, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplyControlPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80039a0:	4a14      	ldr	r2, [pc, #80]	@ (80039f4 <HPWRSupply_InitSupplies+0xa8>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 80039a6:	2202      	movs	r2, #2
 80039a8:	4619      	mov	r1, r3
 80039aa:	f001 fabf 	bl	8004f2c <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	3301      	adds	r3, #1
 80039b2:	71fb      	strb	r3, [r7, #7]
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d9ed      	bls.n	8003996 <HPWRSupply_InitSupplies+0x4a>
    }


    MNVIC_EnableInterrupt(MNVIC_TIM4);
 80039ba:	201e      	movs	r0, #30
 80039bc:	f002 f950 	bl	8005c60 <MNVIC_EnableInterrupt>

    //MADC_Init(MADC1);
    
    MGPTMR_SetTimerPeriod(MGPTMR4, 2000);
 80039c0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80039c4:	2002      	movs	r0, #2
 80039c6:	f001 fdbf 	bl	8005548 <MGPTMR_SetTimerPeriod>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR4, HPWRSupply_GetSenseValue);
 80039ca:	490b      	ldr	r1, [pc, #44]	@ (80039f8 <HPWRSupply_InitSupplies+0xac>)
 80039cc:	2002      	movs	r0, #2
 80039ce:	f001 fde3 	bl	8005598 <MGPTMR_SetTimerUpdateCallbackFunc>
    MGPTMR_Init(MGPTMR4);
 80039d2:	2002      	movs	r0, #2
 80039d4:	f001 fcfe 	bl	80053d4 <MGPTMR_Init>
    MGPTMR_StartTimer(MGPTMR4);
 80039d8:	2002      	movs	r0, #2
 80039da:	f001 fd7b 	bl	80054d4 <MGPTMR_StartTimer>
}
 80039de:	bf00      	nop
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	2000036c 	.word	0x2000036c
 80039ec:	20000370 	.word	0x20000370
 80039f0:	20000374 	.word	0x20000374
 80039f4:	20000378 	.word	0x20000378
 80039f8:	080038bd 	.word	0x080038bd

080039fc <HPWRSupply_SetSupplyMode>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Supply's mode set successfully
 * @retval E_NOT_OK:                                Supply's mode not set  
 */
Std_ReturnType HPWRSupply_SetSupplyMode             (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Mode_t Copy_uint32SupplyMode)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	460a      	mov	r2, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint32SupplyChoice)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04e      	beq.n	8003ab4 <HPWRSupply_SetSupplyMode+0xb8>
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d179      	bne.n	8003b0e <HPWRSupply_SetSupplyMode+0x112>
    {
        case HPWRSUPPLY_VIS_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003a1a:	79bb      	ldrb	r3, [r7, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d121      	bne.n	8003a64 <HPWRSupply_SetSupplyMode+0x68>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_HIGH);
 8003a20:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HPWRSupply_SetSupplyMode+0x124>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4a3f      	ldr	r2, [pc, #252]	@ (8003b24 <HPWRSupply_SetSupplyMode+0x128>)
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	b2d1      	uxtb	r1, r2
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fb62 	bl	80050f8 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_ON;
 8003a34:	4b3c      	ldr	r3, [pc, #240]	@ (8003b28 <HPWRSupply_SetSupplyMode+0x12c>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
                MSTK_uint8Delay(4000);
 8003a3a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003a3e:	f002 fe31 	bl	80066a4 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003a42:	2304      	movs	r3, #4
 8003a44:	73bb      	strb	r3, [r7, #14]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003a46:	f107 030e 	add.w	r3, r7, #14
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f000 f86d 	bl	8003b2c <HPWRSupply_CheckSupplyStatus>
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d102      	bne.n	8003a5e <HPWRSupply_SetSupplyMode+0x62>
                {
                    Loc_uint8FuncStatus = E_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003a5c:	e05a      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
            break;
 8003a62:	e057      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003a64:	79bb      	ldrb	r3, [r7, #6]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d121      	bne.n	8003aae <HPWRSupply_SetSupplyMode+0xb2>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_LOW);
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b20 <HPWRSupply_SetSupplyMode+0x124>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4a2c      	ldr	r2, [pc, #176]	@ (8003b24 <HPWRSupply_SetSupplyMode+0x128>)
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	b2d1      	uxtb	r1, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fb3d 	bl	80050f8 <MGPIO_SetPinValue>
                MSTK_uint8Delay(4000);
 8003a7e:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003a82:	f002 fe0f 	bl	80066a4 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003a86:	2302      	movs	r3, #2
 8003a88:	737b      	strb	r3, [r7, #13]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003a8a:	f107 030d 	add.w	r3, r7, #13
 8003a8e:	4619      	mov	r1, r3
 8003a90:	2001      	movs	r0, #1
 8003a92:	f000 f84b 	bl	8003b2c <HPWRSupply_CheckSupplyStatus>
								glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003a96:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <HPWRSupply_SetSupplyMode+0x12c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OFF)
 8003a9c:	7b7b      	ldrb	r3, [r7, #13]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d102      	bne.n	8003aa8 <HPWRSupply_SetSupplyMode+0xac>
                    Loc_uint8FuncStatus = E_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
            break;
 8003aa6:	e035      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
            break;
 8003aac:	e032      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
            break;
 8003ab2:	e02f      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
        }
        case HPWRSUPPLY_UV_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d113      	bne.n	8003ae2 <HPWRSupply_SetSupplyMode+0xe6>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_LOW);
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HPWRSupply_SetSupplyMode+0x124>)
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HPWRSupply_SetSupplyMode+0x128>)
 8003ac2:	7852      	ldrb	r2, [r2, #1]
 8003ac4:	b2d1      	uxtb	r1, r2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fb15 	bl	80050f8 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[1] = HPWRSUPPLY_ON;
 8003ace:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <HPWRSupply_SetSupplyMode+0x12c>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	705a      	strb	r2, [r3, #1]
								MSTK_uint8Delay(11000);
 8003ad4:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 8003ad8:	f002 fde4 	bl	80066a4 <MSTK_uint8Delay>
                Loc_uint8FuncStatus = E_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003ae0:	e018      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <HPWRSupply_SetSupplyMode+0x10c>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_HIGH);
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <HPWRSupply_SetSupplyMode+0x124>)
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <HPWRSupply_SetSupplyMode+0x128>)
 8003af0:	7852      	ldrb	r2, [r2, #1]
 8003af2:	b2d1      	uxtb	r1, r2
 8003af4:	2201      	movs	r2, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fafe 	bl	80050f8 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HPWRSupply_SetSupplyMode+0x12c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
            break;
 8003b06:	e005      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
            break;
 8003b0c:	e002      	b.n	8003b14 <HPWRSupply_SetSupplyMode+0x118>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
            break;
 8003b12:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000374 	.word	0x20000374
 8003b24:	20000378 	.word	0x20000378
 8003b28:	20000740 	.word	0x20000740

08003b2c <HPWRSupply_CheckSupplyStatus>:
 * @param Copy_uint32SupplyChoice:                  The power supply whose status is to be checked 
 * @param P_uint32SupplyStatus:                     Power Supply Status (Ok or not Ok or Off)
 * @return Std_ReturnType 
 */
Std_ReturnType HPWRSupply_CheckSupplyStatus         (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Status_t* P_uint32SupplyStatus)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
    if(P_uint32SupplyStatus != NULL_PTR)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d054      	beq.n	8003bec <HPWRSupply_CheckSupplyStatus+0xc0>
    {
        switch(Copy_uint32SupplyChoice)
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d037      	beq.n	8003bb8 <HPWRSupply_CheckSupplyStatus+0x8c>
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d14c      	bne.n	8003be6 <HPWRSupply_CheckSupplyStatus+0xba>
        {
            case HPWRSUPPLY_VIS_SUPPLY:
            {
                float32 Loc_float32VisSupplySenseVoltage = ((float32)glbl_uint16SenseValue[0] / 4096) * 3.3f;
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd f8b0 	bl	8000cb8 <__aeabi_ui2f>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd f9b6 	bl	8000ed0 <__aeabi_fdiv>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4926      	ldr	r1, [pc, #152]	@ (8003c00 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd f8fd 	bl	8000d68 <__aeabi_fmul>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]
                /*Check if Loc_float32VisSupplySenseVoltage is equal to a certain value*/
                /*if it is equal, supply is working well*/
                if((Loc_float32VisSupplySenseVoltage > 0.124f) && (Loc_float32VisSupplySenseVoltage < 0.2f))
 8003b72:	4924      	ldr	r1, [pc, #144]	@ (8003c04 <HPWRSupply_CheckSupplyStatus+0xd8>)
 8003b74:	6938      	ldr	r0, [r7, #16]
 8003b76:	f7fd fab3 	bl	80010e0 <__aeabi_fcmpgt>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HPWRSupply_CheckSupplyStatus+0x6e>
 8003b80:	4921      	ldr	r1, [pc, #132]	@ (8003c08 <HPWRSupply_CheckSupplyStatus+0xdc>)
 8003b82:	6938      	ldr	r0, [r7, #16]
 8003b84:	f7fd fa8e 	bl	80010a4 <__aeabi_fcmplt>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HPWRSupply_CheckSupplyStatus+0x6e>
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2202      	movs	r2, #2
 8003b92:	701a      	strb	r2, [r3, #0]
                    Loc_uint8FuncStatus = E_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
                }
                break;
 8003b98:	e02a      	b.n	8003bf0 <HPWRSupply_CheckSupplyStatus+0xc4>
                else if(Loc_float32VisSupplySenseVoltage < 0.05f)
 8003b9a:	491c      	ldr	r1, [pc, #112]	@ (8003c0c <HPWRSupply_CheckSupplyStatus+0xe0>)
 8003b9c:	6938      	ldr	r0, [r7, #16]
 8003b9e:	f7fd fa81 	bl	80010a4 <__aeabi_fcmplt>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HPWRSupply_CheckSupplyStatus+0x84>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2204      	movs	r2, #4
 8003bac:	701a      	strb	r2, [r3, #0]
                break;
 8003bae:	e01f      	b.n	8003bf0 <HPWRSupply_CheckSupplyStatus+0xc4>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	701a      	strb	r2, [r3, #0]
                break;
 8003bb6:	e01b      	b.n	8003bf0 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            case HPWRSUPPLY_UV_SUPPLY:
            {
                float32 Loc_float32UVSupplySenseVoltage = ((float32)glbl_uint16SenseValue[2] / 4096) * 3.3f;
 8003bb8:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003bba:	889b      	ldrh	r3, [r3, #4]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd f87a 	bl	8000cb8 <__aeabi_ui2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f980 	bl	8000ed0 <__aeabi_fdiv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	490b      	ldr	r1, [pc, #44]	@ (8003c00 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd f8c7 	bl	8000d68 <__aeabi_fmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	60fb      	str	r3, [r7, #12]
                /*Check if Loc_float32UVSupplySenseVoltage is equal to a certain value*/
                *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
                /*if it is equal, supply is working well*/
                break;
 8003be4:	e004      	b.n	8003bf0 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
                break;
 8003bea:	e001      	b.n	8003bf0 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000744 	.word	0x20000744
 8003c00:	40533333 	.word	0x40533333
 8003c04:	3dfdf3b6 	.word	0x3dfdf3b6
 8003c08:	3e4ccccd 	.word	0x3e4ccccd
 8003c0c:	3d4ccccd 	.word	0x3d4ccccd

08003c10 <SPWRVolt_GetConversionValue>:
static volatile uint16 glbl_uint16VoltageValues[SPWRVOLT_NO_OF_VOLTAGE_SOURCES] = {0};
static volatile uint8 glbl_uint8VoltageIndex = 0;


void SPWRVolt_GetConversionValue    (void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	80fb      	strh	r3, [r7, #6]

    MADC_Conversion(MADC1, SPWRVolt_VoltageChannels[glbl_uint8VoltageIndex], &Loc_uint16VoltageValue);
 8003c1a:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <SPWRVolt_GetConversionValue+0x5c>)
 8003c24:	5c9b      	ldrb	r3, [r3, r2]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	1dba      	adds	r2, r7, #6
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f000 fee1 	bl	80049f4 <MADC_Conversion>
    glbl_uint16VoltageValues[glbl_uint8VoltageIndex] = Loc_uint16VoltageValue;
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	88f9      	ldrh	r1, [r7, #6]
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <SPWRVolt_GetConversionValue+0x60>)
 8003c3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    glbl_uint8VoltageIndex++;
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c4e:	701a      	strb	r2, [r3, #0]
    if(glbl_uint8VoltageIndex == SPWRVOLT_NO_OF_VOLTAGE_SOURCES)
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d102      	bne.n	8003c60 <SPWRVolt_GetConversionValue+0x50>
    {
        glbl_uint8VoltageIndex = 0;
 8003c5a:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <SPWRVolt_GetConversionValue+0x58>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
        //MGPTMR_StopTimer(MGPTMR3);
    }
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000075e 	.word	0x2000075e
 8003c6c:	20000384 	.word	0x20000384
 8003c70:	20000754 	.word	0x20000754

08003c74 <SPWRVolt_Init>:
 * @return Std_ReturnType
 * @retval E_OK:            Interface Successfully Initialized
 * @retval E_NOT_OK:        Interface not initialized 
 */
Std_ReturnType SPWRVolt_Init        (void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    /*Initialize Pins to be input analog*/
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM3_EN);
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f002 f8d5 	bl	8005e2c <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 8003c82:	2109      	movs	r1, #9
 8003c84:	2003      	movs	r0, #3
 8003c86:	f002 f8d1 	bl	8005e2c <MRCC_EnablePeripheralClock>
    
	uint8 Loc_uint8Index = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	71fb      	strb	r3, [r7, #7]
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	71fb      	strb	r3, [r7, #7]
 8003c92:	e00e      	b.n	8003cb2 <SPWRVolt_Init+0x3e>
    {
        MGPIO_SetPinMode(SPWRVolt_VoltagesPortIDs[Loc_uint8Index], SPWRVolt_VoltagesPinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <SPWRVolt_Init+0x7c>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	b2d8      	uxtb	r0, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <SPWRVolt_Init+0x80>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f001 f940 	bl	8004f2c <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	71fb      	strb	r3, [r7, #7]
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d9ed      	bls.n	8003c94 <SPWRVolt_Init+0x20>
    }
		
    MADC_Init(MADC1);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f000 fdf3 	bl	80048a4 <MADC_Init>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR3, SPWRVolt_GetConversionValue);
 8003cbe:	490e      	ldr	r1, [pc, #56]	@ (8003cf8 <SPWRVolt_Init+0x84>)
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f001 fc69 	bl	8005598 <MGPTMR_SetTimerUpdateCallbackFunc>

    MGPTMR_SetTimerPeriod(MGPTMR3, 1000);
 8003cc6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f001 fc3c 	bl	8005548 <MGPTMR_SetTimerPeriod>
		
	MNVIC_EnableInterrupt(MNVIC_TIM3);
 8003cd0:	201d      	movs	r0, #29
 8003cd2:	f001 ffc5 	bl	8005c60 <MNVIC_EnableInterrupt>
		
    MGPTMR_Init(MGPTMR3);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f001 fb7c 	bl	80053d4 <MGPTMR_Init>

    SPWRVolt_GetConversionValue();
 8003cdc:	f7ff ff98 	bl	8003c10 <SPWRVolt_GetConversionValue>

    MGPTMR_StartTimer(MGPTMR3);
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f001 fbf7 	bl	80054d4 <MGPTMR_StartTimer>

    return E_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	2000074c 	.word	0x2000074c
 8003cf4:	2000037c 	.word	0x2000037c
 8003cf8:	08003c11 	.word	0x08003c11

08003cfc <SPWRVolt_GetVoltage>:
 * @return Std_ReturnType
 * @retval E_OK:            Voltage Successfully Read
 * @retval E_NOT_OK:        Voltage not read 
 */
Std_ReturnType SPWRVolt_GetVoltage  (SPWRVolt_Choice_t Copy_uint32VoltageChoice, uint16* P_uint16VoltageValue)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
    if(P_uint16VoltageValue != NULL_PTR)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <SPWRVolt_GetVoltage+0x2a>
    {
        *P_uint16VoltageValue = glbl_uint16VoltageValues[Copy_uint32VoltageChoice];
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4a08      	ldr	r2, [pc, #32]	@ (8003d38 <SPWRVolt_GetVoltage+0x3c>)
 8003d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e001      	b.n	8003d2a <SPWRVolt_GetVoltage+0x2e>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000754 	.word	0x20000754

08003d3c <HMOTORS_Init>:
static volatile uint32 glbl_uint32FilterInitCalibration 				= 28;
static volatile uint32 glbl_uint32ZeroWLSteps							= 120;
static volatile float32 glbl_uint32StepsPerNm							= 5;

Std_ReturnType HMOTORS_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8003d42:	2100      	movs	r1, #0
 8003d44:	2003      	movs	r0, #3
 8003d46:	f002 f871 	bl	8005e2c <MRCC_EnablePeripheralClock>
	MAFIO_MAPR_R &= ~((0b111) << 24);
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e3c <HMOTORS_Init+0x100>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e3c <HMOTORS_Init+0x100>)
 8003d50:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003d54:	6013      	str	r3, [r2, #0]
	MAFIO_MAPR_R |= ((0b010) << 24);
 8003d56:	4b39      	ldr	r3, [pc, #228]	@ (8003e3c <HMOTORS_Init+0x100>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a38      	ldr	r2, [pc, #224]	@ (8003e3c <HMOTORS_Init+0x100>)
 8003d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d60:	6013      	str	r3, [r2, #0]
	
	uint8 Loc_uint8Index = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	71fb      	strb	r3, [r7, #7]
	
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	71fb      	strb	r3, [r7, #7]
 8003d6a:	e01a      	b.n	8003da2 <HMOTORS_Init+0x66>
	{
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	4a34      	ldr	r2, [pc, #208]	@ (8003e40 <HMOTORS_Init+0x104>)
 8003d70:	5cd3      	ldrb	r3, [r2, r3]
 8003d72:	b2d8      	uxtb	r0, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorHomingPinIDs[Loc_uint8Index], MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 8003d76:	4a33      	ldr	r2, [pc, #204]	@ (8003e44 <HMOTORS_Init+0x108>)
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f001 f8d4 	bl	8004f2c <MGPIO_SetPinMode>
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4a2e      	ldr	r2, [pc, #184]	@ (8003e40 <HMOTORS_Init+0x104>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorHomingPinIDs[Loc_uint8Index]);
 8003d8e:	492d      	ldr	r1, [pc, #180]	@ (8003e44 <HMOTORS_Init+0x108>)
 8003d90:	5ccb      	ldrb	r3, [r1, r3]
 8003d92:	b2db      	uxtb	r3, r3
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f001 faa2 	bl	80052e0 <MGPIO_ActivatePullUp>
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d9e1      	bls.n	8003d6c <HMOTORS_Init+0x30>
	}
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	71fb      	strb	r3, [r7, #7]
 8003dac:	e01a      	b.n	8003de4 <HMOTORS_Init+0xa8>
	{
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	4a25      	ldr	r2, [pc, #148]	@ (8003e48 <HMOTORS_Init+0x10c>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	b2d8      	uxtb	r0, r3
 8003db6:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8003db8:	4a24      	ldr	r2, [pc, #144]	@ (8003e4c <HMOTORS_Init+0x110>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f001 f8b3 	bl	8004f2c <MGPIO_SetPinMode>
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HMOTORS_Init+0x114>)
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	b2d8      	uxtb	r0, r3
 8003dce:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsDirPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8003dd0:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <HMOTORS_Init+0x118>)
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	b2db      	uxtb	r3, r3
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f001 f8a7 	bl	8004f2c <MGPIO_SetPinMode>
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	3301      	adds	r3, #1
 8003de2:	71fb      	strb	r3, [r7, #7]
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d9e1      	bls.n	8003dae <HMOTORS_Init+0x72>
	}

	MNVIC_EnableInterrupt(MNVIC_EXTI15_10);
 8003dea:	2028      	movs	r0, #40	@ 0x28
 8003dec:	f001 ff38 	bl	8005c60 <MNVIC_EnableInterrupt>
	MNVIC_EnableInterrupt(MNVIC_EXTI0);
 8003df0:	2006      	movs	r0, #6
 8003df2:	f001 ff35 	bl	8005c60 <MNVIC_EnableInterrupt>

	MEXTI_SetCallbackFunction(MEXTI_EXTI13, HMOTOR_FilterHomeIndicator);
 8003df6:	4918      	ldr	r1, [pc, #96]	@ (8003e58 <HMOTORS_Init+0x11c>)
 8003df8:	200d      	movs	r0, #13
 8003dfa:	f000 ff21 	bl	8004c40 <MEXTI_SetCallbackFunction>
	MEXTI_SetCallbackFunction(MEXTI_EXTI0, HMOTOR_WLHomeIndicator);
 8003dfe:	4917      	ldr	r1, [pc, #92]	@ (8003e5c <HMOTORS_Init+0x120>)
 8003e00:	2000      	movs	r0, #0
 8003e02:	f000 ff1d 	bl	8004c40 <MEXTI_SetCallbackFunction>
	
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI13, MGPIO_PORTC);
 8003e06:	2102      	movs	r1, #2
 8003e08:	200d      	movs	r0, #13
 8003e0a:	f000 fe6f 	bl	8004aec <MAFIO_SetEXTIPinConfigurations>
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI0, MGPIO_PORTA);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2000      	movs	r0, #0
 8003e12:	f000 fe6b 	bl	8004aec <MAFIO_SetEXTIPinConfigurations>

	MEXTI_EnableExternalInterrupt(MEXTI_EXTI13, MEXTI_INT_AT_FALLING_EDGE);
 8003e16:	2101      	movs	r1, #1
 8003e18:	200d      	movs	r0, #13
 8003e1a:	f000 fead 	bl	8004b78 <MEXTI_EnableExternalInterrupt>
	MEXTI_EnableExternalInterrupt(MEXTI_EXTI0, MEXTI_INT_AT_FALLING_EDGE);
 8003e1e:	2101      	movs	r1, #1
 8003e20:	2000      	movs	r0, #0
 8003e22:	f000 fea9 	bl	8004b78 <MEXTI_EnableExternalInterrupt>

	//GET FIRST VALUE OF FILTER CALIBRATION
	eeprom_read_byte(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &glbl_uint32FilterInitCalibration, 1);
 8003e26:	2201      	movs	r2, #1
 8003e28:	490d      	ldr	r1, [pc, #52]	@ (8003e60 <HMOTORS_Init+0x124>)
 8003e2a:	20d8      	movs	r0, #216	@ 0xd8
 8003e2c:	f7fe ff60 	bl	8002cf0 <eeprom_read_byte>

	return E_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40010004 	.word	0x40010004
 8003e40:	2000039c 	.word	0x2000039c
 8003e44:	200003a0 	.word	0x200003a0
 8003e48:	2000038c 	.word	0x2000038c
 8003e4c:	20000390 	.word	0x20000390
 8003e50:	20000394 	.word	0x20000394
 8003e54:	20000398 	.word	0x20000398
 8003e58:	080047d5 	.word	0x080047d5
 8003e5c:	080047ed 	.word	0x080047ed
 8003e60:	200003a4 	.word	0x200003a4

08003e64 <HMOTOR_Step>:

Std_ReturnType HMOTOR_Step(HMOTORS_Select_t Copy_uint32MotorSelect, uint32 Copy_uint32NoOfSetps, uint8 Copy_uint8Direction, uint8 Copy_uint8MotorSpeed)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6039      	str	r1, [r7, #0]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	71fb      	strb	r3, [r7, #7]
 8003e74:	460b      	mov	r3, r1
 8003e76:	71bb      	strb	r3, [r7, #6]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	717b      	strb	r3, [r7, #5]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]

	uint32 Loc_uint32Index = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
	switch(Copy_uint8Direction)
 8003e84:	79bb      	ldrb	r3, [r7, #6]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d002      	beq.n	8003e90 <HMOTOR_Step+0x2c>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d00f      	beq.n	8003eae <HMOTOR_Step+0x4a>
 8003e8e:	e01d      	b.n	8003ecc <HMOTOR_Step+0x68>
	{
		case HMOTORS_CLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	4a36      	ldr	r2, [pc, #216]	@ (8003f6c <HMOTOR_Step+0x108>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	b2d8      	uxtb	r0, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 8003e9a:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <HMOTOR_Step+0x10c>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
 8003e9e:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f001 f928 	bl	80050f8 <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]
			break;
 8003eac:	e011      	b.n	8003ed2 <HMOTOR_Step+0x6e>
		}
		case HMOTORS_CCLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <HMOTOR_Step+0x108>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	b2d8      	uxtb	r0, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8003eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f70 <HMOTOR_Step+0x10c>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f001 f919 	bl	80050f8 <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
		
			break;
 8003eca:	e002      	b.n	8003ed2 <HMOTOR_Step+0x6e>
		}
		default:
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
			break;
 8003ed0:	bf00      	nop
		}
	}
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	e040      	b.n	8003f5a <HMOTOR_Step+0xf6>
	{
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	4a26      	ldr	r2, [pc, #152]	@ (8003f74 <HMOTOR_Step+0x110>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	b2d8      	uxtb	r0, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 8003ee2:	4a25      	ldr	r2, [pc, #148]	@ (8003f78 <HMOTOR_Step+0x114>)
 8003ee4:	5cd3      	ldrb	r3, [r2, r3]
 8003ee6:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4619      	mov	r1, r3
 8003eec:	f001 f904 	bl	80050f8 <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8003ef0:	797b      	ldrb	r3, [r7, #5]
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f002 fbd4 	bl	80066a4 <MSTK_uint8Delay>
		
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HMOTOR_Step+0x110>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	b2d8      	uxtb	r0, r3
 8003f04:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <HMOTOR_Step+0x114>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f001 f8f2 	bl	80050f8 <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8003f14:	797b      	ldrb	r3, [r7, #5]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f002 fbc2 	bl	80066a4 <MSTK_uint8Delay>
		if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 8003f20:	79bb      	ldrb	r3, [r7, #6]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d108      	bne.n	8003f38 <HMOTOR_Step+0xd4>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] ++;
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4a14      	ldr	r2, [pc, #80]	@ (8003f7c <HMOTOR_Step+0x118>)
 8003f2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f2e:	3201      	adds	r2, #1
 8003f30:	4912      	ldr	r1, [pc, #72]	@ (8003f7c <HMOTOR_Step+0x118>)
 8003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f36:	e00d      	b.n	8003f54 <HMOTOR_Step+0xf0>
		}
		else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 8003f38:	79bb      	ldrb	r3, [r7, #6]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d108      	bne.n	8003f50 <HMOTOR_Step+0xec>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] --;
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	4a0e      	ldr	r2, [pc, #56]	@ (8003f7c <HMOTOR_Step+0x118>)
 8003f42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f46:	3a01      	subs	r2, #1
 8003f48:	490c      	ldr	r1, [pc, #48]	@ (8003f7c <HMOTOR_Step+0x118>)
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f4e:	e001      	b.n	8003f54 <HMOTOR_Step+0xf0>
		}
		else
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3ba      	bcc.n	8003ed8 <HMOTOR_Step+0x74>
		}
	}
	return Loc_uint8FuncStatus;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000394 	.word	0x20000394
 8003f70:	20000398 	.word	0x20000398
 8003f74:	2000038c 	.word	0x2000038c
 8003f78:	20000390 	.word	0x20000390
 8003f7c:	20000760 	.word	0x20000760

08003f80 <HMOTOR_MoveLampMotor>:

// lamp motor
Std_ReturnType HMOTOR_MoveLampMotor(HMOTOR_Lamp_Select_t Copy_uint32LampSelect)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
	switch(Copy_uint32LampSelect)
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HMOTOR_MoveLampMotor+0x16>
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d008      	beq.n	8003fa6 <HMOTOR_MoveLampMotor+0x26>
 8003f94:	e018      	b.n	8003fc8 <HMOTOR_MoveLampMotor+0x48>
	{
		case HMOTOR_LAMP_UV:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 0)
 8003f96:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HMOTOR_MoveLampMotor+0x5c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HMOTOR_MoveLampMotor+0x4c>
			{
				HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f000 fb2a 	bl	80045f8 <HMOTOR_GoHome>
			}
			else
			{
				/*Do nothing*/
			}
			break;
 8003fa4:	e012      	b.n	8003fcc <HMOTOR_MoveLampMotor+0x4c>
		}
		case HMOTOR_LAMP_VIS:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 100)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HMOTOR_MoveLampMotor+0x5c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b64      	cmp	r3, #100	@ 0x64
 8003fac:	d010      	beq.n	8003fd0 <HMOTOR_MoveLampMotor+0x50>
			{
				HMOTOR_Step(HMOTOR_LAMP_SELECT, 100, HMOTORS_CCLKWISE_DIRECTION, 10);
 8003fae:	230a      	movs	r3, #10
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	2164      	movs	r1, #100	@ 0x64
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7ff ff55 	bl	8003e64 <HMOTOR_Step>
				glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] = 100;
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <HMOTOR_MoveLampMotor+0x5c>)
 8003fbc:	2264      	movs	r2, #100	@ 0x64
 8003fbe:	601a      	str	r2, [r3, #0]
				glbl_uint8HomingIndicator[HMOTOR_LAMP_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 8003fc0:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <HMOTOR_MoveLampMotor+0x60>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/*Do nothing*/
			}
			break;
 8003fc6:	e003      	b.n	8003fd0 <HMOTOR_MoveLampMotor+0x50>
		}
		default:
		{
			return E_NOT_OK;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e003      	b.n	8003fd4 <HMOTOR_MoveLampMotor+0x54>
			break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HMOTOR_MoveLampMotor+0x52>
			break;
 8003fd0:	bf00      	nop
			break;
		}
	}
	return E_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20000760 	.word	0x20000760
 8003fe0:	20000770 	.word	0x20000770

08003fe4 <HMOTOR_MoveFilterMotor>:

//filter wheel
Std_ReturnType HMOTOR_MoveFilterMotor(HMOTOR_Filter_Select_t Copy_uint32FilterSelect)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	uint32 Loc_uint32StepsDifference = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
	switch(Copy_uint32FilterSelect)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b07      	cmp	r3, #7
 8003ff6:	f200 8171 	bhi.w	80042dc <HMOTOR_MoveFilterMotor+0x2f8>
 8003ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <HMOTOR_MoveFilterMotor+0x1c>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004021 	.word	0x08004021
 8004004:	0800406f 	.word	0x0800406f
 8004008:	080040c5 	.word	0x080040c5
 800400c:	0800411b 	.word	0x0800411b
 8004010:	08004171 	.word	0x08004171
 8004014:	080041c7 	.word	0x080041c7
 8004018:	0800421b 	.word	0x0800421b
 800401c:	08004281 	.word	0x08004281
	{
		case HMOTOR_FILTER_AIR:
		{
			if(glbl_uint32MotorSteps[1] > glbl_uint32FilterInitCalibration)
 8004020:	4b95      	ldr	r3, [pc, #596]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4b95      	ldr	r3, [pc, #596]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d90c      	bls.n	8004046 <HMOTOR_MoveFilterMotor+0x62>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - glbl_uint32FilterInitCalibration;
 800402c:	4b92      	ldr	r3, [pc, #584]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4b92      	ldr	r3, [pc, #584]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004038:	230a      	movs	r3, #10
 800403a:	2201      	movs	r2, #1
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	2001      	movs	r0, #1
 8004040:	f7ff ff10 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
			{
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004044:	e14c      	b.n	80042e0 <HMOTOR_MoveFilterMotor+0x2fc>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
 8004046:	4b8c      	ldr	r3, [pc, #560]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	4b8c      	ldr	r3, [pc, #560]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	f080 8146 	bcs.w	80042e0 <HMOTOR_MoveFilterMotor+0x2fc>
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
 8004054:	4b89      	ldr	r3, [pc, #548]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b87      	ldr	r3, [pc, #540]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004060:	230a      	movs	r3, #10
 8004062:	2202      	movs	r2, #2
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	2001      	movs	r0, #1
 8004068:	f7ff fefc 	bl	8003e64 <HMOTOR_Step>
			break;
 800406c:	e138      	b.n	80042e0 <HMOTOR_MoveFilterMotor+0x2fc>
		}
		case HMOTOR_FILTER_1:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 50))
 800406e:	4b82      	ldr	r3, [pc, #520]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4b82      	ldr	r3, [pc, #520]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3332      	adds	r3, #50	@ 0x32
 8004078:	429a      	cmp	r2, r3
 800407a:	d90d      	bls.n	8004098 <HMOTOR_MoveFilterMotor+0xb4>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 50);
 800407c:	4b7e      	ldr	r3, [pc, #504]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4b7e      	ldr	r3, [pc, #504]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	3b32      	subs	r3, #50	@ 0x32
 8004088:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800408a:	230a      	movs	r3, #10
 800408c:	2201      	movs	r2, #1
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	2001      	movs	r0, #1
 8004092:	f7ff fee7 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004096:	e125      	b.n	80042e4 <HMOTOR_MoveFilterMotor+0x300>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
 8004098:	4b77      	ldr	r3, [pc, #476]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4b77      	ldr	r3, [pc, #476]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3332      	adds	r3, #50	@ 0x32
 80040a2:	429a      	cmp	r2, r3
 80040a4:	f080 811e 	bcs.w	80042e4 <HMOTOR_MoveFilterMotor+0x300>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
 80040a8:	4b74      	ldr	r3, [pc, #464]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b72      	ldr	r3, [pc, #456]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	3332      	adds	r3, #50	@ 0x32
 80040b4:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80040b6:	230a      	movs	r3, #10
 80040b8:	2202      	movs	r2, #2
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	2001      	movs	r0, #1
 80040be:	f7ff fed1 	bl	8003e64 <HMOTOR_Step>
			break;
 80040c2:	e10f      	b.n	80042e4 <HMOTOR_MoveFilterMotor+0x300>
		}
		case HMOTOR_FILTER_2:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 100))
 80040c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4b6c      	ldr	r3, [pc, #432]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3364      	adds	r3, #100	@ 0x64
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90d      	bls.n	80040ee <HMOTOR_MoveFilterMotor+0x10a>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 100);
 80040d2:	4b69      	ldr	r3, [pc, #420]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4b69      	ldr	r3, [pc, #420]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	3b64      	subs	r3, #100	@ 0x64
 80040de:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80040e0:	230a      	movs	r3, #10
 80040e2:	2201      	movs	r2, #1
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7ff febc 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80040ec:	e0fc      	b.n	80042e8 <HMOTOR_MoveFilterMotor+0x304>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
 80040ee:	4b62      	ldr	r3, [pc, #392]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4b62      	ldr	r3, [pc, #392]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3364      	adds	r3, #100	@ 0x64
 80040f8:	429a      	cmp	r2, r3
 80040fa:	f080 80f5 	bcs.w	80042e8 <HMOTOR_MoveFilterMotor+0x304>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
 80040fe:	4b5f      	ldr	r3, [pc, #380]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b5d      	ldr	r3, [pc, #372]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	3364      	adds	r3, #100	@ 0x64
 800410a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 800410c:	230a      	movs	r3, #10
 800410e:	2202      	movs	r2, #2
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	2001      	movs	r0, #1
 8004114:	f7ff fea6 	bl	8003e64 <HMOTOR_Step>
			break;
 8004118:	e0e6      	b.n	80042e8 <HMOTOR_MoveFilterMotor+0x304>
		}
		case HMOTOR_FILTER_3:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 150))
 800411a:	4b57      	ldr	r3, [pc, #348]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4b57      	ldr	r3, [pc, #348]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3396      	adds	r3, #150	@ 0x96
 8004124:	429a      	cmp	r2, r3
 8004126:	d90d      	bls.n	8004144 <HMOTOR_MoveFilterMotor+0x160>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 150);
 8004128:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b53      	ldr	r3, [pc, #332]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	3b96      	subs	r3, #150	@ 0x96
 8004134:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004136:	230a      	movs	r3, #10
 8004138:	2201      	movs	r2, #1
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	2001      	movs	r0, #1
 800413e:	f7ff fe91 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004142:	e0d3      	b.n	80042ec <HMOTOR_MoveFilterMotor+0x308>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
 8004144:	4b4c      	ldr	r3, [pc, #304]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4b4c      	ldr	r3, [pc, #304]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3396      	adds	r3, #150	@ 0x96
 800414e:	429a      	cmp	r2, r3
 8004150:	f080 80cc 	bcs.w	80042ec <HMOTOR_MoveFilterMotor+0x308>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
 8004154:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	3396      	adds	r3, #150	@ 0x96
 8004160:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004162:	230a      	movs	r3, #10
 8004164:	2202      	movs	r2, #2
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	2001      	movs	r0, #1
 800416a:	f7ff fe7b 	bl	8003e64 <HMOTOR_Step>
			break;
 800416e:	e0bd      	b.n	80042ec <HMOTOR_MoveFilterMotor+0x308>
		}
		case HMOTOR_FILTER_4:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 200))
 8004170:	4b41      	ldr	r3, [pc, #260]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4b41      	ldr	r3, [pc, #260]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	33c8      	adds	r3, #200	@ 0xc8
 800417a:	429a      	cmp	r2, r3
 800417c:	d90d      	bls.n	800419a <HMOTOR_MoveFilterMotor+0x1b6>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 200);
 800417e:	4b3e      	ldr	r3, [pc, #248]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	3bc8      	subs	r3, #200	@ 0xc8
 800418a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800418c:	230a      	movs	r3, #10
 800418e:	2201      	movs	r2, #1
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	2001      	movs	r0, #1
 8004194:	f7ff fe66 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004198:	e0aa      	b.n	80042f0 <HMOTOR_MoveFilterMotor+0x30c>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
 800419a:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4b37      	ldr	r3, [pc, #220]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	33c8      	adds	r3, #200	@ 0xc8
 80041a4:	429a      	cmp	r2, r3
 80041a6:	f080 80a3 	bcs.w	80042f0 <HMOTOR_MoveFilterMotor+0x30c>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
 80041aa:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	33c8      	adds	r3, #200	@ 0xc8
 80041b6:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80041b8:	230a      	movs	r3, #10
 80041ba:	2202      	movs	r2, #2
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	2001      	movs	r0, #1
 80041c0:	f7ff fe50 	bl	8003e64 <HMOTOR_Step>
			break;
 80041c4:	e094      	b.n	80042f0 <HMOTOR_MoveFilterMotor+0x30c>
		}
		case HMOTOR_FILTER_5:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 250))
 80041c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4b2c      	ldr	r3, [pc, #176]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	33fa      	adds	r3, #250	@ 0xfa
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d90d      	bls.n	80041f0 <HMOTOR_MoveFilterMotor+0x20c>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 250);
 80041d4:	4b28      	ldr	r3, [pc, #160]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4b28      	ldr	r3, [pc, #160]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	3bfa      	subs	r3, #250	@ 0xfa
 80041e0:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80041e2:	230a      	movs	r3, #10
 80041e4:	2201      	movs	r2, #1
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	2001      	movs	r0, #1
 80041ea:	f7ff fe3b 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80041ee:	e081      	b.n	80042f4 <HMOTOR_MoveFilterMotor+0x310>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
 80041f0:	4b21      	ldr	r3, [pc, #132]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	4b21      	ldr	r3, [pc, #132]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	33fa      	adds	r3, #250	@ 0xfa
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d27a      	bcs.n	80042f4 <HMOTOR_MoveFilterMotor+0x310>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
 80041fe:	4b1f      	ldr	r3, [pc, #124]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b1d      	ldr	r3, [pc, #116]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	33fa      	adds	r3, #250	@ 0xfa
 800420a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 800420c:	230a      	movs	r3, #10
 800420e:	2202      	movs	r2, #2
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	2001      	movs	r0, #1
 8004214:	f7ff fe26 	bl	8003e64 <HMOTOR_Step>
			break;
 8004218:	e06c      	b.n	80042f4 <HMOTOR_MoveFilterMotor+0x310>
		}
		case HMOTOR_FILTER_6:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 300))
 800421a:	4b17      	ldr	r3, [pc, #92]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004226:	429a      	cmp	r2, r3
 8004228:	d90e      	bls.n	8004248 <HMOTOR_MoveFilterMotor+0x264>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 300);
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4b13      	ldr	r3, [pc, #76]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004238:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800423a:	230a      	movs	r3, #10
 800423c:	2201      	movs	r2, #1
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	2001      	movs	r0, #1
 8004242:	f7ff fe0f 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004246:	e057      	b.n	80042f8 <HMOTOR_MoveFilterMotor+0x314>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
 8004248:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004254:	429a      	cmp	r2, r3
 8004256:	d24f      	bcs.n	80042f8 <HMOTOR_MoveFilterMotor+0x314>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
 8004258:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HMOTOR_MoveFilterMotor+0x298>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HMOTOR_MoveFilterMotor+0x294>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004266:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004268:	230a      	movs	r3, #10
 800426a:	2202      	movs	r2, #2
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	2001      	movs	r0, #1
 8004270:	f7ff fdf8 	bl	8003e64 <HMOTOR_Step>
			break;
 8004274:	e040      	b.n	80042f8 <HMOTOR_MoveFilterMotor+0x314>
 8004276:	bf00      	nop
 8004278:	20000760 	.word	0x20000760
 800427c:	200003a4 	.word	0x200003a4
		}
		case HMOTOR_FILTER_7:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 350))
 8004280:	4b23      	ldr	r3, [pc, #140]	@ (8004310 <HMOTOR_MoveFilterMotor+0x32c>)
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HMOTOR_MoveFilterMotor+0x330>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 800428c:	429a      	cmp	r2, r3
 800428e:	d90e      	bls.n	80042ae <HMOTOR_MoveFilterMotor+0x2ca>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 350);
 8004290:	4b1f      	ldr	r3, [pc, #124]	@ (8004310 <HMOTOR_MoveFilterMotor+0x32c>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <HMOTOR_MoveFilterMotor+0x330>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f5a3 73af 	sub.w	r3, r3, #350	@ 0x15e
 800429e:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80042a0:	230a      	movs	r3, #10
 80042a2:	2201      	movs	r2, #1
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	2001      	movs	r0, #1
 80042a8:	f7ff fddc 	bl	8003e64 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80042ac:	e026      	b.n	80042fc <HMOTOR_MoveFilterMotor+0x318>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <HMOTOR_MoveFilterMotor+0x32c>)
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <HMOTOR_MoveFilterMotor+0x330>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d21e      	bcs.n	80042fc <HMOTOR_MoveFilterMotor+0x318>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HMOTOR_MoveFilterMotor+0x330>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <HMOTOR_MoveFilterMotor+0x32c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80042cc:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80042ce:	230a      	movs	r3, #10
 80042d0:	2202      	movs	r2, #2
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7ff fdc5 	bl	8003e64 <HMOTOR_Step>
			break;
 80042da:	e00f      	b.n	80042fc <HMOTOR_MoveFilterMotor+0x318>
		}
		default:
		{
			return E_NOT_OK;
 80042dc:	2301      	movs	r3, #1
 80042de:	e012      	b.n	8004306 <HMOTOR_MoveFilterMotor+0x322>
			break;
 80042e0:	bf00      	nop
 80042e2:	e00c      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042e4:	bf00      	nop
 80042e6:	e00a      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042e8:	bf00      	nop
 80042ea:	e008      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042ec:	bf00      	nop
 80042ee:	e006      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042f0:	bf00      	nop
 80042f2:	e004      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042f4:	bf00      	nop
 80042f6:	e002      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80042fc:	bf00      	nop
			break;
		}
	}
	glbl_uint8HomingIndicator[HMOTOR_FILTER_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HMOTOR_MoveFilterMotor+0x334>)
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
	return E_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000760 	.word	0x20000760
 8004314:	200003a4 	.word	0x200003a4
 8004318:	20000770 	.word	0x20000770

0800431c <HMOTOR_MoveWLSelectMotor>:
	glbl_uint32StepsPerNm = Copy_uint32StepsPerNm;
	return E_OK;
}

Std_ReturnType HMOTOR_MoveWLSelectMotor                 (float32 Copy_float32NextWL)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.01f) && (Copy_float32NextWL < 0.01f))
 8004324:	493f      	ldr	r1, [pc, #252]	@ (8004424 <HMOTOR_MoveWLSelectMotor+0x108>)
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc feda 	bl	80010e0 <__aeabi_fcmpgt>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02c      	beq.n	800438c <HMOTOR_MoveWLSelectMotor+0x70>
 8004332:	493d      	ldr	r1, [pc, #244]	@ (8004428 <HMOTOR_MoveWLSelectMotor+0x10c>)
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fc feb5 	bl	80010a4 <__aeabi_fcmplt>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d025      	beq.n	800438c <HMOTOR_MoveWLSelectMotor+0x70>
	{
		if(glbl_uint32MotorSteps[3] > glbl_uint32ZeroWLSteps)
 8004340:	4b3a      	ldr	r3, [pc, #232]	@ (800442c <HMOTOR_MoveWLSelectMotor+0x110>)
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HMOTOR_MoveWLSelectMotor+0x114>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d90a      	bls.n	8004362 <HMOTOR_MoveWLSelectMotor+0x46>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32MotorSteps[3] - glbl_uint32ZeroWLSteps), HMOTORS_CLKWISE_DIRECTION, 4);
 800434c:	4b37      	ldr	r3, [pc, #220]	@ (800442c <HMOTOR_MoveWLSelectMotor+0x110>)
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <HMOTOR_MoveWLSelectMotor+0x114>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1ad1      	subs	r1, r2, r3
 8004356:	2304      	movs	r3, #4
 8004358:	2201      	movs	r2, #1
 800435a:	2002      	movs	r0, #2
 800435c:	f7ff fd82 	bl	8003e64 <HMOTOR_Step>
 8004360:	e00f      	b.n	8004382 <HMOTOR_MoveWLSelectMotor+0x66>
		}
		else if(glbl_uint32MotorSteps[3] < glbl_uint32ZeroWLSteps)
 8004362:	4b32      	ldr	r3, [pc, #200]	@ (800442c <HMOTOR_MoveWLSelectMotor+0x110>)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	4b32      	ldr	r3, [pc, #200]	@ (8004430 <HMOTOR_MoveWLSelectMotor+0x114>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d209      	bcs.n	8004382 <HMOTOR_MoveWLSelectMotor+0x66>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32ZeroWLSteps - glbl_uint32MotorSteps[3]), HMOTORS_CCLKWISE_DIRECTION, 4);
 800436e:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <HMOTOR_MoveWLSelectMotor+0x114>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b2e      	ldr	r3, [pc, #184]	@ (800442c <HMOTOR_MoveWLSelectMotor+0x110>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	1ad1      	subs	r1, r2, r3
 8004378:	2304      	movs	r3, #4
 800437a:	2202      	movs	r2, #2
 800437c:	2002      	movs	r0, #2
 800437e:	f7ff fd71 	bl	8003e64 <HMOTOR_Step>
		}
		glbl_float32CurrentWL = 0.0f;
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <HMOTOR_MoveWLSelectMotor+0x118>)
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e045      	b.n	8004418 <HMOTOR_MoveWLSelectMotor+0xfc>
	}
	else
	{
		float32 Loc_float32WLDifference = Copy_float32NextWL - glbl_float32CurrentWL;
 800438c:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <HMOTOR_MoveWLSelectMotor+0x118>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fbde 	bl	8000b54 <__aeabi_fsub>
 8004398:	4603      	mov	r3, r0
 800439a:	60fb      	str	r3, [r7, #12]
		uint32 Loc_uint32MotorSteps = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]

		if(Loc_float32WLDifference > 0.098f)
 80043a0:	4925      	ldr	r1, [pc, #148]	@ (8004438 <HMOTOR_MoveWLSelectMotor+0x11c>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7fc fe9c 	bl	80010e0 <__aeabi_fcmpgt>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HMOTOR_MoveWLSelectMotor+0xbe>
		{
			Loc_uint32MotorSteps = (uint32)(Loc_float32WLDifference * (float32)glbl_uint32StepsPerNm);
 80043ae:	4b23      	ldr	r3, [pc, #140]	@ (800443c <HMOTOR_MoveWLSelectMotor+0x120>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fcd7 	bl	8000d68 <__aeabi_fmul>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc febf 	bl	8001140 <__aeabi_f2uiz>
 80043c2:	4603      	mov	r3, r0
 80043c4:	60bb      	str	r3, [r7, #8]
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32MotorSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 80043c6:	2304      	movs	r3, #4
 80043c8:	2201      	movs	r2, #1
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	2002      	movs	r0, #2
 80043ce:	f7ff fd49 	bl	8003e64 <HMOTOR_Step>
			glbl_float32CurrentWL = Copy_float32NextWL;
 80043d2:	4a18      	ldr	r2, [pc, #96]	@ (8004434 <HMOTOR_MoveWLSelectMotor+0x118>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e01e      	b.n	8004418 <HMOTOR_MoveWLSelectMotor+0xfc>
		}
		else if(Loc_float32WLDifference < -0.098f)
 80043da:	4919      	ldr	r1, [pc, #100]	@ (8004440 <HMOTOR_MoveWLSelectMotor+0x124>)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7fc fe61 	bl	80010a4 <__aeabi_fcmplt>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HMOTOR_MoveWLSelectMotor+0xfc>
		{
			Loc_uint32MotorSteps = (uint32)((-Loc_float32WLDifference) * (float32)glbl_uint32StepsPerNm);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80043ee:	4a13      	ldr	r2, [pc, #76]	@ (800443c <HMOTOR_MoveWLSelectMotor+0x120>)
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fcb7 	bl	8000d68 <__aeabi_fmul>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc fe9f 	bl	8001140 <__aeabi_f2uiz>
 8004402:	4603      	mov	r3, r0
 8004404:	60bb      	str	r3, [r7, #8]
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32MotorSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 8004406:	2304      	movs	r3, #4
 8004408:	2202      	movs	r2, #2
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	2002      	movs	r0, #2
 800440e:	f7ff fd29 	bl	8003e64 <HMOTOR_Step>
			glbl_float32CurrentWL = Copy_float32NextWL;
 8004412:	4a08      	ldr	r2, [pc, #32]	@ (8004434 <HMOTOR_MoveWLSelectMotor+0x118>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6013      	str	r3, [r2, #0]
		}
	}
	return E_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	bc23d70a 	.word	0xbc23d70a
 8004428:	3c23d70a 	.word	0x3c23d70a
 800442c:	20000760 	.word	0x20000760
 8004430:	200003a8 	.word	0x200003a8
 8004434:	2000076c 	.word	0x2000076c
 8004438:	3dc8b439 	.word	0x3dc8b439
 800443c:	200003ac 	.word	0x200003ac
 8004440:	bdc8b439 	.word	0xbdc8b439

08004444 <HMOTOR_MoveMotors>:
Std_ReturnType HMOTOR_MoveMotors(float32 Copy_float32NextWL)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.001f) && (Copy_float32NextWL < 1100.1f))
 800444c:	495a      	ldr	r1, [pc, #360]	@ (80045b8 <HMOTOR_MoveMotors+0x174>)
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fe46 	bl	80010e0 <__aeabi_fcmpgt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80a9 	beq.w	80045ae <HMOTOR_MoveMotors+0x16a>
 800445c:	4957      	ldr	r1, [pc, #348]	@ (80045bc <HMOTOR_MoveMotors+0x178>)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fe20 	bl	80010a4 <__aeabi_fcmplt>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80a1 	beq.w	80045ae <HMOTOR_MoveMotors+0x16a>
	{
		if(Copy_float32NextWL < 326.0f)
 800446c:	4954      	ldr	r1, [pc, #336]	@ (80045c0 <HMOTOR_MoveMotors+0x17c>)
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fe18 	bl	80010a4 <__aeabi_fcmplt>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HMOTOR_MoveMotors+0x3e>
		{
			HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 800447a:	2000      	movs	r0, #0
 800447c:	f7ff fd80 	bl	8003f80 <HMOTOR_MoveLampMotor>
 8004480:	e002      	b.n	8004488 <HMOTOR_MoveMotors+0x44>
		}
		else
		{
			HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8004482:	2001      	movs	r0, #1
 8004484:	f7ff fd7c 	bl	8003f80 <HMOTOR_MoveLampMotor>
		}

		if((Copy_float32NextWL > -0.001f) && (Copy_float32NextWL < 326.0f))
 8004488:	494b      	ldr	r1, [pc, #300]	@ (80045b8 <HMOTOR_MoveMotors+0x174>)
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fe28 	bl	80010e0 <__aeabi_fcmpgt>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HMOTOR_MoveMotors+0x68>
 8004496:	494a      	ldr	r1, [pc, #296]	@ (80045c0 <HMOTOR_MoveMotors+0x17c>)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fe03 	bl	80010a4 <__aeabi_fcmplt>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HMOTOR_MoveMotors+0x68>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_AIR);
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7ff fd9d 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 80044aa:	e07c      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 325.9f) && (Copy_float32NextWL < 383.0f))
 80044ac:	4945      	ldr	r1, [pc, #276]	@ (80045c4 <HMOTOR_MoveMotors+0x180>)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fe16 	bl	80010e0 <__aeabi_fcmpgt>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HMOTOR_MoveMotors+0x8c>
 80044ba:	4943      	ldr	r1, [pc, #268]	@ (80045c8 <HMOTOR_MoveMotors+0x184>)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc fdf1 	bl	80010a4 <__aeabi_fcmplt>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HMOTOR_MoveMotors+0x8c>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_1);
 80044c8:	2001      	movs	r0, #1
 80044ca:	f7ff fd8b 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 80044ce:	e06a      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 382.9f) && (Copy_float32NextWL < 420.0f))
 80044d0:	493e      	ldr	r1, [pc, #248]	@ (80045cc <HMOTOR_MoveMotors+0x188>)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fe04 	bl	80010e0 <__aeabi_fcmpgt>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HMOTOR_MoveMotors+0xb0>
 80044de:	493c      	ldr	r1, [pc, #240]	@ (80045d0 <HMOTOR_MoveMotors+0x18c>)
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fddf 	bl	80010a4 <__aeabi_fcmplt>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HMOTOR_MoveMotors+0xb0>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_2);
 80044ec:	2002      	movs	r0, #2
 80044ee:	f7ff fd79 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 80044f2:	e058      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 419.9f) && (Copy_float32NextWL < 558.0f))
 80044f4:	4937      	ldr	r1, [pc, #220]	@ (80045d4 <HMOTOR_MoveMotors+0x190>)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fc fdf2 	bl	80010e0 <__aeabi_fcmpgt>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HMOTOR_MoveMotors+0xd4>
 8004502:	4935      	ldr	r1, [pc, #212]	@ (80045d8 <HMOTOR_MoveMotors+0x194>)
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fc fdcd 	bl	80010a4 <__aeabi_fcmplt>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HMOTOR_MoveMotors+0xd4>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_3);
 8004510:	2003      	movs	r0, #3
 8004512:	f7ff fd67 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 8004516:	e046      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 557.9f) && (Copy_float32NextWL < 683.0f))
 8004518:	4930      	ldr	r1, [pc, #192]	@ (80045dc <HMOTOR_MoveMotors+0x198>)
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fde0 	bl	80010e0 <__aeabi_fcmpgt>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HMOTOR_MoveMotors+0xf8>
 8004526:	492e      	ldr	r1, [pc, #184]	@ (80045e0 <HMOTOR_MoveMotors+0x19c>)
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fc fdbb 	bl	80010a4 <__aeabi_fcmplt>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HMOTOR_MoveMotors+0xf8>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_4);
 8004534:	2004      	movs	r0, #4
 8004536:	f7ff fd55 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 800453a:	e034      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 682.9f) && (Copy_float32NextWL < 794.0f))
 800453c:	4929      	ldr	r1, [pc, #164]	@ (80045e4 <HMOTOR_MoveMotors+0x1a0>)
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fdce 	bl	80010e0 <__aeabi_fcmpgt>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HMOTOR_MoveMotors+0x11c>
 800454a:	4927      	ldr	r1, [pc, #156]	@ (80045e8 <HMOTOR_MoveMotors+0x1a4>)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc fda9 	bl	80010a4 <__aeabi_fcmplt>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HMOTOR_MoveMotors+0x11c>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_5);
 8004558:	2005      	movs	r0, #5
 800455a:	f7ff fd43 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 800455e:	e022      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 793.9f) && (Copy_float32NextWL < 980.0f))
 8004560:	4922      	ldr	r1, [pc, #136]	@ (80045ec <HMOTOR_MoveMotors+0x1a8>)
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc fdbc 	bl	80010e0 <__aeabi_fcmpgt>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HMOTOR_MoveMotors+0x140>
 800456e:	4920      	ldr	r1, [pc, #128]	@ (80045f0 <HMOTOR_MoveMotors+0x1ac>)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fc fd97 	bl	80010a4 <__aeabi_fcmplt>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HMOTOR_MoveMotors+0x140>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_6);
 800457c:	2006      	movs	r0, #6
 800457e:	f7ff fd31 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
 8004582:	e010      	b.n	80045a6 <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 979.9f) && (Copy_float32NextWL < 1100.1f))
 8004584:	491b      	ldr	r1, [pc, #108]	@ (80045f4 <HMOTOR_MoveMotors+0x1b0>)
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc fdaa 	bl	80010e0 <__aeabi_fcmpgt>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HMOTOR_MoveMotors+0x162>
 8004592:	490a      	ldr	r1, [pc, #40]	@ (80045bc <HMOTOR_MoveMotors+0x178>)
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fc fd85 	bl	80010a4 <__aeabi_fcmplt>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HMOTOR_MoveMotors+0x162>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_7);
 80045a0:	2007      	movs	r0, #7
 80045a2:	f7ff fd1f 	bl	8003fe4 <HMOTOR_MoveFilterMotor>
		else
		{
			/*Do nothing*/
		}

		HMOTOR_MoveWLSelectMotor(Copy_float32NextWL);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff feb8 	bl	800431c <HMOTOR_MoveWLSelectMotor>
	}
	else
	{
		return E_NOT_OK;
	}
}
 80045ac:	e000      	b.n	80045b0 <HMOTOR_MoveMotors+0x16c>
		return E_NOT_OK;
 80045ae:	2301      	movs	r3, #1
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ba83126f 	.word	0xba83126f
 80045bc:	44898333 	.word	0x44898333
 80045c0:	43a30000 	.word	0x43a30000
 80045c4:	43a2f333 	.word	0x43a2f333
 80045c8:	43bf8000 	.word	0x43bf8000
 80045cc:	43bf7333 	.word	0x43bf7333
 80045d0:	43d20000 	.word	0x43d20000
 80045d4:	43d1f333 	.word	0x43d1f333
 80045d8:	440b8000 	.word	0x440b8000
 80045dc:	440b799a 	.word	0x440b799a
 80045e0:	442ac000 	.word	0x442ac000
 80045e4:	442ab99a 	.word	0x442ab99a
 80045e8:	44468000 	.word	0x44468000
 80045ec:	4446799a 	.word	0x4446799a
 80045f0:	44750000 	.word	0x44750000
 80045f4:	4474f99a 	.word	0x4474f99a

080045f8 <HMOTOR_GoHome>:
Std_ReturnType HMOTOR_GoHome  (HMOTORS_Select_t Copy_uint32MotorSelect)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
	if(Copy_uint32MotorSelect > 0)
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 808b 	beq.w	8004720 <HMOTOR_GoHome+0x128>
	{
		uint8 Loc_uint8SensorReading = MGPIO_HIGH;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
		
		MSTK_uint8Delay(100);
 800460e:	2064      	movs	r0, #100	@ 0x64
 8004610:	f002 f848 	bl	80066a4 <MSTK_uint8Delay>
		switch(Copy_uint32MotorSelect)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d002      	beq.n	8004620 <HMOTOR_GoHome+0x28>
 800461a:	2b02      	cmp	r3, #2
 800461c:	d00f      	beq.n	800463e <HMOTOR_GoHome+0x46>
 800461e:	e016      	b.n	800464e <HMOTOR_GoHome+0x56>
		{
			case HMOTOR_FILTER_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTC, MGPIO_PIN13, &Loc_uint8SensorReading);
 8004620:	f107 030f 	add.w	r3, r7, #15
 8004624:	461a      	mov	r2, r3
 8004626:	210d      	movs	r1, #13
 8004628:	2002      	movs	r0, #2
 800462a:	f000 fdff 	bl	800522c <MGPIO_GetPinValue>
					Loc_uint8SensorReading = !Loc_uint8SensorReading;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	73fb      	strb	r3, [r7, #15]
					break;
 800463c:	e007      	b.n	800464e <HMOTOR_GoHome+0x56>
			}
			case HMOTOR_WL_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTA, MGPIO_PIN0, &Loc_uint8SensorReading);
 800463e:	f107 030f 	add.w	r3, r7, #15
 8004642:	461a      	mov	r2, r3
 8004644:	2100      	movs	r1, #0
 8004646:	2000      	movs	r0, #0
 8004648:	f000 fdf0 	bl	800522c <MGPIO_GetPinValue>
					break;
 800464c:	bf00      	nop
			}
		}
		if(Loc_uint8SensorReading == MGPIO_LOW)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HMOTOR_GoHome+0x68>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 200, HMOTORS_CLKWISE_DIRECTION, 4);
 8004654:	79f8      	ldrb	r0, [r7, #7]
 8004656:	2304      	movs	r3, #4
 8004658:	2201      	movs	r2, #1
 800465a:	21c8      	movs	r1, #200	@ 0xc8
 800465c:	f7ff fc02 	bl	8003e64 <HMOTOR_Step>
		}
		uint32 Loc_uint8Index = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	4a3b      	ldr	r2, [pc, #236]	@ (8004754 <HMOTOR_GoHome+0x15c>)
 8004668:	2100      	movs	r1, #0
 800466a:	54d1      	strb	r1, [r2, r3]
		uint32 Loc_uint32NoSteps = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
		switch(Copy_uint32MotorSelect)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d005      	beq.n	8004682 <HMOTOR_GoHome+0x8a>
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <HMOTOR_GoHome+0x92>
		{
			case HMOTOR_WL_SELECT:
			{
				Loc_uint32NoSteps = 12000;
 800467a:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800467e:	613b      	str	r3, [r7, #16]
				break;
 8004680:	e006      	b.n	8004690 <HMOTOR_GoHome+0x98>
			}
			case HMOTOR_FILTER_SELECT:
			{
				Loc_uint32NoSteps = 6000;
 8004682:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004686:	613b      	str	r3, [r7, #16]
				break;
 8004688:	e002      	b.n	8004690 <HMOTOR_GoHome+0x98>
			}
			default:
			{
				Loc_uint32NoSteps = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
				break;
 800468e:	bf00      	nop
			}
		}
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e00e      	b.n	80046b4 <HMOTOR_GoHome+0xbc>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4a2e      	ldr	r2, [pc, #184]	@ (8004754 <HMOTOR_GoHome+0x15c>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <HMOTOR_GoHome+0xb6>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 4);
 80046a2:	79f8      	ldrb	r0, [r7, #7]
 80046a4:	2304      	movs	r3, #4
 80046a6:	2202      	movs	r2, #2
 80046a8:	2101      	movs	r1, #1
 80046aa:	f7ff fbdb 	bl	8003e64 <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3ec      	bcc.n	8004696 <HMOTOR_GoHome+0x9e>
			}
		}

		HMOTOR_Step(Copy_uint32MotorSelect, 320, HMOTORS_CLKWISE_DIRECTION, 4);
 80046bc:	79f8      	ldrb	r0, [r7, #7]
 80046be:	2304      	movs	r3, #4
 80046c0:	2201      	movs	r2, #1
 80046c2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80046c6:	f7ff fbcd 	bl	8003e64 <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	4a21      	ldr	r2, [pc, #132]	@ (8004754 <HMOTOR_GoHome+0x15c>)
 80046ce:	2100      	movs	r1, #0
 80046d0:	54d1      	strb	r1, [r2, r3]

		Loc_uint8Index = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e00e      	b.n	80046fa <HMOTOR_GoHome+0x102>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <HMOTOR_GoHome+0x15c>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HMOTOR_GoHome+0xfc>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 10);
 80046e8:	79f8      	ldrb	r0, [r7, #7]
 80046ea:	230a      	movs	r3, #10
 80046ec:	2202      	movs	r2, #2
 80046ee:	2101      	movs	r1, #1
 80046f0:	f7ff fbb8 	bl	8003e64 <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	3301      	adds	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3ec      	bcc.n	80046dc <HMOTOR_GoHome+0xe4>
			}
		}
		if(Copy_uint32MotorSelect == HMOTOR_WL_SELECT)
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d105      	bne.n	8004714 <HMOTOR_GoHome+0x11c>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 20, HMOTORS_CCLKWISE_DIRECTION, 4);
 8004708:	79f8      	ldrb	r0, [r7, #7]
 800470a:	2304      	movs	r3, #4
 800470c:	2202      	movs	r2, #2
 800470e:	2114      	movs	r1, #20
 8004710:	f7ff fba8 	bl	8003e64 <HMOTOR_Step>
		}
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <HMOTOR_GoHome+0x160>)
 8004718:	2100      	movs	r1, #0
 800471a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800471e:	e014      	b.n	800474a <HMOTOR_GoHome+0x152>
		//glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;

	}
	else if(Copy_uint32MotorSelect == HMOTOR_LAMP_SELECT)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HMOTOR_GoHome+0x14e>
	{
		HMOTOR_Step(Copy_uint32MotorSelect, 100, HMOTORS_CLKWISE_DIRECTION, 10);
 8004726:	79f8      	ldrb	r0, [r7, #7]
 8004728:	230a      	movs	r3, #10
 800472a:	2201      	movs	r2, #1
 800472c:	2164      	movs	r1, #100	@ 0x64
 800472e:	f7ff fb99 	bl	8003e64 <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_AT_HOME;
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	4a07      	ldr	r2, [pc, #28]	@ (8004754 <HMOTOR_GoHome+0x15c>)
 8004736:	2101      	movs	r1, #1
 8004738:	54d1      	strb	r1, [r2, r3]
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	4a06      	ldr	r2, [pc, #24]	@ (8004758 <HMOTOR_GoHome+0x160>)
 800473e:	2100      	movs	r1, #0
 8004740:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004744:	e001      	b.n	800474a <HMOTOR_GoHome+0x152>
	}
	else
	{
		return E_NOT_OK;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HMOTOR_GoHome+0x154>
	}
	return E_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000770 	.word	0x20000770
 8004758:	20000760 	.word	0x20000760

0800475c <HMOTOR_GetCurrentMotorSteps>:
Std_ReturnType HMOTOR_GetCurrentMotorSteps    (HMOTORS_Select_t Copy_uint32MotorSelect, uint32* P_uint32MotorSteps)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
	if(P_uint32MotorSteps != NULL_PTR)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HMOTOR_GetCurrentMotorSteps+0x28>
	{
		*P_uint32MotorSteps = glbl_uint32MotorSteps[Copy_uint32MotorSelect];
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	4a07      	ldr	r2, [pc, #28]	@ (8004794 <HMOTOR_GetCurrentMotorSteps+0x38>)
 8004776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e001      	b.n	8004788 <HMOTOR_GetCurrentMotorSteps+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	20000760 	.word	0x20000760

08004798 <HMOTOR_GetCurrentWL>:
Std_ReturnType HMOTOR_GetCurrentWL            (uint32* P_uint32CurrentWL)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
	if(P_uint32CurrentWL != NULL_PTR)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HMOTOR_GetCurrentWL+0x28>
	{
		*P_uint32CurrentWL = glbl_float32CurrentWL;
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HMOTOR_GetCurrentWL+0x38>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc fcc6 	bl	8001140 <__aeabi_f2uiz>
 80047b4:	4602      	mov	r2, r0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	e001      	b.n	80047c4 <HMOTOR_GetCurrentWL+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000076c 	.word	0x2000076c

080047d4 <HMOTOR_FilterHomeIndicator>:

void HMOTOR_FilterHomeIndicator(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[1] = HMOTORS_MOTOR_AT_HOME;
 80047d8:	4b03      	ldr	r3, [pc, #12]	@ (80047e8 <HMOTOR_FilterHomeIndicator+0x14>)
 80047da:	2201      	movs	r2, #1
 80047dc:	705a      	strb	r2, [r3, #1]
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000770 	.word	0x20000770

080047ec <HMOTOR_WLHomeIndicator>:
void HMOTOR_WLHomeIndicator(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[2] = HMOTORS_MOTOR_AT_HOME;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HMOTOR_WLHomeIndicator+0x14>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	709a      	strb	r2, [r3, #2]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000770 	.word	0x20000770

08004804 <HMOTOR_StepNoDelay>:
{
	glbl_uint8HomingIndicator[3] = HMOTORS_MOTOR_AT_HOME;
}

Std_ReturnType HMOTOR_StepNoDelay(HMOTORS_Select_t Copy_uint32MotorSelect, uint8 Copy_uint8Direction)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	460a      	mov	r2, r1
 800480e:	71fb      	strb	r3, [r7, #7]
 8004810:	4613      	mov	r3, r2
 8004812:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uint8Direction)
 8004814:	79bb      	ldrb	r3, [r7, #6]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d002      	beq.n	8004820 <HMOTOR_StepNoDelay+0x1c>
 800481a:	2b02      	cmp	r3, #2
 800481c:	d00d      	beq.n	800483a <HMOTOR_StepNoDelay+0x36>
		
			break;
		}
		default:
		{
			break;
 800481e:	e019      	b.n	8004854 <HMOTOR_StepNoDelay+0x50>
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HMOTOR_StepNoDelay+0x90>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	b2d8      	uxtb	r0, r3
 8004828:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 800482a:	4a1b      	ldr	r2, [pc, #108]	@ (8004898 <HMOTOR_StepNoDelay+0x94>)
 800482c:	5cd3      	ldrb	r3, [r2, r3]
 800482e:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004830:	2201      	movs	r2, #1
 8004832:	4619      	mov	r1, r3
 8004834:	f000 fc60 	bl	80050f8 <MGPIO_SetPinValue>
			break;
 8004838:	e00c      	b.n	8004854 <HMOTOR_StepNoDelay+0x50>
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <HMOTOR_StepNoDelay+0x90>)
 800483e:	5cd3      	ldrb	r3, [r2, r3]
 8004840:	b2d8      	uxtb	r0, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004844:	4a14      	ldr	r2, [pc, #80]	@ (8004898 <HMOTOR_StepNoDelay+0x94>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 800484a:	2200      	movs	r2, #0
 800484c:	4619      	mov	r1, r3
 800484e:	f000 fc53 	bl	80050f8 <MGPIO_SetPinValue>
			break;
 8004852:	bf00      	nop
		}
	}

	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	4a11      	ldr	r2, [pc, #68]	@ (800489c <HMOTOR_StepNoDelay+0x98>)
 8004858:	5cd3      	ldrb	r3, [r2, r3]
 800485a:	b2d8      	uxtb	r0, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 800485e:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <HMOTOR_StepNoDelay+0x9c>)
 8004860:	5cd3      	ldrb	r3, [r2, r3]
 8004862:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004864:	2201      	movs	r2, #1
 8004866:	4619      	mov	r1, r3
 8004868:	f000 fc46 	bl	80050f8 <MGPIO_SetPinValue>
	
	MSTK_uint8DelayUs(10);
 800486c:	200a      	movs	r0, #10
 800486e:	f001 ff5d 	bl	800672c <MSTK_uint8DelayUs>
	
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	4a09      	ldr	r2, [pc, #36]	@ (800489c <HMOTOR_StepNoDelay+0x98>)
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	b2d8      	uxtb	r0, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 800487c:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <HMOTOR_StepNoDelay+0x9c>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f000 fc37 	bl	80050f8 <MGPIO_SetPinValue>
}
 800488a:	bf00      	nop
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000394 	.word	0x20000394
 8004898:	20000398 	.word	0x20000398
 800489c:	2000038c 	.word	0x2000038c
 80048a0:	20000390 	.word	0x20000390

080048a4 <MADC_Init>:

static volatile MADC_Typedef_t* (ADC[2]) = {ADC1, ADC2};
static volatile ptr_to_func_t (glbl_EOCCallbackFunc[2]) = {NULL_PTR};

Std_ReturnType MADC_Init                            (ADC_Select_t Copy_uint32ADCSelect)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
    
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	4a4e      	ldr	r2, [pc, #312]	@ (80049f0 <MADC_Init+0x14c>)
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	494c      	ldr	r1, [pc, #304]	@ (80049f0 <MADC_Init+0x14c>)
 80048c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048c4:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80048c8:	605a      	str	r2, [r3, #4]
    ADC[Copy_uint32ADCSelect] -> CR1 |= ((MADC_OPERATION_MODE) << (MADC_CR1_DUALMOD_START_BIT));
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	4a48      	ldr	r2, [pc, #288]	@ (80049f0 <MADC_Init+0x14c>)
 80048ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	4946      	ldr	r1, [pc, #280]	@ (80049f0 <MADC_Init+0x14c>)
 80048d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	605a      	str	r2, [r3, #4]

    #if MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
    #elif MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	4a43      	ldr	r2, [pc, #268]	@ (80049f0 <MADC_Init+0x14c>)
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	4941      	ldr	r1, [pc, #260]	@ (80049f0 <MADC_Init+0x14c>)
 80048ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048f0:	f022 0220 	bic.w	r2, r2, #32
 80048f4:	605a      	str	r2, [r3, #4]
    #else
        #error "ADC End of Conversion Interrupt Status is not specified"
    #endif /*MADC_EOC_INTERRUPT_STATUS*/

    CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CONT_BIT);
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	4a3d      	ldr	r2, [pc, #244]	@ (80049f0 <MADC_Init+0x14c>)
 80048fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	493b      	ldr	r1, [pc, #236]	@ (80049f0 <MADC_Init+0x14c>)
 8004904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004908:	f022 0202 	bic.w	r2, r2, #2
 800490c:	609a      	str	r2, [r3, #8]

    #if MADC_DATA_BITS_ADJUST_SELECT == MADC_RIGHT_ADJUST_DATA_BITS
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ALIGN_BIT);
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	4a37      	ldr	r2, [pc, #220]	@ (80049f0 <MADC_Init+0x14c>)
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	4935      	ldr	r1, [pc, #212]	@ (80049f0 <MADC_Init+0x14c>)
 800491c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004920:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004924:	609a      	str	r2, [r3, #8]
    #else
        #error "ADC Data Bits Adjustment is not specified"
    #endif /*MADC_DATA_BITS_ADJUST_SELECT*/

    #if MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	4a31      	ldr	r2, [pc, #196]	@ (80049f0 <MADC_Init+0x14c>)
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	492f      	ldr	r1, [pc, #188]	@ (80049f0 <MADC_Init+0x14c>)
 8004934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004938:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800493c:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	4a2b      	ldr	r2, [pc, #172]	@ (80049f0 <MADC_Init+0x14c>)
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	4929      	ldr	r1, [pc, #164]	@ (80049f0 <MADC_Init+0x14c>)
 800494c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004950:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 8004954:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 |= ((MADC_EXTERNAL_TRIGGER_SELECT) << (MADC_CR2_EXTSEL_START_BIT));
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	4a25      	ldr	r2, [pc, #148]	@ (80049f0 <MADC_Init+0x14c>)
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	4923      	ldr	r1, [pc, #140]	@ (80049f0 <MADC_Init+0x14c>)
 8004964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004968:	f442 2260 	orr.w	r2, r2, #917504	@ 0xe0000
 800496c:	609a      	str	r2, [r3, #8]
    #elif MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
    #else
    #endif /*MADC_EXTERNAL_TRIGGER_STATUS*/

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ADON_BIT);
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <MADC_Init+0x14c>)
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	491d      	ldr	r1, [pc, #116]	@ (80049f0 <MADC_Init+0x14c>)
 800497c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	609a      	str	r2, [r3, #8]

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT);
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <MADC_Init+0x14c>)
 800498a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	4917      	ldr	r1, [pc, #92]	@ (80049f0 <MADC_Init+0x14c>)
 8004994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004998:	f042 0208 	orr.w	r2, r2, #8
 800499c:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT));
 800499e:	bf00      	nop
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <MADC_Init+0x14c>)
 80049a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f6      	bne.n	80049a0 <MADC_Init+0xfc>

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT);
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <MADC_Init+0x14c>)
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	490c      	ldr	r1, [pc, #48]	@ (80049f0 <MADC_Init+0x14c>)
 80049c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049c4:	f042 0204 	orr.w	r2, r2, #4
 80049c8:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT));
 80049ca:	bf00      	nop
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	4a08      	ldr	r2, [pc, #32]	@ (80049f0 <MADC_Init+0x14c>)
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f6      	bne.n	80049cc <MADC_Init+0x128>
    
    Loc_uint8FuncStatus = E_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200003b0 	.word	0x200003b0

080049f4 <MADC_Conversion>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MADC_Conversion                      (ADC_Select_t Copy_uint32ADCSelect, ADC_Channel_t Copy_uint32ChannelSelect, uint16* P_uint16ConvertedData)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	603a      	str	r2, [r7, #0]
 80049fe:	71fb      	strb	r3, [r7, #7]
 8004a00:	460b      	mov	r3, r1
 8004a02:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
    if(P_uint16ConvertedData != NULL_PTR)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d03e      	beq.n	8004a8c <MADC_Conversion+0x98>
    {
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	4920      	ldr	r1, [pc, #128]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a20:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a24:	62da      	str	r2, [r3, #44]	@ 0x2c
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	491a      	ldr	r1, [pc, #104]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a38:	f022 021f 	bic.w	r2, r2, #31
 8004a3c:	635a      	str	r2, [r3, #52]	@ 0x34
        ADC[Copy_uint32ADCSelect] -> SQR3 = (Copy_uint32ChannelSelect) << 0;
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	79ba      	ldrb	r2, [r7, #6]
 8004a48:	635a      	str	r2, [r3, #52]	@ 0x34

        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_SWSTART_BIT);
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	4911      	ldr	r1, [pc, #68]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a5c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004a60:	609a      	str	r2, [r3, #8]

        while(!(GET_BIT((ADC[Copy_uint32ADCSelect] -> SR), MADC_SR_EOC_BIT)));
 8004a62:	bf00      	nop
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f6      	beq.n	8004a64 <MADC_Conversion+0x70>

        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <MADC_Conversion+0xa8>)
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e001      	b.n	8004a90 <MADC_Conversion+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	200003b0 	.word	0x200003b0

08004aa0 <ADC1_2_IRQHandler>:
    }
    return Loc_uint8FuncStatus;
}

void ADC1_2_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
    if(GET_BIT((ADC[0] -> SR), MADC_SR_EOC_BIT))
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <ADC1_2_IRQHandler+0x44>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <ADC1_2_IRQHandler+0x22>
    {
        if(glbl_EOCCallbackFunc[0] != NULL_PTR)
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <ADC1_2_IRQHandler+0x48>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d011      	beq.n	8004ade <ADC1_2_IRQHandler+0x3e>
        {
            (glbl_EOCCallbackFunc[0])();
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <ADC1_2_IRQHandler+0x48>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
}
 8004ac0:	e00d      	b.n	8004ade <ADC1_2_IRQHandler+0x3e>
    else if(GET_BIT((ADC[1] -> SR), MADC_SR_EOC_BIT))
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <ADC1_2_IRQHandler+0x44>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <ADC1_2_IRQHandler+0x3e>
		if(glbl_EOCCallbackFunc[1] != NULL_PTR)
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <ADC1_2_IRQHandler+0x48>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <ADC1_2_IRQHandler+0x3e>
            (glbl_EOCCallbackFunc[1])();
 8004ad8:	4b03      	ldr	r3, [pc, #12]	@ (8004ae8 <ADC1_2_IRQHandler+0x48>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4798      	blx	r3
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200003b0 	.word	0x200003b0
 8004ae8:	20000774 	.word	0x20000774

08004aec <MAFIO_SetEXTIPinConfigurations>:
#include "AFIO_Private.h"
#include "AFIO_Interface.h"
#include "AFIO_Config.h"

Std_ReturnType MAFIO_SetEXTIPinConfigurations(uint8 Copy_uint8EXTILine, uint8 Copy_uint8Port)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	460a      	mov	r2, r1
 8004af6:	71fb      	strb	r3, [r7, #7]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8Port <= MAFIO_PORTG_PIN) && (Copy_uint8EXTILine <= MAFIO_EXTI15))
 8004b00:	79bb      	ldrb	r3, [r7, #6]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d82d      	bhi.n	8004b62 <MAFIO_SetEXTIPinConfigurations+0x76>
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b0f      	cmp	r3, #15
 8004b0a:	d82a      	bhi.n	8004b62 <MAFIO_SetEXTIPinConfigurations+0x76>
    {
        uint8 Loc_uint8RegIndex = Copy_uint8EXTILine / 4;
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	73bb      	strb	r3, [r7, #14]
        uint8 Loc_uint8RegOffset = Copy_uint8EXTILine % 4;
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	737b      	strb	r3, [r7, #13]

        MAFIO ->EXTICR[Loc_uint8RegIndex] &= ~((0b1111) << Loc_uint8RegOffset * 4);
 8004b1a:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	3302      	adds	r3, #2
 8004b20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b24:	7b7b      	ldrb	r3, [r7, #13]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	210f      	movs	r1, #15
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	4910      	ldr	r1, [pc, #64]	@ (8004b74 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004b34:	7bbb      	ldrb	r3, [r7, #14]
 8004b36:	4002      	ands	r2, r0
 8004b38:	3302      	adds	r3, #2
 8004b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        MAFIO ->EXTICR[Loc_uint8RegIndex] |= ((Copy_uint8Port) << Loc_uint8RegOffset * 4);
 8004b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	3302      	adds	r3, #2
 8004b44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b48:	79b9      	ldrb	r1, [r7, #6]
 8004b4a:	7b7b      	ldrb	r3, [r7, #13]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	4907      	ldr	r1, [pc, #28]	@ (8004b74 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004b56:	7bbb      	ldrb	r3, [r7, #14]
 8004b58:	4302      	orrs	r2, r0
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
 8004b60:	e001      	b.n	8004b66 <MAFIO_SetEXTIPinConfigurations+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000

08004b78 <MEXTI_EnableExternalInterrupt>:
#include "EXTI_Config.h"

static volatile ptr_to_EXTICallback glbl_PEXTICallbackFunctions[20] = {NULL_PTR};

Std_ReturnType MEXTI_EnableExternalInterrupt(uint8 Copy_uint8EXTILine, uint8 Copy_uint8EXTIMode)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	460a      	mov	r2, r1
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8EXTILine <= MEXTI_EXTI19) && (Copy_uint8EXTIMode <= MEXTI_INT_AT_BOTH_EDGES))
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b13      	cmp	r3, #19
 8004b90:	d84c      	bhi.n	8004c2c <MEXTI_EnableExternalInterrupt+0xb4>
 8004b92:	79bb      	ldrb	r3, [r7, #6]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d849      	bhi.n	8004c2c <MEXTI_EnableExternalInterrupt+0xb4>
    {
        switch(Copy_uint8EXTIMode)
 8004b98:	79bb      	ldrb	r3, [r7, #6]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d020      	beq.n	8004be0 <MEXTI_EnableExternalInterrupt+0x68>
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	dc34      	bgt.n	8004c0c <MEXTI_EnableExternalInterrupt+0x94>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <MEXTI_EnableExternalInterrupt+0x34>
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d00d      	beq.n	8004bc6 <MEXTI_EnableExternalInterrupt+0x4e>
 8004baa:	e02f      	b.n	8004c0c <MEXTI_EnableExternalInterrupt+0x94>
        {
            case MEXTI_INT_AT_RISING_EDGE:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004bac:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	79fa      	ldrb	r2, [r7, #7]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4a20      	ldr	r2, [pc, #128]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6093      	str	r3, [r2, #8]
                Loc_uint8FuncStatus = E_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
                break;
 8004bc4:	e025      	b.n	8004c12 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_FALLING_EDGE:
            {
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	79fa      	ldrb	r2, [r7, #7]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
                break;
 8004bde:	e018      	b.n	8004c12 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_BOTH_EDGES:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004be0:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	79fa      	ldrb	r2, [r7, #7]
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bec:	4611      	mov	r1, r2
 8004bee:	4a13      	ldr	r2, [pc, #76]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004bf4:	4b11      	ldr	r3, [pc, #68]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	79fa      	ldrb	r2, [r7, #7]
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	4611      	mov	r1, r2
 8004c02:	4a0e      	ldr	r2, [pc, #56]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
                break;
 8004c10:	bf00      	nop
            }
        }

        SET_BIT((MEXTI -> IMR), Copy_uint8EXTILine);
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	79fa      	ldrb	r2, [r7, #7]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4a06      	ldr	r2, [pc, #24]	@ (8004c3c <MEXTI_EnableExternalInterrupt+0xc4>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e001      	b.n	8004c30 <MEXTI_EnableExternalInterrupt+0xb8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40010400 	.word	0x40010400

08004c40 <MEXTI_SetCallbackFunction>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MEXTI_SetCallbackFunction(uint8 Copy_uint8EXTILine, ptr_to_EXTICallback P_EXTICallBackFunc)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint8EXTILine <= MEXTI_EXTI19)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	2b13      	cmp	r3, #19
 8004c54:	d805      	bhi.n	8004c62 <MEXTI_SetCallbackFunction+0x22>
    {
        glbl_PEXTICallbackFunctions[Copy_uint8EXTILine] = P_EXTICallBackFunc;
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4906      	ldr	r1, [pc, #24]	@ (8004c74 <MEXTI_SetCallbackFunction+0x34>)
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c60:	e001      	b.n	8004c66 <MEXTI_SetCallbackFunction+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000077c 	.word	0x2000077c

08004c78 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[0] != NULL_PTR)
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <EXTI0_IRQHandler+0x24>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <EXTI0_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[0])();
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <EXTI0_IRQHandler+0x24>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 0);
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <EXTI0_IRQHandler+0x28>)
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <EXTI0_IRQHandler+0x28>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6153      	str	r3, [r2, #20]
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	2000077c 	.word	0x2000077c
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[1] != NULL_PTR)
 8004ca8:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <EXTI1_IRQHandler+0x24>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <EXTI1_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[1])();
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <EXTI1_IRQHandler+0x24>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 1);
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <EXTI1_IRQHandler+0x28>)
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <EXTI1_IRQHandler+0x28>)
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	6153      	str	r3, [r2, #20]
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000077c 	.word	0x2000077c
 8004ccc:	40010400 	.word	0x40010400

08004cd0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[2] != NULL_PTR)
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <EXTI2_IRQHandler+0x24>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <EXTI2_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[2])();
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <EXTI2_IRQHandler+0x24>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 2);
 8004ce2:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <EXTI2_IRQHandler+0x28>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4a04      	ldr	r2, [pc, #16]	@ (8004cf8 <EXTI2_IRQHandler+0x28>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	6153      	str	r3, [r2, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000077c 	.word	0x2000077c
 8004cf8:	40010400 	.word	0x40010400

08004cfc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[3] != NULL_PTR)
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <EXTI3_IRQHandler+0x24>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <EXTI3_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[3])();
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <EXTI3_IRQHandler+0x24>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 3);
 8004d0e:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <EXTI3_IRQHandler+0x28>)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <EXTI3_IRQHandler+0x28>)
 8004d14:	f043 0308 	orr.w	r3, r3, #8
 8004d18:	6153      	str	r3, [r2, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000077c 	.word	0x2000077c
 8004d24:	40010400 	.word	0x40010400

08004d28 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[4] != NULL_PTR)
 8004d2c:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <EXTI4_IRQHandler+0x24>)
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <EXTI4_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[4])();
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <EXTI4_IRQHandler+0x24>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 4);
 8004d3a:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <EXTI4_IRQHandler+0x28>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <EXTI4_IRQHandler+0x28>)
 8004d40:	f043 0310 	orr.w	r3, r3, #16
 8004d44:	6153      	str	r3, [r2, #20]
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000077c 	.word	0x2000077c
 8004d50:	40010400 	.word	0x40010400

08004d54 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 5))
 8004d58:	4b32      	ldr	r3, [pc, #200]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <EXTI9_5_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[5] != NULL_PTR)
 8004d64:	4b30      	ldr	r3, [pc, #192]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <EXTI9_5_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[5])();
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 5);
 8004d72:	4b2c      	ldr	r3, [pc, #176]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4a2b      	ldr	r2, [pc, #172]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004d78:	f043 0320 	orr.w	r3, r3, #32
 8004d7c:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
}
 8004d7e:	e04e      	b.n	8004e1e <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 6))
 8004d80:	4b28      	ldr	r3, [pc, #160]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <EXTI9_5_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[6] != NULL_PTR)
 8004d8c:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <EXTI9_5_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[6])();
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 6);
 8004d9a:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004da4:	6153      	str	r3, [r2, #20]
}
 8004da6:	e03a      	b.n	8004e1e <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 7))
 8004da8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <EXTI9_5_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[7] != NULL_PTR)
 8004db4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <EXTI9_5_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[7])();
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 7);
 8004dc2:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dcc:	6153      	str	r3, [r2, #20]
}
 8004dce:	e026      	b.n	8004e1e <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 8))
 8004dd0:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <EXTI9_5_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[8] != NULL_PTR)
 8004ddc:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <EXTI9_5_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[8])();
 8004de4:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 8);
 8004dea:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4a0d      	ldr	r2, [pc, #52]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6153      	str	r3, [r2, #20]
}
 8004df6:	e012      	b.n	8004e1e <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 9))
 8004df8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <EXTI9_5_IRQHandler+0xca>
        if(glbl_PEXTICallbackFunctions[9] != NULL_PTR)
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <EXTI9_5_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[9])();
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <EXTI9_5_IRQHandler+0xd4>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 9);
 8004e12:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4a03      	ldr	r2, [pc, #12]	@ (8004e24 <EXTI9_5_IRQHandler+0xd0>)
 8004e18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e1c:	6153      	str	r3, [r2, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40010400 	.word	0x40010400
 8004e28:	2000077c 	.word	0x2000077c

08004e2c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 10))
 8004e30:	4b3c      	ldr	r3, [pc, #240]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <EXTI15_10_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[10] != NULL_PTR)
 8004e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <EXTI15_10_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[10])();
 8004e44:	4b38      	ldr	r3, [pc, #224]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 10);
 8004e4a:	4b36      	ldr	r3, [pc, #216]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e54:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
 8004e56:	e062      	b.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 11))
 8004e58:	4b32      	ldr	r3, [pc, #200]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <EXTI15_10_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[11] != NULL_PTR)
 8004e64:	4b30      	ldr	r3, [pc, #192]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <EXTI15_10_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[11])();
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 11);
 8004e72:	4b2c      	ldr	r3, [pc, #176]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e7c:	6153      	str	r3, [r2, #20]
 8004e7e:	e04e      	b.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 12))
 8004e80:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <EXTI15_10_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[12] != NULL_PTR)
 8004e8c:	4b26      	ldr	r3, [pc, #152]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <EXTI15_10_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[12])();
 8004e94:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 12);
 8004e9a:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ea4:	6153      	str	r3, [r2, #20]
 8004ea6:	e03a      	b.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 13))
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <EXTI15_10_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[13] != NULL_PTR)
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <EXTI15_10_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[13])();
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 13);
 8004ec2:	4b18      	ldr	r3, [pc, #96]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004ec8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ecc:	6153      	str	r3, [r2, #20]
 8004ece:	e026      	b.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 14))
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00d      	beq.n	8004ef8 <EXTI15_10_IRQHandler+0xcc>
        if(glbl_PEXTICallbackFunctions[14] != NULL_PTR)
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <EXTI15_10_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[14])();
 8004ee4:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 14);
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef4:	6153      	str	r3, [r2, #20]
 8004ef6:	e012      	b.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 15))
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00c      	beq.n	8004f1e <EXTI15_10_IRQHandler+0xf2>
        if(glbl_PEXTICallbackFunctions[15] != NULL_PTR)
 8004f04:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <EXTI15_10_IRQHandler+0xe6>
            (glbl_PEXTICallbackFunctions[15])();
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <EXTI15_10_IRQHandler+0xfc>)
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 15);
 8004f12:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4a03      	ldr	r2, [pc, #12]	@ (8004f24 <EXTI15_10_IRQHandler+0xf8>)
 8004f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1c:	6153      	str	r3, [r2, #20]
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40010400 	.word	0x40010400
 8004f28:	2000077c 	.word	0x2000077c

08004f2c <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
 8004f36:	460b      	mov	r3, r1
 8004f38:	71bb      	strb	r3, [r7, #6]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f000 8081 	beq.w	800504c <MGPIO_SetPinMode+0x120>
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f300 80ba 	bgt.w	80050c4 <MGPIO_SetPinMode+0x198>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <MGPIO_SetPinMode+0x2e>
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d03d      	beq.n	8004fd4 <MGPIO_SetPinMode+0xa8>
 8004f58:	e0b4      	b.n	80050c4 <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8004f5a:	79bb      	ldrb	r3, [r7, #6]
 8004f5c:	2b07      	cmp	r3, #7
 8004f5e:	d819      	bhi.n	8004f94 <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8004f60:	4b5f      	ldr	r3, [pc, #380]	@ (80050e0 <MGPIO_SetPinMode+0x1b4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	79ba      	ldrb	r2, [r7, #6]
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	210f      	movs	r1, #15
 8004f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6e:	43d2      	mvns	r2, r2
 8004f70:	4611      	mov	r1, r2
 8004f72:	4a5b      	ldr	r2, [pc, #364]	@ (80050e0 <MGPIO_SetPinMode+0x1b4>)
 8004f74:	400b      	ands	r3, r1
 8004f76:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8004f78:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <MGPIO_SetPinMode+0x1b4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	7979      	ldrb	r1, [r7, #5]
 8004f7e:	79ba      	ldrb	r2, [r7, #6]
 8004f80:	0092      	lsls	r2, r2, #2
 8004f82:	fa01 f202 	lsl.w	r2, r1, r2
 8004f86:	4611      	mov	r1, r2
 8004f88:	4a55      	ldr	r2, [pc, #340]	@ (80050e0 <MGPIO_SetPinMode+0x1b4>)
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8004f92:	e09a      	b.n	80050ca <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8004f94:	79bb      	ldrb	r3, [r7, #6]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f200 8097 	bhi.w	80050ca <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8004f9c:	4b51      	ldr	r3, [pc, #324]	@ (80050e4 <MGPIO_SetPinMode+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	79ba      	ldrb	r2, [r7, #6]
 8004fa2:	3a08      	subs	r2, #8
 8004fa4:	0092      	lsls	r2, r2, #2
 8004fa6:	210f      	movs	r1, #15
 8004fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fac:	43d2      	mvns	r2, r2
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80050e4 <MGPIO_SetPinMode+0x1b8>)
 8004fb2:	400b      	ands	r3, r1
 8004fb4:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8004fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80050e4 <MGPIO_SetPinMode+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	7979      	ldrb	r1, [r7, #5]
 8004fbc:	79ba      	ldrb	r2, [r7, #6]
 8004fbe:	3a08      	subs	r2, #8
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4a46      	ldr	r2, [pc, #280]	@ (80050e4 <MGPIO_SetPinMode+0x1b8>)
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
            break;
 8004fd2:	e07a      	b.n	80050ca <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8004fd4:	79bb      	ldrb	r3, [r7, #6]
 8004fd6:	2b07      	cmp	r3, #7
 8004fd8:	d819      	bhi.n	800500e <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8004fda:	4b43      	ldr	r3, [pc, #268]	@ (80050e8 <MGPIO_SetPinMode+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	79ba      	ldrb	r2, [r7, #6]
 8004fe0:	0092      	lsls	r2, r2, #2
 8004fe2:	210f      	movs	r1, #15
 8004fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe8:	43d2      	mvns	r2, r2
 8004fea:	4611      	mov	r1, r2
 8004fec:	4a3e      	ldr	r2, [pc, #248]	@ (80050e8 <MGPIO_SetPinMode+0x1bc>)
 8004fee:	400b      	ands	r3, r1
 8004ff0:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8004ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80050e8 <MGPIO_SetPinMode+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	7979      	ldrb	r1, [r7, #5]
 8004ff8:	79ba      	ldrb	r2, [r7, #6]
 8004ffa:	0092      	lsls	r2, r2, #2
 8004ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8005000:	4611      	mov	r1, r2
 8005002:	4a39      	ldr	r2, [pc, #228]	@ (80050e8 <MGPIO_SetPinMode+0x1bc>)
 8005004:	430b      	orrs	r3, r1
 8005006:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 800500c:	e05f      	b.n	80050ce <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 800500e:	79bb      	ldrb	r3, [r7, #6]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d85c      	bhi.n	80050ce <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005014:	4b35      	ldr	r3, [pc, #212]	@ (80050ec <MGPIO_SetPinMode+0x1c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	79ba      	ldrb	r2, [r7, #6]
 800501a:	3a08      	subs	r2, #8
 800501c:	0092      	lsls	r2, r2, #2
 800501e:	210f      	movs	r1, #15
 8005020:	fa01 f202 	lsl.w	r2, r1, r2
 8005024:	43d2      	mvns	r2, r2
 8005026:	4611      	mov	r1, r2
 8005028:	4a30      	ldr	r2, [pc, #192]	@ (80050ec <MGPIO_SetPinMode+0x1c0>)
 800502a:	400b      	ands	r3, r1
 800502c:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800502e:	4b2f      	ldr	r3, [pc, #188]	@ (80050ec <MGPIO_SetPinMode+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	7979      	ldrb	r1, [r7, #5]
 8005034:	79ba      	ldrb	r2, [r7, #6]
 8005036:	3a08      	subs	r2, #8
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	fa01 f202 	lsl.w	r2, r1, r2
 800503e:	4611      	mov	r1, r2
 8005040:	4a2a      	ldr	r2, [pc, #168]	@ (80050ec <MGPIO_SetPinMode+0x1c0>)
 8005042:	430b      	orrs	r3, r1
 8005044:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
            break;
 800504a:	e040      	b.n	80050ce <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b07      	cmp	r3, #7
 8005050:	d819      	bhi.n	8005086 <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8005052:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <MGPIO_SetPinMode+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	79ba      	ldrb	r2, [r7, #6]
 8005058:	0092      	lsls	r2, r2, #2
 800505a:	210f      	movs	r1, #15
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	43d2      	mvns	r2, r2
 8005062:	4611      	mov	r1, r2
 8005064:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <MGPIO_SetPinMode+0x1c4>)
 8005066:	400b      	ands	r3, r1
 8005068:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 800506a:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <MGPIO_SetPinMode+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	7979      	ldrb	r1, [r7, #5]
 8005070:	79ba      	ldrb	r2, [r7, #6]
 8005072:	0092      	lsls	r2, r2, #2
 8005074:	fa01 f202 	lsl.w	r2, r1, r2
 8005078:	4611      	mov	r1, r2
 800507a:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <MGPIO_SetPinMode+0x1c4>)
 800507c:	430b      	orrs	r3, r1
 800507e:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8005084:	e025      	b.n	80050d2 <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8005086:	79bb      	ldrb	r3, [r7, #6]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d822      	bhi.n	80050d2 <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 800508c:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <MGPIO_SetPinMode+0x1c8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	79ba      	ldrb	r2, [r7, #6]
 8005092:	3a08      	subs	r2, #8
 8005094:	0092      	lsls	r2, r2, #2
 8005096:	210f      	movs	r1, #15
 8005098:	fa01 f202 	lsl.w	r2, r1, r2
 800509c:	43d2      	mvns	r2, r2
 800509e:	4611      	mov	r1, r2
 80050a0:	4a14      	ldr	r2, [pc, #80]	@ (80050f4 <MGPIO_SetPinMode+0x1c8>)
 80050a2:	400b      	ands	r3, r1
 80050a4:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <MGPIO_SetPinMode+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	7979      	ldrb	r1, [r7, #5]
 80050ac:	79ba      	ldrb	r2, [r7, #6]
 80050ae:	3a08      	subs	r2, #8
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	fa01 f202 	lsl.w	r2, r1, r2
 80050b6:	4611      	mov	r1, r2
 80050b8:	4a0e      	ldr	r2, [pc, #56]	@ (80050f4 <MGPIO_SetPinMode+0x1c8>)
 80050ba:	430b      	orrs	r3, r1
 80050bc:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
            break;
 80050c2:	e006      	b.n	80050d2 <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
            break;
 80050c8:	e004      	b.n	80050d4 <MGPIO_SetPinMode+0x1a8>
            break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <MGPIO_SetPinMode+0x1a8>
            break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <MGPIO_SetPinMode+0x1a8>
            break;
 80050d2:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	40010800 	.word	0x40010800
 80050e4:	40010804 	.word	0x40010804
 80050e8:	40010c00 	.word	0x40010c00
 80050ec:	40010c04 	.word	0x40010c04
 80050f0:	40011000 	.word	0x40011000
 80050f4:	40011004 	.word	0x40011004

080050f8 <MGPIO_SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_SetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinValue)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
 8005102:	460b      	mov	r3, r1
 8005104:	71bb      	strb	r3, [r7, #6]
 8005106:	4613      	mov	r3, r2
 8005108:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d87c      	bhi.n	800520e <MGPIO_SetPinValue+0x116>
 8005114:	79bb      	ldrb	r3, [r7, #6]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d879      	bhi.n	800520e <MGPIO_SetPinValue+0x116>
    {
        switch (Copy_uint8PortID)
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d04e      	beq.n	80051be <MGPIO_SetPinValue+0xc6>
 8005120:	2b02      	cmp	r3, #2
 8005122:	dc70      	bgt.n	8005206 <MGPIO_SetPinValue+0x10e>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <MGPIO_SetPinValue+0x36>
 8005128:	2b01      	cmp	r3, #1
 800512a:	d024      	beq.n	8005176 <MGPIO_SetPinValue+0x7e>
 800512c:	e06b      	b.n	8005206 <MGPIO_SetPinValue+0x10e>
        {
            case MGPIO_PORTA:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 800512e:	797b      	ldrb	r3, [r7, #5]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10c      	bne.n	800514e <MGPIO_SetPinValue+0x56>
                {
                    SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005134:	4b3a      	ldr	r3, [pc, #232]	@ (8005220 <MGPIO_SetPinValue+0x128>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	79ba      	ldrb	r2, [r7, #6]
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	4611      	mov	r1, r2
 8005142:	4a37      	ldr	r2, [pc, #220]	@ (8005220 <MGPIO_SetPinValue+0x128>)
 8005144:	430b      	orrs	r3, r1
 8005146:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 800514c:	e05e      	b.n	800520c <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 800514e:	797b      	ldrb	r3, [r7, #5]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <MGPIO_SetPinValue+0x78>
                    CLR_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005154:	4b32      	ldr	r3, [pc, #200]	@ (8005220 <MGPIO_SetPinValue+0x128>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	79ba      	ldrb	r2, [r7, #6]
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	43d2      	mvns	r2, r2
 8005162:	4611      	mov	r1, r2
 8005164:	4a2e      	ldr	r2, [pc, #184]	@ (8005220 <MGPIO_SetPinValue+0x128>)
 8005166:	400b      	ands	r3, r1
 8005168:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
                break;
 800516e:	e04d      	b.n	800520c <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
                break;
 8005174:	e04a      	b.n	800520c <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTB:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8005176:	797b      	ldrb	r3, [r7, #5]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10c      	bne.n	8005196 <MGPIO_SetPinValue+0x9e>
                {
                    SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 800517c:	4b29      	ldr	r3, [pc, #164]	@ (8005224 <MGPIO_SetPinValue+0x12c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	79ba      	ldrb	r2, [r7, #6]
 8005182:	2101      	movs	r1, #1
 8005184:	fa01 f202 	lsl.w	r2, r1, r2
 8005188:	4611      	mov	r1, r2
 800518a:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <MGPIO_SetPinValue+0x12c>)
 800518c:	430b      	orrs	r3, r1
 800518e:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005194:	e03a      	b.n	800520c <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8005196:	797b      	ldrb	r3, [r7, #5]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <MGPIO_SetPinValue+0xc0>
                    CLR_BIT(MGPIOB_ODR, Copy_uint8PinID);
 800519c:	4b21      	ldr	r3, [pc, #132]	@ (8005224 <MGPIO_SetPinValue+0x12c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	79ba      	ldrb	r2, [r7, #6]
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	43d2      	mvns	r2, r2
 80051aa:	4611      	mov	r1, r2
 80051ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005224 <MGPIO_SetPinValue+0x12c>)
 80051ae:	400b      	ands	r3, r1
 80051b0:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
                break;
 80051b6:	e029      	b.n	800520c <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
                break;
 80051bc:	e026      	b.n	800520c <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTC:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 80051be:	797b      	ldrb	r3, [r7, #5]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10c      	bne.n	80051de <MGPIO_SetPinValue+0xe6>
                {
                    SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 80051c4:	4b18      	ldr	r3, [pc, #96]	@ (8005228 <MGPIO_SetPinValue+0x130>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	79ba      	ldrb	r2, [r7, #6]
 80051ca:	2101      	movs	r1, #1
 80051cc:	fa01 f202 	lsl.w	r2, r1, r2
 80051d0:	4611      	mov	r1, r2
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <MGPIO_SetPinValue+0x130>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 80051dc:	e016      	b.n	800520c <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 80051de:	797b      	ldrb	r3, [r7, #5]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <MGPIO_SetPinValue+0x108>
                    CLR_BIT(MGPIOC_ODR, Copy_uint8PinID);
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <MGPIO_SetPinValue+0x130>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	79ba      	ldrb	r2, [r7, #6]
 80051ea:	2101      	movs	r1, #1
 80051ec:	fa01 f202 	lsl.w	r2, r1, r2
 80051f0:	43d2      	mvns	r2, r2
 80051f2:	4611      	mov	r1, r2
 80051f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005228 <MGPIO_SetPinValue+0x130>)
 80051f6:	400b      	ands	r3, r1
 80051f8:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
                break;
 80051fe:	e005      	b.n	800520c <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
                break;
 8005204:	e002      	b.n	800520c <MGPIO_SetPinValue+0x114>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
                break;
 800520a:	bf00      	nop
        switch (Copy_uint8PortID)
 800520c:	e001      	b.n	8005212 <MGPIO_SetPinValue+0x11a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	4001080c 	.word	0x4001080c
 8005224:	40010c0c 	.word	0x40010c0c
 8005228:	4001100c 	.word	0x4001100c

0800522c <MGPIO_GetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been read successfully
 * @retval E_NOT_OK: Pin Value has not been read
 */
Std_ReturnType MGPIO_GetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8* P_uint8PinValue)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	603a      	str	r2, [r7, #0]
 8005236:	71fb      	strb	r3, [r7, #7]
 8005238:	460b      	mov	r3, r1
 800523a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]

    if((P_uint8PinValue != NULL_PTR) && (Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d03d      	beq.n	80052c2 <MGPIO_GetPinValue+0x96>
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d83a      	bhi.n	80052c2 <MGPIO_GetPinValue+0x96>
 800524c:	79bb      	ldrb	r3, [r7, #6]
 800524e:	2b0f      	cmp	r3, #15
 8005250:	d837      	bhi.n	80052c2 <MGPIO_GetPinValue+0x96>
    {
        switch(Copy_uint8PortID)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d022      	beq.n	800529e <MGPIO_GetPinValue+0x72>
 8005258:	2b02      	cmp	r3, #2
 800525a:	dc2e      	bgt.n	80052ba <MGPIO_GetPinValue+0x8e>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <MGPIO_GetPinValue+0x3a>
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00e      	beq.n	8005282 <MGPIO_GetPinValue+0x56>
 8005264:	e029      	b.n	80052ba <MGPIO_GetPinValue+0x8e>
        {
            case MGPIO_PORTA:
            {
                *P_uint8PinValue = GET_BIT(MGPIOA_IDR, Copy_uint8PinID);
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <MGPIO_GetPinValue+0xa8>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	79bb      	ldrb	r3, [r7, #6]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
                break;
 8005280:	e01e      	b.n	80052c0 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTB:
            {
                *P_uint8PinValue = GET_BIT(MGPIOB_IDR, Copy_uint8PinID);
 8005282:	4b15      	ldr	r3, [pc, #84]	@ (80052d8 <MGPIO_GetPinValue+0xac>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	79bb      	ldrb	r3, [r7, #6]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
                break;
 800529c:	e010      	b.n	80052c0 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTC:
            {
                *P_uint8PinValue = GET_BIT(MGPIOC_IDR, Copy_uint8PinID);
 800529e:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <MGPIO_GetPinValue+0xb0>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	79bb      	ldrb	r3, [r7, #6]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]
                break;
 80052b8:	e002      	b.n	80052c0 <MGPIO_GetPinValue+0x94>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
                break;
 80052be:	bf00      	nop
        switch(Copy_uint8PortID)
 80052c0:	e001      	b.n	80052c6 <MGPIO_GetPinValue+0x9a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40010808 	.word	0x40010808
 80052d8:	40010c08 	.word	0x40010c08
 80052dc:	40011008 	.word	0x40011008

080052e0 <MGPIO_ActivatePullUp>:
 * @return Std_ReturnType
 * @retval E_OK: Pull-up has been activated successfully
 * @retval E_NOT_OK: Pull-up has not been activated 
 */
Std_ReturnType MGPIO_ActivatePullUp(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	460a      	mov	r2, r1
 80052ea:	71fb      	strb	r3, [r7, #7]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d837      	bhi.n	800536a <MGPIO_ActivatePullUp+0x8a>
 80052fa:	79bb      	ldrb	r3, [r7, #6]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	d834      	bhi.n	800536a <MGPIO_ActivatePullUp+0x8a>
    {
        switch(Copy_uint8PortID)
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d020      	beq.n	8005348 <MGPIO_ActivatePullUp+0x68>
 8005306:	2b02      	cmp	r3, #2
 8005308:	dc2b      	bgt.n	8005362 <MGPIO_ActivatePullUp+0x82>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <MGPIO_ActivatePullUp+0x34>
 800530e:	2b01      	cmp	r3, #1
 8005310:	d00d      	beq.n	800532e <MGPIO_ActivatePullUp+0x4e>
 8005312:	e026      	b.n	8005362 <MGPIO_ActivatePullUp+0x82>
        {
            case MGPIO_PORTA:
            {
                SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005314:	4b19      	ldr	r3, [pc, #100]	@ (800537c <MGPIO_ActivatePullUp+0x9c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	79ba      	ldrb	r2, [r7, #6]
 800531a:	2101      	movs	r1, #1
 800531c:	fa01 f202 	lsl.w	r2, r1, r2
 8005320:	4611      	mov	r1, r2
 8005322:	4a16      	ldr	r2, [pc, #88]	@ (800537c <MGPIO_ActivatePullUp+0x9c>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
                break;
 800532c:	e01c      	b.n	8005368 <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTB:
            {
                SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 800532e:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <MGPIO_ActivatePullUp+0xa0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	79ba      	ldrb	r2, [r7, #6]
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f202 	lsl.w	r2, r1, r2
 800533a:	4611      	mov	r1, r2
 800533c:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <MGPIO_ActivatePullUp+0xa0>)
 800533e:	430b      	orrs	r3, r1
 8005340:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
                break;
 8005346:	e00f      	b.n	8005368 <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTC:
            {
                SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8005348:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <MGPIO_ActivatePullUp+0xa4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	79ba      	ldrb	r2, [r7, #6]
 800534e:	2101      	movs	r1, #1
 8005350:	fa01 f202 	lsl.w	r2, r1, r2
 8005354:	4611      	mov	r1, r2
 8005356:	4a0b      	ldr	r2, [pc, #44]	@ (8005384 <MGPIO_ActivatePullUp+0xa4>)
 8005358:	430b      	orrs	r3, r1
 800535a:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
                break;
 8005360:	e002      	b.n	8005368 <MGPIO_ActivatePullUp+0x88>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
                break;
 8005366:	bf00      	nop
        switch(Copy_uint8PortID)
 8005368:	e001      	b.n	800536e <MGPIO_ActivatePullUp+0x8e>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	4001080c 	.word	0x4001080c
 8005380:	40010c0c 	.word	0x40010c0c
 8005384:	4001100c 	.word	0x4001100c

08005388 <MGPTMR_GetPreloadValue>:
 * @return Std_ReturnType
 * @retval E_OK:                                        Preload value successfully calculated
 * @retval E_NOT_OK:                                    Preload value not calculated 
 */
Std_ReturnType MGPTMR_GetPreloadValue                   (uint32 Copy_uint32PeriodInMs, uint16* P_uint16PreloadValue)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
    if(P_uint16PreloadValue != NULL_PTR)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <MGPTMR_GetPreloadValue+0x3c>
    {
        uint32 Loc_uint32TempPreload = (Copy_uint32PeriodInMs * (MGPTMR_CLK_FREQ / (MGPTMR_CLK_PRESCALER * 1000))) - 1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60bb      	str	r3, [r7, #8]
        if(Loc_uint32TempPreload <= 0xFFFF)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053aa:	d204      	bcs.n	80053b6 <MGPTMR_GetPreloadValue+0x2e>
        {
            *P_uint16PreloadValue = Loc_uint32TempPreload;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e003      	b.n	80053be <MGPTMR_GetPreloadValue+0x36>
        }
        else
        {
            *P_uint16PreloadValue = 0xFFFF;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053bc:	801a      	strh	r2, [r3, #0]
        }
        Loc_uint8FuncStatus = E_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e001      	b.n	80053c8 <MGPTMR_GetPreloadValue+0x40>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <MGPTMR_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Initialized.
 * @retval E_NOT_OK:                Timer not initialized.
 */
Std_ReturnType MGPTMR_Init                              (GPTMR_Select_t Copy_uint32TimerSelect)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
    #if MGPTMR_UEV_STATUS == MGPTMR_UEV_ENABLED

        //Enable update event by clearing UDIS "Update Disable" bit
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_UDIS_BIT);
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	4a3b      	ldr	r2, [pc, #236]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80053e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	4939      	ldr	r1, [pc, #228]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80053ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053f0:	f022 0202 	bic.w	r2, r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_UEV_SOURCE == MGPTMR_UEV_SOURCE_ALL

            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_URS_BIT);
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4a35      	ldr	r2, [pc, #212]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80053fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	4933      	ldr	r1, [pc, #204]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005404:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005408:	f022 0204 	bic.w	r2, r2, #4
 800540c:	601a      	str	r2, [r3, #0]
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
    
    #elif MGPTMR_ONE_PULSE_MODE_STATUS == MGPTMR_ONE_PULSE_MODE_DISABLED
    
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	4a2f      	ldr	r2, [pc, #188]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	492d      	ldr	r1, [pc, #180]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800541c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005420:	f022 0208 	bic.w	r2, r2, #8
 8005424:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_ONE_PULSE_MODE_STATUS*/

    #if MGPTMR_COUNTER_ALLIGNMENT == MGPTMR_EDGE_ALLIGNED_MODE
        
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT);
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4a29      	ldr	r2, [pc, #164]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	4927      	ldr	r1, [pc, #156]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005438:	f022 0220 	bic.w	r2, r2, #32
 800543c:	601a      	str	r2, [r3, #0]
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT + 1);
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	4a23      	ldr	r2, [pc, #140]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	4921      	ldr	r1, [pc, #132]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800544c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005454:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_COUNTER_DIRECTION == MGPTMR_COUNTER_UPCOUNTER
    
            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_DIR_BIT);
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	491b      	ldr	r1, [pc, #108]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005464:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005468:	f022 0210 	bic.w	r2, r2, #16
 800546c:	601a      	str	r2, [r3, #0]
        #error "GPTMR Counter Allignment is not specified"
    #endif /*MGPTMR_COUNTER_ALLIGNMENT*/
    
    #if MGPTMR_AUTO_RELOAD_STATUS == MGPTMR_AUTO_RELOAD_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_ARPE_BIT);
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	4915      	ldr	r1, [pc, #84]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800547c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005480:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005484:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_AUTO_RELOAD_STATUS*/

    #if MGPTMR_UPDATE_INTERRUPT_STATUS == MGPTMR_UPDATE_INTERRUPT_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> DIER), MGPTMR_DIER_UIE_BIT);
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <MGPTMR_Init+0xfc>)
 800548a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	490f      	ldr	r1, [pc, #60]	@ (80054d0 <MGPTMR_Init+0xfc>)
 8005494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	60da      	str	r2, [r3, #12]
    
    #endif /*MGPTMR_UPDATE_INTERRUPT_STATUS*/

    #if (MGPTMR_CLK_PRESCALER >= 1) || (MGPTMR_CLK_PRESCALER <= 65536)
    
        GPTMR[Copy_uint32TimerSelect] -> PSC = (uint16)((uint16)(MGPTMR_CLK_PRESCALER) - 1);
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4a0b      	ldr	r2, [pc, #44]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80054a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80054aa:	629a      	str	r2, [r3, #40]	@ 0x28
    
        #error "GPTMR Prescalar must have a value between 1 and 65536"
    
    #endif /*MGPTMR_CLK_PRESCALER*/
		
		CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> SR), MGPTMR_SR_UIF_BIT);
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	4a08      	ldr	r2, [pc, #32]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80054b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	4905      	ldr	r1, [pc, #20]	@ (80054d0 <MGPTMR_Init+0xfc>)
 80054ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	611a      	str	r2, [r3, #16]

    return E_OK; 
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	200003b8 	.word	0x200003b8

080054d4 <MGPTMR_StartTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Started to Count.
 * @retval E_NOT_OK:                Timer not started.
 */
Std_ReturnType MGPTMR_StartTimer                        (GPTMR_Select_t Copy_uint32TimerSelect)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
    SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005510 <MGPTMR_StartTimer+0x3c>)
 80054e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4909      	ldr	r1, [pc, #36]	@ (8005510 <MGPTMR_StartTimer+0x3c>)
 80054ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    GPTMR[Copy_uint32TimerSelect] -> CNT = 0;
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	4a05      	ldr	r2, [pc, #20]	@ (8005510 <MGPTMR_StartTimer+0x3c>)
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	2200      	movs	r2, #0
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24
    return E_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	200003b8 	.word	0x200003b8

08005514 <MGPTMR_StopTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Stopped Counting.
 * @retval E_NOT_OK:                Timer not stopped.
 */
Std_ReturnType MGPTMR_StopTimer                         (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
    CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	4a08      	ldr	r2, [pc, #32]	@ (8005544 <MGPTMR_StopTimer+0x30>)
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	4906      	ldr	r1, [pc, #24]	@ (8005544 <MGPTMR_StopTimer+0x30>)
 800552c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    return E_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	200003b8 	.word	0x200003b8

08005548 <MGPTMR_SetTimerPeriod>:
 * @return Std_ReturnType
 * @retval E_OK:                    Period Successfully Set
 * @retval E_NOT_OK:                Period not set 
 */
Std_ReturnType MGPTMR_SetTimerPeriod                    (GPTMR_Select_t Copy_uint32TimerSelect, uint32 Copy_uint32PeriodInMs)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]

    uint16 Loc_uint16PreloadValue = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	81bb      	strh	r3, [r7, #12]
    Loc_uint8FuncStatus = MGPTMR_GetPreloadValue(Copy_uint32PeriodInMs, &Loc_uint16PreloadValue);
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	4619      	mov	r1, r3
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	f7ff ff10 	bl	8005388 <MGPTMR_GetPreloadValue>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]

    if(Loc_uint8FuncStatus == E_OK)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <MGPTMR_SetTimerPeriod+0x3e>
    {
        GPTMR[Copy_uint32TimerSelect] -> ARR = Loc_uint16PreloadValue;
 8005572:	89b9      	ldrh	r1, [r7, #12]
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <MGPTMR_SetTimerPeriod+0x4c>)
 8005578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557c:	460a      	mov	r2, r1
 800557e:	62da      	str	r2, [r3, #44]	@ 0x2c
        Loc_uint8FuncStatus = E_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e001      	b.n	800558a <MGPTMR_SetTimerPeriod+0x42>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200003b8 	.word	0x200003b8

08005598 <MGPTMR_SetTimerUpdateCallbackFunc>:
 * @return Std_ReturnType
 * @retval E_OK:                    Function Successfully Set
 * @retval E_NOT_OK:                Function not set  
 */
Std_ReturnType MGPTMR_SetTimerUpdateCallbackFunc        (GPTMR_Select_t Copy_uint32TimerSelect, ptr_to_func_t P_UpdateCallbackFunc)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
    if(P_UpdateCallbackFunc != NULL_PTR)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <MGPTMR_SetTimerUpdateCallbackFunc+0x22>
    {
        glbl_PCallbackFunc[Copy_uint32TimerSelect] = P_UpdateCallbackFunc;
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	4906      	ldr	r1, [pc, #24]	@ (80055cc <MGPTMR_SetTimerUpdateCallbackFunc+0x34>)
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80055b8:	e001      	b.n	80055be <MGPTMR_SetTimerUpdateCallbackFunc+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200007cc 	.word	0x200007cc

080055d0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[0] != NULL_PTR)
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <TIM2_IRQHandler+0x28>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <TIM2_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[0])();
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <TIM2_IRQHandler+0x28>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[0] -> SR), MGPTMR_SR_UIF_BIT);
 80055e2:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <TIM2_IRQHandler+0x2c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <TIM2_IRQHandler+0x2c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	611a      	str	r2, [r3, #16]
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200007cc 	.word	0x200007cc
 80055fc:	200003b8 	.word	0x200003b8

08005600 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[1] != NULL_PTR)
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <TIM3_IRQHandler+0x28>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <TIM3_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[1])();
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <TIM3_IRQHandler+0x28>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[1] -> SR), MGPTMR_SR_UIF_BIT);
 8005612:	4b06      	ldr	r3, [pc, #24]	@ (800562c <TIM3_IRQHandler+0x2c>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <TIM3_IRQHandler+0x2c>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	611a      	str	r2, [r3, #16]
}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	200007cc 	.word	0x200007cc
 800562c:	200003b8 	.word	0x200003b8

08005630 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[2] != NULL_PTR)
 8005634:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <TIM4_IRQHandler+0x28>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <TIM4_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[2])();
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <TIM4_IRQHandler+0x28>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[2] -> SR), MGPTMR_SR_UIF_BIT);
 8005642:	4b06      	ldr	r3, [pc, #24]	@ (800565c <TIM4_IRQHandler+0x2c>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <TIM4_IRQHandler+0x2c>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	200007cc 	.word	0x200007cc
 800565c:	200003b8 	.word	0x200003b8

08005660 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	82fb      	strh	r3, [r7, #22]
 800566e:	2300      	movs	r3, #0
 8005670:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 8005672:	4b57      	ldr	r3, [pc, #348]	@ (80057d0 <MCAL_I2C_Init+0x170>)
 8005674:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 8005676:	2300      	movs	r3, #0
 8005678:	81fb      	strh	r3, [r7, #14]

	

	//Enable RCC Clock
	if (I2Cx == I2C1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a55      	ldr	r2, [pc, #340]	@ (80057d4 <MCAL_I2C_Init+0x174>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d10e      	bne.n	80056a0 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8005682:	4a55      	ldr	r2, [pc, #340]	@ (80057d8 <MCAL_I2C_Init+0x178>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4614      	mov	r4, r2
 8005688:	461d      	mov	r5, r3
 800568a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800568e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005692:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 8005696:	2115      	movs	r1, #21
 8005698:	2002      	movs	r0, #2
 800569a:	f000 fbc7 	bl	8005e2c <MRCC_EnablePeripheralClock>
 800569e:	e00e      	b.n	80056be <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 80056a0:	4b4d      	ldr	r3, [pc, #308]	@ (80057d8 <MCAL_I2C_Init+0x178>)
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	f103 0418 	add.w	r4, r3, #24
 80056a8:	4615      	mov	r5, r2
 80056aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80056b2:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 80056b6:	2116      	movs	r1, #22
 80056b8:	2002      	movs	r0, #2
 80056ba:	f000 fbb7 	bl	8005e2c <MRCC_EnablePeripheralClock>
	}
	MCAL_I2C_RESET();
 80056be:	f000 f893 	bl	80057e8 <MCAL_I2C_RESET>
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	88db      	ldrh	r3, [r3, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d178      	bne.n	80057bc <MCAL_I2C_Init+0x15c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80056d0:	8afb      	ldrh	r3, [r7, #22]
 80056d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056d6:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 80056d8:	4b3d      	ldr	r3, [pc, #244]	@ (80057d0 <MCAL_I2C_Init+0x170>)
 80056da:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4a3f      	ldr	r2, [pc, #252]	@ (80057dc <MCAL_I2C_Init+0x17c>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	0c9b      	lsrs	r3, r3, #18
 80056e6:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 80056e8:	8afa      	ldrh	r2, [r7, #22]
 80056ea:	8abb      	ldrh	r3, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80056f0:	8afa      	ldrh	r2, [r7, #22]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a35      	ldr	r2, [pc, #212]	@ (80057e0 <MCAL_I2C_Init+0x180>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <MCAL_I2C_Init+0xba>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a33      	ldr	r2, [pc, #204]	@ (80057e4 <MCAL_I2C_Init+0x184>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d112      	bne.n	8005740 <MCAL_I2C_Init+0xe0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8005728:	8afa      	ldrh	r2, [r7, #22]
 800572a:	89fb      	ldrh	r3, [r7, #14]
 800572c:	4313      	orrs	r3, r2
 800572e:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8005730:	8afa      	ldrh	r2, [r7, #22]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8005736:	8abb      	ldrh	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	461a      	mov	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	8a1a      	ldrh	r2, [r3, #16]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	8a5b      	ldrh	r3, [r3, #18]
 800574e:	4313      	orrs	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	88db      	ldrh	r3, [r3, #6]
 8005756:	4313      	orrs	r3, r2
 8005758:	b29a      	uxth	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	889b      	ldrh	r3, [r3, #4]
 800575e:	4313      	orrs	r3, r2
 8005760:	b29a      	uxth	r2, r3
 8005762:	8afb      	ldrh	r3, [r7, #22]
 8005764:	4313      	orrs	r3, r2
 8005766:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8005768:	8afa      	ldrh	r2, [r7, #22]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 800576e:	2300      	movs	r3, #0
 8005770:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	891b      	ldrh	r3, [r3, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <MCAL_I2C_Init+0x136>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 800577a:	2301      	movs	r3, #1
 800577c:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	899b      	ldrh	r3, [r3, #12]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	b21a      	sxth	r2, r3
 8005786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800578a:	4313      	orrs	r3, r2
 800578c:	b21b      	sxth	r3, r3
 800578e:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8005790:	8afa      	ldrh	r2, [r7, #22]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 8005796:	2300      	movs	r3, #0
 8005798:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	895b      	ldrh	r3, [r3, #10]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	b21a      	sxth	r2, r3
 80057a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b21b      	sxth	r3, r3
 80057aa:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	89da      	ldrh	r2, [r3, #14]
 80057b0:	8afb      	ldrh	r3, [r7, #22]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 80057b6:	8afa      	ldrh	r2, [r7, #22]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f043 0201 	orr.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]
}
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	007a1200 	.word	0x007a1200
 80057d4:	40005400 	.word	0x40005400
 80057d8:	200007d8 	.word	0x200007d8
 80057dc:	431bde83 	.word	0x431bde83
 80057e0:	0007a120 	.word	0x0007a120
 80057e4:	000186a0 	.word	0x000186a0

080057e8 <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 80057ec:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <MCAL_I2C_RESET+0x48>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005830 <MCAL_I2C_RESET+0x48>)
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	6013      	str	r3, [r2, #0]
	MRCC_APB1RSTR |= (1 << 21);
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <MCAL_I2C_RESET+0x4c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005834 <MCAL_I2C_RESET+0x4c>)
 80057fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005802:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005808:	f000 ff4c 	bl	80066a4 <MSTK_uint8Delay>
	MRCC_APB1RSTR &= ~(1 << 21);
 800580c:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <MCAL_I2C_RESET+0x4c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <MCAL_I2C_RESET+0x4c>)
 8005812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005816:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <MCAL_I2C_RESET+0x48>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a04      	ldr	r2, [pc, #16]	@ (8005830 <MCAL_I2C_RESET+0x48>)
 800581e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005822:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005828:	f000 ff3c 	bl	80066a4 <MSTK_uint8Delay>
}
 800582c:	bf00      	nop
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40005400 	.word	0x40005400
 8005834:	40021010 	.word	0x40021010

08005838 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a10      	ldr	r2, [pc, #64]	@ (8005884 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d10a      	bne.n	800585e <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8005848:	220e      	movs	r2, #14
 800584a:	2106      	movs	r1, #6
 800584c:	2001      	movs	r0, #1
 800584e:	f7ff fb6d 	bl	8004f2c <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8005852:	220e      	movs	r2, #14
 8005854:	2107      	movs	r1, #7
 8005856:	2001      	movs	r0, #1
 8005858:	f7ff fb68 	bl	8004f2c <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 800585c:	e00d      	b.n	800587a <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d109      	bne.n	800587a <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005866:	220d      	movs	r2, #13
 8005868:	210a      	movs	r1, #10
 800586a:	2001      	movs	r0, #1
 800586c:	f7ff fb5e 	bl	8004f2c <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005870:	220d      	movs	r2, #13
 8005872:	210b      	movs	r1, #11
 8005874:	2001      	movs	r0, #1
 8005876:	f7ff fb59 	bl	8004f2c <MGPIO_SetPinMode>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40005400 	.word	0x40005400
 8005888:	40005800 	.word	0x40005800

0800588c <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	460b      	mov	r3, r1
 800589a:	817b      	strh	r3, [r7, #10]
	int i = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 80058a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058a4:	461a      	mov	r2, r3
 80058a6:	2101      	movs	r1, #1
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8d5 	bl	8005a58 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 80058ae:	bf00      	nop
 80058b0:	2101      	movs	r1, #1
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f8f8 	bl	8005aa8 <I2C_GetFlagStatus>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f8      	beq.n	80058b0 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	2200      	movs	r2, #0
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f975 	bl	8005bb4 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80058ca:	bf00      	nop
 80058cc:	2102      	movs	r1, #2
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8ea 	bl	8005aa8 <I2C_GetFlagStatus>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f8      	beq.n	80058cc <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 80058da:	bf00      	nop
 80058dc:	4919      	ldr	r1, [pc, #100]	@ (8005944 <MCAL_I2C_MASTER_TX+0xb8>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f8e2 	bl	8005aa8 <I2C_GetFlagStatus>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f8      	beq.n	80058dc <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e018      	b.n	8005922 <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 80058f0:	bf00      	nop
 80058f2:	2104      	movs	r1, #4
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f8d7 	bl	8005aa8 <I2C_GetFlagStatus>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f8      	beq.n	80058f2 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i > 0)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	dd03      	ble.n	800590e <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_micro(500);
 8005906:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800590a:	f7fd fe14 	bl	8003536 <delay_micro>
		}
		I2Cx->DR = dataOut[i];
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	3301      	adds	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d8e2      	bhi.n	80058f0 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 800592a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005932:	2101      	movs	r1, #1
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f95c 	bl	8005bf2 <I2C_GenerateSTOP>
	}
}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	00070080 	.word	0x00070080

08005948 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start, I2C_SlaveSelect_t slave)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	460b      	mov	r3, r1
 8005956:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a3d      	ldr	r2, [pc, #244]	@ (8005a50 <MCAL_I2C_MASTER_RX+0x108>)
 800595c:	4293      	cmp	r3, r2
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 800596c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005970:	461a      	mov	r2, r3
 8005972:	2101      	movs	r1, #1
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f86f 	bl	8005a58 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 800597a:	bf00      	nop
 800597c:	2101      	movs	r1, #1
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f892 	bl	8005aa8 <I2C_GetFlagStatus>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f8      	beq.n	800597c <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	2201      	movs	r2, #1
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f90f 	bl	8005bb4 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005996:	bf00      	nop
 8005998:	2102      	movs	r1, #2
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f884 	bl	8005aa8 <I2C_GetFlagStatus>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f8      	beq.n	8005998 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 80059a6:	2101      	movs	r1, #1
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f93d 	bl	8005c28 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01c      	beq.n	8005a06 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e011      	b.n	80059f8 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 80059d4:	bf00      	nop
 80059d6:	2103      	movs	r1, #3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f865 	bl	8005aa8 <I2C_GetFlagStatus>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f8      	beq.n	80059d6 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6919      	ldr	r1, [r3, #16]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	b2ca      	uxtb	r2, r1
 80059f0:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	daea      	bge.n	80059d4 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 80059fe:	2100      	movs	r1, #0
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f911 	bl	8005c28 <I2C_ACKnowledgeConfig>

	}
	if(slave == I2C_EEPROM)
 8005a06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <MCAL_I2C_MASTER_RX+0xce>
		MSTK_uint8Delay(500);
 8005a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005a12:	f000 fe47 	bl	80066a4 <MSTK_uint8Delay>
	if(Stop == With_Stop)
 8005a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <MCAL_I2C_MASTER_RX+0xde>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005a1e:	2101      	movs	r1, #1
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f8e6 	bl	8005bf2 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8005a26:	7cfa      	ldrb	r2, [r7, #19]
 8005a28:	490a      	ldr	r1, [pc, #40]	@ (8005a54 <MCAL_I2C_MASTER_RX+0x10c>)
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	440b      	add	r3, r1
 8005a34:	3310      	adds	r3, #16
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d103      	bne.n	8005a46 <MCAL_I2C_MASTER_RX+0xfe>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f8f1 	bl	8005c28 <I2C_ACKnowledgeConfig>
	}
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40005400 	.word	0x40005400
 8005a54:	200007d8 	.word	0x200007d8

08005a58 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
 8005a64:	4613      	mov	r3, r2
 8005a66:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8005a68:	78bb      	ldrb	r3, [r7, #2]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d007      	beq.n	8005a7e <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8005a6e:	bf00      	nop
 8005a70:	2100      	movs	r1, #0
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f818 	bl	8005aa8 <I2C_GetFlagStatus>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f8      	bne.n	8005a70 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d006      	beq.n	8005a92 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8005a90:	e005      	b.n	8005a9e <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d811      	bhi.n	8005aec <I2C_GetFlagStatus+0x44>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d86a      	bhi.n	8005ba4 <I2C_GetFlagStatus+0xfc>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <I2C_GetFlagStatus+0x2c>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af7 	.word	0x08005af7
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b27 	.word	0x08005b27
 8005ae0:	08005b8d 	.word	0x08005b8d
 8005ae4:	08005b75 	.word	0x08005b75
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	4a30      	ldr	r2, [pc, #192]	@ (8005bb0 <I2C_GetFlagStatus+0x108>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d024      	beq.n	8005b3e <I2C_GetFlagStatus+0x96>
 8005af4:	e056      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8005b02:	2301      	movs	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005b06:	e04d      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
		break;
 8005b0c:	e04a      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005b1e:	e041      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005b20:	2300      	movs	r3, #0
 8005b22:	75fb      	strb	r3, [r7, #23]
		break;
 8005b24:	e03e      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8005b36:	e035      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	75fb      	strb	r3, [r7, #23]
		break;
 8005b3c:	e032      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b5a:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	4013      	ands	r3, r2
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d102      	bne.n	8005b6e <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8005b6c:	e01a      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
		break;
 8005b72:	e017      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005b84:	e00e      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
		break;
 8005b8a:	e00b      	b.n	8005ba4 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005b9c:	e001      	b.n	8005ba2 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]
		break;
 8005ba2:	bf00      	nop
	}
	}
	return bitstatus;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	00070080 	.word	0x00070080

08005bb4 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	807b      	strh	r3, [r7, #2]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8005bc4:	887b      	ldrh	r3, [r7, #2]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8005bca:	787b      	ldrb	r3, [r7, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	e003      	b.n	8005be2 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8005bda:	887b      	ldrh	r3, [r7, #2]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8005c10:	e005      	b.n	8005c1e <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d006      	beq.n	8005c48 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8005c46:	e005      	b.n	8005c54 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr
	...

08005c60 <MNVIC_EnableInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK: Peripheral Interrupt is enabled successfully
 * @retval E_NOT_OK: Peripheral Interrupt is not enabled 
 */
Std_ReturnType MNVIC_EnableInterrupt(MNVIC_InterruptType Copy_uint32InterruptNumber)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < 32)
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b1f      	cmp	r3, #31
 8005c72:	d80c      	bhi.n	8005c8e <MNVIC_EnableInterrupt+0x2e>
    {
        SET_BIT((NVIC -> ISER[0]), Copy_uint32InterruptNumber);
 8005c74:	4b13      	ldr	r3, [pc, #76]	@ (8005cc4 <MNVIC_EnableInterrupt+0x64>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	79fa      	ldrb	r2, [r7, #7]
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c80:	4611      	mov	r1, r2
 8005c82:	4a10      	ldr	r2, [pc, #64]	@ (8005cc4 <MNVIC_EnableInterrupt+0x64>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
 8005c8c:	e014      	b.n	8005cb8 <MNVIC_EnableInterrupt+0x58>
    }
    else if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	2b3b      	cmp	r3, #59	@ 0x3b
 8005c92:	d80f      	bhi.n	8005cb4 <MNVIC_EnableInterrupt+0x54>
    {
        Copy_uint32InterruptNumber -= 32;
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	3b20      	subs	r3, #32
 8005c98:	71fb      	strb	r3, [r7, #7]
        SET_BIT((NVIC -> ISER[1]), Copy_uint32InterruptNumber);
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <MNVIC_EnableInterrupt+0x64>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	79fa      	ldrb	r2, [r7, #7]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4a06      	ldr	r2, [pc, #24]	@ (8005cc4 <MNVIC_EnableInterrupt+0x64>)
 8005caa:	430b      	orrs	r3, r1
 8005cac:	6053      	str	r3, [r2, #4]
        Loc_uint8FuncStatus = E_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e001      	b.n	8005cb8 <MNVIC_EnableInterrupt+0x58>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	e000e100 	.word	0xe000e100

08005cc8 <MNVIC_SetInterruptPriority>:
 * @return Std_ReturnType
 * @retval E_OK: Priority has been set successfully
 * @retval E_NOT_OK: Priority has not been set  
 */
Std_ReturnType MNVIC_SetInterruptPriority(MNVIC_InterruptType Copy_uint32InterruptNumber, uint8 Copy_uint8GroupPriority, uint8 Copy_uint8SubGroupPriority)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	71fb      	strb	r3, [r7, #7]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	71bb      	strb	r3, [r7, #6]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2b3b      	cmp	r3, #59	@ 0x3b
 8005ce2:	d84e      	bhi.n	8005d82 <MNVIC_SetInterruptPriority+0xba>

                                             -----------------------------------
                                            |     Priority    ||||||||||||||||||                 
                                             -----------------------------------
        */
        uint16 Loc_uint16AIRCRPriorityGroupVal = (uint16)(MSCB_AIRCR & (0xFFFF));
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d94 <MNVIC_SetInterruptPriority+0xcc>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	81bb      	strh	r3, [r7, #12]
        uint8 Loc_uint8PriorityValue = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	72fb      	strb	r3, [r7, #11]

        switch(Loc_uint16AIRCRPriorityGroupVal)
 8005cee:	89bb      	ldrh	r3, [r7, #12]
 8005cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cf4:	d038      	beq.n	8005d68 <MNVIC_SetInterruptPriority+0xa0>
 8005cf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cfa:	dc3f      	bgt.n	8005d7c <MNVIC_SetInterruptPriority+0xb4>
 8005cfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d00:	d019      	beq.n	8005d36 <MNVIC_SetInterruptPriority+0x6e>
 8005d02:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d06:	dc39      	bgt.n	8005d7c <MNVIC_SetInterruptPriority+0xb4>
 8005d08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005d0c:	d013      	beq.n	8005d36 <MNVIC_SetInterruptPriority+0x6e>
 8005d0e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005d12:	dc33      	bgt.n	8005d7c <MNVIC_SetInterruptPriority+0xb4>
 8005d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d18:	d003      	beq.n	8005d22 <MNVIC_SetInterruptPriority+0x5a>
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1e:	d00a      	beq.n	8005d36 <MNVIC_SetInterruptPriority+0x6e>
 8005d20:	e02c      	b.n	8005d7c <MNVIC_SetInterruptPriority+0xb4>
        {
            case MNVIC_PRIORITY_GROUP_4_SUB_0:
            {
                Loc_uint8PriorityValue = (Copy_uint8GroupPriority << 4);
 8005d22:	79bb      	ldrb	r3, [r7, #6]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005d28:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <MNVIC_SetInterruptPriority+0xd0>)
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	7afa      	ldrb	r2, [r7, #11]
 8005d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005d34:	e027      	b.n	8005d86 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_3_SUB_1:
            case MNVIC_PRIORITY_GROUP_2_SUB_2:
            case MNVIC_PRIORITY_GROUP_1_SUB_3:
            {
                Loc_uint8PriorityValue = ((Copy_uint8SubGroupPriority) | (Copy_uint8GroupPriority << ((Loc_uint16AIRCRPriorityGroupVal - (uint16)MNVIC_PRIORITY_GROUP_4_SUB_0) / 0x100)));
 8005d36:	79ba      	ldrb	r2, [r7, #6]
 8005d38:	89bb      	ldrh	r3, [r7, #12]
 8005d3a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da00      	bge.n	8005d44 <MNVIC_SetInterruptPriority+0x7c>
 8005d42:	33ff      	adds	r3, #255	@ 0xff
 8005d44:	121b      	asrs	r3, r3, #8
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	b25a      	sxtb	r2, r3
 8005d4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b25b      	sxtb	r3, r3
 8005d54:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue << 4;
 8005d56:	4910      	ldr	r1, [pc, #64]	@ (8005d98 <MNVIC_SetInterruptPriority+0xd0>)
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	7afa      	ldrb	r2, [r7, #11]
 8005d5c:	0112      	lsls	r2, r2, #4
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	440b      	add	r3, r1
 8005d62:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005d66:	e00e      	b.n	8005d86 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_0_SUB_4:
            {
                Loc_uint8PriorityValue = (Copy_uint8SubGroupPriority << 4);
 8005d68:	797b      	ldrb	r3, [r7, #5]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <MNVIC_SetInterruptPriority+0xd0>)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	4413      	add	r3, r2
 8005d74:	7afa      	ldrb	r2, [r7, #11]
 8005d76:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005d7a:	e004      	b.n	8005d86 <MNVIC_SetInterruptPriority+0xbe>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
                break;
 8005d80:	e001      	b.n	8005d86 <MNVIC_SetInterruptPriority+0xbe>
        }

    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000ed0c 	.word	0xe000ed0c
 8005d98:	e000e100 	.word	0xe000e100

08005d9c <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 8005da0:	4b20      	ldr	r3, [pc, #128]	@ (8005e24 <MRCC_InitClock+0x88>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <MRCC_InitClock+0x88>)
 8005da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005daa:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 8005dac:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <MRCC_InitClock+0x88>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <MRCC_InitClock+0x88>)
 8005db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8005db8:	bf00      	nop
 8005dba:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <MRCC_InitClock+0x88>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f9      	beq.n	8005dba <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8005dc6:	4b18      	ldr	r3, [pc, #96]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a17      	ldr	r2, [pc, #92]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8005dd2:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 8005dde:	4b12      	ldr	r3, [pc, #72]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a11      	ldr	r2, [pc, #68]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005de8:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 8005dea:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dec:	4a0e      	ldr	r2, [pc, #56]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8005df2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005df8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005dfc:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e00:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8005e06:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e0c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005e10:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8005e12:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e14:	4a04      	ldr	r2, [pc, #16]	@ (8005e28 <MRCC_InitClock+0x8c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6013      	str	r3, [r2, #0]

    return E_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40021004 	.word	0x40021004

08005e2c <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	460a      	mov	r2, r1
 8005e36:	71fb      	strb	r3, [r7, #7]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d020      	beq.n	8005e88 <MRCC_EnablePeripheralClock+0x5c>
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	dc2b      	bgt.n	8005ea2 <MRCC_EnablePeripheralClock+0x76>
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d002      	beq.n	8005e54 <MRCC_EnablePeripheralClock+0x28>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d00d      	beq.n	8005e6e <MRCC_EnablePeripheralClock+0x42>
 8005e52:	e026      	b.n	8005ea2 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 8005e54:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <MRCC_EnablePeripheralClock+0x88>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	79ba      	ldrb	r2, [r7, #6]
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e60:	4611      	mov	r1, r2
 8005e62:	4a14      	ldr	r2, [pc, #80]	@ (8005eb4 <MRCC_EnablePeripheralClock+0x88>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
            break;
 8005e6c:	e01c      	b.n	8005ea8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 8005e6e:	4b12      	ldr	r3, [pc, #72]	@ (8005eb8 <MRCC_EnablePeripheralClock+0x8c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	79ba      	ldrb	r2, [r7, #6]
 8005e74:	2101      	movs	r1, #1
 8005e76:	fa01 f202 	lsl.w	r2, r1, r2
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb8 <MRCC_EnablePeripheralClock+0x8c>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
            break;
 8005e86:	e00f      	b.n	8005ea8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 8005e88:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <MRCC_EnablePeripheralClock+0x90>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	79ba      	ldrb	r2, [r7, #6]
 8005e8e:	2101      	movs	r1, #1
 8005e90:	fa01 f202 	lsl.w	r2, r1, r2
 8005e94:	4611      	mov	r1, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <MRCC_EnablePeripheralClock+0x90>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
            break;
 8005ea0:	e002      	b.n	8005ea8 <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]
            break;
 8005ea6:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	40021014 	.word	0x40021014
 8005eb8:	4002101c 	.word	0x4002101c
 8005ebc:	40021018 	.word	0x40021018

08005ec0 <MRTC_CalculateSeconds>:
static volatile Stime_t glbl_SReferenceTime = {17,12,0};
static volatile uint32 glbl_uint32ReferenceSeconds = 0;
static volatile ptr_to_func_t glbl_PCallbackFunc = NULL_PTR;

Std_ReturnType MRTC_CalculateSeconds(Sdate_t* P_SDate, Stime_t* P_STime, uint32* P_uint32Seconds)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b09a      	sub	sp, #104	@ 0x68
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
    struct tm time = {};
 8005ecc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005ed0:	2224      	movs	r2, #36	@ 0x24
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 ff60 	bl	8007d9a <memset>
    
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d03d      	beq.n	8005f62 <MRTC_CalculateSeconds+0xa2>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d03a      	beq.n	8005f62 <MRTC_CalculateSeconds+0xa2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d037      	beq.n	8005f62 <MRTC_CalculateSeconds+0xa2>
    {
        struct tm Loc_SspecificTime = {0};
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	2224      	movs	r2, #36	@ 0x24
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 ff4d 	bl	8007d9a <memset>
        Loc_SspecificTime.tm_year = (P_SDate -> m_years) - 1900; //year since 1900
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mon = (P_SDate -> m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	789b      	ldrb	r3, [r3, #2]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_mday = (P_SDate -> m_days); //Day (1 ---> 31)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	78db      	ldrb	r3, [r3, #3]
 8005f16:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_hour = (P_STime -> m_hours);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_min = (P_STime -> m_minutes);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	617b      	str	r3, [r7, #20]
        Loc_SspecificTime.tm_sec = (P_STime -> m_seconds);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	789b      	ldrb	r3, [r3, #2]
 8005f28:	613b      	str	r3, [r7, #16]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f002 f992 	bl	8008258 <mktime>
 8005f34:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58

        *P_uint32Seconds = (uint32)(difftime(Loc_SspecificTime_t, 0));
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8005f44:	f001 ffa0 	bl	8007e88 <difftime>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f7fa fd8c 	bl	8000a6c <__aeabi_d2uiz>
 8005f54:	4602      	mov	r2, r0
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]

        Loc_uint8FuncStatus = E_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    {
 8005f60:	e002      	b.n	8005f68 <MRTC_CalculateSeconds+0xa8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }
    return Loc_uint8FuncStatus;
 8005f68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3768      	adds	r7, #104	@ 0x68
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <MRTC_CalculateDateTime>:
Std_ReturnType MRTC_CalculateDateTime(uint32* P_uint32Seconds, Sdate_t* P_SDate, Stime_t* P_STime)
{
 8005f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f78:	b098      	sub	sp, #96	@ 0x60
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d06b      	beq.n	8006066 <MRTC_CalculateDateTime+0xf2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d068      	beq.n	8006066 <MRTC_CalculateDateTime+0xf2>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d065      	beq.n	8006066 <MRTC_CalculateDateTime+0xf2>
    {
        time_t Loc_tInputTime = (time_t)(*P_uint32Seconds);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4698      	mov	r8, r3
 8005fa2:	4691      	mov	r9, r2
 8005fa4:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50

        struct tm Loc_SspecificTime = {0};
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	2224      	movs	r2, #36	@ 0x24
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fef2 	bl	8007d9a <memset>
        Loc_SspecificTime.tm_year = (glbl_SReferenceDate . m_years) - 1900; //year since 1900
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <MRTC_CalculateDateTime+0x108>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
        Loc_SspecificTime.tm_mon = (glbl_SReferenceDate . m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800607c <MRTC_CalculateDateTime+0x108>)
 8005fc4:	789b      	ldrb	r3, [r3, #2]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mday = (glbl_SReferenceDate . m_days); //Day (1 ---> 31)
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800607c <MRTC_CalculateDateTime+0x108>)
 8005fce:	78db      	ldrb	r3, [r3, #3]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_hour = (glbl_SReferenceTime . m_hours);
 8005fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006080 <MRTC_CalculateDateTime+0x10c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_min = (glbl_SReferenceTime . m_minutes);
 8005fdc:	4b28      	ldr	r3, [pc, #160]	@ (8006080 <MRTC_CalculateDateTime+0x10c>)
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_sec = (glbl_SReferenceTime . m_seconds);
 8005fe4:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <MRTC_CalculateDateTime+0x10c>)
 8005fe6:	789b      	ldrb	r3, [r3, #2]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	617b      	str	r3, [r7, #20]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f002 f931 	bl	8008258 <mktime>
 8005ff6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

        time_t Loc_tSumTime = Loc_tInputTime + Loc_SspecificTime_t;
 8005ffa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006002:	1884      	adds	r4, r0, r2
 8006004:	eb41 0503 	adc.w	r5, r1, r3
 8006008:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38

        struct tm* Loc_PBrokenTime = localtime(&Loc_tSumTime);
 800600c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006010:	4618      	mov	r0, r3
 8006012:	f001 ff41 	bl	8007e98 <localtime>
 8006016:	6478      	str	r0, [r7, #68]	@ 0x44

        P_SDate -> m_years = (Loc_PBrokenTime -> tm_year) + 1900;
 8006018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8006022:	b29a      	uxth	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	801a      	strh	r2, [r3, #0]
        P_SDate -> m_months = (Loc_PBrokenTime -> tm_mon) + 1;
 8006028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	3301      	adds	r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	709a      	strb	r2, [r3, #2]
        P_SDate -> m_days = (Loc_PBrokenTime -> tm_mday);
 8006036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	70da      	strb	r2, [r3, #3]
        P_STime -> m_hours = Loc_PBrokenTime -> tm_hour;
 8006040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	701a      	strb	r2, [r3, #0]
        P_STime -> m_minutes = Loc_PBrokenTime -> tm_min;
 800604a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	705a      	strb	r2, [r3, #1]
        P_STime ->m_seconds = Loc_PBrokenTime -> tm_sec;
 8006054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	709a      	strb	r2, [r3, #2]
        Loc_uint8FuncStatus = E_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    {
 8006064:	e002      	b.n	800606c <MRTC_CalculateDateTime+0xf8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }
    return Loc_uint8FuncStatus;
 800606c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006070:	4618      	mov	r0, r3
 8006072:	3760      	adds	r7, #96	@ 0x60
 8006074:	46bd      	mov	sp, r7
 8006076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800607a:	bf00      	nop
 800607c:	200003c4 	.word	0x200003c4
 8006080:	200003c8 	.word	0x200003c8

08006084 <MRTC_Init>:
 * @return Std_ReturnType
 * @retval E_OK: RTC is Successfully initialized
 * @retval E_NOT_OK: RTC is not initialized 
 */
Std_ReturnType MRTC_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800608a:	2301      	movs	r3, #1
 800608c:	71fb      	strb	r3, [r7, #7]

    //Enable Power Control Clock in order to access backup and RTC Registers
    SET_BIT(MRCC_APB1ENR_R, MRCC_APB1ENR_PWREN_BIT);
 800608e:	4b37      	ldr	r3, [pc, #220]	@ (800616c <MRTC_Init+0xe8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a36      	ldr	r2, [pc, #216]	@ (800616c <MRTC_Init+0xe8>)
 8006094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006098:	6013      	str	r3, [r2, #0]
    //Enable access to backup and RTC Registers
    SET_BIT(MPWR_CR_R, MPWR_CR_DBP_BIT);
 800609a:	4b35      	ldr	r3, [pc, #212]	@ (8006170 <MRTC_Init+0xec>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a34      	ldr	r2, [pc, #208]	@ (8006170 <MRTC_Init+0xec>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a4:	6013      	str	r3, [r2, #0]


    #if MRTC_CLOCK_SOURCE == MRTC_LSE_CLOCK
        //Enable external 32KHz Oscillator
        SET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSEON_BIT);
 80060a6:	4b33      	ldr	r3, [pc, #204]	@ (8006174 <MRTC_Init+0xf0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a32      	ldr	r2, [pc, #200]	@ (8006174 <MRTC_Init+0xf0>)
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6013      	str	r3, [r2, #0]
        //Wait until external 32KHz Oscillator is ready
        while(!(GET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSERDY_BIT)));
 80060b2:	bf00      	nop
 80060b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006174 <MRTC_Init+0xf0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f9      	beq.n	80060b4 <MRTC_Init+0x30>
        //Set Clock Source of RTC to be Low-speed external clock
        SET_BIT(MRCC_BDCR_R , MRCC_BDCR_RTCSEL_START_BIT);
 80060c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006174 <MRTC_Init+0xf0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006174 <MRTC_Init+0xf0>)
 80060c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ca:	6013      	str	r3, [r2, #0]
        CLR_BIT(MRCC_BDCR_R, (MRCC_BDCR_RTCSEL_START_BIT + 1));
 80060cc:	4b29      	ldr	r3, [pc, #164]	@ (8006174 <MRTC_Init+0xf0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a28      	ldr	r2, [pc, #160]	@ (8006174 <MRTC_Init+0xf0>)
 80060d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060d6:	6013      	str	r3, [r2, #0]
				SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 80060d8:	4b26      	ldr	r3, [pc, #152]	@ (8006174 <MRTC_Init+0xf0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	@ (8006174 <MRTC_Init+0xf0>)
 80060de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e2:	6013      	str	r3, [r2, #0]
        #error "RTC Clock Source is not specified!!"
    #endif /*MRTC_CLOCK_SOURCE*/

    //Enter Configuration mode
    //CLR_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 80060e4:	bf00      	nop
 80060e6:	4b24      	ldr	r3, [pc, #144]	@ (8006178 <MRTC_Init+0xf4>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f9      	beq.n	80060e6 <MRTC_Init+0x62>
    SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80060f2:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <MRTC_Init+0xf4>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4a20      	ldr	r2, [pc, #128]	@ (8006178 <MRTC_Init+0xf4>)
 80060f8:	f043 0310 	orr.w	r3, r3, #16
 80060fc:	6053      	str	r3, [r2, #4]
    //RTC -> PRLH = 0;
    RTC -> PRLL = 0x7FFF;
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <MRTC_Init+0xf4>)
 8006100:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006104:	60da      	str	r2, [r3, #12]
    CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006106:	4b1c      	ldr	r3, [pc, #112]	@ (8006178 <MRTC_Init+0xf4>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <MRTC_Init+0xf4>)
 800610c:	f023 0310 	bic.w	r3, r3, #16
 8006110:	6053      	str	r3, [r2, #4]
    //SET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006112:	bf00      	nop
 8006114:	4b18      	ldr	r3, [pc, #96]	@ (8006178 <MRTC_Init+0xf4>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f9      	beq.n	8006114 <MRTC_Init+0x90>

    #if MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_ENABLED
        SET_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
    #elif MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_DISABLED
        CLR_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
 8006120:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <MRTC_Init+0xf4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a14      	ldr	r2, [pc, #80]	@ (8006178 <MRTC_Init+0xf4>)
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	6013      	str	r3, [r2, #0]
        #error "RTC Second Interrupt Not Specified"
    #endif /*MRTC_SECOND_INTERRUPT_STATUS*/


    //Check for synchronization of RTC Registers
    CLR_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT);
 800612c:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <MRTC_Init+0xf4>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a11      	ldr	r2, [pc, #68]	@ (8006178 <MRTC_Init+0xf4>)
 8006132:	f023 0308 	bic.w	r3, r3, #8
 8006136:	6053      	str	r3, [r2, #4]
    while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT)));
 8006138:	bf00      	nop
 800613a:	4b0f      	ldr	r3, [pc, #60]	@ (8006178 <MRTC_Init+0xf4>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f9      	beq.n	800613a <MRTC_Init+0xb6>

    //Enable RTC Clock
    SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 8006146:	4b0b      	ldr	r3, [pc, #44]	@ (8006174 <MRTC_Init+0xf0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <MRTC_Init+0xf0>)
 800614c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006150:	6013      	str	r3, [r2, #0]
    MRTC_CalculateSeconds(&glbl_SReferenceDate, &glbl_SReferenceTime, &glbl_uint32ReferenceSeconds);
 8006152:	4a0a      	ldr	r2, [pc, #40]	@ (800617c <MRTC_Init+0xf8>)
 8006154:	490a      	ldr	r1, [pc, #40]	@ (8006180 <MRTC_Init+0xfc>)
 8006156:	480b      	ldr	r0, [pc, #44]	@ (8006184 <MRTC_Init+0x100>)
 8006158:	f7ff feb2 	bl	8005ec0 <MRTC_CalculateSeconds>

    Loc_uint8FuncStatus = E_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8006160:	79fb      	ldrb	r3, [r7, #7]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	4002101c 	.word	0x4002101c
 8006170:	40007000 	.word	0x40007000
 8006174:	40021020 	.word	0x40021020
 8006178:	40002800 	.word	0x40002800
 800617c:	20000808 	.word	0x20000808
 8006180:	200003c8 	.word	0x200003c8
 8006184:	200003c4 	.word	0x200003c4

08006188 <MRTC_SetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date and time are successfully set
 * @retval E_NOT_OK: Date and time are not set
 */
Std_ReturnType MRTC_SetDateAndTime         (Sdate_t* P_SDateToBeSet, Stime_t* P_STimeToBeSet)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006192:	2301      	movs	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeSet != NULL_PTR) && (P_STimeToBeSet != NULL_PTR))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d03d      	beq.n	8006218 <MRTC_SetDateAndTime+0x90>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03a      	beq.n	8006218 <MRTC_SetDateAndTime+0x90>
    {
        uint32 Loc_uint32SecondsToBeSet = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateSeconds(P_SDateToBeSet, P_STimeToBeSet, &Loc_uint32SecondsToBeSet);
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	461a      	mov	r2, r3
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fe86 	bl	8005ec0 <MRTC_CalculateSeconds>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d129      	bne.n	8006212 <MRTC_SetDateAndTime+0x8a>
        {
            Loc_uint32SecondsToBeSet -= glbl_uint32ReferenceSeconds;
 80061be:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <MRTC_SetDateAndTime+0xa0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	60bb      	str	r3, [r7, #8]

            //Enter Configuration mode
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 80061c8:	bf00      	nop
 80061ca:	4b18      	ldr	r3, [pc, #96]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f9      	beq.n	80061ca <MRTC_SetDateAndTime+0x42>
            SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80061d6:	4b15      	ldr	r3, [pc, #84]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4a14      	ldr	r2, [pc, #80]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	6053      	str	r3, [r2, #4]
            RTC -> CNTH = (Loc_uint32SecondsToBeSet >> 16);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4a11      	ldr	r2, [pc, #68]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	6193      	str	r3, [r2, #24]
            RTC -> CNTL = (Loc_uint32SecondsToBeSet & 0xFFFF);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4a0f      	ldr	r2, [pc, #60]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	61d3      	str	r3, [r2, #28]
            CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80061f2:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4a0d      	ldr	r2, [pc, #52]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	6053      	str	r3, [r2, #4]
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 80061fe:	bf00      	nop
 8006200:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <MRTC_SetDateAndTime+0xa4>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f9      	beq.n	8006200 <MRTC_SetDateAndTime+0x78>

            Loc_uint8FuncStatus = E_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
    {
 8006210:	e004      	b.n	800621c <MRTC_SetDateAndTime+0x94>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
    {
 8006216:	e001      	b.n	800621c <MRTC_SetDateAndTime+0x94>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000808 	.word	0x20000808
 800622c:	40002800 	.word	0x40002800

08006230 <MRTC_GetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date & Time is successfully read
 * @retval E_NOT_OK: Date & Time is not read
 */
Std_ReturnType MRTC_GetDateAndTime  (Sdate_t* P_SDateToBeRead, Stime_t* P_STimeToBeRead)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeRead != NULL_PTR) && (P_STimeToBeRead != NULL_PTR))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <MRTC_GetDateAndTime+0x4c>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d018      	beq.n	800627c <MRTC_GetDateAndTime+0x4c>
    {
        uint32 Loc_uint32SecondsInReg = ((RTC -> CNTH) << 16) | (RTC -> CNTL);
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <MRTC_GetDateAndTime+0x5c>)
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	041a      	lsls	r2, r3, #16
 8006250:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <MRTC_GetDateAndTime+0x5c>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4313      	orrs	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateDateTime(&Loc_uint32SecondsInReg, P_SDateToBeRead, P_STimeToBeRead);
 8006258:	f107 0308 	add.w	r3, r7, #8
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fe87 	bl	8005f74 <MRTC_CalculateDateTime>
 8006266:	4603      	mov	r3, r0
 8006268:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <MRTC_GetDateAndTime+0x46>
        {

            Loc_uint8FuncStatus = E_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
    {
 8006274:	e004      	b.n	8006280 <MRTC_GetDateAndTime+0x50>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
    {
 800627a:	e001      	b.n	8006280 <MRTC_GetDateAndTime+0x50>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40002800 	.word	0x40002800

08006290 <RTC_IRQHandler>:
    }

    return Loc_uint8FuncStatus;
}
void RTC_IRQHandler(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc != NULL_PTR)
 8006294:	4b07      	ldr	r3, [pc, #28]	@ (80062b4 <RTC_IRQHandler+0x24>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <RTC_IRQHandler+0x1e>
    {
        glbl_PCallbackFunc();
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <RTC_IRQHandler+0x24>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4798      	blx	r3
				CLR_BIT(RTC->CRL, MRTC_CRL_SECF_BIT);
 80062a2:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <RTC_IRQHandler+0x28>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <RTC_IRQHandler+0x28>)
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	6053      	str	r3, [r2, #4]
    }
    else
    {
        /*Do nothing*/
    }
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2000080c 	.word	0x2000080c
 80062b8:	40002800 	.word	0x40002800

080062bc <MSCB_SetPriorityGrouping>:
 * @return Std_ReturnType
 * @retval E_OK: Priority Grouping has been set
 * @retval E_NOT_OK: Priority Grouping has not been set   
 */
Std_ReturnType MSCB_SetPriorityGrouping(uint32 Copy_uint32PriorityGrouping)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint32PriorityGrouping)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <MSCB_SetPriorityGrouping+0x6c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01b      	beq.n	8006308 <MSCB_SetPriorityGrouping+0x4c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a15      	ldr	r2, [pc, #84]	@ (8006328 <MSCB_SetPriorityGrouping+0x6c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d81d      	bhi.n	8006314 <MSCB_SetPriorityGrouping+0x58>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a14      	ldr	r2, [pc, #80]	@ (800632c <MSCB_SetPriorityGrouping+0x70>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <MSCB_SetPriorityGrouping+0x4c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a12      	ldr	r2, [pc, #72]	@ (800632c <MSCB_SetPriorityGrouping+0x70>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d815      	bhi.n	8006314 <MSCB_SetPriorityGrouping+0x58>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a11      	ldr	r2, [pc, #68]	@ (8006330 <MSCB_SetPriorityGrouping+0x74>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <MSCB_SetPriorityGrouping+0x4c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006330 <MSCB_SetPriorityGrouping+0x74>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d80d      	bhi.n	8006314 <MSCB_SetPriorityGrouping+0x58>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006334 <MSCB_SetPriorityGrouping+0x78>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <MSCB_SetPriorityGrouping+0x4c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0d      	ldr	r2, [pc, #52]	@ (8006338 <MSCB_SetPriorityGrouping+0x7c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d105      	bne.n	8006314 <MSCB_SetPriorityGrouping+0x58>
        case MSCB_PRIORITY_GROUP_1_SUB_3:
        case MSCB_PRIORITY_GROUP_2_SUB_2:
        case MSCB_PRIORITY_GROUP_3_SUB_1:
        case MSCB_PRIORITY_GROUP_4_SUB_0:
        {
            SCB -> AIRCR = Copy_uint32PriorityGrouping;
 8006308:	4a0c      	ldr	r2, [pc, #48]	@ (800633c <MSCB_SetPriorityGrouping+0x80>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60d3      	str	r3, [r2, #12]
            Loc_uint8FuncStatus = E_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
            break;
 8006312:	e002      	b.n	800631a <MSCB_SetPriorityGrouping+0x5e>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
            break;
 8006318:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	05fa0700 	.word	0x05fa0700
 800632c:	05fa0600 	.word	0x05fa0600
 8006330:	05fa0500 	.word	0x05fa0500
 8006334:	05fa0300 	.word	0x05fa0300
 8006338:	05fa0400 	.word	0x05fa0400
 800633c:	e000ed00 	.word	0xe000ed00

08006340 <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				-Support for SPI Full Duplex Master/Slave only  & NSS HW only for slave
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
	uint16 tmpreg_CR1 = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	81fb      	strh	r3, [r7, #14]
	uint16 tmpreg_CR2 = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a38      	ldr	r2, [pc, #224]	@ (8006438 <MCAL_SPI_Init+0xf8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d111      	bne.n	800637e <MCAL_SPI_Init+0x3e>
	{
		Global_SPI_Config1 = *SPI_Config ;
 800635a:	4a38      	ldr	r2, [pc, #224]	@ (800643c <MCAL_SPI_Init+0xfc>)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	4614      	mov	r4, r2
 8006360:	461d      	mov	r5, r3
 8006362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006366:	e895 0003 	ldmia.w	r5, {r0, r1}
 800636a:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 800636e:	4b34      	ldr	r3, [pc, #208]	@ (8006440 <MCAL_SPI_Init+0x100>)
 8006370:	4a32      	ldr	r2, [pc, #200]	@ (800643c <MCAL_SPI_Init+0xfc>)
 8006372:	601a      	str	r2, [r3, #0]
		MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_SPI1_EN);
 8006374:	210c      	movs	r1, #12
 8006376:	2003      	movs	r0, #3
 8006378:	f7ff fd58 	bl	8005e2c <MRCC_EnablePeripheralClock>
 800637c:	e014      	b.n	80063a8 <MCAL_SPI_Init+0x68>

	}else if (SPIx == SPI2)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a30      	ldr	r2, [pc, #192]	@ (8006444 <MCAL_SPI_Init+0x104>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d110      	bne.n	80063a8 <MCAL_SPI_Init+0x68>
	{
		Global_SPI_Config2 = *SPI_Config ;
 8006386:	4a30      	ldr	r2, [pc, #192]	@ (8006448 <MCAL_SPI_Init+0x108>)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	4614      	mov	r4, r2
 800638c:	461d      	mov	r5, r3
 800638e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006396:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 800639a:	4b29      	ldr	r3, [pc, #164]	@ (8006440 <MCAL_SPI_Init+0x100>)
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <MCAL_SPI_Init+0x108>)
 800639e:	605a      	str	r2, [r3, #4]
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 80063a0:	210e      	movs	r1, #14
 80063a2:	2002      	movs	r0, #2
 80063a4:	f7ff fd42 	bl	8005e2c <MRCC_EnablePeripheralClock>

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 80063a8:	2340      	movs	r3, #64	@ 0x40
 80063aa:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	885a      	ldrh	r2, [r3, #2]
 80063ba:	89fb      	ldrh	r3, [r7, #14]
 80063bc:	4313      	orrs	r3, r2
 80063be:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	889a      	ldrh	r2, [r3, #4]
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	88da      	ldrh	r2, [r3, #6]
 80063ce:	89fb      	ldrh	r3, [r7, #14]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	891a      	ldrh	r2, [r3, #8]
 80063d8:	89fb      	ldrh	r3, [r7, #14]
 80063da:	4313      	orrs	r3, r2
 80063dc:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	895a      	ldrh	r2, [r3, #10]
 80063e2:	89fb      	ldrh	r3, [r7, #14]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	899b      	ldrh	r3, [r3, #12]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d105      	bne.n	80063fc <MCAL_SPI_Init+0xbc>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	899a      	ldrh	r2, [r3, #12]
 80063f4:	89bb      	ldrh	r3, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	81bb      	strh	r3, [r7, #12]
 80063fa:	e004      	b.n	8006406 <MCAL_SPI_Init+0xc6>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	899a      	ldrh	r2, [r3, #12]
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	4313      	orrs	r3, r2
 8006404:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	89da      	ldrh	r2, [r3, #14]
 800640a:	89fb      	ldrh	r3, [r7, #14]
 800640c:	4313      	orrs	r3, r2
 800640e:	81fb      	strh	r3, [r7, #14]
//
//	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 8006410:	89fa      	ldrh	r2, [r7, #14]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 8006416:	89ba      	ldrh	r2, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
	  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	611a      	str	r2, [r3, #16]
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bdb0      	pop	{r4, r5, r7, pc}
 8006436:	bf00      	nop
 8006438:	40013000 	.word	0x40013000
 800643c:	20000818 	.word	0x20000818
 8006440:	20000810 	.word	0x20000810
 8006444:	40003800 	.word	0x40003800
 8006448:	20000830 	.word	0x20000830

0800644c <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16 *pTxBuffer,enum PollingMechism PollingEn )
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0 ;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a17      	ldr	r2, [pc, #92]	@ (80064c0 <MCAL_SPI_SendData+0x74>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d102      	bne.n	800646c <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
 800646a:	e005      	b.n	8006478 <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a15      	ldr	r2, [pc, #84]	@ (80064c4 <MCAL_SPI_SendData+0x78>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d101      	bne.n	8006478 <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_Direction_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_Direction_1LINE_transmit_only) {
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	4a13      	ldr	r2, [pc, #76]	@ (80064c8 <MCAL_SPI_SendData+0x7c>)
 800647c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <MCAL_SPI_SendData+0x4a>
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	4a0f      	ldr	r2, [pc, #60]	@ (80064c8 <MCAL_SPI_SendData+0x7c>)
 800648a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648e:	885b      	ldrh	r3, [r3, #2]
 8006490:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006494:	d10e      	bne.n	80064b4 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE));
 800649c:	bf00      	nop
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f9      	beq.n	800649e <MCAL_SPI_SendData+0x52>


		SPIx->SPI_DR =  (*pTxBuffer ) ;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	60da      	str	r2, [r3, #12]
	else
	{
		//SPIx->SPI_DR =  (*pTxBuffer ) ;//todo
	}

}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40013000 	.word	0x40013000
 80064c4:	40003800 	.word	0x40003800
 80064c8:	20000810 	.word	0x20000810

080064cc <MCAL_SPI_GPIO_Set_Pins>:




void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	if (SPIx == SPI1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3a      	ldr	r2, [pc, #232]	@ (80065c0 <MCAL_SPI_GPIO_Set_Pins+0xf4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d139      	bne.n	8006550 <MCAL_SPI_GPIO_Set_Pins+0x84>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 80064dc:	4b39      	ldr	r3, [pc, #228]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d11a      	bne.n	800651c <MCAL_SPI_GPIO_Set_Pins+0x50>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 80064e6:	4b37      	ldr	r3, [pc, #220]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	899b      	ldrh	r3, [r3, #12]
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d105      	bne.n	80064fc <MCAL_SPI_GPIO_Set_Pins+0x30>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80064f0:	2209      	movs	r2, #9
 80064f2:	2104      	movs	r1, #4
 80064f4:	2000      	movs	r0, #0
 80064f6:	f7fe fd19 	bl	8004f2c <MGPIO_SetPinMode>
				break ;
 80064fa:	bf00      	nop
			}


			//		PA5 : SPI1_SCK
			//			Master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80064fc:	2209      	movs	r2, #9
 80064fe:	2105      	movs	r1, #5
 8006500:	2000      	movs	r0, #0
 8006502:	f7fe fd13 	bl	8004f2c <MGPIO_SetPinMode>


			//		PA6 : SPI1_MISO  (supported only full duplex)
			//			Full duplex / master Input floating

			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_INPUT_FLOATING_MODE);
 8006506:	2204      	movs	r2, #4
 8006508:	2106      	movs	r1, #6
 800650a:	2000      	movs	r0, #0
 800650c:	f7fe fd0e 	bl	8004f2c <MGPIO_SetPinMode>
			//todo to suport half duplex and simplex


			//		PA7 : SPI1_MOSI
			//			Full duplex / master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006510:	2209      	movs	r2, #9
 8006512:	2107      	movs	r1, #7
 8006514:	2000      	movs	r0, #0
 8006516:	f7fe fd09 	bl	8004f2c <MGPIO_SetPinMode>
		}


	}

}
 800651a:	e04c      	b.n	80065b6 <MCAL_SPI_GPIO_Set_Pins+0xea>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 800651c:	4b29      	ldr	r3, [pc, #164]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	899b      	ldrh	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <MCAL_SPI_GPIO_Set_Pins+0x64>
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_INPUT_FLOATING_MODE);
 8006526:	2204      	movs	r2, #4
 8006528:	2104      	movs	r1, #4
 800652a:	2000      	movs	r0, #0
 800652c:	f7fe fcfe 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_INPUT_FLOATING_MODE);
 8006530:	2204      	movs	r2, #4
 8006532:	2105      	movs	r1, #5
 8006534:	2000      	movs	r0, #0
 8006536:	f7fe fcf9 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800653a:	2209      	movs	r2, #9
 800653c:	2106      	movs	r1, #6
 800653e:	2000      	movs	r0, #0
 8006540:	f7fe fcf4 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_INPUT_FLOATING_MODE);
 8006544:	2204      	movs	r2, #4
 8006546:	2107      	movs	r1, #7
 8006548:	2000      	movs	r0, #0
 800654a:	f7fe fcef 	bl	8004f2c <MGPIO_SetPinMode>
}
 800654e:	e032      	b.n	80065b6 <MCAL_SPI_GPIO_Set_Pins+0xea>
	}else if (SPIx == SPI2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <MCAL_SPI_GPIO_Set_Pins+0xfc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d12e      	bne.n	80065b6 <MCAL_SPI_GPIO_Set_Pins+0xea>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8006558:	4b1a      	ldr	r3, [pc, #104]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	2b04      	cmp	r3, #4
 8006560:	d115      	bne.n	800658e <MCAL_SPI_GPIO_Set_Pins+0xc2>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 8006562:	4b18      	ldr	r3, [pc, #96]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	899b      	ldrh	r3, [r3, #12]
 8006568:	2b04      	cmp	r3, #4
 800656a:	d105      	bne.n	8006578 <MCAL_SPI_GPIO_Set_Pins+0xac>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800656c:	2209      	movs	r2, #9
 800656e:	210c      	movs	r1, #12
 8006570:	2001      	movs	r0, #1
 8006572:	f7fe fcdb 	bl	8004f2c <MGPIO_SetPinMode>
				break ;
 8006576:	bf00      	nop
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006578:	2209      	movs	r2, #9
 800657a:	210d      	movs	r1, #13
 800657c:	2001      	movs	r0, #1
 800657e:	f7fe fcd5 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006582:	2209      	movs	r2, #9
 8006584:	210f      	movs	r1, #15
 8006586:	2001      	movs	r0, #1
 8006588:	f7fe fcd0 	bl	8004f2c <MGPIO_SetPinMode>
}
 800658c:	e013      	b.n	80065b6 <MCAL_SPI_GPIO_Set_Pins+0xea>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	899b      	ldrh	r3, [r3, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <MCAL_SPI_GPIO_Set_Pins+0xd6>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_INPUT_FLOATING_MODE);
 8006598:	2204      	movs	r2, #4
 800659a:	210c      	movs	r1, #12
 800659c:	2001      	movs	r0, #1
 800659e:	f7fe fcc5 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_INPUT_FLOATING_MODE);
 80065a2:	2204      	movs	r2, #4
 80065a4:	210d      	movs	r1, #13
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7fe fcc0 	bl	8004f2c <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80065ac:	2209      	movs	r2, #9
 80065ae:	210f      	movs	r1, #15
 80065b0:	2001      	movs	r0, #1
 80065b2:	f7fe fcbb 	bl	8004f2c <MGPIO_SetPinMode>
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40013000 	.word	0x40013000
 80065c4:	20000810 	.word	0x20000810
 80065c8:	40003800 	.word	0x40003800

080065cc <STK_uint8CalculateReloadValue>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValue(uint32 Copy_uint32msTime, uint32* P_uint32ReloadValue)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d014      	beq.n	800660a <STK_uint8CalculateReloadValue+0x3e>
    {
        uint32 Loc_uint32ReloadValue = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32msTime * (STK_AHB_CLOCK_FREQUENCY / 8000)));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = ((Copy_uint32msTime* STK_AHB_CLOCK_FREQUENCY) / 1000);
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065f6:	d205      	bcs.n	8006604 <STK_uint8CalculateReloadValue+0x38>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	e004      	b.n	800660e <STK_uint8CalculateReloadValue+0x42>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e001      	b.n	800660e <STK_uint8CalculateReloadValue+0x42>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <STK_uint8CalculateReloadValueUs>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValueUs(uint32 Copy_uint32usTime, uint32* P_uint32ReloadValue)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d010      	beq.n	8006650 <STK_uint8CalculateReloadValueUs+0x36>
    {
        uint32 Loc_uint32ReloadValue = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32usTime * (STK_AHB_CLOCK_FREQUENCY / 8000000)));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = (Copy_uint32usTime * (STK_AHB_CLOCK_FREQUENCY / 1000000));
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800663c:	d205      	bcs.n	800664a <STK_uint8CalculateReloadValueUs+0x30>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e004      	b.n	8006654 <STK_uint8CalculateReloadValueUs+0x3a>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 800664a:	2301      	movs	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	e001      	b.n	8006654 <STK_uint8CalculateReloadValueUs+0x3a>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <MSTK_uint8Init>:
 * @return Std_ReturnType
 * @retval E_OK: SysTick Timer is Successfully initialized
 * @retval E_NOT_OK: SysTick Timer is not initialized 
 */
Std_ReturnType MSTK_uint8Init(void)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006666:	2301      	movs	r3, #1
 8006668:	71fb      	strb	r3, [r7, #7]
    /*Initialize value of LOAD and VAL register "To make sure that there is no value in it"*/
    STK -> LOAD = 0x000000;
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <MSTK_uint8Init+0x40>)
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
    STK -> VAL = 0x000000;
 8006670:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <MSTK_uint8Init+0x40>)
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]

    #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
        CLR_BIT((STK -> CTRL), STK_CTRL_CLKSOURCE);
 8006676:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <MSTK_uint8Init+0x40>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a09      	ldr	r2, [pc, #36]	@ (80066a0 <MSTK_uint8Init+0x40>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6013      	str	r3, [r2, #0]
    #endif /*STK_CLOCK_SOURCE*/

    #if STK_INTERRUPT_STATUS == STK_INTERRUPT_ENABLED
        SET_BIT((STK -> CTRL), STK_CTRL_TICKINT);
    #elif STK_INTERRUPT_STATUS == STK_INTERRUPT_DISABLED
        CLR_BIT((STK -> CTRL), STK_CTRL_TICKINT);
 8006682:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <MSTK_uint8Init+0x40>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a06      	ldr	r2, [pc, #24]	@ (80066a0 <MSTK_uint8Init+0x40>)
 8006688:	f023 0302 	bic.w	r3, r3, #2
 800668c:	6013      	str	r3, [r2, #0]
    #else
        #error "Systick Timer Interrupt Status is not Identified"
    #endif /*STK_INTERRUPT_STATUS*/

    Loc_uint8FuncStatus = E_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8006692:	79fb      	ldrb	r3, [r7, #7]
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e010 	.word	0xe000e010

080066a4 <MSTK_uint8Delay>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8Delay(uint32 Copy_uint32msTime)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValue(Copy_uint32msTime, &Loc_uint32ReloadValue);
 80066b4:	f107 0308 	add.w	r3, r7, #8
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff ff86 	bl	80065cc <STK_uint8CalculateReloadValue>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d127      	bne.n	800671a <MSTK_uint8Delay+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80066ca:	4b17      	ldr	r3, [pc, #92]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 80066d6:	4b14      	ldr	r3, [pc, #80]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 80066dc:	4a12      	ldr	r2, [pc, #72]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80066e2:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a10      	ldr	r2, [pc, #64]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 80066ee:	bf00      	nop
 80066f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0f9      	beq.n	80066f0 <MSTK_uint8Delay+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <MSTK_uint8Delay+0x84>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a09      	ldr	r2, [pc, #36]	@ (8006728 <MSTK_uint8Delay+0x84>)
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 8006708:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <MSTK_uint8Delay+0x84>)
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 800670e:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <MSTK_uint8Delay+0x84>)
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
 8006718:	e001      	b.n	800671e <MSTK_uint8Delay+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000e010 	.word	0xe000e010

0800672c <MSTK_uint8DelayUs>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8DelayUs(uint32 Copy_uint32usTime)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValueUs(Copy_uint32usTime, &Loc_uint32ReloadValue);
 800673c:	f107 0308 	add.w	r3, r7, #8
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ff69 	bl	800661a <STK_uint8CalculateReloadValueUs>
 8006748:	4603      	mov	r3, r0
 800674a:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d127      	bne.n	80067a2 <MSTK_uint8DelayUs+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a16      	ldr	r2, [pc, #88]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 800675e:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 8006764:	4a12      	ldr	r2, [pc, #72]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 800676a:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a10      	ldr	r2, [pc, #64]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 8006776:	bf00      	nop
 8006778:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f9      	beq.n	8006778 <MSTK_uint8DelayUs+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006784:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a09      	ldr	r2, [pc, #36]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 8006790:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 8006796:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <MSTK_uint8DelayUs+0x84>)
 8006798:	2200      	movs	r2, #0
 800679a:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e001      	b.n	80067a6 <MSTK_uint8DelayUs+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	e000e010 	.word	0xe000e010

080067b4 <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 80067b8:	4b04      	ldr	r3, [pc, #16]	@ (80067cc <SysTick_Handler+0x18>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 80067c0:	4b02      	ldr	r3, [pc, #8]	@ (80067cc <SysTick_Handler+0x18>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000848 	.word	0x20000848

080067d0 <MUART_Init>:
 * @return Std_ReturnType
 * @retval E_OK:        UART Peripheral is successfully initialized
 * @retval E_NOT_OK:    UART Peripheral is not initialized
 */
Std_ReturnType MUART_Init(MUART_Select_t Copy_UARTChoice)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80067da:	2301      	movs	r3, #1
 80067dc:	74fb      	strb	r3, [r7, #19]
    
    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_M_BIT);
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	4a61      	ldr	r2, [pc, #388]	@ (8006968 <MUART_Init+0x198>)
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	495f      	ldr	r1, [pc, #380]	@ (8006968 <MUART_Init+0x198>)
 80067ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80067f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067f4:	60da      	str	r2, [r3, #12]
    #else
        #error "UART No of Data Bits is not Specified Correctly"
    #endif /*MUART_NO_OF_DATA_BITS*/

    #if MUART_PARITY_CHOICE == MUART_NO_PARITY
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PCE_BIT);
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	4a5b      	ldr	r2, [pc, #364]	@ (8006968 <MUART_Init+0x198>)
 80067fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	4959      	ldr	r1, [pc, #356]	@ (8006968 <MUART_Init+0x198>)
 8006804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800680c:	60da      	str	r2, [r3, #12]
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PS_BIT);
    #else
        #error "UART Parity Control not Specified"
    #endif

    ((UART[Copy_UARTChoice]) -> CR2) &= ~(((uint32) 0b11) << MUART_CR2_STOP_START_BIT);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	4a55      	ldr	r2, [pc, #340]	@ (8006968 <MUART_Init+0x198>)
 8006812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	4953      	ldr	r1, [pc, #332]	@ (8006968 <MUART_Init+0x198>)
 800681c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006820:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006824:	611a      	str	r2, [r3, #16]
    
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
        ((UART[Copy_UARTChoice]) -> CR2) |= (((uint32) MUART_NO_OF_STOP_BITS) << MUART_CR2_STOP_START_BIT);
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	4a4f      	ldr	r2, [pc, #316]	@ (8006968 <MUART_Init+0x198>)
 800682a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	494d      	ldr	r1, [pc, #308]	@ (8006968 <MUART_Init+0x198>)
 8006832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006836:	6912      	ldr	r2, [r2, #16]
 8006838:	611a      	str	r2, [r3, #16]
    #endif /*MUART_NO_OF_STOP_BITS*/

    #if MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
    #elif MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_DISABLED
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	4a4a      	ldr	r2, [pc, #296]	@ (8006968 <MUART_Init+0x198>)
 800683e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4948      	ldr	r1, [pc, #288]	@ (8006968 <MUART_Init+0x198>)
 8006848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800684c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006850:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Tx Complete Interrupt Status not Specified"
    #endif /*MUART_TX_COMPLETE_INT_STATUS*/

    #if MUART_RX_COMPLETE_INT_STATUS == MUART_RX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RXNEIE_BIT);
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	4a44      	ldr	r2, [pc, #272]	@ (8006968 <MUART_Init+0x198>)
 8006856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	4942      	ldr	r1, [pc, #264]	@ (8006968 <MUART_Init+0x198>)
 8006860:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006864:	f042 0220 	orr.w	r2, r2, #32
 8006868:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Rx Complete Interrupt Status not Specified"
    #endif /*MUART_RX_COMPLETE_INT_STATUS*/
    
    /********************Calculate Baud Rate**************************/
    float32 Loc_float32UARTDIV = (float32)MUART_CLK_FREQ / (16 * MUART_BAUD_RATE);
 800686a:	4b40      	ldr	r3, [pc, #256]	@ (800696c <MUART_Init+0x19c>)
 800686c:	60fb      	str	r3, [r7, #12]

    uint16 Loc_uint16Mantissa = (uint16)Loc_float32UARTDIV;
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7fa fc66 	bl	8001140 <__aeabi_f2uiz>
 8006874:	4603      	mov	r3, r0
 8006876:	82fb      	strh	r3, [r7, #22]
    uint16 Loc_uint16Fraction = (uint16)(((Loc_float32UARTDIV - Loc_uint16Mantissa) * 16) + 0.5);
 8006878:	8afb      	ldrh	r3, [r7, #22]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fa fa20 	bl	8000cc0 <__aeabi_i2f>
 8006880:	4603      	mov	r3, r0
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7fa f965 	bl	8000b54 <__aeabi_fsub>
 800688a:	4603      	mov	r3, r0
 800688c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8006890:	4618      	mov	r0, r3
 8006892:	f7fa fa69 	bl	8000d68 <__aeabi_fmul>
 8006896:	4603      	mov	r3, r0
 8006898:	4618      	mov	r0, r3
 800689a:	f7f9 fddf 	bl	800045c <__aeabi_f2d>
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	4b33      	ldr	r3, [pc, #204]	@ (8006970 <MUART_Init+0x1a0>)
 80068a4:	f7f9 fc7c 	bl	80001a0 <__adddf3>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	f7fa f8dc 	bl	8000a6c <__aeabi_d2uiz>
 80068b4:	4603      	mov	r3, r0
 80068b6:	82bb      	strh	r3, [r7, #20]

    if(Loc_uint16Fraction >= 16)
 80068b8:	8abb      	ldrh	r3, [r7, #20]
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	d905      	bls.n	80068ca <MUART_Init+0xfa>
    {
        Loc_uint16Fraction -= 16;
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	3b10      	subs	r3, #16
 80068c2:	82bb      	strh	r3, [r7, #20]
        Loc_uint16Mantissa += 1;
 80068c4:	8afb      	ldrh	r3, [r7, #22]
 80068c6:	3301      	adds	r3, #1
 80068c8:	82fb      	strh	r3, [r7, #22]
    }
    ((UART[Copy_UARTChoice]) -> BRR) = (Loc_uint16Fraction << MUART_BRR_FRACTION_START_BIT) | (Loc_uint16Mantissa << MUART_BRR_MANTISSA_START_BIT);
 80068ca:	8aba      	ldrh	r2, [r7, #20]
 80068cc:	8afb      	ldrh	r3, [r7, #22]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	ea42 0103 	orr.w	r1, r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	4a24      	ldr	r2, [pc, #144]	@ (8006968 <MUART_Init+0x198>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	460a      	mov	r2, r1
 80068de:	609a      	str	r2, [r3, #8]

    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TE_BIT);
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	4a21      	ldr	r2, [pc, #132]	@ (8006968 <MUART_Init+0x198>)
 80068e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	491e      	ldr	r1, [pc, #120]	@ (8006968 <MUART_Init+0x198>)
 80068ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RE_BIT);
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006968 <MUART_Init+0x198>)
 80068fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	4918      	ldr	r1, [pc, #96]	@ (8006968 <MUART_Init+0x198>)
 8006906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800690a:	f042 0204 	orr.w	r2, r2, #4
 800690e:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_UE_BIT);
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	4a15      	ldr	r2, [pc, #84]	@ (8006968 <MUART_Init+0x198>)
 8006914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	4912      	ldr	r1, [pc, #72]	@ (8006968 <MUART_Init+0x198>)
 800691e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006922:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006926:	60da      	str	r2, [r3, #12]
		
	CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	4a0f      	ldr	r2, [pc, #60]	@ (8006968 <MUART_Init+0x198>)
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	490c      	ldr	r1, [pc, #48]	@ (8006968 <MUART_Init+0x198>)
 8006936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800693a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693e:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <MUART_Init+0x198>)
 8006944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	4906      	ldr	r1, [pc, #24]	@ (8006968 <MUART_Init+0x198>)
 800694e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006952:	f022 0220 	bic.w	r2, r2, #32
 8006956:	601a      	str	r2, [r3, #0]
    Loc_uint8FuncStatus = E_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	74fb      	strb	r3, [r7, #19]
    return Loc_uint8FuncStatus;
 800695c:	7cfb      	ldrb	r3, [r7, #19]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	200003cc 	.word	0x200003cc
 800696c:	408ae38e 	.word	0x408ae38e
 8006970:	3fe00000 	.word	0x3fe00000

08006974 <MUART_TxChar>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully sent
 * @retval E_NOT_OK:    Character not sent 
 */
Std_ReturnType MUART_TxChar(MUART_Select_t Copy_UARTChoice, uint16 Copy_uint16TxChar)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	460a      	mov	r2, r1
 800697e:	71fb      	strb	r3, [r7, #7]
 8006980:	4613      	mov	r3, r2
 8006982:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
    /*Wait until Tx Data Register is empty*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
 8006988:	bf00      	nop
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	4a16      	ldr	r2, [pc, #88]	@ (80069e8 <MUART_TxChar+0x74>)
 800698e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f6      	beq.n	800698a <MUART_TxChar+0x16>

    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        (UART[Copy_UARTChoice] -> DR) = Copy_uint16TxChar & ((uint16)(0x00FF));
 800699c:	88b9      	ldrh	r1, [r7, #4]
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <MUART_TxChar+0x74>)
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	b2ca      	uxtb	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
    #else
        #error "UART Number of Data Bits not Specified"
    #endif /*MUART_NO_OF_DATA_BITS*/
    
    /*Wait while transmit is complete*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TC_BIT)));
 80069aa:	bf00      	nop
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	4a0e      	ldr	r2, [pc, #56]	@ (80069e8 <MUART_TxChar+0x74>)
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f6      	beq.n	80069ac <MUART_TxChar+0x38>
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <MUART_TxChar+0x74>)
 80069c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	4907      	ldr	r1, [pc, #28]	@ (80069e8 <MUART_TxChar+0x74>)
 80069cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d4:	601a      	str	r2, [r3, #0]

    Loc_uint8FuncStatus = E_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	200003cc 	.word	0x200003cc

080069ec <MUART_RxCharAsynchronous>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully received
 * @retval E_NOT_OK:    Character not received 
 */
Std_ReturnType MUART_RxCharAsynchronous(MUART_Select_t Copy_UARTChoice, uint16* P_uint16RxChar)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	6039      	str	r1, [r7, #0]
 80069f6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
    if(P_uint16RxChar != NULL_PTR)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <MUART_RxCharAsynchronous+0x48>
    {
        #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
            #if MUART_PARITY_CHOICE == MUART_NO_PARITY
                *P_uint16RxChar = (((UART[Copy_UARTChoice]) -> DR) & (uint16)(0xFF));
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4a0f      	ldr	r2, [pc, #60]	@ (8006a44 <MUART_RxCharAsynchronous+0x58>)
 8006a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	801a      	strh	r2, [r3, #0]
                #error "UART Parity Choice is not specified"
            #endif /*MUART_PARITY_CHOICE*/
        #else
            #error "UART Number of Data Bits not Specified"
        #endif /*MUART_NO_OF_DATA_BITS*/
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	4a0a      	ldr	r2, [pc, #40]	@ (8006a44 <MUART_RxCharAsynchronous+0x58>)
 8006a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	4908      	ldr	r1, [pc, #32]	@ (8006a44 <MUART_RxCharAsynchronous+0x58>)
 8006a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a28:	f022 0220 	bic.w	r2, r2, #32
 8006a2c:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
 8006a32:	e001      	b.n	8006a38 <MUART_RxCharAsynchronous+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	200003cc 	.word	0x200003cc

08006a48 <MUART_TxString>:
 * @return Std_ReturnType
 * @retval E_OK:        String successfully received
 * @retval E_NOT_OK:    String not received 
 */
Std_ReturnType MUART_TxString(MUART_Select_t Copy_UARTChoice, uint8* P_uint8TxString)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
    if(P_uint8TxString != NULL_PTR)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <MUART_TxString+0x48>
    {
        uint8 Loc_uint8Index = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006a62:	e00c      	b.n	8006a7e <MUART_TxString+0x36>
        {
            MUART_TxChar(Copy_UARTChoice, P_uint8TxString[Loc_uint8Index]);
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff ff7e 	bl	8006974 <MUART_TxChar>
            Loc_uint8Index++;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	4413      	add	r3, r2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ec      	bne.n	8006a64 <MUART_TxString+0x1c>
        }
        Loc_uint8FuncStatus = E_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e001      	b.n	8006a94 <MUART_TxString+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <MUART_SetRxCompleteCallback>:
 * @return Std_ReturnType
 * @retval E_OK:        Callback Function successfully set
 * @retval E_NOT_OK:    Callback function not set  
 */
Std_ReturnType MUART_SetRxCompleteCallback(MUART_Select_t Copy_UARTChoice, ptr_to_Callback P_RxCompleteCallbackFunc)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006aac:	2301      	movs	r3, #1
 8006aae:	73fb      	strb	r3, [r7, #15]
    if(P_RxCompleteCallbackFunc != NULL_PTR)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <MUART_SetRxCompleteCallback+0x26>
    {
        Loc_uint8FuncStatus = E_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
        Glbl_PRxCompleteFunc[Copy_UARTChoice] = P_RxCompleteCallbackFunc;
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	4906      	ldr	r1, [pc, #24]	@ (8006ad8 <MUART_SetRxCompleteCallback+0x38>)
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ac4:	e001      	b.n	8006aca <MUART_SetRxCompleteCallback+0x2a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000084c 	.word	0x2000084c

08006adc <MUART_SendIntegerValue>:

Std_ReturnType MUART_SendIntegerValue(MUART_Select_t Copy_UARTChoice, uint32 Copy_uint32Value)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	@ 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if(Copy_uint32Value == 0)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d109      	bne.n	8006b08 <MUART_SendIntegerValue+0x2c>
    {
        MUART_TxChar(Copy_UARTChoice, (Copy_uint32Value + 48));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3330      	adds	r3, #48	@ 0x30
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff ff37 	bl	8006974 <MUART_TxChar>
 8006b06:	e051      	b.n	8006bac <MUART_SendIntegerValue+0xd0>
    }
    else
    {
        uint32 Loc_uint8TempValue = Copy_uint32Value;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8 Loc_uint8CharArray[20] = {0},Loc_uint8Count = 0, Loc_uint8Index = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	f107 0310 	add.w	r3, r7, #16
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while(Loc_uint8TempValue != 0)
 8006b2a:	e01d      	b.n	8006b68 <MUART_SendIntegerValue+0x8c>
        {
            Loc_uint8CharArray[Loc_uint8Count] = ((Loc_uint8TempValue % 10) + 48);
 8006b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b2e:	4b24      	ldr	r3, [pc, #144]	@ (8006bc0 <MUART_SendIntegerValue+0xe4>)
 8006b30:	fba3 2301 	umull	r2, r3, r3, r1
 8006b34:	08da      	lsrs	r2, r3, #3
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	1aca      	subs	r2, r1, r3
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b46:	3230      	adds	r2, #48	@ 0x30
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	443b      	add	r3, r7
 8006b4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            Loc_uint8TempValue /= 10;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc0 <MUART_SendIntegerValue+0xe4>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	08db      	lsrs	r3, r3, #3
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
            Loc_uint8Count++;
 8006b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b62:	3301      	adds	r3, #1
 8006b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        while(Loc_uint8TempValue != 0)
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1de      	bne.n	8006b2c <MUART_SendIntegerValue+0x50>
        }
        
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b74:	e014      	b.n	8006ba0 <MUART_SendIntegerValue+0xc4>
        {
            MUART_TxChar(Copy_UARTChoice, Loc_uint8CharArray[Loc_uint8Count - Loc_uint8Index - 1]);
 8006b76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006b7a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	3328      	adds	r3, #40	@ 0x28
 8006b84:	443b      	add	r3, r7
 8006b86:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff feef 	bl	8006974 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006b96:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ba0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d3e4      	bcc.n	8006b76 <MUART_SendIntegerValue+0x9a>
        }
    }

    Loc_uint8FuncStatus = E_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    return Loc_uint8FuncStatus;
 8006bb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	@ 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	cccccccd 	.word	0xcccccccd

08006bc4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[0] != NULL_PTR)
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <USART1_IRQHandler+0x38>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <USART1_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[0])();
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <USART1_IRQHandler+0x38>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <USART1_IRQHandler+0x3c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b08      	ldr	r3, [pc, #32]	@ (8006c00 <USART1_IRQHandler+0x3c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be4:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
 8006be6:	4b06      	ldr	r3, [pc, #24]	@ (8006c00 <USART1_IRQHandler+0x3c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <USART1_IRQHandler+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0220 	bic.w	r2, r2, #32
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	2000084c 	.word	0x2000084c
 8006c00:	200003cc 	.word	0x200003cc

08006c04 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
	if(Glbl_PRxCompleteFunc[1] != NULL_PTR)
 8006c08:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <USART2_IRQHandler+0x38>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <USART2_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[1])();
 8006c10:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <USART2_IRQHandler+0x38>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <USART2_IRQHandler+0x3c>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <USART2_IRQHandler+0x3c>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c24:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
 8006c26:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <USART2_IRQHandler+0x3c>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <USART2_IRQHandler+0x3c>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f022 0220 	bic.w	r2, r2, #32
 8006c34:	601a      	str	r2, [r3, #0]

}
 8006c36:	bf00      	nop
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000084c 	.word	0x2000084c
 8006c40:	200003cc 	.word	0x200003cc

08006c44 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[2] != NULL_PTR)
 8006c48:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <USART3_IRQHandler+0x38>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <USART3_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[2])();
 8006c50:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <USART3_IRQHandler+0x38>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <USART3_IRQHandler+0x3c>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b08      	ldr	r3, [pc, #32]	@ (8006c80 <USART3_IRQHandler+0x3c>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c64:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <USART3_IRQHandler+0x3c>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b04      	ldr	r3, [pc, #16]	@ (8006c80 <USART3_IRQHandler+0x3c>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f022 0220 	bic.w	r2, r2, #32
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	bf00      	nop
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000084c 	.word	0x2000084c
 8006c80:	200003cc 	.word	0x200003cc

08006c84 <main>:
#include "APP/Signal_Conditioning/signal_conditioning.h"
#include "APP/SpectroStatus/SpectroStatus_Interface.h"


int main(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0

	//HMOTOR_GoHome(HMOTOR_WL_SELECT);
	//HMOTOR_GoHome(HMOTOR_LAMP_SELECT);


	SPECTRO_InitSystem();
 8006c88:	f7fb fba2 	bl	80023d0 <SPECTRO_InitSystem>
	//			max_index = Loc_uint32Index;
	//		}
	//	}

	//HMOTOR_Step(HMOTOR_WL_SELECT, 500, HMOTORS_CCLKWISE_DIRECTION, 10);
	while(1)
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <main+0x8>

08006c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return 1;
 8006c94:	2301      	movs	r3, #1
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <_kill>:

int _kill(int pid, int sig)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006ca8:	f001 ffaa 	bl	8008c00 <__errno>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2216      	movs	r2, #22
 8006cb0:	601a      	str	r2, [r3, #0]
  return -1;
 8006cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <_exit>:

void _exit (int status)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffe7 	bl	8006c9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8006cd0:	bf00      	nop
 8006cd2:	e7fd      	b.n	8006cd0 <_exit+0x12>

08006cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e00a      	b.n	8006cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ce6:	f3af 8000 	nop.w
 8006cea:	4601      	mov	r1, r0
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	60ba      	str	r2, [r7, #8]
 8006cf2:	b2ca      	uxtb	r2, r1
 8006cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	dbf0      	blt.n	8006ce6 <_read+0x12>
  }

  return len;
 8006d04:	687b      	ldr	r3, [r7, #4]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e009      	b.n	8006d34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	60ba      	str	r2, [r7, #8]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	3301      	adds	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	dbf1      	blt.n	8006d20 <_write+0x12>
  }
  return len;
 8006d3c:	687b      	ldr	r3, [r7, #4]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <_close>:

int _close(int file)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d6c:	605a      	str	r2, [r3, #4]
  return 0;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <_isatty>:

int _isatty(int file)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006d82:	2301      	movs	r3, #1
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr
	...

08006da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006db0:	4a14      	ldr	r2, [pc, #80]	@ (8006e04 <_sbrk+0x5c>)
 8006db2:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <_sbrk+0x60>)
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006dbc:	4b13      	ldr	r3, [pc, #76]	@ (8006e0c <_sbrk+0x64>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006dc4:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <_sbrk+0x64>)
 8006dc6:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <_sbrk+0x68>)
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dca:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <_sbrk+0x64>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d207      	bcs.n	8006de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dd8:	f001 ff12 	bl	8008c00 <__errno>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	220c      	movs	r2, #12
 8006de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	e009      	b.n	8006dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006de8:	4b08      	ldr	r3, [pc, #32]	@ (8006e0c <_sbrk+0x64>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006dee:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <_sbrk+0x64>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a05      	ldr	r2, [pc, #20]	@ (8006e0c <_sbrk+0x64>)
 8006df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20005000 	.word	0x20005000
 8006e08:	00000400 	.word	0x00000400
 8006e0c:	2000085c 	.word	0x2000085c
 8006e10:	200009d0 	.word	0x200009d0

08006e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e14:	480d      	ldr	r0, [pc, #52]	@ (8006e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e1c:	480c      	ldr	r0, [pc, #48]	@ (8006e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e1e:	490d      	ldr	r1, [pc, #52]	@ (8006e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e20:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <LoopForever+0xe>)
  movs r3, #0
 8006e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e24:	e002      	b.n	8006e2c <LoopCopyDataInit>

08006e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e2a:	3304      	adds	r3, #4

08006e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e30:	d3f9      	bcc.n	8006e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e32:	4a0a      	ldr	r2, [pc, #40]	@ (8006e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e34:	4c0a      	ldr	r4, [pc, #40]	@ (8006e60 <LoopForever+0x16>)
  movs r3, #0
 8006e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e38:	e001      	b.n	8006e3e <LoopFillZerobss>

08006e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e3c:	3204      	adds	r2, #4

08006e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e40:	d3fb      	bcc.n	8006e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006e42:	f001 fee3 	bl	8008c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e46:	f7ff ff1d 	bl	8006c84 <main>

08006e4a <LoopForever>:

LoopForever:
  b LoopForever
 8006e4a:	e7fe      	b.n	8006e4a <LoopForever>
  ldr   r0, =_estack
 8006e4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e54:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 8006e58:	0800c928 	.word	0x0800c928
  ldr r2, =_sbss
 8006e5c:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 8006e60:	200009d0 	.word	0x200009d0

08006e64 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e64:	e7fe      	b.n	8006e64 <ADC3_IRQHandler>

08006e66 <atof>:
 8006e66:	2100      	movs	r1, #0
 8006e68:	f000 bdfe 	b.w	8007a68 <strtod>

08006e6c <atoi>:
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f000 be82 	b.w	8007b78 <strtol>

08006e74 <sulp>:
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	460f      	mov	r7, r1
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	f002 ff3a 	bl	8009cf4 <__ulp>
 8006e80:	4604      	mov	r4, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	f1b8 0f00 	cmp.w	r8, #0
 8006e88:	d011      	beq.n	8006eae <sulp+0x3a>
 8006e8a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006e8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd0b      	ble.n	8006eae <sulp+0x3a>
 8006e96:	2400      	movs	r4, #0
 8006e98:	051b      	lsls	r3, r3, #20
 8006e9a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	f7f9 fb31 	bl	800050c <__aeabi_dmul>
 8006eaa:	4604      	mov	r4, r0
 8006eac:	460d      	mov	r5, r1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006eb8 <_strtod_l>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	b09f      	sub	sp, #124	@ 0x7c
 8006ebe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006ec6:	f04f 0a00 	mov.w	sl, #0
 8006eca:	f04f 0b00 	mov.w	fp, #0
 8006ece:	460a      	mov	r2, r1
 8006ed0:	9005      	str	r0, [sp, #20]
 8006ed2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ed4:	7811      	ldrb	r1, [r2, #0]
 8006ed6:	292b      	cmp	r1, #43	@ 0x2b
 8006ed8:	d048      	beq.n	8006f6c <_strtod_l+0xb4>
 8006eda:	d836      	bhi.n	8006f4a <_strtod_l+0x92>
 8006edc:	290d      	cmp	r1, #13
 8006ede:	d830      	bhi.n	8006f42 <_strtod_l+0x8a>
 8006ee0:	2908      	cmp	r1, #8
 8006ee2:	d830      	bhi.n	8006f46 <_strtod_l+0x8e>
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d039      	beq.n	8006f5c <_strtod_l+0xa4>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006eec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006eee:	782a      	ldrb	r2, [r5, #0]
 8006ef0:	2a30      	cmp	r2, #48	@ 0x30
 8006ef2:	f040 80b1 	bne.w	8007058 <_strtod_l+0x1a0>
 8006ef6:	786a      	ldrb	r2, [r5, #1]
 8006ef8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006efc:	2a58      	cmp	r2, #88	@ 0x58
 8006efe:	d16c      	bne.n	8006fda <_strtod_l+0x122>
 8006f00:	9302      	str	r3, [sp, #8]
 8006f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f04:	4a8e      	ldr	r2, [pc, #568]	@ (8007140 <_strtod_l+0x288>)
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	9805      	ldr	r0, [sp, #20]
 8006f0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f10:	a919      	add	r1, sp, #100	@ 0x64
 8006f12:	f001 ff97 	bl	8008e44 <__gethex>
 8006f16:	f010 060f 	ands.w	r6, r0, #15
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	d005      	beq.n	8006f2a <_strtod_l+0x72>
 8006f1e:	2e06      	cmp	r6, #6
 8006f20:	d126      	bne.n	8006f70 <_strtod_l+0xb8>
 8006f22:	2300      	movs	r3, #0
 8006f24:	3501      	adds	r5, #1
 8006f26:	9519      	str	r5, [sp, #100]	@ 0x64
 8006f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8584 	bne.w	8007a3a <_strtod_l+0xb82>
 8006f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f34:	b1bb      	cbz	r3, 8006f66 <_strtod_l+0xae>
 8006f36:	4650      	mov	r0, sl
 8006f38:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006f3c:	b01f      	add	sp, #124	@ 0x7c
 8006f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f42:	2920      	cmp	r1, #32
 8006f44:	d1d0      	bne.n	8006ee8 <_strtod_l+0x30>
 8006f46:	3201      	adds	r2, #1
 8006f48:	e7c3      	b.n	8006ed2 <_strtod_l+0x1a>
 8006f4a:	292d      	cmp	r1, #45	@ 0x2d
 8006f4c:	d1cc      	bne.n	8006ee8 <_strtod_l+0x30>
 8006f4e:	2101      	movs	r1, #1
 8006f50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f52:	1c51      	adds	r1, r2, #1
 8006f54:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f56:	7852      	ldrb	r2, [r2, #1]
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	d1c7      	bne.n	8006eec <_strtod_l+0x34>
 8006f5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f5e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8568 	bne.w	8007a36 <_strtod_l+0xb7e>
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	e7e7      	b.n	8006f3c <_strtod_l+0x84>
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	e7ef      	b.n	8006f50 <_strtod_l+0x98>
 8006f70:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f72:	b13a      	cbz	r2, 8006f84 <_strtod_l+0xcc>
 8006f74:	2135      	movs	r1, #53	@ 0x35
 8006f76:	a81c      	add	r0, sp, #112	@ 0x70
 8006f78:	f002 ffac 	bl	8009ed4 <__copybits>
 8006f7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f7e:	9805      	ldr	r0, [sp, #20]
 8006f80:	f002 fb86 	bl	8009690 <_Bfree>
 8006f84:	3e01      	subs	r6, #1
 8006f86:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f88:	2e04      	cmp	r6, #4
 8006f8a:	d806      	bhi.n	8006f9a <_strtod_l+0xe2>
 8006f8c:	e8df f006 	tbb	[pc, r6]
 8006f90:	201d0314 	.word	0x201d0314
 8006f94:	14          	.byte	0x14
 8006f95:	00          	.byte	0x00
 8006f96:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f9a:	05e1      	lsls	r1, r4, #23
 8006f9c:	bf48      	it	mi
 8006f9e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006fa2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fa6:	0d1b      	lsrs	r3, r3, #20
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1bd      	bne.n	8006f2a <_strtod_l+0x72>
 8006fae:	f001 fe27 	bl	8008c00 <__errno>
 8006fb2:	2322      	movs	r3, #34	@ 0x22
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	e7b8      	b.n	8006f2a <_strtod_l+0x72>
 8006fb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006fbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006fc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fc4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fc8:	e7e7      	b.n	8006f9a <_strtod_l+0xe2>
 8006fca:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007144 <_strtod_l+0x28c>
 8006fce:	e7e4      	b.n	8006f9a <_strtod_l+0xe2>
 8006fd0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006fd4:	f04f 3aff 	mov.w	sl, #4294967295
 8006fd8:	e7df      	b.n	8006f9a <_strtod_l+0xe2>
 8006fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b30      	cmp	r3, #48	@ 0x30
 8006fe4:	d0f9      	beq.n	8006fda <_strtod_l+0x122>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d09f      	beq.n	8006f2a <_strtod_l+0x72>
 8006fea:	2301      	movs	r3, #1
 8006fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	461f      	mov	r7, r3
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006ffe:	7805      	ldrb	r5, [r0, #0]
 8007000:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007004:	b2d9      	uxtb	r1, r3
 8007006:	2909      	cmp	r1, #9
 8007008:	d928      	bls.n	800705c <_strtod_l+0x1a4>
 800700a:	2201      	movs	r2, #1
 800700c:	494e      	ldr	r1, [pc, #312]	@ (8007148 <_strtod_l+0x290>)
 800700e:	f000 fecc 	bl	8007daa <strncmp>
 8007012:	2800      	cmp	r0, #0
 8007014:	d032      	beq.n	800707c <_strtod_l+0x1c4>
 8007016:	2000      	movs	r0, #0
 8007018:	462a      	mov	r2, r5
 800701a:	4681      	mov	r9, r0
 800701c:	463d      	mov	r5, r7
 800701e:	4603      	mov	r3, r0
 8007020:	2a65      	cmp	r2, #101	@ 0x65
 8007022:	d001      	beq.n	8007028 <_strtod_l+0x170>
 8007024:	2a45      	cmp	r2, #69	@ 0x45
 8007026:	d114      	bne.n	8007052 <_strtod_l+0x19a>
 8007028:	b91d      	cbnz	r5, 8007032 <_strtod_l+0x17a>
 800702a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800702c:	4302      	orrs	r2, r0
 800702e:	d095      	beq.n	8006f5c <_strtod_l+0xa4>
 8007030:	2500      	movs	r5, #0
 8007032:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007034:	1c62      	adds	r2, r4, #1
 8007036:	9219      	str	r2, [sp, #100]	@ 0x64
 8007038:	7862      	ldrb	r2, [r4, #1]
 800703a:	2a2b      	cmp	r2, #43	@ 0x2b
 800703c:	d077      	beq.n	800712e <_strtod_l+0x276>
 800703e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007040:	d07b      	beq.n	800713a <_strtod_l+0x282>
 8007042:	f04f 0c00 	mov.w	ip, #0
 8007046:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800704a:	2909      	cmp	r1, #9
 800704c:	f240 8082 	bls.w	8007154 <_strtod_l+0x29c>
 8007050:	9419      	str	r4, [sp, #100]	@ 0x64
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	e0a2      	b.n	800719e <_strtod_l+0x2e6>
 8007058:	2300      	movs	r3, #0
 800705a:	e7c7      	b.n	8006fec <_strtod_l+0x134>
 800705c:	2f08      	cmp	r7, #8
 800705e:	bfd5      	itete	le
 8007060:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007062:	9908      	ldrgt	r1, [sp, #32]
 8007064:	fb02 3301 	mlale	r3, r2, r1, r3
 8007068:	fb02 3301 	mlagt	r3, r2, r1, r3
 800706c:	f100 0001 	add.w	r0, r0, #1
 8007070:	bfd4      	ite	le
 8007072:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007074:	9308      	strgt	r3, [sp, #32]
 8007076:	3701      	adds	r7, #1
 8007078:	9019      	str	r0, [sp, #100]	@ 0x64
 800707a:	e7bf      	b.n	8006ffc <_strtod_l+0x144>
 800707c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	9219      	str	r2, [sp, #100]	@ 0x64
 8007082:	785a      	ldrb	r2, [r3, #1]
 8007084:	b37f      	cbz	r7, 80070e6 <_strtod_l+0x22e>
 8007086:	4681      	mov	r9, r0
 8007088:	463d      	mov	r5, r7
 800708a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800708e:	2b09      	cmp	r3, #9
 8007090:	d912      	bls.n	80070b8 <_strtod_l+0x200>
 8007092:	2301      	movs	r3, #1
 8007094:	e7c4      	b.n	8007020 <_strtod_l+0x168>
 8007096:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007098:	3001      	adds	r0, #1
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	9219      	str	r2, [sp, #100]	@ 0x64
 800709e:	785a      	ldrb	r2, [r3, #1]
 80070a0:	2a30      	cmp	r2, #48	@ 0x30
 80070a2:	d0f8      	beq.n	8007096 <_strtod_l+0x1de>
 80070a4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	f200 84cb 	bhi.w	8007a44 <_strtod_l+0xb8c>
 80070ae:	4681      	mov	r9, r0
 80070b0:	2000      	movs	r0, #0
 80070b2:	4605      	mov	r5, r0
 80070b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80070b8:	3a30      	subs	r2, #48	@ 0x30
 80070ba:	f100 0301 	add.w	r3, r0, #1
 80070be:	d02a      	beq.n	8007116 <_strtod_l+0x25e>
 80070c0:	4499      	add	r9, r3
 80070c2:	210a      	movs	r1, #10
 80070c4:	462b      	mov	r3, r5
 80070c6:	eb00 0c05 	add.w	ip, r0, r5
 80070ca:	4563      	cmp	r3, ip
 80070cc:	d10d      	bne.n	80070ea <_strtod_l+0x232>
 80070ce:	1c69      	adds	r1, r5, #1
 80070d0:	4401      	add	r1, r0
 80070d2:	4428      	add	r0, r5
 80070d4:	2808      	cmp	r0, #8
 80070d6:	dc16      	bgt.n	8007106 <_strtod_l+0x24e>
 80070d8:	230a      	movs	r3, #10
 80070da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070dc:	fb03 2300 	mla	r3, r3, r0, r2
 80070e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e2:	2300      	movs	r3, #0
 80070e4:	e018      	b.n	8007118 <_strtod_l+0x260>
 80070e6:	4638      	mov	r0, r7
 80070e8:	e7da      	b.n	80070a0 <_strtod_l+0x1e8>
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	f103 0301 	add.w	r3, r3, #1
 80070f0:	dc03      	bgt.n	80070fa <_strtod_l+0x242>
 80070f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070f4:	434e      	muls	r6, r1
 80070f6:	960a      	str	r6, [sp, #40]	@ 0x28
 80070f8:	e7e7      	b.n	80070ca <_strtod_l+0x212>
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	bfde      	ittt	le
 80070fe:	9e08      	ldrle	r6, [sp, #32]
 8007100:	434e      	mulle	r6, r1
 8007102:	9608      	strle	r6, [sp, #32]
 8007104:	e7e1      	b.n	80070ca <_strtod_l+0x212>
 8007106:	280f      	cmp	r0, #15
 8007108:	dceb      	bgt.n	80070e2 <_strtod_l+0x22a>
 800710a:	230a      	movs	r3, #10
 800710c:	9808      	ldr	r0, [sp, #32]
 800710e:	fb03 2300 	mla	r3, r3, r0, r2
 8007112:	9308      	str	r3, [sp, #32]
 8007114:	e7e5      	b.n	80070e2 <_strtod_l+0x22a>
 8007116:	4629      	mov	r1, r5
 8007118:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800711a:	460d      	mov	r5, r1
 800711c:	1c50      	adds	r0, r2, #1
 800711e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007120:	7852      	ldrb	r2, [r2, #1]
 8007122:	4618      	mov	r0, r3
 8007124:	e7b1      	b.n	800708a <_strtod_l+0x1d2>
 8007126:	f04f 0900 	mov.w	r9, #0
 800712a:	2301      	movs	r3, #1
 800712c:	e77d      	b.n	800702a <_strtod_l+0x172>
 800712e:	f04f 0c00 	mov.w	ip, #0
 8007132:	1ca2      	adds	r2, r4, #2
 8007134:	9219      	str	r2, [sp, #100]	@ 0x64
 8007136:	78a2      	ldrb	r2, [r4, #2]
 8007138:	e785      	b.n	8007046 <_strtod_l+0x18e>
 800713a:	f04f 0c01 	mov.w	ip, #1
 800713e:	e7f8      	b.n	8007132 <_strtod_l+0x27a>
 8007140:	0800c374 	.word	0x0800c374
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	0800c350 	.word	0x0800c350
 800714c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800714e:	1c51      	adds	r1, r2, #1
 8007150:	9119      	str	r1, [sp, #100]	@ 0x64
 8007152:	7852      	ldrb	r2, [r2, #1]
 8007154:	2a30      	cmp	r2, #48	@ 0x30
 8007156:	d0f9      	beq.n	800714c <_strtod_l+0x294>
 8007158:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800715c:	2908      	cmp	r1, #8
 800715e:	f63f af78 	bhi.w	8007052 <_strtod_l+0x19a>
 8007162:	f04f 080a 	mov.w	r8, #10
 8007166:	3a30      	subs	r2, #48	@ 0x30
 8007168:	920e      	str	r2, [sp, #56]	@ 0x38
 800716a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800716c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800716e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007170:	1c56      	adds	r6, r2, #1
 8007172:	9619      	str	r6, [sp, #100]	@ 0x64
 8007174:	7852      	ldrb	r2, [r2, #1]
 8007176:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800717a:	f1be 0f09 	cmp.w	lr, #9
 800717e:	d939      	bls.n	80071f4 <_strtod_l+0x33c>
 8007180:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007182:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007186:	1a76      	subs	r6, r6, r1
 8007188:	2e08      	cmp	r6, #8
 800718a:	dc03      	bgt.n	8007194 <_strtod_l+0x2dc>
 800718c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800718e:	4588      	cmp	r8, r1
 8007190:	bfa8      	it	ge
 8007192:	4688      	movge	r8, r1
 8007194:	f1bc 0f00 	cmp.w	ip, #0
 8007198:	d001      	beq.n	800719e <_strtod_l+0x2e6>
 800719a:	f1c8 0800 	rsb	r8, r8, #0
 800719e:	2d00      	cmp	r5, #0
 80071a0:	d14e      	bne.n	8007240 <_strtod_l+0x388>
 80071a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071a4:	4308      	orrs	r0, r1
 80071a6:	f47f aec0 	bne.w	8006f2a <_strtod_l+0x72>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f47f aed6 	bne.w	8006f5c <_strtod_l+0xa4>
 80071b0:	2a69      	cmp	r2, #105	@ 0x69
 80071b2:	d028      	beq.n	8007206 <_strtod_l+0x34e>
 80071b4:	dc25      	bgt.n	8007202 <_strtod_l+0x34a>
 80071b6:	2a49      	cmp	r2, #73	@ 0x49
 80071b8:	d025      	beq.n	8007206 <_strtod_l+0x34e>
 80071ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80071bc:	f47f aece 	bne.w	8006f5c <_strtod_l+0xa4>
 80071c0:	499a      	ldr	r1, [pc, #616]	@ (800742c <_strtod_l+0x574>)
 80071c2:	a819      	add	r0, sp, #100	@ 0x64
 80071c4:	f002 f860 	bl	8009288 <__match>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f43f aec7 	beq.w	8006f5c <_strtod_l+0xa4>
 80071ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b28      	cmp	r3, #40	@ 0x28
 80071d4:	d12e      	bne.n	8007234 <_strtod_l+0x37c>
 80071d6:	4996      	ldr	r1, [pc, #600]	@ (8007430 <_strtod_l+0x578>)
 80071d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80071da:	a819      	add	r0, sp, #100	@ 0x64
 80071dc:	f002 f868 	bl	80092b0 <__hexnan>
 80071e0:	2805      	cmp	r0, #5
 80071e2:	d127      	bne.n	8007234 <_strtod_l+0x37c>
 80071e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80071ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80071ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80071f2:	e69a      	b.n	8006f2a <_strtod_l+0x72>
 80071f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071f6:	fb08 2101 	mla	r1, r8, r1, r2
 80071fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80071fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007200:	e7b5      	b.n	800716e <_strtod_l+0x2b6>
 8007202:	2a6e      	cmp	r2, #110	@ 0x6e
 8007204:	e7da      	b.n	80071bc <_strtod_l+0x304>
 8007206:	498b      	ldr	r1, [pc, #556]	@ (8007434 <_strtod_l+0x57c>)
 8007208:	a819      	add	r0, sp, #100	@ 0x64
 800720a:	f002 f83d 	bl	8009288 <__match>
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aea4 	beq.w	8006f5c <_strtod_l+0xa4>
 8007214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007216:	4988      	ldr	r1, [pc, #544]	@ (8007438 <_strtod_l+0x580>)
 8007218:	3b01      	subs	r3, #1
 800721a:	a819      	add	r0, sp, #100	@ 0x64
 800721c:	9319      	str	r3, [sp, #100]	@ 0x64
 800721e:	f002 f833 	bl	8009288 <__match>
 8007222:	b910      	cbnz	r0, 800722a <_strtod_l+0x372>
 8007224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007226:	3301      	adds	r3, #1
 8007228:	9319      	str	r3, [sp, #100]	@ 0x64
 800722a:	f04f 0a00 	mov.w	sl, #0
 800722e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800743c <_strtod_l+0x584>
 8007232:	e67a      	b.n	8006f2a <_strtod_l+0x72>
 8007234:	4882      	ldr	r0, [pc, #520]	@ (8007440 <_strtod_l+0x588>)
 8007236:	f001 fd29 	bl	8008c8c <nan>
 800723a:	4682      	mov	sl, r0
 800723c:	468b      	mov	fp, r1
 800723e:	e674      	b.n	8006f2a <_strtod_l+0x72>
 8007240:	eba8 0309 	sub.w	r3, r8, r9
 8007244:	2f00      	cmp	r7, #0
 8007246:	bf08      	it	eq
 8007248:	462f      	moveq	r7, r5
 800724a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800724c:	2d10      	cmp	r5, #16
 800724e:	462c      	mov	r4, r5
 8007250:	9309      	str	r3, [sp, #36]	@ 0x24
 8007252:	bfa8      	it	ge
 8007254:	2410      	movge	r4, #16
 8007256:	f7f9 f8df 	bl	8000418 <__aeabi_ui2d>
 800725a:	2d09      	cmp	r5, #9
 800725c:	4682      	mov	sl, r0
 800725e:	468b      	mov	fp, r1
 8007260:	dc11      	bgt.n	8007286 <_strtod_l+0x3ce>
 8007262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	f43f ae60 	beq.w	8006f2a <_strtod_l+0x72>
 800726a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726c:	dd76      	ble.n	800735c <_strtod_l+0x4a4>
 800726e:	2b16      	cmp	r3, #22
 8007270:	dc5d      	bgt.n	800732e <_strtod_l+0x476>
 8007272:	4974      	ldr	r1, [pc, #464]	@ (8007444 <_strtod_l+0x58c>)
 8007274:	4652      	mov	r2, sl
 8007276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800727a:	465b      	mov	r3, fp
 800727c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007280:	f7f9 f944 	bl	800050c <__aeabi_dmul>
 8007284:	e7d9      	b.n	800723a <_strtod_l+0x382>
 8007286:	4b6f      	ldr	r3, [pc, #444]	@ (8007444 <_strtod_l+0x58c>)
 8007288:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800728c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007290:	f7f9 f93c 	bl	800050c <__aeabi_dmul>
 8007294:	4682      	mov	sl, r0
 8007296:	9808      	ldr	r0, [sp, #32]
 8007298:	468b      	mov	fp, r1
 800729a:	f7f9 f8bd 	bl	8000418 <__aeabi_ui2d>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4650      	mov	r0, sl
 80072a4:	4659      	mov	r1, fp
 80072a6:	f7f8 ff7b 	bl	80001a0 <__adddf3>
 80072aa:	2d0f      	cmp	r5, #15
 80072ac:	4682      	mov	sl, r0
 80072ae:	468b      	mov	fp, r1
 80072b0:	ddd7      	ble.n	8007262 <_strtod_l+0x3aa>
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	1b2c      	subs	r4, r5, r4
 80072b6:	441c      	add	r4, r3
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	f340 8096 	ble.w	80073ea <_strtod_l+0x532>
 80072be:	f014 030f 	ands.w	r3, r4, #15
 80072c2:	d00a      	beq.n	80072da <_strtod_l+0x422>
 80072c4:	495f      	ldr	r1, [pc, #380]	@ (8007444 <_strtod_l+0x58c>)
 80072c6:	4652      	mov	r2, sl
 80072c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d0:	465b      	mov	r3, fp
 80072d2:	f7f9 f91b 	bl	800050c <__aeabi_dmul>
 80072d6:	4682      	mov	sl, r0
 80072d8:	468b      	mov	fp, r1
 80072da:	f034 040f 	bics.w	r4, r4, #15
 80072de:	d073      	beq.n	80073c8 <_strtod_l+0x510>
 80072e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80072e4:	dd48      	ble.n	8007378 <_strtod_l+0x4c0>
 80072e6:	2400      	movs	r4, #0
 80072e8:	46a0      	mov	r8, r4
 80072ea:	46a1      	mov	r9, r4
 80072ec:	940a      	str	r4, [sp, #40]	@ 0x28
 80072ee:	2322      	movs	r3, #34	@ 0x22
 80072f0:	f04f 0a00 	mov.w	sl, #0
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800743c <_strtod_l+0x584>
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f43f ae13 	beq.w	8006f2a <_strtod_l+0x72>
 8007304:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007306:	9805      	ldr	r0, [sp, #20]
 8007308:	f002 f9c2 	bl	8009690 <_Bfree>
 800730c:	4649      	mov	r1, r9
 800730e:	9805      	ldr	r0, [sp, #20]
 8007310:	f002 f9be 	bl	8009690 <_Bfree>
 8007314:	4641      	mov	r1, r8
 8007316:	9805      	ldr	r0, [sp, #20]
 8007318:	f002 f9ba 	bl	8009690 <_Bfree>
 800731c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	f002 f9b6 	bl	8009690 <_Bfree>
 8007324:	4621      	mov	r1, r4
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	f002 f9b2 	bl	8009690 <_Bfree>
 800732c:	e5fd      	b.n	8006f2a <_strtod_l+0x72>
 800732e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007330:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007334:	4293      	cmp	r3, r2
 8007336:	dbbc      	blt.n	80072b2 <_strtod_l+0x3fa>
 8007338:	4c42      	ldr	r4, [pc, #264]	@ (8007444 <_strtod_l+0x58c>)
 800733a:	f1c5 050f 	rsb	r5, r5, #15
 800733e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007342:	4652      	mov	r2, sl
 8007344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007348:	465b      	mov	r3, fp
 800734a:	f7f9 f8df 	bl	800050c <__aeabi_dmul>
 800734e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007350:	1b5d      	subs	r5, r3, r5
 8007352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007356:	e9d4 2300 	ldrd	r2, r3, [r4]
 800735a:	e791      	b.n	8007280 <_strtod_l+0x3c8>
 800735c:	3316      	adds	r3, #22
 800735e:	dba8      	blt.n	80072b2 <_strtod_l+0x3fa>
 8007360:	4b38      	ldr	r3, [pc, #224]	@ (8007444 <_strtod_l+0x58c>)
 8007362:	eba9 0808 	sub.w	r8, r9, r8
 8007366:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800736a:	4650      	mov	r0, sl
 800736c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007370:	4659      	mov	r1, fp
 8007372:	f7f9 f9f5 	bl	8000760 <__aeabi_ddiv>
 8007376:	e760      	b.n	800723a <_strtod_l+0x382>
 8007378:	4b33      	ldr	r3, [pc, #204]	@ (8007448 <_strtod_l+0x590>)
 800737a:	4650      	mov	r0, sl
 800737c:	9308      	str	r3, [sp, #32]
 800737e:	2300      	movs	r3, #0
 8007380:	4659      	mov	r1, fp
 8007382:	461e      	mov	r6, r3
 8007384:	1124      	asrs	r4, r4, #4
 8007386:	2c01      	cmp	r4, #1
 8007388:	dc21      	bgt.n	80073ce <_strtod_l+0x516>
 800738a:	b10b      	cbz	r3, 8007390 <_strtod_l+0x4d8>
 800738c:	4682      	mov	sl, r0
 800738e:	468b      	mov	fp, r1
 8007390:	492d      	ldr	r1, [pc, #180]	@ (8007448 <_strtod_l+0x590>)
 8007392:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007396:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800739a:	4652      	mov	r2, sl
 800739c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a0:	465b      	mov	r3, fp
 80073a2:	f7f9 f8b3 	bl	800050c <__aeabi_dmul>
 80073a6:	4b25      	ldr	r3, [pc, #148]	@ (800743c <_strtod_l+0x584>)
 80073a8:	460a      	mov	r2, r1
 80073aa:	400b      	ands	r3, r1
 80073ac:	4927      	ldr	r1, [pc, #156]	@ (800744c <_strtod_l+0x594>)
 80073ae:	4682      	mov	sl, r0
 80073b0:	428b      	cmp	r3, r1
 80073b2:	d898      	bhi.n	80072e6 <_strtod_l+0x42e>
 80073b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf86      	itte	hi
 80073bc:	f04f 3aff 	movhi.w	sl, #4294967295
 80073c0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007450 <_strtod_l+0x598>
 80073c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80073c8:	2300      	movs	r3, #0
 80073ca:	9308      	str	r3, [sp, #32]
 80073cc:	e07a      	b.n	80074c4 <_strtod_l+0x60c>
 80073ce:	07e2      	lsls	r2, r4, #31
 80073d0:	d505      	bpl.n	80073de <_strtod_l+0x526>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f898 	bl	800050c <__aeabi_dmul>
 80073dc:	2301      	movs	r3, #1
 80073de:	9a08      	ldr	r2, [sp, #32]
 80073e0:	3601      	adds	r6, #1
 80073e2:	3208      	adds	r2, #8
 80073e4:	1064      	asrs	r4, r4, #1
 80073e6:	9208      	str	r2, [sp, #32]
 80073e8:	e7cd      	b.n	8007386 <_strtod_l+0x4ce>
 80073ea:	d0ed      	beq.n	80073c8 <_strtod_l+0x510>
 80073ec:	4264      	negs	r4, r4
 80073ee:	f014 020f 	ands.w	r2, r4, #15
 80073f2:	d00a      	beq.n	800740a <_strtod_l+0x552>
 80073f4:	4b13      	ldr	r3, [pc, #76]	@ (8007444 <_strtod_l+0x58c>)
 80073f6:	4650      	mov	r0, sl
 80073f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fc:	4659      	mov	r1, fp
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f9 f9ad 	bl	8000760 <__aeabi_ddiv>
 8007406:	4682      	mov	sl, r0
 8007408:	468b      	mov	fp, r1
 800740a:	1124      	asrs	r4, r4, #4
 800740c:	d0dc      	beq.n	80073c8 <_strtod_l+0x510>
 800740e:	2c1f      	cmp	r4, #31
 8007410:	dd20      	ble.n	8007454 <_strtod_l+0x59c>
 8007412:	2400      	movs	r4, #0
 8007414:	46a0      	mov	r8, r4
 8007416:	46a1      	mov	r9, r4
 8007418:	940a      	str	r4, [sp, #40]	@ 0x28
 800741a:	2322      	movs	r3, #34	@ 0x22
 800741c:	9a05      	ldr	r2, [sp, #20]
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	f04f 0b00 	mov.w	fp, #0
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e768      	b.n	80072fc <_strtod_l+0x444>
 800742a:	bf00      	nop
 800742c:	0800c35b 	.word	0x0800c35b
 8007430:	0800c360 	.word	0x0800c360
 8007434:	0800c352 	.word	0x0800c352
 8007438:	0800c355 	.word	0x0800c355
 800743c:	7ff00000 	.word	0x7ff00000
 8007440:	0800c6cd 	.word	0x0800c6cd
 8007444:	0800c7d0 	.word	0x0800c7d0
 8007448:	0800c7a8 	.word	0x0800c7a8
 800744c:	7ca00000 	.word	0x7ca00000
 8007450:	7fefffff 	.word	0x7fefffff
 8007454:	f014 0310 	ands.w	r3, r4, #16
 8007458:	bf18      	it	ne
 800745a:	236a      	movne	r3, #106	@ 0x6a
 800745c:	4650      	mov	r0, sl
 800745e:	9308      	str	r3, [sp, #32]
 8007460:	4659      	mov	r1, fp
 8007462:	2300      	movs	r3, #0
 8007464:	4ea9      	ldr	r6, [pc, #676]	@ (800770c <_strtod_l+0x854>)
 8007466:	07e2      	lsls	r2, r4, #31
 8007468:	d504      	bpl.n	8007474 <_strtod_l+0x5bc>
 800746a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800746e:	f7f9 f84d 	bl	800050c <__aeabi_dmul>
 8007472:	2301      	movs	r3, #1
 8007474:	1064      	asrs	r4, r4, #1
 8007476:	f106 0608 	add.w	r6, r6, #8
 800747a:	d1f4      	bne.n	8007466 <_strtod_l+0x5ae>
 800747c:	b10b      	cbz	r3, 8007482 <_strtod_l+0x5ca>
 800747e:	4682      	mov	sl, r0
 8007480:	468b      	mov	fp, r1
 8007482:	9b08      	ldr	r3, [sp, #32]
 8007484:	b1b3      	cbz	r3, 80074b4 <_strtod_l+0x5fc>
 8007486:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800748a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800748e:	2b00      	cmp	r3, #0
 8007490:	4659      	mov	r1, fp
 8007492:	dd0f      	ble.n	80074b4 <_strtod_l+0x5fc>
 8007494:	2b1f      	cmp	r3, #31
 8007496:	dd57      	ble.n	8007548 <_strtod_l+0x690>
 8007498:	2b34      	cmp	r3, #52	@ 0x34
 800749a:	bfd8      	it	le
 800749c:	f04f 33ff 	movle.w	r3, #4294967295
 80074a0:	f04f 0a00 	mov.w	sl, #0
 80074a4:	bfcf      	iteee	gt
 80074a6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80074aa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80074ae:	4093      	lslle	r3, r2
 80074b0:	ea03 0b01 	andle.w	fp, r3, r1
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	4650      	mov	r0, sl
 80074ba:	4659      	mov	r1, fp
 80074bc:	f7f9 fa8e 	bl	80009dc <__aeabi_dcmpeq>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d1a6      	bne.n	8007412 <_strtod_l+0x55a>
 80074c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c6:	463a      	mov	r2, r7
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80074cc:	462b      	mov	r3, r5
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f002 f946 	bl	8009760 <__s2b>
 80074d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f af05 	beq.w	80072e6 <_strtod_l+0x42e>
 80074dc:	2400      	movs	r4, #0
 80074de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e0:	eba9 0308 	sub.w	r3, r9, r8
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	bfa8      	it	ge
 80074e8:	2300      	movge	r3, #0
 80074ea:	46a0      	mov	r8, r4
 80074ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80074ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80074f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f6:	9805      	ldr	r0, [sp, #20]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	f002 f889 	bl	8009610 <_Balloc>
 80074fe:	4681      	mov	r9, r0
 8007500:	2800      	cmp	r0, #0
 8007502:	f43f aef4 	beq.w	80072ee <_strtod_l+0x436>
 8007506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007508:	300c      	adds	r0, #12
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	f103 010c 	add.w	r1, r3, #12
 8007510:	3202      	adds	r2, #2
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	f001 fbab 	bl	8008c6e <memcpy>
 8007518:	ab1c      	add	r3, sp, #112	@ 0x70
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4652      	mov	r2, sl
 8007522:	465b      	mov	r3, fp
 8007524:	9805      	ldr	r0, [sp, #20]
 8007526:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800752a:	f002 fc4b 	bl	8009dc4 <__d2b>
 800752e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007530:	2800      	cmp	r0, #0
 8007532:	f43f aedc 	beq.w	80072ee <_strtod_l+0x436>
 8007536:	2101      	movs	r1, #1
 8007538:	9805      	ldr	r0, [sp, #20]
 800753a:	f002 f9a7 	bl	800988c <__i2b>
 800753e:	4680      	mov	r8, r0
 8007540:	b948      	cbnz	r0, 8007556 <_strtod_l+0x69e>
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	e6d2      	b.n	80072ee <_strtod_l+0x436>
 8007548:	f04f 32ff 	mov.w	r2, #4294967295
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	ea03 0a0a 	and.w	sl, r3, sl
 8007554:	e7ae      	b.n	80074b4 <_strtod_l+0x5fc>
 8007556:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007558:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800755a:	2d00      	cmp	r5, #0
 800755c:	bfab      	itete	ge
 800755e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007560:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007562:	18ef      	addge	r7, r5, r3
 8007564:	1b5e      	sublt	r6, r3, r5
 8007566:	9b08      	ldr	r3, [sp, #32]
 8007568:	bfa8      	it	ge
 800756a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800756c:	eba5 0503 	sub.w	r5, r5, r3
 8007570:	4415      	add	r5, r2
 8007572:	4b67      	ldr	r3, [pc, #412]	@ (8007710 <_strtod_l+0x858>)
 8007574:	f105 35ff 	add.w	r5, r5, #4294967295
 8007578:	bfb8      	it	lt
 800757a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800757c:	429d      	cmp	r5, r3
 800757e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007582:	da50      	bge.n	8007626 <_strtod_l+0x76e>
 8007584:	1b5b      	subs	r3, r3, r5
 8007586:	2b1f      	cmp	r3, #31
 8007588:	f04f 0101 	mov.w	r1, #1
 800758c:	eba2 0203 	sub.w	r2, r2, r3
 8007590:	dc3d      	bgt.n	800760e <_strtod_l+0x756>
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007598:	2300      	movs	r3, #0
 800759a:	9310      	str	r3, [sp, #64]	@ 0x40
 800759c:	18bd      	adds	r5, r7, r2
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	42af      	cmp	r7, r5
 80075a2:	4416      	add	r6, r2
 80075a4:	441e      	add	r6, r3
 80075a6:	463b      	mov	r3, r7
 80075a8:	bfa8      	it	ge
 80075aa:	462b      	movge	r3, r5
 80075ac:	42b3      	cmp	r3, r6
 80075ae:	bfa8      	it	ge
 80075b0:	4633      	movge	r3, r6
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfc2      	ittt	gt
 80075b6:	1aed      	subgt	r5, r5, r3
 80075b8:	1af6      	subgt	r6, r6, r3
 80075ba:	1aff      	subgt	r7, r7, r3
 80075bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dd16      	ble.n	80075f0 <_strtod_l+0x738>
 80075c2:	4641      	mov	r1, r8
 80075c4:	461a      	mov	r2, r3
 80075c6:	9805      	ldr	r0, [sp, #20]
 80075c8:	f002 fa1e 	bl	8009a08 <__pow5mult>
 80075cc:	4680      	mov	r8, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0b7      	beq.n	8007542 <_strtod_l+0x68a>
 80075d2:	4601      	mov	r1, r0
 80075d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075d6:	9805      	ldr	r0, [sp, #20]
 80075d8:	f002 f96e 	bl	80098b8 <__multiply>
 80075dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80075de:	2800      	cmp	r0, #0
 80075e0:	f43f ae85 	beq.w	80072ee <_strtod_l+0x436>
 80075e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075e6:	9805      	ldr	r0, [sp, #20]
 80075e8:	f002 f852 	bl	8009690 <_Bfree>
 80075ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	dc1d      	bgt.n	8007630 <_strtod_l+0x778>
 80075f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dd23      	ble.n	8007642 <_strtod_l+0x78a>
 80075fa:	4649      	mov	r1, r9
 80075fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80075fe:	9805      	ldr	r0, [sp, #20]
 8007600:	f002 fa02 	bl	8009a08 <__pow5mult>
 8007604:	4681      	mov	r9, r0
 8007606:	b9e0      	cbnz	r0, 8007642 <_strtod_l+0x78a>
 8007608:	f04f 0900 	mov.w	r9, #0
 800760c:	e66f      	b.n	80072ee <_strtod_l+0x436>
 800760e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007612:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007616:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800761a:	35e2      	adds	r5, #226	@ 0xe2
 800761c:	fa01 f305 	lsl.w	r3, r1, r5
 8007620:	9310      	str	r3, [sp, #64]	@ 0x40
 8007622:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007624:	e7ba      	b.n	800759c <_strtod_l+0x6e4>
 8007626:	2300      	movs	r3, #0
 8007628:	9310      	str	r3, [sp, #64]	@ 0x40
 800762a:	2301      	movs	r3, #1
 800762c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800762e:	e7b5      	b.n	800759c <_strtod_l+0x6e4>
 8007630:	462a      	mov	r2, r5
 8007632:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007634:	9805      	ldr	r0, [sp, #20]
 8007636:	f002 fa41 	bl	8009abc <__lshift>
 800763a:	901a      	str	r0, [sp, #104]	@ 0x68
 800763c:	2800      	cmp	r0, #0
 800763e:	d1d9      	bne.n	80075f4 <_strtod_l+0x73c>
 8007640:	e655      	b.n	80072ee <_strtod_l+0x436>
 8007642:	2e00      	cmp	r6, #0
 8007644:	dd07      	ble.n	8007656 <_strtod_l+0x79e>
 8007646:	4649      	mov	r1, r9
 8007648:	4632      	mov	r2, r6
 800764a:	9805      	ldr	r0, [sp, #20]
 800764c:	f002 fa36 	bl	8009abc <__lshift>
 8007650:	4681      	mov	r9, r0
 8007652:	2800      	cmp	r0, #0
 8007654:	d0d8      	beq.n	8007608 <_strtod_l+0x750>
 8007656:	2f00      	cmp	r7, #0
 8007658:	dd08      	ble.n	800766c <_strtod_l+0x7b4>
 800765a:	4641      	mov	r1, r8
 800765c:	463a      	mov	r2, r7
 800765e:	9805      	ldr	r0, [sp, #20]
 8007660:	f002 fa2c 	bl	8009abc <__lshift>
 8007664:	4680      	mov	r8, r0
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f ae41 	beq.w	80072ee <_strtod_l+0x436>
 800766c:	464a      	mov	r2, r9
 800766e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007670:	9805      	ldr	r0, [sp, #20]
 8007672:	f002 faab 	bl	8009bcc <__mdiff>
 8007676:	4604      	mov	r4, r0
 8007678:	2800      	cmp	r0, #0
 800767a:	f43f ae38 	beq.w	80072ee <_strtod_l+0x436>
 800767e:	68c3      	ldr	r3, [r0, #12]
 8007680:	4641      	mov	r1, r8
 8007682:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007684:	2300      	movs	r3, #0
 8007686:	60c3      	str	r3, [r0, #12]
 8007688:	f002 fa84 	bl	8009b94 <__mcmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	da45      	bge.n	800771c <_strtod_l+0x864>
 8007690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007692:	ea53 030a 	orrs.w	r3, r3, sl
 8007696:	d16b      	bne.n	8007770 <_strtod_l+0x8b8>
 8007698:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800769c:	2b00      	cmp	r3, #0
 800769e:	d167      	bne.n	8007770 <_strtod_l+0x8b8>
 80076a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076a4:	0d1b      	lsrs	r3, r3, #20
 80076a6:	051b      	lsls	r3, r3, #20
 80076a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076ac:	d960      	bls.n	8007770 <_strtod_l+0x8b8>
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	b913      	cbnz	r3, 80076b8 <_strtod_l+0x800>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	dd5b      	ble.n	8007770 <_strtod_l+0x8b8>
 80076b8:	4621      	mov	r1, r4
 80076ba:	2201      	movs	r2, #1
 80076bc:	9805      	ldr	r0, [sp, #20]
 80076be:	f002 f9fd 	bl	8009abc <__lshift>
 80076c2:	4641      	mov	r1, r8
 80076c4:	4604      	mov	r4, r0
 80076c6:	f002 fa65 	bl	8009b94 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	dd50      	ble.n	8007770 <_strtod_l+0x8b8>
 80076ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076d2:	9a08      	ldr	r2, [sp, #32]
 80076d4:	0d1b      	lsrs	r3, r3, #20
 80076d6:	051b      	lsls	r3, r3, #20
 80076d8:	2a00      	cmp	r2, #0
 80076da:	d06a      	beq.n	80077b2 <_strtod_l+0x8fa>
 80076dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076e0:	d867      	bhi.n	80077b2 <_strtod_l+0x8fa>
 80076e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80076e6:	f67f ae98 	bls.w	800741a <_strtod_l+0x562>
 80076ea:	4650      	mov	r0, sl
 80076ec:	4659      	mov	r1, fp
 80076ee:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <_strtod_l+0x85c>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 ff0b 	bl	800050c <__aeabi_dmul>
 80076f6:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <_strtod_l+0x860>)
 80076f8:	4682      	mov	sl, r0
 80076fa:	400b      	ands	r3, r1
 80076fc:	468b      	mov	fp, r1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f47f ae00 	bne.w	8007304 <_strtod_l+0x44c>
 8007704:	2322      	movs	r3, #34	@ 0x22
 8007706:	9a05      	ldr	r2, [sp, #20]
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e5fb      	b.n	8007304 <_strtod_l+0x44c>
 800770c:	0800c388 	.word	0x0800c388
 8007710:	fffffc02 	.word	0xfffffc02
 8007714:	39500000 	.word	0x39500000
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007720:	d165      	bne.n	80077ee <_strtod_l+0x936>
 8007722:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007728:	b35a      	cbz	r2, 8007782 <_strtod_l+0x8ca>
 800772a:	4a99      	ldr	r2, [pc, #612]	@ (8007990 <_strtod_l+0xad8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d12b      	bne.n	8007788 <_strtod_l+0x8d0>
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	4651      	mov	r1, sl
 8007734:	b303      	cbz	r3, 8007778 <_strtod_l+0x8c0>
 8007736:	465a      	mov	r2, fp
 8007738:	4b96      	ldr	r3, [pc, #600]	@ (8007994 <_strtod_l+0xadc>)
 800773a:	4013      	ands	r3, r2
 800773c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	d81b      	bhi.n	800777e <_strtod_l+0x8c6>
 8007746:	0d1b      	lsrs	r3, r3, #20
 8007748:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	4299      	cmp	r1, r3
 8007752:	d119      	bne.n	8007788 <_strtod_l+0x8d0>
 8007754:	4b90      	ldr	r3, [pc, #576]	@ (8007998 <_strtod_l+0xae0>)
 8007756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007758:	429a      	cmp	r2, r3
 800775a:	d102      	bne.n	8007762 <_strtod_l+0x8aa>
 800775c:	3101      	adds	r1, #1
 800775e:	f43f adc6 	beq.w	80072ee <_strtod_l+0x436>
 8007762:	f04f 0a00 	mov.w	sl, #0
 8007766:	4b8b      	ldr	r3, [pc, #556]	@ (8007994 <_strtod_l+0xadc>)
 8007768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800776a:	401a      	ands	r2, r3
 800776c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1b9      	bne.n	80076ea <_strtod_l+0x832>
 8007776:	e5c5      	b.n	8007304 <_strtod_l+0x44c>
 8007778:	f04f 33ff 	mov.w	r3, #4294967295
 800777c:	e7e8      	b.n	8007750 <_strtod_l+0x898>
 800777e:	4613      	mov	r3, r2
 8007780:	e7e6      	b.n	8007750 <_strtod_l+0x898>
 8007782:	ea53 030a 	orrs.w	r3, r3, sl
 8007786:	d0a2      	beq.n	80076ce <_strtod_l+0x816>
 8007788:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800778a:	b1db      	cbz	r3, 80077c4 <_strtod_l+0x90c>
 800778c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800778e:	4213      	tst	r3, r2
 8007790:	d0ee      	beq.n	8007770 <_strtod_l+0x8b8>
 8007792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007794:	4650      	mov	r0, sl
 8007796:	4659      	mov	r1, fp
 8007798:	9a08      	ldr	r2, [sp, #32]
 800779a:	b1bb      	cbz	r3, 80077cc <_strtod_l+0x914>
 800779c:	f7ff fb6a 	bl	8006e74 <sulp>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077a8:	f7f8 fcfa 	bl	80001a0 <__adddf3>
 80077ac:	4682      	mov	sl, r0
 80077ae:	468b      	mov	fp, r1
 80077b0:	e7de      	b.n	8007770 <_strtod_l+0x8b8>
 80077b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80077b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077ba:	f04f 3aff 	mov.w	sl, #4294967295
 80077be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077c2:	e7d5      	b.n	8007770 <_strtod_l+0x8b8>
 80077c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077c6:	ea13 0f0a 	tst.w	r3, sl
 80077ca:	e7e1      	b.n	8007790 <_strtod_l+0x8d8>
 80077cc:	f7ff fb52 	bl	8006e74 <sulp>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077d8:	f7f8 fce0 	bl	800019c <__aeabi_dsub>
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	4682      	mov	sl, r0
 80077e2:	468b      	mov	fp, r1
 80077e4:	f7f9 f8fa 	bl	80009dc <__aeabi_dcmpeq>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d0c1      	beq.n	8007770 <_strtod_l+0x8b8>
 80077ec:	e615      	b.n	800741a <_strtod_l+0x562>
 80077ee:	4641      	mov	r1, r8
 80077f0:	4620      	mov	r0, r4
 80077f2:	f002 fb3f 	bl	8009e74 <__ratio>
 80077f6:	2200      	movs	r2, #0
 80077f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	f7f9 f900 	bl	8000a04 <__aeabi_dcmple>
 8007804:	2800      	cmp	r0, #0
 8007806:	d06d      	beq.n	80078e4 <_strtod_l+0xa2c>
 8007808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d178      	bne.n	8007900 <_strtod_l+0xa48>
 800780e:	f1ba 0f00 	cmp.w	sl, #0
 8007812:	d156      	bne.n	80078c2 <_strtod_l+0xa0a>
 8007814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800781a:	2b00      	cmp	r3, #0
 800781c:	d158      	bne.n	80078d0 <_strtod_l+0xa18>
 800781e:	2200      	movs	r2, #0
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	4b5d      	ldr	r3, [pc, #372]	@ (800799c <_strtod_l+0xae4>)
 8007826:	f7f9 f8e3 	bl	80009f0 <__aeabi_dcmplt>
 800782a:	2800      	cmp	r0, #0
 800782c:	d157      	bne.n	80078de <_strtod_l+0xa26>
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	2200      	movs	r2, #0
 8007834:	4b5a      	ldr	r3, [pc, #360]	@ (80079a0 <_strtod_l+0xae8>)
 8007836:	f7f8 fe69 	bl	800050c <__aeabi_dmul>
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007842:	9606      	str	r6, [sp, #24]
 8007844:	9307      	str	r3, [sp, #28]
 8007846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800784a:	4d52      	ldr	r5, [pc, #328]	@ (8007994 <_strtod_l+0xadc>)
 800784c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007852:	401d      	ands	r5, r3
 8007854:	4b53      	ldr	r3, [pc, #332]	@ (80079a4 <_strtod_l+0xaec>)
 8007856:	429d      	cmp	r5, r3
 8007858:	f040 80aa 	bne.w	80079b0 <_strtod_l+0xaf8>
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	4650      	mov	r0, sl
 8007860:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007864:	4659      	mov	r1, fp
 8007866:	f002 fa45 	bl	8009cf4 <__ulp>
 800786a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800786e:	f7f8 fe4d 	bl	800050c <__aeabi_dmul>
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	f7f8 fc93 	bl	80001a0 <__adddf3>
 800787a:	460b      	mov	r3, r1
 800787c:	4945      	ldr	r1, [pc, #276]	@ (8007994 <_strtod_l+0xadc>)
 800787e:	4a4a      	ldr	r2, [pc, #296]	@ (80079a8 <_strtod_l+0xaf0>)
 8007880:	4019      	ands	r1, r3
 8007882:	4291      	cmp	r1, r2
 8007884:	4682      	mov	sl, r0
 8007886:	d942      	bls.n	800790e <_strtod_l+0xa56>
 8007888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800788a:	4b43      	ldr	r3, [pc, #268]	@ (8007998 <_strtod_l+0xae0>)
 800788c:	429a      	cmp	r2, r3
 800788e:	d103      	bne.n	8007898 <_strtod_l+0x9e0>
 8007890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007892:	3301      	adds	r3, #1
 8007894:	f43f ad2b 	beq.w	80072ee <_strtod_l+0x436>
 8007898:	f04f 3aff 	mov.w	sl, #4294967295
 800789c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007998 <_strtod_l+0xae0>
 80078a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078a2:	9805      	ldr	r0, [sp, #20]
 80078a4:	f001 fef4 	bl	8009690 <_Bfree>
 80078a8:	4649      	mov	r1, r9
 80078aa:	9805      	ldr	r0, [sp, #20]
 80078ac:	f001 fef0 	bl	8009690 <_Bfree>
 80078b0:	4641      	mov	r1, r8
 80078b2:	9805      	ldr	r0, [sp, #20]
 80078b4:	f001 feec 	bl	8009690 <_Bfree>
 80078b8:	4621      	mov	r1, r4
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	f001 fee8 	bl	8009690 <_Bfree>
 80078c0:	e618      	b.n	80074f4 <_strtod_l+0x63c>
 80078c2:	f1ba 0f01 	cmp.w	sl, #1
 80078c6:	d103      	bne.n	80078d0 <_strtod_l+0xa18>
 80078c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f43f ada5 	beq.w	800741a <_strtod_l+0x562>
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b36      	ldr	r3, [pc, #216]	@ (80079ac <_strtod_l+0xaf4>)
 80078d4:	2600      	movs	r6, #0
 80078d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80078da:	4f30      	ldr	r7, [pc, #192]	@ (800799c <_strtod_l+0xae4>)
 80078dc:	e7b3      	b.n	8007846 <_strtod_l+0x98e>
 80078de:	2600      	movs	r6, #0
 80078e0:	4f2f      	ldr	r7, [pc, #188]	@ (80079a0 <_strtod_l+0xae8>)
 80078e2:	e7ac      	b.n	800783e <_strtod_l+0x986>
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	4b2d      	ldr	r3, [pc, #180]	@ (80079a0 <_strtod_l+0xae8>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	f7f8 fe0e 	bl	800050c <__aeabi_dmul>
 80078f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0a1      	beq.n	800783e <_strtod_l+0x986>
 80078fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80078fe:	e7a2      	b.n	8007846 <_strtod_l+0x98e>
 8007900:	2200      	movs	r2, #0
 8007902:	4b26      	ldr	r3, [pc, #152]	@ (800799c <_strtod_l+0xae4>)
 8007904:	4616      	mov	r6, r2
 8007906:	461f      	mov	r7, r3
 8007908:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800790c:	e79b      	b.n	8007846 <_strtod_l+0x98e>
 800790e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1c1      	bne.n	80078a0 <_strtod_l+0x9e8>
 800791c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007920:	0d1b      	lsrs	r3, r3, #20
 8007922:	051b      	lsls	r3, r3, #20
 8007924:	429d      	cmp	r5, r3
 8007926:	d1bb      	bne.n	80078a0 <_strtod_l+0x9e8>
 8007928:	4630      	mov	r0, r6
 800792a:	4639      	mov	r1, r7
 800792c:	f7f9 fc78 	bl	8001220 <__aeabi_d2lz>
 8007930:	f7f8 fdbe 	bl	80004b0 <__aeabi_l2d>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f8 fc2e 	bl	800019c <__aeabi_dsub>
 8007940:	460b      	mov	r3, r1
 8007942:	4602      	mov	r2, r0
 8007944:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007948:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800794c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800794e:	ea46 060a 	orr.w	r6, r6, sl
 8007952:	431e      	orrs	r6, r3
 8007954:	d069      	beq.n	8007a2a <_strtod_l+0xb72>
 8007956:	a30a      	add	r3, pc, #40	@ (adr r3, 8007980 <_strtod_l+0xac8>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f7f9 f848 	bl	80009f0 <__aeabi_dcmplt>
 8007960:	2800      	cmp	r0, #0
 8007962:	f47f accf 	bne.w	8007304 <_strtod_l+0x44c>
 8007966:	a308      	add	r3, pc, #32	@ (adr r3, 8007988 <_strtod_l+0xad0>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007970:	f7f9 f85c 	bl	8000a2c <__aeabi_dcmpgt>
 8007974:	2800      	cmp	r0, #0
 8007976:	d093      	beq.n	80078a0 <_strtod_l+0x9e8>
 8007978:	e4c4      	b.n	8007304 <_strtod_l+0x44c>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
 8007980:	94a03595 	.word	0x94a03595
 8007984:	3fdfffff 	.word	0x3fdfffff
 8007988:	35afe535 	.word	0x35afe535
 800798c:	3fe00000 	.word	0x3fe00000
 8007990:	000fffff 	.word	0x000fffff
 8007994:	7ff00000 	.word	0x7ff00000
 8007998:	7fefffff 	.word	0x7fefffff
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	3fe00000 	.word	0x3fe00000
 80079a4:	7fe00000 	.word	0x7fe00000
 80079a8:	7c9fffff 	.word	0x7c9fffff
 80079ac:	bff00000 	.word	0xbff00000
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	b323      	cbz	r3, 80079fe <_strtod_l+0xb46>
 80079b4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80079b8:	d821      	bhi.n	80079fe <_strtod_l+0xb46>
 80079ba:	a327      	add	r3, pc, #156	@ (adr r3, 8007a58 <_strtod_l+0xba0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f9 f81e 	bl	8000a04 <__aeabi_dcmple>
 80079c8:	b1a0      	cbz	r0, 80079f4 <_strtod_l+0xb3c>
 80079ca:	4639      	mov	r1, r7
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7f9 f84d 	bl	8000a6c <__aeabi_d2uiz>
 80079d2:	2801      	cmp	r0, #1
 80079d4:	bf38      	it	cc
 80079d6:	2001      	movcc	r0, #1
 80079d8:	f7f8 fd1e 	bl	8000418 <__aeabi_ui2d>
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	b9fb      	cbnz	r3, 8007a24 <_strtod_l+0xb6c>
 80079e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079e8:	9014      	str	r0, [sp, #80]	@ 0x50
 80079ea:	9315      	str	r3, [sp, #84]	@ 0x54
 80079ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80079f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079f6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80079fa:	1b5b      	subs	r3, r3, r5
 80079fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80079fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a02:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007a06:	f002 f975 	bl	8009cf4 <__ulp>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	f7f8 fd7b 	bl	800050c <__aeabi_dmul>
 8007a16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a1a:	f7f8 fbc1 	bl	80001a0 <__adddf3>
 8007a1e:	4682      	mov	sl, r0
 8007a20:	468b      	mov	fp, r1
 8007a22:	e776      	b.n	8007912 <_strtod_l+0xa5a>
 8007a24:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a28:	e7e0      	b.n	80079ec <_strtod_l+0xb34>
 8007a2a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007a60 <_strtod_l+0xba8>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7f8 ffde 	bl	80009f0 <__aeabi_dcmplt>
 8007a34:	e79e      	b.n	8007974 <_strtod_l+0xabc>
 8007a36:	2300      	movs	r3, #0
 8007a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a3c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	f7ff ba77 	b.w	8006f32 <_strtod_l+0x7a>
 8007a44:	2a65      	cmp	r2, #101	@ 0x65
 8007a46:	f43f ab6e 	beq.w	8007126 <_strtod_l+0x26e>
 8007a4a:	2a45      	cmp	r2, #69	@ 0x45
 8007a4c:	f43f ab6b 	beq.w	8007126 <_strtod_l+0x26e>
 8007a50:	2301      	movs	r3, #1
 8007a52:	f7ff bba6 	b.w	80071a2 <_strtod_l+0x2ea>
 8007a56:	bf00      	nop
 8007a58:	ffc00000 	.word	0xffc00000
 8007a5c:	41dfffff 	.word	0x41dfffff
 8007a60:	94a03595 	.word	0x94a03595
 8007a64:	3fcfffff 	.word	0x3fcfffff

08007a68 <strtod>:
 8007a68:	460a      	mov	r2, r1
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4802      	ldr	r0, [pc, #8]	@ (8007a78 <strtod+0x10>)
 8007a6e:	4b03      	ldr	r3, [pc, #12]	@ (8007a7c <strtod+0x14>)
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	f7ff ba21 	b.w	8006eb8 <_strtod_l>
 8007a76:	bf00      	nop
 8007a78:	2000055c 	.word	0x2000055c
 8007a7c:	200003f0 	.word	0x200003f0

08007a80 <_strtol_l.constprop.0>:
 8007a80:	2b24      	cmp	r3, #36	@ 0x24
 8007a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a86:	4686      	mov	lr, r0
 8007a88:	4690      	mov	r8, r2
 8007a8a:	d801      	bhi.n	8007a90 <_strtol_l.constprop.0+0x10>
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d106      	bne.n	8007a9e <_strtol_l.constprop.0+0x1e>
 8007a90:	f001 f8b6 	bl	8008c00 <__errno>
 8007a94:	2316      	movs	r3, #22
 8007a96:	6003      	str	r3, [r0, #0]
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	4833      	ldr	r0, [pc, #204]	@ (8007b70 <_strtol_l.constprop.0+0xf0>)
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aa8:	5d06      	ldrb	r6, [r0, r4]
 8007aaa:	f016 0608 	ands.w	r6, r6, #8
 8007aae:	d1f8      	bne.n	8007aa2 <_strtol_l.constprop.0+0x22>
 8007ab0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ab2:	d12d      	bne.n	8007b10 <_strtol_l.constprop.0+0x90>
 8007ab4:	2601      	movs	r6, #1
 8007ab6:	782c      	ldrb	r4, [r5, #0]
 8007ab8:	1c95      	adds	r5, r2, #2
 8007aba:	f033 0210 	bics.w	r2, r3, #16
 8007abe:	d109      	bne.n	8007ad4 <_strtol_l.constprop.0+0x54>
 8007ac0:	2c30      	cmp	r4, #48	@ 0x30
 8007ac2:	d12a      	bne.n	8007b1a <_strtol_l.constprop.0+0x9a>
 8007ac4:	782a      	ldrb	r2, [r5, #0]
 8007ac6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007aca:	2a58      	cmp	r2, #88	@ 0x58
 8007acc:	d125      	bne.n	8007b1a <_strtol_l.constprop.0+0x9a>
 8007ace:	2310      	movs	r3, #16
 8007ad0:	786c      	ldrb	r4, [r5, #1]
 8007ad2:	3502      	adds	r5, #2
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ada:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ade:	fbbc f9f3 	udiv	r9, ip, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ae8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007aec:	2f09      	cmp	r7, #9
 8007aee:	d81b      	bhi.n	8007b28 <_strtol_l.constprop.0+0xa8>
 8007af0:	463c      	mov	r4, r7
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	dd27      	ble.n	8007b46 <_strtol_l.constprop.0+0xc6>
 8007af6:	1c57      	adds	r7, r2, #1
 8007af8:	d007      	beq.n	8007b0a <_strtol_l.constprop.0+0x8a>
 8007afa:	4581      	cmp	r9, r0
 8007afc:	d320      	bcc.n	8007b40 <_strtol_l.constprop.0+0xc0>
 8007afe:	d101      	bne.n	8007b04 <_strtol_l.constprop.0+0x84>
 8007b00:	45a2      	cmp	sl, r4
 8007b02:	db1d      	blt.n	8007b40 <_strtol_l.constprop.0+0xc0>
 8007b04:	2201      	movs	r2, #1
 8007b06:	fb00 4003 	mla	r0, r0, r3, r4
 8007b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b0e:	e7eb      	b.n	8007ae8 <_strtol_l.constprop.0+0x68>
 8007b10:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b12:	bf04      	itt	eq
 8007b14:	782c      	ldrbeq	r4, [r5, #0]
 8007b16:	1c95      	addeq	r5, r2, #2
 8007b18:	e7cf      	b.n	8007aba <_strtol_l.constprop.0+0x3a>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1da      	bne.n	8007ad4 <_strtol_l.constprop.0+0x54>
 8007b1e:	2c30      	cmp	r4, #48	@ 0x30
 8007b20:	bf0c      	ite	eq
 8007b22:	2308      	moveq	r3, #8
 8007b24:	230a      	movne	r3, #10
 8007b26:	e7d5      	b.n	8007ad4 <_strtol_l.constprop.0+0x54>
 8007b28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b2c:	2f19      	cmp	r7, #25
 8007b2e:	d801      	bhi.n	8007b34 <_strtol_l.constprop.0+0xb4>
 8007b30:	3c37      	subs	r4, #55	@ 0x37
 8007b32:	e7de      	b.n	8007af2 <_strtol_l.constprop.0+0x72>
 8007b34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b38:	2f19      	cmp	r7, #25
 8007b3a:	d804      	bhi.n	8007b46 <_strtol_l.constprop.0+0xc6>
 8007b3c:	3c57      	subs	r4, #87	@ 0x57
 8007b3e:	e7d8      	b.n	8007af2 <_strtol_l.constprop.0+0x72>
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	e7e1      	b.n	8007b0a <_strtol_l.constprop.0+0x8a>
 8007b46:	1c53      	adds	r3, r2, #1
 8007b48:	d108      	bne.n	8007b5c <_strtol_l.constprop.0+0xdc>
 8007b4a:	2322      	movs	r3, #34	@ 0x22
 8007b4c:	4660      	mov	r0, ip
 8007b4e:	f8ce 3000 	str.w	r3, [lr]
 8007b52:	f1b8 0f00 	cmp.w	r8, #0
 8007b56:	d0a0      	beq.n	8007a9a <_strtol_l.constprop.0+0x1a>
 8007b58:	1e69      	subs	r1, r5, #1
 8007b5a:	e006      	b.n	8007b6a <_strtol_l.constprop.0+0xea>
 8007b5c:	b106      	cbz	r6, 8007b60 <_strtol_l.constprop.0+0xe0>
 8007b5e:	4240      	negs	r0, r0
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	d099      	beq.n	8007a9a <_strtol_l.constprop.0+0x1a>
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	d1f6      	bne.n	8007b58 <_strtol_l.constprop.0+0xd8>
 8007b6a:	f8c8 1000 	str.w	r1, [r8]
 8007b6e:	e794      	b.n	8007a9a <_strtol_l.constprop.0+0x1a>
 8007b70:	0800c3b1 	.word	0x0800c3b1

08007b74 <_strtol_r>:
 8007b74:	f7ff bf84 	b.w	8007a80 <_strtol_l.constprop.0>

08007b78 <strtol>:
 8007b78:	4613      	mov	r3, r2
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	4802      	ldr	r0, [pc, #8]	@ (8007b88 <strtol+0x10>)
 8007b80:	6800      	ldr	r0, [r0, #0]
 8007b82:	f7ff bf7d 	b.w	8007a80 <_strtol_l.constprop.0>
 8007b86:	bf00      	nop
 8007b88:	2000055c 	.word	0x2000055c

08007b8c <std>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	4604      	mov	r4, r0
 8007b92:	e9c0 3300 	strd	r3, r3, [r0]
 8007b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9a:	6083      	str	r3, [r0, #8]
 8007b9c:	8181      	strh	r1, [r0, #12]
 8007b9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ba0:	81c2      	strh	r2, [r0, #14]
 8007ba2:	6183      	str	r3, [r0, #24]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	305c      	adds	r0, #92	@ 0x5c
 8007baa:	f000 f8f6 	bl	8007d9a <memset>
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <std+0x58>)
 8007bb0:	6224      	str	r4, [r4, #32]
 8007bb2:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007be8 <std+0x5c>)
 8007bb6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <std+0x60>)
 8007bba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <std+0x64>)
 8007bbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <std+0x68>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d006      	beq.n	8007bd4 <std+0x48>
 8007bc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bca:	4294      	cmp	r4, r2
 8007bcc:	d002      	beq.n	8007bd4 <std+0x48>
 8007bce:	33d0      	adds	r3, #208	@ 0xd0
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	d105      	bne.n	8007be0 <std+0x54>
 8007bd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f001 b83a 	b.w	8008c54 <__retarget_lock_init_recursive>
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	08007d11 	.word	0x08007d11
 8007be8:	08007d37 	.word	0x08007d37
 8007bec:	08007d6f 	.word	0x08007d6f
 8007bf0:	08007d93 	.word	0x08007d93
 8007bf4:	20000860 	.word	0x20000860

08007bf8 <stdio_exit_handler>:
 8007bf8:	4a02      	ldr	r2, [pc, #8]	@ (8007c04 <stdio_exit_handler+0xc>)
 8007bfa:	4903      	ldr	r1, [pc, #12]	@ (8007c08 <stdio_exit_handler+0x10>)
 8007bfc:	4803      	ldr	r0, [pc, #12]	@ (8007c0c <stdio_exit_handler+0x14>)
 8007bfe:	f000 b869 	b.w	8007cd4 <_fwalk_sglue>
 8007c02:	bf00      	nop
 8007c04:	200003dc 	.word	0x200003dc
 8007c08:	0800a16d 	.word	0x0800a16d
 8007c0c:	20000560 	.word	0x20000560

08007c10 <cleanup_stdio>:
 8007c10:	6841      	ldr	r1, [r0, #4]
 8007c12:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <cleanup_stdio+0x34>)
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4299      	cmp	r1, r3
 8007c18:	4604      	mov	r4, r0
 8007c1a:	d001      	beq.n	8007c20 <cleanup_stdio+0x10>
 8007c1c:	f002 faa6 	bl	800a16c <_fflush_r>
 8007c20:	68a1      	ldr	r1, [r4, #8]
 8007c22:	4b09      	ldr	r3, [pc, #36]	@ (8007c48 <cleanup_stdio+0x38>)
 8007c24:	4299      	cmp	r1, r3
 8007c26:	d002      	beq.n	8007c2e <cleanup_stdio+0x1e>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f002 fa9f 	bl	800a16c <_fflush_r>
 8007c2e:	68e1      	ldr	r1, [r4, #12]
 8007c30:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <cleanup_stdio+0x3c>)
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d004      	beq.n	8007c40 <cleanup_stdio+0x30>
 8007c36:	4620      	mov	r0, r4
 8007c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c3c:	f002 ba96 	b.w	800a16c <_fflush_r>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	bf00      	nop
 8007c44:	20000860 	.word	0x20000860
 8007c48:	200008c8 	.word	0x200008c8
 8007c4c:	20000930 	.word	0x20000930

08007c50 <global_stdio_init.part.0>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <global_stdio_init.part.0+0x30>)
 8007c54:	4c0b      	ldr	r4, [pc, #44]	@ (8007c84 <global_stdio_init.part.0+0x34>)
 8007c56:	4a0c      	ldr	r2, [pc, #48]	@ (8007c88 <global_stdio_init.part.0+0x38>)
 8007c58:	4620      	mov	r0, r4
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f7ff ff94 	bl	8007b8c <std>
 8007c64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c68:	2201      	movs	r2, #1
 8007c6a:	2109      	movs	r1, #9
 8007c6c:	f7ff ff8e 	bl	8007b8c <std>
 8007c70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c74:	2202      	movs	r2, #2
 8007c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c7a:	2112      	movs	r1, #18
 8007c7c:	f7ff bf86 	b.w	8007b8c <std>
 8007c80:	20000998 	.word	0x20000998
 8007c84:	20000860 	.word	0x20000860
 8007c88:	08007bf9 	.word	0x08007bf9

08007c8c <__sfp_lock_acquire>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	@ (8007c94 <__sfp_lock_acquire+0x8>)
 8007c8e:	f000 bfe3 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 8007c92:	bf00      	nop
 8007c94:	200009c7 	.word	0x200009c7

08007c98 <__sfp_lock_release>:
 8007c98:	4801      	ldr	r0, [pc, #4]	@ (8007ca0 <__sfp_lock_release+0x8>)
 8007c9a:	f000 bfdf 	b.w	8008c5c <__retarget_lock_release_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	200009c7 	.word	0x200009c7

08007ca4 <__sinit>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	f7ff fff0 	bl	8007c8c <__sfp_lock_acquire>
 8007cac:	6a23      	ldr	r3, [r4, #32]
 8007cae:	b11b      	cbz	r3, 8007cb8 <__sinit+0x14>
 8007cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb4:	f7ff bff0 	b.w	8007c98 <__sfp_lock_release>
 8007cb8:	4b04      	ldr	r3, [pc, #16]	@ (8007ccc <__sinit+0x28>)
 8007cba:	6223      	str	r3, [r4, #32]
 8007cbc:	4b04      	ldr	r3, [pc, #16]	@ (8007cd0 <__sinit+0x2c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f5      	bne.n	8007cb0 <__sinit+0xc>
 8007cc4:	f7ff ffc4 	bl	8007c50 <global_stdio_init.part.0>
 8007cc8:	e7f2      	b.n	8007cb0 <__sinit+0xc>
 8007cca:	bf00      	nop
 8007ccc:	08007c11 	.word	0x08007c11
 8007cd0:	20000998 	.word	0x20000998

08007cd4 <_fwalk_sglue>:
 8007cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd8:	4607      	mov	r7, r0
 8007cda:	4688      	mov	r8, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	2600      	movs	r6, #0
 8007ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ce4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ce8:	d505      	bpl.n	8007cf6 <_fwalk_sglue+0x22>
 8007cea:	6824      	ldr	r4, [r4, #0]
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d1f7      	bne.n	8007ce0 <_fwalk_sglue+0xc>
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d907      	bls.n	8007d0c <_fwalk_sglue+0x38>
 8007cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d00:	3301      	adds	r3, #1
 8007d02:	d003      	beq.n	8007d0c <_fwalk_sglue+0x38>
 8007d04:	4629      	mov	r1, r5
 8007d06:	4638      	mov	r0, r7
 8007d08:	47c0      	blx	r8
 8007d0a:	4306      	orrs	r6, r0
 8007d0c:	3568      	adds	r5, #104	@ 0x68
 8007d0e:	e7e9      	b.n	8007ce4 <_fwalk_sglue+0x10>

08007d10 <__sread>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	f000 ff4e 	bl	8008bb8 <_read_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	bfab      	itete	ge
 8007d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d22:	89a3      	ldrhlt	r3, [r4, #12]
 8007d24:	181b      	addge	r3, r3, r0
 8007d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d2a:	bfac      	ite	ge
 8007d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d2e:	81a3      	strhlt	r3, [r4, #12]
 8007d30:	bd10      	pop	{r4, pc}

08007d32 <__seofread>:
 8007d32:	2000      	movs	r0, #0
 8007d34:	4770      	bx	lr

08007d36 <__swrite>:
 8007d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3a:	461f      	mov	r7, r3
 8007d3c:	898b      	ldrh	r3, [r1, #12]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	05db      	lsls	r3, r3, #23
 8007d42:	460c      	mov	r4, r1
 8007d44:	4616      	mov	r6, r2
 8007d46:	d505      	bpl.n	8007d54 <__swrite+0x1e>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d50:	f000 ff20 	bl	8008b94 <_lseek_r>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	4632      	mov	r2, r6
 8007d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	4628      	mov	r0, r5
 8007d60:	463b      	mov	r3, r7
 8007d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6a:	f000 bf37 	b.w	8008bdc <_write_r>

08007d6e <__sseek>:
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	460c      	mov	r4, r1
 8007d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d76:	f000 ff0d 	bl	8008b94 <_lseek_r>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	bf15      	itete	ne
 8007d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d8a:	81a3      	strheq	r3, [r4, #12]
 8007d8c:	bf18      	it	ne
 8007d8e:	81a3      	strhne	r3, [r4, #12]
 8007d90:	bd10      	pop	{r4, pc}

08007d92 <__sclose>:
 8007d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d96:	f000 beed 	b.w	8008b74 <_close_r>

08007d9a <memset>:
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4402      	add	r2, r0
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d100      	bne.n	8007da4 <memset+0xa>
 8007da2:	4770      	bx	lr
 8007da4:	f803 1b01 	strb.w	r1, [r3], #1
 8007da8:	e7f9      	b.n	8007d9e <memset+0x4>

08007daa <strncmp>:
 8007daa:	b510      	push	{r4, lr}
 8007dac:	b16a      	cbz	r2, 8007dca <strncmp+0x20>
 8007dae:	3901      	subs	r1, #1
 8007db0:	1884      	adds	r4, r0, r2
 8007db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d103      	bne.n	8007dc6 <strncmp+0x1c>
 8007dbe:	42a0      	cmp	r0, r4
 8007dc0:	d001      	beq.n	8007dc6 <strncmp+0x1c>
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d1f5      	bne.n	8007db2 <strncmp+0x8>
 8007dc6:	1ad0      	subs	r0, r2, r3
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	4610      	mov	r0, r2
 8007dcc:	e7fc      	b.n	8007dc8 <strncmp+0x1e>
	...

08007dd0 <strtok>:
 8007dd0:	4b16      	ldr	r3, [pc, #88]	@ (8007e2c <strtok+0x5c>)
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	681f      	ldr	r7, [r3, #0]
 8007dd8:	4605      	mov	r5, r0
 8007dda:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007ddc:	460e      	mov	r6, r1
 8007dde:	b9ec      	cbnz	r4, 8007e1c <strtok+0x4c>
 8007de0:	2050      	movs	r0, #80	@ 0x50
 8007de2:	f001 fb45 	bl	8009470 <malloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6478      	str	r0, [r7, #68]	@ 0x44
 8007dea:	b920      	cbnz	r0, 8007df6 <strtok+0x26>
 8007dec:	215b      	movs	r1, #91	@ 0x5b
 8007dee:	4b10      	ldr	r3, [pc, #64]	@ (8007e30 <strtok+0x60>)
 8007df0:	4810      	ldr	r0, [pc, #64]	@ (8007e34 <strtok+0x64>)
 8007df2:	f000 ff51 	bl	8008c98 <__assert_func>
 8007df6:	e9c0 4400 	strd	r4, r4, [r0]
 8007dfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007dfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007e02:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007e06:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007e0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007e0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007e12:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007e16:	6184      	str	r4, [r0, #24]
 8007e18:	7704      	strb	r4, [r0, #28]
 8007e1a:	6244      	str	r4, [r0, #36]	@ 0x24
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e22:	2301      	movs	r3, #1
 8007e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	f000 b806 	b.w	8007e38 <__strtok_r>
 8007e2c:	2000055c 	.word	0x2000055c
 8007e30:	0800c4b1 	.word	0x0800c4b1
 8007e34:	0800c4c8 	.word	0x0800c4c8

08007e38 <__strtok_r>:
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	b908      	cbnz	r0, 8007e42 <__strtok_r+0xa>
 8007e3e:	6814      	ldr	r4, [r2, #0]
 8007e40:	b144      	cbz	r4, 8007e54 <__strtok_r+0x1c>
 8007e42:	460f      	mov	r7, r1
 8007e44:	4620      	mov	r0, r4
 8007e46:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e4e:	b91e      	cbnz	r6, 8007e58 <__strtok_r+0x20>
 8007e50:	b965      	cbnz	r5, 8007e6c <__strtok_r+0x34>
 8007e52:	6015      	str	r5, [r2, #0]
 8007e54:	2000      	movs	r0, #0
 8007e56:	e005      	b.n	8007e64 <__strtok_r+0x2c>
 8007e58:	42b5      	cmp	r5, r6
 8007e5a:	d1f6      	bne.n	8007e4a <__strtok_r+0x12>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1f0      	bne.n	8007e42 <__strtok_r+0xa>
 8007e60:	6014      	str	r4, [r2, #0]
 8007e62:	7003      	strb	r3, [r0, #0]
 8007e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e66:	461c      	mov	r4, r3
 8007e68:	e00c      	b.n	8007e84 <__strtok_r+0x4c>
 8007e6a:	b915      	cbnz	r5, 8007e72 <__strtok_r+0x3a>
 8007e6c:	460e      	mov	r6, r1
 8007e6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007e76:	42ab      	cmp	r3, r5
 8007e78:	d1f7      	bne.n	8007e6a <__strtok_r+0x32>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f3      	beq.n	8007e66 <__strtok_r+0x2e>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007e84:	6014      	str	r4, [r2, #0]
 8007e86:	e7ed      	b.n	8007e64 <__strtok_r+0x2c>

08007e88 <difftime>:
 8007e88:	b508      	push	{r3, lr}
 8007e8a:	1a80      	subs	r0, r0, r2
 8007e8c:	eb61 0103 	sbc.w	r1, r1, r3
 8007e90:	f7f8 fb0e 	bl	80004b0 <__aeabi_l2d>
 8007e94:	bd08      	pop	{r3, pc}
	...

08007e98 <localtime>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <localtime+0x30>)
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	681d      	ldr	r5, [r3, #0]
 8007ea0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8007ea2:	b953      	cbnz	r3, 8007eba <localtime+0x22>
 8007ea4:	2024      	movs	r0, #36	@ 0x24
 8007ea6:	f001 fae3 	bl	8009470 <malloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6368      	str	r0, [r5, #52]	@ 0x34
 8007eae:	b920      	cbnz	r0, 8007eba <localtime+0x22>
 8007eb0:	2132      	movs	r1, #50	@ 0x32
 8007eb2:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <localtime+0x34>)
 8007eb4:	4806      	ldr	r0, [pc, #24]	@ (8007ed0 <localtime+0x38>)
 8007eb6:	f000 feef 	bl	8008c98 <__assert_func>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8007ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec2:	f000 b807 	b.w	8007ed4 <localtime_r>
 8007ec6:	bf00      	nop
 8007ec8:	2000055c 	.word	0x2000055c
 8007ecc:	0800c4b1 	.word	0x0800c4b1
 8007ed0:	0800c522 	.word	0x0800c522

08007ed4 <localtime_r>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	4680      	mov	r8, r0
 8007edc:	f002 f9aa 	bl	800a234 <__gettzinfo>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	f002 f9a9 	bl	800a23c <gmtime_r>
 8007eea:	6943      	ldr	r3, [r0, #20]
 8007eec:	4604      	mov	r4, r0
 8007eee:	0799      	lsls	r1, r3, #30
 8007ef0:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8007ef4:	d106      	bne.n	8007f04 <localtime_r+0x30>
 8007ef6:	2264      	movs	r2, #100	@ 0x64
 8007ef8:	fb97 f3f2 	sdiv	r3, r7, r2
 8007efc:	fb02 7313 	mls	r3, r2, r3, r7
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d170      	bne.n	8007fe6 <localtime_r+0x112>
 8007f04:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007f08:	fb97 f3f2 	sdiv	r3, r7, r2
 8007f0c:	fb02 7313 	mls	r3, r2, r3, r7
 8007f10:	fab3 f383 	clz	r3, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	2230      	movs	r2, #48	@ 0x30
 8007f18:	4e63      	ldr	r6, [pc, #396]	@ (80080a8 <localtime_r+0x1d4>)
 8007f1a:	fb02 6603 	mla	r6, r2, r3, r6
 8007f1e:	f000 fbf3 	bl	8008708 <__tz_lock>
 8007f22:	f000 fbfd 	bl	8008720 <_tzset_unlocked>
 8007f26:	4b61      	ldr	r3, [pc, #388]	@ (80080ac <localtime_r+0x1d8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d06a      	beq.n	8008004 <localtime_r+0x130>
 8007f2e:	686b      	ldr	r3, [r5, #4]
 8007f30:	42bb      	cmp	r3, r7
 8007f32:	d15a      	bne.n	8007fea <localtime_r+0x116>
 8007f34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f38:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8007f3c:	682f      	ldr	r7, [r5, #0]
 8007f3e:	2f00      	cmp	r7, #0
 8007f40:	d15b      	bne.n	8007ffa <localtime_r+0x126>
 8007f42:	4282      	cmp	r2, r0
 8007f44:	eb73 0101 	sbcs.w	r1, r3, r1
 8007f48:	db5e      	blt.n	8008008 <localtime_r+0x134>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	6223      	str	r3, [r4, #32]
 8007f4e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8007f50:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007f54:	fb93 f0f2 	sdiv	r0, r3, r2
 8007f58:	fb02 3310 	mls	r3, r2, r0, r3
 8007f5c:	223c      	movs	r2, #60	@ 0x3c
 8007f5e:	fb93 f5f2 	sdiv	r5, r3, r2
 8007f62:	fb02 3215 	mls	r2, r2, r5, r3
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	6861      	ldr	r1, [r4, #4]
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	68a2      	ldr	r2, [r4, #8]
 8007f6e:	1b49      	subs	r1, r1, r5
 8007f70:	1a12      	subs	r2, r2, r0
 8007f72:	2b3b      	cmp	r3, #59	@ 0x3b
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	6061      	str	r1, [r4, #4]
 8007f78:	60a2      	str	r2, [r4, #8]
 8007f7a:	dd51      	ble.n	8008020 <localtime_r+0x14c>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	6061      	str	r1, [r4, #4]
 8007f80:	3b3c      	subs	r3, #60	@ 0x3c
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	2b3b      	cmp	r3, #59	@ 0x3b
 8007f88:	dd50      	ble.n	800802c <localtime_r+0x158>
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	60a2      	str	r2, [r4, #8]
 8007f8e:	3b3c      	subs	r3, #60	@ 0x3c
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	2b17      	cmp	r3, #23
 8007f96:	dd4f      	ble.n	8008038 <localtime_r+0x164>
 8007f98:	69e2      	ldr	r2, [r4, #28]
 8007f9a:	3b18      	subs	r3, #24
 8007f9c:	3201      	adds	r2, #1
 8007f9e:	61e2      	str	r2, [r4, #28]
 8007fa0:	69a2      	ldr	r2, [r4, #24]
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	3201      	adds	r2, #1
 8007fa6:	2a07      	cmp	r2, #7
 8007fa8:	bfa8      	it	ge
 8007faa:	2200      	movge	r2, #0
 8007fac:	61a2      	str	r2, [r4, #24]
 8007fae:	68e2      	ldr	r2, [r4, #12]
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	3201      	adds	r2, #1
 8007fb4:	60e2      	str	r2, [r4, #12]
 8007fb6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8007fba:	428a      	cmp	r2, r1
 8007fbc:	dd0e      	ble.n	8007fdc <localtime_r+0x108>
 8007fbe:	2b0b      	cmp	r3, #11
 8007fc0:	eba2 0201 	sub.w	r2, r2, r1
 8007fc4:	60e2      	str	r2, [r4, #12]
 8007fc6:	f103 0201 	add.w	r2, r3, #1
 8007fca:	bf05      	ittet	eq
 8007fcc:	2200      	moveq	r2, #0
 8007fce:	6963      	ldreq	r3, [r4, #20]
 8007fd0:	6122      	strne	r2, [r4, #16]
 8007fd2:	3301      	addeq	r3, #1
 8007fd4:	bf02      	ittt	eq
 8007fd6:	6122      	streq	r2, [r4, #16]
 8007fd8:	6163      	streq	r3, [r4, #20]
 8007fda:	61e2      	streq	r2, [r4, #28]
 8007fdc:	f000 fb9a 	bl	8008714 <__tz_unlock>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e795      	b.n	8007f16 <localtime_r+0x42>
 8007fea:	4638      	mov	r0, r7
 8007fec:	f000 fae4 	bl	80085b8 <__tzcalc_limits>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d19f      	bne.n	8007f34 <localtime_r+0x60>
 8007ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff8:	e004      	b.n	8008004 <localtime_r+0x130>
 8007ffa:	4282      	cmp	r2, r0
 8007ffc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008000:	da02      	bge.n	8008008 <localtime_r+0x134>
 8008002:	2300      	movs	r3, #0
 8008004:	6223      	str	r3, [r4, #32]
 8008006:	e009      	b.n	800801c <localtime_r+0x148>
 8008008:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800800c:	4282      	cmp	r2, r0
 800800e:	418b      	sbcs	r3, r1
 8008010:	bfb4      	ite	lt
 8008012:	2301      	movlt	r3, #1
 8008014:	2300      	movge	r3, #0
 8008016:	6223      	str	r3, [r4, #32]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d198      	bne.n	8007f4e <localtime_r+0x7a>
 800801c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800801e:	e797      	b.n	8007f50 <localtime_r+0x7c>
 8008020:	2b00      	cmp	r3, #0
 8008022:	daaf      	bge.n	8007f84 <localtime_r+0xb0>
 8008024:	3901      	subs	r1, #1
 8008026:	6061      	str	r1, [r4, #4]
 8008028:	333c      	adds	r3, #60	@ 0x3c
 800802a:	e7aa      	b.n	8007f82 <localtime_r+0xae>
 800802c:	2b00      	cmp	r3, #0
 800802e:	dab0      	bge.n	8007f92 <localtime_r+0xbe>
 8008030:	3a01      	subs	r2, #1
 8008032:	60a2      	str	r2, [r4, #8]
 8008034:	333c      	adds	r3, #60	@ 0x3c
 8008036:	e7ab      	b.n	8007f90 <localtime_r+0xbc>
 8008038:	2b00      	cmp	r3, #0
 800803a:	dacf      	bge.n	8007fdc <localtime_r+0x108>
 800803c:	69e2      	ldr	r2, [r4, #28]
 800803e:	3318      	adds	r3, #24
 8008040:	3a01      	subs	r2, #1
 8008042:	61e2      	str	r2, [r4, #28]
 8008044:	69a2      	ldr	r2, [r4, #24]
 8008046:	60a3      	str	r3, [r4, #8]
 8008048:	3a01      	subs	r2, #1
 800804a:	bf48      	it	mi
 800804c:	2206      	movmi	r2, #6
 800804e:	61a2      	str	r2, [r4, #24]
 8008050:	68e2      	ldr	r2, [r4, #12]
 8008052:	3a01      	subs	r2, #1
 8008054:	60e2      	str	r2, [r4, #12]
 8008056:	2a00      	cmp	r2, #0
 8008058:	d1c0      	bne.n	8007fdc <localtime_r+0x108>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	3b01      	subs	r3, #1
 800805e:	d405      	bmi.n	800806c <localtime_r+0x198>
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008068:	60e3      	str	r3, [r4, #12]
 800806a:	e7b7      	b.n	8007fdc <localtime_r+0x108>
 800806c:	230b      	movs	r3, #11
 800806e:	6123      	str	r3, [r4, #16]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	1e5a      	subs	r2, r3, #1
 8008074:	6162      	str	r2, [r4, #20]
 8008076:	0792      	lsls	r2, r2, #30
 8008078:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800807c:	d105      	bne.n	800808a <localtime_r+0x1b6>
 800807e:	2164      	movs	r1, #100	@ 0x64
 8008080:	fb93 f2f1 	sdiv	r2, r3, r1
 8008084:	fb01 3212 	mls	r2, r1, r2, r3
 8008088:	b962      	cbnz	r2, 80080a4 <localtime_r+0x1d0>
 800808a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800808e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008092:	fb02 3311 	mls	r3, r2, r1, r3
 8008096:	fab3 f383 	clz	r3, r3
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80080a0:	61e3      	str	r3, [r4, #28]
 80080a2:	e7de      	b.n	8008062 <localtime_r+0x18e>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e7f9      	b.n	800809c <localtime_r+0x1c8>
 80080a8:	0800c5dc 	.word	0x0800c5dc
 80080ac:	200009bc 	.word	0x200009bc

080080b0 <validate_structure>:
 80080b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b2:	6801      	ldr	r1, [r0, #0]
 80080b4:	4604      	mov	r4, r0
 80080b6:	293b      	cmp	r1, #59	@ 0x3b
 80080b8:	d911      	bls.n	80080de <validate_structure+0x2e>
 80080ba:	223c      	movs	r2, #60	@ 0x3c
 80080bc:	4668      	mov	r0, sp
 80080be:	f000 fe09 	bl	8008cd4 <div>
 80080c2:	9a01      	ldr	r2, [sp, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	9900      	ldr	r1, [sp, #0]
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	440b      	add	r3, r1
 80080cc:	6063      	str	r3, [r4, #4]
 80080ce:	bfbb      	ittet	lt
 80080d0:	323c      	addlt	r2, #60	@ 0x3c
 80080d2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80080d6:	6022      	strge	r2, [r4, #0]
 80080d8:	6022      	strlt	r2, [r4, #0]
 80080da:	bfb8      	it	lt
 80080dc:	6063      	strlt	r3, [r4, #4]
 80080de:	6861      	ldr	r1, [r4, #4]
 80080e0:	293b      	cmp	r1, #59	@ 0x3b
 80080e2:	d911      	bls.n	8008108 <validate_structure+0x58>
 80080e4:	223c      	movs	r2, #60	@ 0x3c
 80080e6:	4668      	mov	r0, sp
 80080e8:	f000 fdf4 	bl	8008cd4 <div>
 80080ec:	9a01      	ldr	r2, [sp, #4]
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	440b      	add	r3, r1
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	bfbb      	ittet	lt
 80080fa:	323c      	addlt	r2, #60	@ 0x3c
 80080fc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008100:	6062      	strge	r2, [r4, #4]
 8008102:	6062      	strlt	r2, [r4, #4]
 8008104:	bfb8      	it	lt
 8008106:	60a3      	strlt	r3, [r4, #8]
 8008108:	68a1      	ldr	r1, [r4, #8]
 800810a:	2917      	cmp	r1, #23
 800810c:	d911      	bls.n	8008132 <validate_structure+0x82>
 800810e:	2218      	movs	r2, #24
 8008110:	4668      	mov	r0, sp
 8008112:	f000 fddf 	bl	8008cd4 <div>
 8008116:	9a01      	ldr	r2, [sp, #4]
 8008118:	68e3      	ldr	r3, [r4, #12]
 800811a:	9900      	ldr	r1, [sp, #0]
 800811c:	2a00      	cmp	r2, #0
 800811e:	440b      	add	r3, r1
 8008120:	60e3      	str	r3, [r4, #12]
 8008122:	bfbb      	ittet	lt
 8008124:	3218      	addlt	r2, #24
 8008126:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800812a:	60a2      	strge	r2, [r4, #8]
 800812c:	60a2      	strlt	r2, [r4, #8]
 800812e:	bfb8      	it	lt
 8008130:	60e3      	strlt	r3, [r4, #12]
 8008132:	6921      	ldr	r1, [r4, #16]
 8008134:	290b      	cmp	r1, #11
 8008136:	d911      	bls.n	800815c <validate_structure+0xac>
 8008138:	220c      	movs	r2, #12
 800813a:	4668      	mov	r0, sp
 800813c:	f000 fdca 	bl	8008cd4 <div>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	6963      	ldr	r3, [r4, #20]
 8008144:	9900      	ldr	r1, [sp, #0]
 8008146:	2a00      	cmp	r2, #0
 8008148:	440b      	add	r3, r1
 800814a:	6163      	str	r3, [r4, #20]
 800814c:	bfbb      	ittet	lt
 800814e:	320c      	addlt	r2, #12
 8008150:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008154:	6122      	strge	r2, [r4, #16]
 8008156:	6122      	strlt	r2, [r4, #16]
 8008158:	bfb8      	it	lt
 800815a:	6163      	strlt	r3, [r4, #20]
 800815c:	6963      	ldr	r3, [r4, #20]
 800815e:	079a      	lsls	r2, r3, #30
 8008160:	d11c      	bne.n	800819c <validate_structure+0xec>
 8008162:	2164      	movs	r1, #100	@ 0x64
 8008164:	fb93 f2f1 	sdiv	r2, r3, r1
 8008168:	fb01 3212 	mls	r2, r1, r2, r3
 800816c:	b9c2      	cbnz	r2, 80081a0 <validate_structure+0xf0>
 800816e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008172:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008176:	fb93 f1f2 	sdiv	r1, r3, r2
 800817a:	fb02 3311 	mls	r3, r2, r1, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	bf14      	ite	ne
 8008182:	231c      	movne	r3, #28
 8008184:	231d      	moveq	r3, #29
 8008186:	68e2      	ldr	r2, [r4, #12]
 8008188:	2a00      	cmp	r2, #0
 800818a:	dc0b      	bgt.n	80081a4 <validate_structure+0xf4>
 800818c:	200b      	movs	r0, #11
 800818e:	2164      	movs	r1, #100	@ 0x64
 8008190:	4d30      	ldr	r5, [pc, #192]	@ (8008254 <validate_structure+0x1a4>)
 8008192:	68e6      	ldr	r6, [r4, #12]
 8008194:	2e00      	cmp	r6, #0
 8008196:	dd30      	ble.n	80081fa <validate_structure+0x14a>
 8008198:	b003      	add	sp, #12
 800819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819c:	231c      	movs	r3, #28
 800819e:	e7f2      	b.n	8008186 <validate_structure+0xd6>
 80081a0:	231d      	movs	r3, #29
 80081a2:	e7f0      	b.n	8008186 <validate_structure+0xd6>
 80081a4:	4d2b      	ldr	r5, [pc, #172]	@ (8008254 <validate_structure+0x1a4>)
 80081a6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80081aa:	2a01      	cmp	r2, #1
 80081ac:	bf0c      	ite	eq
 80081ae:	4618      	moveq	r0, r3
 80081b0:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80081b4:	4281      	cmp	r1, r0
 80081b6:	ddef      	ble.n	8008198 <validate_structure+0xe8>
 80081b8:	3201      	adds	r2, #1
 80081ba:	1a09      	subs	r1, r1, r0
 80081bc:	2a0c      	cmp	r2, #12
 80081be:	60e1      	str	r1, [r4, #12]
 80081c0:	6122      	str	r2, [r4, #16]
 80081c2:	d1f0      	bne.n	80081a6 <validate_structure+0xf6>
 80081c4:	2100      	movs	r1, #0
 80081c6:	6963      	ldr	r3, [r4, #20]
 80081c8:	6121      	str	r1, [r4, #16]
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	0791      	lsls	r1, r2, #30
 80081ce:	6162      	str	r2, [r4, #20]
 80081d0:	d13c      	bne.n	800824c <validate_structure+0x19c>
 80081d2:	2164      	movs	r1, #100	@ 0x64
 80081d4:	fb92 f0f1 	sdiv	r0, r2, r1
 80081d8:	fb01 2210 	mls	r2, r1, r0, r2
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d137      	bne.n	8008250 <validate_structure+0x1a0>
 80081e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80081e4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80081e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80081ec:	fb02 3311 	mls	r3, r2, r1, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf14      	ite	ne
 80081f4:	231c      	movne	r3, #28
 80081f6:	231d      	moveq	r3, #29
 80081f8:	e7d5      	b.n	80081a6 <validate_structure+0xf6>
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	3a01      	subs	r2, #1
 80081fe:	6122      	str	r2, [r4, #16]
 8008200:	3201      	adds	r2, #1
 8008202:	d116      	bne.n	8008232 <validate_structure+0x182>
 8008204:	6963      	ldr	r3, [r4, #20]
 8008206:	1e5a      	subs	r2, r3, #1
 8008208:	0797      	lsls	r7, r2, #30
 800820a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800820e:	d119      	bne.n	8008244 <validate_structure+0x194>
 8008210:	fb92 f7f1 	sdiv	r7, r2, r1
 8008214:	fb01 2217 	mls	r2, r1, r7, r2
 8008218:	b9b2      	cbnz	r2, 8008248 <validate_structure+0x198>
 800821a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800821e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8008222:	fb93 f7f2 	sdiv	r7, r3, r2
 8008226:	fb02 3317 	mls	r3, r2, r7, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	bf14      	ite	ne
 800822e:	231c      	movne	r3, #28
 8008230:	231d      	moveq	r3, #29
 8008232:	6922      	ldr	r2, [r4, #16]
 8008234:	2a01      	cmp	r2, #1
 8008236:	bf0c      	ite	eq
 8008238:	461a      	moveq	r2, r3
 800823a:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800823e:	4432      	add	r2, r6
 8008240:	60e2      	str	r2, [r4, #12]
 8008242:	e7a6      	b.n	8008192 <validate_structure+0xe2>
 8008244:	231c      	movs	r3, #28
 8008246:	e7f4      	b.n	8008232 <validate_structure+0x182>
 8008248:	231d      	movs	r3, #29
 800824a:	e7f2      	b.n	8008232 <validate_structure+0x182>
 800824c:	231c      	movs	r3, #28
 800824e:	e7aa      	b.n	80081a6 <validate_structure+0xf6>
 8008250:	231d      	movs	r3, #29
 8008252:	e7a8      	b.n	80081a6 <validate_structure+0xf6>
 8008254:	0800c5ac 	.word	0x0800c5ac

08008258 <mktime>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	b085      	sub	sp, #20
 800825e:	4607      	mov	r7, r0
 8008260:	f001 ffe8 	bl	800a234 <__gettzinfo>
 8008264:	4681      	mov	r9, r0
 8008266:	4638      	mov	r0, r7
 8008268:	f7ff ff22 	bl	80080b0 <validate_structure>
 800826c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008270:	223c      	movs	r2, #60	@ 0x3c
 8008272:	fb02 4403 	mla	r4, r2, r3, r4
 8008276:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	697d      	ldr	r5, [r7, #20]
 800827e:	fb02 4403 	mla	r4, r2, r3, r4
 8008282:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008286:	4ac1      	ldr	r2, [pc, #772]	@ (800858c <mktime+0x334>)
 8008288:	3e01      	subs	r6, #1
 800828a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	4416      	add	r6, r2
 8008292:	dd11      	ble.n	80082b8 <mktime+0x60>
 8008294:	07a9      	lsls	r1, r5, #30
 8008296:	d10f      	bne.n	80082b8 <mktime+0x60>
 8008298:	2264      	movs	r2, #100	@ 0x64
 800829a:	fb95 f3f2 	sdiv	r3, r5, r2
 800829e:	fb02 5313 	mls	r3, r2, r3, r5
 80082a2:	b943      	cbnz	r3, 80082b6 <mktime+0x5e>
 80082a4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80082a8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80082ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80082b0:	fb02 3311 	mls	r3, r2, r1, r3
 80082b4:	b903      	cbnz	r3, 80082b8 <mktime+0x60>
 80082b6:	3601      	adds	r6, #1
 80082b8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80082bc:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80082c0:	3310      	adds	r3, #16
 80082c2:	4293      	cmp	r3, r2
 80082c4:	61fe      	str	r6, [r7, #28]
 80082c6:	f200 8167 	bhi.w	8008598 <mktime+0x340>
 80082ca:	2d46      	cmp	r5, #70	@ 0x46
 80082cc:	f340 808e 	ble.w	80083ec <mktime+0x194>
 80082d0:	2346      	movs	r3, #70	@ 0x46
 80082d2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80082d6:	2164      	movs	r1, #100	@ 0x64
 80082d8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80082dc:	079a      	lsls	r2, r3, #30
 80082de:	d17f      	bne.n	80083e0 <mktime+0x188>
 80082e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80082e4:	fb01 3212 	mls	r2, r1, r2, r3
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d17c      	bne.n	80083e6 <mktime+0x18e>
 80082ec:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80082f0:	fb92 fef0 	sdiv	lr, r2, r0
 80082f4:	fb00 221e 	mls	r2, r0, lr, r2
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	bf14      	ite	ne
 80082fc:	4662      	movne	r2, ip
 80082fe:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008302:	3301      	adds	r3, #1
 8008304:	429d      	cmp	r5, r3
 8008306:	4416      	add	r6, r2
 8008308:	d1e8      	bne.n	80082dc <mktime+0x84>
 800830a:	4ba1      	ldr	r3, [pc, #644]	@ (8008590 <mktime+0x338>)
 800830c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008310:	fbc6 4803 	smlal	r4, r8, r6, r3
 8008314:	f000 f9f8 	bl	8008708 <__tz_lock>
 8008318:	f000 fa02 	bl	8008720 <_tzset_unlocked>
 800831c:	4b9d      	ldr	r3, [pc, #628]	@ (8008594 <mktime+0x33c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8140 	beq.w	80085a6 <mktime+0x34e>
 8008326:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800832a:	6978      	ldr	r0, [r7, #20]
 800832c:	4653      	mov	r3, sl
 800832e:	2b01      	cmp	r3, #1
 8008330:	bfa8      	it	ge
 8008332:	2301      	movge	r3, #1
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800833a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800833e:	4283      	cmp	r3, r0
 8008340:	f040 8096 	bne.w	8008470 <mktime+0x218>
 8008344:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008348:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800834c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008350:	1a13      	subs	r3, r2, r0
 8008352:	9303      	str	r3, [sp, #12]
 8008354:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008358:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	9a02      	ldr	r2, [sp, #8]
 8008360:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008364:	ebb2 0e03 	subs.w	lr, r2, r3
 8008368:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800836c:	4574      	cmp	r4, lr
 800836e:	eb78 0201 	sbcs.w	r2, r8, r1
 8008372:	f280 8085 	bge.w	8008480 <mktime+0x228>
 8008376:	f8d9 2000 	ldr.w	r2, [r9]
 800837a:	2a00      	cmp	r2, #0
 800837c:	f000 808d 	beq.w	800849a <mktime+0x242>
 8008380:	9a03      	ldr	r2, [sp, #12]
 8008382:	4294      	cmp	r4, r2
 8008384:	eb78 020b 	sbcs.w	r2, r8, fp
 8008388:	f2c0 810a 	blt.w	80085a0 <mktime+0x348>
 800838c:	4574      	cmp	r4, lr
 800838e:	eb78 0101 	sbcs.w	r1, r8, r1
 8008392:	bfb4      	ite	lt
 8008394:	f04f 0b01 	movlt.w	fp, #1
 8008398:	f04f 0b00 	movge.w	fp, #0
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	f280 8087 	bge.w	80084b2 <mktime+0x25a>
 80083a4:	f1bb 0f01 	cmp.w	fp, #1
 80083a8:	f040 80ff 	bne.w	80085aa <mktime+0x352>
 80083ac:	f04f 0b01 	mov.w	fp, #1
 80083b0:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80083b4:	191c      	adds	r4, r3, r4
 80083b6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80083ba:	f000 f9ab 	bl	8008714 <__tz_unlock>
 80083be:	2307      	movs	r3, #7
 80083c0:	3604      	adds	r6, #4
 80083c2:	fb96 f3f3 	sdiv	r3, r6, r3
 80083c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80083ca:	1af6      	subs	r6, r6, r3
 80083cc:	f100 80db 	bmi.w	8008586 <mktime+0x32e>
 80083d0:	f8c7 b020 	str.w	fp, [r7, #32]
 80083d4:	61be      	str	r6, [r7, #24]
 80083d6:	4620      	mov	r0, r4
 80083d8:	4641      	mov	r1, r8
 80083da:	b005      	add	sp, #20
 80083dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e0:	f240 126d 	movw	r2, #365	@ 0x16d
 80083e4:	e78d      	b.n	8008302 <mktime+0xaa>
 80083e6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80083ea:	e78a      	b.n	8008302 <mktime+0xaa>
 80083ec:	d08d      	beq.n	800830a <mktime+0xb2>
 80083ee:	2345      	movs	r3, #69	@ 0x45
 80083f0:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80083f4:	2164      	movs	r1, #100	@ 0x64
 80083f6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80083fa:	e012      	b.n	8008422 <mktime+0x1ca>
 80083fc:	bb62      	cbnz	r2, 8008458 <mktime+0x200>
 80083fe:	fb93 f2f1 	sdiv	r2, r3, r1
 8008402:	fb01 3212 	mls	r2, r1, r2, r3
 8008406:	bb52      	cbnz	r2, 800845e <mktime+0x206>
 8008408:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800840c:	fb92 fef0 	sdiv	lr, r2, r0
 8008410:	fb00 221e 	mls	r2, r0, lr, r2
 8008414:	2a00      	cmp	r2, #0
 8008416:	bf14      	ite	ne
 8008418:	4662      	movne	r2, ip
 800841a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800841e:	1ab6      	subs	r6, r6, r2
 8008420:	3b01      	subs	r3, #1
 8008422:	429d      	cmp	r5, r3
 8008424:	f003 0203 	and.w	r2, r3, #3
 8008428:	dbe8      	blt.n	80083fc <mktime+0x1a4>
 800842a:	b9da      	cbnz	r2, 8008464 <mktime+0x20c>
 800842c:	2264      	movs	r2, #100	@ 0x64
 800842e:	fb95 f3f2 	sdiv	r3, r5, r2
 8008432:	fb02 5313 	mls	r3, r2, r3, r5
 8008436:	b9c3      	cbnz	r3, 800846a <mktime+0x212>
 8008438:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800843c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008440:	fb93 f1f2 	sdiv	r1, r3, r2
 8008444:	fb02 3311 	mls	r3, r2, r1, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	f240 136d 	movw	r3, #365	@ 0x16d
 800844e:	bf08      	it	eq
 8008450:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008454:	1af6      	subs	r6, r6, r3
 8008456:	e758      	b.n	800830a <mktime+0xb2>
 8008458:	f240 126d 	movw	r2, #365	@ 0x16d
 800845c:	e7df      	b.n	800841e <mktime+0x1c6>
 800845e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008462:	e7dc      	b.n	800841e <mktime+0x1c6>
 8008464:	f240 136d 	movw	r3, #365	@ 0x16d
 8008468:	e7f4      	b.n	8008454 <mktime+0x1fc>
 800846a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800846e:	e7f1      	b.n	8008454 <mktime+0x1fc>
 8008470:	f000 f8a2 	bl	80085b8 <__tzcalc_limits>
 8008474:	2800      	cmp	r0, #0
 8008476:	f47f af65 	bne.w	8008344 <mktime+0xec>
 800847a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800847e:	e791      	b.n	80083a4 <mktime+0x14c>
 8008480:	9a02      	ldr	r2, [sp, #8]
 8008482:	1a12      	subs	r2, r2, r0
 8008484:	9202      	str	r2, [sp, #8]
 8008486:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800848a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800848e:	9a02      	ldr	r2, [sp, #8]
 8008490:	4294      	cmp	r4, r2
 8008492:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008496:	dbf0      	blt.n	800847a <mktime+0x222>
 8008498:	e76d      	b.n	8008376 <mktime+0x11e>
 800849a:	9a03      	ldr	r2, [sp, #12]
 800849c:	4294      	cmp	r4, r2
 800849e:	eb78 020b 	sbcs.w	r2, r8, fp
 80084a2:	f6ff af73 	blt.w	800838c <mktime+0x134>
 80084a6:	f1ba 0f00 	cmp.w	sl, #0
 80084aa:	f6ff af7f 	blt.w	80083ac <mktime+0x154>
 80084ae:	f04f 0b01 	mov.w	fp, #1
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	ea82 020b 	eor.w	r2, r2, fp
 80084b8:	2a01      	cmp	r2, #1
 80084ba:	f47f af73 	bne.w	80083a4 <mktime+0x14c>
 80084be:	f1bb 0f00 	cmp.w	fp, #0
 80084c2:	d035      	beq.n	8008530 <mktime+0x2d8>
 80084c4:	1a1b      	subs	r3, r3, r0
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	191c      	adds	r4, r3, r4
 80084ca:	441a      	add	r2, r3
 80084cc:	603a      	str	r2, [r7, #0]
 80084ce:	4638      	mov	r0, r7
 80084d0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80084d4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80084d8:	f7ff fdea 	bl	80080b0 <validate_structure>
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	ebb2 020a 	subs.w	r2, r2, sl
 80084e2:	f43f af5f 	beq.w	80083a4 <mktime+0x14c>
 80084e6:	2a01      	cmp	r2, #1
 80084e8:	dc24      	bgt.n	8008534 <mktime+0x2dc>
 80084ea:	1c93      	adds	r3, r2, #2
 80084ec:	bfd8      	it	le
 80084ee:	2201      	movle	r2, #1
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	18d3      	adds	r3, r2, r3
 80084f4:	d527      	bpl.n	8008546 <mktime+0x2ee>
 80084f6:	1e6b      	subs	r3, r5, #1
 80084f8:	0798      	lsls	r0, r3, #30
 80084fa:	d11e      	bne.n	800853a <mktime+0x2e2>
 80084fc:	2164      	movs	r1, #100	@ 0x64
 80084fe:	fb93 f0f1 	sdiv	r0, r3, r1
 8008502:	fb01 3310 	mls	r3, r1, r0, r3
 8008506:	b9db      	cbnz	r3, 8008540 <mktime+0x2e8>
 8008508:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800850c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008510:	fb95 f1f3 	sdiv	r1, r5, r3
 8008514:	fb03 5511 	mls	r5, r3, r1, r5
 8008518:	2d00      	cmp	r5, #0
 800851a:	f240 136d 	movw	r3, #365	@ 0x16d
 800851e:	bf18      	it	ne
 8008520:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	4416      	add	r6, r2
 8008528:	e73c      	b.n	80083a4 <mktime+0x14c>
 800852a:	f04f 0b00 	mov.w	fp, #0
 800852e:	e7c0      	b.n	80084b2 <mktime+0x25a>
 8008530:	1ac3      	subs	r3, r0, r3
 8008532:	e7c8      	b.n	80084c6 <mktime+0x26e>
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	e7da      	b.n	80084f0 <mktime+0x298>
 800853a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800853e:	e7f1      	b.n	8008524 <mktime+0x2cc>
 8008540:	f240 136d 	movw	r3, #365	@ 0x16d
 8008544:	e7ee      	b.n	8008524 <mktime+0x2cc>
 8008546:	07a9      	lsls	r1, r5, #30
 8008548:	d117      	bne.n	800857a <mktime+0x322>
 800854a:	2064      	movs	r0, #100	@ 0x64
 800854c:	fb95 f1f0 	sdiv	r1, r5, r0
 8008550:	fb00 5111 	mls	r1, r0, r1, r5
 8008554:	b9a1      	cbnz	r1, 8008580 <mktime+0x328>
 8008556:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800855a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800855e:	fb95 f0f1 	sdiv	r0, r5, r1
 8008562:	fb01 5510 	mls	r5, r1, r0, r5
 8008566:	2d00      	cmp	r5, #0
 8008568:	f240 116d 	movw	r1, #365	@ 0x16d
 800856c:	bf08      	it	eq
 800856e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8008572:	428b      	cmp	r3, r1
 8008574:	bfa8      	it	ge
 8008576:	1a5b      	subge	r3, r3, r1
 8008578:	e7d4      	b.n	8008524 <mktime+0x2cc>
 800857a:	f240 116d 	movw	r1, #365	@ 0x16d
 800857e:	e7f8      	b.n	8008572 <mktime+0x31a>
 8008580:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8008584:	e7f5      	b.n	8008572 <mktime+0x31a>
 8008586:	3607      	adds	r6, #7
 8008588:	e722      	b.n	80083d0 <mktime+0x178>
 800858a:	bf00      	nop
 800858c:	0800c57c 	.word	0x0800c57c
 8008590:	00015180 	.word	0x00015180
 8008594:	200009bc 	.word	0x200009bc
 8008598:	f04f 34ff 	mov.w	r4, #4294967295
 800859c:	46a0      	mov	r8, r4
 800859e:	e71a      	b.n	80083d6 <mktime+0x17e>
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	dac1      	bge.n	800852a <mktime+0x2d2>
 80085a6:	f04f 0b00 	mov.w	fp, #0
 80085aa:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80085ae:	191c      	adds	r4, r3, r4
 80085b0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80085b4:	e701      	b.n	80083ba <mktime+0x162>
 80085b6:	bf00      	nop

080085b8 <__tzcalc_limits>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	4604      	mov	r4, r0
 80085be:	f001 fe39 	bl	800a234 <__gettzinfo>
 80085c2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80085c6:	429c      	cmp	r4, r3
 80085c8:	f340 8098 	ble.w	80086fc <__tzcalc_limits+0x144>
 80085cc:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 80085d0:	f240 126d 	movw	r2, #365	@ 0x16d
 80085d4:	19e5      	adds	r5, r4, r7
 80085d6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80085da:	10ad      	asrs	r5, r5, #2
 80085dc:	fb02 5503 	mla	r5, r2, r3, r5
 80085e0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80085e4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 80085e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ec:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 80085f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80085f4:	441d      	add	r5, r3
 80085f6:	eb04 030c 	add.w	r3, r4, ip
 80085fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fe:	4601      	mov	r1, r0
 8008600:	4f3f      	ldr	r7, [pc, #252]	@ (8008700 <__tzcalc_limits+0x148>)
 8008602:	6044      	str	r4, [r0, #4]
 8008604:	441d      	add	r5, r3
 8008606:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800860a:	7a0b      	ldrb	r3, [r1, #8]
 800860c:	694a      	ldr	r2, [r1, #20]
 800860e:	2b4a      	cmp	r3, #74	@ 0x4a
 8008610:	d133      	bne.n	800867a <__tzcalc_limits+0xc2>
 8008612:	07a6      	lsls	r6, r4, #30
 8008614:	eb05 0302 	add.w	r3, r5, r2
 8008618:	d106      	bne.n	8008628 <__tzcalc_limits+0x70>
 800861a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800861e:	fb94 f6fe 	sdiv	r6, r4, lr
 8008622:	fb0e 4616 	mls	r6, lr, r6, r4
 8008626:	b936      	cbnz	r6, 8008636 <__tzcalc_limits+0x7e>
 8008628:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800862c:	fb94 f6fe 	sdiv	r6, r4, lr
 8008630:	fb0e 4616 	mls	r6, lr, r6, r4
 8008634:	b9fe      	cbnz	r6, 8008676 <__tzcalc_limits+0xbe>
 8008636:	2a3b      	cmp	r2, #59	@ 0x3b
 8008638:	bfd4      	ite	le
 800863a:	2200      	movle	r2, #0
 800863c:	2201      	movgt	r2, #1
 800863e:	4413      	add	r3, r2
 8008640:	3b01      	subs	r3, #1
 8008642:	698a      	ldr	r2, [r1, #24]
 8008644:	17d6      	asrs	r6, r2, #31
 8008646:	fbc3 2607 	smlal	r2, r6, r3, r7
 800864a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800864c:	18d2      	adds	r2, r2, r3
 800864e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8008652:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008656:	3128      	adds	r1, #40	@ 0x28
 8008658:	458c      	cmp	ip, r1
 800865a:	d1d6      	bne.n	800860a <__tzcalc_limits+0x52>
 800865c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8008660:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8008664:	428c      	cmp	r4, r1
 8008666:	4193      	sbcs	r3, r2
 8008668:	bfb4      	ite	lt
 800866a:	2301      	movlt	r3, #1
 800866c:	2300      	movge	r3, #0
 800866e:	6003      	str	r3, [r0, #0]
 8008670:	2001      	movs	r0, #1
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	2200      	movs	r2, #0
 8008678:	e7e1      	b.n	800863e <__tzcalc_limits+0x86>
 800867a:	2b44      	cmp	r3, #68	@ 0x44
 800867c:	d101      	bne.n	8008682 <__tzcalc_limits+0xca>
 800867e:	18ab      	adds	r3, r5, r2
 8008680:	e7df      	b.n	8008642 <__tzcalc_limits+0x8a>
 8008682:	07a3      	lsls	r3, r4, #30
 8008684:	d105      	bne.n	8008692 <__tzcalc_limits+0xda>
 8008686:	2664      	movs	r6, #100	@ 0x64
 8008688:	fb94 f3f6 	sdiv	r3, r4, r6
 800868c:	fb06 4313 	mls	r3, r6, r3, r4
 8008690:	bb73      	cbnz	r3, 80086f0 <__tzcalc_limits+0x138>
 8008692:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008696:	fb94 f6f3 	sdiv	r6, r4, r3
 800869a:	fb03 4616 	mls	r6, r3, r6, r4
 800869e:	fab6 f686 	clz	r6, r6
 80086a2:	0976      	lsrs	r6, r6, #5
 80086a4:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 80086a8:	462b      	mov	r3, r5
 80086aa:	f04f 0800 	mov.w	r8, #0
 80086ae:	f8df e054 	ldr.w	lr, [pc, #84]	@ 8008704 <__tzcalc_limits+0x14c>
 80086b2:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80086b6:	fb0a e606 	mla	r6, sl, r6, lr
 80086ba:	f108 0801 	add.w	r8, r8, #1
 80086be:	45c1      	cmp	r9, r8
 80086c0:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 80086c4:	dc16      	bgt.n	80086f4 <__tzcalc_limits+0x13c>
 80086c6:	2607      	movs	r6, #7
 80086c8:	f103 0804 	add.w	r8, r3, #4
 80086cc:	fb98 f6f6 	sdiv	r6, r8, r6
 80086d0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80086d4:	eba8 0606 	sub.w	r6, r8, r6
 80086d8:	1b92      	subs	r2, r2, r6
 80086da:	690e      	ldr	r6, [r1, #16]
 80086dc:	bf48      	it	mi
 80086de:	3207      	addmi	r2, #7
 80086e0:	3e01      	subs	r6, #1
 80086e2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80086e6:	4432      	add	r2, r6
 80086e8:	4572      	cmp	r2, lr
 80086ea:	da05      	bge.n	80086f8 <__tzcalc_limits+0x140>
 80086ec:	4413      	add	r3, r2
 80086ee:	e7a8      	b.n	8008642 <__tzcalc_limits+0x8a>
 80086f0:	2601      	movs	r6, #1
 80086f2:	e7d7      	b.n	80086a4 <__tzcalc_limits+0xec>
 80086f4:	4473      	add	r3, lr
 80086f6:	e7e0      	b.n	80086ba <__tzcalc_limits+0x102>
 80086f8:	3a07      	subs	r2, #7
 80086fa:	e7f5      	b.n	80086e8 <__tzcalc_limits+0x130>
 80086fc:	2000      	movs	r0, #0
 80086fe:	e7b8      	b.n	8008672 <__tzcalc_limits+0xba>
 8008700:	00015180 	.word	0x00015180
 8008704:	0800c5d8 	.word	0x0800c5d8

08008708 <__tz_lock>:
 8008708:	4801      	ldr	r0, [pc, #4]	@ (8008710 <__tz_lock+0x8>)
 800870a:	f000 baa4 	b.w	8008c56 <__retarget_lock_acquire>
 800870e:	bf00      	nop
 8008710:	200009c4 	.word	0x200009c4

08008714 <__tz_unlock>:
 8008714:	4801      	ldr	r0, [pc, #4]	@ (800871c <__tz_unlock+0x8>)
 8008716:	f000 baa0 	b.w	8008c5a <__retarget_lock_release>
 800871a:	bf00      	nop
 800871c:	200009c4 	.word	0x200009c4

08008720 <_tzset_unlocked>:
 8008720:	4b01      	ldr	r3, [pc, #4]	@ (8008728 <_tzset_unlocked+0x8>)
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	f000 b802 	b.w	800872c <_tzset_unlocked_r>
 8008728:	2000055c 	.word	0x2000055c

0800872c <_tzset_unlocked_r>:
 800872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	b08d      	sub	sp, #52	@ 0x34
 8008732:	4607      	mov	r7, r0
 8008734:	f001 fd7e 	bl	800a234 <__gettzinfo>
 8008738:	496d      	ldr	r1, [pc, #436]	@ (80088f0 <_tzset_unlocked_r+0x1c4>)
 800873a:	4604      	mov	r4, r0
 800873c:	4638      	mov	r0, r7
 800873e:	f000 fe8f 	bl	8009460 <_getenv_r>
 8008742:	4d6c      	ldr	r5, [pc, #432]	@ (80088f4 <_tzset_unlocked_r+0x1c8>)
 8008744:	4606      	mov	r6, r0
 8008746:	bb10      	cbnz	r0, 800878e <_tzset_unlocked_r+0x62>
 8008748:	4b6b      	ldr	r3, [pc, #428]	@ (80088f8 <_tzset_unlocked_r+0x1cc>)
 800874a:	4a6c      	ldr	r2, [pc, #432]	@ (80088fc <_tzset_unlocked_r+0x1d0>)
 800874c:	6018      	str	r0, [r3, #0]
 800874e:	4b6c      	ldr	r3, [pc, #432]	@ (8008900 <_tzset_unlocked_r+0x1d4>)
 8008750:	214a      	movs	r1, #74	@ 0x4a
 8008752:	6018      	str	r0, [r3, #0]
 8008754:	4b6b      	ldr	r3, [pc, #428]	@ (8008904 <_tzset_unlocked_r+0x1d8>)
 8008756:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800875a:	e9c3 2200 	strd	r2, r2, [r3]
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8008766:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800876a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800876e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8008770:	6520      	str	r0, [r4, #80]	@ 0x50
 8008772:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008776:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800877a:	6828      	ldr	r0, [r5, #0]
 800877c:	7221      	strb	r1, [r4, #8]
 800877e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008782:	f000 fe7d 	bl	8009480 <free>
 8008786:	602e      	str	r6, [r5, #0]
 8008788:	b00d      	add	sp, #52	@ 0x34
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	6829      	ldr	r1, [r5, #0]
 8008790:	2900      	cmp	r1, #0
 8008792:	f040 808e 	bne.w	80088b2 <_tzset_unlocked_r+0x186>
 8008796:	6828      	ldr	r0, [r5, #0]
 8008798:	f000 fe72 	bl	8009480 <free>
 800879c:	4630      	mov	r0, r6
 800879e:	f7f7 fcf1 	bl	8000184 <strlen>
 80087a2:	1c41      	adds	r1, r0, #1
 80087a4:	4638      	mov	r0, r7
 80087a6:	f000 fe95 	bl	80094d4 <_malloc_r>
 80087aa:	6028      	str	r0, [r5, #0]
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f040 8086 	bne.w	80088be <_tzset_unlocked_r+0x192>
 80087b2:	2300      	movs	r3, #0
 80087b4:	4a52      	ldr	r2, [pc, #328]	@ (8008900 <_tzset_unlocked_r+0x1d4>)
 80087b6:	2000      	movs	r0, #0
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	2100      	movs	r1, #0
 80087bc:	4a52      	ldr	r2, [pc, #328]	@ (8008908 <_tzset_unlocked_r+0x1dc>)
 80087be:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8008904 <_tzset_unlocked_r+0x1d8>
 80087c2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80087c6:	e9c8 2200 	strd	r2, r2, [r8]
 80087ca:	224a      	movs	r2, #74	@ 0x4a
 80087cc:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80087d0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80087d4:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80087d8:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 80087dc:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 80087e0:	f8df a114 	ldr.w	sl, [pc, #276]	@ 80088f8 <_tzset_unlocked_r+0x1cc>
 80087e4:	7222      	strb	r2, [r4, #8]
 80087e6:	f8ca 3000 	str.w	r3, [sl]
 80087ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ec:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80087f0:	6523      	str	r3, [r4, #80]	@ 0x50
 80087f2:	7833      	ldrb	r3, [r6, #0]
 80087f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80087f6:	bf08      	it	eq
 80087f8:	3601      	addeq	r6, #1
 80087fa:	7833      	ldrb	r3, [r6, #0]
 80087fc:	2b3c      	cmp	r3, #60	@ 0x3c
 80087fe:	d162      	bne.n	80088c6 <_tzset_unlocked_r+0x19a>
 8008800:	1c75      	adds	r5, r6, #1
 8008802:	4628      	mov	r0, r5
 8008804:	4a41      	ldr	r2, [pc, #260]	@ (800890c <_tzset_unlocked_r+0x1e0>)
 8008806:	4942      	ldr	r1, [pc, #264]	@ (8008910 <_tzset_unlocked_r+0x1e4>)
 8008808:	ab0a      	add	r3, sp, #40	@ 0x28
 800880a:	f001 fce9 	bl	800a1e0 <siscanf>
 800880e:	2800      	cmp	r0, #0
 8008810:	ddba      	ble.n	8008788 <_tzset_unlocked_r+0x5c>
 8008812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008814:	1eda      	subs	r2, r3, #3
 8008816:	2a07      	cmp	r2, #7
 8008818:	d8b6      	bhi.n	8008788 <_tzset_unlocked_r+0x5c>
 800881a:	5ceb      	ldrb	r3, [r5, r3]
 800881c:	2b3e      	cmp	r3, #62	@ 0x3e
 800881e:	d1b3      	bne.n	8008788 <_tzset_unlocked_r+0x5c>
 8008820:	3602      	adds	r6, #2
 8008822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008824:	18f5      	adds	r5, r6, r3
 8008826:	5cf3      	ldrb	r3, [r6, r3]
 8008828:	2b2d      	cmp	r3, #45	@ 0x2d
 800882a:	d15a      	bne.n	80088e2 <_tzset_unlocked_r+0x1b6>
 800882c:	f04f 39ff 	mov.w	r9, #4294967295
 8008830:	3501      	adds	r5, #1
 8008832:	2300      	movs	r3, #0
 8008834:	af08      	add	r7, sp, #32
 8008836:	f8ad 301e 	strh.w	r3, [sp, #30]
 800883a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800883e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008840:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8008844:	9303      	str	r3, [sp, #12]
 8008846:	f10d 031e 	add.w	r3, sp, #30
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4628      	mov	r0, r5
 800884e:	4931      	ldr	r1, [pc, #196]	@ (8008914 <_tzset_unlocked_r+0x1e8>)
 8008850:	ab0a      	add	r3, sp, #40	@ 0x28
 8008852:	aa07      	add	r2, sp, #28
 8008854:	f001 fcc4 	bl	800a1e0 <siscanf>
 8008858:	2800      	cmp	r0, #0
 800885a:	dd95      	ble.n	8008788 <_tzset_unlocked_r+0x5c>
 800885c:	223c      	movs	r2, #60	@ 0x3c
 800885e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008862:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8008866:	fb02 6603 	mla	r6, r2, r3, r6
 800886a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800886e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008872:	fb02 6603 	mla	r6, r2, r3, r6
 8008876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008878:	fb09 f606 	mul.w	r6, r9, r6
 800887c:	eb05 0903 	add.w	r9, r5, r3
 8008880:	5ceb      	ldrb	r3, [r5, r3]
 8008882:	2b3c      	cmp	r3, #60	@ 0x3c
 8008884:	f040 80e8 	bne.w	8008a58 <_tzset_unlocked_r+0x32c>
 8008888:	f109 0501 	add.w	r5, r9, #1
 800888c:	4628      	mov	r0, r5
 800888e:	4a22      	ldr	r2, [pc, #136]	@ (8008918 <_tzset_unlocked_r+0x1ec>)
 8008890:	491f      	ldr	r1, [pc, #124]	@ (8008910 <_tzset_unlocked_r+0x1e4>)
 8008892:	ab0a      	add	r3, sp, #40	@ 0x28
 8008894:	f001 fca4 	bl	800a1e0 <siscanf>
 8008898:	2800      	cmp	r0, #0
 800889a:	dc41      	bgt.n	8008920 <_tzset_unlocked_r+0x1f4>
 800889c:	f899 3001 	ldrb.w	r3, [r9, #1]
 80088a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80088a2:	d13d      	bne.n	8008920 <_tzset_unlocked_r+0x1f4>
 80088a4:	4b19      	ldr	r3, [pc, #100]	@ (800890c <_tzset_unlocked_r+0x1e0>)
 80088a6:	62a6      	str	r6, [r4, #40]	@ 0x28
 80088a8:	e9c8 3300 	strd	r3, r3, [r8]
 80088ac:	f8ca 6000 	str.w	r6, [sl]
 80088b0:	e76a      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 80088b2:	f7f7 fc5d 	bl	8000170 <strcmp>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f47f af6d 	bne.w	8008796 <_tzset_unlocked_r+0x6a>
 80088bc:	e764      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 80088be:	4631      	mov	r1, r6
 80088c0:	f000 f9cd 	bl	8008c5e <strcpy>
 80088c4:	e775      	b.n	80087b2 <_tzset_unlocked_r+0x86>
 80088c6:	4630      	mov	r0, r6
 80088c8:	4a10      	ldr	r2, [pc, #64]	@ (800890c <_tzset_unlocked_r+0x1e0>)
 80088ca:	4914      	ldr	r1, [pc, #80]	@ (800891c <_tzset_unlocked_r+0x1f0>)
 80088cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80088ce:	f001 fc87 	bl	800a1e0 <siscanf>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f77f af58 	ble.w	8008788 <_tzset_unlocked_r+0x5c>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088da:	3b03      	subs	r3, #3
 80088dc:	2b07      	cmp	r3, #7
 80088de:	d9a0      	bls.n	8008822 <_tzset_unlocked_r+0xf6>
 80088e0:	e752      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 80088e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80088e4:	f04f 0901 	mov.w	r9, #1
 80088e8:	bf08      	it	eq
 80088ea:	3501      	addeq	r5, #1
 80088ec:	e7a1      	b.n	8008832 <_tzset_unlocked_r+0x106>
 80088ee:	bf00      	nop
 80088f0:	0800c63c 	.word	0x0800c63c
 80088f4:	2000099c 	.word	0x2000099c
 80088f8:	200009b8 	.word	0x200009b8
 80088fc:	0800c63f 	.word	0x0800c63f
 8008900:	200009bc 	.word	0x200009bc
 8008904:	200003e8 	.word	0x200003e8
 8008908:	0800c6cd 	.word	0x0800c6cd
 800890c:	200009ac 	.word	0x200009ac
 8008910:	0800c643 	.word	0x0800c643
 8008914:	0800c678 	.word	0x0800c678
 8008918:	200009a0 	.word	0x200009a0
 800891c:	0800c656 	.word	0x0800c656
 8008920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008922:	1eda      	subs	r2, r3, #3
 8008924:	2a07      	cmp	r2, #7
 8008926:	f63f af2f 	bhi.w	8008788 <_tzset_unlocked_r+0x5c>
 800892a:	5ceb      	ldrb	r3, [r5, r3]
 800892c:	2b3e      	cmp	r3, #62	@ 0x3e
 800892e:	f47f af2b 	bne.w	8008788 <_tzset_unlocked_r+0x5c>
 8008932:	f109 0902 	add.w	r9, r9, #2
 8008936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008938:	eb09 0503 	add.w	r5, r9, r3
 800893c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008940:	2b2d      	cmp	r3, #45	@ 0x2d
 8008942:	f040 8098 	bne.w	8008a76 <_tzset_unlocked_r+0x34a>
 8008946:	f04f 39ff 	mov.w	r9, #4294967295
 800894a:	3501      	adds	r5, #1
 800894c:	2300      	movs	r3, #0
 800894e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008952:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008956:	f8ad 3020 	strh.w	r3, [sp, #32]
 800895a:	930a      	str	r3, [sp, #40]	@ 0x28
 800895c:	ab0a      	add	r3, sp, #40	@ 0x28
 800895e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f10d 031e 	add.w	r3, sp, #30
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4628      	mov	r0, r5
 800896c:	497a      	ldr	r1, [pc, #488]	@ (8008b58 <_tzset_unlocked_r+0x42c>)
 800896e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008970:	aa07      	add	r2, sp, #28
 8008972:	f001 fc35 	bl	800a1e0 <siscanf>
 8008976:	2800      	cmp	r0, #0
 8008978:	f300 8083 	bgt.w	8008a82 <_tzset_unlocked_r+0x356>
 800897c:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8008980:	4627      	mov	r7, r4
 8008982:	f04f 0b00 	mov.w	fp, #0
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898a:	441d      	add	r5, r3
 800898c:	782b      	ldrb	r3, [r5, #0]
 800898e:	2b2c      	cmp	r3, #44	@ 0x2c
 8008990:	bf08      	it	eq
 8008992:	3501      	addeq	r5, #1
 8008994:	f895 9000 	ldrb.w	r9, [r5]
 8008998:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800899c:	f040 8084 	bne.w	8008aa8 <_tzset_unlocked_r+0x37c>
 80089a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80089a2:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80089a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089aa:	aa09      	add	r2, sp, #36	@ 0x24
 80089ac:	9200      	str	r2, [sp, #0]
 80089ae:	4628      	mov	r0, r5
 80089b0:	496a      	ldr	r1, [pc, #424]	@ (8008b5c <_tzset_unlocked_r+0x430>)
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80089b8:	f001 fc12 	bl	800a1e0 <siscanf>
 80089bc:	2803      	cmp	r0, #3
 80089be:	f47f aee3 	bne.w	8008788 <_tzset_unlocked_r+0x5c>
 80089c2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80089c6:	1e4b      	subs	r3, r1, #1
 80089c8:	2b0b      	cmp	r3, #11
 80089ca:	f63f aedd 	bhi.w	8008788 <_tzset_unlocked_r+0x5c>
 80089ce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80089d2:	1e53      	subs	r3, r2, #1
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	f63f aed7 	bhi.w	8008788 <_tzset_unlocked_r+0x5c>
 80089da:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80089de:	2b06      	cmp	r3, #6
 80089e0:	f63f aed2 	bhi.w	8008788 <_tzset_unlocked_r+0x5c>
 80089e4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80089e8:	f887 9008 	strb.w	r9, [r7, #8]
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089f0:	eb05 0903 	add.w	r9, r5, r3
 80089f4:	2500      	movs	r5, #0
 80089f6:	f04f 0302 	mov.w	r3, #2
 80089fa:	f8ad 501e 	strh.w	r5, [sp, #30]
 80089fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008a02:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008a06:	950a      	str	r5, [sp, #40]	@ 0x28
 8008a08:	f899 3000 	ldrb.w	r3, [r9]
 8008a0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a0e:	d177      	bne.n	8008b00 <_tzset_unlocked_r+0x3d4>
 8008a10:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a12:	aa08      	add	r2, sp, #32
 8008a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a18:	f10d 021e 	add.w	r2, sp, #30
 8008a1c:	9200      	str	r2, [sp, #0]
 8008a1e:	4648      	mov	r0, r9
 8008a20:	494f      	ldr	r1, [pc, #316]	@ (8008b60 <_tzset_unlocked_r+0x434>)
 8008a22:	9303      	str	r3, [sp, #12]
 8008a24:	aa07      	add	r2, sp, #28
 8008a26:	f001 fbdb 	bl	800a1e0 <siscanf>
 8008a2a:	42a8      	cmp	r0, r5
 8008a2c:	dc68      	bgt.n	8008b00 <_tzset_unlocked_r+0x3d4>
 8008a2e:	214a      	movs	r1, #74	@ 0x4a
 8008a30:	2200      	movs	r2, #0
 8008a32:	2300      	movs	r3, #0
 8008a34:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8008a38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008a3c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008a44:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8008a48:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008a4c:	7221      	strb	r1, [r4, #8]
 8008a4e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8008a50:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008a54:	6525      	str	r5, [r4, #80]	@ 0x50
 8008a56:	e697      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 8008a58:	4648      	mov	r0, r9
 8008a5a:	4a42      	ldr	r2, [pc, #264]	@ (8008b64 <_tzset_unlocked_r+0x438>)
 8008a5c:	4942      	ldr	r1, [pc, #264]	@ (8008b68 <_tzset_unlocked_r+0x43c>)
 8008a5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a60:	f001 fbbe 	bl	800a1e0 <siscanf>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f77f af1d 	ble.w	80088a4 <_tzset_unlocked_r+0x178>
 8008a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6c:	3b03      	subs	r3, #3
 8008a6e:	2b07      	cmp	r3, #7
 8008a70:	f67f af61 	bls.w	8008936 <_tzset_unlocked_r+0x20a>
 8008a74:	e688      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 8008a76:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a78:	f04f 0901 	mov.w	r9, #1
 8008a7c:	bf08      	it	eq
 8008a7e:	3501      	addeq	r5, #1
 8008a80:	e764      	b.n	800894c <_tzset_unlocked_r+0x220>
 8008a82:	213c      	movs	r1, #60	@ 0x3c
 8008a84:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008a88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008a8c:	fb01 3302 	mla	r3, r1, r2, r3
 8008a90:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008a94:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008a98:	fb01 3302 	mla	r3, r1, r2, r3
 8008a9c:	fb09 f303 	mul.w	r3, r9, r3
 8008aa0:	e76e      	b.n	8008980 <_tzset_unlocked_r+0x254>
 8008aa2:	f04f 0b01 	mov.w	fp, #1
 8008aa6:	e771      	b.n	800898c <_tzset_unlocked_r+0x260>
 8008aa8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008aac:	bf0a      	itet	eq
 8008aae:	464b      	moveq	r3, r9
 8008ab0:	2344      	movne	r3, #68	@ 0x44
 8008ab2:	3501      	addeq	r5, #1
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	a90b      	add	r1, sp, #44	@ 0x2c
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	f001 fabe 	bl	800a03c <strtoul>
 8008ac0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	45a9      	cmp	r9, r5
 8008ac8:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008acc:	d114      	bne.n	8008af8 <_tzset_unlocked_r+0x3cc>
 8008ace:	234d      	movs	r3, #77	@ 0x4d
 8008ad0:	f1bb 0f00 	cmp.w	fp, #0
 8008ad4:	d107      	bne.n	8008ae6 <_tzset_unlocked_r+0x3ba>
 8008ad6:	2103      	movs	r1, #3
 8008ad8:	7223      	strb	r3, [r4, #8]
 8008ada:	2302      	movs	r3, #2
 8008adc:	f8c4 b014 	str.w	fp, [r4, #20]
 8008ae0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8008ae4:	e786      	b.n	80089f4 <_tzset_unlocked_r+0x2c8>
 8008ae6:	220b      	movs	r2, #11
 8008ae8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008aec:	2301      	movs	r3, #1
 8008aee:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8008af2:	2300      	movs	r3, #0
 8008af4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008af6:	e77d      	b.n	80089f4 <_tzset_unlocked_r+0x2c8>
 8008af8:	b280      	uxth	r0, r0
 8008afa:	723b      	strb	r3, [r7, #8]
 8008afc:	6178      	str	r0, [r7, #20]
 8008afe:	e779      	b.n	80089f4 <_tzset_unlocked_r+0x2c8>
 8008b00:	213c      	movs	r1, #60	@ 0x3c
 8008b02:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008b06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008b0a:	3728      	adds	r7, #40	@ 0x28
 8008b0c:	fb01 3302 	mla	r3, r1, r2, r3
 8008b10:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008b14:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008b18:	fb01 3302 	mla	r3, r1, r2, r3
 8008b1c:	f847 3c10 	str.w	r3, [r7, #-16]
 8008b20:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008b22:	444d      	add	r5, r9
 8008b24:	f1bb 0f00 	cmp.w	fp, #0
 8008b28:	d0bb      	beq.n	8008aa2 <_tzset_unlocked_r+0x376>
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	6860      	ldr	r0, [r4, #4]
 8008b2e:	6523      	str	r3, [r4, #80]	@ 0x50
 8008b30:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <_tzset_unlocked_r+0x440>)
 8008b32:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008b34:	f8c8 3000 	str.w	r3, [r8]
 8008b38:	4b0a      	ldr	r3, [pc, #40]	@ (8008b64 <_tzset_unlocked_r+0x438>)
 8008b3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008b3e:	f7ff fd3b 	bl	80085b8 <__tzcalc_limits>
 8008b42:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008b44:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008b46:	f8ca 2000 	str.w	r2, [sl]
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	bf18      	it	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	4a07      	ldr	r2, [pc, #28]	@ (8008b70 <_tzset_unlocked_r+0x444>)
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e618      	b.n	8008788 <_tzset_unlocked_r+0x5c>
 8008b56:	bf00      	nop
 8008b58:	0800c678 	.word	0x0800c678
 8008b5c:	0800c664 	.word	0x0800c664
 8008b60:	0800c677 	.word	0x0800c677
 8008b64:	200009a0 	.word	0x200009a0
 8008b68:	0800c656 	.word	0x0800c656
 8008b6c:	200009ac 	.word	0x200009ac
 8008b70:	200009bc 	.word	0x200009bc

08008b74 <_close_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	2300      	movs	r3, #0
 8008b78:	4d05      	ldr	r5, [pc, #20]	@ (8008b90 <_close_r+0x1c>)
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	602b      	str	r3, [r5, #0]
 8008b80:	f7fe f8e1 	bl	8006d46 <_close>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_close_r+0x1a>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_close_r+0x1a>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	200009c0 	.word	0x200009c0

08008b94 <_lseek_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4d05      	ldr	r5, [pc, #20]	@ (8008bb4 <_lseek_r+0x20>)
 8008ba0:	602a      	str	r2, [r5, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f7fe f8f3 	bl	8006d8e <_lseek>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_lseek_r+0x1e>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_lseek_r+0x1e>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	200009c0 	.word	0x200009c0

08008bb8 <_read_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4d05      	ldr	r5, [pc, #20]	@ (8008bd8 <_read_r+0x20>)
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f7fe f884 	bl	8006cd4 <_read>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_read_r+0x1e>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_read_r+0x1e>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	200009c0 	.word	0x200009c0

08008bdc <_write_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	4611      	mov	r1, r2
 8008be4:	2200      	movs	r2, #0
 8008be6:	4d05      	ldr	r5, [pc, #20]	@ (8008bfc <_write_r+0x20>)
 8008be8:	602a      	str	r2, [r5, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f7fe f88f 	bl	8006d0e <_write>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_write_r+0x1e>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_write_r+0x1e>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	200009c0 	.word	0x200009c0

08008c00 <__errno>:
 8008c00:	4b01      	ldr	r3, [pc, #4]	@ (8008c08 <__errno+0x8>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	2000055c 	.word	0x2000055c

08008c0c <__libc_init_array>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	2600      	movs	r6, #0
 8008c10:	4d0c      	ldr	r5, [pc, #48]	@ (8008c44 <__libc_init_array+0x38>)
 8008c12:	4c0d      	ldr	r4, [pc, #52]	@ (8008c48 <__libc_init_array+0x3c>)
 8008c14:	1b64      	subs	r4, r4, r5
 8008c16:	10a4      	asrs	r4, r4, #2
 8008c18:	42a6      	cmp	r6, r4
 8008c1a:	d109      	bne.n	8008c30 <__libc_init_array+0x24>
 8008c1c:	f003 fb3c 	bl	800c298 <_init>
 8008c20:	2600      	movs	r6, #0
 8008c22:	4d0a      	ldr	r5, [pc, #40]	@ (8008c4c <__libc_init_array+0x40>)
 8008c24:	4c0a      	ldr	r4, [pc, #40]	@ (8008c50 <__libc_init_array+0x44>)
 8008c26:	1b64      	subs	r4, r4, r5
 8008c28:	10a4      	asrs	r4, r4, #2
 8008c2a:	42a6      	cmp	r6, r4
 8008c2c:	d105      	bne.n	8008c3a <__libc_init_array+0x2e>
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c34:	4798      	blx	r3
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7ee      	b.n	8008c18 <__libc_init_array+0xc>
 8008c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3e:	4798      	blx	r3
 8008c40:	3601      	adds	r6, #1
 8008c42:	e7f2      	b.n	8008c2a <__libc_init_array+0x1e>
 8008c44:	0800c920 	.word	0x0800c920
 8008c48:	0800c920 	.word	0x0800c920
 8008c4c:	0800c920 	.word	0x0800c920
 8008c50:	0800c924 	.word	0x0800c924

08008c54 <__retarget_lock_init_recursive>:
 8008c54:	4770      	bx	lr

08008c56 <__retarget_lock_acquire>:
 8008c56:	4770      	bx	lr

08008c58 <__retarget_lock_acquire_recursive>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_release>:
 8008c5a:	4770      	bx	lr

08008c5c <__retarget_lock_release_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <strcpy>:
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c64:	f803 2b01 	strb.w	r2, [r3], #1
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d1f9      	bne.n	8008c60 <strcpy+0x2>
 8008c6c:	4770      	bx	lr

08008c6e <memcpy>:
 8008c6e:	440a      	add	r2, r1
 8008c70:	4291      	cmp	r1, r2
 8008c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c76:	d100      	bne.n	8008c7a <memcpy+0xc>
 8008c78:	4770      	bx	lr
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c80:	4291      	cmp	r1, r2
 8008c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c86:	d1f9      	bne.n	8008c7c <memcpy+0xe>
 8008c88:	bd10      	pop	{r4, pc}
	...

08008c8c <nan>:
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4901      	ldr	r1, [pc, #4]	@ (8008c94 <nan+0x8>)
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	7ff80000 	.word	0x7ff80000

08008c98 <__assert_func>:
 8008c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4b09      	ldr	r3, [pc, #36]	@ (8008cc4 <__assert_func+0x2c>)
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68d8      	ldr	r0, [r3, #12]
 8008ca6:	b954      	cbnz	r4, 8008cbe <__assert_func+0x26>
 8008ca8:	4b07      	ldr	r3, [pc, #28]	@ (8008cc8 <__assert_func+0x30>)
 8008caa:	461c      	mov	r4, r3
 8008cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cb0:	9100      	str	r1, [sp, #0]
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	4905      	ldr	r1, [pc, #20]	@ (8008ccc <__assert_func+0x34>)
 8008cb6:	f001 fa81 	bl	800a1bc <fiprintf>
 8008cba:	f001 fb75 	bl	800a3a8 <abort>
 8008cbe:	4b04      	ldr	r3, [pc, #16]	@ (8008cd0 <__assert_func+0x38>)
 8008cc0:	e7f4      	b.n	8008cac <__assert_func+0x14>
 8008cc2:	bf00      	nop
 8008cc4:	2000055c 	.word	0x2000055c
 8008cc8:	0800c6cd 	.word	0x0800c6cd
 8008ccc:	0800c69f 	.word	0x0800c69f
 8008cd0:	0800c692 	.word	0x0800c692

08008cd4 <div>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	fb91 f4f2 	sdiv	r4, r1, r2
 8008cda:	fb02 1114 	mls	r1, r2, r4, r1
 8008cde:	6004      	str	r4, [r0, #0]
 8008ce0:	6041      	str	r1, [r0, #4]
 8008ce2:	bd10      	pop	{r4, pc}

08008ce4 <_free_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d040      	beq.n	8008d6e <_free_r+0x8a>
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f0c      	subs	r4, r1, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfb8      	it	lt
 8008cf6:	18e4      	addlt	r4, r4, r3
 8008cf8:	f000 fc7e 	bl	80095f8 <__malloc_lock>
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8008d70 <_free_r+0x8c>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	b933      	cbnz	r3, 8008d10 <_free_r+0x2c>
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	6014      	str	r4, [r2, #0]
 8008d06:	4628      	mov	r0, r5
 8008d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d0c:	f000 bc7a 	b.w	8009604 <__malloc_unlock>
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d908      	bls.n	8008d26 <_free_r+0x42>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	1821      	adds	r1, r4, r0
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf01      	itttt	eq
 8008d1c:	6819      	ldreq	r1, [r3, #0]
 8008d1e:	685b      	ldreq	r3, [r3, #4]
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	e7ed      	b.n	8008d02 <_free_r+0x1e>
 8008d26:	461a      	mov	r2, r3
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	b10b      	cbz	r3, 8008d30 <_free_r+0x4c>
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	d9fa      	bls.n	8008d26 <_free_r+0x42>
 8008d30:	6811      	ldr	r1, [r2, #0]
 8008d32:	1850      	adds	r0, r2, r1
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d10b      	bne.n	8008d50 <_free_r+0x6c>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	4401      	add	r1, r0
 8008d3c:	1850      	adds	r0, r2, r1
 8008d3e:	4283      	cmp	r3, r0
 8008d40:	6011      	str	r1, [r2, #0]
 8008d42:	d1e0      	bne.n	8008d06 <_free_r+0x22>
 8008d44:	6818      	ldr	r0, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4408      	add	r0, r1
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	6053      	str	r3, [r2, #4]
 8008d4e:	e7da      	b.n	8008d06 <_free_r+0x22>
 8008d50:	d902      	bls.n	8008d58 <_free_r+0x74>
 8008d52:	230c      	movs	r3, #12
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	e7d6      	b.n	8008d06 <_free_r+0x22>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	1821      	adds	r1, r4, r0
 8008d5c:	428b      	cmp	r3, r1
 8008d5e:	bf01      	itttt	eq
 8008d60:	6819      	ldreq	r1, [r3, #0]
 8008d62:	685b      	ldreq	r3, [r3, #4]
 8008d64:	1809      	addeq	r1, r1, r0
 8008d66:	6021      	streq	r1, [r4, #0]
 8008d68:	6063      	str	r3, [r4, #4]
 8008d6a:	6054      	str	r4, [r2, #4]
 8008d6c:	e7cb      	b.n	8008d06 <_free_r+0x22>
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200009cc 	.word	0x200009cc

08008d74 <rshift>:
 8008d74:	6903      	ldr	r3, [r0, #16]
 8008d76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d7e:	f100 0414 	add.w	r4, r0, #20
 8008d82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d86:	dd46      	ble.n	8008e16 <rshift+0xa2>
 8008d88:	f011 011f 	ands.w	r1, r1, #31
 8008d8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d94:	d10c      	bne.n	8008db0 <rshift+0x3c>
 8008d96:	4629      	mov	r1, r5
 8008d98:	f100 0710 	add.w	r7, r0, #16
 8008d9c:	42b1      	cmp	r1, r6
 8008d9e:	d335      	bcc.n	8008e0c <rshift+0x98>
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	1eea      	subs	r2, r5, #3
 8008da6:	4296      	cmp	r6, r2
 8008da8:	bf38      	it	cc
 8008daa:	2300      	movcc	r3, #0
 8008dac:	4423      	add	r3, r4
 8008dae:	e015      	b.n	8008ddc <rshift+0x68>
 8008db0:	46a1      	mov	r9, r4
 8008db2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008db6:	f1c1 0820 	rsb	r8, r1, #32
 8008dba:	40cf      	lsrs	r7, r1
 8008dbc:	f105 0e04 	add.w	lr, r5, #4
 8008dc0:	4576      	cmp	r6, lr
 8008dc2:	46f4      	mov	ip, lr
 8008dc4:	d816      	bhi.n	8008df4 <rshift+0x80>
 8008dc6:	1a9a      	subs	r2, r3, r2
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	3a04      	subs	r2, #4
 8008dcc:	3501      	adds	r5, #1
 8008dce:	42ae      	cmp	r6, r5
 8008dd0:	bf38      	it	cc
 8008dd2:	2200      	movcc	r2, #0
 8008dd4:	18a3      	adds	r3, r4, r2
 8008dd6:	50a7      	str	r7, [r4, r2]
 8008dd8:	b107      	cbz	r7, 8008ddc <rshift+0x68>
 8008dda:	3304      	adds	r3, #4
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	eba3 0204 	sub.w	r2, r3, r4
 8008de2:	bf08      	it	eq
 8008de4:	2300      	moveq	r3, #0
 8008de6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dea:	6102      	str	r2, [r0, #16]
 8008dec:	bf08      	it	eq
 8008dee:	6143      	streq	r3, [r0, #20]
 8008df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008df4:	f8dc c000 	ldr.w	ip, [ip]
 8008df8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dfc:	ea4c 0707 	orr.w	r7, ip, r7
 8008e00:	f849 7b04 	str.w	r7, [r9], #4
 8008e04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e08:	40cf      	lsrs	r7, r1
 8008e0a:	e7d9      	b.n	8008dc0 <rshift+0x4c>
 8008e0c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e10:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e14:	e7c2      	b.n	8008d9c <rshift+0x28>
 8008e16:	4623      	mov	r3, r4
 8008e18:	e7e0      	b.n	8008ddc <rshift+0x68>

08008e1a <__hexdig_fun>:
 8008e1a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d802      	bhi.n	8008e28 <__hexdig_fun+0xe>
 8008e22:	3820      	subs	r0, #32
 8008e24:	b2c0      	uxtb	r0, r0
 8008e26:	4770      	bx	lr
 8008e28:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	d801      	bhi.n	8008e34 <__hexdig_fun+0x1a>
 8008e30:	3847      	subs	r0, #71	@ 0x47
 8008e32:	e7f7      	b.n	8008e24 <__hexdig_fun+0xa>
 8008e34:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e38:	2b05      	cmp	r3, #5
 8008e3a:	d801      	bhi.n	8008e40 <__hexdig_fun+0x26>
 8008e3c:	3827      	subs	r0, #39	@ 0x27
 8008e3e:	e7f1      	b.n	8008e24 <__hexdig_fun+0xa>
 8008e40:	2000      	movs	r0, #0
 8008e42:	4770      	bx	lr

08008e44 <__gethex>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	468a      	mov	sl, r1
 8008e4a:	4690      	mov	r8, r2
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	9302      	str	r3, [sp, #8]
 8008e50:	680b      	ldr	r3, [r1, #0]
 8008e52:	9001      	str	r0, [sp, #4]
 8008e54:	1c9c      	adds	r4, r3, #2
 8008e56:	46a1      	mov	r9, r4
 8008e58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e5c:	2830      	cmp	r0, #48	@ 0x30
 8008e5e:	d0fa      	beq.n	8008e56 <__gethex+0x12>
 8008e60:	eba9 0303 	sub.w	r3, r9, r3
 8008e64:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e68:	f7ff ffd7 	bl	8008e1a <__hexdig_fun>
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d168      	bne.n	8008f44 <__gethex+0x100>
 8008e72:	2201      	movs	r2, #1
 8008e74:	4648      	mov	r0, r9
 8008e76:	499f      	ldr	r1, [pc, #636]	@ (80090f4 <__gethex+0x2b0>)
 8008e78:	f7fe ff97 	bl	8007daa <strncmp>
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d167      	bne.n	8008f52 <__gethex+0x10e>
 8008e82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e86:	4626      	mov	r6, r4
 8008e88:	f7ff ffc7 	bl	8008e1a <__hexdig_fun>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d062      	beq.n	8008f56 <__gethex+0x112>
 8008e90:	4623      	mov	r3, r4
 8008e92:	7818      	ldrb	r0, [r3, #0]
 8008e94:	4699      	mov	r9, r3
 8008e96:	2830      	cmp	r0, #48	@ 0x30
 8008e98:	f103 0301 	add.w	r3, r3, #1
 8008e9c:	d0f9      	beq.n	8008e92 <__gethex+0x4e>
 8008e9e:	f7ff ffbc 	bl	8008e1a <__hexdig_fun>
 8008ea2:	fab0 f580 	clz	r5, r0
 8008ea6:	f04f 0b01 	mov.w	fp, #1
 8008eaa:	096d      	lsrs	r5, r5, #5
 8008eac:	464a      	mov	r2, r9
 8008eae:	4616      	mov	r6, r2
 8008eb0:	7830      	ldrb	r0, [r6, #0]
 8008eb2:	3201      	adds	r2, #1
 8008eb4:	f7ff ffb1 	bl	8008e1a <__hexdig_fun>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1f8      	bne.n	8008eae <__gethex+0x6a>
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	498c      	ldr	r1, [pc, #560]	@ (80090f4 <__gethex+0x2b0>)
 8008ec2:	f7fe ff72 	bl	8007daa <strncmp>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d13f      	bne.n	8008f4a <__gethex+0x106>
 8008eca:	b944      	cbnz	r4, 8008ede <__gethex+0x9a>
 8008ecc:	1c74      	adds	r4, r6, #1
 8008ece:	4622      	mov	r2, r4
 8008ed0:	4616      	mov	r6, r2
 8008ed2:	7830      	ldrb	r0, [r6, #0]
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	f7ff ffa0 	bl	8008e1a <__hexdig_fun>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d1f8      	bne.n	8008ed0 <__gethex+0x8c>
 8008ede:	1ba4      	subs	r4, r4, r6
 8008ee0:	00a7      	lsls	r7, r4, #2
 8008ee2:	7833      	ldrb	r3, [r6, #0]
 8008ee4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ee8:	2b50      	cmp	r3, #80	@ 0x50
 8008eea:	d13e      	bne.n	8008f6a <__gethex+0x126>
 8008eec:	7873      	ldrb	r3, [r6, #1]
 8008eee:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ef0:	d033      	beq.n	8008f5a <__gethex+0x116>
 8008ef2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ef4:	d034      	beq.n	8008f60 <__gethex+0x11c>
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	1c71      	adds	r1, r6, #1
 8008efa:	7808      	ldrb	r0, [r1, #0]
 8008efc:	f7ff ff8d 	bl	8008e1a <__hexdig_fun>
 8008f00:	1e43      	subs	r3, r0, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b18      	cmp	r3, #24
 8008f06:	d830      	bhi.n	8008f6a <__gethex+0x126>
 8008f08:	f1a0 0210 	sub.w	r2, r0, #16
 8008f0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f10:	f7ff ff83 	bl	8008e1a <__hexdig_fun>
 8008f14:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f18:	fa5f fc8c 	uxtb.w	ip, ip
 8008f1c:	f1bc 0f18 	cmp.w	ip, #24
 8008f20:	f04f 030a 	mov.w	r3, #10
 8008f24:	d91e      	bls.n	8008f64 <__gethex+0x120>
 8008f26:	b104      	cbz	r4, 8008f2a <__gethex+0xe6>
 8008f28:	4252      	negs	r2, r2
 8008f2a:	4417      	add	r7, r2
 8008f2c:	f8ca 1000 	str.w	r1, [sl]
 8008f30:	b1ed      	cbz	r5, 8008f6e <__gethex+0x12a>
 8008f32:	f1bb 0f00 	cmp.w	fp, #0
 8008f36:	bf0c      	ite	eq
 8008f38:	2506      	moveq	r5, #6
 8008f3a:	2500      	movne	r5, #0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	b005      	add	sp, #20
 8008f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f44:	2500      	movs	r5, #0
 8008f46:	462c      	mov	r4, r5
 8008f48:	e7b0      	b.n	8008eac <__gethex+0x68>
 8008f4a:	2c00      	cmp	r4, #0
 8008f4c:	d1c7      	bne.n	8008ede <__gethex+0x9a>
 8008f4e:	4627      	mov	r7, r4
 8008f50:	e7c7      	b.n	8008ee2 <__gethex+0x9e>
 8008f52:	464e      	mov	r6, r9
 8008f54:	462f      	mov	r7, r5
 8008f56:	2501      	movs	r5, #1
 8008f58:	e7c3      	b.n	8008ee2 <__gethex+0x9e>
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	1cb1      	adds	r1, r6, #2
 8008f5e:	e7cc      	b.n	8008efa <__gethex+0xb6>
 8008f60:	2401      	movs	r4, #1
 8008f62:	e7fb      	b.n	8008f5c <__gethex+0x118>
 8008f64:	fb03 0002 	mla	r0, r3, r2, r0
 8008f68:	e7ce      	b.n	8008f08 <__gethex+0xc4>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	e7de      	b.n	8008f2c <__gethex+0xe8>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	eba6 0309 	sub.w	r3, r6, r9
 8008f74:	3b01      	subs	r3, #1
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	dc0a      	bgt.n	8008f90 <__gethex+0x14c>
 8008f7a:	9801      	ldr	r0, [sp, #4]
 8008f7c:	f000 fb48 	bl	8009610 <_Balloc>
 8008f80:	4604      	mov	r4, r0
 8008f82:	b940      	cbnz	r0, 8008f96 <__gethex+0x152>
 8008f84:	4602      	mov	r2, r0
 8008f86:	21e4      	movs	r1, #228	@ 0xe4
 8008f88:	4b5b      	ldr	r3, [pc, #364]	@ (80090f8 <__gethex+0x2b4>)
 8008f8a:	485c      	ldr	r0, [pc, #368]	@ (80090fc <__gethex+0x2b8>)
 8008f8c:	f7ff fe84 	bl	8008c98 <__assert_func>
 8008f90:	3101      	adds	r1, #1
 8008f92:	105b      	asrs	r3, r3, #1
 8008f94:	e7ef      	b.n	8008f76 <__gethex+0x132>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f100 0a14 	add.w	sl, r0, #20
 8008f9c:	4655      	mov	r5, sl
 8008f9e:	469b      	mov	fp, r3
 8008fa0:	45b1      	cmp	r9, r6
 8008fa2:	d337      	bcc.n	8009014 <__gethex+0x1d0>
 8008fa4:	f845 bb04 	str.w	fp, [r5], #4
 8008fa8:	eba5 050a 	sub.w	r5, r5, sl
 8008fac:	10ad      	asrs	r5, r5, #2
 8008fae:	6125      	str	r5, [r4, #16]
 8008fb0:	4658      	mov	r0, fp
 8008fb2:	f000 fc1f 	bl	80097f4 <__hi0bits>
 8008fb6:	016d      	lsls	r5, r5, #5
 8008fb8:	f8d8 6000 	ldr.w	r6, [r8]
 8008fbc:	1a2d      	subs	r5, r5, r0
 8008fbe:	42b5      	cmp	r5, r6
 8008fc0:	dd54      	ble.n	800906c <__gethex+0x228>
 8008fc2:	1bad      	subs	r5, r5, r6
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 ffa7 	bl	8009f1a <__any_on>
 8008fcc:	4681      	mov	r9, r0
 8008fce:	b178      	cbz	r0, 8008ff0 <__gethex+0x1ac>
 8008fd0:	f04f 0901 	mov.w	r9, #1
 8008fd4:	1e6b      	subs	r3, r5, #1
 8008fd6:	1159      	asrs	r1, r3, #5
 8008fd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fdc:	f003 021f 	and.w	r2, r3, #31
 8008fe0:	fa09 f202 	lsl.w	r2, r9, r2
 8008fe4:	420a      	tst	r2, r1
 8008fe6:	d003      	beq.n	8008ff0 <__gethex+0x1ac>
 8008fe8:	454b      	cmp	r3, r9
 8008fea:	dc36      	bgt.n	800905a <__gethex+0x216>
 8008fec:	f04f 0902 	mov.w	r9, #2
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff febe 	bl	8008d74 <rshift>
 8008ff8:	442f      	add	r7, r5
 8008ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ffe:	42bb      	cmp	r3, r7
 8009000:	da42      	bge.n	8009088 <__gethex+0x244>
 8009002:	4621      	mov	r1, r4
 8009004:	9801      	ldr	r0, [sp, #4]
 8009006:	f000 fb43 	bl	8009690 <_Bfree>
 800900a:	2300      	movs	r3, #0
 800900c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800900e:	25a3      	movs	r5, #163	@ 0xa3
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	e793      	b.n	8008f3c <__gethex+0xf8>
 8009014:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009018:	2a2e      	cmp	r2, #46	@ 0x2e
 800901a:	d012      	beq.n	8009042 <__gethex+0x1fe>
 800901c:	2b20      	cmp	r3, #32
 800901e:	d104      	bne.n	800902a <__gethex+0x1e6>
 8009020:	f845 bb04 	str.w	fp, [r5], #4
 8009024:	f04f 0b00 	mov.w	fp, #0
 8009028:	465b      	mov	r3, fp
 800902a:	7830      	ldrb	r0, [r6, #0]
 800902c:	9303      	str	r3, [sp, #12]
 800902e:	f7ff fef4 	bl	8008e1a <__hexdig_fun>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	f000 000f 	and.w	r0, r0, #15
 8009038:	4098      	lsls	r0, r3
 800903a:	ea4b 0b00 	orr.w	fp, fp, r0
 800903e:	3304      	adds	r3, #4
 8009040:	e7ae      	b.n	8008fa0 <__gethex+0x15c>
 8009042:	45b1      	cmp	r9, r6
 8009044:	d8ea      	bhi.n	800901c <__gethex+0x1d8>
 8009046:	2201      	movs	r2, #1
 8009048:	4630      	mov	r0, r6
 800904a:	492a      	ldr	r1, [pc, #168]	@ (80090f4 <__gethex+0x2b0>)
 800904c:	9303      	str	r3, [sp, #12]
 800904e:	f7fe feac 	bl	8007daa <strncmp>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	2800      	cmp	r0, #0
 8009056:	d1e1      	bne.n	800901c <__gethex+0x1d8>
 8009058:	e7a2      	b.n	8008fa0 <__gethex+0x15c>
 800905a:	4620      	mov	r0, r4
 800905c:	1ea9      	subs	r1, r5, #2
 800905e:	f000 ff5c 	bl	8009f1a <__any_on>
 8009062:	2800      	cmp	r0, #0
 8009064:	d0c2      	beq.n	8008fec <__gethex+0x1a8>
 8009066:	f04f 0903 	mov.w	r9, #3
 800906a:	e7c1      	b.n	8008ff0 <__gethex+0x1ac>
 800906c:	da09      	bge.n	8009082 <__gethex+0x23e>
 800906e:	1b75      	subs	r5, r6, r5
 8009070:	4621      	mov	r1, r4
 8009072:	462a      	mov	r2, r5
 8009074:	9801      	ldr	r0, [sp, #4]
 8009076:	f000 fd21 	bl	8009abc <__lshift>
 800907a:	4604      	mov	r4, r0
 800907c:	1b7f      	subs	r7, r7, r5
 800907e:	f100 0a14 	add.w	sl, r0, #20
 8009082:	f04f 0900 	mov.w	r9, #0
 8009086:	e7b8      	b.n	8008ffa <__gethex+0x1b6>
 8009088:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800908c:	42bd      	cmp	r5, r7
 800908e:	dd6f      	ble.n	8009170 <__gethex+0x32c>
 8009090:	1bed      	subs	r5, r5, r7
 8009092:	42ae      	cmp	r6, r5
 8009094:	dc34      	bgt.n	8009100 <__gethex+0x2bc>
 8009096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d022      	beq.n	80090e4 <__gethex+0x2a0>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d024      	beq.n	80090ec <__gethex+0x2a8>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d115      	bne.n	80090d2 <__gethex+0x28e>
 80090a6:	42ae      	cmp	r6, r5
 80090a8:	d113      	bne.n	80090d2 <__gethex+0x28e>
 80090aa:	2e01      	cmp	r6, #1
 80090ac:	d10b      	bne.n	80090c6 <__gethex+0x282>
 80090ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090b2:	9a02      	ldr	r2, [sp, #8]
 80090b4:	2562      	movs	r5, #98	@ 0x62
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	2301      	movs	r3, #1
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	f8ca 3000 	str.w	r3, [sl]
 80090c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c2:	601c      	str	r4, [r3, #0]
 80090c4:	e73a      	b.n	8008f3c <__gethex+0xf8>
 80090c6:	4620      	mov	r0, r4
 80090c8:	1e71      	subs	r1, r6, #1
 80090ca:	f000 ff26 	bl	8009f1a <__any_on>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1ed      	bne.n	80090ae <__gethex+0x26a>
 80090d2:	4621      	mov	r1, r4
 80090d4:	9801      	ldr	r0, [sp, #4]
 80090d6:	f000 fadb 	bl	8009690 <_Bfree>
 80090da:	2300      	movs	r3, #0
 80090dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090de:	2550      	movs	r5, #80	@ 0x50
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e72b      	b.n	8008f3c <__gethex+0xf8>
 80090e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f3      	bne.n	80090d2 <__gethex+0x28e>
 80090ea:	e7e0      	b.n	80090ae <__gethex+0x26a>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1dd      	bne.n	80090ae <__gethex+0x26a>
 80090f2:	e7ee      	b.n	80090d2 <__gethex+0x28e>
 80090f4:	0800c350 	.word	0x0800c350
 80090f8:	0800c6ce 	.word	0x0800c6ce
 80090fc:	0800c6df 	.word	0x0800c6df
 8009100:	1e6f      	subs	r7, r5, #1
 8009102:	f1b9 0f00 	cmp.w	r9, #0
 8009106:	d130      	bne.n	800916a <__gethex+0x326>
 8009108:	b127      	cbz	r7, 8009114 <__gethex+0x2d0>
 800910a:	4639      	mov	r1, r7
 800910c:	4620      	mov	r0, r4
 800910e:	f000 ff04 	bl	8009f1a <__any_on>
 8009112:	4681      	mov	r9, r0
 8009114:	2301      	movs	r3, #1
 8009116:	4629      	mov	r1, r5
 8009118:	1b76      	subs	r6, r6, r5
 800911a:	2502      	movs	r5, #2
 800911c:	117a      	asrs	r2, r7, #5
 800911e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009122:	f007 071f 	and.w	r7, r7, #31
 8009126:	40bb      	lsls	r3, r7
 8009128:	4213      	tst	r3, r2
 800912a:	4620      	mov	r0, r4
 800912c:	bf18      	it	ne
 800912e:	f049 0902 	orrne.w	r9, r9, #2
 8009132:	f7ff fe1f 	bl	8008d74 <rshift>
 8009136:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	d047      	beq.n	80091d0 <__gethex+0x38c>
 8009140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d015      	beq.n	8009174 <__gethex+0x330>
 8009148:	2b03      	cmp	r3, #3
 800914a:	d017      	beq.n	800917c <__gethex+0x338>
 800914c:	2b01      	cmp	r3, #1
 800914e:	d109      	bne.n	8009164 <__gethex+0x320>
 8009150:	f019 0f02 	tst.w	r9, #2
 8009154:	d006      	beq.n	8009164 <__gethex+0x320>
 8009156:	f8da 3000 	ldr.w	r3, [sl]
 800915a:	ea49 0903 	orr.w	r9, r9, r3
 800915e:	f019 0f01 	tst.w	r9, #1
 8009162:	d10e      	bne.n	8009182 <__gethex+0x33e>
 8009164:	f045 0510 	orr.w	r5, r5, #16
 8009168:	e032      	b.n	80091d0 <__gethex+0x38c>
 800916a:	f04f 0901 	mov.w	r9, #1
 800916e:	e7d1      	b.n	8009114 <__gethex+0x2d0>
 8009170:	2501      	movs	r5, #1
 8009172:	e7e2      	b.n	800913a <__gethex+0x2f6>
 8009174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009176:	f1c3 0301 	rsb	r3, r3, #1
 800917a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800917c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f0      	beq.n	8009164 <__gethex+0x320>
 8009182:	f04f 0c00 	mov.w	ip, #0
 8009186:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800918a:	f104 0314 	add.w	r3, r4, #20
 800918e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009192:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009196:	4618      	mov	r0, r3
 8009198:	f853 2b04 	ldr.w	r2, [r3], #4
 800919c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091a0:	d01b      	beq.n	80091da <__gethex+0x396>
 80091a2:	3201      	adds	r2, #1
 80091a4:	6002      	str	r2, [r0, #0]
 80091a6:	2d02      	cmp	r5, #2
 80091a8:	f104 0314 	add.w	r3, r4, #20
 80091ac:	d13c      	bne.n	8009228 <__gethex+0x3e4>
 80091ae:	f8d8 2000 	ldr.w	r2, [r8]
 80091b2:	3a01      	subs	r2, #1
 80091b4:	42b2      	cmp	r2, r6
 80091b6:	d109      	bne.n	80091cc <__gethex+0x388>
 80091b8:	2201      	movs	r2, #1
 80091ba:	1171      	asrs	r1, r6, #5
 80091bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091c0:	f006 061f 	and.w	r6, r6, #31
 80091c4:	fa02 f606 	lsl.w	r6, r2, r6
 80091c8:	421e      	tst	r6, r3
 80091ca:	d13a      	bne.n	8009242 <__gethex+0x3fe>
 80091cc:	f045 0520 	orr.w	r5, r5, #32
 80091d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d2:	601c      	str	r4, [r3, #0]
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	601f      	str	r7, [r3, #0]
 80091d8:	e6b0      	b.n	8008f3c <__gethex+0xf8>
 80091da:	4299      	cmp	r1, r3
 80091dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80091e0:	d8d9      	bhi.n	8009196 <__gethex+0x352>
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	459b      	cmp	fp, r3
 80091e6:	db17      	blt.n	8009218 <__gethex+0x3d4>
 80091e8:	6861      	ldr	r1, [r4, #4]
 80091ea:	9801      	ldr	r0, [sp, #4]
 80091ec:	3101      	adds	r1, #1
 80091ee:	f000 fa0f 	bl	8009610 <_Balloc>
 80091f2:	4681      	mov	r9, r0
 80091f4:	b918      	cbnz	r0, 80091fe <__gethex+0x3ba>
 80091f6:	4602      	mov	r2, r0
 80091f8:	2184      	movs	r1, #132	@ 0x84
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <__gethex+0x41c>)
 80091fc:	e6c5      	b.n	8008f8a <__gethex+0x146>
 80091fe:	6922      	ldr	r2, [r4, #16]
 8009200:	f104 010c 	add.w	r1, r4, #12
 8009204:	3202      	adds	r2, #2
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	300c      	adds	r0, #12
 800920a:	f7ff fd30 	bl	8008c6e <memcpy>
 800920e:	4621      	mov	r1, r4
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	f000 fa3d 	bl	8009690 <_Bfree>
 8009216:	464c      	mov	r4, r9
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	6122      	str	r2, [r4, #16]
 800921e:	2201      	movs	r2, #1
 8009220:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009224:	615a      	str	r2, [r3, #20]
 8009226:	e7be      	b.n	80091a6 <__gethex+0x362>
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	455a      	cmp	r2, fp
 800922c:	dd0b      	ble.n	8009246 <__gethex+0x402>
 800922e:	2101      	movs	r1, #1
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff fd9f 	bl	8008d74 <rshift>
 8009236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800923a:	3701      	adds	r7, #1
 800923c:	42bb      	cmp	r3, r7
 800923e:	f6ff aee0 	blt.w	8009002 <__gethex+0x1be>
 8009242:	2501      	movs	r5, #1
 8009244:	e7c2      	b.n	80091cc <__gethex+0x388>
 8009246:	f016 061f 	ands.w	r6, r6, #31
 800924a:	d0fa      	beq.n	8009242 <__gethex+0x3fe>
 800924c:	4453      	add	r3, sl
 800924e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009252:	f000 facf 	bl	80097f4 <__hi0bits>
 8009256:	f1c6 0620 	rsb	r6, r6, #32
 800925a:	42b0      	cmp	r0, r6
 800925c:	dbe7      	blt.n	800922e <__gethex+0x3ea>
 800925e:	e7f0      	b.n	8009242 <__gethex+0x3fe>
 8009260:	0800c6ce 	.word	0x0800c6ce

08009264 <L_shift>:
 8009264:	f1c2 0208 	rsb	r2, r2, #8
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	f1c2 0620 	rsb	r6, r2, #32
 8009270:	6843      	ldr	r3, [r0, #4]
 8009272:	6804      	ldr	r4, [r0, #0]
 8009274:	fa03 f506 	lsl.w	r5, r3, r6
 8009278:	432c      	orrs	r4, r5
 800927a:	40d3      	lsrs	r3, r2
 800927c:	6004      	str	r4, [r0, #0]
 800927e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009282:	4288      	cmp	r0, r1
 8009284:	d3f4      	bcc.n	8009270 <L_shift+0xc>
 8009286:	bd70      	pop	{r4, r5, r6, pc}

08009288 <__match>:
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	6803      	ldr	r3, [r0, #0]
 800928c:	3301      	adds	r3, #1
 800928e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009292:	b914      	cbnz	r4, 800929a <__match+0x12>
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	2001      	movs	r0, #1
 8009298:	bd30      	pop	{r4, r5, pc}
 800929a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800929e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092a2:	2d19      	cmp	r5, #25
 80092a4:	bf98      	it	ls
 80092a6:	3220      	addls	r2, #32
 80092a8:	42a2      	cmp	r2, r4
 80092aa:	d0f0      	beq.n	800928e <__match+0x6>
 80092ac:	2000      	movs	r0, #0
 80092ae:	e7f3      	b.n	8009298 <__match+0x10>

080092b0 <__hexnan>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	2500      	movs	r5, #0
 80092b6:	680b      	ldr	r3, [r1, #0]
 80092b8:	4682      	mov	sl, r0
 80092ba:	115e      	asrs	r6, r3, #5
 80092bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092c0:	f013 031f 	ands.w	r3, r3, #31
 80092c4:	bf18      	it	ne
 80092c6:	3604      	addne	r6, #4
 80092c8:	1f37      	subs	r7, r6, #4
 80092ca:	4690      	mov	r8, r2
 80092cc:	46b9      	mov	r9, r7
 80092ce:	463c      	mov	r4, r7
 80092d0:	46ab      	mov	fp, r5
 80092d2:	b087      	sub	sp, #28
 80092d4:	6801      	ldr	r1, [r0, #0]
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	f846 5c04 	str.w	r5, [r6, #-4]
 80092dc:	9502      	str	r5, [sp, #8]
 80092de:	784a      	ldrb	r2, [r1, #1]
 80092e0:	1c4b      	adds	r3, r1, #1
 80092e2:	9303      	str	r3, [sp, #12]
 80092e4:	b342      	cbz	r2, 8009338 <__hexnan+0x88>
 80092e6:	4610      	mov	r0, r2
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	9204      	str	r2, [sp, #16]
 80092ec:	f7ff fd95 	bl	8008e1a <__hexdig_fun>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d151      	bne.n	8009398 <__hexnan+0xe8>
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	9905      	ldr	r1, [sp, #20]
 80092f8:	2a20      	cmp	r2, #32
 80092fa:	d818      	bhi.n	800932e <__hexnan+0x7e>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	459b      	cmp	fp, r3
 8009300:	dd13      	ble.n	800932a <__hexnan+0x7a>
 8009302:	454c      	cmp	r4, r9
 8009304:	d206      	bcs.n	8009314 <__hexnan+0x64>
 8009306:	2d07      	cmp	r5, #7
 8009308:	dc04      	bgt.n	8009314 <__hexnan+0x64>
 800930a:	462a      	mov	r2, r5
 800930c:	4649      	mov	r1, r9
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ffa8 	bl	8009264 <L_shift>
 8009314:	4544      	cmp	r4, r8
 8009316:	d952      	bls.n	80093be <__hexnan+0x10e>
 8009318:	2300      	movs	r3, #0
 800931a:	f1a4 0904 	sub.w	r9, r4, #4
 800931e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009322:	461d      	mov	r5, r3
 8009324:	464c      	mov	r4, r9
 8009326:	f8cd b008 	str.w	fp, [sp, #8]
 800932a:	9903      	ldr	r1, [sp, #12]
 800932c:	e7d7      	b.n	80092de <__hexnan+0x2e>
 800932e:	2a29      	cmp	r2, #41	@ 0x29
 8009330:	d157      	bne.n	80093e2 <__hexnan+0x132>
 8009332:	3102      	adds	r1, #2
 8009334:	f8ca 1000 	str.w	r1, [sl]
 8009338:	f1bb 0f00 	cmp.w	fp, #0
 800933c:	d051      	beq.n	80093e2 <__hexnan+0x132>
 800933e:	454c      	cmp	r4, r9
 8009340:	d206      	bcs.n	8009350 <__hexnan+0xa0>
 8009342:	2d07      	cmp	r5, #7
 8009344:	dc04      	bgt.n	8009350 <__hexnan+0xa0>
 8009346:	462a      	mov	r2, r5
 8009348:	4649      	mov	r1, r9
 800934a:	4620      	mov	r0, r4
 800934c:	f7ff ff8a 	bl	8009264 <L_shift>
 8009350:	4544      	cmp	r4, r8
 8009352:	d936      	bls.n	80093c2 <__hexnan+0x112>
 8009354:	4623      	mov	r3, r4
 8009356:	f1a8 0204 	sub.w	r2, r8, #4
 800935a:	f853 1b04 	ldr.w	r1, [r3], #4
 800935e:	429f      	cmp	r7, r3
 8009360:	f842 1f04 	str.w	r1, [r2, #4]!
 8009364:	d2f9      	bcs.n	800935a <__hexnan+0xaa>
 8009366:	1b3b      	subs	r3, r7, r4
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	3304      	adds	r3, #4
 800936e:	3401      	adds	r4, #1
 8009370:	3e03      	subs	r6, #3
 8009372:	42b4      	cmp	r4, r6
 8009374:	bf88      	it	hi
 8009376:	2304      	movhi	r3, #4
 8009378:	2200      	movs	r2, #0
 800937a:	4443      	add	r3, r8
 800937c:	f843 2b04 	str.w	r2, [r3], #4
 8009380:	429f      	cmp	r7, r3
 8009382:	d2fb      	bcs.n	800937c <__hexnan+0xcc>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	b91b      	cbnz	r3, 8009390 <__hexnan+0xe0>
 8009388:	4547      	cmp	r7, r8
 800938a:	d128      	bne.n	80093de <__hexnan+0x12e>
 800938c:	2301      	movs	r3, #1
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	2005      	movs	r0, #5
 8009392:	b007      	add	sp, #28
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	3501      	adds	r5, #1
 800939a:	2d08      	cmp	r5, #8
 800939c:	f10b 0b01 	add.w	fp, fp, #1
 80093a0:	dd06      	ble.n	80093b0 <__hexnan+0x100>
 80093a2:	4544      	cmp	r4, r8
 80093a4:	d9c1      	bls.n	800932a <__hexnan+0x7a>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2501      	movs	r5, #1
 80093aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80093ae:	3c04      	subs	r4, #4
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	f000 000f 	and.w	r0, r0, #15
 80093b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093ba:	6020      	str	r0, [r4, #0]
 80093bc:	e7b5      	b.n	800932a <__hexnan+0x7a>
 80093be:	2508      	movs	r5, #8
 80093c0:	e7b3      	b.n	800932a <__hexnan+0x7a>
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0dd      	beq.n	8009384 <__hexnan+0xd4>
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	f1c3 0320 	rsb	r3, r3, #32
 80093d0:	40da      	lsrs	r2, r3
 80093d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093d6:	4013      	ands	r3, r2
 80093d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80093dc:	e7d2      	b.n	8009384 <__hexnan+0xd4>
 80093de:	3f04      	subs	r7, #4
 80093e0:	e7d0      	b.n	8009384 <__hexnan+0xd4>
 80093e2:	2004      	movs	r0, #4
 80093e4:	e7d5      	b.n	8009392 <__hexnan+0xe2>
	...

080093e8 <_findenv_r>:
 80093e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800945c <_findenv_r+0x74>
 80093f0:	4606      	mov	r6, r0
 80093f2:	4689      	mov	r9, r1
 80093f4:	4617      	mov	r7, r2
 80093f6:	f000 fff3 	bl	800a3e0 <__env_lock>
 80093fa:	f8da 4000 	ldr.w	r4, [sl]
 80093fe:	b134      	cbz	r4, 800940e <_findenv_r+0x26>
 8009400:	464b      	mov	r3, r9
 8009402:	4698      	mov	r8, r3
 8009404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009408:	b13a      	cbz	r2, 800941a <_findenv_r+0x32>
 800940a:	2a3d      	cmp	r2, #61	@ 0x3d
 800940c:	d1f9      	bne.n	8009402 <_findenv_r+0x1a>
 800940e:	4630      	mov	r0, r6
 8009410:	f000 ffec 	bl	800a3ec <__env_unlock>
 8009414:	2000      	movs	r0, #0
 8009416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	eba8 0809 	sub.w	r8, r8, r9
 800941e:	46a3      	mov	fp, r4
 8009420:	f854 0b04 	ldr.w	r0, [r4], #4
 8009424:	2800      	cmp	r0, #0
 8009426:	d0f2      	beq.n	800940e <_findenv_r+0x26>
 8009428:	4642      	mov	r2, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7fe fcbd 	bl	8007daa <strncmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	d1f4      	bne.n	800941e <_findenv_r+0x36>
 8009434:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009438:	eb03 0508 	add.w	r5, r3, r8
 800943c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009440:	2b3d      	cmp	r3, #61	@ 0x3d
 8009442:	d1ec      	bne.n	800941e <_findenv_r+0x36>
 8009444:	f8da 3000 	ldr.w	r3, [sl]
 8009448:	4630      	mov	r0, r6
 800944a:	ebab 0303 	sub.w	r3, fp, r3
 800944e:	109b      	asrs	r3, r3, #2
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	f000 ffcb 	bl	800a3ec <__env_unlock>
 8009456:	1c68      	adds	r0, r5, #1
 8009458:	e7dd      	b.n	8009416 <_findenv_r+0x2e>
 800945a:	bf00      	nop
 800945c:	200003d8 	.word	0x200003d8

08009460 <_getenv_r>:
 8009460:	b507      	push	{r0, r1, r2, lr}
 8009462:	aa01      	add	r2, sp, #4
 8009464:	f7ff ffc0 	bl	80093e8 <_findenv_r>
 8009468:	b003      	add	sp, #12
 800946a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009470 <malloc>:
 8009470:	4b02      	ldr	r3, [pc, #8]	@ (800947c <malloc+0xc>)
 8009472:	4601      	mov	r1, r0
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	f000 b82d 	b.w	80094d4 <_malloc_r>
 800947a:	bf00      	nop
 800947c:	2000055c 	.word	0x2000055c

08009480 <free>:
 8009480:	4b02      	ldr	r3, [pc, #8]	@ (800948c <free+0xc>)
 8009482:	4601      	mov	r1, r0
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f7ff bc2d 	b.w	8008ce4 <_free_r>
 800948a:	bf00      	nop
 800948c:	2000055c 	.word	0x2000055c

08009490 <sbrk_aligned>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	4e0f      	ldr	r6, [pc, #60]	@ (80094d0 <sbrk_aligned+0x40>)
 8009494:	460c      	mov	r4, r1
 8009496:	6831      	ldr	r1, [r6, #0]
 8009498:	4605      	mov	r5, r0
 800949a:	b911      	cbnz	r1, 80094a2 <sbrk_aligned+0x12>
 800949c:	f000 ff74 	bl	800a388 <_sbrk_r>
 80094a0:	6030      	str	r0, [r6, #0]
 80094a2:	4621      	mov	r1, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	f000 ff6f 	bl	800a388 <_sbrk_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	d103      	bne.n	80094b6 <sbrk_aligned+0x26>
 80094ae:	f04f 34ff 	mov.w	r4, #4294967295
 80094b2:	4620      	mov	r0, r4
 80094b4:	bd70      	pop	{r4, r5, r6, pc}
 80094b6:	1cc4      	adds	r4, r0, #3
 80094b8:	f024 0403 	bic.w	r4, r4, #3
 80094bc:	42a0      	cmp	r0, r4
 80094be:	d0f8      	beq.n	80094b2 <sbrk_aligned+0x22>
 80094c0:	1a21      	subs	r1, r4, r0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 ff60 	bl	800a388 <_sbrk_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d1f2      	bne.n	80094b2 <sbrk_aligned+0x22>
 80094cc:	e7ef      	b.n	80094ae <sbrk_aligned+0x1e>
 80094ce:	bf00      	nop
 80094d0:	200009c8 	.word	0x200009c8

080094d4 <_malloc_r>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	1ccd      	adds	r5, r1, #3
 80094da:	f025 0503 	bic.w	r5, r5, #3
 80094de:	3508      	adds	r5, #8
 80094e0:	2d0c      	cmp	r5, #12
 80094e2:	bf38      	it	cc
 80094e4:	250c      	movcc	r5, #12
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	4606      	mov	r6, r0
 80094ea:	db01      	blt.n	80094f0 <_malloc_r+0x1c>
 80094ec:	42a9      	cmp	r1, r5
 80094ee:	d904      	bls.n	80094fa <_malloc_r+0x26>
 80094f0:	230c      	movs	r3, #12
 80094f2:	6033      	str	r3, [r6, #0]
 80094f4:	2000      	movs	r0, #0
 80094f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095d0 <_malloc_r+0xfc>
 80094fe:	f000 f87b 	bl	80095f8 <__malloc_lock>
 8009502:	f8d8 3000 	ldr.w	r3, [r8]
 8009506:	461c      	mov	r4, r3
 8009508:	bb44      	cbnz	r4, 800955c <_malloc_r+0x88>
 800950a:	4629      	mov	r1, r5
 800950c:	4630      	mov	r0, r6
 800950e:	f7ff ffbf 	bl	8009490 <sbrk_aligned>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	4604      	mov	r4, r0
 8009516:	d158      	bne.n	80095ca <_malloc_r+0xf6>
 8009518:	f8d8 4000 	ldr.w	r4, [r8]
 800951c:	4627      	mov	r7, r4
 800951e:	2f00      	cmp	r7, #0
 8009520:	d143      	bne.n	80095aa <_malloc_r+0xd6>
 8009522:	2c00      	cmp	r4, #0
 8009524:	d04b      	beq.n	80095be <_malloc_r+0xea>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	4639      	mov	r1, r7
 800952a:	4630      	mov	r0, r6
 800952c:	eb04 0903 	add.w	r9, r4, r3
 8009530:	f000 ff2a 	bl	800a388 <_sbrk_r>
 8009534:	4581      	cmp	r9, r0
 8009536:	d142      	bne.n	80095be <_malloc_r+0xea>
 8009538:	6821      	ldr	r1, [r4, #0]
 800953a:	4630      	mov	r0, r6
 800953c:	1a6d      	subs	r5, r5, r1
 800953e:	4629      	mov	r1, r5
 8009540:	f7ff ffa6 	bl	8009490 <sbrk_aligned>
 8009544:	3001      	adds	r0, #1
 8009546:	d03a      	beq.n	80095be <_malloc_r+0xea>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	442b      	add	r3, r5
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	f8d8 3000 	ldr.w	r3, [r8]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	bb62      	cbnz	r2, 80095b0 <_malloc_r+0xdc>
 8009556:	f8c8 7000 	str.w	r7, [r8]
 800955a:	e00f      	b.n	800957c <_malloc_r+0xa8>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	1b52      	subs	r2, r2, r5
 8009560:	d420      	bmi.n	80095a4 <_malloc_r+0xd0>
 8009562:	2a0b      	cmp	r2, #11
 8009564:	d917      	bls.n	8009596 <_malloc_r+0xc2>
 8009566:	1961      	adds	r1, r4, r5
 8009568:	42a3      	cmp	r3, r4
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	bf18      	it	ne
 800956e:	6059      	strne	r1, [r3, #4]
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	bf08      	it	eq
 8009574:	f8c8 1000 	streq.w	r1, [r8]
 8009578:	5162      	str	r2, [r4, r5]
 800957a:	604b      	str	r3, [r1, #4]
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f841 	bl	8009604 <__malloc_unlock>
 8009582:	f104 000b 	add.w	r0, r4, #11
 8009586:	1d23      	adds	r3, r4, #4
 8009588:	f020 0007 	bic.w	r0, r0, #7
 800958c:	1ac2      	subs	r2, r0, r3
 800958e:	bf1c      	itt	ne
 8009590:	1a1b      	subne	r3, r3, r0
 8009592:	50a3      	strne	r3, [r4, r2]
 8009594:	e7af      	b.n	80094f6 <_malloc_r+0x22>
 8009596:	6862      	ldr	r2, [r4, #4]
 8009598:	42a3      	cmp	r3, r4
 800959a:	bf0c      	ite	eq
 800959c:	f8c8 2000 	streq.w	r2, [r8]
 80095a0:	605a      	strne	r2, [r3, #4]
 80095a2:	e7eb      	b.n	800957c <_malloc_r+0xa8>
 80095a4:	4623      	mov	r3, r4
 80095a6:	6864      	ldr	r4, [r4, #4]
 80095a8:	e7ae      	b.n	8009508 <_malloc_r+0x34>
 80095aa:	463c      	mov	r4, r7
 80095ac:	687f      	ldr	r7, [r7, #4]
 80095ae:	e7b6      	b.n	800951e <_malloc_r+0x4a>
 80095b0:	461a      	mov	r2, r3
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d1fb      	bne.n	80095b0 <_malloc_r+0xdc>
 80095b8:	2300      	movs	r3, #0
 80095ba:	6053      	str	r3, [r2, #4]
 80095bc:	e7de      	b.n	800957c <_malloc_r+0xa8>
 80095be:	230c      	movs	r3, #12
 80095c0:	4630      	mov	r0, r6
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	f000 f81e 	bl	8009604 <__malloc_unlock>
 80095c8:	e794      	b.n	80094f4 <_malloc_r+0x20>
 80095ca:	6005      	str	r5, [r0, #0]
 80095cc:	e7d6      	b.n	800957c <_malloc_r+0xa8>
 80095ce:	bf00      	nop
 80095d0:	200009cc 	.word	0x200009cc

080095d4 <__ascii_mbtowc>:
 80095d4:	b082      	sub	sp, #8
 80095d6:	b901      	cbnz	r1, 80095da <__ascii_mbtowc+0x6>
 80095d8:	a901      	add	r1, sp, #4
 80095da:	b142      	cbz	r2, 80095ee <__ascii_mbtowc+0x1a>
 80095dc:	b14b      	cbz	r3, 80095f2 <__ascii_mbtowc+0x1e>
 80095de:	7813      	ldrb	r3, [r2, #0]
 80095e0:	600b      	str	r3, [r1, #0]
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	1e10      	subs	r0, r2, #0
 80095e6:	bf18      	it	ne
 80095e8:	2001      	movne	r0, #1
 80095ea:	b002      	add	sp, #8
 80095ec:	4770      	bx	lr
 80095ee:	4610      	mov	r0, r2
 80095f0:	e7fb      	b.n	80095ea <__ascii_mbtowc+0x16>
 80095f2:	f06f 0001 	mvn.w	r0, #1
 80095f6:	e7f8      	b.n	80095ea <__ascii_mbtowc+0x16>

080095f8 <__malloc_lock>:
 80095f8:	4801      	ldr	r0, [pc, #4]	@ (8009600 <__malloc_lock+0x8>)
 80095fa:	f7ff bb2d 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	200009c6 	.word	0x200009c6

08009604 <__malloc_unlock>:
 8009604:	4801      	ldr	r0, [pc, #4]	@ (800960c <__malloc_unlock+0x8>)
 8009606:	f7ff bb29 	b.w	8008c5c <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	200009c6 	.word	0x200009c6

08009610 <_Balloc>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	69c6      	ldr	r6, [r0, #28]
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	b976      	cbnz	r6, 8009638 <_Balloc+0x28>
 800961a:	2010      	movs	r0, #16
 800961c:	f7ff ff28 	bl	8009470 <malloc>
 8009620:	4602      	mov	r2, r0
 8009622:	61e0      	str	r0, [r4, #28]
 8009624:	b920      	cbnz	r0, 8009630 <_Balloc+0x20>
 8009626:	216b      	movs	r1, #107	@ 0x6b
 8009628:	4b17      	ldr	r3, [pc, #92]	@ (8009688 <_Balloc+0x78>)
 800962a:	4818      	ldr	r0, [pc, #96]	@ (800968c <_Balloc+0x7c>)
 800962c:	f7ff fb34 	bl	8008c98 <__assert_func>
 8009630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009634:	6006      	str	r6, [r0, #0]
 8009636:	60c6      	str	r6, [r0, #12]
 8009638:	69e6      	ldr	r6, [r4, #28]
 800963a:	68f3      	ldr	r3, [r6, #12]
 800963c:	b183      	cbz	r3, 8009660 <_Balloc+0x50>
 800963e:	69e3      	ldr	r3, [r4, #28]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009646:	b9b8      	cbnz	r0, 8009678 <_Balloc+0x68>
 8009648:	2101      	movs	r1, #1
 800964a:	fa01 f605 	lsl.w	r6, r1, r5
 800964e:	1d72      	adds	r2, r6, #5
 8009650:	4620      	mov	r0, r4
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	f000 feaf 	bl	800a3b6 <_calloc_r>
 8009658:	b160      	cbz	r0, 8009674 <_Balloc+0x64>
 800965a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800965e:	e00e      	b.n	800967e <_Balloc+0x6e>
 8009660:	2221      	movs	r2, #33	@ 0x21
 8009662:	2104      	movs	r1, #4
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fea6 	bl	800a3b6 <_calloc_r>
 800966a:	69e3      	ldr	r3, [r4, #28]
 800966c:	60f0      	str	r0, [r6, #12]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e4      	bne.n	800963e <_Balloc+0x2e>
 8009674:	2000      	movs	r0, #0
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	6802      	ldr	r2, [r0, #0]
 800967a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800967e:	2300      	movs	r3, #0
 8009680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009684:	e7f7      	b.n	8009676 <_Balloc+0x66>
 8009686:	bf00      	nop
 8009688:	0800c4b1 	.word	0x0800c4b1
 800968c:	0800c73f 	.word	0x0800c73f

08009690 <_Bfree>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	69c6      	ldr	r6, [r0, #28]
 8009694:	4605      	mov	r5, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b976      	cbnz	r6, 80096b8 <_Bfree+0x28>
 800969a:	2010      	movs	r0, #16
 800969c:	f7ff fee8 	bl	8009470 <malloc>
 80096a0:	4602      	mov	r2, r0
 80096a2:	61e8      	str	r0, [r5, #28]
 80096a4:	b920      	cbnz	r0, 80096b0 <_Bfree+0x20>
 80096a6:	218f      	movs	r1, #143	@ 0x8f
 80096a8:	4b08      	ldr	r3, [pc, #32]	@ (80096cc <_Bfree+0x3c>)
 80096aa:	4809      	ldr	r0, [pc, #36]	@ (80096d0 <_Bfree+0x40>)
 80096ac:	f7ff faf4 	bl	8008c98 <__assert_func>
 80096b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096b4:	6006      	str	r6, [r0, #0]
 80096b6:	60c6      	str	r6, [r0, #12]
 80096b8:	b13c      	cbz	r4, 80096ca <_Bfree+0x3a>
 80096ba:	69eb      	ldr	r3, [r5, #28]
 80096bc:	6862      	ldr	r2, [r4, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096c4:	6021      	str	r1, [r4, #0]
 80096c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	0800c4b1 	.word	0x0800c4b1
 80096d0:	0800c73f 	.word	0x0800c73f

080096d4 <__multadd>:
 80096d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d8:	4607      	mov	r7, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	461e      	mov	r6, r3
 80096de:	2000      	movs	r0, #0
 80096e0:	690d      	ldr	r5, [r1, #16]
 80096e2:	f101 0c14 	add.w	ip, r1, #20
 80096e6:	f8dc 3000 	ldr.w	r3, [ip]
 80096ea:	3001      	adds	r0, #1
 80096ec:	b299      	uxth	r1, r3
 80096ee:	fb02 6101 	mla	r1, r2, r1, r6
 80096f2:	0c1e      	lsrs	r6, r3, #16
 80096f4:	0c0b      	lsrs	r3, r1, #16
 80096f6:	fb02 3306 	mla	r3, r2, r6, r3
 80096fa:	b289      	uxth	r1, r1
 80096fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009700:	4285      	cmp	r5, r0
 8009702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009706:	f84c 1b04 	str.w	r1, [ip], #4
 800970a:	dcec      	bgt.n	80096e6 <__multadd+0x12>
 800970c:	b30e      	cbz	r6, 8009752 <__multadd+0x7e>
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	42ab      	cmp	r3, r5
 8009712:	dc19      	bgt.n	8009748 <__multadd+0x74>
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	4638      	mov	r0, r7
 8009718:	3101      	adds	r1, #1
 800971a:	f7ff ff79 	bl	8009610 <_Balloc>
 800971e:	4680      	mov	r8, r0
 8009720:	b928      	cbnz	r0, 800972e <__multadd+0x5a>
 8009722:	4602      	mov	r2, r0
 8009724:	21ba      	movs	r1, #186	@ 0xba
 8009726:	4b0c      	ldr	r3, [pc, #48]	@ (8009758 <__multadd+0x84>)
 8009728:	480c      	ldr	r0, [pc, #48]	@ (800975c <__multadd+0x88>)
 800972a:	f7ff fab5 	bl	8008c98 <__assert_func>
 800972e:	6922      	ldr	r2, [r4, #16]
 8009730:	f104 010c 	add.w	r1, r4, #12
 8009734:	3202      	adds	r2, #2
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	300c      	adds	r0, #12
 800973a:	f7ff fa98 	bl	8008c6e <memcpy>
 800973e:	4621      	mov	r1, r4
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ffa5 	bl	8009690 <_Bfree>
 8009746:	4644      	mov	r4, r8
 8009748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800974c:	3501      	adds	r5, #1
 800974e:	615e      	str	r6, [r3, #20]
 8009750:	6125      	str	r5, [r4, #16]
 8009752:	4620      	mov	r0, r4
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009758:	0800c6ce 	.word	0x0800c6ce
 800975c:	0800c73f 	.word	0x0800c73f

08009760 <__s2b>:
 8009760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009764:	4615      	mov	r5, r2
 8009766:	2209      	movs	r2, #9
 8009768:	461f      	mov	r7, r3
 800976a:	3308      	adds	r3, #8
 800976c:	460c      	mov	r4, r1
 800976e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009772:	4606      	mov	r6, r0
 8009774:	2201      	movs	r2, #1
 8009776:	2100      	movs	r1, #0
 8009778:	429a      	cmp	r2, r3
 800977a:	db09      	blt.n	8009790 <__s2b+0x30>
 800977c:	4630      	mov	r0, r6
 800977e:	f7ff ff47 	bl	8009610 <_Balloc>
 8009782:	b940      	cbnz	r0, 8009796 <__s2b+0x36>
 8009784:	4602      	mov	r2, r0
 8009786:	21d3      	movs	r1, #211	@ 0xd3
 8009788:	4b18      	ldr	r3, [pc, #96]	@ (80097ec <__s2b+0x8c>)
 800978a:	4819      	ldr	r0, [pc, #100]	@ (80097f0 <__s2b+0x90>)
 800978c:	f7ff fa84 	bl	8008c98 <__assert_func>
 8009790:	0052      	lsls	r2, r2, #1
 8009792:	3101      	adds	r1, #1
 8009794:	e7f0      	b.n	8009778 <__s2b+0x18>
 8009796:	9b08      	ldr	r3, [sp, #32]
 8009798:	2d09      	cmp	r5, #9
 800979a:	6143      	str	r3, [r0, #20]
 800979c:	f04f 0301 	mov.w	r3, #1
 80097a0:	6103      	str	r3, [r0, #16]
 80097a2:	dd16      	ble.n	80097d2 <__s2b+0x72>
 80097a4:	f104 0909 	add.w	r9, r4, #9
 80097a8:	46c8      	mov	r8, r9
 80097aa:	442c      	add	r4, r5
 80097ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097b0:	4601      	mov	r1, r0
 80097b2:	220a      	movs	r2, #10
 80097b4:	4630      	mov	r0, r6
 80097b6:	3b30      	subs	r3, #48	@ 0x30
 80097b8:	f7ff ff8c 	bl	80096d4 <__multadd>
 80097bc:	45a0      	cmp	r8, r4
 80097be:	d1f5      	bne.n	80097ac <__s2b+0x4c>
 80097c0:	f1a5 0408 	sub.w	r4, r5, #8
 80097c4:	444c      	add	r4, r9
 80097c6:	1b2d      	subs	r5, r5, r4
 80097c8:	1963      	adds	r3, r4, r5
 80097ca:	42bb      	cmp	r3, r7
 80097cc:	db04      	blt.n	80097d8 <__s2b+0x78>
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d2:	2509      	movs	r5, #9
 80097d4:	340a      	adds	r4, #10
 80097d6:	e7f6      	b.n	80097c6 <__s2b+0x66>
 80097d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097dc:	4601      	mov	r1, r0
 80097de:	220a      	movs	r2, #10
 80097e0:	4630      	mov	r0, r6
 80097e2:	3b30      	subs	r3, #48	@ 0x30
 80097e4:	f7ff ff76 	bl	80096d4 <__multadd>
 80097e8:	e7ee      	b.n	80097c8 <__s2b+0x68>
 80097ea:	bf00      	nop
 80097ec:	0800c6ce 	.word	0x0800c6ce
 80097f0:	0800c73f 	.word	0x0800c73f

080097f4 <__hi0bits>:
 80097f4:	4603      	mov	r3, r0
 80097f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097fa:	bf3a      	itte	cc
 80097fc:	0403      	lslcc	r3, r0, #16
 80097fe:	2010      	movcc	r0, #16
 8009800:	2000      	movcs	r0, #0
 8009802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009806:	bf3c      	itt	cc
 8009808:	021b      	lslcc	r3, r3, #8
 800980a:	3008      	addcc	r0, #8
 800980c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009810:	bf3c      	itt	cc
 8009812:	011b      	lslcc	r3, r3, #4
 8009814:	3004      	addcc	r0, #4
 8009816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800981a:	bf3c      	itt	cc
 800981c:	009b      	lslcc	r3, r3, #2
 800981e:	3002      	addcc	r0, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	db05      	blt.n	8009830 <__hi0bits+0x3c>
 8009824:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009828:	f100 0001 	add.w	r0, r0, #1
 800982c:	bf08      	it	eq
 800982e:	2020      	moveq	r0, #32
 8009830:	4770      	bx	lr

08009832 <__lo0bits>:
 8009832:	6803      	ldr	r3, [r0, #0]
 8009834:	4602      	mov	r2, r0
 8009836:	f013 0007 	ands.w	r0, r3, #7
 800983a:	d00b      	beq.n	8009854 <__lo0bits+0x22>
 800983c:	07d9      	lsls	r1, r3, #31
 800983e:	d421      	bmi.n	8009884 <__lo0bits+0x52>
 8009840:	0798      	lsls	r0, r3, #30
 8009842:	bf49      	itett	mi
 8009844:	085b      	lsrmi	r3, r3, #1
 8009846:	089b      	lsrpl	r3, r3, #2
 8009848:	2001      	movmi	r0, #1
 800984a:	6013      	strmi	r3, [r2, #0]
 800984c:	bf5c      	itt	pl
 800984e:	2002      	movpl	r0, #2
 8009850:	6013      	strpl	r3, [r2, #0]
 8009852:	4770      	bx	lr
 8009854:	b299      	uxth	r1, r3
 8009856:	b909      	cbnz	r1, 800985c <__lo0bits+0x2a>
 8009858:	2010      	movs	r0, #16
 800985a:	0c1b      	lsrs	r3, r3, #16
 800985c:	b2d9      	uxtb	r1, r3
 800985e:	b909      	cbnz	r1, 8009864 <__lo0bits+0x32>
 8009860:	3008      	adds	r0, #8
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	0719      	lsls	r1, r3, #28
 8009866:	bf04      	itt	eq
 8009868:	091b      	lsreq	r3, r3, #4
 800986a:	3004      	addeq	r0, #4
 800986c:	0799      	lsls	r1, r3, #30
 800986e:	bf04      	itt	eq
 8009870:	089b      	lsreq	r3, r3, #2
 8009872:	3002      	addeq	r0, #2
 8009874:	07d9      	lsls	r1, r3, #31
 8009876:	d403      	bmi.n	8009880 <__lo0bits+0x4e>
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	f100 0001 	add.w	r0, r0, #1
 800987e:	d003      	beq.n	8009888 <__lo0bits+0x56>
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	4770      	bx	lr
 8009884:	2000      	movs	r0, #0
 8009886:	4770      	bx	lr
 8009888:	2020      	movs	r0, #32
 800988a:	4770      	bx	lr

0800988c <__i2b>:
 800988c:	b510      	push	{r4, lr}
 800988e:	460c      	mov	r4, r1
 8009890:	2101      	movs	r1, #1
 8009892:	f7ff febd 	bl	8009610 <_Balloc>
 8009896:	4602      	mov	r2, r0
 8009898:	b928      	cbnz	r0, 80098a6 <__i2b+0x1a>
 800989a:	f240 1145 	movw	r1, #325	@ 0x145
 800989e:	4b04      	ldr	r3, [pc, #16]	@ (80098b0 <__i2b+0x24>)
 80098a0:	4804      	ldr	r0, [pc, #16]	@ (80098b4 <__i2b+0x28>)
 80098a2:	f7ff f9f9 	bl	8008c98 <__assert_func>
 80098a6:	2301      	movs	r3, #1
 80098a8:	6144      	str	r4, [r0, #20]
 80098aa:	6103      	str	r3, [r0, #16]
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	bf00      	nop
 80098b0:	0800c6ce 	.word	0x0800c6ce
 80098b4:	0800c73f 	.word	0x0800c73f

080098b8 <__multiply>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	4614      	mov	r4, r2
 80098be:	690a      	ldr	r2, [r1, #16]
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	460f      	mov	r7, r1
 80098c4:	429a      	cmp	r2, r3
 80098c6:	bfa2      	ittt	ge
 80098c8:	4623      	movge	r3, r4
 80098ca:	460c      	movge	r4, r1
 80098cc:	461f      	movge	r7, r3
 80098ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098d2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	6861      	ldr	r1, [r4, #4]
 80098da:	eb0a 0609 	add.w	r6, sl, r9
 80098de:	42b3      	cmp	r3, r6
 80098e0:	b085      	sub	sp, #20
 80098e2:	bfb8      	it	lt
 80098e4:	3101      	addlt	r1, #1
 80098e6:	f7ff fe93 	bl	8009610 <_Balloc>
 80098ea:	b930      	cbnz	r0, 80098fa <__multiply+0x42>
 80098ec:	4602      	mov	r2, r0
 80098ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098f2:	4b43      	ldr	r3, [pc, #268]	@ (8009a00 <__multiply+0x148>)
 80098f4:	4843      	ldr	r0, [pc, #268]	@ (8009a04 <__multiply+0x14c>)
 80098f6:	f7ff f9cf 	bl	8008c98 <__assert_func>
 80098fa:	f100 0514 	add.w	r5, r0, #20
 80098fe:	462b      	mov	r3, r5
 8009900:	2200      	movs	r2, #0
 8009902:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009906:	4543      	cmp	r3, r8
 8009908:	d321      	bcc.n	800994e <__multiply+0x96>
 800990a:	f107 0114 	add.w	r1, r7, #20
 800990e:	f104 0214 	add.w	r2, r4, #20
 8009912:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009916:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800991a:	9302      	str	r3, [sp, #8]
 800991c:	1b13      	subs	r3, r2, r4
 800991e:	3b15      	subs	r3, #21
 8009920:	f023 0303 	bic.w	r3, r3, #3
 8009924:	3304      	adds	r3, #4
 8009926:	f104 0715 	add.w	r7, r4, #21
 800992a:	42ba      	cmp	r2, r7
 800992c:	bf38      	it	cc
 800992e:	2304      	movcc	r3, #4
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	9103      	str	r1, [sp, #12]
 8009936:	428b      	cmp	r3, r1
 8009938:	d80c      	bhi.n	8009954 <__multiply+0x9c>
 800993a:	2e00      	cmp	r6, #0
 800993c:	dd03      	ble.n	8009946 <__multiply+0x8e>
 800993e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009942:	2b00      	cmp	r3, #0
 8009944:	d05a      	beq.n	80099fc <__multiply+0x144>
 8009946:	6106      	str	r6, [r0, #16]
 8009948:	b005      	add	sp, #20
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	f843 2b04 	str.w	r2, [r3], #4
 8009952:	e7d8      	b.n	8009906 <__multiply+0x4e>
 8009954:	f8b1 a000 	ldrh.w	sl, [r1]
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	d023      	beq.n	80099a6 <__multiply+0xee>
 800995e:	46a9      	mov	r9, r5
 8009960:	f04f 0c00 	mov.w	ip, #0
 8009964:	f104 0e14 	add.w	lr, r4, #20
 8009968:	f85e 7b04 	ldr.w	r7, [lr], #4
 800996c:	f8d9 3000 	ldr.w	r3, [r9]
 8009970:	fa1f fb87 	uxth.w	fp, r7
 8009974:	b29b      	uxth	r3, r3
 8009976:	fb0a 330b 	mla	r3, sl, fp, r3
 800997a:	4463      	add	r3, ip
 800997c:	f8d9 c000 	ldr.w	ip, [r9]
 8009980:	0c3f      	lsrs	r7, r7, #16
 8009982:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009986:	fb0a c707 	mla	r7, sl, r7, ip
 800998a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800998e:	b29b      	uxth	r3, r3
 8009990:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009994:	4572      	cmp	r2, lr
 8009996:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800999a:	f849 3b04 	str.w	r3, [r9], #4
 800999e:	d8e3      	bhi.n	8009968 <__multiply+0xb0>
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	f845 c003 	str.w	ip, [r5, r3]
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	3104      	adds	r1, #4
 80099aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099ae:	f1b9 0f00 	cmp.w	r9, #0
 80099b2:	d021      	beq.n	80099f8 <__multiply+0x140>
 80099b4:	46ae      	mov	lr, r5
 80099b6:	f04f 0a00 	mov.w	sl, #0
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	f104 0c14 	add.w	ip, r4, #20
 80099c0:	f8bc b000 	ldrh.w	fp, [ip]
 80099c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	fb09 770b 	mla	r7, r9, fp, r7
 80099ce:	4457      	add	r7, sl
 80099d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099d4:	f84e 3b04 	str.w	r3, [lr], #4
 80099d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099e0:	f8be 3000 	ldrh.w	r3, [lr]
 80099e4:	4562      	cmp	r2, ip
 80099e6:	fb09 330a 	mla	r3, r9, sl, r3
 80099ea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099f2:	d8e5      	bhi.n	80099c0 <__multiply+0x108>
 80099f4:	9f01      	ldr	r7, [sp, #4]
 80099f6:	51eb      	str	r3, [r5, r7]
 80099f8:	3504      	adds	r5, #4
 80099fa:	e79a      	b.n	8009932 <__multiply+0x7a>
 80099fc:	3e01      	subs	r6, #1
 80099fe:	e79c      	b.n	800993a <__multiply+0x82>
 8009a00:	0800c6ce 	.word	0x0800c6ce
 8009a04:	0800c73f 	.word	0x0800c73f

08009a08 <__pow5mult>:
 8009a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	f012 0203 	ands.w	r2, r2, #3
 8009a12:	4607      	mov	r7, r0
 8009a14:	460e      	mov	r6, r1
 8009a16:	d007      	beq.n	8009a28 <__pow5mult+0x20>
 8009a18:	4c25      	ldr	r4, [pc, #148]	@ (8009ab0 <__pow5mult+0xa8>)
 8009a1a:	3a01      	subs	r2, #1
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a22:	f7ff fe57 	bl	80096d4 <__multadd>
 8009a26:	4606      	mov	r6, r0
 8009a28:	10ad      	asrs	r5, r5, #2
 8009a2a:	d03d      	beq.n	8009aa8 <__pow5mult+0xa0>
 8009a2c:	69fc      	ldr	r4, [r7, #28]
 8009a2e:	b97c      	cbnz	r4, 8009a50 <__pow5mult+0x48>
 8009a30:	2010      	movs	r0, #16
 8009a32:	f7ff fd1d 	bl	8009470 <malloc>
 8009a36:	4602      	mov	r2, r0
 8009a38:	61f8      	str	r0, [r7, #28]
 8009a3a:	b928      	cbnz	r0, 8009a48 <__pow5mult+0x40>
 8009a3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a40:	4b1c      	ldr	r3, [pc, #112]	@ (8009ab4 <__pow5mult+0xac>)
 8009a42:	481d      	ldr	r0, [pc, #116]	@ (8009ab8 <__pow5mult+0xb0>)
 8009a44:	f7ff f928 	bl	8008c98 <__assert_func>
 8009a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a4c:	6004      	str	r4, [r0, #0]
 8009a4e:	60c4      	str	r4, [r0, #12]
 8009a50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a58:	b94c      	cbnz	r4, 8009a6e <__pow5mult+0x66>
 8009a5a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7ff ff14 	bl	800988c <__i2b>
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	f04f 0900 	mov.w	r9, #0
 8009a72:	07eb      	lsls	r3, r5, #31
 8009a74:	d50a      	bpl.n	8009a8c <__pow5mult+0x84>
 8009a76:	4631      	mov	r1, r6
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	f7ff ff1c 	bl	80098b8 <__multiply>
 8009a80:	4680      	mov	r8, r0
 8009a82:	4631      	mov	r1, r6
 8009a84:	4638      	mov	r0, r7
 8009a86:	f7ff fe03 	bl	8009690 <_Bfree>
 8009a8a:	4646      	mov	r6, r8
 8009a8c:	106d      	asrs	r5, r5, #1
 8009a8e:	d00b      	beq.n	8009aa8 <__pow5mult+0xa0>
 8009a90:	6820      	ldr	r0, [r4, #0]
 8009a92:	b938      	cbnz	r0, 8009aa4 <__pow5mult+0x9c>
 8009a94:	4622      	mov	r2, r4
 8009a96:	4621      	mov	r1, r4
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff ff0d 	bl	80098b8 <__multiply>
 8009a9e:	6020      	str	r0, [r4, #0]
 8009aa0:	f8c0 9000 	str.w	r9, [r0]
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	e7e4      	b.n	8009a72 <__pow5mult+0x6a>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aae:	bf00      	nop
 8009ab0:	0800c798 	.word	0x0800c798
 8009ab4:	0800c4b1 	.word	0x0800c4b1
 8009ab8:	0800c73f 	.word	0x0800c73f

08009abc <__lshift>:
 8009abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	4691      	mov	r9, r2
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	6849      	ldr	r1, [r1, #4]
 8009aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ad4:	f108 0601 	add.w	r6, r8, #1
 8009ad8:	42b3      	cmp	r3, r6
 8009ada:	db0b      	blt.n	8009af4 <__lshift+0x38>
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff fd97 	bl	8009610 <_Balloc>
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	b948      	cbnz	r0, 8009afa <__lshift+0x3e>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009aec:	4b27      	ldr	r3, [pc, #156]	@ (8009b8c <__lshift+0xd0>)
 8009aee:	4828      	ldr	r0, [pc, #160]	@ (8009b90 <__lshift+0xd4>)
 8009af0:	f7ff f8d2 	bl	8008c98 <__assert_func>
 8009af4:	3101      	adds	r1, #1
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	e7ee      	b.n	8009ad8 <__lshift+0x1c>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f100 0114 	add.w	r1, r0, #20
 8009b00:	f100 0210 	add.w	r2, r0, #16
 8009b04:	4618      	mov	r0, r3
 8009b06:	4553      	cmp	r3, sl
 8009b08:	db33      	blt.n	8009b72 <__lshift+0xb6>
 8009b0a:	6920      	ldr	r0, [r4, #16]
 8009b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b10:	f104 0314 	add.w	r3, r4, #20
 8009b14:	f019 091f 	ands.w	r9, r9, #31
 8009b18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b20:	d02b      	beq.n	8009b7a <__lshift+0xbe>
 8009b22:	468a      	mov	sl, r1
 8009b24:	2200      	movs	r2, #0
 8009b26:	f1c9 0e20 	rsb	lr, r9, #32
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b30:	4310      	orrs	r0, r2
 8009b32:	f84a 0b04 	str.w	r0, [sl], #4
 8009b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3a:	459c      	cmp	ip, r3
 8009b3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b40:	d8f3      	bhi.n	8009b2a <__lshift+0x6e>
 8009b42:	ebac 0304 	sub.w	r3, ip, r4
 8009b46:	3b15      	subs	r3, #21
 8009b48:	f023 0303 	bic.w	r3, r3, #3
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	f104 0015 	add.w	r0, r4, #21
 8009b52:	4584      	cmp	ip, r0
 8009b54:	bf38      	it	cc
 8009b56:	2304      	movcc	r3, #4
 8009b58:	50ca      	str	r2, [r1, r3]
 8009b5a:	b10a      	cbz	r2, 8009b60 <__lshift+0xa4>
 8009b5c:	f108 0602 	add.w	r6, r8, #2
 8009b60:	3e01      	subs	r6, #1
 8009b62:	4638      	mov	r0, r7
 8009b64:	4621      	mov	r1, r4
 8009b66:	612e      	str	r6, [r5, #16]
 8009b68:	f7ff fd92 	bl	8009690 <_Bfree>
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b76:	3301      	adds	r3, #1
 8009b78:	e7c5      	b.n	8009b06 <__lshift+0x4a>
 8009b7a:	3904      	subs	r1, #4
 8009b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b80:	459c      	cmp	ip, r3
 8009b82:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b86:	d8f9      	bhi.n	8009b7c <__lshift+0xc0>
 8009b88:	e7ea      	b.n	8009b60 <__lshift+0xa4>
 8009b8a:	bf00      	nop
 8009b8c:	0800c6ce 	.word	0x0800c6ce
 8009b90:	0800c73f 	.word	0x0800c73f

08009b94 <__mcmp>:
 8009b94:	4603      	mov	r3, r0
 8009b96:	690a      	ldr	r2, [r1, #16]
 8009b98:	6900      	ldr	r0, [r0, #16]
 8009b9a:	b530      	push	{r4, r5, lr}
 8009b9c:	1a80      	subs	r0, r0, r2
 8009b9e:	d10e      	bne.n	8009bbe <__mcmp+0x2a>
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	3114      	adds	r1, #20
 8009ba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bb4:	4295      	cmp	r5, r2
 8009bb6:	d003      	beq.n	8009bc0 <__mcmp+0x2c>
 8009bb8:	d205      	bcs.n	8009bc6 <__mcmp+0x32>
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	bd30      	pop	{r4, r5, pc}
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d3f3      	bcc.n	8009bac <__mcmp+0x18>
 8009bc4:	e7fb      	b.n	8009bbe <__mcmp+0x2a>
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7f9      	b.n	8009bbe <__mcmp+0x2a>
	...

08009bcc <__mdiff>:
 8009bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	4689      	mov	r9, r1
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	4614      	mov	r4, r2
 8009bda:	f7ff ffdb 	bl	8009b94 <__mcmp>
 8009bde:	1e05      	subs	r5, r0, #0
 8009be0:	d112      	bne.n	8009c08 <__mdiff+0x3c>
 8009be2:	4629      	mov	r1, r5
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff fd13 	bl	8009610 <_Balloc>
 8009bea:	4602      	mov	r2, r0
 8009bec:	b928      	cbnz	r0, 8009bfa <__mdiff+0x2e>
 8009bee:	f240 2137 	movw	r1, #567	@ 0x237
 8009bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8009cec <__mdiff+0x120>)
 8009bf4:	483e      	ldr	r0, [pc, #248]	@ (8009cf0 <__mdiff+0x124>)
 8009bf6:	f7ff f84f 	bl	8008c98 <__assert_func>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c00:	4610      	mov	r0, r2
 8009c02:	b003      	add	sp, #12
 8009c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c08:	bfbc      	itt	lt
 8009c0a:	464b      	movlt	r3, r9
 8009c0c:	46a1      	movlt	r9, r4
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c14:	bfba      	itte	lt
 8009c16:	461c      	movlt	r4, r3
 8009c18:	2501      	movlt	r5, #1
 8009c1a:	2500      	movge	r5, #0
 8009c1c:	f7ff fcf8 	bl	8009610 <_Balloc>
 8009c20:	4602      	mov	r2, r0
 8009c22:	b918      	cbnz	r0, 8009c2c <__mdiff+0x60>
 8009c24:	f240 2145 	movw	r1, #581	@ 0x245
 8009c28:	4b30      	ldr	r3, [pc, #192]	@ (8009cec <__mdiff+0x120>)
 8009c2a:	e7e3      	b.n	8009bf4 <__mdiff+0x28>
 8009c2c:	f100 0b14 	add.w	fp, r0, #20
 8009c30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c34:	f109 0310 	add.w	r3, r9, #16
 8009c38:	60c5      	str	r5, [r0, #12]
 8009c3a:	f04f 0c00 	mov.w	ip, #0
 8009c3e:	f109 0514 	add.w	r5, r9, #20
 8009c42:	46d9      	mov	r9, fp
 8009c44:	6926      	ldr	r6, [r4, #16]
 8009c46:	f104 0e14 	add.w	lr, r4, #20
 8009c4a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c4e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	9b01      	ldr	r3, [sp, #4]
 8009c56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c5e:	b281      	uxth	r1, r0
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	fa1f f38a 	uxth.w	r3, sl
 8009c66:	1a5b      	subs	r3, r3, r1
 8009c68:	0c00      	lsrs	r0, r0, #16
 8009c6a:	4463      	add	r3, ip
 8009c6c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c70:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c7a:	4576      	cmp	r6, lr
 8009c7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c80:	f849 3b04 	str.w	r3, [r9], #4
 8009c84:	d8e6      	bhi.n	8009c54 <__mdiff+0x88>
 8009c86:	1b33      	subs	r3, r6, r4
 8009c88:	3b15      	subs	r3, #21
 8009c8a:	f023 0303 	bic.w	r3, r3, #3
 8009c8e:	3415      	adds	r4, #21
 8009c90:	3304      	adds	r3, #4
 8009c92:	42a6      	cmp	r6, r4
 8009c94:	bf38      	it	cc
 8009c96:	2304      	movcc	r3, #4
 8009c98:	441d      	add	r5, r3
 8009c9a:	445b      	add	r3, fp
 8009c9c:	461e      	mov	r6, r3
 8009c9e:	462c      	mov	r4, r5
 8009ca0:	4544      	cmp	r4, r8
 8009ca2:	d30e      	bcc.n	8009cc2 <__mdiff+0xf6>
 8009ca4:	f108 0103 	add.w	r1, r8, #3
 8009ca8:	1b49      	subs	r1, r1, r5
 8009caa:	f021 0103 	bic.w	r1, r1, #3
 8009cae:	3d03      	subs	r5, #3
 8009cb0:	45a8      	cmp	r8, r5
 8009cb2:	bf38      	it	cc
 8009cb4:	2100      	movcc	r1, #0
 8009cb6:	440b      	add	r3, r1
 8009cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cbc:	b199      	cbz	r1, 8009ce6 <__mdiff+0x11a>
 8009cbe:	6117      	str	r7, [r2, #16]
 8009cc0:	e79e      	b.n	8009c00 <__mdiff+0x34>
 8009cc2:	46e6      	mov	lr, ip
 8009cc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cc8:	fa1f fc81 	uxth.w	ip, r1
 8009ccc:	44f4      	add	ip, lr
 8009cce:	0c08      	lsrs	r0, r1, #16
 8009cd0:	4471      	add	r1, lr
 8009cd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cd6:	b289      	uxth	r1, r1
 8009cd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ce0:	f846 1b04 	str.w	r1, [r6], #4
 8009ce4:	e7dc      	b.n	8009ca0 <__mdiff+0xd4>
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	e7e6      	b.n	8009cb8 <__mdiff+0xec>
 8009cea:	bf00      	nop
 8009cec:	0800c6ce 	.word	0x0800c6ce
 8009cf0:	0800c73f 	.word	0x0800c73f

08009cf4 <__ulp>:
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d30 <__ulp+0x3c>)
 8009cf6:	400b      	ands	r3, r1
 8009cf8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dc08      	bgt.n	8009d12 <__ulp+0x1e>
 8009d00:	425b      	negs	r3, r3
 8009d02:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009d06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d0a:	da04      	bge.n	8009d16 <__ulp+0x22>
 8009d0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009d10:	4113      	asrs	r3, r2
 8009d12:	2200      	movs	r2, #0
 8009d14:	e008      	b.n	8009d28 <__ulp+0x34>
 8009d16:	f1a2 0314 	sub.w	r3, r2, #20
 8009d1a:	2b1e      	cmp	r3, #30
 8009d1c:	bfd6      	itet	le
 8009d1e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009d22:	2201      	movgt	r2, #1
 8009d24:	40da      	lsrle	r2, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	7ff00000 	.word	0x7ff00000

08009d34 <__b2d>:
 8009d34:	6902      	ldr	r2, [r0, #16]
 8009d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d38:	f100 0614 	add.w	r6, r0, #20
 8009d3c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009d40:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009d44:	4f1e      	ldr	r7, [pc, #120]	@ (8009dc0 <__b2d+0x8c>)
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff fd54 	bl	80097f4 <__hi0bits>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f1c0 0020 	rsb	r0, r0, #32
 8009d52:	2b0a      	cmp	r3, #10
 8009d54:	f1a2 0504 	sub.w	r5, r2, #4
 8009d58:	6008      	str	r0, [r1, #0]
 8009d5a:	dc12      	bgt.n	8009d82 <__b2d+0x4e>
 8009d5c:	42ae      	cmp	r6, r5
 8009d5e:	bf2c      	ite	cs
 8009d60:	2200      	movcs	r2, #0
 8009d62:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009d66:	f1c3 0c0b 	rsb	ip, r3, #11
 8009d6a:	3315      	adds	r3, #21
 8009d6c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009d70:	fa04 f303 	lsl.w	r3, r4, r3
 8009d74:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d78:	ea4e 0107 	orr.w	r1, lr, r7
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d82:	42ae      	cmp	r6, r5
 8009d84:	bf36      	itet	cc
 8009d86:	f1a2 0508 	subcc.w	r5, r2, #8
 8009d8a:	2200      	movcs	r2, #0
 8009d8c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009d90:	3b0b      	subs	r3, #11
 8009d92:	d012      	beq.n	8009dba <__b2d+0x86>
 8009d94:	f1c3 0720 	rsb	r7, r3, #32
 8009d98:	fa22 f107 	lsr.w	r1, r2, r7
 8009d9c:	409c      	lsls	r4, r3
 8009d9e:	430c      	orrs	r4, r1
 8009da0:	42b5      	cmp	r5, r6
 8009da2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009da6:	bf94      	ite	ls
 8009da8:	2400      	movls	r4, #0
 8009daa:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009dae:	409a      	lsls	r2, r3
 8009db0:	40fc      	lsrs	r4, r7
 8009db2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009db6:	4322      	orrs	r2, r4
 8009db8:	e7e1      	b.n	8009d7e <__b2d+0x4a>
 8009dba:	ea44 0107 	orr.w	r1, r4, r7
 8009dbe:	e7de      	b.n	8009d7e <__b2d+0x4a>
 8009dc0:	3ff00000 	.word	0x3ff00000

08009dc4 <__d2b>:
 8009dc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4690      	mov	r8, r2
 8009dcc:	4699      	mov	r9, r3
 8009dce:	9e08      	ldr	r6, [sp, #32]
 8009dd0:	f7ff fc1e 	bl	8009610 <_Balloc>
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	b930      	cbnz	r0, 8009de6 <__d2b+0x22>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	f240 310f 	movw	r1, #783	@ 0x30f
 8009dde:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <__d2b+0xa8>)
 8009de0:	4823      	ldr	r0, [pc, #140]	@ (8009e70 <__d2b+0xac>)
 8009de2:	f7fe ff59 	bl	8008c98 <__assert_func>
 8009de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dee:	b10d      	cbz	r5, 8009df4 <__d2b+0x30>
 8009df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	f1b8 0300 	subs.w	r3, r8, #0
 8009dfa:	d024      	beq.n	8009e46 <__d2b+0x82>
 8009dfc:	4668      	mov	r0, sp
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	f7ff fd17 	bl	8009832 <__lo0bits>
 8009e04:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e08:	b1d8      	cbz	r0, 8009e42 <__d2b+0x7e>
 8009e0a:	f1c0 0320 	rsb	r3, r0, #32
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	430b      	orrs	r3, r1
 8009e14:	40c2      	lsrs	r2, r0
 8009e16:	6163      	str	r3, [r4, #20]
 8009e18:	9201      	str	r2, [sp, #4]
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bf0c      	ite	eq
 8009e20:	2201      	moveq	r2, #1
 8009e22:	2202      	movne	r2, #2
 8009e24:	61a3      	str	r3, [r4, #24]
 8009e26:	6122      	str	r2, [r4, #16]
 8009e28:	b1ad      	cbz	r5, 8009e56 <__d2b+0x92>
 8009e2a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e2e:	4405      	add	r5, r0
 8009e30:	6035      	str	r5, [r6, #0]
 8009e32:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e38:	6018      	str	r0, [r3, #0]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	b002      	add	sp, #8
 8009e3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009e42:	6161      	str	r1, [r4, #20]
 8009e44:	e7e9      	b.n	8009e1a <__d2b+0x56>
 8009e46:	a801      	add	r0, sp, #4
 8009e48:	f7ff fcf3 	bl	8009832 <__lo0bits>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	6163      	str	r3, [r4, #20]
 8009e52:	3020      	adds	r0, #32
 8009e54:	e7e7      	b.n	8009e26 <__d2b+0x62>
 8009e56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e5e:	6030      	str	r0, [r6, #0]
 8009e60:	6918      	ldr	r0, [r3, #16]
 8009e62:	f7ff fcc7 	bl	80097f4 <__hi0bits>
 8009e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e6a:	e7e4      	b.n	8009e36 <__d2b+0x72>
 8009e6c:	0800c6ce 	.word	0x0800c6ce
 8009e70:	0800c73f 	.word	0x0800c73f

08009e74 <__ratio>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	e9cd 1000 	strd	r1, r0, [sp]
 8009e7e:	a902      	add	r1, sp, #8
 8009e80:	f7ff ff58 	bl	8009d34 <__b2d>
 8009e84:	468b      	mov	fp, r1
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	9800      	ldr	r0, [sp, #0]
 8009e8c:	a903      	add	r1, sp, #12
 8009e8e:	f7ff ff51 	bl	8009d34 <__b2d>
 8009e92:	460d      	mov	r5, r1
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	4689      	mov	r9, r1
 8009e98:	6919      	ldr	r1, [r3, #16]
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	1ac9      	subs	r1, r1, r3
 8009ea4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ea8:	1a9b      	subs	r3, r3, r2
 8009eaa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfcd      	iteet	gt
 8009eb2:	463a      	movgt	r2, r7
 8009eb4:	462a      	movle	r2, r5
 8009eb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009ebe:	bfd8      	it	le
 8009ec0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4659      	mov	r1, fp
 8009eca:	f7f6 fc49 	bl	8000760 <__aeabi_ddiv>
 8009ece:	b005      	add	sp, #20
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ed4 <__copybits>:
 8009ed4:	3901      	subs	r1, #1
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	1149      	asrs	r1, r1, #5
 8009eda:	6914      	ldr	r4, [r2, #16]
 8009edc:	3101      	adds	r1, #1
 8009ede:	f102 0314 	add.w	r3, r2, #20
 8009ee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eea:	1f05      	subs	r5, r0, #4
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	d30c      	bcc.n	8009f0a <__copybits+0x36>
 8009ef0:	1aa3      	subs	r3, r4, r2
 8009ef2:	3b11      	subs	r3, #17
 8009ef4:	f023 0303 	bic.w	r3, r3, #3
 8009ef8:	3211      	adds	r2, #17
 8009efa:	42a2      	cmp	r2, r4
 8009efc:	bf88      	it	hi
 8009efe:	2300      	movhi	r3, #0
 8009f00:	4418      	add	r0, r3
 8009f02:	2300      	movs	r3, #0
 8009f04:	4288      	cmp	r0, r1
 8009f06:	d305      	bcc.n	8009f14 <__copybits+0x40>
 8009f08:	bd70      	pop	{r4, r5, r6, pc}
 8009f0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f12:	e7eb      	b.n	8009eec <__copybits+0x18>
 8009f14:	f840 3b04 	str.w	r3, [r0], #4
 8009f18:	e7f4      	b.n	8009f04 <__copybits+0x30>

08009f1a <__any_on>:
 8009f1a:	f100 0214 	add.w	r2, r0, #20
 8009f1e:	6900      	ldr	r0, [r0, #16]
 8009f20:	114b      	asrs	r3, r1, #5
 8009f22:	4298      	cmp	r0, r3
 8009f24:	b510      	push	{r4, lr}
 8009f26:	db11      	blt.n	8009f4c <__any_on+0x32>
 8009f28:	dd0a      	ble.n	8009f40 <__any_on+0x26>
 8009f2a:	f011 011f 	ands.w	r1, r1, #31
 8009f2e:	d007      	beq.n	8009f40 <__any_on+0x26>
 8009f30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f34:	fa24 f001 	lsr.w	r0, r4, r1
 8009f38:	fa00 f101 	lsl.w	r1, r0, r1
 8009f3c:	428c      	cmp	r4, r1
 8009f3e:	d10b      	bne.n	8009f58 <__any_on+0x3e>
 8009f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d803      	bhi.n	8009f50 <__any_on+0x36>
 8009f48:	2000      	movs	r0, #0
 8009f4a:	bd10      	pop	{r4, pc}
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	e7f7      	b.n	8009f40 <__any_on+0x26>
 8009f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f54:	2900      	cmp	r1, #0
 8009f56:	d0f5      	beq.n	8009f44 <__any_on+0x2a>
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e7f6      	b.n	8009f4a <__any_on+0x30>

08009f5c <_strtoul_l.constprop.0>:
 8009f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f60:	4686      	mov	lr, r0
 8009f62:	460d      	mov	r5, r1
 8009f64:	4e33      	ldr	r6, [pc, #204]	@ (800a034 <_strtoul_l.constprop.0+0xd8>)
 8009f66:	4628      	mov	r0, r5
 8009f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f6c:	5d37      	ldrb	r7, [r6, r4]
 8009f6e:	f017 0708 	ands.w	r7, r7, #8
 8009f72:	d1f8      	bne.n	8009f66 <_strtoul_l.constprop.0+0xa>
 8009f74:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f76:	d12f      	bne.n	8009fd8 <_strtoul_l.constprop.0+0x7c>
 8009f78:	2701      	movs	r7, #1
 8009f7a:	782c      	ldrb	r4, [r5, #0]
 8009f7c:	1c85      	adds	r5, r0, #2
 8009f7e:	f033 0010 	bics.w	r0, r3, #16
 8009f82:	d109      	bne.n	8009f98 <_strtoul_l.constprop.0+0x3c>
 8009f84:	2c30      	cmp	r4, #48	@ 0x30
 8009f86:	d12c      	bne.n	8009fe2 <_strtoul_l.constprop.0+0x86>
 8009f88:	7828      	ldrb	r0, [r5, #0]
 8009f8a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009f8e:	2858      	cmp	r0, #88	@ 0x58
 8009f90:	d127      	bne.n	8009fe2 <_strtoul_l.constprop.0+0x86>
 8009f92:	2310      	movs	r3, #16
 8009f94:	786c      	ldrb	r4, [r5, #1]
 8009f96:	3502      	adds	r5, #2
 8009f98:	f04f 38ff 	mov.w	r8, #4294967295
 8009f9c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	fb03 f908 	mul.w	r9, r3, r8
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	ea6f 0909 	mvn.w	r9, r9
 8009fac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009fb0:	f1bc 0f09 	cmp.w	ip, #9
 8009fb4:	d81c      	bhi.n	8009ff0 <_strtoul_l.constprop.0+0x94>
 8009fb6:	4664      	mov	r4, ip
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	dd2a      	ble.n	800a012 <_strtoul_l.constprop.0+0xb6>
 8009fbc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009fc0:	d007      	beq.n	8009fd2 <_strtoul_l.constprop.0+0x76>
 8009fc2:	4580      	cmp	r8, r0
 8009fc4:	d322      	bcc.n	800a00c <_strtoul_l.constprop.0+0xb0>
 8009fc6:	d101      	bne.n	8009fcc <_strtoul_l.constprop.0+0x70>
 8009fc8:	45a1      	cmp	r9, r4
 8009fca:	db1f      	blt.n	800a00c <_strtoul_l.constprop.0+0xb0>
 8009fcc:	2601      	movs	r6, #1
 8009fce:	fb00 4003 	mla	r0, r0, r3, r4
 8009fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fd6:	e7e9      	b.n	8009fac <_strtoul_l.constprop.0+0x50>
 8009fd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fda:	bf04      	itt	eq
 8009fdc:	782c      	ldrbeq	r4, [r5, #0]
 8009fde:	1c85      	addeq	r5, r0, #2
 8009fe0:	e7cd      	b.n	8009f7e <_strtoul_l.constprop.0+0x22>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1d8      	bne.n	8009f98 <_strtoul_l.constprop.0+0x3c>
 8009fe6:	2c30      	cmp	r4, #48	@ 0x30
 8009fe8:	bf0c      	ite	eq
 8009fea:	2308      	moveq	r3, #8
 8009fec:	230a      	movne	r3, #10
 8009fee:	e7d3      	b.n	8009f98 <_strtoul_l.constprop.0+0x3c>
 8009ff0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009ff4:	f1bc 0f19 	cmp.w	ip, #25
 8009ff8:	d801      	bhi.n	8009ffe <_strtoul_l.constprop.0+0xa2>
 8009ffa:	3c37      	subs	r4, #55	@ 0x37
 8009ffc:	e7dc      	b.n	8009fb8 <_strtoul_l.constprop.0+0x5c>
 8009ffe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a002:	f1bc 0f19 	cmp.w	ip, #25
 800a006:	d804      	bhi.n	800a012 <_strtoul_l.constprop.0+0xb6>
 800a008:	3c57      	subs	r4, #87	@ 0x57
 800a00a:	e7d5      	b.n	8009fb8 <_strtoul_l.constprop.0+0x5c>
 800a00c:	f04f 36ff 	mov.w	r6, #4294967295
 800a010:	e7df      	b.n	8009fd2 <_strtoul_l.constprop.0+0x76>
 800a012:	1c73      	adds	r3, r6, #1
 800a014:	d106      	bne.n	800a024 <_strtoul_l.constprop.0+0xc8>
 800a016:	2322      	movs	r3, #34	@ 0x22
 800a018:	4630      	mov	r0, r6
 800a01a:	f8ce 3000 	str.w	r3, [lr]
 800a01e:	b932      	cbnz	r2, 800a02e <_strtoul_l.constprop.0+0xd2>
 800a020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a024:	b107      	cbz	r7, 800a028 <_strtoul_l.constprop.0+0xcc>
 800a026:	4240      	negs	r0, r0
 800a028:	2a00      	cmp	r2, #0
 800a02a:	d0f9      	beq.n	800a020 <_strtoul_l.constprop.0+0xc4>
 800a02c:	b106      	cbz	r6, 800a030 <_strtoul_l.constprop.0+0xd4>
 800a02e:	1e69      	subs	r1, r5, #1
 800a030:	6011      	str	r1, [r2, #0]
 800a032:	e7f5      	b.n	800a020 <_strtoul_l.constprop.0+0xc4>
 800a034:	0800c3b1 	.word	0x0800c3b1

0800a038 <_strtoul_r>:
 800a038:	f7ff bf90 	b.w	8009f5c <_strtoul_l.constprop.0>

0800a03c <strtoul>:
 800a03c:	4613      	mov	r3, r2
 800a03e:	460a      	mov	r2, r1
 800a040:	4601      	mov	r1, r0
 800a042:	4802      	ldr	r0, [pc, #8]	@ (800a04c <strtoul+0x10>)
 800a044:	6800      	ldr	r0, [r0, #0]
 800a046:	f7ff bf89 	b.w	8009f5c <_strtoul_l.constprop.0>
 800a04a:	bf00      	nop
 800a04c:	2000055c 	.word	0x2000055c

0800a050 <__ascii_wctomb>:
 800a050:	4603      	mov	r3, r0
 800a052:	4608      	mov	r0, r1
 800a054:	b141      	cbz	r1, 800a068 <__ascii_wctomb+0x18>
 800a056:	2aff      	cmp	r2, #255	@ 0xff
 800a058:	d904      	bls.n	800a064 <__ascii_wctomb+0x14>
 800a05a:	228a      	movs	r2, #138	@ 0x8a
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	4770      	bx	lr
 800a064:	2001      	movs	r0, #1
 800a066:	700a      	strb	r2, [r1, #0]
 800a068:	4770      	bx	lr
	...

0800a06c <__sflush_r>:
 800a06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	0716      	lsls	r6, r2, #28
 800a074:	4605      	mov	r5, r0
 800a076:	460c      	mov	r4, r1
 800a078:	d454      	bmi.n	800a124 <__sflush_r+0xb8>
 800a07a:	684b      	ldr	r3, [r1, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	dc02      	bgt.n	800a086 <__sflush_r+0x1a>
 800a080:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	dd48      	ble.n	800a118 <__sflush_r+0xac>
 800a086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a088:	2e00      	cmp	r6, #0
 800a08a:	d045      	beq.n	800a118 <__sflush_r+0xac>
 800a08c:	2300      	movs	r3, #0
 800a08e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a092:	682f      	ldr	r7, [r5, #0]
 800a094:	6a21      	ldr	r1, [r4, #32]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	d030      	beq.n	800a0fc <__sflush_r+0x90>
 800a09a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	0759      	lsls	r1, r3, #29
 800a0a0:	d505      	bpl.n	800a0ae <__sflush_r+0x42>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0a8:	b10b      	cbz	r3, 800a0ae <__sflush_r+0x42>
 800a0aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0ac:	1ad2      	subs	r2, r2, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	47b0      	blx	r6
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	d106      	bne.n	800a0cc <__sflush_r+0x60>
 800a0be:	6829      	ldr	r1, [r5, #0]
 800a0c0:	291d      	cmp	r1, #29
 800a0c2:	d82b      	bhi.n	800a11c <__sflush_r+0xb0>
 800a0c4:	4a28      	ldr	r2, [pc, #160]	@ (800a168 <__sflush_r+0xfc>)
 800a0c6:	410a      	asrs	r2, r1
 800a0c8:	07d6      	lsls	r6, r2, #31
 800a0ca:	d427      	bmi.n	800a11c <__sflush_r+0xb0>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	6062      	str	r2, [r4, #4]
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	d504      	bpl.n	800a0e2 <__sflush_r+0x76>
 800a0d8:	1c42      	adds	r2, r0, #1
 800a0da:	d101      	bne.n	800a0e0 <__sflush_r+0x74>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b903      	cbnz	r3, 800a0e2 <__sflush_r+0x76>
 800a0e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0e4:	602f      	str	r7, [r5, #0]
 800a0e6:	b1b9      	cbz	r1, 800a118 <__sflush_r+0xac>
 800a0e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0ec:	4299      	cmp	r1, r3
 800a0ee:	d002      	beq.n	800a0f6 <__sflush_r+0x8a>
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f7fe fdf7 	bl	8008ce4 <_free_r>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0fa:	e00d      	b.n	800a118 <__sflush_r+0xac>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b0      	blx	r6
 800a102:	4602      	mov	r2, r0
 800a104:	1c50      	adds	r0, r2, #1
 800a106:	d1c9      	bne.n	800a09c <__sflush_r+0x30>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c6      	beq.n	800a09c <__sflush_r+0x30>
 800a10e:	2b1d      	cmp	r3, #29
 800a110:	d001      	beq.n	800a116 <__sflush_r+0xaa>
 800a112:	2b16      	cmp	r3, #22
 800a114:	d11d      	bne.n	800a152 <__sflush_r+0xe6>
 800a116:	602f      	str	r7, [r5, #0]
 800a118:	2000      	movs	r0, #0
 800a11a:	e021      	b.n	800a160 <__sflush_r+0xf4>
 800a11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a120:	b21b      	sxth	r3, r3
 800a122:	e01a      	b.n	800a15a <__sflush_r+0xee>
 800a124:	690f      	ldr	r7, [r1, #16]
 800a126:	2f00      	cmp	r7, #0
 800a128:	d0f6      	beq.n	800a118 <__sflush_r+0xac>
 800a12a:	0793      	lsls	r3, r2, #30
 800a12c:	bf18      	it	ne
 800a12e:	2300      	movne	r3, #0
 800a130:	680e      	ldr	r6, [r1, #0]
 800a132:	bf08      	it	eq
 800a134:	694b      	ldreq	r3, [r1, #20]
 800a136:	1bf6      	subs	r6, r6, r7
 800a138:	600f      	str	r7, [r1, #0]
 800a13a:	608b      	str	r3, [r1, #8]
 800a13c:	2e00      	cmp	r6, #0
 800a13e:	ddeb      	ble.n	800a118 <__sflush_r+0xac>
 800a140:	4633      	mov	r3, r6
 800a142:	463a      	mov	r2, r7
 800a144:	4628      	mov	r0, r5
 800a146:	6a21      	ldr	r1, [r4, #32]
 800a148:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a14c:	47e0      	blx	ip
 800a14e:	2800      	cmp	r0, #0
 800a150:	dc07      	bgt.n	800a162 <__sflush_r+0xf6>
 800a152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a162:	4407      	add	r7, r0
 800a164:	1a36      	subs	r6, r6, r0
 800a166:	e7e9      	b.n	800a13c <__sflush_r+0xd0>
 800a168:	dfbffffe 	.word	0xdfbffffe

0800a16c <_fflush_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	690b      	ldr	r3, [r1, #16]
 800a170:	4605      	mov	r5, r0
 800a172:	460c      	mov	r4, r1
 800a174:	b913      	cbnz	r3, 800a17c <_fflush_r+0x10>
 800a176:	2500      	movs	r5, #0
 800a178:	4628      	mov	r0, r5
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	b118      	cbz	r0, 800a186 <_fflush_r+0x1a>
 800a17e:	6a03      	ldr	r3, [r0, #32]
 800a180:	b90b      	cbnz	r3, 800a186 <_fflush_r+0x1a>
 800a182:	f7fd fd8f 	bl	8007ca4 <__sinit>
 800a186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0f3      	beq.n	800a176 <_fflush_r+0xa>
 800a18e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a190:	07d0      	lsls	r0, r2, #31
 800a192:	d404      	bmi.n	800a19e <_fflush_r+0x32>
 800a194:	0599      	lsls	r1, r3, #22
 800a196:	d402      	bmi.n	800a19e <_fflush_r+0x32>
 800a198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a19a:	f7fe fd5d 	bl	8008c58 <__retarget_lock_acquire_recursive>
 800a19e:	4628      	mov	r0, r5
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	f7ff ff63 	bl	800a06c <__sflush_r>
 800a1a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	07da      	lsls	r2, r3, #31
 800a1ac:	d4e4      	bmi.n	800a178 <_fflush_r+0xc>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	059b      	lsls	r3, r3, #22
 800a1b2:	d4e1      	bmi.n	800a178 <_fflush_r+0xc>
 800a1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b6:	f7fe fd51 	bl	8008c5c <__retarget_lock_release_recursive>
 800a1ba:	e7dd      	b.n	800a178 <_fflush_r+0xc>

0800a1bc <fiprintf>:
 800a1bc:	b40e      	push	{r1, r2, r3}
 800a1be:	b503      	push	{r0, r1, lr}
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	4805      	ldr	r0, [pc, #20]	@ (800a1dc <fiprintf+0x20>)
 800a1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f000 fb05 	bl	800a7dc <_vfiprintf_r>
 800a1d2:	b002      	add	sp, #8
 800a1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d8:	b003      	add	sp, #12
 800a1da:	4770      	bx	lr
 800a1dc:	2000055c 	.word	0x2000055c

0800a1e0 <siscanf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a1e6:	b530      	push	{r4, r5, lr}
 800a1e8:	b09c      	sub	sp, #112	@ 0x70
 800a1ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a1ec:	f854 5b04 	ldr.w	r5, [r4], #4
 800a1f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a1f4:	9002      	str	r0, [sp, #8]
 800a1f6:	9006      	str	r0, [sp, #24]
 800a1f8:	f7f5 ffc4 	bl	8000184 <strlen>
 800a1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a22c <siscanf+0x4c>)
 800a1fe:	9003      	str	r0, [sp, #12]
 800a200:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a202:	2300      	movs	r3, #0
 800a204:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a206:	9314      	str	r3, [sp, #80]	@ 0x50
 800a208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a20c:	9007      	str	r0, [sp, #28]
 800a20e:	4808      	ldr	r0, [pc, #32]	@ (800a230 <siscanf+0x50>)
 800a210:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a214:	462a      	mov	r2, r5
 800a216:	4623      	mov	r3, r4
 800a218:	a902      	add	r1, sp, #8
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	9401      	str	r4, [sp, #4]
 800a21e:	f000 f943 	bl	800a4a8 <__ssvfiscanf_r>
 800a222:	b01c      	add	sp, #112	@ 0x70
 800a224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a228:	b003      	add	sp, #12
 800a22a:	4770      	bx	lr
 800a22c:	08007d33 	.word	0x08007d33
 800a230:	2000055c 	.word	0x2000055c

0800a234 <__gettzinfo>:
 800a234:	4800      	ldr	r0, [pc, #0]	@ (800a238 <__gettzinfo+0x4>)
 800a236:	4770      	bx	lr
 800a238:	200005b0 	.word	0x200005b0

0800a23c <gmtime_r>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	2300      	movs	r3, #0
 800a242:	460c      	mov	r4, r1
 800a244:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a248:	4a4b      	ldr	r2, [pc, #300]	@ (800a378 <gmtime_r+0x13c>)
 800a24a:	f7f6 ff99 	bl	8001180 <__aeabi_ldivmod>
 800a24e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a252:	2a00      	cmp	r2, #0
 800a254:	bfbc      	itt	lt
 800a256:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800a25a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800a25e:	fbb2 f3f1 	udiv	r3, r2, r1
 800a262:	fb01 2213 	mls	r2, r1, r3, r2
 800a266:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800a26a:	60a3      	str	r3, [r4, #8]
 800a26c:	fbb2 f3f1 	udiv	r3, r2, r1
 800a270:	fb01 2213 	mls	r2, r1, r3, r2
 800a274:	6022      	str	r2, [r4, #0]
 800a276:	f04f 0207 	mov.w	r2, #7
 800a27a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800a27e:	bfac      	ite	ge
 800a280:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800a284:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	1cc3      	adds	r3, r0, #3
 800a28c:	fb93 f2f2 	sdiv	r2, r3, r2
 800a290:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	bf48      	it	mi
 800a298:	3307      	addmi	r3, #7
 800a29a:	2800      	cmp	r0, #0
 800a29c:	4937      	ldr	r1, [pc, #220]	@ (800a37c <gmtime_r+0x140>)
 800a29e:	61a3      	str	r3, [r4, #24]
 800a2a0:	bfbd      	ittte	lt
 800a2a2:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800a2a6:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800a2aa:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a2ae:	fb90 f1f1 	sdivge	r1, r0, r1
 800a2b2:	4b33      	ldr	r3, [pc, #204]	@ (800a380 <gmtime_r+0x144>)
 800a2b4:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800a2b8:	fb03 0001 	mla	r0, r3, r1, r0
 800a2bc:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800a2c0:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2c4:	fbb0 f2fc 	udiv	r2, r0, ip
 800a2c8:	4403      	add	r3, r0
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a384 <gmtime_r+0x148>)
 800a2ce:	f240 176d 	movw	r7, #365	@ 0x16d
 800a2d2:	fbb0 f2f2 	udiv	r2, r0, r2
 800a2d6:	1a9b      	subs	r3, r3, r2
 800a2d8:	fbb3 f2f7 	udiv	r2, r3, r7
 800a2dc:	2664      	movs	r6, #100	@ 0x64
 800a2de:	fbb3 f3fc 	udiv	r3, r3, ip
 800a2e2:	fbb2 f5f6 	udiv	r5, r2, r6
 800a2e6:	1aeb      	subs	r3, r5, r3
 800a2e8:	4403      	add	r3, r0
 800a2ea:	2099      	movs	r0, #153	@ 0x99
 800a2ec:	fb07 3312 	mls	r3, r7, r2, r3
 800a2f0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a2f4:	3702      	adds	r7, #2
 800a2f6:	fbb7 fcf0 	udiv	ip, r7, r0
 800a2fa:	f04f 0805 	mov.w	r8, #5
 800a2fe:	fb00 f00c 	mul.w	r0, r0, ip
 800a302:	3002      	adds	r0, #2
 800a304:	fbb0 f0f8 	udiv	r0, r0, r8
 800a308:	f103 0e01 	add.w	lr, r3, #1
 800a30c:	ebae 0000 	sub.w	r0, lr, r0
 800a310:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800a314:	4577      	cmp	r7, lr
 800a316:	bf8c      	ite	hi
 800a318:	f06f 0709 	mvnhi.w	r7, #9
 800a31c:	2702      	movls	r7, #2
 800a31e:	4467      	add	r7, ip
 800a320:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800a324:	fb0c 2101 	mla	r1, ip, r1, r2
 800a328:	2f01      	cmp	r7, #1
 800a32a:	bf98      	it	ls
 800a32c:	3101      	addls	r1, #1
 800a32e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800a332:	d30c      	bcc.n	800a34e <gmtime_r+0x112>
 800a334:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a338:	61e3      	str	r3, [r4, #28]
 800a33a:	2300      	movs	r3, #0
 800a33c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800a340:	60e0      	str	r0, [r4, #12]
 800a342:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a346:	4620      	mov	r0, r4
 800a348:	6223      	str	r3, [r4, #32]
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34e:	f012 0f03 	tst.w	r2, #3
 800a352:	d102      	bne.n	800a35a <gmtime_r+0x11e>
 800a354:	fb06 2515 	mls	r5, r6, r5, r2
 800a358:	b95d      	cbnz	r5, 800a372 <gmtime_r+0x136>
 800a35a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a35e:	fbb2 f6f5 	udiv	r6, r2, r5
 800a362:	fb05 2216 	mls	r2, r5, r6, r2
 800a366:	fab2 f282 	clz	r2, r2
 800a36a:	0952      	lsrs	r2, r2, #5
 800a36c:	333b      	adds	r3, #59	@ 0x3b
 800a36e:	4413      	add	r3, r2
 800a370:	e7e2      	b.n	800a338 <gmtime_r+0xfc>
 800a372:	2201      	movs	r2, #1
 800a374:	e7fa      	b.n	800a36c <gmtime_r+0x130>
 800a376:	bf00      	nop
 800a378:	00015180 	.word	0x00015180
 800a37c:	00023ab1 	.word	0x00023ab1
 800a380:	fffdc54f 	.word	0xfffdc54f
 800a384:	00023ab0 	.word	0x00023ab0

0800a388 <_sbrk_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	2300      	movs	r3, #0
 800a38c:	4d05      	ldr	r5, [pc, #20]	@ (800a3a4 <_sbrk_r+0x1c>)
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	f7fc fd08 	bl	8006da8 <_sbrk>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_sbrk_r+0x1a>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_sbrk_r+0x1a>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	200009c0 	.word	0x200009c0

0800a3a8 <abort>:
 800a3a8:	2006      	movs	r0, #6
 800a3aa:	b508      	push	{r3, lr}
 800a3ac:	f000 ff3a 	bl	800b224 <raise>
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	f7fc fc84 	bl	8006cbe <_exit>

0800a3b6 <_calloc_r>:
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	fba1 5402 	umull	r5, r4, r1, r2
 800a3bc:	b93c      	cbnz	r4, 800a3ce <_calloc_r+0x18>
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7ff f888 	bl	80094d4 <_malloc_r>
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	b928      	cbnz	r0, 800a3d4 <_calloc_r+0x1e>
 800a3c8:	2600      	movs	r6, #0
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	220c      	movs	r2, #12
 800a3d0:	6002      	str	r2, [r0, #0]
 800a3d2:	e7f9      	b.n	800a3c8 <_calloc_r+0x12>
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	f7fd fcdf 	bl	8007d9a <memset>
 800a3dc:	e7f5      	b.n	800a3ca <_calloc_r+0x14>
	...

0800a3e0 <__env_lock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__env_lock+0x8>)
 800a3e2:	f7fe bc39 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	200009c5 	.word	0x200009c5

0800a3ec <__env_unlock>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	@ (800a3f4 <__env_unlock+0x8>)
 800a3ee:	f7fe bc35 	b.w	8008c5c <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	200009c5 	.word	0x200009c5

0800a3f8 <_sungetc_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	1c4b      	adds	r3, r1, #1
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	d103      	bne.n	800a408 <_sungetc_r+0x10>
 800a400:	f04f 35ff 	mov.w	r5, #4294967295
 800a404:	4628      	mov	r0, r5
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	8993      	ldrh	r3, [r2, #12]
 800a40a:	b2cd      	uxtb	r5, r1
 800a40c:	f023 0320 	bic.w	r3, r3, #32
 800a410:	8193      	strh	r3, [r2, #12]
 800a412:	6853      	ldr	r3, [r2, #4]
 800a414:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a416:	b18a      	cbz	r2, 800a43c <_sungetc_r+0x44>
 800a418:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a41a:	429a      	cmp	r2, r3
 800a41c:	dd08      	ble.n	800a430 <_sungetc_r+0x38>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	3301      	adds	r3, #1
 800a42c:	6063      	str	r3, [r4, #4]
 800a42e:	e7e9      	b.n	800a404 <_sungetc_r+0xc>
 800a430:	4621      	mov	r1, r4
 800a432:	f000 fe02 	bl	800b03a <__submore>
 800a436:	2800      	cmp	r0, #0
 800a438:	d0f1      	beq.n	800a41e <_sungetc_r+0x26>
 800a43a:	e7e1      	b.n	800a400 <_sungetc_r+0x8>
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	6822      	ldr	r2, [r4, #0]
 800a440:	b141      	cbz	r1, 800a454 <_sungetc_r+0x5c>
 800a442:	4291      	cmp	r1, r2
 800a444:	d206      	bcs.n	800a454 <_sungetc_r+0x5c>
 800a446:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a44a:	42a9      	cmp	r1, r5
 800a44c:	d102      	bne.n	800a454 <_sungetc_r+0x5c>
 800a44e:	3a01      	subs	r2, #1
 800a450:	6022      	str	r2, [r4, #0]
 800a452:	e7ea      	b.n	800a42a <_sungetc_r+0x32>
 800a454:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a45c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a45e:	2303      	movs	r3, #3
 800a460:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a462:	4623      	mov	r3, r4
 800a464:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7de      	b.n	800a42c <_sungetc_r+0x34>

0800a46e <__ssrefill_r>:
 800a46e:	b510      	push	{r4, lr}
 800a470:	460c      	mov	r4, r1
 800a472:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a474:	b169      	cbz	r1, 800a492 <__ssrefill_r+0x24>
 800a476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a47a:	4299      	cmp	r1, r3
 800a47c:	d001      	beq.n	800a482 <__ssrefill_r+0x14>
 800a47e:	f7fe fc31 	bl	8008ce4 <_free_r>
 800a482:	2000      	movs	r0, #0
 800a484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a486:	6360      	str	r0, [r4, #52]	@ 0x34
 800a488:	6063      	str	r3, [r4, #4]
 800a48a:	b113      	cbz	r3, 800a492 <__ssrefill_r+0x24>
 800a48c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	bd10      	pop	{r4, pc}
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	2300      	movs	r3, #0
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	f043 0320 	orr.w	r3, r3, #32
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	e7f3      	b.n	800a490 <__ssrefill_r+0x22>

0800a4a8 <__ssvfiscanf_r>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a4b6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a4ba:	49aa      	ldr	r1, [pc, #680]	@ (800a764 <__ssvfiscanf_r+0x2bc>)
 800a4bc:	f10d 0804 	add.w	r8, sp, #4
 800a4c0:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a4c2:	49a9      	ldr	r1, [pc, #676]	@ (800a768 <__ssvfiscanf_r+0x2c0>)
 800a4c4:	4fa9      	ldr	r7, [pc, #676]	@ (800a76c <__ssvfiscanf_r+0x2c4>)
 800a4c6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a4ca:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	7813      	ldrb	r3, [r2, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8159 	beq.w	800a788 <__ssvfiscanf_r+0x2e0>
 800a4d6:	5cf9      	ldrb	r1, [r7, r3]
 800a4d8:	1c55      	adds	r5, r2, #1
 800a4da:	f011 0108 	ands.w	r1, r1, #8
 800a4de:	d019      	beq.n	800a514 <__ssvfiscanf_r+0x6c>
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd0f      	ble.n	800a506 <__ssvfiscanf_r+0x5e>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	5cba      	ldrb	r2, [r7, r2]
 800a4ec:	0712      	lsls	r2, r2, #28
 800a4ee:	d401      	bmi.n	800a4f4 <__ssvfiscanf_r+0x4c>
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	e7ec      	b.n	800a4ce <__ssvfiscanf_r+0x26>
 800a4f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	3201      	adds	r2, #1
 800a4fa:	9245      	str	r2, [sp, #276]	@ 0x114
 800a4fc:	6862      	ldr	r2, [r4, #4]
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	3a01      	subs	r2, #1
 800a502:	6062      	str	r2, [r4, #4]
 800a504:	e7ec      	b.n	800a4e0 <__ssvfiscanf_r+0x38>
 800a506:	4621      	mov	r1, r4
 800a508:	4630      	mov	r0, r6
 800a50a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a50c:	4798      	blx	r3
 800a50e:	2800      	cmp	r0, #0
 800a510:	d0e9      	beq.n	800a4e6 <__ssvfiscanf_r+0x3e>
 800a512:	e7ed      	b.n	800a4f0 <__ssvfiscanf_r+0x48>
 800a514:	2b25      	cmp	r3, #37	@ 0x25
 800a516:	d012      	beq.n	800a53e <__ssvfiscanf_r+0x96>
 800a518:	4699      	mov	r9, r3
 800a51a:	6863      	ldr	r3, [r4, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f340 8094 	ble.w	800a64a <__ssvfiscanf_r+0x1a2>
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	7813      	ldrb	r3, [r2, #0]
 800a526:	454b      	cmp	r3, r9
 800a528:	f040 812e 	bne.w	800a788 <__ssvfiscanf_r+0x2e0>
 800a52c:	6863      	ldr	r3, [r4, #4]
 800a52e:	3201      	adds	r2, #1
 800a530:	3b01      	subs	r3, #1
 800a532:	6063      	str	r3, [r4, #4]
 800a534:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a536:	6022      	str	r2, [r4, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	9345      	str	r3, [sp, #276]	@ 0x114
 800a53c:	e7d8      	b.n	800a4f0 <__ssvfiscanf_r+0x48>
 800a53e:	9141      	str	r1, [sp, #260]	@ 0x104
 800a540:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a542:	7853      	ldrb	r3, [r2, #1]
 800a544:	2b2a      	cmp	r3, #42	@ 0x2a
 800a546:	bf04      	itt	eq
 800a548:	2310      	moveq	r3, #16
 800a54a:	1c95      	addeq	r5, r2, #2
 800a54c:	f04f 020a 	mov.w	r2, #10
 800a550:	bf08      	it	eq
 800a552:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a554:	46a9      	mov	r9, r5
 800a556:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a55a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a55e:	2b09      	cmp	r3, #9
 800a560:	d91e      	bls.n	800a5a0 <__ssvfiscanf_r+0xf8>
 800a562:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800a770 <__ssvfiscanf_r+0x2c8>
 800a566:	2203      	movs	r2, #3
 800a568:	4650      	mov	r0, sl
 800a56a:	f000 fe77 	bl	800b25c <memchr>
 800a56e:	b138      	cbz	r0, 800a580 <__ssvfiscanf_r+0xd8>
 800a570:	2301      	movs	r3, #1
 800a572:	464d      	mov	r5, r9
 800a574:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a576:	eba0 000a 	sub.w	r0, r0, sl
 800a57a:	4083      	lsls	r3, r0
 800a57c:	4313      	orrs	r3, r2
 800a57e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a580:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a584:	2b78      	cmp	r3, #120	@ 0x78
 800a586:	d806      	bhi.n	800a596 <__ssvfiscanf_r+0xee>
 800a588:	2b57      	cmp	r3, #87	@ 0x57
 800a58a:	d810      	bhi.n	800a5ae <__ssvfiscanf_r+0x106>
 800a58c:	2b25      	cmp	r3, #37	@ 0x25
 800a58e:	d0c3      	beq.n	800a518 <__ssvfiscanf_r+0x70>
 800a590:	d856      	bhi.n	800a640 <__ssvfiscanf_r+0x198>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d064      	beq.n	800a660 <__ssvfiscanf_r+0x1b8>
 800a596:	2303      	movs	r3, #3
 800a598:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a59a:	230a      	movs	r3, #10
 800a59c:	9342      	str	r3, [sp, #264]	@ 0x108
 800a59e:	e077      	b.n	800a690 <__ssvfiscanf_r+0x1e8>
 800a5a0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a5a2:	464d      	mov	r5, r9
 800a5a4:	fb02 1103 	mla	r1, r2, r3, r1
 800a5a8:	3930      	subs	r1, #48	@ 0x30
 800a5aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a5ac:	e7d2      	b.n	800a554 <__ssvfiscanf_r+0xac>
 800a5ae:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a5b2:	2a20      	cmp	r2, #32
 800a5b4:	d8ef      	bhi.n	800a596 <__ssvfiscanf_r+0xee>
 800a5b6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5bc <__ssvfiscanf_r+0x114>)
 800a5b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a5bc:	0800a66f 	.word	0x0800a66f
 800a5c0:	0800a597 	.word	0x0800a597
 800a5c4:	0800a597 	.word	0x0800a597
 800a5c8:	0800a6c9 	.word	0x0800a6c9
 800a5cc:	0800a597 	.word	0x0800a597
 800a5d0:	0800a597 	.word	0x0800a597
 800a5d4:	0800a597 	.word	0x0800a597
 800a5d8:	0800a597 	.word	0x0800a597
 800a5dc:	0800a597 	.word	0x0800a597
 800a5e0:	0800a597 	.word	0x0800a597
 800a5e4:	0800a597 	.word	0x0800a597
 800a5e8:	0800a6df 	.word	0x0800a6df
 800a5ec:	0800a6c5 	.word	0x0800a6c5
 800a5f0:	0800a647 	.word	0x0800a647
 800a5f4:	0800a647 	.word	0x0800a647
 800a5f8:	0800a647 	.word	0x0800a647
 800a5fc:	0800a597 	.word	0x0800a597
 800a600:	0800a681 	.word	0x0800a681
 800a604:	0800a597 	.word	0x0800a597
 800a608:	0800a597 	.word	0x0800a597
 800a60c:	0800a597 	.word	0x0800a597
 800a610:	0800a597 	.word	0x0800a597
 800a614:	0800a6ef 	.word	0x0800a6ef
 800a618:	0800a689 	.word	0x0800a689
 800a61c:	0800a667 	.word	0x0800a667
 800a620:	0800a597 	.word	0x0800a597
 800a624:	0800a597 	.word	0x0800a597
 800a628:	0800a6eb 	.word	0x0800a6eb
 800a62c:	0800a597 	.word	0x0800a597
 800a630:	0800a6c5 	.word	0x0800a6c5
 800a634:	0800a597 	.word	0x0800a597
 800a638:	0800a597 	.word	0x0800a597
 800a63c:	0800a66f 	.word	0x0800a66f
 800a640:	3b45      	subs	r3, #69	@ 0x45
 800a642:	2b02      	cmp	r3, #2
 800a644:	d8a7      	bhi.n	800a596 <__ssvfiscanf_r+0xee>
 800a646:	2305      	movs	r3, #5
 800a648:	e021      	b.n	800a68e <__ssvfiscanf_r+0x1e6>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4630      	mov	r0, r6
 800a64e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a650:	4798      	blx	r3
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f af65 	beq.w	800a522 <__ssvfiscanf_r+0x7a>
 800a658:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a65a:	2800      	cmp	r0, #0
 800a65c:	f040 808c 	bne.w	800a778 <__ssvfiscanf_r+0x2d0>
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	e08c      	b.n	800a780 <__ssvfiscanf_r+0x2d8>
 800a666:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a668:	f042 0220 	orr.w	r2, r2, #32
 800a66c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a66e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a674:	9241      	str	r2, [sp, #260]	@ 0x104
 800a676:	2210      	movs	r2, #16
 800a678:	2b6e      	cmp	r3, #110	@ 0x6e
 800a67a:	9242      	str	r2, [sp, #264]	@ 0x108
 800a67c:	d902      	bls.n	800a684 <__ssvfiscanf_r+0x1dc>
 800a67e:	e005      	b.n	800a68c <__ssvfiscanf_r+0x1e4>
 800a680:	2300      	movs	r3, #0
 800a682:	9342      	str	r3, [sp, #264]	@ 0x108
 800a684:	2303      	movs	r3, #3
 800a686:	e002      	b.n	800a68e <__ssvfiscanf_r+0x1e6>
 800a688:	2308      	movs	r3, #8
 800a68a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a68c:	2304      	movs	r3, #4
 800a68e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a690:	6863      	ldr	r3, [r4, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd39      	ble.n	800a70a <__ssvfiscanf_r+0x262>
 800a696:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a698:	0659      	lsls	r1, r3, #25
 800a69a:	d404      	bmi.n	800a6a6 <__ssvfiscanf_r+0x1fe>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	5cba      	ldrb	r2, [r7, r2]
 800a6a2:	0712      	lsls	r2, r2, #28
 800a6a4:	d438      	bmi.n	800a718 <__ssvfiscanf_r+0x270>
 800a6a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	dc47      	bgt.n	800a73c <__ssvfiscanf_r+0x294>
 800a6ac:	466b      	mov	r3, sp
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	a941      	add	r1, sp, #260	@ 0x104
 800a6b4:	f000 fb3c 	bl	800ad30 <_scanf_chars>
 800a6b8:	2801      	cmp	r0, #1
 800a6ba:	d065      	beq.n	800a788 <__ssvfiscanf_r+0x2e0>
 800a6bc:	2802      	cmp	r0, #2
 800a6be:	f47f af17 	bne.w	800a4f0 <__ssvfiscanf_r+0x48>
 800a6c2:	e7c9      	b.n	800a658 <__ssvfiscanf_r+0x1b0>
 800a6c4:	220a      	movs	r2, #10
 800a6c6:	e7d7      	b.n	800a678 <__ssvfiscanf_r+0x1d0>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f000 fc7c 	bl	800afc8 <__sccl>
 800a6d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6d8:	9341      	str	r3, [sp, #260]	@ 0x104
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e7d7      	b.n	800a68e <__ssvfiscanf_r+0x1e6>
 800a6de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a6e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e7d1      	b.n	800a68e <__ssvfiscanf_r+0x1e6>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e7cf      	b.n	800a68e <__ssvfiscanf_r+0x1e6>
 800a6ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a6f0:	06c3      	lsls	r3, r0, #27
 800a6f2:	f53f aefd 	bmi.w	800a4f0 <__ssvfiscanf_r+0x48>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a6fa:	1d19      	adds	r1, r3, #4
 800a6fc:	9100      	str	r1, [sp, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	07c0      	lsls	r0, r0, #31
 800a702:	bf4c      	ite	mi
 800a704:	801a      	strhmi	r2, [r3, #0]
 800a706:	601a      	strpl	r2, [r3, #0]
 800a708:	e6f2      	b.n	800a4f0 <__ssvfiscanf_r+0x48>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a710:	4798      	blx	r3
 800a712:	2800      	cmp	r0, #0
 800a714:	d0bf      	beq.n	800a696 <__ssvfiscanf_r+0x1ee>
 800a716:	e79f      	b.n	800a658 <__ssvfiscanf_r+0x1b0>
 800a718:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a71a:	3201      	adds	r2, #1
 800a71c:	9245      	str	r2, [sp, #276]	@ 0x114
 800a71e:	6862      	ldr	r2, [r4, #4]
 800a720:	3a01      	subs	r2, #1
 800a722:	2a00      	cmp	r2, #0
 800a724:	6062      	str	r2, [r4, #4]
 800a726:	dd02      	ble.n	800a72e <__ssvfiscanf_r+0x286>
 800a728:	3301      	adds	r3, #1
 800a72a:	6023      	str	r3, [r4, #0]
 800a72c:	e7b6      	b.n	800a69c <__ssvfiscanf_r+0x1f4>
 800a72e:	4621      	mov	r1, r4
 800a730:	4630      	mov	r0, r6
 800a732:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a734:	4798      	blx	r3
 800a736:	2800      	cmp	r0, #0
 800a738:	d0b0      	beq.n	800a69c <__ssvfiscanf_r+0x1f4>
 800a73a:	e78d      	b.n	800a658 <__ssvfiscanf_r+0x1b0>
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	dc06      	bgt.n	800a74e <__ssvfiscanf_r+0x2a6>
 800a740:	466b      	mov	r3, sp
 800a742:	4622      	mov	r2, r4
 800a744:	4630      	mov	r0, r6
 800a746:	a941      	add	r1, sp, #260	@ 0x104
 800a748:	f000 fb4c 	bl	800ade4 <_scanf_i>
 800a74c:	e7b4      	b.n	800a6b8 <__ssvfiscanf_r+0x210>
 800a74e:	4b09      	ldr	r3, [pc, #36]	@ (800a774 <__ssvfiscanf_r+0x2cc>)
 800a750:	2b00      	cmp	r3, #0
 800a752:	f43f aecd 	beq.w	800a4f0 <__ssvfiscanf_r+0x48>
 800a756:	466b      	mov	r3, sp
 800a758:	4622      	mov	r2, r4
 800a75a:	4630      	mov	r0, r6
 800a75c:	a941      	add	r1, sp, #260	@ 0x104
 800a75e:	f3af 8000 	nop.w
 800a762:	e7a9      	b.n	800a6b8 <__ssvfiscanf_r+0x210>
 800a764:	0800a3f9 	.word	0x0800a3f9
 800a768:	0800a46f 	.word	0x0800a46f
 800a76c:	0800c3b1 	.word	0x0800c3b1
 800a770:	0800c898 	.word	0x0800c898
 800a774:	00000000 	.word	0x00000000
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	065b      	lsls	r3, r3, #25
 800a77c:	f53f af70 	bmi.w	800a660 <__ssvfiscanf_r+0x1b8>
 800a780:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a788:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a78a:	e7f9      	b.n	800a780 <__ssvfiscanf_r+0x2d8>

0800a78c <__sfputc_r>:
 800a78c:	6893      	ldr	r3, [r2, #8]
 800a78e:	b410      	push	{r4}
 800a790:	3b01      	subs	r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	6093      	str	r3, [r2, #8]
 800a796:	da07      	bge.n	800a7a8 <__sfputc_r+0x1c>
 800a798:	6994      	ldr	r4, [r2, #24]
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	db01      	blt.n	800a7a2 <__sfputc_r+0x16>
 800a79e:	290a      	cmp	r1, #10
 800a7a0:	d102      	bne.n	800a7a8 <__sfputc_r+0x1c>
 800a7a2:	bc10      	pop	{r4}
 800a7a4:	f000 bc81 	b.w	800b0aa <__swbuf_r>
 800a7a8:	6813      	ldr	r3, [r2, #0]
 800a7aa:	1c58      	adds	r0, r3, #1
 800a7ac:	6010      	str	r0, [r2, #0]
 800a7ae:	7019      	strb	r1, [r3, #0]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	bc10      	pop	{r4}
 800a7b4:	4770      	bx	lr

0800a7b6 <__sfputs_r>:
 800a7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	460f      	mov	r7, r1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	18d5      	adds	r5, r2, r3
 800a7c0:	42ac      	cmp	r4, r5
 800a7c2:	d101      	bne.n	800a7c8 <__sfputs_r+0x12>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e007      	b.n	800a7d8 <__sfputs_r+0x22>
 800a7c8:	463a      	mov	r2, r7
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	f7ff ffdc 	bl	800a78c <__sfputc_r>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d1f3      	bne.n	800a7c0 <__sfputs_r+0xa>
 800a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7dc <_vfiprintf_r>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	4698      	mov	r8, r3
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	b09d      	sub	sp, #116	@ 0x74
 800a7ea:	b118      	cbz	r0, 800a7f4 <_vfiprintf_r+0x18>
 800a7ec:	6a03      	ldr	r3, [r0, #32]
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <_vfiprintf_r+0x18>
 800a7f0:	f7fd fa58 	bl	8007ca4 <__sinit>
 800a7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d405      	bmi.n	800a806 <_vfiprintf_r+0x2a>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	059a      	lsls	r2, r3, #22
 800a7fe:	d402      	bmi.n	800a806 <_vfiprintf_r+0x2a>
 800a800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a802:	f7fe fa29 	bl	8008c58 <__retarget_lock_acquire_recursive>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	071b      	lsls	r3, r3, #28
 800a80a:	d501      	bpl.n	800a810 <_vfiprintf_r+0x34>
 800a80c:	692b      	ldr	r3, [r5, #16]
 800a80e:	b99b      	cbnz	r3, 800a838 <_vfiprintf_r+0x5c>
 800a810:	4629      	mov	r1, r5
 800a812:	4630      	mov	r0, r6
 800a814:	f000 fc88 	bl	800b128 <__swsetup_r>
 800a818:	b170      	cbz	r0, 800a838 <_vfiprintf_r+0x5c>
 800a81a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a81c:	07dc      	lsls	r4, r3, #31
 800a81e:	d504      	bpl.n	800a82a <_vfiprintf_r+0x4e>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	b01d      	add	sp, #116	@ 0x74
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	0598      	lsls	r0, r3, #22
 800a82e:	d4f7      	bmi.n	800a820 <_vfiprintf_r+0x44>
 800a830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a832:	f7fe fa13 	bl	8008c5c <__retarget_lock_release_recursive>
 800a836:	e7f3      	b.n	800a820 <_vfiprintf_r+0x44>
 800a838:	2300      	movs	r3, #0
 800a83a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a83c:	2320      	movs	r3, #32
 800a83e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a842:	2330      	movs	r3, #48	@ 0x30
 800a844:	f04f 0901 	mov.w	r9, #1
 800a848:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a9f8 <_vfiprintf_r+0x21c>
 800a850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a854:	4623      	mov	r3, r4
 800a856:	469a      	mov	sl, r3
 800a858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a85c:	b10a      	cbz	r2, 800a862 <_vfiprintf_r+0x86>
 800a85e:	2a25      	cmp	r2, #37	@ 0x25
 800a860:	d1f9      	bne.n	800a856 <_vfiprintf_r+0x7a>
 800a862:	ebba 0b04 	subs.w	fp, sl, r4
 800a866:	d00b      	beq.n	800a880 <_vfiprintf_r+0xa4>
 800a868:	465b      	mov	r3, fp
 800a86a:	4622      	mov	r2, r4
 800a86c:	4629      	mov	r1, r5
 800a86e:	4630      	mov	r0, r6
 800a870:	f7ff ffa1 	bl	800a7b6 <__sfputs_r>
 800a874:	3001      	adds	r0, #1
 800a876:	f000 80a7 	beq.w	800a9c8 <_vfiprintf_r+0x1ec>
 800a87a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a87c:	445a      	add	r2, fp
 800a87e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a880:	f89a 3000 	ldrb.w	r3, [sl]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 809f 	beq.w	800a9c8 <_vfiprintf_r+0x1ec>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a894:	f10a 0a01 	add.w	sl, sl, #1
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8a2:	4654      	mov	r4, sl
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8aa:	4853      	ldr	r0, [pc, #332]	@ (800a9f8 <_vfiprintf_r+0x21c>)
 800a8ac:	f000 fcd6 	bl	800b25c <memchr>
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	b9d8      	cbnz	r0, 800a8ec <_vfiprintf_r+0x110>
 800a8b4:	06d1      	lsls	r1, r2, #27
 800a8b6:	bf44      	itt	mi
 800a8b8:	2320      	movmi	r3, #32
 800a8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8be:	0713      	lsls	r3, r2, #28
 800a8c0:	bf44      	itt	mi
 800a8c2:	232b      	movmi	r3, #43	@ 0x2b
 800a8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ce:	d015      	beq.n	800a8fc <_vfiprintf_r+0x120>
 800a8d0:	4654      	mov	r4, sl
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f04f 0c0a 	mov.w	ip, #10
 800a8d8:	9a07      	ldr	r2, [sp, #28]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e0:	3b30      	subs	r3, #48	@ 0x30
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d94b      	bls.n	800a97e <_vfiprintf_r+0x1a2>
 800a8e6:	b1b0      	cbz	r0, 800a916 <_vfiprintf_r+0x13a>
 800a8e8:	9207      	str	r2, [sp, #28]
 800a8ea:	e014      	b.n	800a916 <_vfiprintf_r+0x13a>
 800a8ec:	eba0 0308 	sub.w	r3, r0, r8
 800a8f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	46a2      	mov	sl, r4
 800a8f8:	9304      	str	r3, [sp, #16]
 800a8fa:	e7d2      	b.n	800a8a2 <_vfiprintf_r+0xc6>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	1d19      	adds	r1, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	9103      	str	r1, [sp, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfbb      	ittet	lt
 800a908:	425b      	neglt	r3, r3
 800a90a:	f042 0202 	orrlt.w	r2, r2, #2
 800a90e:	9307      	strge	r3, [sp, #28]
 800a910:	9307      	strlt	r3, [sp, #28]
 800a912:	bfb8      	it	lt
 800a914:	9204      	strlt	r2, [sp, #16]
 800a916:	7823      	ldrb	r3, [r4, #0]
 800a918:	2b2e      	cmp	r3, #46	@ 0x2e
 800a91a:	d10a      	bne.n	800a932 <_vfiprintf_r+0x156>
 800a91c:	7863      	ldrb	r3, [r4, #1]
 800a91e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a920:	d132      	bne.n	800a988 <_vfiprintf_r+0x1ac>
 800a922:	9b03      	ldr	r3, [sp, #12]
 800a924:	3402      	adds	r4, #2
 800a926:	1d1a      	adds	r2, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9203      	str	r2, [sp, #12]
 800a92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a930:	9305      	str	r3, [sp, #20]
 800a932:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a9fc <_vfiprintf_r+0x220>
 800a936:	2203      	movs	r2, #3
 800a938:	4650      	mov	r0, sl
 800a93a:	7821      	ldrb	r1, [r4, #0]
 800a93c:	f000 fc8e 	bl	800b25c <memchr>
 800a940:	b138      	cbz	r0, 800a952 <_vfiprintf_r+0x176>
 800a942:	2240      	movs	r2, #64	@ 0x40
 800a944:	9b04      	ldr	r3, [sp, #16]
 800a946:	eba0 000a 	sub.w	r0, r0, sl
 800a94a:	4082      	lsls	r2, r0
 800a94c:	4313      	orrs	r3, r2
 800a94e:	3401      	adds	r4, #1
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a956:	2206      	movs	r2, #6
 800a958:	4829      	ldr	r0, [pc, #164]	@ (800aa00 <_vfiprintf_r+0x224>)
 800a95a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a95e:	f000 fc7d 	bl	800b25c <memchr>
 800a962:	2800      	cmp	r0, #0
 800a964:	d03f      	beq.n	800a9e6 <_vfiprintf_r+0x20a>
 800a966:	4b27      	ldr	r3, [pc, #156]	@ (800aa04 <_vfiprintf_r+0x228>)
 800a968:	bb1b      	cbnz	r3, 800a9b2 <_vfiprintf_r+0x1d6>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	3307      	adds	r3, #7
 800a96e:	f023 0307 	bic.w	r3, r3, #7
 800a972:	3308      	adds	r3, #8
 800a974:	9303      	str	r3, [sp, #12]
 800a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a978:	443b      	add	r3, r7
 800a97a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97c:	e76a      	b.n	800a854 <_vfiprintf_r+0x78>
 800a97e:	460c      	mov	r4, r1
 800a980:	2001      	movs	r0, #1
 800a982:	fb0c 3202 	mla	r2, ip, r2, r3
 800a986:	e7a8      	b.n	800a8da <_vfiprintf_r+0xfe>
 800a988:	2300      	movs	r3, #0
 800a98a:	f04f 0c0a 	mov.w	ip, #10
 800a98e:	4619      	mov	r1, r3
 800a990:	3401      	adds	r4, #1
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	4620      	mov	r0, r4
 800a996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a99a:	3a30      	subs	r2, #48	@ 0x30
 800a99c:	2a09      	cmp	r2, #9
 800a99e:	d903      	bls.n	800a9a8 <_vfiprintf_r+0x1cc>
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0c6      	beq.n	800a932 <_vfiprintf_r+0x156>
 800a9a4:	9105      	str	r1, [sp, #20]
 800a9a6:	e7c4      	b.n	800a932 <_vfiprintf_r+0x156>
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b0:	e7f0      	b.n	800a994 <_vfiprintf_r+0x1b8>
 800a9b2:	ab03      	add	r3, sp, #12
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4b13      	ldr	r3, [pc, #76]	@ (800aa08 <_vfiprintf_r+0x22c>)
 800a9bc:	a904      	add	r1, sp, #16
 800a9be:	f3af 8000 	nop.w
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	1c78      	adds	r0, r7, #1
 800a9c6:	d1d6      	bne.n	800a976 <_vfiprintf_r+0x19a>
 800a9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ca:	07d9      	lsls	r1, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_vfiprintf_r+0x1fe>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	059a      	lsls	r2, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_vfiprintf_r+0x1fe>
 800a9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9d6:	f7fe f941 	bl	8008c5c <__retarget_lock_release_recursive>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	065b      	lsls	r3, r3, #25
 800a9de:	f53f af1f 	bmi.w	800a820 <_vfiprintf_r+0x44>
 800a9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9e4:	e71e      	b.n	800a824 <_vfiprintf_r+0x48>
 800a9e6:	ab03      	add	r3, sp, #12
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4b06      	ldr	r3, [pc, #24]	@ (800aa08 <_vfiprintf_r+0x22c>)
 800a9f0:	a904      	add	r1, sp, #16
 800a9f2:	f000 f87d 	bl	800aaf0 <_printf_i>
 800a9f6:	e7e4      	b.n	800a9c2 <_vfiprintf_r+0x1e6>
 800a9f8:	0800c89c 	.word	0x0800c89c
 800a9fc:	0800c898 	.word	0x0800c898
 800aa00:	0800c8a2 	.word	0x0800c8a2
 800aa04:	00000000 	.word	0x00000000
 800aa08:	0800a7b7 	.word	0x0800a7b7

0800aa0c <_printf_common>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	4616      	mov	r6, r2
 800aa12:	4698      	mov	r8, r3
 800aa14:	688a      	ldr	r2, [r1, #8]
 800aa16:	690b      	ldr	r3, [r1, #16]
 800aa18:	4607      	mov	r7, r0
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	bfb8      	it	lt
 800aa1e:	4613      	movlt	r3, r2
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa26:	460c      	mov	r4, r1
 800aa28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa2c:	b10a      	cbz	r2, 800aa32 <_printf_common+0x26>
 800aa2e:	3301      	adds	r3, #1
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	0699      	lsls	r1, r3, #26
 800aa36:	bf42      	ittt	mi
 800aa38:	6833      	ldrmi	r3, [r6, #0]
 800aa3a:	3302      	addmi	r3, #2
 800aa3c:	6033      	strmi	r3, [r6, #0]
 800aa3e:	6825      	ldr	r5, [r4, #0]
 800aa40:	f015 0506 	ands.w	r5, r5, #6
 800aa44:	d106      	bne.n	800aa54 <_printf_common+0x48>
 800aa46:	f104 0a19 	add.w	sl, r4, #25
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dc2b      	bgt.n	800aaac <_printf_common+0xa0>
 800aa54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	3b00      	subs	r3, #0
 800aa5c:	bf18      	it	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	0692      	lsls	r2, r2, #26
 800aa62:	d430      	bmi.n	800aac6 <_printf_common+0xba>
 800aa64:	4641      	mov	r1, r8
 800aa66:	4638      	mov	r0, r7
 800aa68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa6c:	47c8      	blx	r9
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d023      	beq.n	800aaba <_printf_common+0xae>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	f003 0306 	and.w	r3, r3, #6
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	bf14      	ite	ne
 800aa7e:	2500      	movne	r5, #0
 800aa80:	6833      	ldreq	r3, [r6, #0]
 800aa82:	f04f 0600 	mov.w	r6, #0
 800aa86:	bf08      	it	eq
 800aa88:	68e5      	ldreq	r5, [r4, #12]
 800aa8a:	f104 041a 	add.w	r4, r4, #26
 800aa8e:	bf08      	it	eq
 800aa90:	1aed      	subeq	r5, r5, r3
 800aa92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa96:	bf08      	it	eq
 800aa98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	bfc4      	itt	gt
 800aaa0:	1a9b      	subgt	r3, r3, r2
 800aaa2:	18ed      	addgt	r5, r5, r3
 800aaa4:	42b5      	cmp	r5, r6
 800aaa6:	d11a      	bne.n	800aade <_printf_common+0xd2>
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e008      	b.n	800aabe <_printf_common+0xb2>
 800aaac:	2301      	movs	r3, #1
 800aaae:	4652      	mov	r2, sl
 800aab0:	4641      	mov	r1, r8
 800aab2:	4638      	mov	r0, r7
 800aab4:	47c8      	blx	r9
 800aab6:	3001      	adds	r0, #1
 800aab8:	d103      	bne.n	800aac2 <_printf_common+0xb6>
 800aaba:	f04f 30ff 	mov.w	r0, #4294967295
 800aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac2:	3501      	adds	r5, #1
 800aac4:	e7c1      	b.n	800aa4a <_printf_common+0x3e>
 800aac6:	2030      	movs	r0, #48	@ 0x30
 800aac8:	18e1      	adds	r1, r4, r3
 800aaca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aad4:	4422      	add	r2, r4
 800aad6:	3302      	adds	r3, #2
 800aad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aadc:	e7c2      	b.n	800aa64 <_printf_common+0x58>
 800aade:	2301      	movs	r3, #1
 800aae0:	4622      	mov	r2, r4
 800aae2:	4641      	mov	r1, r8
 800aae4:	4638      	mov	r0, r7
 800aae6:	47c8      	blx	r9
 800aae8:	3001      	adds	r0, #1
 800aaea:	d0e6      	beq.n	800aaba <_printf_common+0xae>
 800aaec:	3601      	adds	r6, #1
 800aaee:	e7d9      	b.n	800aaa4 <_printf_common+0x98>

0800aaf0 <_printf_i>:
 800aaf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	7e0f      	ldrb	r7, [r1, #24]
 800aaf6:	4691      	mov	r9, r2
 800aaf8:	2f78      	cmp	r7, #120	@ 0x78
 800aafa:	4680      	mov	r8, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	469a      	mov	sl, r3
 800ab00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab06:	d807      	bhi.n	800ab18 <_printf_i+0x28>
 800ab08:	2f62      	cmp	r7, #98	@ 0x62
 800ab0a:	d80a      	bhi.n	800ab22 <_printf_i+0x32>
 800ab0c:	2f00      	cmp	r7, #0
 800ab0e:	f000 80d3 	beq.w	800acb8 <_printf_i+0x1c8>
 800ab12:	2f58      	cmp	r7, #88	@ 0x58
 800ab14:	f000 80ba 	beq.w	800ac8c <_printf_i+0x19c>
 800ab18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab20:	e03a      	b.n	800ab98 <_printf_i+0xa8>
 800ab22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab26:	2b15      	cmp	r3, #21
 800ab28:	d8f6      	bhi.n	800ab18 <_printf_i+0x28>
 800ab2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ab30 <_printf_i+0x40>)
 800ab2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab30:	0800ab89 	.word	0x0800ab89
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab19 	.word	0x0800ab19
 800ab3c:	0800ab19 	.word	0x0800ab19
 800ab40:	0800ab19 	.word	0x0800ab19
 800ab44:	0800ab19 	.word	0x0800ab19
 800ab48:	0800ab9d 	.word	0x0800ab9d
 800ab4c:	0800ab19 	.word	0x0800ab19
 800ab50:	0800ab19 	.word	0x0800ab19
 800ab54:	0800ab19 	.word	0x0800ab19
 800ab58:	0800ab19 	.word	0x0800ab19
 800ab5c:	0800ac9f 	.word	0x0800ac9f
 800ab60:	0800abc7 	.word	0x0800abc7
 800ab64:	0800ac59 	.word	0x0800ac59
 800ab68:	0800ab19 	.word	0x0800ab19
 800ab6c:	0800ab19 	.word	0x0800ab19
 800ab70:	0800acc1 	.word	0x0800acc1
 800ab74:	0800ab19 	.word	0x0800ab19
 800ab78:	0800abc7 	.word	0x0800abc7
 800ab7c:	0800ab19 	.word	0x0800ab19
 800ab80:	0800ab19 	.word	0x0800ab19
 800ab84:	0800ac61 	.word	0x0800ac61
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	1d1a      	adds	r2, r3, #4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6032      	str	r2, [r6, #0]
 800ab90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e09e      	b.n	800acda <_printf_i+0x1ea>
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	6820      	ldr	r0, [r4, #0]
 800aba0:	1d19      	adds	r1, r3, #4
 800aba2:	6031      	str	r1, [r6, #0]
 800aba4:	0606      	lsls	r6, r0, #24
 800aba6:	d501      	bpl.n	800abac <_printf_i+0xbc>
 800aba8:	681d      	ldr	r5, [r3, #0]
 800abaa:	e003      	b.n	800abb4 <_printf_i+0xc4>
 800abac:	0645      	lsls	r5, r0, #25
 800abae:	d5fb      	bpl.n	800aba8 <_printf_i+0xb8>
 800abb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	da03      	bge.n	800abc0 <_printf_i+0xd0>
 800abb8:	232d      	movs	r3, #45	@ 0x2d
 800abba:	426d      	negs	r5, r5
 800abbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abc0:	230a      	movs	r3, #10
 800abc2:	4859      	ldr	r0, [pc, #356]	@ (800ad28 <_printf_i+0x238>)
 800abc4:	e011      	b.n	800abea <_printf_i+0xfa>
 800abc6:	6821      	ldr	r1, [r4, #0]
 800abc8:	6833      	ldr	r3, [r6, #0]
 800abca:	0608      	lsls	r0, r1, #24
 800abcc:	f853 5b04 	ldr.w	r5, [r3], #4
 800abd0:	d402      	bmi.n	800abd8 <_printf_i+0xe8>
 800abd2:	0649      	lsls	r1, r1, #25
 800abd4:	bf48      	it	mi
 800abd6:	b2ad      	uxthmi	r5, r5
 800abd8:	2f6f      	cmp	r7, #111	@ 0x6f
 800abda:	6033      	str	r3, [r6, #0]
 800abdc:	bf14      	ite	ne
 800abde:	230a      	movne	r3, #10
 800abe0:	2308      	moveq	r3, #8
 800abe2:	4851      	ldr	r0, [pc, #324]	@ (800ad28 <_printf_i+0x238>)
 800abe4:	2100      	movs	r1, #0
 800abe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abea:	6866      	ldr	r6, [r4, #4]
 800abec:	2e00      	cmp	r6, #0
 800abee:	bfa8      	it	ge
 800abf0:	6821      	ldrge	r1, [r4, #0]
 800abf2:	60a6      	str	r6, [r4, #8]
 800abf4:	bfa4      	itt	ge
 800abf6:	f021 0104 	bicge.w	r1, r1, #4
 800abfa:	6021      	strge	r1, [r4, #0]
 800abfc:	b90d      	cbnz	r5, 800ac02 <_printf_i+0x112>
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d04b      	beq.n	800ac9a <_printf_i+0x1aa>
 800ac02:	4616      	mov	r6, r2
 800ac04:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac08:	fb03 5711 	mls	r7, r3, r1, r5
 800ac0c:	5dc7      	ldrb	r7, [r0, r7]
 800ac0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac12:	462f      	mov	r7, r5
 800ac14:	42bb      	cmp	r3, r7
 800ac16:	460d      	mov	r5, r1
 800ac18:	d9f4      	bls.n	800ac04 <_printf_i+0x114>
 800ac1a:	2b08      	cmp	r3, #8
 800ac1c:	d10b      	bne.n	800ac36 <_printf_i+0x146>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	07df      	lsls	r7, r3, #31
 800ac22:	d508      	bpl.n	800ac36 <_printf_i+0x146>
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	6861      	ldr	r1, [r4, #4]
 800ac28:	4299      	cmp	r1, r3
 800ac2a:	bfde      	ittt	le
 800ac2c:	2330      	movle	r3, #48	@ 0x30
 800ac2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac32:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac36:	1b92      	subs	r2, r2, r6
 800ac38:	6122      	str	r2, [r4, #16]
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4640      	mov	r0, r8
 800ac40:	f8cd a000 	str.w	sl, [sp]
 800ac44:	aa03      	add	r2, sp, #12
 800ac46:	f7ff fee1 	bl	800aa0c <_printf_common>
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d14a      	bne.n	800ace4 <_printf_i+0x1f4>
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	b004      	add	sp, #16
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	f043 0320 	orr.w	r3, r3, #32
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	2778      	movs	r7, #120	@ 0x78
 800ac62:	4832      	ldr	r0, [pc, #200]	@ (800ad2c <_printf_i+0x23c>)
 800ac64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	6831      	ldr	r1, [r6, #0]
 800ac6c:	061f      	lsls	r7, r3, #24
 800ac6e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac72:	d402      	bmi.n	800ac7a <_printf_i+0x18a>
 800ac74:	065f      	lsls	r7, r3, #25
 800ac76:	bf48      	it	mi
 800ac78:	b2ad      	uxthmi	r5, r5
 800ac7a:	6031      	str	r1, [r6, #0]
 800ac7c:	07d9      	lsls	r1, r3, #31
 800ac7e:	bf44      	itt	mi
 800ac80:	f043 0320 	orrmi.w	r3, r3, #32
 800ac84:	6023      	strmi	r3, [r4, #0]
 800ac86:	b11d      	cbz	r5, 800ac90 <_printf_i+0x1a0>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	e7ab      	b.n	800abe4 <_printf_i+0xf4>
 800ac8c:	4826      	ldr	r0, [pc, #152]	@ (800ad28 <_printf_i+0x238>)
 800ac8e:	e7e9      	b.n	800ac64 <_printf_i+0x174>
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	f023 0320 	bic.w	r3, r3, #32
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	e7f6      	b.n	800ac88 <_printf_i+0x198>
 800ac9a:	4616      	mov	r6, r2
 800ac9c:	e7bd      	b.n	800ac1a <_printf_i+0x12a>
 800ac9e:	6833      	ldr	r3, [r6, #0]
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	1d18      	adds	r0, r3, #4
 800aca4:	6961      	ldr	r1, [r4, #20]
 800aca6:	6030      	str	r0, [r6, #0]
 800aca8:	062e      	lsls	r6, r5, #24
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	d501      	bpl.n	800acb2 <_printf_i+0x1c2>
 800acae:	6019      	str	r1, [r3, #0]
 800acb0:	e002      	b.n	800acb8 <_printf_i+0x1c8>
 800acb2:	0668      	lsls	r0, r5, #25
 800acb4:	d5fb      	bpl.n	800acae <_printf_i+0x1be>
 800acb6:	8019      	strh	r1, [r3, #0]
 800acb8:	2300      	movs	r3, #0
 800acba:	4616      	mov	r6, r2
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	e7bc      	b.n	800ac3a <_printf_i+0x14a>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	1d1a      	adds	r2, r3, #4
 800acc6:	6032      	str	r2, [r6, #0]
 800acc8:	681e      	ldr	r6, [r3, #0]
 800acca:	6862      	ldr	r2, [r4, #4]
 800accc:	4630      	mov	r0, r6
 800acce:	f000 fac5 	bl	800b25c <memchr>
 800acd2:	b108      	cbz	r0, 800acd8 <_printf_i+0x1e8>
 800acd4:	1b80      	subs	r0, r0, r6
 800acd6:	6060      	str	r0, [r4, #4]
 800acd8:	6863      	ldr	r3, [r4, #4]
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2300      	movs	r3, #0
 800acde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace2:	e7aa      	b.n	800ac3a <_printf_i+0x14a>
 800ace4:	4632      	mov	r2, r6
 800ace6:	4649      	mov	r1, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	47d0      	blx	sl
 800acee:	3001      	adds	r0, #1
 800acf0:	d0ad      	beq.n	800ac4e <_printf_i+0x15e>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	079b      	lsls	r3, r3, #30
 800acf6:	d413      	bmi.n	800ad20 <_printf_i+0x230>
 800acf8:	68e0      	ldr	r0, [r4, #12]
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	4298      	cmp	r0, r3
 800acfe:	bfb8      	it	lt
 800ad00:	4618      	movlt	r0, r3
 800ad02:	e7a6      	b.n	800ac52 <_printf_i+0x162>
 800ad04:	2301      	movs	r3, #1
 800ad06:	4632      	mov	r2, r6
 800ad08:	4649      	mov	r1, r9
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	47d0      	blx	sl
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d09d      	beq.n	800ac4e <_printf_i+0x15e>
 800ad12:	3501      	adds	r5, #1
 800ad14:	68e3      	ldr	r3, [r4, #12]
 800ad16:	9903      	ldr	r1, [sp, #12]
 800ad18:	1a5b      	subs	r3, r3, r1
 800ad1a:	42ab      	cmp	r3, r5
 800ad1c:	dcf2      	bgt.n	800ad04 <_printf_i+0x214>
 800ad1e:	e7eb      	b.n	800acf8 <_printf_i+0x208>
 800ad20:	2500      	movs	r5, #0
 800ad22:	f104 0619 	add.w	r6, r4, #25
 800ad26:	e7f5      	b.n	800ad14 <_printf_i+0x224>
 800ad28:	0800c8a9 	.word	0x0800c8a9
 800ad2c:	0800c8ba 	.word	0x0800c8ba

0800ad30 <_scanf_chars>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	4615      	mov	r5, r2
 800ad36:	688a      	ldr	r2, [r1, #8]
 800ad38:	4680      	mov	r8, r0
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	b932      	cbnz	r2, 800ad4c <_scanf_chars+0x1c>
 800ad3e:	698a      	ldr	r2, [r1, #24]
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	bf14      	ite	ne
 800ad44:	f04f 32ff 	movne.w	r2, #4294967295
 800ad48:	2201      	moveq	r2, #1
 800ad4a:	608a      	str	r2, [r1, #8]
 800ad4c:	2700      	movs	r7, #0
 800ad4e:	6822      	ldr	r2, [r4, #0]
 800ad50:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800ade0 <_scanf_chars+0xb0>
 800ad54:	06d1      	lsls	r1, r2, #27
 800ad56:	bf5f      	itttt	pl
 800ad58:	681a      	ldrpl	r2, [r3, #0]
 800ad5a:	1d11      	addpl	r1, r2, #4
 800ad5c:	6019      	strpl	r1, [r3, #0]
 800ad5e:	6816      	ldrpl	r6, [r2, #0]
 800ad60:	69a0      	ldr	r0, [r4, #24]
 800ad62:	b188      	cbz	r0, 800ad88 <_scanf_chars+0x58>
 800ad64:	2801      	cmp	r0, #1
 800ad66:	d107      	bne.n	800ad78 <_scanf_chars+0x48>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	6963      	ldr	r3, [r4, #20]
 800ad6e:	5c9b      	ldrb	r3, [r3, r2]
 800ad70:	b953      	cbnz	r3, 800ad88 <_scanf_chars+0x58>
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	d031      	beq.n	800adda <_scanf_chars+0xaa>
 800ad76:	e022      	b.n	800adbe <_scanf_chars+0x8e>
 800ad78:	2802      	cmp	r0, #2
 800ad7a:	d120      	bne.n	800adbe <_scanf_chars+0x8e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d41a      	bmi.n	800adbe <_scanf_chars+0x8e>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	3701      	adds	r7, #1
 800ad8c:	06da      	lsls	r2, r3, #27
 800ad8e:	bf5e      	ittt	pl
 800ad90:	682b      	ldrpl	r3, [r5, #0]
 800ad92:	781b      	ldrbpl	r3, [r3, #0]
 800ad94:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ad98:	682a      	ldr	r2, [r5, #0]
 800ad9a:	686b      	ldr	r3, [r5, #4]
 800ad9c:	3201      	adds	r2, #1
 800ad9e:	602a      	str	r2, [r5, #0]
 800ada0:	68a2      	ldr	r2, [r4, #8]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	3a01      	subs	r2, #1
 800ada6:	606b      	str	r3, [r5, #4]
 800ada8:	60a2      	str	r2, [r4, #8]
 800adaa:	b142      	cbz	r2, 800adbe <_scanf_chars+0x8e>
 800adac:	2b00      	cmp	r3, #0
 800adae:	dcd7      	bgt.n	800ad60 <_scanf_chars+0x30>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4640      	mov	r0, r8
 800adb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800adb8:	4798      	blx	r3
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0d0      	beq.n	800ad60 <_scanf_chars+0x30>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	f013 0310 	ands.w	r3, r3, #16
 800adc4:	d105      	bne.n	800add2 <_scanf_chars+0xa2>
 800adc6:	68e2      	ldr	r2, [r4, #12]
 800adc8:	3201      	adds	r2, #1
 800adca:	60e2      	str	r2, [r4, #12]
 800adcc:	69a2      	ldr	r2, [r4, #24]
 800adce:	b102      	cbz	r2, 800add2 <_scanf_chars+0xa2>
 800add0:	7033      	strb	r3, [r6, #0]
 800add2:	2000      	movs	r0, #0
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	443b      	add	r3, r7
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adde:	bf00      	nop
 800ade0:	0800c3b1 	.word	0x0800c3b1

0800ade4 <_scanf_i>:
 800ade4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	4698      	mov	r8, r3
 800adec:	4b72      	ldr	r3, [pc, #456]	@ (800afb8 <_scanf_i+0x1d4>)
 800adee:	b087      	sub	sp, #28
 800adf0:	4682      	mov	sl, r0
 800adf2:	4616      	mov	r6, r2
 800adf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adf8:	ab03      	add	r3, sp, #12
 800adfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800adfe:	4b6f      	ldr	r3, [pc, #444]	@ (800afbc <_scanf_i+0x1d8>)
 800ae00:	69a1      	ldr	r1, [r4, #24]
 800ae02:	4a6f      	ldr	r2, [pc, #444]	@ (800afc0 <_scanf_i+0x1dc>)
 800ae04:	4627      	mov	r7, r4
 800ae06:	2903      	cmp	r1, #3
 800ae08:	bf08      	it	eq
 800ae0a:	461a      	moveq	r2, r3
 800ae0c:	68a3      	ldr	r3, [r4, #8]
 800ae0e:	9201      	str	r2, [sp, #4]
 800ae10:	1e5a      	subs	r2, r3, #1
 800ae12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae16:	bf81      	itttt	hi
 800ae18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ae1c:	eb03 0905 	addhi.w	r9, r3, r5
 800ae20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ae24:	60a3      	strhi	r3, [r4, #8]
 800ae26:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ae2a:	bf98      	it	ls
 800ae2c:	f04f 0900 	movls.w	r9, #0
 800ae30:	463d      	mov	r5, r7
 800ae32:	f04f 0b00 	mov.w	fp, #0
 800ae36:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	6831      	ldr	r1, [r6, #0]
 800ae3e:	ab03      	add	r3, sp, #12
 800ae40:	2202      	movs	r2, #2
 800ae42:	7809      	ldrb	r1, [r1, #0]
 800ae44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ae48:	f000 fa08 	bl	800b25c <memchr>
 800ae4c:	b328      	cbz	r0, 800ae9a <_scanf_i+0xb6>
 800ae4e:	f1bb 0f01 	cmp.w	fp, #1
 800ae52:	d159      	bne.n	800af08 <_scanf_i+0x124>
 800ae54:	6862      	ldr	r2, [r4, #4]
 800ae56:	b92a      	cbnz	r2, 800ae64 <_scanf_i+0x80>
 800ae58:	2108      	movs	r1, #8
 800ae5a:	6822      	ldr	r2, [r4, #0]
 800ae5c:	6061      	str	r1, [r4, #4]
 800ae5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae62:	6022      	str	r2, [r4, #0]
 800ae64:	6822      	ldr	r2, [r4, #0]
 800ae66:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	68a2      	ldr	r2, [r4, #8]
 800ae6e:	1e51      	subs	r1, r2, #1
 800ae70:	60a1      	str	r1, [r4, #8]
 800ae72:	b192      	cbz	r2, 800ae9a <_scanf_i+0xb6>
 800ae74:	6832      	ldr	r2, [r6, #0]
 800ae76:	1c51      	adds	r1, r2, #1
 800ae78:	6031      	str	r1, [r6, #0]
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	f805 2b01 	strb.w	r2, [r5], #1
 800ae80:	6872      	ldr	r2, [r6, #4]
 800ae82:	3a01      	subs	r2, #1
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	6072      	str	r2, [r6, #4]
 800ae88:	dc07      	bgt.n	800ae9a <_scanf_i+0xb6>
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4650      	mov	r0, sl
 800ae8e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ae92:	4790      	blx	r2
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f040 8085 	bne.w	800afa4 <_scanf_i+0x1c0>
 800ae9a:	f10b 0b01 	add.w	fp, fp, #1
 800ae9e:	f1bb 0f03 	cmp.w	fp, #3
 800aea2:	d1cb      	bne.n	800ae3c <_scanf_i+0x58>
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	b90b      	cbnz	r3, 800aeac <_scanf_i+0xc8>
 800aea8:	230a      	movs	r3, #10
 800aeaa:	6063      	str	r3, [r4, #4]
 800aeac:	6863      	ldr	r3, [r4, #4]
 800aeae:	4945      	ldr	r1, [pc, #276]	@ (800afc4 <_scanf_i+0x1e0>)
 800aeb0:	6960      	ldr	r0, [r4, #20]
 800aeb2:	1ac9      	subs	r1, r1, r3
 800aeb4:	f000 f888 	bl	800afc8 <__sccl>
 800aeb8:	f04f 0b00 	mov.w	fp, #0
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d03d      	beq.n	800af40 <_scanf_i+0x15c>
 800aec4:	6831      	ldr	r1, [r6, #0]
 800aec6:	6960      	ldr	r0, [r4, #20]
 800aec8:	f891 c000 	ldrb.w	ip, [r1]
 800aecc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d035      	beq.n	800af40 <_scanf_i+0x15c>
 800aed4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800aed8:	d124      	bne.n	800af24 <_scanf_i+0x140>
 800aeda:	0510      	lsls	r0, r2, #20
 800aedc:	d522      	bpl.n	800af24 <_scanf_i+0x140>
 800aede:	f10b 0b01 	add.w	fp, fp, #1
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	d003      	beq.n	800aef0 <_scanf_i+0x10c>
 800aee8:	3301      	adds	r3, #1
 800aeea:	f109 39ff 	add.w	r9, r9, #4294967295
 800aeee:	60a3      	str	r3, [r4, #8]
 800aef0:	6873      	ldr	r3, [r6, #4]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	6073      	str	r3, [r6, #4]
 800aef8:	dd1b      	ble.n	800af32 <_scanf_i+0x14e>
 800aefa:	6833      	ldr	r3, [r6, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	6033      	str	r3, [r6, #0]
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	3b01      	subs	r3, #1
 800af04:	60a3      	str	r3, [r4, #8]
 800af06:	e7d9      	b.n	800aebc <_scanf_i+0xd8>
 800af08:	f1bb 0f02 	cmp.w	fp, #2
 800af0c:	d1ae      	bne.n	800ae6c <_scanf_i+0x88>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800af14:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800af18:	d1bf      	bne.n	800ae9a <_scanf_i+0xb6>
 800af1a:	2110      	movs	r1, #16
 800af1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af20:	6061      	str	r1, [r4, #4]
 800af22:	e7a2      	b.n	800ae6a <_scanf_i+0x86>
 800af24:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800af28:	6022      	str	r2, [r4, #0]
 800af2a:	780b      	ldrb	r3, [r1, #0]
 800af2c:	f805 3b01 	strb.w	r3, [r5], #1
 800af30:	e7de      	b.n	800aef0 <_scanf_i+0x10c>
 800af32:	4631      	mov	r1, r6
 800af34:	4650      	mov	r0, sl
 800af36:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800af3a:	4798      	blx	r3
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0df      	beq.n	800af00 <_scanf_i+0x11c>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	05d9      	lsls	r1, r3, #23
 800af44:	d50d      	bpl.n	800af62 <_scanf_i+0x17e>
 800af46:	42bd      	cmp	r5, r7
 800af48:	d909      	bls.n	800af5e <_scanf_i+0x17a>
 800af4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800af4e:	4632      	mov	r2, r6
 800af50:	4650      	mov	r0, sl
 800af52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af56:	f105 39ff 	add.w	r9, r5, #4294967295
 800af5a:	4798      	blx	r3
 800af5c:	464d      	mov	r5, r9
 800af5e:	42bd      	cmp	r5, r7
 800af60:	d028      	beq.n	800afb4 <_scanf_i+0x1d0>
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	f012 0210 	ands.w	r2, r2, #16
 800af68:	d113      	bne.n	800af92 <_scanf_i+0x1ae>
 800af6a:	702a      	strb	r2, [r5, #0]
 800af6c:	4639      	mov	r1, r7
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	4650      	mov	r0, sl
 800af72:	9e01      	ldr	r6, [sp, #4]
 800af74:	47b0      	blx	r6
 800af76:	f8d8 3000 	ldr.w	r3, [r8]
 800af7a:	6821      	ldr	r1, [r4, #0]
 800af7c:	1d1a      	adds	r2, r3, #4
 800af7e:	f8c8 2000 	str.w	r2, [r8]
 800af82:	f011 0f20 	tst.w	r1, #32
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	d00f      	beq.n	800afaa <_scanf_i+0x1c6>
 800af8a:	6018      	str	r0, [r3, #0]
 800af8c:	68e3      	ldr	r3, [r4, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60e3      	str	r3, [r4, #12]
 800af92:	2000      	movs	r0, #0
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	1bed      	subs	r5, r5, r7
 800af98:	445d      	add	r5, fp
 800af9a:	442b      	add	r3, r5
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	b007      	add	sp, #28
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	f04f 0b00 	mov.w	fp, #0
 800afa8:	e7ca      	b.n	800af40 <_scanf_i+0x15c>
 800afaa:	07ca      	lsls	r2, r1, #31
 800afac:	bf4c      	ite	mi
 800afae:	8018      	strhmi	r0, [r3, #0]
 800afb0:	6018      	strpl	r0, [r3, #0]
 800afb2:	e7eb      	b.n	800af8c <_scanf_i+0x1a8>
 800afb4:	2001      	movs	r0, #1
 800afb6:	e7f2      	b.n	800af9e <_scanf_i+0x1ba>
 800afb8:	0800c344 	.word	0x0800c344
 800afbc:	08007b75 	.word	0x08007b75
 800afc0:	0800a039 	.word	0x0800a039
 800afc4:	0800c8db 	.word	0x0800c8db

0800afc8 <__sccl>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	780b      	ldrb	r3, [r1, #0]
 800afcc:	4604      	mov	r4, r0
 800afce:	2b5e      	cmp	r3, #94	@ 0x5e
 800afd0:	bf0b      	itete	eq
 800afd2:	784b      	ldrbeq	r3, [r1, #1]
 800afd4:	1c4a      	addne	r2, r1, #1
 800afd6:	1c8a      	addeq	r2, r1, #2
 800afd8:	2100      	movne	r1, #0
 800afda:	bf08      	it	eq
 800afdc:	2101      	moveq	r1, #1
 800afde:	3801      	subs	r0, #1
 800afe0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800afe4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800afe8:	42a8      	cmp	r0, r5
 800afea:	d1fb      	bne.n	800afe4 <__sccl+0x1c>
 800afec:	b90b      	cbnz	r3, 800aff2 <__sccl+0x2a>
 800afee:	1e50      	subs	r0, r2, #1
 800aff0:	bd70      	pop	{r4, r5, r6, pc}
 800aff2:	f081 0101 	eor.w	r1, r1, #1
 800aff6:	4610      	mov	r0, r2
 800aff8:	54e1      	strb	r1, [r4, r3]
 800affa:	4602      	mov	r2, r0
 800affc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b000:	2d2d      	cmp	r5, #45	@ 0x2d
 800b002:	d005      	beq.n	800b010 <__sccl+0x48>
 800b004:	2d5d      	cmp	r5, #93	@ 0x5d
 800b006:	d016      	beq.n	800b036 <__sccl+0x6e>
 800b008:	2d00      	cmp	r5, #0
 800b00a:	d0f1      	beq.n	800aff0 <__sccl+0x28>
 800b00c:	462b      	mov	r3, r5
 800b00e:	e7f2      	b.n	800aff6 <__sccl+0x2e>
 800b010:	7846      	ldrb	r6, [r0, #1]
 800b012:	2e5d      	cmp	r6, #93	@ 0x5d
 800b014:	d0fa      	beq.n	800b00c <__sccl+0x44>
 800b016:	42b3      	cmp	r3, r6
 800b018:	dcf8      	bgt.n	800b00c <__sccl+0x44>
 800b01a:	461a      	mov	r2, r3
 800b01c:	3002      	adds	r0, #2
 800b01e:	3201      	adds	r2, #1
 800b020:	4296      	cmp	r6, r2
 800b022:	54a1      	strb	r1, [r4, r2]
 800b024:	dcfb      	bgt.n	800b01e <__sccl+0x56>
 800b026:	1af2      	subs	r2, r6, r3
 800b028:	3a01      	subs	r2, #1
 800b02a:	42b3      	cmp	r3, r6
 800b02c:	bfa8      	it	ge
 800b02e:	2200      	movge	r2, #0
 800b030:	1c5d      	adds	r5, r3, #1
 800b032:	18ab      	adds	r3, r5, r2
 800b034:	e7e1      	b.n	800affa <__sccl+0x32>
 800b036:	4610      	mov	r0, r2
 800b038:	e7da      	b.n	800aff0 <__sccl+0x28>

0800b03a <__submore>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	460c      	mov	r4, r1
 800b040:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b046:	4299      	cmp	r1, r3
 800b048:	d11b      	bne.n	800b082 <__submore+0x48>
 800b04a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b04e:	f7fe fa41 	bl	80094d4 <_malloc_r>
 800b052:	b918      	cbnz	r0, 800b05c <__submore+0x22>
 800b054:	f04f 30ff 	mov.w	r0, #4294967295
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b060:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b062:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b066:	6360      	str	r0, [r4, #52]	@ 0x34
 800b068:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b06c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b070:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b074:	7043      	strb	r3, [r0, #1]
 800b076:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b07a:	7003      	strb	r3, [r0, #0]
 800b07c:	6020      	str	r0, [r4, #0]
 800b07e:	2000      	movs	r0, #0
 800b080:	e7ea      	b.n	800b058 <__submore+0x1e>
 800b082:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b084:	0077      	lsls	r7, r6, #1
 800b086:	463a      	mov	r2, r7
 800b088:	f000 f8f6 	bl	800b278 <_realloc_r>
 800b08c:	4605      	mov	r5, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	d0e0      	beq.n	800b054 <__submore+0x1a>
 800b092:	eb00 0806 	add.w	r8, r0, r6
 800b096:	4601      	mov	r1, r0
 800b098:	4632      	mov	r2, r6
 800b09a:	4640      	mov	r0, r8
 800b09c:	f7fd fde7 	bl	8008c6e <memcpy>
 800b0a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b0a4:	f8c4 8000 	str.w	r8, [r4]
 800b0a8:	e7e9      	b.n	800b07e <__submore+0x44>

0800b0aa <__swbuf_r>:
 800b0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ac:	460e      	mov	r6, r1
 800b0ae:	4614      	mov	r4, r2
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	b118      	cbz	r0, 800b0bc <__swbuf_r+0x12>
 800b0b4:	6a03      	ldr	r3, [r0, #32]
 800b0b6:	b90b      	cbnz	r3, 800b0bc <__swbuf_r+0x12>
 800b0b8:	f7fc fdf4 	bl	8007ca4 <__sinit>
 800b0bc:	69a3      	ldr	r3, [r4, #24]
 800b0be:	60a3      	str	r3, [r4, #8]
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	071a      	lsls	r2, r3, #28
 800b0c4:	d501      	bpl.n	800b0ca <__swbuf_r+0x20>
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	b943      	cbnz	r3, 800b0dc <__swbuf_r+0x32>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 f82b 	bl	800b128 <__swsetup_r>
 800b0d2:	b118      	cbz	r0, 800b0dc <__swbuf_r+0x32>
 800b0d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b0d8:	4638      	mov	r0, r7
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	6922      	ldr	r2, [r4, #16]
 800b0e0:	b2f6      	uxtb	r6, r6
 800b0e2:	1a98      	subs	r0, r3, r2
 800b0e4:	6963      	ldr	r3, [r4, #20]
 800b0e6:	4637      	mov	r7, r6
 800b0e8:	4283      	cmp	r3, r0
 800b0ea:	dc05      	bgt.n	800b0f8 <__swbuf_r+0x4e>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f7ff f83c 	bl	800a16c <_fflush_r>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1ed      	bne.n	800b0d4 <__swbuf_r+0x2a>
 800b0f8:	68a3      	ldr	r3, [r4, #8]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	60a3      	str	r3, [r4, #8]
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	701e      	strb	r6, [r3, #0]
 800b106:	6962      	ldr	r2, [r4, #20]
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d004      	beq.n	800b118 <__swbuf_r+0x6e>
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	07db      	lsls	r3, r3, #31
 800b112:	d5e1      	bpl.n	800b0d8 <__swbuf_r+0x2e>
 800b114:	2e0a      	cmp	r6, #10
 800b116:	d1df      	bne.n	800b0d8 <__swbuf_r+0x2e>
 800b118:	4621      	mov	r1, r4
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7ff f826 	bl	800a16c <_fflush_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0d9      	beq.n	800b0d8 <__swbuf_r+0x2e>
 800b124:	e7d6      	b.n	800b0d4 <__swbuf_r+0x2a>
	...

0800b128 <__swsetup_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4b29      	ldr	r3, [pc, #164]	@ (800b1d0 <__swsetup_r+0xa8>)
 800b12c:	4605      	mov	r5, r0
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	460c      	mov	r4, r1
 800b132:	b118      	cbz	r0, 800b13c <__swsetup_r+0x14>
 800b134:	6a03      	ldr	r3, [r0, #32]
 800b136:	b90b      	cbnz	r3, 800b13c <__swsetup_r+0x14>
 800b138:	f7fc fdb4 	bl	8007ca4 <__sinit>
 800b13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b140:	0719      	lsls	r1, r3, #28
 800b142:	d422      	bmi.n	800b18a <__swsetup_r+0x62>
 800b144:	06da      	lsls	r2, r3, #27
 800b146:	d407      	bmi.n	800b158 <__swsetup_r+0x30>
 800b148:	2209      	movs	r2, #9
 800b14a:	602a      	str	r2, [r5, #0]
 800b14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b150:	f04f 30ff 	mov.w	r0, #4294967295
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	e033      	b.n	800b1c0 <__swsetup_r+0x98>
 800b158:	0758      	lsls	r0, r3, #29
 800b15a:	d512      	bpl.n	800b182 <__swsetup_r+0x5a>
 800b15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b15e:	b141      	cbz	r1, 800b172 <__swsetup_r+0x4a>
 800b160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b164:	4299      	cmp	r1, r3
 800b166:	d002      	beq.n	800b16e <__swsetup_r+0x46>
 800b168:	4628      	mov	r0, r5
 800b16a:	f7fd fdbb 	bl	8008ce4 <_free_r>
 800b16e:	2300      	movs	r3, #0
 800b170:	6363      	str	r3, [r4, #52]	@ 0x34
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	2300      	movs	r3, #0
 800b17c:	6063      	str	r3, [r4, #4]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f043 0308 	orr.w	r3, r3, #8
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	b94b      	cbnz	r3, 800b1a2 <__swsetup_r+0x7a>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b198:	d003      	beq.n	800b1a2 <__swsetup_r+0x7a>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4628      	mov	r0, r5
 800b19e:	f000 f8be 	bl	800b31e <__smakebuf_r>
 800b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a6:	f013 0201 	ands.w	r2, r3, #1
 800b1aa:	d00a      	beq.n	800b1c2 <__swsetup_r+0x9a>
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	60a2      	str	r2, [r4, #8]
 800b1b0:	6962      	ldr	r2, [r4, #20]
 800b1b2:	4252      	negs	r2, r2
 800b1b4:	61a2      	str	r2, [r4, #24]
 800b1b6:	6922      	ldr	r2, [r4, #16]
 800b1b8:	b942      	cbnz	r2, 800b1cc <__swsetup_r+0xa4>
 800b1ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1be:	d1c5      	bne.n	800b14c <__swsetup_r+0x24>
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	0799      	lsls	r1, r3, #30
 800b1c4:	bf58      	it	pl
 800b1c6:	6962      	ldrpl	r2, [r4, #20]
 800b1c8:	60a2      	str	r2, [r4, #8]
 800b1ca:	e7f4      	b.n	800b1b6 <__swsetup_r+0x8e>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7f7      	b.n	800b1c0 <__swsetup_r+0x98>
 800b1d0:	2000055c 	.word	0x2000055c

0800b1d4 <_raise_r>:
 800b1d4:	291f      	cmp	r1, #31
 800b1d6:	b538      	push	{r3, r4, r5, lr}
 800b1d8:	4605      	mov	r5, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	d904      	bls.n	800b1e8 <_raise_r+0x14>
 800b1de:	2316      	movs	r3, #22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ea:	b112      	cbz	r2, 800b1f2 <_raise_r+0x1e>
 800b1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f0:	b94b      	cbnz	r3, 800b206 <_raise_r+0x32>
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f830 	bl	800b258 <_getpid_r>
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 b817 	b.w	800b234 <_kill_r>
 800b206:	2b01      	cmp	r3, #1
 800b208:	d00a      	beq.n	800b220 <_raise_r+0x4c>
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	d103      	bne.n	800b216 <_raise_r+0x42>
 800b20e:	2316      	movs	r3, #22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	2001      	movs	r0, #1
 800b214:	e7e7      	b.n	800b1e6 <_raise_r+0x12>
 800b216:	2100      	movs	r1, #0
 800b218:	4620      	mov	r0, r4
 800b21a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b21e:	4798      	blx	r3
 800b220:	2000      	movs	r0, #0
 800b222:	e7e0      	b.n	800b1e6 <_raise_r+0x12>

0800b224 <raise>:
 800b224:	4b02      	ldr	r3, [pc, #8]	@ (800b230 <raise+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bfd3 	b.w	800b1d4 <_raise_r>
 800b22e:	bf00      	nop
 800b230:	2000055c 	.word	0x2000055c

0800b234 <_kill_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	2300      	movs	r3, #0
 800b238:	4d06      	ldr	r5, [pc, #24]	@ (800b254 <_kill_r+0x20>)
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7fb fd2c 	bl	8006c9e <_kill>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_kill_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_kill_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	200009c0 	.word	0x200009c0

0800b258 <_getpid_r>:
 800b258:	f7fb bd1a 	b.w	8006c90 <_getpid>

0800b25c <memchr>:
 800b25c:	4603      	mov	r3, r0
 800b25e:	b510      	push	{r4, lr}
 800b260:	b2c9      	uxtb	r1, r1
 800b262:	4402      	add	r2, r0
 800b264:	4293      	cmp	r3, r2
 800b266:	4618      	mov	r0, r3
 800b268:	d101      	bne.n	800b26e <memchr+0x12>
 800b26a:	2000      	movs	r0, #0
 800b26c:	e003      	b.n	800b276 <memchr+0x1a>
 800b26e:	7804      	ldrb	r4, [r0, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	428c      	cmp	r4, r1
 800b274:	d1f6      	bne.n	800b264 <memchr+0x8>
 800b276:	bd10      	pop	{r4, pc}

0800b278 <_realloc_r>:
 800b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27c:	4680      	mov	r8, r0
 800b27e:	4615      	mov	r5, r2
 800b280:	460c      	mov	r4, r1
 800b282:	b921      	cbnz	r1, 800b28e <_realloc_r+0x16>
 800b284:	4611      	mov	r1, r2
 800b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28a:	f7fe b923 	b.w	80094d4 <_malloc_r>
 800b28e:	b92a      	cbnz	r2, 800b29c <_realloc_r+0x24>
 800b290:	f7fd fd28 	bl	8008ce4 <_free_r>
 800b294:	2400      	movs	r4, #0
 800b296:	4620      	mov	r0, r4
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	f000 f89e 	bl	800b3dc <_malloc_usable_size_r>
 800b2a0:	4285      	cmp	r5, r0
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	d802      	bhi.n	800b2ac <_realloc_r+0x34>
 800b2a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2aa:	d8f4      	bhi.n	800b296 <_realloc_r+0x1e>
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f7fe f910 	bl	80094d4 <_malloc_r>
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d0ec      	beq.n	800b294 <_realloc_r+0x1c>
 800b2ba:	42b5      	cmp	r5, r6
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4621      	mov	r1, r4
 800b2c0:	bf28      	it	cs
 800b2c2:	4632      	movcs	r2, r6
 800b2c4:	f7fd fcd3 	bl	8008c6e <memcpy>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	f7fd fd0a 	bl	8008ce4 <_free_r>
 800b2d0:	463c      	mov	r4, r7
 800b2d2:	e7e0      	b.n	800b296 <_realloc_r+0x1e>

0800b2d4 <__swhatbuf_r>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2dc:	4615      	mov	r5, r2
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	461e      	mov	r6, r3
 800b2e2:	b096      	sub	sp, #88	@ 0x58
 800b2e4:	da0c      	bge.n	800b300 <__swhatbuf_r+0x2c>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2ee:	bf14      	ite	ne
 800b2f0:	2340      	movne	r3, #64	@ 0x40
 800b2f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	6031      	str	r1, [r6, #0]
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	b016      	add	sp, #88	@ 0x58
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	466a      	mov	r2, sp
 800b302:	f000 f849 	bl	800b398 <_fstat_r>
 800b306:	2800      	cmp	r0, #0
 800b308:	dbed      	blt.n	800b2e6 <__swhatbuf_r+0x12>
 800b30a:	9901      	ldr	r1, [sp, #4]
 800b30c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b310:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b314:	4259      	negs	r1, r3
 800b316:	4159      	adcs	r1, r3
 800b318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b31c:	e7eb      	b.n	800b2f6 <__swhatbuf_r+0x22>

0800b31e <__smakebuf_r>:
 800b31e:	898b      	ldrh	r3, [r1, #12]
 800b320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b322:	079d      	lsls	r5, r3, #30
 800b324:	4606      	mov	r6, r0
 800b326:	460c      	mov	r4, r1
 800b328:	d507      	bpl.n	800b33a <__smakebuf_r+0x1c>
 800b32a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	2301      	movs	r3, #1
 800b334:	6163      	str	r3, [r4, #20]
 800b336:	b003      	add	sp, #12
 800b338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33a:	466a      	mov	r2, sp
 800b33c:	ab01      	add	r3, sp, #4
 800b33e:	f7ff ffc9 	bl	800b2d4 <__swhatbuf_r>
 800b342:	9f00      	ldr	r7, [sp, #0]
 800b344:	4605      	mov	r5, r0
 800b346:	4639      	mov	r1, r7
 800b348:	4630      	mov	r0, r6
 800b34a:	f7fe f8c3 	bl	80094d4 <_malloc_r>
 800b34e:	b948      	cbnz	r0, 800b364 <__smakebuf_r+0x46>
 800b350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b354:	059a      	lsls	r2, r3, #22
 800b356:	d4ee      	bmi.n	800b336 <__smakebuf_r+0x18>
 800b358:	f023 0303 	bic.w	r3, r3, #3
 800b35c:	f043 0302 	orr.w	r3, r3, #2
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	e7e2      	b.n	800b32a <__smakebuf_r+0xc>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	6020      	str	r0, [r4, #0]
 800b374:	b15b      	cbz	r3, 800b38e <__smakebuf_r+0x70>
 800b376:	4630      	mov	r0, r6
 800b378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b37c:	f000 f81e 	bl	800b3bc <_isatty_r>
 800b380:	b128      	cbz	r0, 800b38e <__smakebuf_r+0x70>
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	f043 0301 	orr.w	r3, r3, #1
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	431d      	orrs	r5, r3
 800b392:	81a5      	strh	r5, [r4, #12]
 800b394:	e7cf      	b.n	800b336 <__smakebuf_r+0x18>
	...

0800b398 <_fstat_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	2300      	movs	r3, #0
 800b39c:	4d06      	ldr	r5, [pc, #24]	@ (800b3b8 <_fstat_r+0x20>)
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	602b      	str	r3, [r5, #0]
 800b3a6:	f7fb fcd9 	bl	8006d5c <_fstat>
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	d102      	bne.n	800b3b4 <_fstat_r+0x1c>
 800b3ae:	682b      	ldr	r3, [r5, #0]
 800b3b0:	b103      	cbz	r3, 800b3b4 <_fstat_r+0x1c>
 800b3b2:	6023      	str	r3, [r4, #0]
 800b3b4:	bd38      	pop	{r3, r4, r5, pc}
 800b3b6:	bf00      	nop
 800b3b8:	200009c0 	.word	0x200009c0

0800b3bc <_isatty_r>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4d05      	ldr	r5, [pc, #20]	@ (800b3d8 <_isatty_r+0x1c>)
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	602b      	str	r3, [r5, #0]
 800b3c8:	f7fb fcd7 	bl	8006d7a <_isatty>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_isatty_r+0x1a>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_isatty_r+0x1a>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	200009c0 	.word	0x200009c0

0800b3dc <_malloc_usable_size_r>:
 800b3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e0:	1f18      	subs	r0, r3, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bfbc      	itt	lt
 800b3e6:	580b      	ldrlt	r3, [r1, r0]
 800b3e8:	18c0      	addlt	r0, r0, r3
 800b3ea:	4770      	bx	lr

0800b3ec <pow>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	461d      	mov	r5, r3
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	f000 f8ae 	bl	800b558 <__ieee754_pow>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	462b      	mov	r3, r5
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f5 fb1a 	bl	8000a40 <__aeabi_dcmpun>
 800b40c:	bbc8      	cbnz	r0, 800b482 <pow+0x96>
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 fae1 	bl	80009dc <__aeabi_dcmpeq>
 800b41a:	b1b8      	cbz	r0, 800b44c <pow+0x60>
 800b41c:	2200      	movs	r2, #0
 800b41e:	2300      	movs	r3, #0
 800b420:	4620      	mov	r0, r4
 800b422:	4629      	mov	r1, r5
 800b424:	f7f5 fada 	bl	80009dc <__aeabi_dcmpeq>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d141      	bne.n	800b4b0 <pow+0xc4>
 800b42c:	4620      	mov	r0, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	f000 f844 	bl	800b4bc <finite>
 800b434:	b328      	cbz	r0, 800b482 <pow+0x96>
 800b436:	2200      	movs	r2, #0
 800b438:	2300      	movs	r3, #0
 800b43a:	4620      	mov	r0, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7f5 fad7 	bl	80009f0 <__aeabi_dcmplt>
 800b442:	b1f0      	cbz	r0, 800b482 <pow+0x96>
 800b444:	f7fd fbdc 	bl	8008c00 <__errno>
 800b448:	2322      	movs	r3, #34	@ 0x22
 800b44a:	e019      	b.n	800b480 <pow+0x94>
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f000 f834 	bl	800b4bc <finite>
 800b454:	b9c8      	cbnz	r0, 800b48a <pow+0x9e>
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f000 f82f 	bl	800b4bc <finite>
 800b45e:	b1a0      	cbz	r0, 800b48a <pow+0x9e>
 800b460:	4620      	mov	r0, r4
 800b462:	4629      	mov	r1, r5
 800b464:	f000 f82a 	bl	800b4bc <finite>
 800b468:	b178      	cbz	r0, 800b48a <pow+0x9e>
 800b46a:	4632      	mov	r2, r6
 800b46c:	463b      	mov	r3, r7
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 fae5 	bl	8000a40 <__aeabi_dcmpun>
 800b476:	2800      	cmp	r0, #0
 800b478:	d0e4      	beq.n	800b444 <pow+0x58>
 800b47a:	f7fd fbc1 	bl	8008c00 <__errno>
 800b47e:	2321      	movs	r3, #33	@ 0x21
 800b480:	6003      	str	r3, [r0, #0]
 800b482:	4630      	mov	r0, r6
 800b484:	4639      	mov	r1, r7
 800b486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48a:	2200      	movs	r2, #0
 800b48c:	2300      	movs	r3, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 faa3 	bl	80009dc <__aeabi_dcmpeq>
 800b496:	2800      	cmp	r0, #0
 800b498:	d0f3      	beq.n	800b482 <pow+0x96>
 800b49a:	4640      	mov	r0, r8
 800b49c:	4649      	mov	r1, r9
 800b49e:	f000 f80d 	bl	800b4bc <finite>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0ed      	beq.n	800b482 <pow+0x96>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f000 f807 	bl	800b4bc <finite>
 800b4ae:	e7c8      	b.n	800b442 <pow+0x56>
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	4f01      	ldr	r7, [pc, #4]	@ (800b4b8 <pow+0xcc>)
 800b4b4:	e7e5      	b.n	800b482 <pow+0x96>
 800b4b6:	bf00      	nop
 800b4b8:	3ff00000 	.word	0x3ff00000

0800b4bc <finite>:
 800b4bc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b4c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b4c4:	0fc0      	lsrs	r0, r0, #31
 800b4c6:	4770      	bx	lr

0800b4c8 <round>:
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b4ce:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800b4d2:	2a13      	cmp	r2, #19
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	460b      	mov	r3, r1
 800b4da:	dc1a      	bgt.n	800b512 <round+0x4a>
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	da0b      	bge.n	800b4f8 <round+0x30>
 800b4e0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b4e4:	3201      	adds	r2, #1
 800b4e6:	bf04      	itt	eq
 800b4e8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4ec:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	461d      	mov	r5, r3
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	e016      	b.n	800b526 <round+0x5e>
 800b4f8:	4815      	ldr	r0, [pc, #84]	@ (800b550 <round+0x88>)
 800b4fa:	4110      	asrs	r0, r2
 800b4fc:	4001      	ands	r1, r0
 800b4fe:	4321      	orrs	r1, r4
 800b500:	d011      	beq.n	800b526 <round+0x5e>
 800b502:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b506:	fa41 f202 	asr.w	r2, r1, r2
 800b50a:	4413      	add	r3, r2
 800b50c:	ea23 0300 	bic.w	r3, r3, r0
 800b510:	e7ee      	b.n	800b4f0 <round+0x28>
 800b512:	2a33      	cmp	r2, #51	@ 0x33
 800b514:	dd0a      	ble.n	800b52c <round+0x64>
 800b516:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b51a:	d104      	bne.n	800b526 <round+0x5e>
 800b51c:	4602      	mov	r2, r0
 800b51e:	f7f4 fe3f 	bl	80001a0 <__adddf3>
 800b522:	4604      	mov	r4, r0
 800b524:	460d      	mov	r5, r1
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b534:	40f8      	lsrs	r0, r7
 800b536:	4220      	tst	r0, r4
 800b538:	d0f5      	beq.n	800b526 <round+0x5e>
 800b53a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b53e:	2201      	movs	r2, #1
 800b540:	408a      	lsls	r2, r1
 800b542:	1912      	adds	r2, r2, r4
 800b544:	bf28      	it	cs
 800b546:	3301      	addcs	r3, #1
 800b548:	ea22 0200 	bic.w	r2, r2, r0
 800b54c:	e7d1      	b.n	800b4f2 <round+0x2a>
 800b54e:	bf00      	nop
 800b550:	000fffff 	.word	0x000fffff
 800b554:	00000000 	.word	0x00000000

0800b558 <__ieee754_pow>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	b091      	sub	sp, #68	@ 0x44
 800b55e:	e9cd 2300 	strd	r2, r3, [sp]
 800b562:	468b      	mov	fp, r1
 800b564:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b568:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b56c:	4682      	mov	sl, r0
 800b56e:	ea57 0001 	orrs.w	r0, r7, r1
 800b572:	d112      	bne.n	800b59a <__ieee754_pow+0x42>
 800b574:	4653      	mov	r3, sl
 800b576:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b57a:	18db      	adds	r3, r3, r3
 800b57c:	4152      	adcs	r2, r2
 800b57e:	4298      	cmp	r0, r3
 800b580:	4b91      	ldr	r3, [pc, #580]	@ (800b7c8 <__ieee754_pow+0x270>)
 800b582:	4193      	sbcs	r3, r2
 800b584:	f080 84ce 	bcs.w	800bf24 <__ieee754_pow+0x9cc>
 800b588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f4 fe06 	bl	80001a0 <__adddf3>
 800b594:	b011      	add	sp, #68	@ 0x44
 800b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59a:	4b8c      	ldr	r3, [pc, #560]	@ (800b7cc <__ieee754_pow+0x274>)
 800b59c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800b5a0:	429e      	cmp	r6, r3
 800b5a2:	465d      	mov	r5, fp
 800b5a4:	46d1      	mov	r9, sl
 800b5a6:	d807      	bhi.n	800b5b8 <__ieee754_pow+0x60>
 800b5a8:	d102      	bne.n	800b5b0 <__ieee754_pow+0x58>
 800b5aa:	f1ba 0f00 	cmp.w	sl, #0
 800b5ae:	d1eb      	bne.n	800b588 <__ieee754_pow+0x30>
 800b5b0:	429f      	cmp	r7, r3
 800b5b2:	d801      	bhi.n	800b5b8 <__ieee754_pow+0x60>
 800b5b4:	d10f      	bne.n	800b5d6 <__ieee754_pow+0x7e>
 800b5b6:	b171      	cbz	r1, 800b5d6 <__ieee754_pow+0x7e>
 800b5b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b5bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b5c0:	ea55 0509 	orrs.w	r5, r5, r9
 800b5c4:	d1e0      	bne.n	800b588 <__ieee754_pow+0x30>
 800b5c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5ca:	18db      	adds	r3, r3, r3
 800b5cc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b5d0:	4152      	adcs	r2, r2
 800b5d2:	429d      	cmp	r5, r3
 800b5d4:	e7d4      	b.n	800b580 <__ieee754_pow+0x28>
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	4633      	mov	r3, r6
 800b5da:	da39      	bge.n	800b650 <__ieee754_pow+0xf8>
 800b5dc:	4a7c      	ldr	r2, [pc, #496]	@ (800b7d0 <__ieee754_pow+0x278>)
 800b5de:	4297      	cmp	r7, r2
 800b5e0:	d84e      	bhi.n	800b680 <__ieee754_pow+0x128>
 800b5e2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b5e6:	4297      	cmp	r7, r2
 800b5e8:	f240 84ab 	bls.w	800bf42 <__ieee754_pow+0x9ea>
 800b5ec:	153a      	asrs	r2, r7, #20
 800b5ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b5f2:	2a14      	cmp	r2, #20
 800b5f4:	dd0f      	ble.n	800b616 <__ieee754_pow+0xbe>
 800b5f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b5fa:	fa21 f402 	lsr.w	r4, r1, r2
 800b5fe:	fa04 f202 	lsl.w	r2, r4, r2
 800b602:	428a      	cmp	r2, r1
 800b604:	f040 849d 	bne.w	800bf42 <__ieee754_pow+0x9ea>
 800b608:	f004 0401 	and.w	r4, r4, #1
 800b60c:	f1c4 0402 	rsb	r4, r4, #2
 800b610:	2900      	cmp	r1, #0
 800b612:	d15a      	bne.n	800b6ca <__ieee754_pow+0x172>
 800b614:	e00e      	b.n	800b634 <__ieee754_pow+0xdc>
 800b616:	2900      	cmp	r1, #0
 800b618:	d156      	bne.n	800b6c8 <__ieee754_pow+0x170>
 800b61a:	f1c2 0214 	rsb	r2, r2, #20
 800b61e:	fa47 f402 	asr.w	r4, r7, r2
 800b622:	fa04 f202 	lsl.w	r2, r4, r2
 800b626:	42ba      	cmp	r2, r7
 800b628:	f040 8488 	bne.w	800bf3c <__ieee754_pow+0x9e4>
 800b62c:	f004 0401 	and.w	r4, r4, #1
 800b630:	f1c4 0402 	rsb	r4, r4, #2
 800b634:	4a67      	ldr	r2, [pc, #412]	@ (800b7d4 <__ieee754_pow+0x27c>)
 800b636:	4297      	cmp	r7, r2
 800b638:	d130      	bne.n	800b69c <__ieee754_pow+0x144>
 800b63a:	f1b8 0f00 	cmp.w	r8, #0
 800b63e:	f280 8479 	bge.w	800bf34 <__ieee754_pow+0x9dc>
 800b642:	4652      	mov	r2, sl
 800b644:	465b      	mov	r3, fp
 800b646:	2000      	movs	r0, #0
 800b648:	4962      	ldr	r1, [pc, #392]	@ (800b7d4 <__ieee754_pow+0x27c>)
 800b64a:	f7f5 f889 	bl	8000760 <__aeabi_ddiv>
 800b64e:	e7a1      	b.n	800b594 <__ieee754_pow+0x3c>
 800b650:	2400      	movs	r4, #0
 800b652:	2900      	cmp	r1, #0
 800b654:	d139      	bne.n	800b6ca <__ieee754_pow+0x172>
 800b656:	4a5d      	ldr	r2, [pc, #372]	@ (800b7cc <__ieee754_pow+0x274>)
 800b658:	4297      	cmp	r7, r2
 800b65a:	d1eb      	bne.n	800b634 <__ieee754_pow+0xdc>
 800b65c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b660:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b664:	ea53 0309 	orrs.w	r3, r3, r9
 800b668:	f000 845c 	beq.w	800bf24 <__ieee754_pow+0x9cc>
 800b66c:	4b5a      	ldr	r3, [pc, #360]	@ (800b7d8 <__ieee754_pow+0x280>)
 800b66e:	429e      	cmp	r6, r3
 800b670:	d908      	bls.n	800b684 <__ieee754_pow+0x12c>
 800b672:	f1b8 0f00 	cmp.w	r8, #0
 800b676:	f2c0 8459 	blt.w	800bf2c <__ieee754_pow+0x9d4>
 800b67a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b67e:	e789      	b.n	800b594 <__ieee754_pow+0x3c>
 800b680:	2402      	movs	r4, #2
 800b682:	e7e6      	b.n	800b652 <__ieee754_pow+0xfa>
 800b684:	f1b8 0f00 	cmp.w	r8, #0
 800b688:	f04f 0000 	mov.w	r0, #0
 800b68c:	f04f 0100 	mov.w	r1, #0
 800b690:	da80      	bge.n	800b594 <__ieee754_pow+0x3c>
 800b692:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b696:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b69a:	e77b      	b.n	800b594 <__ieee754_pow+0x3c>
 800b69c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b6a0:	d106      	bne.n	800b6b0 <__ieee754_pow+0x158>
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	465b      	mov	r3, fp
 800b6a6:	4650      	mov	r0, sl
 800b6a8:	4659      	mov	r1, fp
 800b6aa:	f7f4 ff2f 	bl	800050c <__aeabi_dmul>
 800b6ae:	e771      	b.n	800b594 <__ieee754_pow+0x3c>
 800b6b0:	4a4a      	ldr	r2, [pc, #296]	@ (800b7dc <__ieee754_pow+0x284>)
 800b6b2:	4590      	cmp	r8, r2
 800b6b4:	d109      	bne.n	800b6ca <__ieee754_pow+0x172>
 800b6b6:	2d00      	cmp	r5, #0
 800b6b8:	db07      	blt.n	800b6ca <__ieee754_pow+0x172>
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	4659      	mov	r1, fp
 800b6be:	b011      	add	sp, #68	@ 0x44
 800b6c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	f000 bd12 	b.w	800c0ec <__ieee754_sqrt>
 800b6c8:	2400      	movs	r4, #0
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	f000 fc6a 	bl	800bfa8 <fabs>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	f1b9 0f00 	cmp.w	r9, #0
 800b6da:	d127      	bne.n	800b72c <__ieee754_pow+0x1d4>
 800b6dc:	4a3d      	ldr	r2, [pc, #244]	@ (800b7d4 <__ieee754_pow+0x27c>)
 800b6de:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b6e2:	4594      	cmp	ip, r2
 800b6e4:	d000      	beq.n	800b6e8 <__ieee754_pow+0x190>
 800b6e6:	bb0e      	cbnz	r6, 800b72c <__ieee754_pow+0x1d4>
 800b6e8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ec:	da05      	bge.n	800b6fa <__ieee754_pow+0x1a2>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	4937      	ldr	r1, [pc, #220]	@ (800b7d4 <__ieee754_pow+0x27c>)
 800b6f6:	f7f5 f833 	bl	8000760 <__aeabi_ddiv>
 800b6fa:	2d00      	cmp	r5, #0
 800b6fc:	f6bf af4a 	bge.w	800b594 <__ieee754_pow+0x3c>
 800b700:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b704:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b708:	4326      	orrs	r6, r4
 800b70a:	d108      	bne.n	800b71e <__ieee754_pow+0x1c6>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4610      	mov	r0, r2
 800b712:	4619      	mov	r1, r3
 800b714:	f7f4 fd42 	bl	800019c <__aeabi_dsub>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	e795      	b.n	800b64a <__ieee754_pow+0xf2>
 800b71e:	2c01      	cmp	r4, #1
 800b720:	f47f af38 	bne.w	800b594 <__ieee754_pow+0x3c>
 800b724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b728:	4619      	mov	r1, r3
 800b72a:	e733      	b.n	800b594 <__ieee754_pow+0x3c>
 800b72c:	0fea      	lsrs	r2, r5, #31
 800b72e:	3a01      	subs	r2, #1
 800b730:	ea52 0c04 	orrs.w	ip, r2, r4
 800b734:	d102      	bne.n	800b73c <__ieee754_pow+0x1e4>
 800b736:	4652      	mov	r2, sl
 800b738:	465b      	mov	r3, fp
 800b73a:	e7e9      	b.n	800b710 <__ieee754_pow+0x1b8>
 800b73c:	f04f 0900 	mov.w	r9, #0
 800b740:	3c01      	subs	r4, #1
 800b742:	4314      	orrs	r4, r2
 800b744:	bf14      	ite	ne
 800b746:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b7d4 <__ieee754_pow+0x27c>
 800b74a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b7e0 <__ieee754_pow+0x288>
 800b74e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b752:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b756:	f240 8107 	bls.w	800b968 <__ieee754_pow+0x410>
 800b75a:	4b22      	ldr	r3, [pc, #136]	@ (800b7e4 <__ieee754_pow+0x28c>)
 800b75c:	429f      	cmp	r7, r3
 800b75e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d8 <__ieee754_pow+0x280>)
 800b760:	d913      	bls.n	800b78a <__ieee754_pow+0x232>
 800b762:	429e      	cmp	r6, r3
 800b764:	d808      	bhi.n	800b778 <__ieee754_pow+0x220>
 800b766:	f1b8 0f00 	cmp.w	r8, #0
 800b76a:	da08      	bge.n	800b77e <__ieee754_pow+0x226>
 800b76c:	2000      	movs	r0, #0
 800b76e:	b011      	add	sp, #68	@ 0x44
 800b770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	f000 bcb4 	b.w	800c0e0 <__math_oflow>
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	dcf6      	bgt.n	800b76c <__ieee754_pow+0x214>
 800b77e:	2000      	movs	r0, #0
 800b780:	b011      	add	sp, #68	@ 0x44
 800b782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b786:	f000 bca6 	b.w	800c0d6 <__math_uflow>
 800b78a:	429e      	cmp	r6, r3
 800b78c:	d20c      	bcs.n	800b7a8 <__ieee754_pow+0x250>
 800b78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b792:	2200      	movs	r2, #0
 800b794:	2300      	movs	r3, #0
 800b796:	f7f5 f92b 	bl	80009f0 <__aeabi_dcmplt>
 800b79a:	3800      	subs	r0, #0
 800b79c:	bf18      	it	ne
 800b79e:	2001      	movne	r0, #1
 800b7a0:	f1b8 0f00 	cmp.w	r8, #0
 800b7a4:	daec      	bge.n	800b780 <__ieee754_pow+0x228>
 800b7a6:	e7e2      	b.n	800b76e <__ieee754_pow+0x216>
 800b7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d4 <__ieee754_pow+0x27c>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	429e      	cmp	r6, r3
 800b7ae:	d91b      	bls.n	800b7e8 <__ieee754_pow+0x290>
 800b7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f7f5 f91b 	bl	80009f0 <__aeabi_dcmplt>
 800b7ba:	3800      	subs	r0, #0
 800b7bc:	bf18      	it	ne
 800b7be:	2001      	movne	r0, #1
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	dcd3      	bgt.n	800b76e <__ieee754_pow+0x216>
 800b7c6:	e7db      	b.n	800b780 <__ieee754_pow+0x228>
 800b7c8:	fff00000 	.word	0xfff00000
 800b7cc:	7ff00000 	.word	0x7ff00000
 800b7d0:	433fffff 	.word	0x433fffff
 800b7d4:	3ff00000 	.word	0x3ff00000
 800b7d8:	3fefffff 	.word	0x3fefffff
 800b7dc:	3fe00000 	.word	0x3fe00000
 800b7e0:	bff00000 	.word	0xbff00000
 800b7e4:	43f00000 	.word	0x43f00000
 800b7e8:	4b5b      	ldr	r3, [pc, #364]	@ (800b958 <__ieee754_pow+0x400>)
 800b7ea:	f7f4 fcd7 	bl	800019c <__aeabi_dsub>
 800b7ee:	a352      	add	r3, pc, #328	@ (adr r3, 800b938 <__ieee754_pow+0x3e0>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	f7f4 fe88 	bl	800050c <__aeabi_dmul>
 800b7fc:	a350      	add	r3, pc, #320	@ (adr r3, 800b940 <__ieee754_pow+0x3e8>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4606      	mov	r6, r0
 800b804:	460f      	mov	r7, r1
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fe7f 	bl	800050c <__aeabi_dmul>
 800b80e:	2200      	movs	r2, #0
 800b810:	4682      	mov	sl, r0
 800b812:	468b      	mov	fp, r1
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	4b50      	ldr	r3, [pc, #320]	@ (800b95c <__ieee754_pow+0x404>)
 800b81a:	f7f4 fe77 	bl	800050c <__aeabi_dmul>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	a149      	add	r1, pc, #292	@ (adr r1, 800b948 <__ieee754_pow+0x3f0>)
 800b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b828:	f7f4 fcb8 	bl	800019c <__aeabi_dsub>
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 fe6c 	bl	800050c <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	2000      	movs	r0, #0
 800b83a:	4949      	ldr	r1, [pc, #292]	@ (800b960 <__ieee754_pow+0x408>)
 800b83c:	f7f4 fcae 	bl	800019c <__aeabi_dsub>
 800b840:	4622      	mov	r2, r4
 800b842:	4680      	mov	r8, r0
 800b844:	4689      	mov	r9, r1
 800b846:	462b      	mov	r3, r5
 800b848:	4620      	mov	r0, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	f7f4 fe5e 	bl	800050c <__aeabi_dmul>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4640      	mov	r0, r8
 800b856:	4649      	mov	r1, r9
 800b858:	f7f4 fe58 	bl	800050c <__aeabi_dmul>
 800b85c:	a33c      	add	r3, pc, #240	@ (adr r3, 800b950 <__ieee754_pow+0x3f8>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f7f4 fe53 	bl	800050c <__aeabi_dmul>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4650      	mov	r0, sl
 800b86c:	4659      	mov	r1, fp
 800b86e:	f7f4 fc95 	bl	800019c <__aeabi_dsub>
 800b872:	2400      	movs	r4, #0
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4680      	mov	r8, r0
 800b87a:	4689      	mov	r9, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fc8e 	bl	80001a0 <__adddf3>
 800b884:	4632      	mov	r2, r6
 800b886:	463b      	mov	r3, r7
 800b888:	4620      	mov	r0, r4
 800b88a:	460d      	mov	r5, r1
 800b88c:	f7f4 fc86 	bl	800019c <__aeabi_dsub>
 800b890:	4602      	mov	r2, r0
 800b892:	460b      	mov	r3, r1
 800b894:	4640      	mov	r0, r8
 800b896:	4649      	mov	r1, r9
 800b898:	f7f4 fc80 	bl	800019c <__aeabi_dsub>
 800b89c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8b4:	4652      	mov	r2, sl
 800b8b6:	465b      	mov	r3, fp
 800b8b8:	f7f4 fc70 	bl	800019c <__aeabi_dsub>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	462b      	mov	r3, r5
 800b8c0:	f7f4 fe24 	bl	800050c <__aeabi_dmul>
 800b8c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	4689      	mov	r9, r1
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	f7f4 fe1c 	bl	800050c <__aeabi_dmul>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f7f4 fc60 	bl	80001a0 <__adddf3>
 800b8e0:	4652      	mov	r2, sl
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fe0e 	bl	800050c <__aeabi_dmul>
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	4689      	mov	r9, r1
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	f7f4 fc50 	bl	80001a0 <__adddf3>
 800b900:	4b18      	ldr	r3, [pc, #96]	@ (800b964 <__ieee754_pow+0x40c>)
 800b902:	4604      	mov	r4, r0
 800b904:	4299      	cmp	r1, r3
 800b906:	460d      	mov	r5, r1
 800b908:	468a      	mov	sl, r1
 800b90a:	468b      	mov	fp, r1
 800b90c:	f340 82e0 	ble.w	800bed0 <__ieee754_pow+0x978>
 800b910:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b914:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b918:	4303      	orrs	r3, r0
 800b91a:	f000 81df 	beq.w	800bcdc <__ieee754_pow+0x784>
 800b91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	f7f5 f863 	bl	80009f0 <__aeabi_dcmplt>
 800b92a:	3800      	subs	r0, #0
 800b92c:	bf18      	it	ne
 800b92e:	2001      	movne	r0, #1
 800b930:	e71d      	b.n	800b76e <__ieee754_pow+0x216>
 800b932:	bf00      	nop
 800b934:	f3af 8000 	nop.w
 800b938:	60000000 	.word	0x60000000
 800b93c:	3ff71547 	.word	0x3ff71547
 800b940:	f85ddf44 	.word	0xf85ddf44
 800b944:	3e54ae0b 	.word	0x3e54ae0b
 800b948:	55555555 	.word	0x55555555
 800b94c:	3fd55555 	.word	0x3fd55555
 800b950:	652b82fe 	.word	0x652b82fe
 800b954:	3ff71547 	.word	0x3ff71547
 800b958:	3ff00000 	.word	0x3ff00000
 800b95c:	3fd00000 	.word	0x3fd00000
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	408fffff 	.word	0x408fffff
 800b968:	4ad3      	ldr	r2, [pc, #844]	@ (800bcb8 <__ieee754_pow+0x760>)
 800b96a:	402a      	ands	r2, r5
 800b96c:	2a00      	cmp	r2, #0
 800b96e:	f040 817a 	bne.w	800bc66 <__ieee754_pow+0x70e>
 800b972:	4bd2      	ldr	r3, [pc, #840]	@ (800bcbc <__ieee754_pow+0x764>)
 800b974:	2200      	movs	r2, #0
 800b976:	f7f4 fdc9 	bl	800050c <__aeabi_dmul>
 800b97a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b97e:	460b      	mov	r3, r1
 800b980:	151a      	asrs	r2, r3, #20
 800b982:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b986:	4422      	add	r2, r4
 800b988:	920a      	str	r2, [sp, #40]	@ 0x28
 800b98a:	4acd      	ldr	r2, [pc, #820]	@ (800bcc0 <__ieee754_pow+0x768>)
 800b98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b990:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b994:	4293      	cmp	r3, r2
 800b996:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b99a:	dd08      	ble.n	800b9ae <__ieee754_pow+0x456>
 800b99c:	4ac9      	ldr	r2, [pc, #804]	@ (800bcc4 <__ieee754_pow+0x76c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	f340 8163 	ble.w	800bc6a <__ieee754_pow+0x712>
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	00f3      	lsls	r3, r6, #3
 800b9b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b4:	4bc4      	ldr	r3, [pc, #784]	@ (800bcc8 <__ieee754_pow+0x770>)
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b9c6:	4623      	mov	r3, r4
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	f7f4 fbe7 	bl	800019c <__aeabi_dsub>
 800b9ce:	4652      	mov	r2, sl
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b9d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9da:	f7f4 fbe1 	bl	80001a0 <__adddf3>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	49b9      	ldr	r1, [pc, #740]	@ (800bccc <__ieee754_pow+0x774>)
 800b9e6:	f7f4 febb 	bl	8000760 <__aeabi_ddiv>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9f6:	f7f4 fd89 	bl	800050c <__aeabi_dmul>
 800b9fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ba02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba06:	2300      	movs	r3, #0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	46ab      	mov	fp, r5
 800ba0c:	106d      	asrs	r5, r5, #1
 800ba0e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ba18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba1c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ba20:	4640      	mov	r0, r8
 800ba22:	4649      	mov	r1, r9
 800ba24:	4614      	mov	r4, r2
 800ba26:	461d      	mov	r5, r3
 800ba28:	f7f4 fd70 	bl	800050c <__aeabi_dmul>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba34:	f7f4 fbb2 	bl	800019c <__aeabi_dsub>
 800ba38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	460f      	mov	r7, r1
 800ba40:	4620      	mov	r0, r4
 800ba42:	4629      	mov	r1, r5
 800ba44:	f7f4 fbaa 	bl	800019c <__aeabi_dsub>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	4659      	mov	r1, fp
 800ba50:	f7f4 fba4 	bl	800019c <__aeabi_dsub>
 800ba54:	4642      	mov	r2, r8
 800ba56:	464b      	mov	r3, r9
 800ba58:	f7f4 fd58 	bl	800050c <__aeabi_dmul>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4630      	mov	r0, r6
 800ba62:	4639      	mov	r1, r7
 800ba64:	f7f4 fb9a 	bl	800019c <__aeabi_dsub>
 800ba68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba6c:	f7f4 fd4e 	bl	800050c <__aeabi_dmul>
 800ba70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	f7f4 fd46 	bl	800050c <__aeabi_dmul>
 800ba80:	a37b      	add	r3, pc, #492	@ (adr r3, 800bc70 <__ieee754_pow+0x718>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	4604      	mov	r4, r0
 800ba88:	460d      	mov	r5, r1
 800ba8a:	f7f4 fd3f 	bl	800050c <__aeabi_dmul>
 800ba8e:	a37a      	add	r3, pc, #488	@ (adr r3, 800bc78 <__ieee754_pow+0x720>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fb84 	bl	80001a0 <__adddf3>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fd36 	bl	800050c <__aeabi_dmul>
 800baa0:	a377      	add	r3, pc, #476	@ (adr r3, 800bc80 <__ieee754_pow+0x728>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fb7b 	bl	80001a0 <__adddf3>
 800baaa:	4622      	mov	r2, r4
 800baac:	462b      	mov	r3, r5
 800baae:	f7f4 fd2d 	bl	800050c <__aeabi_dmul>
 800bab2:	a375      	add	r3, pc, #468	@ (adr r3, 800bc88 <__ieee754_pow+0x730>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fb72 	bl	80001a0 <__adddf3>
 800babc:	4622      	mov	r2, r4
 800babe:	462b      	mov	r3, r5
 800bac0:	f7f4 fd24 	bl	800050c <__aeabi_dmul>
 800bac4:	a372      	add	r3, pc, #456	@ (adr r3, 800bc90 <__ieee754_pow+0x738>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fb69 	bl	80001a0 <__adddf3>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	f7f4 fd1b 	bl	800050c <__aeabi_dmul>
 800bad6:	a370      	add	r3, pc, #448	@ (adr r3, 800bc98 <__ieee754_pow+0x740>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7f4 fb60 	bl	80001a0 <__adddf3>
 800bae0:	4622      	mov	r2, r4
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	462b      	mov	r3, r5
 800bae8:	4620      	mov	r0, r4
 800baea:	4629      	mov	r1, r5
 800baec:	f7f4 fd0e 	bl	800050c <__aeabi_dmul>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f4 fd08 	bl	800050c <__aeabi_dmul>
 800bafc:	4604      	mov	r4, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb04:	4642      	mov	r2, r8
 800bb06:	464b      	mov	r3, r9
 800bb08:	f7f4 fb4a 	bl	80001a0 <__adddf3>
 800bb0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb10:	f7f4 fcfc 	bl	800050c <__aeabi_dmul>
 800bb14:	4622      	mov	r2, r4
 800bb16:	462b      	mov	r3, r5
 800bb18:	f7f4 fb42 	bl	80001a0 <__adddf3>
 800bb1c:	4642      	mov	r2, r8
 800bb1e:	4682      	mov	sl, r0
 800bb20:	468b      	mov	fp, r1
 800bb22:	464b      	mov	r3, r9
 800bb24:	4640      	mov	r0, r8
 800bb26:	4649      	mov	r1, r9
 800bb28:	f7f4 fcf0 	bl	800050c <__aeabi_dmul>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4b68      	ldr	r3, [pc, #416]	@ (800bcd0 <__ieee754_pow+0x778>)
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	f7f4 fb34 	bl	80001a0 <__adddf3>
 800bb38:	4652      	mov	r2, sl
 800bb3a:	465b      	mov	r3, fp
 800bb3c:	f7f4 fb30 	bl	80001a0 <__adddf3>
 800bb40:	2400      	movs	r4, #0
 800bb42:	460d      	mov	r5, r1
 800bb44:	4622      	mov	r2, r4
 800bb46:	460b      	mov	r3, r1
 800bb48:	4640      	mov	r0, r8
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	f7f4 fcde 	bl	800050c <__aeabi_dmul>
 800bb50:	2200      	movs	r2, #0
 800bb52:	4680      	mov	r8, r0
 800bb54:	4689      	mov	r9, r1
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4b5d      	ldr	r3, [pc, #372]	@ (800bcd0 <__ieee754_pow+0x778>)
 800bb5c:	f7f4 fb1e 	bl	800019c <__aeabi_dsub>
 800bb60:	4632      	mov	r2, r6
 800bb62:	463b      	mov	r3, r7
 800bb64:	f7f4 fb1a 	bl	800019c <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	4659      	mov	r1, fp
 800bb70:	f7f4 fb14 	bl	800019c <__aeabi_dsub>
 800bb74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb78:	f7f4 fcc8 	bl	800050c <__aeabi_dmul>
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460f      	mov	r7, r1
 800bb82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb86:	462b      	mov	r3, r5
 800bb88:	f7f4 fcc0 	bl	800050c <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fb04 	bl	80001a0 <__adddf3>
 800bb98:	2400      	movs	r4, #0
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4640      	mov	r0, r8
 800bba4:	4649      	mov	r1, r9
 800bba6:	f7f4 fafb 	bl	80001a0 <__adddf3>
 800bbaa:	a33d      	add	r3, pc, #244	@ (adr r3, 800bca0 <__ieee754_pow+0x748>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	f7f4 fcaa 	bl	800050c <__aeabi_dmul>
 800bbb8:	4642      	mov	r2, r8
 800bbba:	464b      	mov	r3, r9
 800bbbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f4 faea 	bl	800019c <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 fae4 	bl	800019c <__aeabi_dsub>
 800bbd4:	a334      	add	r3, pc, #208	@ (adr r3, 800bca8 <__ieee754_pow+0x750>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fc97 	bl	800050c <__aeabi_dmul>
 800bbde:	a334      	add	r3, pc, #208	@ (adr r3, 800bcb0 <__ieee754_pow+0x758>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	f7f4 fc8e 	bl	800050c <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 fad2 	bl	80001a0 <__adddf3>
 800bbfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bbfe:	4b35      	ldr	r3, [pc, #212]	@ (800bcd4 <__ieee754_pow+0x77c>)
 800bc00:	2400      	movs	r4, #0
 800bc02:	4413      	add	r3, r2
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 faca 	bl	80001a0 <__adddf3>
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc10:	468b      	mov	fp, r1
 800bc12:	f7f4 fc11 	bl	8000438 <__aeabi_i2d>
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bc1c:	4b2e      	ldr	r3, [pc, #184]	@ (800bcd8 <__ieee754_pow+0x780>)
 800bc1e:	4413      	add	r3, r2
 800bc20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc24:	4652      	mov	r2, sl
 800bc26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc2a:	465b      	mov	r3, fp
 800bc2c:	f7f4 fab8 	bl	80001a0 <__adddf3>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	f7f4 fab4 	bl	80001a0 <__adddf3>
 800bc38:	4632      	mov	r2, r6
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	f7f4 fab0 	bl	80001a0 <__adddf3>
 800bc40:	4632      	mov	r2, r6
 800bc42:	463b      	mov	r3, r7
 800bc44:	4620      	mov	r0, r4
 800bc46:	460d      	mov	r5, r1
 800bc48:	f7f4 faa8 	bl	800019c <__aeabi_dsub>
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	f7f4 faa4 	bl	800019c <__aeabi_dsub>
 800bc54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc58:	f7f4 faa0 	bl	800019c <__aeabi_dsub>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4650      	mov	r0, sl
 800bc62:	4659      	mov	r1, fp
 800bc64:	e618      	b.n	800b898 <__ieee754_pow+0x340>
 800bc66:	2400      	movs	r4, #0
 800bc68:	e68a      	b.n	800b980 <__ieee754_pow+0x428>
 800bc6a:	2601      	movs	r6, #1
 800bc6c:	e6a0      	b.n	800b9b0 <__ieee754_pow+0x458>
 800bc6e:	bf00      	nop
 800bc70:	4a454eef 	.word	0x4a454eef
 800bc74:	3fca7e28 	.word	0x3fca7e28
 800bc78:	93c9db65 	.word	0x93c9db65
 800bc7c:	3fcd864a 	.word	0x3fcd864a
 800bc80:	a91d4101 	.word	0xa91d4101
 800bc84:	3fd17460 	.word	0x3fd17460
 800bc88:	518f264d 	.word	0x518f264d
 800bc8c:	3fd55555 	.word	0x3fd55555
 800bc90:	db6fabff 	.word	0xdb6fabff
 800bc94:	3fdb6db6 	.word	0x3fdb6db6
 800bc98:	33333303 	.word	0x33333303
 800bc9c:	3fe33333 	.word	0x3fe33333
 800bca0:	e0000000 	.word	0xe0000000
 800bca4:	3feec709 	.word	0x3feec709
 800bca8:	dc3a03fd 	.word	0xdc3a03fd
 800bcac:	3feec709 	.word	0x3feec709
 800bcb0:	145b01f5 	.word	0x145b01f5
 800bcb4:	be3e2fe0 	.word	0xbe3e2fe0
 800bcb8:	7ff00000 	.word	0x7ff00000
 800bcbc:	43400000 	.word	0x43400000
 800bcc0:	0003988e 	.word	0x0003988e
 800bcc4:	000bb679 	.word	0x000bb679
 800bcc8:	0800c908 	.word	0x0800c908
 800bccc:	3ff00000 	.word	0x3ff00000
 800bcd0:	40080000 	.word	0x40080000
 800bcd4:	0800c8e8 	.word	0x0800c8e8
 800bcd8:	0800c8f8 	.word	0x0800c8f8
 800bcdc:	a39a      	add	r3, pc, #616	@ (adr r3, 800bf48 <__ieee754_pow+0x9f0>)
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fa5b 	bl	80001a0 <__adddf3>
 800bcea:	4642      	mov	r2, r8
 800bcec:	e9cd 0100 	strd	r0, r1, [sp]
 800bcf0:	464b      	mov	r3, r9
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	f7f4 fa51 	bl	800019c <__aeabi_dsub>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd02:	f7f4 fe93 	bl	8000a2c <__aeabi_dcmpgt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f47f ae09 	bne.w	800b91e <__ieee754_pow+0x3c6>
 800bd0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bd10:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bd14:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800bd18:	fa43 fa0a 	asr.w	sl, r3, sl
 800bd1c:	44da      	add	sl, fp
 800bd1e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bd22:	489b      	ldr	r0, [pc, #620]	@ (800bf90 <__ieee754_pow+0xa38>)
 800bd24:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bd28:	4108      	asrs	r0, r1
 800bd2a:	ea00 030a 	and.w	r3, r0, sl
 800bd2e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bd32:	f1c1 0114 	rsb	r1, r1, #20
 800bd36:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	fa4a fa01 	asr.w	sl, sl, r1
 800bd40:	f1bb 0f00 	cmp.w	fp, #0
 800bd44:	4649      	mov	r1, r9
 800bd46:	f04f 0200 	mov.w	r2, #0
 800bd4a:	bfb8      	it	lt
 800bd4c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd50:	f7f4 fa24 	bl	800019c <__aeabi_dsub>
 800bd54:	4680      	mov	r8, r0
 800bd56:	4689      	mov	r9, r1
 800bd58:	2400      	movs	r4, #0
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	463b      	mov	r3, r7
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fa1d 	bl	80001a0 <__adddf3>
 800bd66:	a37a      	add	r3, pc, #488	@ (adr r3, 800bf50 <__ieee754_pow+0x9f8>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	460d      	mov	r5, r1
 800bd70:	f7f4 fbcc 	bl	800050c <__aeabi_dmul>
 800bd74:	4642      	mov	r2, r8
 800bd76:	464b      	mov	r3, r9
 800bd78:	e9cd 0100 	strd	r0, r1, [sp]
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 fa0c 	bl	800019c <__aeabi_dsub>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fa06 	bl	800019c <__aeabi_dsub>
 800bd90:	a371      	add	r3, pc, #452	@ (adr r3, 800bf58 <__ieee754_pow+0xa00>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f7f4 fbb9 	bl	800050c <__aeabi_dmul>
 800bd9a:	a371      	add	r3, pc, #452	@ (adr r3, 800bf60 <__ieee754_pow+0xa08>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fbb0 	bl	800050c <__aeabi_dmul>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	f7f4 f9f4 	bl	80001a0 <__adddf3>
 800bdb8:	4604      	mov	r4, r0
 800bdba:	460d      	mov	r5, r1
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdc4:	f7f4 f9ec 	bl	80001a0 <__adddf3>
 800bdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdcc:	4680      	mov	r8, r0
 800bdce:	4689      	mov	r9, r1
 800bdd0:	f7f4 f9e4 	bl	800019c <__aeabi_dsub>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 f9de 	bl	800019c <__aeabi_dsub>
 800bde0:	4642      	mov	r2, r8
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	464b      	mov	r3, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 fb8e 	bl	800050c <__aeabi_dmul>
 800bdf0:	a35d      	add	r3, pc, #372	@ (adr r3, 800bf68 <__ieee754_pow+0xa10>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	f7f4 fb87 	bl	800050c <__aeabi_dmul>
 800bdfe:	a35c      	add	r3, pc, #368	@ (adr r3, 800bf70 <__ieee754_pow+0xa18>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f7f4 f9ca 	bl	800019c <__aeabi_dsub>
 800be08:	4622      	mov	r2, r4
 800be0a:	462b      	mov	r3, r5
 800be0c:	f7f4 fb7e 	bl	800050c <__aeabi_dmul>
 800be10:	a359      	add	r3, pc, #356	@ (adr r3, 800bf78 <__ieee754_pow+0xa20>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f7f4 f9c3 	bl	80001a0 <__adddf3>
 800be1a:	4622      	mov	r2, r4
 800be1c:	462b      	mov	r3, r5
 800be1e:	f7f4 fb75 	bl	800050c <__aeabi_dmul>
 800be22:	a357      	add	r3, pc, #348	@ (adr r3, 800bf80 <__ieee754_pow+0xa28>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 f9b8 	bl	800019c <__aeabi_dsub>
 800be2c:	4622      	mov	r2, r4
 800be2e:	462b      	mov	r3, r5
 800be30:	f7f4 fb6c 	bl	800050c <__aeabi_dmul>
 800be34:	a354      	add	r3, pc, #336	@ (adr r3, 800bf88 <__ieee754_pow+0xa30>)
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	f7f4 f9b1 	bl	80001a0 <__adddf3>
 800be3e:	4622      	mov	r2, r4
 800be40:	462b      	mov	r3, r5
 800be42:	f7f4 fb63 	bl	800050c <__aeabi_dmul>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 f9a5 	bl	800019c <__aeabi_dsub>
 800be52:	4604      	mov	r4, r0
 800be54:	460d      	mov	r5, r1
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4640      	mov	r0, r8
 800be5c:	4649      	mov	r1, r9
 800be5e:	f7f4 fb55 	bl	800050c <__aeabi_dmul>
 800be62:	2200      	movs	r2, #0
 800be64:	e9cd 0100 	strd	r0, r1, [sp]
 800be68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 f994 	bl	800019c <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be7c:	f7f4 fc70 	bl	8000760 <__aeabi_ddiv>
 800be80:	4632      	mov	r2, r6
 800be82:	4604      	mov	r4, r0
 800be84:	460d      	mov	r5, r1
 800be86:	463b      	mov	r3, r7
 800be88:	4640      	mov	r0, r8
 800be8a:	4649      	mov	r1, r9
 800be8c:	f7f4 fb3e 	bl	800050c <__aeabi_dmul>
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	f7f4 f984 	bl	80001a0 <__adddf3>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4620      	mov	r0, r4
 800be9e:	4629      	mov	r1, r5
 800bea0:	f7f4 f97c 	bl	800019c <__aeabi_dsub>
 800bea4:	4642      	mov	r2, r8
 800bea6:	464b      	mov	r3, r9
 800bea8:	f7f4 f978 	bl	800019c <__aeabi_dsub>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	2000      	movs	r0, #0
 800beb2:	4938      	ldr	r1, [pc, #224]	@ (800bf94 <__ieee754_pow+0xa3c>)
 800beb4:	f7f4 f972 	bl	800019c <__aeabi_dsub>
 800beb8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bebc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800bec0:	da2e      	bge.n	800bf20 <__ieee754_pow+0x9c8>
 800bec2:	4652      	mov	r2, sl
 800bec4:	f000 f874 	bl	800bfb0 <scalbn>
 800bec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800becc:	f7ff bbed 	b.w	800b6aa <__ieee754_pow+0x152>
 800bed0:	4c31      	ldr	r4, [pc, #196]	@ (800bf98 <__ieee754_pow+0xa40>)
 800bed2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bed6:	42a3      	cmp	r3, r4
 800bed8:	d91a      	bls.n	800bf10 <__ieee754_pow+0x9b8>
 800beda:	4b30      	ldr	r3, [pc, #192]	@ (800bf9c <__ieee754_pow+0xa44>)
 800bedc:	440b      	add	r3, r1
 800bede:	4303      	orrs	r3, r0
 800bee0:	d009      	beq.n	800bef6 <__ieee754_pow+0x99e>
 800bee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f7f4 fd81 	bl	80009f0 <__aeabi_dcmplt>
 800beee:	3800      	subs	r0, #0
 800bef0:	bf18      	it	ne
 800bef2:	2001      	movne	r0, #1
 800bef4:	e444      	b.n	800b780 <__ieee754_pow+0x228>
 800bef6:	4642      	mov	r2, r8
 800bef8:	464b      	mov	r3, r9
 800befa:	f7f4 f94f 	bl	800019c <__aeabi_dsub>
 800befe:	4632      	mov	r2, r6
 800bf00:	463b      	mov	r3, r7
 800bf02:	f7f4 fd89 	bl	8000a18 <__aeabi_dcmpge>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d1eb      	bne.n	800bee2 <__ieee754_pow+0x98a>
 800bf0a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800bfa0 <__ieee754_pow+0xa48>
 800bf0e:	e6fd      	b.n	800bd0c <__ieee754_pow+0x7b4>
 800bf10:	469a      	mov	sl, r3
 800bf12:	4b24      	ldr	r3, [pc, #144]	@ (800bfa4 <__ieee754_pow+0xa4c>)
 800bf14:	459a      	cmp	sl, r3
 800bf16:	f63f aef9 	bhi.w	800bd0c <__ieee754_pow+0x7b4>
 800bf1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf1e:	e71b      	b.n	800bd58 <__ieee754_pow+0x800>
 800bf20:	4621      	mov	r1, r4
 800bf22:	e7d1      	b.n	800bec8 <__ieee754_pow+0x970>
 800bf24:	2000      	movs	r0, #0
 800bf26:	491b      	ldr	r1, [pc, #108]	@ (800bf94 <__ieee754_pow+0xa3c>)
 800bf28:	f7ff bb34 	b.w	800b594 <__ieee754_pow+0x3c>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f7ff bb30 	b.w	800b594 <__ieee754_pow+0x3c>
 800bf34:	4650      	mov	r0, sl
 800bf36:	4659      	mov	r1, fp
 800bf38:	f7ff bb2c 	b.w	800b594 <__ieee754_pow+0x3c>
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	f7ff bb79 	b.w	800b634 <__ieee754_pow+0xdc>
 800bf42:	2400      	movs	r4, #0
 800bf44:	f7ff bb64 	b.w	800b610 <__ieee754_pow+0xb8>
 800bf48:	652b82fe 	.word	0x652b82fe
 800bf4c:	3c971547 	.word	0x3c971547
 800bf50:	00000000 	.word	0x00000000
 800bf54:	3fe62e43 	.word	0x3fe62e43
 800bf58:	fefa39ef 	.word	0xfefa39ef
 800bf5c:	3fe62e42 	.word	0x3fe62e42
 800bf60:	0ca86c39 	.word	0x0ca86c39
 800bf64:	be205c61 	.word	0xbe205c61
 800bf68:	72bea4d0 	.word	0x72bea4d0
 800bf6c:	3e663769 	.word	0x3e663769
 800bf70:	c5d26bf1 	.word	0xc5d26bf1
 800bf74:	3ebbbd41 	.word	0x3ebbbd41
 800bf78:	af25de2c 	.word	0xaf25de2c
 800bf7c:	3f11566a 	.word	0x3f11566a
 800bf80:	16bebd93 	.word	0x16bebd93
 800bf84:	3f66c16c 	.word	0x3f66c16c
 800bf88:	5555553e 	.word	0x5555553e
 800bf8c:	3fc55555 	.word	0x3fc55555
 800bf90:	fff00000 	.word	0xfff00000
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	4090cbff 	.word	0x4090cbff
 800bf9c:	3f6f3400 	.word	0x3f6f3400
 800bfa0:	4090cc00 	.word	0x4090cc00
 800bfa4:	3fe00000 	.word	0x3fe00000

0800bfa8 <fabs>:
 800bfa8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bfac:	4619      	mov	r1, r3
 800bfae:	4770      	bx	lr

0800bfb0 <scalbn>:
 800bfb0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bfb4:	4616      	mov	r6, r2
 800bfb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfba:	4683      	mov	fp, r0
 800bfbc:	468c      	mov	ip, r1
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	b982      	cbnz	r2, 800bfe4 <scalbn+0x34>
 800bfc2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bfc6:	4303      	orrs	r3, r0
 800bfc8:	d039      	beq.n	800c03e <scalbn+0x8e>
 800bfca:	4b2f      	ldr	r3, [pc, #188]	@ (800c088 <scalbn+0xd8>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f7f4 fa9d 	bl	800050c <__aeabi_dmul>
 800bfd2:	4b2e      	ldr	r3, [pc, #184]	@ (800c08c <scalbn+0xdc>)
 800bfd4:	4683      	mov	fp, r0
 800bfd6:	429e      	cmp	r6, r3
 800bfd8:	468c      	mov	ip, r1
 800bfda:	da0d      	bge.n	800bff8 <scalbn+0x48>
 800bfdc:	a326      	add	r3, pc, #152	@ (adr r3, 800c078 <scalbn+0xc8>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	e01b      	b.n	800c01c <scalbn+0x6c>
 800bfe4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bfe8:	42ba      	cmp	r2, r7
 800bfea:	d109      	bne.n	800c000 <scalbn+0x50>
 800bfec:	4602      	mov	r2, r0
 800bfee:	f7f4 f8d7 	bl	80001a0 <__adddf3>
 800bff2:	4683      	mov	fp, r0
 800bff4:	468c      	mov	ip, r1
 800bff6:	e022      	b.n	800c03e <scalbn+0x8e>
 800bff8:	460b      	mov	r3, r1
 800bffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bffe:	3a36      	subs	r2, #54	@ 0x36
 800c000:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c004:	428e      	cmp	r6, r1
 800c006:	dd0c      	ble.n	800c022 <scalbn+0x72>
 800c008:	a31d      	add	r3, pc, #116	@ (adr r3, 800c080 <scalbn+0xd0>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	461c      	mov	r4, r3
 800c010:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c014:	f361 74df 	bfi	r4, r1, #31, #1
 800c018:	4621      	mov	r1, r4
 800c01a:	481d      	ldr	r0, [pc, #116]	@ (800c090 <scalbn+0xe0>)
 800c01c:	f7f4 fa76 	bl	800050c <__aeabi_dmul>
 800c020:	e7e7      	b.n	800bff2 <scalbn+0x42>
 800c022:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c026:	4432      	add	r2, r6
 800c028:	428a      	cmp	r2, r1
 800c02a:	dced      	bgt.n	800c008 <scalbn+0x58>
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	dd0a      	ble.n	800c046 <scalbn+0x96>
 800c030:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c034:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c038:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c03c:	46ac      	mov	ip, r5
 800c03e:	4658      	mov	r0, fp
 800c040:	4661      	mov	r1, ip
 800c042:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c046:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c04a:	da09      	bge.n	800c060 <scalbn+0xb0>
 800c04c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c050:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c054:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c058:	480e      	ldr	r0, [pc, #56]	@ (800c094 <scalbn+0xe4>)
 800c05a:	f041 011f 	orr.w	r1, r1, #31
 800c05e:	e7bd      	b.n	800bfdc <scalbn+0x2c>
 800c060:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c064:	3236      	adds	r2, #54	@ 0x36
 800c066:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c06a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c06e:	4658      	mov	r0, fp
 800c070:	4629      	mov	r1, r5
 800c072:	2200      	movs	r2, #0
 800c074:	4b08      	ldr	r3, [pc, #32]	@ (800c098 <scalbn+0xe8>)
 800c076:	e7d1      	b.n	800c01c <scalbn+0x6c>
 800c078:	c2f8f359 	.word	0xc2f8f359
 800c07c:	01a56e1f 	.word	0x01a56e1f
 800c080:	8800759c 	.word	0x8800759c
 800c084:	7e37e43c 	.word	0x7e37e43c
 800c088:	43500000 	.word	0x43500000
 800c08c:	ffff3cb0 	.word	0xffff3cb0
 800c090:	8800759c 	.word	0x8800759c
 800c094:	c2f8f359 	.word	0xc2f8f359
 800c098:	3c900000 	.word	0x3c900000

0800c09c <with_errno>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	4604      	mov	r4, r0
 800c0a0:	460d      	mov	r5, r1
 800c0a2:	4616      	mov	r6, r2
 800c0a4:	f7fc fdac 	bl	8008c00 <__errno>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	6006      	str	r6, [r0, #0]
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}

0800c0b0 <xflow>:
 800c0b0:	b513      	push	{r0, r1, r4, lr}
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	b10c      	cbz	r4, 800c0be <xflow+0xe>
 800c0ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c0be:	e9cd 2300 	strd	r2, r3, [sp]
 800c0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c6:	f7f4 fa21 	bl	800050c <__aeabi_dmul>
 800c0ca:	2222      	movs	r2, #34	@ 0x22
 800c0cc:	b002      	add	sp, #8
 800c0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d2:	f7ff bfe3 	b.w	800c09c <with_errno>

0800c0d6 <__math_uflow>:
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c0dc:	f7ff bfe8 	b.w	800c0b0 <xflow>

0800c0e0 <__math_oflow>:
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c0e6:	f7ff bfe3 	b.w	800c0b0 <xflow>
	...

0800c0ec <__ieee754_sqrt>:
 800c0ec:	4a67      	ldr	r2, [pc, #412]	@ (800c28c <__ieee754_sqrt+0x1a0>)
 800c0ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f2:	438a      	bics	r2, r1
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	d10e      	bne.n	800c11c <__ieee754_sqrt+0x30>
 800c0fe:	4602      	mov	r2, r0
 800c100:	f7f4 fa04 	bl	800050c <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 f848 	bl	80001a0 <__adddf3>
 800c110:	4606      	mov	r6, r0
 800c112:	460f      	mov	r7, r1
 800c114:	4630      	mov	r0, r6
 800c116:	4639      	mov	r1, r7
 800c118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	2900      	cmp	r1, #0
 800c11e:	dc0c      	bgt.n	800c13a <__ieee754_sqrt+0x4e>
 800c120:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c124:	4302      	orrs	r2, r0
 800c126:	d0f5      	beq.n	800c114 <__ieee754_sqrt+0x28>
 800c128:	b189      	cbz	r1, 800c14e <__ieee754_sqrt+0x62>
 800c12a:	4602      	mov	r2, r0
 800c12c:	f7f4 f836 	bl	800019c <__aeabi_dsub>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	f7f4 fb14 	bl	8000760 <__aeabi_ddiv>
 800c138:	e7ea      	b.n	800c110 <__ieee754_sqrt+0x24>
 800c13a:	150a      	asrs	r2, r1, #20
 800c13c:	d115      	bne.n	800c16a <__ieee754_sqrt+0x7e>
 800c13e:	2100      	movs	r1, #0
 800c140:	e009      	b.n	800c156 <__ieee754_sqrt+0x6a>
 800c142:	0ae3      	lsrs	r3, r4, #11
 800c144:	3a15      	subs	r2, #21
 800c146:	0564      	lsls	r4, r4, #21
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d0fa      	beq.n	800c142 <__ieee754_sqrt+0x56>
 800c14c:	e7f7      	b.n	800c13e <__ieee754_sqrt+0x52>
 800c14e:	460a      	mov	r2, r1
 800c150:	e7fa      	b.n	800c148 <__ieee754_sqrt+0x5c>
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	3101      	adds	r1, #1
 800c156:	02d8      	lsls	r0, r3, #11
 800c158:	d5fb      	bpl.n	800c152 <__ieee754_sqrt+0x66>
 800c15a:	1e48      	subs	r0, r1, #1
 800c15c:	1a12      	subs	r2, r2, r0
 800c15e:	f1c1 0020 	rsb	r0, r1, #32
 800c162:	fa24 f000 	lsr.w	r0, r4, r0
 800c166:	4303      	orrs	r3, r0
 800c168:	408c      	lsls	r4, r1
 800c16a:	2600      	movs	r6, #0
 800c16c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c170:	2116      	movs	r1, #22
 800c172:	07d2      	lsls	r2, r2, #31
 800c174:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c178:	4632      	mov	r2, r6
 800c17a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c182:	bf5c      	itt	pl
 800c184:	005b      	lslpl	r3, r3, #1
 800c186:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c18a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c18e:	bf58      	it	pl
 800c190:	0064      	lslpl	r4, r4, #1
 800c192:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c196:	107f      	asrs	r7, r7, #1
 800c198:	0064      	lsls	r4, r4, #1
 800c19a:	1815      	adds	r5, r2, r0
 800c19c:	429d      	cmp	r5, r3
 800c19e:	bfde      	ittt	le
 800c1a0:	182a      	addle	r2, r5, r0
 800c1a2:	1b5b      	suble	r3, r3, r5
 800c1a4:	1836      	addle	r6, r6, r0
 800c1a6:	0fe5      	lsrs	r5, r4, #31
 800c1a8:	3901      	subs	r1, #1
 800c1aa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c1ae:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c1b2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c1b6:	d1f0      	bne.n	800c19a <__ieee754_sqrt+0xae>
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	f04f 0a20 	mov.w	sl, #32
 800c1be:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	eb01 0c00 	add.w	ip, r1, r0
 800c1c8:	db02      	blt.n	800c1d0 <__ieee754_sqrt+0xe4>
 800c1ca:	d113      	bne.n	800c1f4 <__ieee754_sqrt+0x108>
 800c1cc:	45a4      	cmp	ip, r4
 800c1ce:	d811      	bhi.n	800c1f4 <__ieee754_sqrt+0x108>
 800c1d0:	f1bc 0f00 	cmp.w	ip, #0
 800c1d4:	eb0c 0100 	add.w	r1, ip, r0
 800c1d8:	da42      	bge.n	800c260 <__ieee754_sqrt+0x174>
 800c1da:	2900      	cmp	r1, #0
 800c1dc:	db40      	blt.n	800c260 <__ieee754_sqrt+0x174>
 800c1de:	f102 0e01 	add.w	lr, r2, #1
 800c1e2:	1a9b      	subs	r3, r3, r2
 800c1e4:	4672      	mov	r2, lr
 800c1e6:	45a4      	cmp	ip, r4
 800c1e8:	bf88      	it	hi
 800c1ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c1ee:	eba4 040c 	sub.w	r4, r4, ip
 800c1f2:	4405      	add	r5, r0
 800c1f4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c1f8:	f1ba 0a01 	subs.w	sl, sl, #1
 800c1fc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c200:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c204:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c208:	d1db      	bne.n	800c1c2 <__ieee754_sqrt+0xd6>
 800c20a:	431c      	orrs	r4, r3
 800c20c:	d01a      	beq.n	800c244 <__ieee754_sqrt+0x158>
 800c20e:	4c20      	ldr	r4, [pc, #128]	@ (800c290 <__ieee754_sqrt+0x1a4>)
 800c210:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c294 <__ieee754_sqrt+0x1a8>
 800c214:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c218:	e9db 2300 	ldrd	r2, r3, [fp]
 800c21c:	f7f3 ffbe 	bl	800019c <__aeabi_dsub>
 800c220:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	4640      	mov	r0, r8
 800c22a:	4649      	mov	r1, r9
 800c22c:	f7f4 fbea 	bl	8000a04 <__aeabi_dcmple>
 800c230:	b140      	cbz	r0, 800c244 <__ieee754_sqrt+0x158>
 800c232:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c236:	e9db 2300 	ldrd	r2, r3, [fp]
 800c23a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c23e:	d111      	bne.n	800c264 <__ieee754_sqrt+0x178>
 800c240:	4655      	mov	r5, sl
 800c242:	3601      	adds	r6, #1
 800c244:	1072      	asrs	r2, r6, #1
 800c246:	086b      	lsrs	r3, r5, #1
 800c248:	07f1      	lsls	r1, r6, #31
 800c24a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c24e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c252:	bf48      	it	mi
 800c254:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c258:	4618      	mov	r0, r3
 800c25a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c25e:	e757      	b.n	800c110 <__ieee754_sqrt+0x24>
 800c260:	4696      	mov	lr, r2
 800c262:	e7be      	b.n	800c1e2 <__ieee754_sqrt+0xf6>
 800c264:	f7f3 ff9c 	bl	80001a0 <__adddf3>
 800c268:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 fbbc 	bl	80009f0 <__aeabi_dcmplt>
 800c278:	b120      	cbz	r0, 800c284 <__ieee754_sqrt+0x198>
 800c27a:	1ca8      	adds	r0, r5, #2
 800c27c:	bf08      	it	eq
 800c27e:	3601      	addeq	r6, #1
 800c280:	3502      	adds	r5, #2
 800c282:	e7df      	b.n	800c244 <__ieee754_sqrt+0x158>
 800c284:	1c6b      	adds	r3, r5, #1
 800c286:	f023 0501 	bic.w	r5, r3, #1
 800c28a:	e7db      	b.n	800c244 <__ieee754_sqrt+0x158>
 800c28c:	7ff00000 	.word	0x7ff00000
 800c290:	20000610 	.word	0x20000610
 800c294:	20000608 	.word	0x20000608

0800c298 <_init>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	bf00      	nop
 800c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29e:	bc08      	pop	{r3}
 800c2a0:	469e      	mov	lr, r3
 800c2a2:	4770      	bx	lr

0800c2a4 <_fini>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	bf00      	nop
 800c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2aa:	bc08      	pop	{r3}
 800c2ac:	469e      	mov	lr, r3
 800c2ae:	4770      	bx	lr
