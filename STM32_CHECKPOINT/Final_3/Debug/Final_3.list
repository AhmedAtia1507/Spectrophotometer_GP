
Final_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c378  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800c4a8  0800c4a8  0000d4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb78  0800cb78  0000e618  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb78  0800cb78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb80  0800cb80  0000e618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb80  0800cb80  0000db80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb84  0800cb84  0000db84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  0800cb88  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000618  0800d1a0  0000e618  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  0800d1a0  0000e9fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e618  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000975f  00000000  00000000  0000e641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022eb  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000043c8  00000000  00000000  0001a08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0001e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000838  00000000  00000000  0001edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000520a  00000000  00000000  0001f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091e1  00000000  00000000  0002480a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00014a81  00000000  00000000  0002d9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0004246c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e44  00000000  00000000  000424b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000618 	.word	0x20000618
 800014c:	00000000 	.word	0x00000000
 8000150:	0800c490 	.word	0x0800c490

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000061c 	.word	0x2000061c
 800016c:	0800c490 	.word	0x0800c490

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	@ 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	@ 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	3a01      	subs	r2, #1
 8000c06:	bf28      	it	cs
 8000c08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c0c:	d2ed      	bcs.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dba:	2afd      	cmp	r2, #253	@ 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	@ 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	@ 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	@ 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_ldivmod>:
 8001180:	b97b      	cbnz	r3, 80011a2 <__aeabi_ldivmod+0x22>
 8001182:	b972      	cbnz	r2, 80011a2 <__aeabi_ldivmod+0x22>
 8001184:	2900      	cmp	r1, #0
 8001186:	bfbe      	ittt	lt
 8001188:	2000      	movlt	r0, #0
 800118a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800118e:	e006      	blt.n	800119e <__aeabi_ldivmod+0x1e>
 8001190:	bf08      	it	eq
 8001192:	2800      	cmpeq	r0, #0
 8001194:	bf1c      	itt	ne
 8001196:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800119a:	f04f 30ff 	movne.w	r0, #4294967295
 800119e:	f000 b9d1 	b.w	8001544 <__aeabi_idiv0>
 80011a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011aa:	2900      	cmp	r1, #0
 80011ac:	db09      	blt.n	80011c2 <__aeabi_ldivmod+0x42>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db1a      	blt.n	80011e8 <__aeabi_ldivmod+0x68>
 80011b2:	f000 f86b 	bl	800128c <__udivmoddi4>
 80011b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011be:	b004      	add	sp, #16
 80011c0:	4770      	bx	lr
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db1b      	blt.n	8001204 <__aeabi_ldivmod+0x84>
 80011cc:	f000 f85e 	bl	800128c <__udivmoddi4>
 80011d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d8:	b004      	add	sp, #16
 80011da:	4240      	negs	r0, r0
 80011dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	4770      	bx	lr
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	f000 f84d 	bl	800128c <__udivmoddi4>
 80011f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fa:	b004      	add	sp, #16
 80011fc:	4240      	negs	r0, r0
 80011fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f83f 	bl	800128c <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4252      	negs	r2, r2
 800121a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121e:	4770      	bx	lr

08001220 <__aeabi_d2lz>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	f7ff fbe1 	bl	80009f0 <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x1c>
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4620      	mov	r0, r4
 800123e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f957 	bl	800050c <__aeabi_dmul>
 800125e:	f7ff fc05 	bl	8000a6c <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f8d8 	bl	8000418 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f94e 	bl	800050c <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ff90 	bl	800019c <__aeabi_dsub>
 800127c:	f7ff fbf6 	bl	8000a6c <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <__udivmoddi4>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	9d08      	ldr	r5, [sp, #32]
 8001292:	460c      	mov	r4, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d14e      	bne.n	8001336 <__udivmoddi4+0xaa>
 8001298:	4694      	mov	ip, r2
 800129a:	458c      	cmp	ip, r1
 800129c:	4686      	mov	lr, r0
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	d962      	bls.n	800136a <__udivmoddi4+0xde>
 80012a4:	b14a      	cbz	r2, 80012ba <__udivmoddi4+0x2e>
 80012a6:	f1c2 0320 	rsb	r3, r2, #32
 80012aa:	4091      	lsls	r1, r2
 80012ac:	fa20 f303 	lsr.w	r3, r0, r3
 80012b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b4:	4319      	orrs	r1, r3
 80012b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80012ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012be:	fbb1 f4f7 	udiv	r4, r1, r7
 80012c2:	fb07 1114 	mls	r1, r7, r4, r1
 80012c6:	fa1f f68c 	uxth.w	r6, ip
 80012ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	fb04 f106 	mul.w	r1, r4, r6
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d90a      	bls.n	80012f0 <__udivmoddi4+0x64>
 80012da:	eb1c 0303 	adds.w	r3, ip, r3
 80012de:	f104 30ff 	add.w	r0, r4, #4294967295
 80012e2:	f080 8110 	bcs.w	8001506 <__udivmoddi4+0x27a>
 80012e6:	4299      	cmp	r1, r3
 80012e8:	f240 810d 	bls.w	8001506 <__udivmoddi4+0x27a>
 80012ec:	3c02      	subs	r4, #2
 80012ee:	4463      	add	r3, ip
 80012f0:	1a59      	subs	r1, r3, r1
 80012f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80012f6:	fb07 1110 	mls	r1, r7, r0, r1
 80012fa:	fb00 f606 	mul.w	r6, r0, r6
 80012fe:	fa1f f38e 	uxth.w	r3, lr
 8001302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001306:	429e      	cmp	r6, r3
 8001308:	d90a      	bls.n	8001320 <__udivmoddi4+0x94>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001312:	f080 80fa 	bcs.w	800150a <__udivmoddi4+0x27e>
 8001316:	429e      	cmp	r6, r3
 8001318:	f240 80f7 	bls.w	800150a <__udivmoddi4+0x27e>
 800131c:	4463      	add	r3, ip
 800131e:	3802      	subs	r0, #2
 8001320:	2100      	movs	r1, #0
 8001322:	1b9b      	subs	r3, r3, r6
 8001324:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001328:	b11d      	cbz	r5, 8001332 <__udivmoddi4+0xa6>
 800132a:	40d3      	lsrs	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	e9c5 3200 	strd	r3, r2, [r5]
 8001332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001336:	428b      	cmp	r3, r1
 8001338:	d905      	bls.n	8001346 <__udivmoddi4+0xba>
 800133a:	b10d      	cbz	r5, 8001340 <__udivmoddi4+0xb4>
 800133c:	e9c5 0100 	strd	r0, r1, [r5]
 8001340:	2100      	movs	r1, #0
 8001342:	4608      	mov	r0, r1
 8001344:	e7f5      	b.n	8001332 <__udivmoddi4+0xa6>
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d146      	bne.n	80013dc <__udivmoddi4+0x150>
 800134e:	42a3      	cmp	r3, r4
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0xcc>
 8001352:	4290      	cmp	r0, r2
 8001354:	f0c0 80ee 	bcc.w	8001534 <__udivmoddi4+0x2a8>
 8001358:	1a86      	subs	r6, r0, r2
 800135a:	eb64 0303 	sbc.w	r3, r4, r3
 800135e:	2001      	movs	r0, #1
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0e6      	beq.n	8001332 <__udivmoddi4+0xa6>
 8001364:	e9c5 6300 	strd	r6, r3, [r5]
 8001368:	e7e3      	b.n	8001332 <__udivmoddi4+0xa6>
 800136a:	2a00      	cmp	r2, #0
 800136c:	f040 808f 	bne.w	800148e <__udivmoddi4+0x202>
 8001370:	eba1 040c 	sub.w	r4, r1, ip
 8001374:	2101      	movs	r1, #1
 8001376:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800137a:	fa1f f78c 	uxth.w	r7, ip
 800137e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001382:	fb08 4416 	mls	r4, r8, r6, r4
 8001386:	fb07 f006 	mul.w	r0, r7, r6
 800138a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800138e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d908      	bls.n	80013a8 <__udivmoddi4+0x11c>
 8001396:	eb1c 0303 	adds.w	r3, ip, r3
 800139a:	f106 34ff 	add.w	r4, r6, #4294967295
 800139e:	d202      	bcs.n	80013a6 <__udivmoddi4+0x11a>
 80013a0:	4298      	cmp	r0, r3
 80013a2:	f200 80cb 	bhi.w	800153c <__udivmoddi4+0x2b0>
 80013a6:	4626      	mov	r6, r4
 80013a8:	1a1c      	subs	r4, r3, r0
 80013aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ae:	fb08 4410 	mls	r4, r8, r0, r4
 80013b2:	fb00 f707 	mul.w	r7, r0, r7
 80013b6:	fa1f f38e 	uxth.w	r3, lr
 80013ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013be:	429f      	cmp	r7, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x148>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80013ca:	d202      	bcs.n	80013d2 <__udivmoddi4+0x146>
 80013cc:	429f      	cmp	r7, r3
 80013ce:	f200 80ae 	bhi.w	800152e <__udivmoddi4+0x2a2>
 80013d2:	4620      	mov	r0, r4
 80013d4:	1bdb      	subs	r3, r3, r7
 80013d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013da:	e7a5      	b.n	8001328 <__udivmoddi4+0x9c>
 80013dc:	f1c1 0720 	rsb	r7, r1, #32
 80013e0:	408b      	lsls	r3, r1
 80013e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ea:	fa24 f607 	lsr.w	r6, r4, r7
 80013ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013f2:	fbb6 f8f9 	udiv	r8, r6, r9
 80013f6:	fa1f fe8c 	uxth.w	lr, ip
 80013fa:	fb09 6618 	mls	r6, r9, r8, r6
 80013fe:	fa20 f307 	lsr.w	r3, r0, r7
 8001402:	408c      	lsls	r4, r1
 8001404:	fa00 fa01 	lsl.w	sl, r0, r1
 8001408:	fb08 f00e 	mul.w	r0, r8, lr
 800140c:	431c      	orrs	r4, r3
 800140e:	0c23      	lsrs	r3, r4, #16
 8001410:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001414:	4298      	cmp	r0, r3
 8001416:	fa02 f201 	lsl.w	r2, r2, r1
 800141a:	d90a      	bls.n	8001432 <__udivmoddi4+0x1a6>
 800141c:	eb1c 0303 	adds.w	r3, ip, r3
 8001420:	f108 36ff 	add.w	r6, r8, #4294967295
 8001424:	f080 8081 	bcs.w	800152a <__udivmoddi4+0x29e>
 8001428:	4298      	cmp	r0, r3
 800142a:	d97e      	bls.n	800152a <__udivmoddi4+0x29e>
 800142c:	f1a8 0802 	sub.w	r8, r8, #2
 8001430:	4463      	add	r3, ip
 8001432:	1a1e      	subs	r6, r3, r0
 8001434:	fbb6 f3f9 	udiv	r3, r6, r9
 8001438:	fb09 6613 	mls	r6, r9, r3, r6
 800143c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001440:	b2a4      	uxth	r4, r4
 8001442:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001446:	45a6      	cmp	lr, r4
 8001448:	d908      	bls.n	800145c <__udivmoddi4+0x1d0>
 800144a:	eb1c 0404 	adds.w	r4, ip, r4
 800144e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001452:	d266      	bcs.n	8001522 <__udivmoddi4+0x296>
 8001454:	45a6      	cmp	lr, r4
 8001456:	d964      	bls.n	8001522 <__udivmoddi4+0x296>
 8001458:	3b02      	subs	r3, #2
 800145a:	4464      	add	r4, ip
 800145c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001460:	fba0 8302 	umull	r8, r3, r0, r2
 8001464:	eba4 040e 	sub.w	r4, r4, lr
 8001468:	429c      	cmp	r4, r3
 800146a:	46c6      	mov	lr, r8
 800146c:	461e      	mov	r6, r3
 800146e:	d350      	bcc.n	8001512 <__udivmoddi4+0x286>
 8001470:	d04d      	beq.n	800150e <__udivmoddi4+0x282>
 8001472:	b155      	cbz	r5, 800148a <__udivmoddi4+0x1fe>
 8001474:	ebba 030e 	subs.w	r3, sl, lr
 8001478:	eb64 0406 	sbc.w	r4, r4, r6
 800147c:	fa04 f707 	lsl.w	r7, r4, r7
 8001480:	40cb      	lsrs	r3, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c5 7400 	strd	r7, r4, [r5]
 800148a:	2100      	movs	r1, #0
 800148c:	e751      	b.n	8001332 <__udivmoddi4+0xa6>
 800148e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001492:	f1c2 0320 	rsb	r3, r2, #32
 8001496:	40d9      	lsrs	r1, r3
 8001498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800149c:	fa20 f303 	lsr.w	r3, r0, r3
 80014a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80014a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80014a8:	fb08 1110 	mls	r1, r8, r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	431c      	orrs	r4, r3
 80014b0:	fa1f f78c 	uxth.w	r7, ip
 80014b4:	0c23      	lsrs	r3, r4, #16
 80014b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014ba:	fb00 f107 	mul.w	r1, r0, r7
 80014be:	4299      	cmp	r1, r3
 80014c0:	d908      	bls.n	80014d4 <__udivmoddi4+0x248>
 80014c2:	eb1c 0303 	adds.w	r3, ip, r3
 80014c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80014ca:	d22c      	bcs.n	8001526 <__udivmoddi4+0x29a>
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d92a      	bls.n	8001526 <__udivmoddi4+0x29a>
 80014d0:	3802      	subs	r0, #2
 80014d2:	4463      	add	r3, ip
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	fbb3 f1f8 	udiv	r1, r3, r8
 80014da:	fb08 3311 	mls	r3, r8, r1, r3
 80014de:	b2a4      	uxth	r4, r4
 80014e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014e4:	fb01 f307 	mul.w	r3, r1, r7
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d908      	bls.n	80014fe <__udivmoddi4+0x272>
 80014ec:	eb1c 0404 	adds.w	r4, ip, r4
 80014f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80014f4:	d213      	bcs.n	800151e <__udivmoddi4+0x292>
 80014f6:	42a3      	cmp	r3, r4
 80014f8:	d911      	bls.n	800151e <__udivmoddi4+0x292>
 80014fa:	3902      	subs	r1, #2
 80014fc:	4464      	add	r4, ip
 80014fe:	1ae4      	subs	r4, r4, r3
 8001500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001504:	e73b      	b.n	800137e <__udivmoddi4+0xf2>
 8001506:	4604      	mov	r4, r0
 8001508:	e6f2      	b.n	80012f0 <__udivmoddi4+0x64>
 800150a:	4608      	mov	r0, r1
 800150c:	e708      	b.n	8001320 <__udivmoddi4+0x94>
 800150e:	45c2      	cmp	sl, r8
 8001510:	d2af      	bcs.n	8001472 <__udivmoddi4+0x1e6>
 8001512:	ebb8 0e02 	subs.w	lr, r8, r2
 8001516:	eb63 060c 	sbc.w	r6, r3, ip
 800151a:	3801      	subs	r0, #1
 800151c:	e7a9      	b.n	8001472 <__udivmoddi4+0x1e6>
 800151e:	4631      	mov	r1, r6
 8001520:	e7ed      	b.n	80014fe <__udivmoddi4+0x272>
 8001522:	4603      	mov	r3, r0
 8001524:	e79a      	b.n	800145c <__udivmoddi4+0x1d0>
 8001526:	4630      	mov	r0, r6
 8001528:	e7d4      	b.n	80014d4 <__udivmoddi4+0x248>
 800152a:	46b0      	mov	r8, r6
 800152c:	e781      	b.n	8001432 <__udivmoddi4+0x1a6>
 800152e:	4463      	add	r3, ip
 8001530:	3802      	subs	r0, #2
 8001532:	e74f      	b.n	80013d4 <__udivmoddi4+0x148>
 8001534:	4606      	mov	r6, r0
 8001536:	4623      	mov	r3, r4
 8001538:	4608      	mov	r0, r1
 800153a:	e711      	b.n	8001360 <__udivmoddi4+0xd4>
 800153c:	3e02      	subs	r6, #2
 800153e:	4463      	add	r3, ip
 8001540:	e732      	b.n	80013a8 <__udivmoddi4+0x11c>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <SCommands_Init>:
#include "SCommands_Interface.h"
#include "SCommands_Private.h"


Std_ReturnType SCommands_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HESP32_SetCommandCallbackFunction       (0, SCommands_GetUVStatus);
 800154c:	493c      	ldr	r1, [pc, #240]	@ (8001640 <SCommands_Init+0xf8>)
 800154e:	2000      	movs	r0, #0
 8001550:	f001 ffa8 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (1, SCommands_SetUVOn);
 8001554:	493b      	ldr	r1, [pc, #236]	@ (8001644 <SCommands_Init+0xfc>)
 8001556:	2001      	movs	r0, #1
 8001558:	f001 ffa4 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (2, SCommands_SetUVOff);
 800155c:	493a      	ldr	r1, [pc, #232]	@ (8001648 <SCommands_Init+0x100>)
 800155e:	2002      	movs	r0, #2
 8001560:	f001 ffa0 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (3, SCommands_GetVisStatus);
 8001564:	4939      	ldr	r1, [pc, #228]	@ (800164c <SCommands_Init+0x104>)
 8001566:	2003      	movs	r0, #3
 8001568:	f001 ff9c 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (4, SCommands_SetVisOn);
 800156c:	4938      	ldr	r1, [pc, #224]	@ (8001650 <SCommands_Init+0x108>)
 800156e:	2004      	movs	r0, #4
 8001570:	f001 ff98 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (5, SCommands_SetVisOff);
 8001574:	4937      	ldr	r1, [pc, #220]	@ (8001654 <SCommands_Init+0x10c>)
 8001576:	2005      	movs	r0, #5
 8001578:	f001 ff94 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (6, SCommands_GetSupplyVoltages);
 800157c:	4936      	ldr	r1, [pc, #216]	@ (8001658 <SCommands_Init+0x110>)
 800157e:	2006      	movs	r0, #6
 8001580:	f001 ff90 	bl	80034a4 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackFunction       (7, SCommands_SendCurrentMotorsSteps);
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <SCommands_Init+0x114>)
 8001586:	2007      	movs	r0, #7
 8001588:	f001 ff8c 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (8, SCommands_HomeLampMotor);
 800158c:	4934      	ldr	r1, [pc, #208]	@ (8001660 <SCommands_Init+0x118>)
 800158e:	2008      	movs	r0, #8
 8001590:	f001 ff88 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (9, SCommands_HomeWLSelectMotor);
 8001594:	4933      	ldr	r1, [pc, #204]	@ (8001664 <SCommands_Init+0x11c>)
 8001596:	2009      	movs	r0, #9
 8001598:	f001 ff84 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (10, SCommands_HomeFilterSelectMotor);
 800159c:	4932      	ldr	r1, [pc, #200]	@ (8001668 <SCommands_Init+0x120>)
 800159e:	200a      	movs	r0, #10
 80015a0:	f001 ff80 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (11, SCommands_SendCurrentWL);
 80015a4:	4931      	ldr	r1, [pc, #196]	@ (800166c <SCommands_Init+0x124>)
 80015a6:	200b      	movs	r0, #11
 80015a8:	f001 ff7c 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (12, SCommands_SendCurrentDateTime);
 80015ac:	4930      	ldr	r1, [pc, #192]	@ (8001670 <SCommands_Init+0x128>)
 80015ae:	200c      	movs	r0, #12
 80015b0:	f001 ff78 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (13, SCommands_SendCurrentDetectorValues);
 80015b4:	492f      	ldr	r1, [pc, #188]	@ (8001674 <SCommands_Init+0x12c>)
 80015b6:	200d      	movs	r0, #13
 80015b8:	f001 ff74 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (14, SCommands_GetLampMotorPosition);
 80015bc:	492e      	ldr	r1, [pc, #184]	@ (8001678 <SCommands_Init+0x130>)
 80015be:	200e      	movs	r0, #14
 80015c0:	f001 ff70 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (15, SCommands_SetLampMotorVisible);
 80015c4:	492d      	ldr	r1, [pc, #180]	@ (800167c <SCommands_Init+0x134>)
 80015c6:	200f      	movs	r0, #15
 80015c8:	f001 ff6c 	bl	80034a4 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (16, SCommands_SetLampMotorUV);
 80015cc:	492c      	ldr	r1, [pc, #176]	@ (8001680 <SCommands_Init+0x138>)
 80015ce:	2010      	movs	r0, #16
 80015d0:	f001 ff68 	bl	80034a4 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackArgFunction    (17, SCommands_UpdateDateTime);
 80015d4:	492b      	ldr	r1, [pc, #172]	@ (8001684 <SCommands_Init+0x13c>)
 80015d6:	2011      	movs	r0, #17
 80015d8:	f001 ff84 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (18, SCommands_SaveFilterMotorCalibSteps);
 80015dc:	492a      	ldr	r1, [pc, #168]	@ (8001688 <SCommands_Init+0x140>)
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 ff80 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (19, SCommands_SaveFilterMotorCalibWL);
 80015e4:	4929      	ldr	r1, [pc, #164]	@ (800168c <SCommands_Init+0x144>)
 80015e6:	2013      	movs	r0, #19
 80015e8:	f001 ff7c 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (20, SCommands_StartOperation);
 80015ec:	4928      	ldr	r1, [pc, #160]	@ (8001690 <SCommands_Init+0x148>)
 80015ee:	2014      	movs	r0, #20
 80015f0:	f001 ff78 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (21, SCommands_SetReferenceGain);
 80015f4:	4927      	ldr	r1, [pc, #156]	@ (8001694 <SCommands_Init+0x14c>)
 80015f6:	2015      	movs	r0, #21
 80015f8:	f001 ff74 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (22, SCommands_SetSampleGain);
 80015fc:	4926      	ldr	r1, [pc, #152]	@ (8001698 <SCommands_Init+0x150>)
 80015fe:	2016      	movs	r0, #22
 8001600:	f001 ff70 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (23, SCommands_MoveFilterLeft);
 8001604:	4925      	ldr	r1, [pc, #148]	@ (800169c <SCommands_Init+0x154>)
 8001606:	2017      	movs	r0, #23
 8001608:	f001 ff6c 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (24, SCommands_MoveFilterRight);
 800160c:	4924      	ldr	r1, [pc, #144]	@ (80016a0 <SCommands_Init+0x158>)
 800160e:	2018      	movs	r0, #24
 8001610:	f001 ff68 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (25, SCommands_SelectFilter);
 8001614:	4923      	ldr	r1, [pc, #140]	@ (80016a4 <SCommands_Init+0x15c>)
 8001616:	2019      	movs	r0, #25
 8001618:	f001 ff64 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (26, SCommands_SelectGratingWL);
 800161c:	4922      	ldr	r1, [pc, #136]	@ (80016a8 <SCommands_Init+0x160>)
 800161e:	201a      	movs	r0, #26
 8001620:	f001 ff60 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (27, SCommands_MoveGratingLeft);
 8001624:	4921      	ldr	r1, [pc, #132]	@ (80016ac <SCommands_Init+0x164>)
 8001626:	201b      	movs	r0, #27
 8001628:	f001 ff5c 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (28, SCommands_MoveGratingRight);
 800162c:	4920      	ldr	r1, [pc, #128]	@ (80016b0 <SCommands_Init+0x168>)
 800162e:	201c      	movs	r0, #28
 8001630:	f001 ff58 	bl	80034e4 <HESP32_SetCommandCallbackArgFunction>

	HESP32_InitInterface();
 8001634:	f001 feec 	bl	8003410 <HESP32_InitInterface>

	return E_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	080016b5 	.word	0x080016b5
 8001644:	08001701 	.word	0x08001701
 8001648:	0800173d 	.word	0x0800173d
 800164c:	08001779 	.word	0x08001779
 8001650:	080017b9 	.word	0x080017b9
 8001654:	080017f5 	.word	0x080017f5
 8001658:	08001831 	.word	0x08001831
 800165c:	08001a79 	.word	0x08001a79
 8001660:	08001ae3 	.word	0x08001ae3
 8001664:	08001b29 	.word	0x08001b29
 8001668:	08001b6f 	.word	0x08001b6f
 800166c:	08001bb5 	.word	0x08001bb5
 8001670:	08001cb5 	.word	0x08001cb5
 8001674:	08001ce9 	.word	0x08001ce9
 8001678:	08001c09 	.word	0x08001c09
 800167c:	08001c4d 	.word	0x08001c4d
 8001680:	08001c81 	.word	0x08001c81
 8001684:	08001df5 	.word	0x08001df5
 8001688:	08001f45 	.word	0x08001f45
 800168c:	08001f95 	.word	0x08001f95
 8001690:	08002241 	.word	0x08002241
 8001694:	0800243d 	.word	0x0800243d
 8001698:	08002491 	.word	0x08002491
 800169c:	08002535 	.word	0x08002535
 80016a0:	080024e5 	.word	0x080024e5
 80016a4:	08002585 	.word	0x08002585
 80016a8:	080025d1 	.word	0x080025d1
 80016ac:	08002625 	.word	0x08002625
 80016b0:	08002675 	.word	0x08002675

080016b4 <SCommands_GetUVStatus>:

void SCommands_GetUVStatus(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f001 fbd4 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint8 Loc_uint8LampStatus = MGPIO_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	71fb      	strb	r3, [r7, #7]
	MGPIO_GetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, &Loc_uint8LampStatus);
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	461a      	mov	r2, r3
 80016c8:	2109      	movs	r1, #9
 80016ca:	2000      	movs	r0, #0
 80016cc:	f003 fe88 	bl	80053e0 <MGPIO_GetPinValue>
	if(Loc_uint8LampStatus == MGPIO_LOW)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <SCommands_GetUVStatus+0x2a>
	{
		HESP32_SendCommand("on");
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <SCommands_GetUVStatus+0x44>)
 80016d8:	f001 fec8 	bl	800346c <HESP32_SendCommand>
 80016dc:	e005      	b.n	80016ea <SCommands_GetUVStatus+0x36>
	}
	else if(Loc_uint8LampStatus == MGPIO_HIGH)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <SCommands_GetUVStatus+0x36>
	{
		HESP32_SendCommand("off");
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <SCommands_GetUVStatus+0x48>)
 80016e6:	f001 fec1 	bl	800346c <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f001 fbbc 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800c4a8 	.word	0x0800c4a8
 80016fc:	0800c4ac 	.word	0x0800c4ac

08001700 <SCommands_SetUVOn>:


void SCommands_SetUVOn(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
//	HESP32_SendCommand("on");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8001706:	2101      	movs	r1, #1
 8001708:	2000      	movs	r0, #0
 800170a:	f002 faff 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <SCommands_SetUVOn+0x20>
	{
	    HESP32_SendCommand("on");
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <SCommands_SetUVOn+0x34>)
 800171a:	f001 fea7 	bl	800346c <HESP32_SendCommand>
 800171e:	e002      	b.n	8001726 <SCommands_SetUVOn+0x26>
	}
	else
	{
	    HESP32_SendCommand("off");
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <SCommands_SetUVOn+0x38>)
 8001722:	f001 fea3 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001726:	2000      	movs	r0, #0
 8001728:	f001 fb9e 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	0800c4a8 	.word	0x0800c4a8
 8001738:	0800c4ac 	.word	0x0800c4ac

0800173c <SCommands_SetUVOff>:


void SCommands_SetUVOff(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_LOW);
//	HESP32_SendCommand("off");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f002 fae1 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <SCommands_SetUVOff+0x20>
	{
	    HESP32_SendCommand("off");
 8001754:	4806      	ldr	r0, [pc, #24]	@ (8001770 <SCommands_SetUVOff+0x34>)
 8001756:	f001 fe89 	bl	800346c <HESP32_SendCommand>
 800175a:	e002      	b.n	8001762 <SCommands_SetUVOff+0x26>
	}
	else
	{
	    HESP32_SendCommand("on");
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <SCommands_SetUVOff+0x38>)
 800175e:	f001 fe85 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001762:	2000      	movs	r0, #0
 8001764:	f001 fb80 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800c4ac 	.word	0x0800c4ac
 8001774:	0800c4a8 	.word	0x0800c4a8

08001778 <SCommands_GetVisStatus>:


void SCommands_GetVisStatus(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		/*Do nothing*/
//	}
	HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 800177e:	2304      	movs	r3, #4
 8001780:	71fb      	strb	r3, [r7, #7]
	HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	4619      	mov	r1, r3
 8001786:	2001      	movs	r0, #1
 8001788:	f002 fb58 	bl	8003e3c <HPWRSupply_CheckSupplyStatus>
	if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d103      	bne.n	800179a <SCommands_GetVisStatus+0x22>
	{
	    HESP32_SendCommand("on");
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <SCommands_GetVisStatus+0x38>)
 8001794:	f001 fe6a 	bl	800346c <HESP32_SendCommand>
 8001798:	e002      	b.n	80017a0 <SCommands_GetVisStatus+0x28>
	}
	else
	{
	    HESP32_SendCommand("off");
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <SCommands_GetVisStatus+0x3c>)
 800179c:	f001 fe66 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f001 fb61 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800c4a8 	.word	0x0800c4a8
 80017b4:	0800c4ac 	.word	0x0800c4ac

080017b8 <SCommands_SetVisOn>:


void SCommands_SetVisOn(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
//	HESP32_SendCommand("on");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 80017be:	2101      	movs	r1, #1
 80017c0:	2001      	movs	r0, #1
 80017c2:	f002 faa3 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <SCommands_SetVisOn+0x20>
	{
	    HESP32_SendCommand("on");
 80017d0:	4806      	ldr	r0, [pc, #24]	@ (80017ec <SCommands_SetVisOn+0x34>)
 80017d2:	f001 fe4b 	bl	800346c <HESP32_SendCommand>
 80017d6:	e002      	b.n	80017de <SCommands_SetVisOn+0x26>
	}
	else
	{
	    HESP32_SendCommand("off");
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <SCommands_SetVisOn+0x38>)
 80017da:	f001 fe47 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 fb42 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800c4a8 	.word	0x0800c4a8
 80017f0:	0800c4ac 	.word	0x0800c4ac

080017f4 <SCommands_SetVisOff>:


void SCommands_SetVisOff(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
//	SpectroStatus_SetNewStatus(BUSY);
//	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_LOW);
//	HESP32_SendCommand("off");
	Std_ReturnType Loc_uint8UVStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 80017fa:	2100      	movs	r1, #0
 80017fc:	2001      	movs	r0, #1
 80017fe:	f002 fa85 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8UVStatus == E_OK)
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <SCommands_SetVisOff+0x20>
	{
	    HESP32_SendCommand("off");
 800180c:	4806      	ldr	r0, [pc, #24]	@ (8001828 <SCommands_SetVisOff+0x34>)
 800180e:	f001 fe2d 	bl	800346c <HESP32_SendCommand>
 8001812:	e002      	b.n	800181a <SCommands_SetVisOff+0x26>
	}
	else
	{
	    HESP32_SendCommand("on");
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <SCommands_SetVisOff+0x38>)
 8001816:	f001 fe29 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800181a:	2000      	movs	r0, #0
 800181c:	f001 fb24 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	0800c4ac 	.word	0x0800c4ac
 800182c:	0800c4a8 	.word	0x0800c4a8

08001830 <SCommands_GetSupplyVoltages>:

void SCommands_GetSupplyVoltages(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ae      	sub	sp, #184	@ 0xb8
 8001834:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001836:	2001      	movs	r0, #1
 8001838:	f001 fb16 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint16 Loc_uint16VoltageConversion = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	float32 Loc_float32VoltageValue = 0.0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint8 glbl_uint8VoltageBuffer[5][32] = {{0}};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	22a0      	movs	r2, #160	@ 0xa0
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fb79 	bl	8007f4a <memset>
	uint16 Loc_uint16EnteredVoltageConversion = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
	uint16 Loc_uint16_33VoltageConversion = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	80bb      	strh	r3, [r7, #4]
	float32 Loc_float32EnteredVoltageValue = 0.0;
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float32 Loc_float32_33VoltageValue = 0.0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	/*************************************************P12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_POS_12, &Loc_uint16VoltageConversion);
 8001870:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001874:	4619      	mov	r1, r3
 8001876:	2004      	movs	r0, #4
 8001878:	f002 fbc8 	bl	800400c <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 800187c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa19 	bl	8000cb8 <__aeabi_ui2f>
 8001886:	4603      	mov	r3, r0
 8001888:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb1f 	bl	8000ed0 <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	4976      	ldr	r1, [pc, #472]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fa66 	bl	8000d68 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa60 	bl	8000d68 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	float_to_string_manual((glbl_uint8VoltageBuffer[0] + 1),Loc_float32VoltageValue, 3);
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	3301      	adds	r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fc32 	bl	8003124 <float_to_string_manual>
	glbl_uint8VoltageBuffer[0][0] = '+';
 80018c0:	232b      	movs	r3, #43	@ 0x2b
 80018c2:	723b      	strb	r3, [r7, #8]

	/************************************************N12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_NEG_12, &Loc_uint16EnteredVoltageConversion);
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	4619      	mov	r1, r3
 80018c8:	2001      	movs	r0, #1
 80018ca:	f002 fb9f 	bl	800400c <SPWRVolt_GetVoltage>
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16_33VoltageConversion);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	f002 fb9a 	bl	800400c <SPWRVolt_GetVoltage>

	Loc_float32EnteredVoltageValue = (float32)((float32)((float32)Loc_uint16EnteredVoltageConversion / 4096) * 3.3f) ;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9ec 	bl	8000cb8 <__aeabi_ui2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff faf2 	bl	8000ed0 <__aeabi_fdiv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4960      	ldr	r1, [pc, #384]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa39 	bl	8000d68 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	Loc_float32_33VoltageValue = (float32)((float32)((float32)Loc_uint16_33VoltageConversion / 4096) * 3.3f) * 2 ;
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9da 	bl	8000cb8 <__aeabi_ui2f>
 8001904:	4603      	mov	r3, r0
 8001906:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fae0 	bl	8000ed0 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	4957      	ldr	r1, [pc, #348]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa27 	bl	8000d68 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f91a 	bl	8000b58 <__addsf3>
 8001924:	4603      	mov	r3, r0
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	Loc_float32VoltageValue = ((Loc_float32_33VoltageValue - Loc_float32EnteredVoltageValue) * 11) - 3.3f;
 800192a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800192e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001932:	f7ff f90f 	bl	8000b54 <__aeabi_fsub>
 8001936:	4603      	mov	r3, r0
 8001938:	494e      	ldr	r1, [pc, #312]	@ (8001a74 <SCommands_GetSupplyVoltages+0x244>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa14 	bl	8000d68 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	494b      	ldr	r1, [pc, #300]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f905 	bl	8000b54 <__aeabi_fsub>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf((glbl_uint8VoltageBuffer + 1), (sizeof(glbl_uint8VoltageBuffer) - 1), "%.*f", 3,Loc_float32FinalVoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[1] + 1),Loc_float32VoltageValue, 3);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	3320      	adds	r3, #32
 8001956:	3301      	adds	r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fbe0 	bl	8003124 <float_to_string_manual>
	glbl_uint8VoltageBuffer[1][0] = '-';
 8001964:	232d      	movs	r3, #45	@ 0x2d
 8001966:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	/************************************************P5*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_5, &Loc_uint16VoltageConversion);
 800196a:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 800196e:	4619      	mov	r1, r3
 8001970:	2003      	movs	r0, #3
 8001972:	f002 fb4b 	bl	800400c <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = ((float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f)) * 2;
 8001976:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f99c 	bl	8000cb8 <__aeabi_ui2f>
 8001980:	4603      	mov	r3, r0
 8001982:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff faa2 	bl	8000ed0 <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	4938      	ldr	r1, [pc, #224]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9e9 	bl	8000d68 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f8dc 	bl	8000b58 <__addsf3>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[2]),Loc_float32VoltageValue, 3);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	3340      	adds	r3, #64	@ 0x40
 80019ac:	2203      	movs	r2, #3
 80019ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fbb6 	bl	8003124 <float_to_string_manual>

	/***********************************************P3.3****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16VoltageConversion);
 80019b8:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 80019bc:	4619      	mov	r1, r3
 80019be:	2000      	movs	r0, #0
 80019c0:	f002 fb24 	bl	800400c <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 2;
 80019c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f975 	bl	8000cb8 <__aeabi_ui2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fa7b 	bl	8000ed0 <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	4924      	ldr	r1, [pc, #144]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9c2 	bl	8000d68 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f8b5 	bl	8000b58 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[3]),Loc_float32VoltageValue, 3);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	3360      	adds	r3, #96	@ 0x60
 80019fa:	2203      	movs	r2, #3
 80019fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fb8f 	bl	8003124 <float_to_string_manual>

	/***********************************************Supply 12***********************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_12, &Loc_uint16VoltageConversion);
 8001a06:	f107 03aa 	add.w	r3, r7, #170	@ 0xaa
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f002 fafd 	bl	800400c <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 8001a12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f94e 	bl	8000cb8 <__aeabi_ui2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa54 	bl	8000ed0 <__aeabi_fdiv>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4911      	ldr	r1, [pc, #68]	@ (8001a70 <SCommands_GetSupplyVoltages+0x240>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f99b 	bl	8000d68 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f995 	bl	8000d68 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[4]),Loc_float32VoltageValue, 3);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	3380      	adds	r3, #128	@ 0x80
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fb67 	bl	8003124 <float_to_string_manual>

	/*******************************************Send Voltages***********************************************/
	HESP32_SendVoltages(glbl_uint8VoltageBuffer);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fe3e 	bl	80036dc <HESP32_SendVoltages>
	SpectroStatus_SetNewStatus(IDLE);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 fa01 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001a66:	bf00      	nop
 8001a68:	37b8      	adds	r7, #184	@ 0xb8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40533333 	.word	0x40533333
 8001a74:	41300000 	.word	0x41300000

08001a78 <SCommands_SendCurrentMotorsSteps>:


void SCommands_SendCurrentMotorsSteps   (void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f001 f9f2 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32MotorsCurrentSteps[3] = {0};
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
	uint32 Loc_uint32CurrentWL = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
	uint8 Loc_uint8Index = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]

	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	e00c      	b.n	8001ab8 <SCommands_SendCurrentMotorsSteps+0x40>
	{
		HMOTOR_GetCurrentMotorSteps(Loc_uint8Index, &Loc_uint32MotorsCurrentSteps[Loc_uint8Index]);
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f107 0208 	add.w	r2, r7, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	441a      	add	r2, r3
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fefd 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d9ef      	bls.n	8001a9e <SCommands_SendCurrentMotorsSteps+0x26>
	}
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 ff11 	bl	80048e8 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(Loc_uint32MotorsCurrentSteps, &Loc_uint32CurrentWL, 3);
 8001ac6:	1d39      	adds	r1, r7, #4
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	2203      	movs	r2, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fd2a 	bl	8003528 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f001 f9c7 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <SCommands_HomeLampMotor>:


void SCommands_HomeLampMotor    (void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f001 f9bd 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32LampCurrentSteps = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f002 fe26 	bl	8004748 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampCurrentSteps);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	2000      	movs	r0, #0
 8001b02:	f002 fed3 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b06:	463b      	mov	r3, r7
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 feed 	bl	80048e8 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32LampCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b0e:	4639      	mov	r1, r7
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2201      	movs	r2, #1
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fd07 	bl	8003528 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f001 f9a4 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SCommands_HomeWLSelectMotor>:


void SCommands_HomeWLSelectMotor (void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f99a 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32WLCurrentSteps = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f002 fe03 	bl	8004748 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32WLCurrentSteps);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	2002      	movs	r0, #2
 8001b48:	f002 feb0 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 feca 	bl	80048e8 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32WLCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b54:	4639      	mov	r1, r7
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fce4 	bl	8003528 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f001 f981 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <SCommands_HomeFilterSelectMotor>:


void SCommands_HomeFilterSelectMotor  (void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f001 f977 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32FilterCurrentSteps = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f002 fde0 	bl	8004748 <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_FILTER_SELECT, &Loc_uint32FilterCurrentSteps);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f002 fe8d 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b92:	463b      	mov	r3, r7
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fea7 	bl	80048e8 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32FilterCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b9a:	4639      	mov	r1, r7
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fcc1 	bl	8003528 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f001 f95e 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SCommands_SendCurrentWL>:


void SCommands_SendCurrentWL    (void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f001 f954 	bl	8002e68 <SpectroStatus_SetNewStatus>
	uint8 P_uint8WL[20] = {0};
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
	uint32 Loc_uint32CurrentWL = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fe85 	bl	80048e8 <HMOTOR_GetCurrentWL>
	//snprintf(P_uint8WL, sizeof(P_uint8WL), "%d", Loc_uint32CurrentWL);
	float_to_string_manual(P_uint8WL, Loc_uint32CurrentWL, 0);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f869 	bl	8000cb8 <__aeabi_ui2f>
 8001be6:	4601      	mov	r1, r0
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 fa99 	bl	8003124 <float_to_string_manual>
	HESP32_SendCommand(P_uint8WL);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fc39 	bl	800346c <HESP32_SendCommand>
	SpectroStatus_SetNewStatus(IDLE);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f001 f934 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <SCommands_GetLampMotorPosition>:

void SCommands_GetLampMotorPosition(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 f92a 	bl	8002e68 <SpectroStatus_SetNewStatus>

	uint32 Loc_uint32LampSteps = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampSteps);
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f002 fe45 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>

	if(Loc_uint32LampSteps == 0)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <SCommands_GetLampMotorPosition+0x28>
	{
		HESP32_SendCommand("UV Lamp");
 8001c28:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <SCommands_GetLampMotorPosition+0x3c>)
 8001c2a:	f001 fc1f 	bl	800346c <HESP32_SendCommand>
	}
	else
	{
		/*Do nothing*/
	}
}
 8001c2e:	e005      	b.n	8001c3c <SCommands_GetLampMotorPosition+0x34>
	else if(Loc_uint32LampSteps == 100)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d102      	bne.n	8001c3c <SCommands_GetLampMotorPosition+0x34>
		HESP32_SendCommand("VI Lamp");
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <SCommands_GetLampMotorPosition+0x40>)
 8001c38:	f001 fc18 	bl	800346c <HESP32_SendCommand>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800c4b0 	.word	0x0800c4b0
 8001c48:	0800c4b8 	.word	0x0800c4b8

08001c4c <SCommands_SetLampMotorVisible>:

void SCommands_SetLampMotorVisible(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f002 fb1c 	bl	8004290 <HMOTOR_MoveLampMotor>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <SCommands_SetLampMotorVisible+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <SCommands_SetLampMotorVisible+0x2c>)
 8001c64:	f001 fc02 	bl	800346c <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c68:	e002      	b.n	8001c70 <SCommands_SetLampMotorVisible+0x24>
		HESP32_SendCommand("failed to move");
 8001c6a:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <SCommands_SetLampMotorVisible+0x30>)
 8001c6c:	f001 fbfe 	bl	800346c <HESP32_SendCommand>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800c4c0 	.word	0x0800c4c0
 8001c7c:	0800c4c8 	.word	0x0800c4c8

08001c80 <SCommands_SetLampMotorUV>:

void SCommands_SetLampMotorUV(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f002 fb02 	bl	8004290 <HMOTOR_MoveLampMotor>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <SCommands_SetLampMotorUV+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <SCommands_SetLampMotorUV+0x2c>)
 8001c98:	f001 fbe8 	bl	800346c <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c9c:	e002      	b.n	8001ca4 <SCommands_SetLampMotorUV+0x24>
		HESP32_SendCommand("failed to move");
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <SCommands_SetLampMotorUV+0x30>)
 8001ca0:	f001 fbe4 	bl	800346c <HESP32_SendCommand>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800c4c0 	.word	0x0800c4c0
 8001cb0:	0800c4c8 	.word	0x0800c4c8

08001cb4 <SCommands_SendCurrentDateTime>:

void SCommands_SendCurrentDateTime(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f001 f8d4 	bl	8002e68 <SpectroStatus_SetNewStatus>
	Sdate_t current_date;
	Stime_t current_time;

	MRTC_GetDateAndTime(&current_date, &current_time);
 8001cc0:	463a      	mov	r2, r7
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fb8a 	bl	80063e0 <MRTC_GetDateAndTime>

	HESP32_SendDateTime(&current_date, &current_time);
 8001ccc:	463a      	mov	r2, r7
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fc77 	bl	80035c6 <HESP32_SendDateTime>
	SpectroStatus_SetNewStatus(IDLE);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f001 f8c5 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <SCommands_SendCurrentDetectorValues>:

void SCommands_SendCurrentDetectorValues(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f001 f8ba 	bl	8002e68 <SpectroStatus_SetNewStatus>
	float32 Loc_float32Readings[4] = {0.0f};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
	float32 Loc_float32SampleReading = 0.0f;
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
	float32 Loc_float32ReferenceReading = 0.0f;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
	float32 Loc_float32Gain[2] = {0.0f};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]

	read_reference_voltage(&Loc_float32ReferenceReading, &Loc_float32Gain[0]);
 8001d16:	463a      	mov	r2, r7
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fede 	bl	8002ae0 <read_reference_voltage>

	if((Loc_float32Gain[0] > 0.98f) && (Loc_float32Gain[0] < 1.01f))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4931      	ldr	r1, [pc, #196]	@ (8001dec <SCommands_SendCurrentDetectorValues+0x104>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f9d9 	bl	80010e0 <__aeabi_fcmpgt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00c      	beq.n	8001d4e <SCommands_SendCurrentDetectorValues+0x66>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	492e      	ldr	r1, [pc, #184]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f9b3 	bl	80010a4 <__aeabi_fcmplt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <SCommands_SendCurrentDetectorValues+0x66>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e011      	b.n	8001d72 <SCommands_SendCurrentDetectorValues+0x8a>
	}
	else if(Loc_float32Gain[0] > 1.01f)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4927      	ldr	r1, [pc, #156]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f9c4 	bl	80010e0 <__aeabi_fcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <SCommands_SendCurrentDetectorValues+0x8a>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading / Loc_float32Gain[0];
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8b3 	bl	8000ed0 <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	617b      	str	r3, [r7, #20]
	else
	{
		/*Do nothing*/
	}

	read_sample_voltage(&Loc_float32SampleReading, &Loc_float32Gain[1]);
 8001d72:	463b      	mov	r3, r7
 8001d74:	1d1a      	adds	r2, r3, #4
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 ff93 	bl	8002ca8 <read_sample_voltage>

	if((Loc_float32Gain[1] > 0.98f) && (Loc_float32Gain[1] < 1.01f))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4919      	ldr	r1, [pc, #100]	@ (8001dec <SCommands_SendCurrentDetectorValues+0x104>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f9aa 	bl	80010e0 <__aeabi_fcmpgt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <SCommands_SendCurrentDetectorValues+0xc4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4916      	ldr	r1, [pc, #88]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f984 	bl	80010a4 <__aeabi_fcmplt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <SCommands_SendCurrentDetectorValues+0xc4>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e011      	b.n	8001dd0 <SCommands_SendCurrentDetectorValues+0xe8>
	}
	else if(Loc_float32Gain[1] > 1.01f)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4910      	ldr	r1, [pc, #64]	@ (8001df0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f995 	bl	80010e0 <__aeabi_fcmpgt>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <SCommands_SendCurrentDetectorValues+0xe8>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading / Loc_float32Gain[1];
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f884 	bl	8000ed0 <__aeabi_fdiv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	61fb      	str	r3, [r7, #28]
	{
		/*Do nothing*/
	}


	HESP32_SendAllDetectorValues(Loc_float32Readings, Loc_float32Gain);
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fcab 	bl	8003734 <HESP32_SendAllDetectorValues>
	SpectroStatus_SetNewStatus(IDLE);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f001 f842 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	3f7ae148 	.word	0x3f7ae148
 8001df0:	3f8147ae 	.word	0x3f8147ae

08001df4 <SCommands_UpdateDateTime>:

void SCommands_UpdateDateTime(uint8* P_uint8DateTime)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f001 f833 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8DateTime != NULL_PTR)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8089 	beq.w	8001f1c <SCommands_UpdateDateTime+0x128>
	{
		Sdate_t date;
		Stime_t time;

		uint8* Loc_PToken = NULL_PTR;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
		uint8 Loc_uint8Count = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	74fb      	strb	r3, [r7, #19]
		Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8001e12:	2301      	movs	r3, #1
 8001e14:	74bb      	strb	r3, [r7, #18]

		Loc_PToken = strtok(P_uint8DateTime, "/");
 8001e16:	4946      	ldr	r1, [pc, #280]	@ (8001f30 <SCommands_UpdateDateTime+0x13c>)
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f006 f8b1 	bl	8007f80 <strtok>
 8001e1e:	6178      	str	r0, [r7, #20]

		if(Loc_PToken != NULL_PTR)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d05e      	beq.n	8001ee4 <SCommands_UpdateDateTime+0xf0>
		{
			date.m_months = atoi(Loc_PToken);
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f005 f8f8 	bl	800701c <atoi>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	73bb      	strb	r3, [r7, #14]

			while(Loc_PToken != NULL_PTR)
 8001e32:	e054      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
			{
				Loc_uint8Count++;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	3301      	adds	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]

				if(Loc_uint8Count < 3)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d81a      	bhi.n	8001e76 <SCommands_UpdateDateTime+0x82>
				{
					Loc_PToken = strtok(NULL_PTR, "/");
 8001e40:	493b      	ldr	r1, [pc, #236]	@ (8001f30 <SCommands_UpdateDateTime+0x13c>)
 8001e42:	2000      	movs	r0, #0
 8001e44:	f006 f89c 	bl	8007f80 <strtok>
 8001e48:	6178      	str	r0, [r7, #20]

					if(Loc_PToken != NULL_PTR)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d046      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d002      	beq.n	8001e5c <SCommands_UpdateDateTime+0x68>
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d007      	beq.n	8001e6a <SCommands_UpdateDateTime+0x76>
 8001e5a:	e040      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						{
						case 1:
						{
							date.m_days = atoi(Loc_PToken);
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f005 f8dd 	bl	800701c <atoi>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73fb      	strb	r3, [r7, #15]
							break;
 8001e68:	e039      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						case 2:
						{
							Loc_PToken = strtok(Loc_PToken, " ");
 8001e6a:	4932      	ldr	r1, [pc, #200]	@ (8001f34 <SCommands_UpdateDateTime+0x140>)
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f006 f887 	bl	8007f80 <strtok>
 8001e72:	6178      	str	r0, [r7, #20]
							break;
 8001e74:	e033      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						}
					}
				}
				else if(Loc_uint8Count == 3)
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d114      	bne.n	8001ea6 <SCommands_UpdateDateTime+0xb2>
				{
					date.m_years = atoi(Loc_PToken);
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f005 f8cd 	bl	800701c <atoi>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	81bb      	strh	r3, [r7, #12]
					Loc_PToken = strtok(NULL_PTR, ":");
 8001e88:	492b      	ldr	r1, [pc, #172]	@ (8001f38 <SCommands_UpdateDateTime+0x144>)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f006 f878 	bl	8007f80 <strtok>
 8001e90:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						time.m_hours = atoi(Loc_PToken);
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f005 f8bf 	bl	800701c <atoi>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	723b      	strb	r3, [r7, #8]
 8001ea4:	e01b      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
					}
				}
				else
				{
					Loc_PToken = strtok(NULL_PTR, ":");
 8001ea6:	4924      	ldr	r1, [pc, #144]	@ (8001f38 <SCommands_UpdateDateTime+0x144>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f006 f869 	bl	8007f80 <strtok>
 8001eae:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d013      	beq.n	8001ede <SCommands_UpdateDateTime+0xea>
					{
						switch(Loc_uint8Count)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d002      	beq.n	8001ec2 <SCommands_UpdateDateTime+0xce>
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d007      	beq.n	8001ed0 <SCommands_UpdateDateTime+0xdc>
 8001ec0:	e00d      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						{
						case 4:
						{
							time.m_minutes = atoi(Loc_PToken);
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f005 f8aa 	bl	800701c <atoi>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	727b      	strb	r3, [r7, #9]
							break;
 8001ece:	e006      	b.n	8001ede <SCommands_UpdateDateTime+0xea>
						}
						case 5:
						{
							time.m_seconds = atoi(Loc_PToken);
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f005 f8a3 	bl	800701c <atoi>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	72bb      	strb	r3, [r7, #10]
							break;
 8001edc:	bf00      	nop
			while(Loc_PToken != NULL_PTR)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1a7      	bne.n	8001e34 <SCommands_UpdateDateTime+0x40>
					}
				}
			}
		}

		if(Loc_uint8Count == 6)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d114      	bne.n	8001f14 <SCommands_UpdateDateTime+0x120>
		{
			Loc_uint8FuncStatus = MRTC_SetDateAndTime(&date, &time);
 8001eea:	f107 0208 	add.w	r2, r7, #8
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fa1f 	bl	8006338 <MRTC_SetDateAndTime>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74bb      	strb	r3, [r7, #18]
			if(Loc_uint8FuncStatus == E_OK)
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <SCommands_UpdateDateTime+0x118>
			{
				HESP32_SendCommand("time update success");
 8001f04:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <SCommands_UpdateDateTime+0x148>)
 8001f06:	f001 fab1 	bl	800346c <HESP32_SendCommand>
 8001f0a:	e00a      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
			}
			else
			{
				HESP32_SendCommand("time update failed");
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f0e:	f001 faad 	bl	800346c <HESP32_SendCommand>
 8001f12:	e006      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
			}
		}
		else
		{
			HESP32_SendCommand("time update failed");
 8001f14:	480a      	ldr	r0, [pc, #40]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f16:	f001 faa9 	bl	800346c <HESP32_SendCommand>
 8001f1a:	e002      	b.n	8001f22 <SCommands_UpdateDateTime+0x12e>
		}
	}
	else
	{
		HESP32_SendCommand("time update failed");
 8001f1c:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <SCommands_UpdateDateTime+0x14c>)
 8001f1e:	f001 faa5 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 ffa0 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800c4d8 	.word	0x0800c4d8
 8001f34:	0800c4dc 	.word	0x0800c4dc
 8001f38:	0800c4e0 	.word	0x0800c4e0
 8001f3c:	0800c4e4 	.word	0x0800c4e4
 8001f40:	0800c4f8 	.word	0x0800c4f8

08001f44 <SCommands_SaveFilterMotorCalibSteps>:
	SpectroStatus_SetNewStatus(IDLE);
}


void SCommands_SaveFilterMotorCalibSteps          (uint8* P_uint8MotorSteps)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f000 ff8b 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8MotorSteps != NULL_PTR)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00f      	beq.n	8001f78 <SCommands_SaveFilterMotorCalibSteps+0x34>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8MotorSteps);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f005 f85f 	bl	800701c <atoi>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint32FilterSteps, 4);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2204      	movs	r2, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	20d8      	movs	r0, #216	@ 0xd8
 8001f6c:	f001 f84e 	bl	800300c <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001f70:	4806      	ldr	r0, [pc, #24]	@ (8001f8c <SCommands_SaveFilterMotorCalibSteps+0x48>)
 8001f72:	f001 fa7b 	bl	800346c <HESP32_SendCommand>
 8001f76:	e002      	b.n	8001f7e <SCommands_SaveFilterMotorCalibSteps+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <SCommands_SaveFilterMotorCalibSteps+0x4c>)
 8001f7a:	f001 fa77 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 ff72 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	0800c50c 	.word	0x0800c50c
 8001f90:	0800c514 	.word	0x0800c514

08001f94 <SCommands_SaveFilterMotorCalibWL>:


void SCommands_SaveFilterMotorCalibWL          (uint8* P_uint8Wavelength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f000 ff63 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8Wavelength != NULL_PTR)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00f      	beq.n	8001fc8 <SCommands_SaveFilterMotorCalibWL+0x34>
	{
		uint32 Loc_uint32FilterWL = atoi(P_uint8Wavelength);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f005 f837 	bl	800701c <atoi>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_WL_MEM_ADDRESS, &Loc_uint32FilterWL, 4);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	20d0      	movs	r0, #208	@ 0xd0
 8001fbc:	f001 f826 	bl	800300c <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001fc0:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <SCommands_SaveFilterMotorCalibWL+0x48>)
 8001fc2:	f001 fa53 	bl	800346c <HESP32_SendCommand>
 8001fc6:	e002      	b.n	8001fce <SCommands_SaveFilterMotorCalibWL+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001fc8:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <SCommands_SaveFilterMotorCalibWL+0x4c>)
 8001fca:	f001 fa4f 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 ff4a 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	0800c50c 	.word	0x0800c50c
 8001fe0:	0800c514 	.word	0x0800c514

08001fe4 <SCommands_ScanOperation>:
//Loc_float32ScanParameters[1] --> end wavelength
//Loc_float32ScanParameters[2] --> wavelength resolution
static volatile float32 Loc_float32ScanParameters[3] = {0.0};

void SCommands_ScanOperation			(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
	static float32 current_steps = 0.0;
	static uint32 flag_UV = 0;
	static uint8 flag_skip = 0;
	static uint32 entry_count = 0;

	if(entry_count == 0)
 8001fea:	4b85      	ldr	r3, [pc, #532]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d107      	bne.n	8002002 <SCommands_ScanOperation+0x1e>
	{
		entry_count = (uint32)glbl_float32StepsPerReading;
 8001ff2:	4b84      	ldr	r3, [pc, #528]	@ (8002204 <SCommands_ScanOperation+0x220>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8a2 	bl	8001140 <__aeabi_f2uiz>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a80      	ldr	r2, [pc, #512]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 8002000:	6013      	str	r3, [r2, #0]
	}
	HMOTOR_StepNoDelay(HMOTOR_WL_SELECT, HMOTORS_CCLKWISE_DIRECTION);
 8002002:	2102      	movs	r1, #2
 8002004:	2002      	movs	r0, #2
 8002006:	f002 fca5 	bl	8004954 <HMOTOR_StepNoDelay>

	if(entry_count == 1)
 800200a:	4b7d      	ldr	r3, [pc, #500]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 80ec 	bne.w	80021ec <SCommands_ScanOperation+0x208>
	{
		entry_count = (uint32)glbl_float32StepsPerReading;
 8002014:	4b7b      	ldr	r3, [pc, #492]	@ (8002204 <SCommands_ScanOperation+0x220>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f891 	bl	8001140 <__aeabi_f2uiz>
 800201e:	4603      	mov	r3, r0
 8002020:	4a77      	ldr	r2, [pc, #476]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 8002022:	6013      	str	r3, [r2, #0]
		current_steps += glbl_float32StepsPerReading;
 8002024:	4b77      	ldr	r3, [pc, #476]	@ (8002204 <SCommands_ScanOperation+0x220>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a77      	ldr	r2, [pc, #476]	@ (8002208 <SCommands_ScanOperation+0x224>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fd92 	bl	8000b58 <__addsf3>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b73      	ldr	r3, [pc, #460]	@ (8002208 <SCommands_ScanOperation+0x224>)
 800203a:	601a      	str	r2, [r3, #0]
	//	{
	//		current_steps -= 0.5f;
	//		current_steps ++;
	//		skipped++;
	//	}
		if((((uint32)(current_steps * 10) % 10) == 0))
 800203c:	4b72      	ldr	r3, [pc, #456]	@ (8002208 <SCommands_ScanOperation+0x224>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4972      	ldr	r1, [pc, #456]	@ (800220c <SCommands_ScanOperation+0x228>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe90 	bl	8000d68 <__aeabi_fmul>
 8002048:	4603      	mov	r3, r0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f878 	bl	8001140 <__aeabi_f2uiz>
 8002050:	4601      	mov	r1, r0
 8002052:	4b6f      	ldr	r3, [pc, #444]	@ (8002210 <SCommands_ScanOperation+0x22c>)
 8002054:	fba3 2301 	umull	r2, r3, r3, r1
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	1aca      	subs	r2, r1, r3
 8002064:	2a00      	cmp	r2, #0
 8002066:	d102      	bne.n	800206e <SCommands_ScanOperation+0x8a>
		{
			flag_skip = 0;
 8002068:	4b6a      	ldr	r3, [pc, #424]	@ (8002214 <SCommands_ScanOperation+0x230>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		}
		if((((uint32)(current_steps * 10) % 5) == 0) && (((uint32)(current_steps * 10) % 10) != 0) && (flag_skip == 0))
 800206e:	4b66      	ldr	r3, [pc, #408]	@ (8002208 <SCommands_ScanOperation+0x224>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4966      	ldr	r1, [pc, #408]	@ (800220c <SCommands_ScanOperation+0x228>)
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe77 	bl	8000d68 <__aeabi_fmul>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f85f 	bl	8001140 <__aeabi_f2uiz>
 8002082:	4601      	mov	r1, r0
 8002084:	4b62      	ldr	r3, [pc, #392]	@ (8002210 <SCommands_ScanOperation+0x22c>)
 8002086:	fba3 2301 	umull	r2, r3, r3, r1
 800208a:	089a      	lsrs	r2, r3, #2
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	1aca      	subs	r2, r1, r3
 8002094:	2a00      	cmp	r2, #0
 8002096:	d125      	bne.n	80020e4 <SCommands_ScanOperation+0x100>
 8002098:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <SCommands_ScanOperation+0x224>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	495b      	ldr	r1, [pc, #364]	@ (800220c <SCommands_ScanOperation+0x228>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe62 	bl	8000d68 <__aeabi_fmul>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f84a 	bl	8001140 <__aeabi_f2uiz>
 80020ac:	4601      	mov	r1, r0
 80020ae:	4b58      	ldr	r3, [pc, #352]	@ (8002210 <SCommands_ScanOperation+0x22c>)
 80020b0:	fba3 2301 	umull	r2, r3, r3, r1
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	1aca      	subs	r2, r1, r3
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d00f      	beq.n	80020e4 <SCommands_ScanOperation+0x100>
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <SCommands_ScanOperation+0x230>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <SCommands_ScanOperation+0x100>
		{
			flag_skip = 1;
 80020cc:	4b51      	ldr	r3, [pc, #324]	@ (8002214 <SCommands_ScanOperation+0x230>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
			entry_count = 1;
 80020d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
			skipped++;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002218 <SCommands_ScanOperation+0x234>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a4e      	ldr	r2, [pc, #312]	@ (8002218 <SCommands_ScanOperation+0x234>)
 80020e0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		entry_count--;
	}
}
 80020e2:	e088      	b.n	80021f6 <SCommands_ScanOperation+0x212>
			glbl_uint32FunctionCounter++;
 80020e4:	4b4d      	ldr	r3, [pc, #308]	@ (800221c <SCommands_ScanOperation+0x238>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <SCommands_ScanOperation+0x238>)
 80020ec:	6013      	str	r3, [r2, #0]
			float32 de7k1 = 0.0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
			float32 de7k2 = 0.0;
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
			read_reference_voltage(&de7k1, &gain_ref);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4948      	ldr	r1, [pc, #288]	@ (8002220 <SCommands_ScanOperation+0x23c>)
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fced 	bl	8002ae0 <read_reference_voltage>
			read_sample_voltage(&de7k2, &gain_sample);
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4946      	ldr	r1, [pc, #280]	@ (8002224 <SCommands_ScanOperation+0x240>)
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fdcb 	bl	8002ca8 <read_sample_voltage>
			MUART_SendIntegerValue(UART3, glbl_uint32FunctionCounter);
 8002112:	4b42      	ldr	r3, [pc, #264]	@ (800221c <SCommands_ScanOperation+0x238>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	2002      	movs	r0, #2
 800211a:	f004 fdb7 	bl	8006c8c <MUART_SendIntegerValue>
			MUART_TxChar(UART3, ':');
 800211e:	213a      	movs	r1, #58	@ 0x3a
 8002120:	2002      	movs	r0, #2
 8002122:	f004 fcff 	bl	8006b24 <MUART_TxChar>
			MUART_TxChar(UART3, ' ');
 8002126:	2120      	movs	r1, #32
 8002128:	2002      	movs	r0, #2
 800212a:	f004 fcfb 	bl	8006b24 <MUART_TxChar>
			HESP32_SendIntensities(de7k1, de7k2);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f001 fa99 	bl	800366c <HESP32_SendIntensities>
			Loc_float32ScanParameters[1] -= Loc_float32ScanParameters[2];
 800213a:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <SCommands_ScanOperation+0x244>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <SCommands_ScanOperation+0x244>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fd05 	bl	8000b54 <__aeabi_fsub>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b36      	ldr	r3, [pc, #216]	@ (8002228 <SCommands_ScanOperation+0x244>)
 8002150:	605a      	str	r2, [r3, #4]
			if((Loc_float32ScanParameters[1] < 326.0f) && (flag_UV == 0))
 8002152:	4b35      	ldr	r3, [pc, #212]	@ (8002228 <SCommands_ScanOperation+0x244>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4935      	ldr	r1, [pc, #212]	@ (800222c <SCommands_ScanOperation+0x248>)
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ffa3 	bl	80010a4 <__aeabi_fcmplt>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00f      	beq.n	8002184 <SCommands_ScanOperation+0x1a0>
 8002164:	4b32      	ldr	r3, [pc, #200]	@ (8002230 <SCommands_ScanOperation+0x24c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <SCommands_ScanOperation+0x1a0>
				MGPTMR_StopTimer(MGPTMR2);
 800216c:	2000      	movs	r0, #0
 800216e:	f003 faab 	bl	80056c8 <MGPTMR_StopTimer>
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002172:	2000      	movs	r0, #0
 8002174:	f002 f88c 	bl	8004290 <HMOTOR_MoveLampMotor>
				flag_UV = 1;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <SCommands_ScanOperation+0x24c>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
				MGPTMR_StartTimer(MGPTMR2);
 800217e:	2000      	movs	r0, #0
 8002180:	f003 fa82 	bl	8005688 <MGPTMR_StartTimer>
			if(glbl_uint32FunctionCounter == glbl_uint32NoOfRead)
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <SCommands_ScanOperation+0x238>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <SCommands_ScanOperation+0x250>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d132      	bne.n	80021f6 <SCommands_ScanOperation+0x212>
				MGPTMR_StopTimer(MGPTMR2);
 8002190:	2000      	movs	r0, #0
 8002192:	f003 fa99 	bl	80056c8 <MGPTMR_StopTimer>
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 8002196:	2100      	movs	r1, #0
 8002198:	2000      	movs	r0, #0
 800219a:	f001 fdb7 	bl	8003d0c <HPWRSupply_SetSupplyMode>
				HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 800219e:	2100      	movs	r1, #0
 80021a0:	2001      	movs	r0, #1
 80021a2:	f001 fdb3 	bl	8003d0c <HPWRSupply_SetSupplyMode>
				uint32 steps = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
				HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &steps);
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	2002      	movs	r0, #2
 80021b0:	f002 fb7c 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
				MUART_TxString(UART3, "WL Current Steps = ");
 80021b4:	4920      	ldr	r1, [pc, #128]	@ (8002238 <SCommands_ScanOperation+0x254>)
 80021b6:	2002      	movs	r0, #2
 80021b8:	f004 fd1e 	bl	8006bf8 <MUART_TxString>
				MUART_SendIntegerValue(UART3, steps);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	2002      	movs	r0, #2
 80021c2:	f004 fd63 	bl	8006c8c <MUART_SendIntegerValue>
				MUART_TxChar(UART3, '\n');
 80021c6:	210a      	movs	r1, #10
 80021c8:	2002      	movs	r0, #2
 80021ca:	f004 fcab 	bl	8006b24 <MUART_TxChar>
				MUART_TxString(UART3, "Skipped = ");
 80021ce:	491b      	ldr	r1, [pc, #108]	@ (800223c <SCommands_ScanOperation+0x258>)
 80021d0:	2002      	movs	r0, #2
 80021d2:	f004 fd11 	bl	8006bf8 <MUART_TxString>
				MUART_SendIntegerValue(UART3, skipped);
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <SCommands_ScanOperation+0x234>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	2002      	movs	r0, #2
 80021de:	f004 fd55 	bl	8006c8c <MUART_SendIntegerValue>
				MUART_TxChar(UART3, '\n');
 80021e2:	210a      	movs	r1, #10
 80021e4:	2002      	movs	r0, #2
 80021e6:	f004 fc9d 	bl	8006b24 <MUART_TxChar>
}
 80021ea:	e004      	b.n	80021f6 <SCommands_ScanOperation+0x212>
		entry_count--;
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	4a03      	ldr	r2, [pc, #12]	@ (8002200 <SCommands_ScanOperation+0x21c>)
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000650 	.word	0x20000650
 8002204:	20000640 	.word	0x20000640
 8002208:	20000654 	.word	0x20000654
 800220c:	41200000 	.word	0x41200000
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	20000658 	.word	0x20000658
 8002218:	2000065c 	.word	0x2000065c
 800221c:	20000660 	.word	0x20000660
 8002220:	20000634 	.word	0x20000634
 8002224:	20000638 	.word	0x20000638
 8002228:	20000644 	.word	0x20000644
 800222c:	43a30000 	.word	0x43a30000
 8002230:	20000664 	.word	0x20000664
 8002234:	2000063c 	.word	0x2000063c
 8002238:	0800c524 	.word	0x0800c524
 800223c:	0800c538 	.word	0x0800c538

08002240 <SCommands_StartOperation>:
void SCommands_StartOperation         	(uint8* P_uint8ScanParam)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b08b      	sub	sp, #44	@ 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fe0d 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8ScanParam != NULL_PTR)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80da 	beq.w	800240a <SCommands_StartOperation+0x1ca>
	{
		uint8* P_uint8Token = NULL_PTR;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8 Loc_uint8Index = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		float32 Loc_float32RefIntensity = 0.0;
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
		float32 Loc_float32SampleIntensity = 0.0;
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

		// separate the string input P_uint8ScanParam to three strings
		P_uint8Token = strtok(P_uint8ScanParam, " ");
 800226c:	496a      	ldr	r1, [pc, #424]	@ (8002418 <SCommands_StartOperation+0x1d8>)
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f005 fe86 	bl	8007f80 <strtok>
 8002274:	6278      	str	r0, [r7, #36]	@ 0x24
		Loc_float32ScanParameters[Loc_uint8Index] = atof(P_uint8Token);
 8002276:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002278:	f004 fecd 	bl	8007016 <atof>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc10 	bl	8000aac <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	4a63      	ldr	r2, [pc, #396]	@ (800241c <SCommands_StartOperation+0x1dc>)
 8002290:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		Loc_uint8Index++;
 8002294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002298:	3301      	adds	r3, #1
 800229a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 800229e:	e017      	b.n	80022d0 <SCommands_StartOperation+0x90>
		{
			P_uint8Token = strtok(NULL_PTR, " ");
 80022a0:	495d      	ldr	r1, [pc, #372]	@ (8002418 <SCommands_StartOperation+0x1d8>)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f005 fe6c 	bl	8007f80 <strtok>
 80022a8:	6278      	str	r0, [r7, #36]	@ 0x24
			Loc_float32ScanParameters[Loc_uint8Index++] = atof(P_uint8Token);
 80022aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022ac:	f004 feb3 	bl	8007016 <atof>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 80022b8:	1c48      	adds	r0, r1, #1
 80022ba:	f887 0023 	strb.w	r0, [r7, #35]	@ 0x23
 80022be:	460c      	mov	r4, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fbf2 	bl	8000aac <__aeabi_d2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a54      	ldr	r2, [pc, #336]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80022cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <SCommands_StartOperation+0x9e>
 80022d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d9e0      	bls.n	80022a0 <SCommands_StartOperation+0x60>
		}

		if(Loc_uint8Index == 3)
 80022de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	f040 8091 	bne.w	800240a <SCommands_StartOperation+0x1ca>
		{
			float32 temp = 0.0;
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]

			if(Loc_float32ScanParameters[0] > Loc_float32ScanParameters[1])
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80022f4:	6852      	ldr	r2, [r2, #4]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fef1 	bl	80010e0 <__aeabi_fcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <SCommands_StartOperation+0xd8>
			{
				temp = Loc_float32ScanParameters[0];
 8002304:	4b45      	ldr	r3, [pc, #276]	@ (800241c <SCommands_StartOperation+0x1dc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61fb      	str	r3, [r7, #28]
				Loc_float32ScanParameters[0] = Loc_float32ScanParameters[1];
 800230a:	4b44      	ldr	r3, [pc, #272]	@ (800241c <SCommands_StartOperation+0x1dc>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a43      	ldr	r2, [pc, #268]	@ (800241c <SCommands_StartOperation+0x1dc>)
 8002310:	6013      	str	r3, [r2, #0]
				Loc_float32ScanParameters[1] = temp;
 8002312:	4a42      	ldr	r2, [pc, #264]	@ (800241c <SCommands_StartOperation+0x1dc>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	6053      	str	r3, [r2, #4]
			}

			HMOTOR_MoveWLSelectMotor(Loc_float32ScanParameters[1]);
 8002318:	4b40      	ldr	r3, [pc, #256]	@ (800241c <SCommands_StartOperation+0x1dc>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f002 f99b 	bl	8004658 <HMOTOR_MoveWLSelectMotor>
			uint32 steps = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
			HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &steps);
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4619      	mov	r1, r3
 800232c:	2002      	movs	r0, #2
 800232e:	f002 fabd 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
			MUART_TxString(UART3, "WL Current Steps = ");
 8002332:	493b      	ldr	r1, [pc, #236]	@ (8002420 <SCommands_StartOperation+0x1e0>)
 8002334:	2002      	movs	r0, #2
 8002336:	f004 fc5f 	bl	8006bf8 <MUART_TxString>
			MUART_SendIntegerValue(UART3, steps);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4619      	mov	r1, r3
 800233e:	2002      	movs	r0, #2
 8002340:	f004 fca4 	bl	8006c8c <MUART_SendIntegerValue>
			MUART_TxChar(UART3, '\n');
 8002344:	210a      	movs	r1, #10
 8002346:	2002      	movs	r0, #2
 8002348:	f004 fbec 	bl	8006b24 <MUART_TxChar>

			HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 800234c:	2101      	movs	r1, #1
 800234e:	2000      	movs	r0, #0
 8002350:	f001 fcdc 	bl	8003d0c <HPWRSupply_SetSupplyMode>
			HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002354:	2101      	movs	r1, #1
 8002356:	2001      	movs	r0, #1
 8002358:	f001 fcd8 	bl	8003d0c <HPWRSupply_SetSupplyMode>

			if(Loc_float32ScanParameters[1] >= 326)
 800235c:	4b2f      	ldr	r3, [pc, #188]	@ (800241c <SCommands_StartOperation+0x1dc>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4930      	ldr	r1, [pc, #192]	@ (8002424 <SCommands_StartOperation+0x1e4>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe feb2 	bl	80010cc <__aeabi_fcmpge>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <SCommands_StartOperation+0x136>
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 800236e:	2001      	movs	r0, #1
 8002370:	f001 ff8e 	bl	8004290 <HMOTOR_MoveLampMotor>
 8002374:	e002      	b.n	800237c <SCommands_StartOperation+0x13c>
			}
			else
			{
				HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002376:	2000      	movs	r0, #0
 8002378:	f001 ff8a 	bl	8004290 <HMOTOR_MoveLampMotor>
			}

			read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4929      	ldr	r1, [pc, #164]	@ (8002428 <SCommands_StartOperation+0x1e8>)
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fbac 	bl	8002ae0 <read_reference_voltage>
			read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4927      	ldr	r1, [pc, #156]	@ (800242c <SCommands_StartOperation+0x1ec>)
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fc8a 	bl	8002ca8 <read_sample_voltage>

			HESP32_SendIntensities(Loc_float32RefIntensity, Loc_float32SampleIntensity);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f001 f966 	bl	800366c <HESP32_SendIntensities>

			glbl_uint32NoOfRead = roundf((Loc_float32ScanParameters[1] - Loc_float32ScanParameters[0])\
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fbd2 	bl	8000b54 <__aeabi_fsub>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
											/ Loc_float32ScanParameters[2]);
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
			glbl_uint32NoOfRead = roundf((Loc_float32ScanParameters[1] - Loc_float32ScanParameters[0])\
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7fe fd88 	bl	8000ed0 <__aeabi_fdiv>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 f99e 	bl	800b704 <roundf>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe feb8 	bl	8001140 <__aeabi_f2uiz>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <SCommands_StartOperation+0x1f0>)
 80023d4:	6013      	str	r3, [r2, #0]
			//glbl_uint32NoOfRead--;

			float32 de7k = 0;
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
			HMOTOR_GetStepsPerNm(&de7k);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 fb23 	bl	8004a2c <HMOTOR_GetStepsPerNm>
			glbl_float32StepsPerReading = Loc_float32ScanParameters[2] * de7k;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <SCommands_StartOperation+0x1dc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fcba 	bl	8000d68 <__aeabi_fmul>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <SCommands_StartOperation+0x1f4>)
 80023fa:	601a      	str	r2, [r3, #0]
			MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SCommands_ScanOperation);
 80023fc:	490e      	ldr	r1, [pc, #56]	@ (8002438 <SCommands_StartOperation+0x1f8>)
 80023fe:	2000      	movs	r0, #0
 8002400:	f003 f9a4 	bl	800574c <MGPTMR_SetTimerUpdateCallbackFunc>
			MGPTMR_StartTimer(MGPTMR2);
 8002404:	2000      	movs	r0, #0
 8002406:	f003 f93f 	bl	8005688 <MGPTMR_StartTimer>
	}
	else
	{
		/*Do nothing*/
	}
	SpectroStatus_SetNewStatus(IDLE);
 800240a:	2000      	movs	r0, #0
 800240c:	f000 fd2c 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002410:	bf00      	nop
 8002412:	372c      	adds	r7, #44	@ 0x2c
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	0800c4dc 	.word	0x0800c4dc
 800241c:	20000644 	.word	0x20000644
 8002420:	0800c524 	.word	0x0800c524
 8002424:	43a30000 	.word	0x43a30000
 8002428:	20000634 	.word	0x20000634
 800242c:	20000638 	.word	0x20000638
 8002430:	2000063c 	.word	0x2000063c
 8002434:	20000640 	.word	0x20000640
 8002438:	08001fe5 	.word	0x08001fe5

0800243c <SCommands_SetReferenceGain>:

void SCommands_SetReferenceGain(uint8* P_uint8GainToBeSet)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002444:	2001      	movs	r0, #1
 8002446:	f000 fd0f 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d011      	beq.n	8002474 <SCommands_SetReferenceGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f004 fde0 	bl	8007016 <atof>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fb25 	bl	8000aac <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	60fb      	str	r3, [r7, #12]
		Set_Reference_Gain(Loc_uint32GainToBeSet);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f001 fab0 	bl	80039cc <Set_Reference_Gain>
		HESP32_SendCommand("applied");
 800246c:	4806      	ldr	r0, [pc, #24]	@ (8002488 <SCommands_SetReferenceGain+0x4c>)
 800246e:	f000 fffd 	bl	800346c <HESP32_SendCommand>
 8002472:	e002      	b.n	800247a <SCommands_SetReferenceGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 8002474:	4805      	ldr	r0, [pc, #20]	@ (800248c <SCommands_SetReferenceGain+0x50>)
 8002476:	f000 fff9 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800247a:	2000      	movs	r0, #0
 800247c:	f000 fcf4 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	0800c544 	.word	0x0800c544
 800248c:	0800c54c 	.word	0x0800c54c

08002490 <SCommands_SetSampleGain>:
void SCommands_SetSampleGain(uint8* P_uint8GainToBeSet)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002498:	2001      	movs	r0, #1
 800249a:	f000 fce5 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d011      	beq.n	80024c8 <SCommands_SetSampleGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f004 fdb6 	bl	8007016 <atof>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fafb 	bl	8000aac <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	60fb      	str	r3, [r7, #12]
		Set_Sample_Gain(Loc_uint32GainToBeSet);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f001 fa64 	bl	8003988 <Set_Sample_Gain>
		HESP32_SendCommand("applied");
 80024c0:	4806      	ldr	r0, [pc, #24]	@ (80024dc <SCommands_SetSampleGain+0x4c>)
 80024c2:	f000 ffd3 	bl	800346c <HESP32_SendCommand>
 80024c6:	e002      	b.n	80024ce <SCommands_SetSampleGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <SCommands_SetSampleGain+0x50>)
 80024ca:	f000 ffcf 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 fcca 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800c544 	.word	0x0800c544
 80024e0:	0800c54c 	.word	0x0800c54c

080024e4 <SCommands_MoveFilterRight>:

void SCommands_MoveFilterRight(uint8* P_uint8FilterSteps)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fcbb 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00e      	beq.n	8002516 <SCommands_MoveFilterRight+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f004 fd8f 	bl	800701c <atoi>
 80024fe:	4603      	mov	r3, r0
 8002500:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 8002502:	2304      	movs	r3, #4
 8002504:	2201      	movs	r2, #1
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	2001      	movs	r0, #1
 800250a:	f001 fe33 	bl	8004174 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800250e:	4807      	ldr	r0, [pc, #28]	@ (800252c <SCommands_MoveFilterRight+0x48>)
 8002510:	f000 ffac 	bl	800346c <HESP32_SendCommand>
 8002514:	e002      	b.n	800251c <SCommands_MoveFilterRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002516:	4806      	ldr	r0, [pc, #24]	@ (8002530 <SCommands_MoveFilterRight+0x4c>)
 8002518:	f000 ffa8 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 fca3 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	0800c4c0 	.word	0x0800c4c0
 8002530:	0800c4c8 	.word	0x0800c4c8

08002534 <SCommands_MoveFilterLeft>:
void SCommands_MoveFilterLeft(uint8* P_uint8FilterSteps)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 fc93 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <SCommands_MoveFilterLeft+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f004 fd67 	bl	800701c <atoi>
 800254e:	4603      	mov	r3, r0
 8002550:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 8002552:	2304      	movs	r3, #4
 8002554:	2202      	movs	r2, #2
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	2001      	movs	r0, #1
 800255a:	f001 fe0b 	bl	8004174 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <SCommands_MoveFilterLeft+0x48>)
 8002560:	f000 ff84 	bl	800346c <HESP32_SendCommand>
 8002564:	e002      	b.n	800256c <SCommands_MoveFilterLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <SCommands_MoveFilterLeft+0x4c>)
 8002568:	f000 ff80 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 fc7b 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	0800c4c0 	.word	0x0800c4c0
 8002580:	0800c4c8 	.word	0x0800c4c8

08002584 <SCommands_SelectFilter>:
void SCommands_SelectFilter(uint8* P_uint8FilterSelect)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fc6b 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSelect != NULL_PTR)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <SCommands_SelectFilter+0x2e>
	{
		HMOTOR_Filter_Select_t Loc_uint8FilterSelect = (P_uint8FilterSelect[1] - '0') - 1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3301      	adds	r3, #1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	3b31      	subs	r3, #49	@ 0x31
 80025a0:	73fb      	strb	r3, [r7, #15]
		HMOTOR_MoveFilterMotor(Loc_uint8FilterSelect);
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fea5 	bl	80042f4 <HMOTOR_MoveFilterMotor>
		HESP32_SendCommand("moved");
 80025aa:	4807      	ldr	r0, [pc, #28]	@ (80025c8 <SCommands_SelectFilter+0x44>)
 80025ac:	f000 ff5e 	bl	800346c <HESP32_SendCommand>
 80025b0:	e002      	b.n	80025b8 <SCommands_SelectFilter+0x34>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80025b2:	4806      	ldr	r0, [pc, #24]	@ (80025cc <SCommands_SelectFilter+0x48>)
 80025b4:	f000 ff5a 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f000 fc55 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0800c4c0 	.word	0x0800c4c0
 80025cc:	0800c4c8 	.word	0x0800c4c8

080025d0 <SCommands_SelectGratingWL>:

void SCommands_SelectGratingWL(uint8* P_uint8WL)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80025d8:	2001      	movs	r0, #1
 80025da:	f000 fc45 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8WL != NULL_PTR)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d011      	beq.n	8002608 <SCommands_SelectGratingWL+0x38>
	{
		float32 Loc_float32WL = atof(P_uint8WL);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f004 fd16 	bl	8007016 <atof>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fa5b 	bl	8000aac <__aeabi_d2f>
 80025f6:	4603      	mov	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]
		HMOTOR_MoveWLSelectMotor(Loc_float32WL);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f002 f82c 	bl	8004658 <HMOTOR_MoveWLSelectMotor>
		HESP32_SendCommand("moved");
 8002600:	4806      	ldr	r0, [pc, #24]	@ (800261c <SCommands_SelectGratingWL+0x4c>)
 8002602:	f000 ff33 	bl	800346c <HESP32_SendCommand>
 8002606:	e002      	b.n	800260e <SCommands_SelectGratingWL+0x3e>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002608:	4805      	ldr	r0, [pc, #20]	@ (8002620 <SCommands_SelectGratingWL+0x50>)
 800260a:	f000 ff2f 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800260e:	2000      	movs	r0, #0
 8002610:	f000 fc2a 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	0800c4c0 	.word	0x0800c4c0
 8002620:	0800c4c8 	.word	0x0800c4c8

08002624 <SCommands_MoveGratingLeft>:
void SCommands_MoveGratingLeft(uint8* P_uint8WLSteps)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800262c:	2001      	movs	r0, #1
 800262e:	f000 fc1b 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <SCommands_MoveGratingLeft+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f004 fcef 	bl	800701c <atoi>
 800263e:	4603      	mov	r3, r0
 8002640:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CCLKWISE_DIRECTION, 4);
 8002642:	2304      	movs	r3, #4
 8002644:	2202      	movs	r2, #2
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	2002      	movs	r0, #2
 800264a:	f001 fd93 	bl	8004174 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800264e:	4807      	ldr	r0, [pc, #28]	@ (800266c <SCommands_MoveGratingLeft+0x48>)
 8002650:	f000 ff0c 	bl	800346c <HESP32_SendCommand>
 8002654:	e002      	b.n	800265c <SCommands_MoveGratingLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <SCommands_MoveGratingLeft+0x4c>)
 8002658:	f000 ff08 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800265c:	2000      	movs	r0, #0
 800265e:	f000 fc03 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	0800c4c0 	.word	0x0800c4c0
 8002670:	0800c4c8 	.word	0x0800c4c8

08002674 <SCommands_MoveGratingRight>:
void SCommands_MoveGratingRight(uint8* P_uint8WLSteps)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800267c:	2001      	movs	r0, #1
 800267e:	f000 fbf3 	bl	8002e68 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <SCommands_MoveGratingRight+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f004 fcc7 	bl	800701c <atoi>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CLKWISE_DIRECTION, 4);
 8002692:	2304      	movs	r3, #4
 8002694:	2201      	movs	r2, #1
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	2002      	movs	r0, #2
 800269a:	f001 fd6b 	bl	8004174 <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800269e:	4807      	ldr	r0, [pc, #28]	@ (80026bc <SCommands_MoveGratingRight+0x48>)
 80026a0:	f000 fee4 	bl	800346c <HESP32_SendCommand>
 80026a4:	e002      	b.n	80026ac <SCommands_MoveGratingRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80026a6:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <SCommands_MoveGratingRight+0x4c>)
 80026a8:	f000 fee0 	bl	800346c <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 fbdb 	bl	8002e68 <SpectroStatus_SetNewStatus>
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	0800c4c0 	.word	0x0800c4c0
 80026c0:	0800c4c8 	.word	0x0800c4c8

080026c4 <SPECTRO_InitSystem>:
#include "../../APP/SpectroStatus/SpectroStatus_Interface.h"
#include "../../APP/Signal_Conditioning/signal_conditioning.h"


Std_ReturnType SPECTRO_InitSystem(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(INITIALIZING);
 80026ca:	2002      	movs	r0, #2
 80026cc:	f000 fbcc 	bl	8002e68 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80026d0:	2301      	movs	r3, #1
 80026d2:	71fb      	strb	r3, [r7, #7]
	Loc_uint8InitStatus = SPECTRO_InitSoftware();
 80026d4:	f000 f81c 	bl	8002710 <SPECTRO_InitSoftware>
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8InitStatus == E_OK)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <SPECTRO_InitSystem+0x3c>
	{
		Loc_uint8InitStatus = SPECTRO_InitHardware();
 80026e2:	f000 f877 	bl	80027d4 <SPECTRO_InitHardware>
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <SPECTRO_InitSystem+0x34>
		{
			SpectroStatus_SetNewStatus(IDLE);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f000 fbb9 	bl	8002e68 <SpectroStatus_SetNewStatus>
 80026f6:	e006      	b.n	8002706 <SPECTRO_InitSystem+0x42>
		}
		else
		{
			SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f000 fbb5 	bl	8002e68 <SpectroStatus_SetNewStatus>
 80026fe:	e002      	b.n	8002706 <SPECTRO_InitSystem+0x42>
		}
	}
	else
	{
		SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 fbb1 	bl	8002e68 <SpectroStatus_SetNewStatus>
	}
	return Loc_uint8InitStatus;
 8002706:	79fb      	ldrb	r3, [r7, #7]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <SPECTRO_InitSoftware>:

Std_ReturnType SPECTRO_InitSoftware(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	/***********************************Initialize System Clock***********************************/
	MRCC_InitClock();
 8002716:	f003 fc19 	bl	8005f4c <MRCC_InitClock>

	/***********************************Enable Peripherals' clocks***********************************/

	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPA_EN);
 800271a:	2102      	movs	r1, #2
 800271c:	2003      	movs	r0, #3
 800271e:	f003 fc5d 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPB_EN);
 8002722:	2103      	movs	r1, #3
 8002724:	2003      	movs	r0, #3
 8002726:	f003 fc59 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_IOPC_EN);
 800272a:	2104      	movs	r1, #4
 800272c:	2003      	movs	r0, #3
 800272e:	f003 fc55 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_AFIO_EN);
 8002732:	2100      	movs	r1, #0
 8002734:	2003      	movs	r0, #3
 8002736:	f003 fc51 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_SPI2_EN);
 800273a:	210e      	movs	r1, #14
 800273c:	2002      	movs	r0, #2
 800273e:	f003 fc4d 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_TIM2_EN);
 8002742:	2100      	movs	r1, #0
 8002744:	2002      	movs	r0, #2
 8002746:	f003 fc49 	bl	8005fdc <MRCC_EnablePeripheralClock>


	/***********************************Setting Interrupts' Priorities***********************************/
	MSCB_SetPriorityGrouping                (MSCB_PRIORITY_GROUP_4_SUB_0);
 800274a:	4821      	ldr	r0, [pc, #132]	@ (80027d0 <SPECTRO_InitSoftware+0xc0>)
 800274c:	f003 fe8e 	bl	800646c <MSCB_SetPriorityGrouping>
	MNVIC_SetInterruptPriority              (MNVIC_EXTI15_10, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2028      	movs	r0, #40	@ 0x28
 8002756:	f003 fb8f 	bl	8005e78 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority              (MNVIC_USART3, 1, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2101      	movs	r1, #1
 800275e:	2027      	movs	r0, #39	@ 0x27
 8002760:	f003 fb8a 	bl	8005e78 <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority				(MNVIC_TIM5, 2, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2102      	movs	r1, #2
 8002768:	2032      	movs	r0, #50	@ 0x32
 800276a:	f003 fb85 	bl	8005e78 <MNVIC_SetInterruptPriority>

	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 800276e:	2202      	movs	r2, #2
 8002770:	2108      	movs	r1, #8
 8002772:	2000      	movs	r0, #0
 8002774:	f002 fcb4 	bl	80050e0 <MGPIO_SetPinMode>
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8002778:	2202      	movs	r2, #2
 800277a:	2102      	movs	r1, #2
 800277c:	2000      	movs	r0, #0
 800277e:	f002 fcaf 	bl	80050e0 <MGPIO_SetPinMode>

	MRTC_Init();
 8002782:	f003 fd57 	bl	8006234 <MRTC_Init>
	MSTK_uint8Init();
 8002786:	f004 f843 	bl	8006810 <MSTK_uint8Init>
	adc_init();
 800278a:	f000 fb7d 	bl	8002e88 <adc_init>
	//eeprom_init();
	uint8 Loc_uint8dummyData = 27;
 800278e:	231b      	movs	r3, #27
 8002790:	71fb      	strb	r3, [r7, #7]
	eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint8dummyData, 1);
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	2201      	movs	r2, #1
 8002796:	4619      	mov	r1, r3
 8002798:	20d8      	movs	r0, #216	@ 0xd8
 800279a:	f000 fc37 	bl	800300c <eeprom_write_Nbytes>
	SCommands_Init();
 800279e:	f7fe fed3 	bl	8001548 <SCommands_Init>
	SPWRVolt_Init();
 80027a2:	f001 fbef 	bl	8003f84 <SPWRVolt_Init>


	//eeprom_init();

	MCP4151_Init();
 80027a6:	f001 f8c9 	bl	800393c <MCP4151_Init>
	HPWRSupply_InitSupplies();
 80027aa:	f001 fa57 	bl	8003c5c <HPWRSupply_InitSupplies>
	HMOTORS_Init();
 80027ae:	f001 fc4d 	bl	800404c <HMOTORS_Init>

	MNVIC_EnableInterrupt(MNVIC_TIM2);
 80027b2:	201c      	movs	r0, #28
 80027b4:	f003 fb2c 	bl	8005e10 <MNVIC_EnableInterrupt>
	MGPTMR_SetTimerPeriod(MGPTMR2, 25);
 80027b8:	2119      	movs	r1, #25
 80027ba:	2000      	movs	r0, #0
 80027bc:	f002 ff9e 	bl	80056fc <MGPTMR_SetTimerPeriod>
	MGPTMR_Init(MGPTMR2);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f002 fee1 	bl	8005588 <MGPTMR_Init>



	return E_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	05fa0300 	.word	0x05fa0300

080027d4 <SPECTRO_InitHardware>:
Std_ReturnType SPECTRO_InitHardware(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80027da:	2301      	movs	r3, #1
 80027dc:	71fb      	strb	r3, [r7, #7]

	Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 80027de:	2101      	movs	r1, #1
 80027e0:	2000      	movs	r0, #0
 80027e2:	f001 fa93 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]

	if(Loc_uint8InitStatus == E_OK)
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11e      	bne.n	800282e <SPECTRO_InitHardware+0x5a>
	{
		Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f001 fa8a 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <SPECTRO_InitHardware+0x5a>
		{
			Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002802:	2101      	movs	r1, #1
 8002804:	2001      	movs	r0, #1
 8002806:	f001 fa81 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
			if(Loc_uint8InitStatus == E_OK)
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10c      	bne.n	800282e <SPECTRO_InitHardware+0x5a>
			{
				Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 8002814:	2100      	movs	r1, #0
 8002816:	2001      	movs	r0, #1
 8002818:	f001 fa78 	bl	8003d0c <HPWRSupply_SetSupplyMode>
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
				if(Loc_uint8InitStatus == E_OK)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <SPECTRO_InitHardware+0x5a>
				{
					Loc_uint8InitStatus = SPECTRO_InitCalibration();
 8002826:	f000 f931 	bl	8002a8c <SPECTRO_InitCalibration>
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_uint8InitStatus;
 800282e:	79fb      	ldrb	r3, [r7, #7]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <SPECTRO_CalibrationScan>:
static volatile uint32 glbl_float32MaxStepsIndex = 0;
static volatile uint32 glbl_uint32MaxSteps[2] = {0.0};
static volatile uint8 glbl_uint8Buffer[32] = {0};

void SPECTRO_CalibrationScan(void)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b097      	sub	sp, #92	@ 0x5c
 800283c:	af00      	add	r7, sp, #0
	glbl_uint32FunctionCounter++;
 800283e:	4b8a      	ldr	r3, [pc, #552]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a88      	ldr	r2, [pc, #544]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002846:	6013      	str	r3, [r2, #0]
	HMOTOR_StepNoDelay(HMOTOR_WL_SELECT, HMOTORS_CLKWISE_DIRECTION);
 8002848:	2101      	movs	r1, #1
 800284a:	2002      	movs	r0, #2
 800284c:	f002 f882 	bl	8004954 <HMOTOR_StepNoDelay>
	if((glbl_uint32FunctionCounter <= 400) || (glbl_uint32FunctionCounter >= 6300))
 8002850:	4b85      	ldr	r3, [pc, #532]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002858:	d906      	bls.n	8002868 <SPECTRO_CalibrationScan+0x30>
 800285a:	4b83      	ldr	r3, [pc, #524]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f641 029b 	movw	r2, #6299	@ 0x189b
 8002862:	4293      	cmp	r3, r2
 8002864:	f240 80fb 	bls.w	8002a5e <SPECTRO_CalibrationScan+0x226>
	{
		float32 de7k = 0.0, gain = 0.0;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	653b      	str	r3, [r7, #80]	@ 0x50
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if(glbl_uint32FunctionCounter <= 400)
 8002874:	4b7c      	ldr	r3, [pc, #496]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800287c:	d836      	bhi.n	80028ec <SPECTRO_CalibrationScan+0xb4>
		{
			read_sample_voltage(&de7k, &gain);
 800287e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002882:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fa0d 	bl	8002ca8 <read_sample_voltage>
			MUART_SendIntegerValue(UART3, glbl_uint32FunctionCounter);
 800288e:	4b76      	ldr	r3, [pc, #472]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	2002      	movs	r0, #2
 8002896:	f004 f9f9 	bl	8006c8c <MUART_SendIntegerValue>
			MUART_TxChar(UART3, ':');
 800289a:	213a      	movs	r1, #58	@ 0x3a
 800289c:	2002      	movs	r0, #2
 800289e:	f004 f941 	bl	8006b24 <MUART_TxChar>
			MUART_TxChar(UART3, ' ');
 80028a2:	2120      	movs	r1, #32
 80028a4:	2002      	movs	r0, #2
 80028a6:	f004 f93d 	bl	8006b24 <MUART_TxChar>

			float_to_string_manual(glbl_uint8Buffer, de7k, 3);
 80028aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ac:	2203      	movs	r2, #3
 80028ae:	4619      	mov	r1, r3
 80028b0:	486e      	ldr	r0, [pc, #440]	@ (8002a6c <SPECTRO_CalibrationScan+0x234>)
 80028b2:	f000 fc37 	bl	8003124 <float_to_string_manual>
			MUART_TxString(UART3, glbl_uint8Buffer);
 80028b6:	496d      	ldr	r1, [pc, #436]	@ (8002a6c <SPECTRO_CalibrationScan+0x234>)
 80028b8:	2002      	movs	r0, #2
 80028ba:	f004 f99d 	bl	8006bf8 <MUART_TxString>
			MUART_TxChar(UART3, '\n');
 80028be:	210a      	movs	r1, #10
 80028c0:	2002      	movs	r0, #2
 80028c2:	f004 f92f 	bl	8006b24 <MUART_TxChar>

			if(de7k > glbl_float32MaxValue[0])
 80028c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <SPECTRO_CalibrationScan+0x238>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fbe8 	bl	80010a4 <__aeabi_fcmplt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <SPECTRO_CalibrationScan+0xa4>
		}
	}
	else
	{
	}
}
 80028da:	e0c0      	b.n	8002a5e <SPECTRO_CalibrationScan+0x226>
				glbl_float32MaxValue[0] = de7k;
 80028dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028de:	4a64      	ldr	r2, [pc, #400]	@ (8002a70 <SPECTRO_CalibrationScan+0x238>)
 80028e0:	6013      	str	r3, [r2, #0]
				glbl_uint32MaxSteps[0] = glbl_uint32FunctionCounter; //zero WL steps
 80028e2:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a63      	ldr	r2, [pc, #396]	@ (8002a74 <SPECTRO_CalibrationScan+0x23c>)
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	e0b8      	b.n	8002a5e <SPECTRO_CalibrationScan+0x226>
		else if((glbl_uint32FunctionCounter >= 6300) && (glbl_uint32FunctionCounter < 7300))
 80028ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f641 029b 	movw	r2, #6299	@ 0x189b
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d93b      	bls.n	8002970 <SPECTRO_CalibrationScan+0x138>
 80028f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f641 4283 	movw	r2, #7299	@ 0x1c83
 8002900:	4293      	cmp	r3, r2
 8002902:	d835      	bhi.n	8002970 <SPECTRO_CalibrationScan+0x138>
			read_reference_voltage(&de7k, &gain);
 8002904:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002908:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8e6 	bl	8002ae0 <read_reference_voltage>
			MUART_SendIntegerValue(UART3, glbl_uint32FunctionCounter);
 8002914:	4b54      	ldr	r3, [pc, #336]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	2002      	movs	r0, #2
 800291c:	f004 f9b6 	bl	8006c8c <MUART_SendIntegerValue>
			MUART_TxChar(UART3, ':');
 8002920:	213a      	movs	r1, #58	@ 0x3a
 8002922:	2002      	movs	r0, #2
 8002924:	f004 f8fe 	bl	8006b24 <MUART_TxChar>
			MUART_TxChar(UART3, ' ');
 8002928:	2120      	movs	r1, #32
 800292a:	2002      	movs	r0, #2
 800292c:	f004 f8fa 	bl	8006b24 <MUART_TxChar>
			float_to_string_manual(glbl_uint8Buffer, de7k, 3);
 8002930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002932:	2203      	movs	r2, #3
 8002934:	4619      	mov	r1, r3
 8002936:	484d      	ldr	r0, [pc, #308]	@ (8002a6c <SPECTRO_CalibrationScan+0x234>)
 8002938:	f000 fbf4 	bl	8003124 <float_to_string_manual>
			MUART_TxString(UART3, glbl_uint8Buffer);
 800293c:	494b      	ldr	r1, [pc, #300]	@ (8002a6c <SPECTRO_CalibrationScan+0x234>)
 800293e:	2002      	movs	r0, #2
 8002940:	f004 f95a 	bl	8006bf8 <MUART_TxString>
			MUART_TxChar(UART3, '\n');
 8002944:	210a      	movs	r1, #10
 8002946:	2002      	movs	r0, #2
 8002948:	f004 f8ec 	bl	8006b24 <MUART_TxChar>
			if(de7k > glbl_float32MaxValue[1])
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <SPECTRO_CalibrationScan+0x238>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fba5 	bl	80010a4 <__aeabi_fcmplt>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d07e      	beq.n	8002a5e <SPECTRO_CalibrationScan+0x226>
				glbl_float32MaxValue[1] = de7k;
 8002960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002962:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <SPECTRO_CalibrationScan+0x238>)
 8002964:	6053      	str	r3, [r2, #4]
				glbl_uint32MaxSteps[1] = glbl_uint32FunctionCounter; //656.1nm Steps
 8002966:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a42      	ldr	r2, [pc, #264]	@ (8002a74 <SPECTRO_CalibrationScan+0x23c>)
 800296c:	6053      	str	r3, [r2, #4]
			if(de7k > glbl_float32MaxValue[1])
 800296e:	e076      	b.n	8002a5e <SPECTRO_CalibrationScan+0x226>
		else if((glbl_uint32FunctionCounter >= 7300))
 8002970:	4b3d      	ldr	r3, [pc, #244]	@ (8002a68 <SPECTRO_CalibrationScan+0x230>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f641 4283 	movw	r2, #7299	@ 0x1c83
 8002978:	4293      	cmp	r3, r2
 800297a:	d970      	bls.n	8002a5e <SPECTRO_CalibrationScan+0x226>
			MGPTMR_StopTimer(MGPTMR2);
 800297c:	2000      	movs	r0, #0
 800297e:	f002 fea3 	bl	80056c8 <MGPTMR_StopTimer>
			float32 Loc_float32StepsPerNm = ((float32)glbl_uint32MaxSteps[1] - (float32)glbl_uint32MaxSteps[0]) / 656.1f;
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <SPECTRO_CalibrationScan+0x23c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f996 	bl	8000cb8 <__aeabi_ui2f>
 800298c:	4604      	mov	r4, r0
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <SPECTRO_CalibrationScan+0x23c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f990 	bl	8000cb8 <__aeabi_ui2f>
 8002998:	4603      	mov	r3, r0
 800299a:	4619      	mov	r1, r3
 800299c:	4620      	mov	r0, r4
 800299e:	f7fe f8d9 	bl	8000b54 <__aeabi_fsub>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4934      	ldr	r1, [pc, #208]	@ (8002a78 <SPECTRO_CalibrationScan+0x240>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fa92 	bl	8000ed0 <__aeabi_fdiv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	657b      	str	r3, [r7, #84]	@ 0x54
			uint8 Loc_uint8Buffer[32] = {0};
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	619a      	str	r2, [r3, #24]
			float_to_string_manual(Loc_uint8Buffer, Loc_float32StepsPerNm, 3);
 80029c6:	463b      	mov	r3, r7
 80029c8:	2203      	movs	r2, #3
 80029ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fba9 	bl	8003124 <float_to_string_manual>
			MUART_TxString(UART3, "Steps/nm = ");
 80029d2:	492a      	ldr	r1, [pc, #168]	@ (8002a7c <SPECTRO_CalibrationScan+0x244>)
 80029d4:	2002      	movs	r0, #2
 80029d6:	f004 f90f 	bl	8006bf8 <MUART_TxString>
			MUART_TxString(UART3, Loc_uint8Buffer);
 80029da:	463b      	mov	r3, r7
 80029dc:	4619      	mov	r1, r3
 80029de:	2002      	movs	r0, #2
 80029e0:	f004 f90a 	bl	8006bf8 <MUART_TxString>
			MUART_TxChar(UART3, '\n');
 80029e4:	210a      	movs	r1, #10
 80029e6:	2002      	movs	r0, #2
 80029e8:	f004 f89c 	bl	8006b24 <MUART_TxChar>
			HMOTOR_GetWLSelectCalibration(glbl_uint32MaxSteps[0], Loc_float32StepsPerNm);
 80029ec:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <SPECTRO_CalibrationScan+0x23c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fe1a 	bl	800462c <HMOTOR_GetWLSelectCalibration>
			HMOTOR_MoveWLSelectMotor(190);
 80029f8:	4821      	ldr	r0, [pc, #132]	@ (8002a80 <SPECTRO_CalibrationScan+0x248>)
 80029fa:	f001 fe2d 	bl	8004658 <HMOTOR_MoveWLSelectMotor>
			HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 80029fe:	2100      	movs	r1, #0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f001 f983 	bl	8003d0c <HPWRSupply_SetSupplyMode>
			uint32 steps = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	64bb      	str	r3, [r7, #72]	@ 0x48
			HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &steps);
 8002a0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2002      	movs	r0, #2
 8002a12:	f001 ff4b 	bl	80048ac <HMOTOR_GetCurrentMotorSteps>
			MUART_TxString(UART3, "WL Current Steps = ");
 8002a16:	491b      	ldr	r1, [pc, #108]	@ (8002a84 <SPECTRO_CalibrationScan+0x24c>)
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f004 f8ed 	bl	8006bf8 <MUART_TxString>
			MUART_SendIntegerValue(UART3, steps);
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a20:	4619      	mov	r1, r3
 8002a22:	2002      	movs	r0, #2
 8002a24:	f004 f932 	bl	8006c8c <MUART_SendIntegerValue>
			MUART_TxChar(UART3, '\n');
 8002a28:	210a      	movs	r1, #10
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f004 f87a 	bl	8006b24 <MUART_TxChar>
			uint8 de7kteen[40] = "320 1000 0.2";
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <SPECTRO_CalibrationScan+0x250>)
 8002a32:	f107 0420 	add.w	r4, r7, #32
 8002a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a38:	c407      	stmia	r4!, {r0, r1, r2}
 8002a3a:	7023      	strb	r3, [r4, #0]
 8002a3c:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	f8c3 2017 	str.w	r2, [r3, #23]
			SCommands_StartOperation(de7kteen);
 8002a52:	f107 0320 	add.w	r3, r7, #32
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fbf2 	bl	8002240 <SCommands_StartOperation>
}
 8002a5c:	e7ff      	b.n	8002a5e <SPECTRO_CalibrationScan+0x226>
 8002a5e:	bf00      	nop
 8002a60:	375c      	adds	r7, #92	@ 0x5c
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000668 	.word	0x20000668
 8002a6c:	2000067c 	.word	0x2000067c
 8002a70:	2000066c 	.word	0x2000066c
 8002a74:	20000674 	.word	0x20000674
 8002a78:	44240666 	.word	0x44240666
 8002a7c:	0800c558 	.word	0x0800c558
 8002a80:	433e0000 	.word	0x433e0000
 8002a84:	0800c564 	.word	0x0800c564
 8002a88:	0800c578 	.word	0x0800c578

08002a8c <SPECTRO_InitCalibration>:

Std_ReturnType SPECTRO_InitCalibration(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
	float32 Loc_uint32StepsPerNm = 0;
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f001 fe55 	bl	8004748 <HMOTOR_GoHome>
	//HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f001 fe52 	bl	8004748 <HMOTOR_GoHome>

	//turn on visible lamp
	HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f001 f930 	bl	8003d0c <HPWRSupply_SetSupplyMode>
	HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f001 fbef 	bl	8004290 <HMOTOR_MoveLampMotor>
	//HMOTOR_MoveFilterMotor(HMOTOR_FILTER_AIR);

	//Zero Wavelength
	uint32 Loc_uint32Index = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
	float32	Loc_float32Gain = 0;
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
	//float32 Loc_uint32WhiteLightIntensities[110] = {0};
	float32 Loc_float32Reading = 0.0;
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]

	MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR2, SPECTRO_CalibrationScan);
 8002ac2:	4906      	ldr	r1, [pc, #24]	@ (8002adc <SPECTRO_InitCalibration+0x50>)
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f002 fe41 	bl	800574c <MGPTMR_SetTimerUpdateCallbackFunc>
	MGPTMR_StartTimer(MGPTMR2);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f002 fddc 	bl	8005688 <MGPTMR_StartTimer>
	//MUART_TxString(UART3, Loc_uint8Buffer);
	//MUART_TxChar(UART3, '\n');
	//HMOTOR_GetWLSelectCalibration(Loc_uint32ZeroWLSteps, Loc_uint32StepsPerNm);
	//HMOTOR_GoHome(HMOTOR_WL_SELECT);
	//HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32ZeroWLSteps, HMOTORS_CLKWISE_DIRECTION, 4);
	return E_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08002839 	.word	0x08002839

08002ae0 <read_reference_voltage>:
	GAIN_30,
	GAIN_15
}ADC_gain_t;

void read_reference_voltage(float32 *ref, float32 *gain)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8002aea:	7a7b      	ldrb	r3, [r7, #9]
 8002aec:	f36f 13c7 	bfc	r3, #7, #1
 8002af0:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN0_GND;
 8002af2:	7a7b      	ldrb	r3, [r7, #9]
 8002af4:	2204      	movs	r2, #4
 8002af6:	f362 1306 	bfi	r3, r2, #4, #3
 8002afa:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8002afc:	7a7b      	ldrb	r3, [r7, #9]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f362 0343 	bfi	r3, r2, #1, #3
 8002b04:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8002b06:	7a7b      	ldrb	r3, [r7, #9]
 8002b08:	f36f 0300 	bfc	r3, #0, #1
 8002b0c:	727b      	strb	r3, [r7, #9]
	config.DR = DR_475SPS;
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	2206      	movs	r2, #6
 8002b12:	f362 1347 	bfi	r3, r2, #5, #3
 8002b16:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002b18:	7a3b      	ldrb	r3, [r7, #8]
 8002b1a:	f36f 1304 	bfc	r3, #4, #1
 8002b1e:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002b20:	7a3b      	ldrb	r3, [r7, #8]
 8002b22:	f36f 03c3 	bfc	r3, #3, #1
 8002b26:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002b28:	7a3b      	ldrb	r3, [r7, #8]
 8002b2a:	f36f 0382 	bfc	r3, #2, #1
 8002b2e:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002b30:	7a3b      	ldrb	r3, [r7, #8]
 8002b32:	f043 0303 	orr.w	r3, r3, #3
 8002b36:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b3e:	601a      	str	r2, [r3, #0]

	static ADC_gain_t ref_gain_t = NO_GAIN;
	ref_sample x;
	x = REFERENCE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8002b44:	8938      	ldrh	r0, [r7, #8]
 8002b46:	f000 f9c7 	bl	8002ed8 <adc_read_mv>
 8002b4a:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002b4c:	4950      	ldr	r1, [pc, #320]	@ (8002c90 <read_reference_voltage+0x1b0>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7fe faa8 	bl	80010a4 <__aeabi_fcmplt>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d023      	beq.n	8002ba2 <read_reference_voltage+0xc2>
	{
		if(ref_gain_t != GAIN_50)
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d005      	beq.n	8002b6e <read_reference_voltage+0x8e>
		{
			Set_Reference_Gain(50.0);
 8002b62:	484b      	ldr	r0, [pc, #300]	@ (8002c90 <read_reference_voltage+0x1b0>)
 8002b64:	f000 ff32 	bl	80039cc <Set_Reference_Gain>
			ref_gain_t = GAIN_50;
 8002b68:	4b4a      	ldr	r3, [pc, #296]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002b6e:	7a7b      	ldrb	r3, [r7, #9]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f362 1306 	bfi	r3, r2, #4, #3
 8002b76:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002b78:	8938      	ldrh	r0, [r7, #8]
 8002b7a:	f000 f9ad 	bl	8002ed8 <adc_read_mv>
 8002b7e:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8002b80:	4843      	ldr	r0, [pc, #268]	@ (8002c90 <read_reference_voltage+0x1b0>)
 8002b82:	f000 ff9d 	bl	8003ac0 <get_reference_gain>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7fe f9a0 	bl	8000ed0 <__aeabi_fdiv>
 8002b90:	4603      	mov	r3, r0
 8002b92:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(50.0);
 8002b94:	483e      	ldr	r0, [pc, #248]	@ (8002c90 <read_reference_voltage+0x1b0>)
 8002b96:	f000 ff93 	bl	8003ac0 <get_reference_gain>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e058      	b.n	8002c54 <read_reference_voltage+0x174>
	}
	else if(reading < 100.0)
 8002ba2:	493d      	ldr	r1, [pc, #244]	@ (8002c98 <read_reference_voltage+0x1b8>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7fe fa7d 	bl	80010a4 <__aeabi_fcmplt>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <read_reference_voltage+0x118>
	{
		if(ref_gain_t != GAIN_30)
 8002bb0:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d005      	beq.n	8002bc4 <read_reference_voltage+0xe4>
		{
			Set_Reference_Gain(30.0);
 8002bb8:	4838      	ldr	r0, [pc, #224]	@ (8002c9c <read_reference_voltage+0x1bc>)
 8002bba:	f000 ff07 	bl	80039cc <Set_Reference_Gain>
			ref_gain_t = GAIN_30;
 8002bbe:	4b35      	ldr	r3, [pc, #212]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002bc4:	7a7b      	ldrb	r3, [r7, #9]
 8002bc6:	2205      	movs	r2, #5
 8002bc8:	f362 1306 	bfi	r3, r2, #4, #3
 8002bcc:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002bce:	8938      	ldrh	r0, [r7, #8]
 8002bd0:	f000 f982 	bl	8002ed8 <adc_read_mv>
 8002bd4:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(30.0);
 8002bd6:	4831      	ldr	r0, [pc, #196]	@ (8002c9c <read_reference_voltage+0x1bc>)
 8002bd8:	f000 ff72 	bl	8003ac0 <get_reference_gain>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7fe f975 	bl	8000ed0 <__aeabi_fdiv>
 8002be6:	4603      	mov	r3, r0
 8002be8:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(30.0);
 8002bea:	482c      	ldr	r0, [pc, #176]	@ (8002c9c <read_reference_voltage+0x1bc>)
 8002bec:	f000 ff68 	bl	8003ac0 <get_reference_gain>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e02d      	b.n	8002c54 <read_reference_voltage+0x174>
	}
	else if(reading < 200.0)
 8002bf8:	4929      	ldr	r1, [pc, #164]	@ (8002ca0 <read_reference_voltage+0x1c0>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7fe fa52 	bl	80010a4 <__aeabi_fcmplt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d023      	beq.n	8002c4e <read_reference_voltage+0x16e>
	{
		if(ref_gain_t != GAIN_15)
 8002c06:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d005      	beq.n	8002c1a <read_reference_voltage+0x13a>
		{
			Set_Reference_Gain(15.0);
 8002c0e:	4825      	ldr	r0, [pc, #148]	@ (8002ca4 <read_reference_voltage+0x1c4>)
 8002c10:	f000 fedc 	bl	80039cc <Set_Reference_Gain>
			ref_gain_t = GAIN_15;
 8002c14:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN1_GND;
 8002c1a:	7a7b      	ldrb	r3, [r7, #9]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f362 1306 	bfi	r3, r2, #4, #3
 8002c22:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002c24:	8938      	ldrh	r0, [r7, #8]
 8002c26:	f000 f957 	bl	8002ed8 <adc_read_mv>
 8002c2a:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(15.0);
 8002c2c:	481d      	ldr	r0, [pc, #116]	@ (8002ca4 <read_reference_voltage+0x1c4>)
 8002c2e:	f000 ff47 	bl	8003ac0 <get_reference_gain>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4619      	mov	r1, r3
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7fe f94a 	bl	8000ed0 <__aeabi_fdiv>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(15.0);
 8002c40:	4818      	ldr	r0, [pc, #96]	@ (8002ca4 <read_reference_voltage+0x1c4>)
 8002c42:	f000 ff3d 	bl	8003ac0 <get_reference_gain>
 8002c46:	4602      	mov	r2, r0
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e002      	b.n	8002c54 <read_reference_voltage+0x174>
	}
	else
	{
		ref_gain_t = NO_GAIN;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <read_reference_voltage+0x1b4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
	//		Set_Reference_Gain(3.0);
	//		reading = adc_read_mv(config);
	//		reading /= get_reference_gain(3.0);
	//		*gain = get_reference_gain(3.0);
	//	};
	reading *= (11.0 + 29.4)/11.0;
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7fd fc01 	bl	800045c <__aeabi_f2d>
 8002c5a:	a30b      	add	r3, pc, #44	@ (adr r3, 8002c88 <read_reference_voltage+0x1a8>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd fc54 	bl	800050c <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff1e 	bl	8000aac <__aeabi_d2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
	*ref = reading;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	f3af 8000 	nop.w
 8002c88:	d61bed61 	.word	0xd61bed61
 8002c8c:	400d61be 	.word	0x400d61be
 8002c90:	42480000 	.word	0x42480000
 8002c94:	2000069c 	.word	0x2000069c
 8002c98:	42c80000 	.word	0x42c80000
 8002c9c:	41f00000 	.word	0x41f00000
 8002ca0:	43480000 	.word	0x43480000
 8002ca4:	41700000 	.word	0x41700000

08002ca8 <read_sample_voltage>:

void read_sample_voltage(float32 *sample, float32 *gain)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8002cb2:	7a7b      	ldrb	r3, [r7, #9]
 8002cb4:	f36f 13c7 	bfc	r3, #7, #1
 8002cb8:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN2_GND;
 8002cba:	7a7b      	ldrb	r3, [r7, #9]
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	f362 1306 	bfi	r3, r2, #4, #3
 8002cc2:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8002cc4:	7a7b      	ldrb	r3, [r7, #9]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f362 0343 	bfi	r3, r2, #1, #3
 8002ccc:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8002cce:	7a7b      	ldrb	r3, [r7, #9]
 8002cd0:	f36f 0300 	bfc	r3, #0, #1
 8002cd4:	727b      	strb	r3, [r7, #9]
	config.DR = DR_475SPS;
 8002cd6:	7a3b      	ldrb	r3, [r7, #8]
 8002cd8:	2206      	movs	r2, #6
 8002cda:	f362 1347 	bfi	r3, r2, #5, #3
 8002cde:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002ce0:	7a3b      	ldrb	r3, [r7, #8]
 8002ce2:	f36f 1304 	bfc	r3, #4, #1
 8002ce6:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002ce8:	7a3b      	ldrb	r3, [r7, #8]
 8002cea:	f36f 03c3 	bfc	r3, #3, #1
 8002cee:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002cf0:	7a3b      	ldrb	r3, [r7, #8]
 8002cf2:	f36f 0382 	bfc	r3, #2, #1
 8002cf6:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002cf8:	7a3b      	ldrb	r3, [r7, #8]
 8002cfa:	f043 0303 	orr.w	r3, r3, #3
 8002cfe:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002d06:	601a      	str	r2, [r3, #0]

	static ADC_gain_t sample_gain_t = NO_GAIN;
	ref_sample x;
	x = SAMPLE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8002d0c:	8938      	ldrh	r0, [r7, #8]
 8002d0e:	f000 f8e3 	bl	8002ed8 <adc_read_mv>
 8002d12:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002d14:	494e      	ldr	r1, [pc, #312]	@ (8002e50 <read_sample_voltage+0x1a8>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7fe f9c4 	bl	80010a4 <__aeabi_fcmplt>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d022      	beq.n	8002d68 <read_sample_voltage+0xc0>
	{
		if(sample_gain_t != GAIN_50)
 8002d22:	4b4c      	ldr	r3, [pc, #304]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <read_sample_voltage+0x8e>
		{
			Set_Sample_Gain(50.0);
 8002d2a:	4849      	ldr	r0, [pc, #292]	@ (8002e50 <read_sample_voltage+0x1a8>)
 8002d2c:	f000 fe2c 	bl	8003988 <Set_Sample_Gain>
			sample_gain_t = GAIN_50;
 8002d30:	4b48      	ldr	r3, [pc, #288]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 8002d36:	7a7b      	ldrb	r3, [r7, #9]
 8002d38:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002d3c:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002d3e:	8938      	ldrh	r0, [r7, #8]
 8002d40:	f000 f8ca 	bl	8002ed8 <adc_read_mv>
 8002d44:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8002d46:	4842      	ldr	r0, [pc, #264]	@ (8002e50 <read_sample_voltage+0x1a8>)
 8002d48:	f000 feba 	bl	8003ac0 <get_reference_gain>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7fe f8bd 	bl	8000ed0 <__aeabi_fdiv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(50.0);
 8002d5a:	483d      	ldr	r0, [pc, #244]	@ (8002e50 <read_sample_voltage+0x1a8>)
 8002d5c:	f000 fef4 	bl	8003b48 <get_sample_gain>
 8002d60:	4602      	mov	r2, r0
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e056      	b.n	8002e16 <read_sample_voltage+0x16e>
	}
	else if(reading < 100.0)
 8002d68:	493b      	ldr	r1, [pc, #236]	@ (8002e58 <read_sample_voltage+0x1b0>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7fe f99a 	bl	80010a4 <__aeabi_fcmplt>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d022      	beq.n	8002dbc <read_sample_voltage+0x114>
	{
		if(sample_gain_t != GAIN_30)
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d005      	beq.n	8002d8a <read_sample_voltage+0xe2>
		{
			Set_Sample_Gain(30.0);
 8002d7e:	4837      	ldr	r0, [pc, #220]	@ (8002e5c <read_sample_voltage+0x1b4>)
 8002d80:	f000 fe02 	bl	8003988 <Set_Sample_Gain>
			sample_gain_t = GAIN_30;
 8002d84:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 8002d8a:	7a7b      	ldrb	r3, [r7, #9]
 8002d8c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002d90:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002d92:	8938      	ldrh	r0, [r7, #8]
 8002d94:	f000 f8a0 	bl	8002ed8 <adc_read_mv>
 8002d98:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(30.0);
 8002d9a:	4830      	ldr	r0, [pc, #192]	@ (8002e5c <read_sample_voltage+0x1b4>)
 8002d9c:	f000 fed4 	bl	8003b48 <get_sample_gain>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fe f893 	bl	8000ed0 <__aeabi_fdiv>
 8002daa:	4603      	mov	r3, r0
 8002dac:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(30.0);
 8002dae:	482b      	ldr	r0, [pc, #172]	@ (8002e5c <read_sample_voltage+0x1b4>)
 8002db0:	f000 feca 	bl	8003b48 <get_sample_gain>
 8002db4:	4602      	mov	r2, r0
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e02c      	b.n	8002e16 <read_sample_voltage+0x16e>
	}
	else if(reading < 200.0)
 8002dbc:	4928      	ldr	r1, [pc, #160]	@ (8002e60 <read_sample_voltage+0x1b8>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7fe f970 	bl	80010a4 <__aeabi_fcmplt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d022      	beq.n	8002e10 <read_sample_voltage+0x168>
	{
		if(sample_gain_t != GAIN_15)
 8002dca:	4b22      	ldr	r3, [pc, #136]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d005      	beq.n	8002dde <read_sample_voltage+0x136>
		{
			Set_Sample_Gain(15.0);
 8002dd2:	4824      	ldr	r0, [pc, #144]	@ (8002e64 <read_sample_voltage+0x1bc>)
 8002dd4:	f000 fdd8 	bl	8003988 <Set_Sample_Gain>
			sample_gain_t = GAIN_15;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002dda:	2203      	movs	r2, #3
 8002ddc:	701a      	strb	r2, [r3, #0]
		}
		config.MUX = MUX_AIN3_GND;
 8002dde:	7a7b      	ldrb	r3, [r7, #9]
 8002de0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002de4:	727b      	strb	r3, [r7, #9]
		reading = adc_read_mv(config);
 8002de6:	8938      	ldrh	r0, [r7, #8]
 8002de8:	f000 f876 	bl	8002ed8 <adc_read_mv>
 8002dec:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(15.0);
 8002dee:	481d      	ldr	r0, [pc, #116]	@ (8002e64 <read_sample_voltage+0x1bc>)
 8002df0:	f000 feaa 	bl	8003b48 <get_sample_gain>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7fe f869 	bl	8000ed0 <__aeabi_fdiv>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(15.0);
 8002e02:	4818      	ldr	r0, [pc, #96]	@ (8002e64 <read_sample_voltage+0x1bc>)
 8002e04:	f000 fea0 	bl	8003b48 <get_sample_gain>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <read_sample_voltage+0x16e>
	}
	else
		{
		sample_gain_t = NO_GAIN;
 8002e10:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <read_sample_voltage+0x1ac>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	//		reading = adc_read_mv(config);
	//		reading /= get_sample_gain(3.0);
	//		*gain = get_sample_gain(3.0);
	//	};

	reading *= (11.0 + 29.4)/11.0;
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7fd fb20 	bl	800045c <__aeabi_f2d>
 8002e1c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002e48 <read_sample_voltage+0x1a0>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fb73 	bl	800050c <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7fd fe3d 	bl	8000aac <__aeabi_d2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	60fb      	str	r3, [r7, #12]
	*sample = reading;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	f3af 8000 	nop.w
 8002e48:	d61bed61 	.word	0xd61bed61
 8002e4c:	400d61be 	.word	0x400d61be
 8002e50:	42480000 	.word	0x42480000
 8002e54:	2000069d 	.word	0x2000069d
 8002e58:	42c80000 	.word	0x42c80000
 8002e5c:	41f00000 	.word	0x41f00000
 8002e60:	43480000 	.word	0x43480000
 8002e64:	41700000 	.word	0x41700000

08002e68 <SpectroStatus_SetNewStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                    Spectrophotometer's Status Successfully Set
 * @retval E_NOT_OK:                Spectrophotometer's Status not Set 
 */
Std_ReturnType SpectroStatus_SetNewStatus           (SPECTRO_Status_t Copy_uint32SpectroStatus)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
    glbl_uint32SpectroCurrentStatus = Copy_uint32SpectroStatus;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <SpectroStatus_SetNewStatus+0x1c>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	7013      	strb	r3, [r2, #0]
    return E_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	2000069e 	.word	0x2000069e

08002e88 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8002e8e:	2340      	movs	r3, #64	@ 0x40
 8002e90:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 8002e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e96:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <adc_init+0x48>)
 8002e9a:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8002ea8:	480a      	ldr	r0, [pc, #40]	@ (8002ed4 <adc_init+0x4c>)
 8002eaa:	f002 fd9f 	bl	80059ec <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002eae:	463b      	mov	r3, r7
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4808      	ldr	r0, [pc, #32]	@ (8002ed4 <adc_init+0x4c>)
 8002eb4:	f002 fcae 	bl	8005814 <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 8002eb8:	f002 fd70 	bl	800599c <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4804      	ldr	r0, [pc, #16]	@ (8002ed4 <adc_init+0x4c>)
 8002ec2:	f002 fca7 	bl	8005814 <MCAL_I2C_Init>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	000186a0 	.word	0x000186a0
 8002ed4:	40005400 	.word	0x40005400

08002ed8 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	@ 0x30
 8002edc:	af04      	add	r7, sp, #16
 8002ede:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x48;
 8002ee0:	2348      	movs	r3, #72	@ 0x48
 8002ee2:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x01;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	753b      	strb	r3, [r7, #20]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 8002ee8:	797b      	ldrb	r3, [r7, #5]
 8002eea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	01db      	lsls	r3, r3, #7
 8002ef2:	b25a      	sxtb	r2, r3
 8002ef4:	797b      	ldrb	r3, [r7, #5]
 8002ef6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	797b      	ldrb	r3, [r7, #5]
 8002f06:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b25a      	sxtb	r2, r3
 8002f14:	797b      	ldrb	r3, [r7, #5]
 8002f16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	757b      	strb	r3, [r7, #21]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 8002f26:	793b      	ldrb	r3, [r7, #4]
 8002f28:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	793b      	ldrb	r3, [r7, #4]
 8002f34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	b25a      	sxtb	r2, r3
 8002f42:	793b      	ldrb	r3, [r7, #4]
 8002f44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b25a      	sxtb	r2, r3
 8002f52:	793b      	ldrb	r3, [r7, #4]
 8002f54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b25a      	sxtb	r2, r3
 8002f62:	793b      	ldrb	r3, [r7, #4]
 8002f64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	75bb      	strb	r3, [r7, #22]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 8002f74:	f107 0214 	add.w	r2, r7, #20
 8002f78:	8bf9      	ldrh	r1, [r7, #30]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2303      	movs	r3, #3
 8002f84:	481e      	ldr	r0, [pc, #120]	@ (8003000 <adc_read_mv+0x128>)
 8002f86:	f002 fd5b 	bl	8005a40 <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8002f8e:	f107 0214 	add.w	r2, r7, #20
 8002f92:	8bf9      	ldrh	r1, [r7, #30]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4818      	ldr	r0, [pc, #96]	@ (8003000 <adc_read_mv+0x128>)
 8002fa0:	f002 fd4e 	bl	8005a40 <MCAL_I2C_MASTER_TX>
	delay_ms(3);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 fc34 	bl	8003812 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start, I2C_ADC);
 8002faa:	f107 020c 	add.w	r2, r7, #12
 8002fae:	8bf9      	ldrh	r1, [r7, #30]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	4810      	ldr	r0, [pc, #64]	@ (8003000 <adc_read_mv+0x128>)
 8002fc0:	f002 fd9a 	bl	8005af8 <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 8002fc4:	7b7b      	ldrb	r3, [r7, #13]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	7b3b      	ldrb	r3, [r7, #12]
 8002fcc:	b21b      	sxth	r3, r3
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 8002fd4:	8bbb      	ldrh	r3, [r7, #28]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fe6e 	bl	8000cb8 <__aeabi_ui2f>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4909      	ldr	r1, [pc, #36]	@ (8003004 <adc_read_mv+0x12c>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fec1 	bl	8000d68 <__aeabi_fmul>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4907      	ldr	r1, [pc, #28]	@ (8003008 <adc_read_mv+0x130>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd febc 	bl	8000d68 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]
	return mv;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40005400 	.word	0x40005400
 8003004:	3903126f 	.word	0x3903126f
 8003008:	447a0000 	.word	0x447a0000

0800300c <eeprom_write_Nbytes>:
//	MCAL_I2C_Init(I2C1, &I2C1CFG);


}
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0c8      	sub	sp, #288	@ 0x120
 8003010:	af02      	add	r7, sp, #8
 8003012:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301a:	6018      	str	r0, [r3, #0]
 800301c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003020:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003024:	6019      	str	r1, [r3, #0]
 8003026:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800302a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800302e:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256]  ;
	//buffer[0] = (u8)(Memory_address>>8) ; 	//upper byte Memory Address
	//buffer[1] = (u8)Memory_address ; 	//lower byte Memory Address
	buffer[0] = (uint8)(Memory_address) ; 	//Memory Address
 8003036:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800303a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800304a:	701a      	strb	r2, [r3, #0]

	for (i=1 ; i<(Data_Length+1) ; i++ )
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003052:	e015      	b.n	8003080 <eeprom_write_Nbytes+0x74>
	{buffer[i] = bytes[i-1] ;}
 8003054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003058:	3b01      	subs	r3, #1
 800305a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800305e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	441a      	add	r2, r3
 8003066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800306a:	7811      	ldrb	r1, [r2, #0]
 800306c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003070:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003074:	54d1      	strb	r1, [r2, r3]
	for (i=1 ; i<(Data_Length+1) ; i++ )
 8003076:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800307a:	3301      	adds	r3, #1
 800307c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003080:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003084:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800308e:	429a      	cmp	r2, r3
 8003090:	d2e0      	bcs.n	8003054 <eeprom_write_Nbytes+0x48>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+1), With_Stop, Start);
 8003092:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003096:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	f107 0214 	add.w	r2, r7, #20
 80030a4:	2300      	movs	r3, #0
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	2300      	movs	r3, #0
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	460b      	mov	r3, r1
 80030ae:	2150      	movs	r1, #80	@ 0x50
 80030b0:	4804      	ldr	r0, [pc, #16]	@ (80030c4 <eeprom_write_Nbytes+0xb8>)
 80030b2:	f002 fcc5 	bl	8005a40 <MCAL_I2C_MASTER_TX>

	return 0;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40005400 	.word	0x40005400

080030c8 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	//buffer[0] = (u8)(address>>8) ; 	//Upper Memory Address
	//buffer[1] = (u8)(address) ; 	//Lower Memory Address
	buffer[0] = (uint8)(address) ; 	//Memory Address
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	753b      	strb	r3, [r7, #20]

	delay_ms(100);
 80030dc:	2064      	movs	r0, #100	@ 0x64
 80030de:	f000 fb98 	bl	8003812 <delay_ms>
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 1,Without_Stop ,Start); //Write Address Only
 80030e2:	f107 0214 	add.w	r2, r7, #20
 80030e6:	2300      	movs	r3, #0
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2301      	movs	r3, #1
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2301      	movs	r3, #1
 80030f0:	2150      	movs	r1, #80	@ 0x50
 80030f2:	480b      	ldr	r0, [pc, #44]	@ (8003120 <eeprom_read_byte+0x58>)
 80030f4:	f002 fca4 	bl	8005a40 <MCAL_I2C_MASTER_TX>
	delay_ms(100);
 80030f8:	2064      	movs	r0, #100	@ 0x64
 80030fa:	f000 fb8a 	bl	8003812 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start, I2C_EEPROM); 			//Read Data
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2200      	movs	r2, #0
 8003102:	9202      	str	r2, [sp, #8]
 8003104:	2201      	movs	r2, #1
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	9200      	str	r2, [sp, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	2150      	movs	r1, #80	@ 0x50
 8003110:	4803      	ldr	r0, [pc, #12]	@ (8003120 <eeprom_read_byte+0x58>)
 8003112:	f002 fcf1 	bl	8005af8 <MCAL_I2C_MASTER_RX>

	return 0;
 8003116:	2300      	movs	r3, #0

}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40005400 	.word	0x40005400

08003124 <float_to_string_manual>:

static volatile uint8 glbl_uint8CommandBuffer[HESP32_MAX_BUFFER_SPACE] = {0};
static volatile uint8 glbl_uint8BufferIndex = 0;

void float_to_string_manual(uint8* P_uint8Buffer, float32 Copy_float32FloatNum, uint32 Loc_uint32precision) 
{
 8003124:	b5b0      	push	{r4, r5, r7, lr}
 8003126:	b090      	sub	sp, #64	@ 0x40
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
    uint32 Loc_uint32IntPart = 0, Loc_uint32DecimalPart = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003134:	2300      	movs	r3, #0
 8003136:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32 i = 0, k = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8 Loc_uint8TempBuffer[8] = {0};
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
    boolean is_negative = FALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Handle sign and extract integer part (modify for specific needs)
    if (Copy_float32FloatNum < 0) 
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f7fd ffa6 	bl	80010a4 <__aeabi_fcmplt>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <float_to_string_manual+0x48>
    {
        Copy_float32FloatNum = -Copy_float32FloatNum;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003164:	60bb      	str	r3, [r7, #8]
        is_negative = TRUE;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    Loc_uint32IntPart = (sint32)Copy_float32FloatNum;
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f7fd ffc1 	bl	80010f4 <__aeabi_f2iz>
 8003172:	4603      	mov	r3, r0
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Handle decimal part if needed (modify for precision)
    if (Loc_uint32precision > 0) 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d021      	beq.n	80031c0 <float_to_string_manual+0x9c>
    {
        Copy_float32FloatNum *= pow(10, Loc_uint32precision);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd f94b 	bl	8000418 <__aeabi_ui2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	4952      	ldr	r1, [pc, #328]	@ (80032d4 <float_to_string_manual+0x1b0>)
 800318c:	f008 fa06 	bl	800b59c <pow>
 8003190:	4604      	mov	r4, r0
 8003192:	460d      	mov	r5, r1
 8003194:	68b8      	ldr	r0, [r7, #8]
 8003196:	f7fd f961 	bl	800045c <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd f9b3 	bl	800050c <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f7fd fc7d 	bl	8000aac <__aeabi_d2f>
 80031b2:	4603      	mov	r3, r0
 80031b4:	60bb      	str	r3, [r7, #8]
        Loc_uint32DecimalPart = (uint32)Copy_float32FloatNum;
 80031b6:	68b8      	ldr	r0, [r7, #8]
 80031b8:	f7fd ffc2 	bl	8001140 <__aeabi_f2uiz>
 80031bc:	4603      	mov	r3, r0
 80031be:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    // Convert integer part to string (replace with your implementation)
    if (is_negative) 
 80031c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <float_to_string_manual+0xb2>
    {
        P_uint8Buffer[i++] = '-';
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	222d      	movs	r2, #45	@ 0x2d
 80031d4:	701a      	strb	r2, [r3, #0]
    }
    do 
    {
        //buf[i++] = int_part % 10 + '0';
        Loc_uint8TempBuffer[k++] = Loc_uint32IntPart % 10 + '0';
 80031d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d8:	4b3f      	ldr	r3, [pc, #252]	@ (80032d8 <float_to_string_manual+0x1b4>)
 80031da:	fba3 2301 	umull	r2, r3, r3, r1
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	1aca      	subs	r2, r1, r3
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80031f2:	3230      	adds	r2, #48	@ 0x30
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	3340      	adds	r3, #64	@ 0x40
 80031f8:	443b      	add	r3, r7
 80031fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
        Loc_uint32IntPart /= 10;
 80031fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003200:	4a35      	ldr	r2, [pc, #212]	@ (80032d8 <float_to_string_manual+0x1b4>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    } while (Loc_uint32IntPart > 0);
 800320a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e2      	bne.n	80031d6 <float_to_string_manual+0xb2>

    // Append sign, decimal point, and decimal digits (modify for precision)
    for(sint32 j = (k - 1); j >= 0; j--)
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	3b01      	subs	r3, #1
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003216:	e00d      	b.n	8003234 <float_to_string_manual+0x110>
    {
        P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 8003218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	637a      	str	r2, [r7, #52]	@ 0x34
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	f107 0114 	add.w	r1, r7, #20
 8003226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003228:	440a      	add	r2, r1
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
    for(sint32 j = (k - 1); j >= 0; j--)
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	daee      	bge.n	8003218 <float_to_string_manual+0xf4>
    }

    if (Loc_uint32precision > 0) 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d040      	beq.n	80032c2 <float_to_string_manual+0x19e>
    {
        uint8 temp = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	77fb      	strb	r3, [r7, #31]
        P_uint8Buffer[i++] = '.';
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	637a      	str	r2, [r7, #52]	@ 0x34
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	222e      	movs	r2, #46	@ 0x2e
 8003250:	701a      	strb	r2, [r3, #0]
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	e01b      	b.n	8003290 <float_to_string_manual+0x16c>
        {
            Loc_uint8TempBuffer[j] = Loc_uint32DecimalPart % 10 + '0';
 8003258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800325a:	4b1f      	ldr	r3, [pc, #124]	@ (80032d8 <float_to_string_manual+0x1b4>)
 800325c:	fba3 2301 	umull	r2, r3, r3, r1
 8003260:	08da      	lsrs	r2, r3, #3
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	1aca      	subs	r2, r1, r3
 800326c:	b2d3      	uxtb	r3, r2
 800326e:	3330      	adds	r3, #48	@ 0x30
 8003270:	b2d9      	uxtb	r1, r3
 8003272:	f107 0214 	add.w	r2, r7, #20
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	4413      	add	r3, r2
 800327a:	460a      	mov	r2, r1
 800327c:	701a      	strb	r2, [r3, #0]
            Loc_uint32DecimalPart /= 10;
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <float_to_string_manual+0x1b4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	3301      	adds	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d8df      	bhi.n	8003258 <float_to_string_manual+0x134>
        }
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	e00d      	b.n	80032bc <float_to_string_manual+0x198>
        {
            P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 80032a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f107 0114 	add.w	r1, r7, #20
 80032ae:	6a3a      	ldr	r2, [r7, #32]
 80032b0:	440a      	add	r2, r1
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	701a      	strb	r2, [r3, #0]
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	daee      	bge.n	80032a0 <float_to_string_manual+0x17c>
        }
    }
    P_uint8Buffer[i] = '\0'; // Null terminate the string
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c6:	4413      	add	r3, r2
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	3740      	adds	r7, #64	@ 0x40
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bdb0      	pop	{r4, r5, r7, pc}
 80032d4:	40240000 	.word	0x40240000
 80032d8:	cccccccd 	.word	0xcccccccd

080032dc <HESP32_ParseReceivedCommand>:

void HESP32_ParseReceivedCommand  (void)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
    uint16 Loc_uint16RxChar = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	807b      	strh	r3, [r7, #2]
    MUART_RxCharAsynchronous(HESP32_UART_CHOICE, &Loc_uint16RxChar);
 80032e6:	1cbb      	adds	r3, r7, #2
 80032e8:	4619      	mov	r1, r3
 80032ea:	2002      	movs	r0, #2
 80032ec:	f003 fc56 	bl	8006b9c <MUART_RxCharAsynchronous>
	
    if(glbl_uint8BufferIndex < HESP32_MAX_BUFFER_SPACE)
 80032f0:	4b42      	ldr	r3, [pc, #264]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b27      	cmp	r3, #39	@ 0x27
 80032f8:	d879      	bhi.n	80033ee <HESP32_ParseReceivedCommand+0x112>
    {
        if((uint8)Loc_uint16RxChar == '\n')
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b0a      	cmp	r3, #10
 8003300:	d165      	bne.n	80033ce <HESP32_ParseReceivedCommand+0xf2>
        {
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = '\0';
 8003302:	4b3e      	ldr	r3, [pc, #248]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	4b3d      	ldr	r3, [pc, #244]	@ (8003400 <HESP32_ParseReceivedCommand+0x124>)
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]
            
            uint8 Loc_uint8Index = 0; 
 8003310:	2300      	movs	r3, #0
 8003312:	71fb      	strb	r3, [r7, #7]
	    	uint8 Loc_uint8FoundCommand = HESP32_COMMAND_NOT_FOUND;
 8003314:	2300      	movs	r3, #0
 8003316:	71bb      	strb	r3, [r7, #6]
	    	uint8 Loc_uint8Compare = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	717b      	strb	r3, [r7, #5]

            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 800331c:	2300      	movs	r3, #0
 800331e:	71fb      	strb	r3, [r7, #7]
 8003320:	e04c      	b.n	80033bc <HESP32_ParseReceivedCommand+0xe0>
            {
	    		Loc_uint8Compare = strncmp((HESP32_AvailableTasks[Loc_uint8Index]), glbl_uint8CommandBuffer, strlen((HESP32_AvailableTasks[Loc_uint8Index])));
 8003322:	79fa      	ldrb	r2, [r7, #7]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <HESP32_ParseReceivedCommand+0x128>)
 800332e:	189c      	adds	r4, r3, r2
 8003330:	79fa      	ldrb	r2, [r7, #7]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4a32      	ldr	r2, [pc, #200]	@ (8003404 <HESP32_ParseReceivedCommand+0x128>)
 800333c:	4413      	add	r3, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f7fc ff20 	bl	8000184 <strlen>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	492d      	ldr	r1, [pc, #180]	@ (8003400 <HESP32_ParseReceivedCommand+0x124>)
 800334a:	4620      	mov	r0, r4
 800334c:	f004 fe05 	bl	8007f5a <strncmp>
 8003350:	4603      	mov	r3, r0
 8003352:	717b      	strb	r3, [r7, #5]
                if(Loc_uint8Compare == 0)
 8003354:	797b      	ldrb	r3, [r7, #5]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d12d      	bne.n	80033b6 <HESP32_ParseReceivedCommand+0xda>
                {
                    Loc_uint8FoundCommand = HESP32_COMMAND_FOUND;
 800335a:	2301      	movs	r3, #1
 800335c:	71bb      	strb	r3, [r7, #6]
                    //HESP32_SendCommand("acknowledged");
                    
                    if(Loc_uint8Index < HESP32_NO_OF_NON_ARG_COMMANDS)
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d80b      	bhi.n	800337c <HESP32_ParseReceivedCommand+0xa0>
                    {
                        if((glbl_PCallbackFunc[Loc_uint8Index]) != NULL_PTR)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <HESP32_ParseReceivedCommand+0x12c>)
 8003368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d029      	beq.n	80033c4 <HESP32_ParseReceivedCommand+0xe8>
                        {
                            (glbl_PCallbackFunc[Loc_uint8Index])();
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	4a25      	ldr	r2, [pc, #148]	@ (8003408 <HESP32_ParseReceivedCommand+0x12c>)
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003378:	4798      	blx	r3
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
                            }
                        #else
                        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
                    }
	    			break;
 800337a:	e023      	b.n	80033c4 <HESP32_ParseReceivedCommand+0xe8>
                            if((glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS]) != NULL_PTR)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	3b11      	subs	r3, #17
 8003380:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HESP32_ParseReceivedCommand+0x130>)
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01c      	beq.n	80033c4 <HESP32_ParseReceivedCommand+0xe8>
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	3b11      	subs	r3, #17
 800338e:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <HESP32_ParseReceivedCommand+0x130>)
 8003390:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003394:	79fa      	ldrb	r2, [r7, #7]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HESP32_ParseReceivedCommand+0x128>)
 80033a0:	4413      	add	r3, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fc feee 	bl	8000184 <strlen>
 80033a8:	4603      	mov	r3, r0
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HESP32_ParseReceivedCommand+0x124>)
 80033ae:	4413      	add	r3, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	47a0      	blx	r4
	    			break;
 80033b4:	e006      	b.n	80033c4 <HESP32_ParseReceivedCommand+0xe8>
            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	3301      	adds	r3, #1
 80033ba:	71fb      	strb	r3, [r7, #7]
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b1c      	cmp	r3, #28
 80033c0:	d9af      	bls.n	8003322 <HESP32_ParseReceivedCommand+0x46>
 80033c2:	e000      	b.n	80033c6 <HESP32_ParseReceivedCommand+0xea>
	    			break;
 80033c4:	bf00      	nop
                else
	    		{
                    /*Do nothing*/
                }
            }
            glbl_uint8BufferIndex = 0;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    else
    {
        glbl_uint8BufferIndex = 0;
    }

}
 80033cc:	e012      	b.n	80033f4 <HESP32_ParseReceivedCommand+0x118>
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = (uint8)(Loc_uint16RxChar);
 80033ce:	8879      	ldrh	r1, [r7, #2]
 80033d0:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	b2c9      	uxtb	r1, r1
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HESP32_ParseReceivedCommand+0x124>)
 80033dc:	5499      	strb	r1, [r3, r2]
            glbl_uint8BufferIndex++;
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80033ea:	701a      	strb	r2, [r3, #0]
}
 80033ec:	e002      	b.n	80033f4 <HESP32_ParseReceivedCommand+0x118>
        glbl_uint8BufferIndex = 0;
 80033ee:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <HESP32_ParseReceivedCommand+0x120>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	20000768 	.word	0x20000768
 8003400:	20000740 	.word	0x20000740
 8003404:	20000000 	.word	0x20000000
 8003408:	200006a0 	.word	0x200006a0
 800340c:	20000710 	.word	0x20000710

08003410 <HESP32_InitInterface>:
 * @return Std_ReturnType
 * @retval E_OK:        Initialization is successful
 * @retval E_NOT_OK:    Failed to initialize communication 
 */
Std_ReturnType HESP32_InitInterface              (void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003416:	2301      	movs	r3, #1
 8003418:	71fb      	strb	r3, [r7, #7]

        //Initialize UART 2 peripheral
        MUART_Init(UART2);
    #elif HESP32_UART_CHOICE == HESP32_UART3
        //Enable Clock for UART3 and its tx and rx pins
        MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_USART3_EN);
 800341a:	2112      	movs	r1, #18
 800341c:	2002      	movs	r0, #2
 800341e:	f002 fddd 	bl	8005fdc <MRCC_EnablePeripheralClock>
        MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 8003422:	2103      	movs	r1, #3
 8003424:	2003      	movs	r0, #3
 8003426:	f002 fdd9 	bl	8005fdc <MRCC_EnablePeripheralClock>

        //Set Tx pin to be output alternate function and rx to be input pull-up
        MGPIO_SetPinMode(MUART3_TX_PORT_ID, MUART3_TX_PIN_ID, MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ);
 800342a:	220a      	movs	r2, #10
 800342c:	210a      	movs	r1, #10
 800342e:	2001      	movs	r0, #1
 8003430:	f001 fe56 	bl	80050e0 <MGPIO_SetPinMode>
        MGPIO_SetPinMode(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID, MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 8003434:	2208      	movs	r2, #8
 8003436:	210b      	movs	r1, #11
 8003438:	2001      	movs	r0, #1
 800343a:	f001 fe51 	bl	80050e0 <MGPIO_SetPinMode>
        MGPIO_ActivatePullUp(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID);
 800343e:	210b      	movs	r1, #11
 8003440:	2001      	movs	r0, #1
 8003442:	f002 f827 	bl	8005494 <MGPIO_ActivatePullUp>

        //Enable Interrupt for UART 3
        MNVIC_EnableInterrupt(MNVIC_USART3);
 8003446:	2027      	movs	r0, #39	@ 0x27
 8003448:	f002 fce2 	bl	8005e10 <MNVIC_EnableInterrupt>

        MUART_SetRxCompleteCallback(UART3, HESP32_ParseReceivedCommand);
 800344c:	4906      	ldr	r1, [pc, #24]	@ (8003468 <HESP32_InitInterface+0x58>)
 800344e:	2002      	movs	r0, #2
 8003450:	f003 fbfe 	bl	8006c50 <MUART_SetRxCompleteCallback>
        
        //Initialize UART 1 peripheral
        MUART_Init(UART3);
 8003454:	2002      	movs	r0, #2
 8003456:	f003 fa93 	bl	8006980 <MUART_Init>
    #else
        #error "UART Choice for communication is not specified"
    #endif /*HESP32_UART_CHOICE*/
    Loc_uint8FuncStatus = E_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 800345e:	79fb      	ldrb	r3, [r7, #7]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	080032dd 	.word	0x080032dd

0800346c <HESP32_SendCommand>:

Std_ReturnType HESP32_SendCommand                (uint8* P_uint8Command)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
    if(P_uint8Command != NULL_PTR)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HESP32_SendCommand+0x28>
    {
        MUART_TxString(HESP32_UART_CHOICE , P_uint8Command);
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	2002      	movs	r0, #2
 8003482:	f003 fbb9 	bl	8006bf8 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003486:	210a      	movs	r1, #10
 8003488:	2002      	movs	r0, #2
 800348a:	f003 fb4b 	bl	8006b24 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e001      	b.n	8003498 <HESP32_SendCommand+0x2c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HESP32_SetCommandCallbackFunction>:

Std_ReturnType HESP32_SetCommandCallbackFunction    (uint8 Copy_uint8CommandNumber,ptr_to_Callback_func P_CommandCallbackFunc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2b1c      	cmp	r3, #28
 80034b8:	d80a      	bhi.n	80034d0 <HESP32_SetCommandCallbackFunction+0x2c>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HESP32_SetCommandCallbackFunction+0x2c>
    {
        glbl_PCallbackFunc[Copy_uint8CommandNumber] = P_CommandCallbackFunc;
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4907      	ldr	r1, [pc, #28]	@ (80034e0 <HESP32_SetCommandCallbackFunction+0x3c>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Loc_uint8FuncStatus = E_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	e001      	b.n	80034d4 <HESP32_SetCommandCallbackFunction+0x30>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	200006a0 	.word	0x200006a0

080034e4 <HESP32_SetCommandCallbackArgFunction>:

Std_ReturnType HESP32_SetCommandCallbackArgFunction (uint8 Copy_uint8CommandNumber, ptr_to_Arg_Callback_func P_CommandCallbackFunc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b1c      	cmp	r3, #28
 80034f8:	d80b      	bhi.n	8003512 <HESP32_SetCommandCallbackArgFunction+0x2e>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HESP32_SetCommandCallbackArgFunction+0x2e>
    {
        #if HESP32_NO_OF_ARG_COMMANDS == 1
            glbl_PArgCallbackFunc = P_CommandCallbackFunc;
        #elif HESP32_NO_OF_ARG_COMMANDS > 1
            glbl_PArgCallbackFunc[Copy_uint8CommandNumber - HESP32_NO_OF_NON_ARG_COMMANDS] = P_CommandCallbackFunc;
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	3b11      	subs	r3, #17
 8003504:	4907      	ldr	r1, [pc, #28]	@ (8003524 <HESP32_SetCommandCallbackArgFunction+0x40>)
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        #else
        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
        
        Loc_uint8FuncStatus = E_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e001      	b.n	8003516 <HESP32_SetCommandCallbackArgFunction+0x32>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000710 	.word	0x20000710

08003528 <HESP32_SendMotorStatus>:

Std_ReturnType HESP32_SendMotorStatus               (uint32* P_uint32MotorSteps, uint32* P_uint32CurrentWL, uint8 Copy_uint8MotorNum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    if((P_uint32MotorSteps != NULL_PTR) && (P_uint32CurrentWL != NULL_PTR) && ((Copy_uint8MotorNum == 1) || (Copy_uint8MotorNum == 3)))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03b      	beq.n	80035b8 <HESP32_SendMotorStatus+0x90>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d038      	beq.n	80035b8 <HESP32_SendMotorStatus+0x90>
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d002      	beq.n	8003552 <HESP32_SendMotorStatus+0x2a>
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d132      	bne.n	80035b8 <HESP32_SendMotorStatus+0x90>
    {
        uint8 Loc_uint8Index = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	75bb      	strb	r3, [r7, #22]
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 8003556:	2300      	movs	r3, #0
 8003558:	75bb      	strb	r3, [r7, #22]
 800355a:	e015      	b.n	8003588 <HESP32_SendMotorStatus+0x60>
        {
            MUART_SendIntegerValue(HESP32_UART_CHOICE, P_uint32MotorSteps[Loc_uint8Index]);
 800355c:	7dbb      	ldrb	r3, [r7, #22]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	2002      	movs	r0, #2
 800356a:	f003 fb8f 	bl	8006c8c <MUART_SendIntegerValue>
            if((Loc_uint8Index < 2) && (Copy_uint8MotorNum == 3))
 800356e:	7dbb      	ldrb	r3, [r7, #22]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d80d      	bhi.n	8003590 <HESP32_SendMotorStatus+0x68>
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d10a      	bne.n	8003590 <HESP32_SendMotorStatus+0x68>
            {
                MUART_TxChar(HESP32_UART_CHOICE, '-');
 800357a:	212d      	movs	r1, #45	@ 0x2d
 800357c:	2002      	movs	r0, #2
 800357e:	f003 fad1 	bl	8006b24 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 8003582:	7dbb      	ldrb	r3, [r7, #22]
 8003584:	3301      	adds	r3, #1
 8003586:	75bb      	strb	r3, [r7, #22]
 8003588:	7dba      	ldrb	r2, [r7, #22]
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3e5      	bcc.n	800355c <HESP32_SendMotorStatus+0x34>
			else
			{
				break;
			}
        }
        if(Copy_uint8MotorNum == 3)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d109      	bne.n	80035aa <HESP32_SendMotorStatus+0x82>
        {
			MUART_TxChar(HESP32_UART_CHOICE, '-');
 8003596:	212d      	movs	r1, #45	@ 0x2d
 8003598:	2002      	movs	r0, #2
 800359a:	f003 fac3 	bl	8006b24 <MUART_TxChar>
            MUART_SendIntegerValue(HESP32_UART_CHOICE, *P_uint32CurrentWL);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	2002      	movs	r0, #2
 80035a6:	f003 fb71 	bl	8006c8c <MUART_SendIntegerValue>
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80035aa:	210a      	movs	r1, #10
 80035ac:	2002      	movs	r0, #2
 80035ae:	f003 fab9 	bl	8006b24 <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    {
 80035b6:	e001      	b.n	80035bc <HESP32_SendMotorStatus+0x94>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HESP32_SendDateTime>:
Std_ReturnType HESP32_SendDateTime                  (Sdate_t* P_SDateToBeSent, Stime_t* P_STimeToBeSent)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]

    if((P_SDateToBeSent != NULL_PTR) && (P_STimeToBeSent != NULL_PTR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d041      	beq.n	800365e <HESP32_SendDateTime+0x98>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03e      	beq.n	800365e <HESP32_SendDateTime+0x98>
    {
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_months));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	4619      	mov	r1, r3
 80035e6:	2002      	movs	r0, #2
 80035e8:	f003 fb50 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 80035ec:	212f      	movs	r1, #47	@ 0x2f
 80035ee:	2002      	movs	r0, #2
 80035f0:	f003 fa98 	bl	8006b24 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_days));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	78db      	ldrb	r3, [r3, #3]
 80035f8:	4619      	mov	r1, r3
 80035fa:	2002      	movs	r0, #2
 80035fc:	f003 fb46 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003600:	212f      	movs	r1, #47	@ 0x2f
 8003602:	2002      	movs	r0, #2
 8003604:	f003 fa8e 	bl	8006b24 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_years));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	4619      	mov	r1, r3
 800360e:	2002      	movs	r0, #2
 8003610:	f003 fb3c 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003614:	2120      	movs	r1, #32
 8003616:	2002      	movs	r0, #2
 8003618:	f003 fa84 	bl	8006b24 <MUART_TxChar>
        
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_hours));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4619      	mov	r1, r3
 8003622:	2002      	movs	r0, #2
 8003624:	f003 fb32 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 8003628:	213a      	movs	r1, #58	@ 0x3a
 800362a:	2002      	movs	r0, #2
 800362c:	f003 fa7a 	bl	8006b24 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_minutes));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	4619      	mov	r1, r3
 8003636:	2002      	movs	r0, #2
 8003638:	f003 fb28 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 800363c:	213a      	movs	r1, #58	@ 0x3a
 800363e:	2002      	movs	r0, #2
 8003640:	f003 fa70 	bl	8006b24 <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_seconds));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	789b      	ldrb	r3, [r3, #2]
 8003648:	4619      	mov	r1, r3
 800364a:	2002      	movs	r0, #2
 800364c:	f003 fb1e 	bl	8006c8c <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003650:	210a      	movs	r1, #10
 8003652:	2002      	movs	r0, #2
 8003654:	f003 fa66 	bl	8006b24 <MUART_TxChar>
        
        Loc_uint8FuncStatus = E_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <HESP32_SendDateTime+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
    }

    return Loc_uint8FuncStatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HESP32_SendIntensities>:

Std_ReturnType HESP32_SendIntensities              (float32 Copy_float32RefIntensity, float32 Copy_float32SampleIntensity)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	@ 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    	uint8 Loc_uint8IntensityBuffer[32] = {0};
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]

        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32RefIntensity, 3);
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	2203      	movs	r2, #3
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fd44 	bl	8003124 <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	4619      	mov	r1, r3
 80036a2:	2002      	movs	r0, #2
 80036a4:	f003 faa8 	bl	8006bf8 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80036a8:	2120      	movs	r1, #32
 80036aa:	2002      	movs	r0, #2
 80036ac:	f003 fa3a 	bl	8006b24 <MUART_TxChar>

        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32SampleIntensity, 3);
 80036b0:	f107 0308 	add.w	r3, r7, #8
 80036b4:	2203      	movs	r2, #3
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fd33 	bl	8003124 <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	2002      	movs	r0, #2
 80036c6:	f003 fa97 	bl	8006bf8 <MUART_TxString>
        
        
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80036ca:	210a      	movs	r1, #10
 80036cc:	2002      	movs	r0, #2
 80036ce:	f003 fa29 	bl	8006b24 <MUART_TxChar>

        return E_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HESP32_SendVoltages>:

Std_ReturnType HESP32_SendVoltages(uint8 PP_uint8Voltages[][32])
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    if(PP_uint8Voltages != NULL_PTR)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01f      	beq.n	800372a <HESP32_SendVoltages+0x4e>
    {
        uint8 Loc_uint8Index = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e011      	b.n	8003718 <HESP32_SendVoltages+0x3c>
        {
            MUART_TxString(HESP32_UART_CHOICE, PP_uint8Voltages[Loc_uint8Index]);
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	2002      	movs	r0, #2
 8003700:	f003 fa7a 	bl	8006bf8 <MUART_TxString>
            if(Loc_uint8Index < 4)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d803      	bhi.n	8003712 <HESP32_SendVoltages+0x36>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 800370a:	2120      	movs	r1, #32
 800370c:	2002      	movs	r0, #2
 800370e:	f003 fa09 	bl	8006b24 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d9ea      	bls.n	80036f4 <HESP32_SendVoltages+0x18>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 800371e:	210a      	movs	r1, #10
 8003720:	2002      	movs	r0, #2
 8003722:	f003 f9ff 	bl	8006b24 <MUART_TxChar>
        return E_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HESP32_SendVoltages+0x50>

    }
    else
    {
        return E_NOT_OK;
 800372a:	2301      	movs	r3, #1
    }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HESP32_SendAllDetectorValues>:
        return E_NOT_OK;
    }
}

Std_ReturnType HESP32_SendAllDetectorValues(float32* P_float32Readings, float32* P_float32GainValues)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	@ 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
    if((P_float32GainValues != NULL_PTR) && (P_float32Readings != NULL_PTR))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d061      	beq.n	8003808 <HESP32_SendAllDetectorValues+0xd4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d05e      	beq.n	8003808 <HESP32_SendAllDetectorValues+0xd4>
    {
        uint8 Loc_uint8Index = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        uint8 Loc_uint8DetBuffer[32] = {0};
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
 8003764:	615a      	str	r2, [r3, #20]
 8003766:	619a      	str	r2, [r3, #24]
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 8003768:	2300      	movs	r3, #0
 800376a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800376e:	e01a      	b.n	80037a6 <HESP32_SendAllDetectorValues+0x72>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32Readings[Loc_uint8Index], 3);
 8003770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	2203      	movs	r2, #3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fcce 	bl	8003124 <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	4619      	mov	r1, r3
 800378e:	2002      	movs	r0, #2
 8003790:	f003 fa32 	bl	8006bf8 <MUART_TxString>
            MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003794:	2120      	movs	r1, #32
 8003796:	2002      	movs	r0, #2
 8003798:	f003 f9c4 	bl	8006b24 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 4; Loc_uint8Index++)
 800379c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037a0:	3301      	adds	r3, #1
 80037a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d9e0      	bls.n	8003770 <HESP32_SendAllDetectorValues+0x3c>
        }
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037b4:	e01e      	b.n	80037f4 <HESP32_SendAllDetectorValues+0xc0>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32GainValues[Loc_uint8Index], 3);
 80037b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	2203      	movs	r2, #3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fcab 	bl	8003124 <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 80037ce:	f107 030c 	add.w	r3, r7, #12
 80037d2:	4619      	mov	r1, r3
 80037d4:	2002      	movs	r0, #2
 80037d6:	f003 fa0f 	bl	8006bf8 <MUART_TxString>
            if(Loc_uint8Index < 1)
 80037da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HESP32_SendAllDetectorValues+0xb6>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80037e2:	2120      	movs	r1, #32
 80037e4:	2002      	movs	r0, #2
 80037e6:	f003 f99d 	bl	8006b24 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 2; Loc_uint8Index++)
 80037ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037ee:	3301      	adds	r3, #1
 80037f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d9dc      	bls.n	80037b6 <HESP32_SendAllDetectorValues+0x82>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80037fc:	210a      	movs	r1, #10
 80037fe:	2002      	movs	r0, #2
 8003800:	f003 f990 	bl	8006b24 <MUART_TxChar>
        return E_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HESP32_SendAllDetectorValues+0xd6>
    }
    else
    {
        return E_NOT_OK;
 8003808:	2301      	movs	r3, #1
    }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	@ 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <delay_ms>:
 */
#include "MCP4151.h"
#include "math.h"

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e002      	b.n	8003832 <delay_ms+0x20>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3f8      	bcc.n	800382c <delay_ms+0x1a>
		// Do nothing
	}
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <delay_micro>:
void delay_micro(uint32 milliseconds) {
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e002      	b.n	800385e <delay_micro+0x18>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3f8      	bcc.n	8003858 <delay_micro+0x12>
		// Do nothing
	}
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
	...

08003874 <MCP4151_Sample_SetWiperPosition>:
void MCP4151_Sample_SetWiperPosition(uint8 position){
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 800387e:	2300      	movs	r3, #0
 8003880:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_LOW);
 8003882:	2200      	movs	r2, #0
 8003884:	2108      	movs	r1, #8
 8003886:	2000      	movs	r0, #0
 8003888:	f001 fd10 	bl	80052ac <MGPIO_SetPinValue>
	delay_micro(10);
 800388c:	200a      	movs	r0, #10
 800388e:	f7ff ffda 	bl	8003846 <delay_micro>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003892:	f107 030e 	add.w	r3, r7, #14
 8003896:	2200      	movs	r2, #0
 8003898:	4619      	mov	r1, r3
 800389a:	480e      	ldr	r0, [pc, #56]	@ (80038d4 <MCP4151_Sample_SetWiperPosition+0x60>)
 800389c:	f002 feae 	bl	80065fc <MCAL_SPI_SendData>
	delay_micro(10);
 80038a0:	200a      	movs	r0, #10
 80038a2:	f7ff ffd0 	bl	8003846 <delay_micro>
	command = position;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80038ac:	f107 030e 	add.w	r3, r7, #14
 80038b0:	2200      	movs	r2, #0
 80038b2:	4619      	mov	r1, r3
 80038b4:	4807      	ldr	r0, [pc, #28]	@ (80038d4 <MCP4151_Sample_SetWiperPosition+0x60>)
 80038b6:	f002 fea1 	bl	80065fc <MCAL_SPI_SendData>
	delay_micro(10);
 80038ba:	200a      	movs	r0, #10
 80038bc:	f7ff ffc3 	bl	8003846 <delay_micro>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 80038c0:	2201      	movs	r2, #1
 80038c2:	2108      	movs	r1, #8
 80038c4:	2000      	movs	r0, #0
 80038c6:	f001 fcf1 	bl	80052ac <MGPIO_SetPinValue>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800

080038d8 <MCP4151_Referance_SetWiperPosition>:

void MCP4151_Referance_SetWiperPosition(uint8 position){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 80038e2:	2300      	movs	r3, #0
 80038e4:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_LOW);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2102      	movs	r1, #2
 80038ea:	2000      	movs	r0, #0
 80038ec:	f001 fcde 	bl	80052ac <MGPIO_SetPinValue>
	delay_micro(10);
 80038f0:	200a      	movs	r0, #10
 80038f2:	f7ff ffa8 	bl	8003846 <delay_micro>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80038f6:	f107 030e 	add.w	r3, r7, #14
 80038fa:	2200      	movs	r2, #0
 80038fc:	4619      	mov	r1, r3
 80038fe:	480e      	ldr	r0, [pc, #56]	@ (8003938 <MCP4151_Referance_SetWiperPosition+0x60>)
 8003900:	f002 fe7c 	bl	80065fc <MCAL_SPI_SendData>
	delay_micro(10);
 8003904:	200a      	movs	r0, #10
 8003906:	f7ff ff9e 	bl	8003846 <delay_micro>
	command = position;
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	b29b      	uxth	r3, r3
 800390e:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003910:	f107 030e 	add.w	r3, r7, #14
 8003914:	2200      	movs	r2, #0
 8003916:	4619      	mov	r1, r3
 8003918:	4807      	ldr	r0, [pc, #28]	@ (8003938 <MCP4151_Referance_SetWiperPosition+0x60>)
 800391a:	f002 fe6f 	bl	80065fc <MCAL_SPI_SendData>
	delay_micro(10);
 800391e:	200a      	movs	r0, #10
 8003920:	f7ff ff91 	bl	8003846 <delay_micro>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 8003924:	2201      	movs	r2, #1
 8003926:	2102      	movs	r1, #2
 8003928:	2000      	movs	r0, #0
 800392a:	f001 fcbf 	bl	80052ac <MGPIO_SetPinValue>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40003800 	.word	0x40003800

0800393c <MCP4151_Init>:
 * @param[in]		 -none
 * @retval			 -none
 * Note				 -SPI2 used
 */
void MCP4151_Init()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
	//SPI Init

	SPI_Config SPI2CFG;

	SPI2CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8003942:	2301      	movs	r3, #1
 8003944:	817b      	strh	r3, [r7, #10]
	SPI2CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8003946:	2302      	movs	r3, #2
 8003948:	813b      	strh	r3, [r7, #8]
	SPI2CFG.DataSize = SPI_DataSize_8BIT;
 800394a:	2300      	movs	r3, #0
 800394c:	80fb      	strh	r3, [r7, #6]
	SPI2CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 800394e:	2300      	movs	r3, #0
 8003950:	80bb      	strh	r3, [r7, #4]
	SPI2CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_16;
 8003952:	2318      	movs	r3, #24
 8003954:	81fb      	strh	r3, [r7, #14]
	SPI2CFG.Communication_Mode = SPI_Direction_2LINES;
 8003956:	2300      	movs	r3, #0
 8003958:	807b      	strh	r3, [r7, #2]

#ifdef MCU_Act_As_Master

	SPI2CFG.Device_Mode = SPI_Device_Mode_MASTER;
 800395a:	2304      	movs	r3, #4
 800395c:	803b      	strh	r3, [r7, #0]
	SPI2CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 800395e:	2300      	movs	r3, #0
 8003960:	823b      	strh	r3, [r7, #16]
	SPI2CFG.NSS = SPI_NSS_soft_NSSInternalSoft_Set;
 8003962:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003966:	81bb      	strh	r3, [r7, #12]
	SPI2CFG.P_IRQ_CallBack = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_Init(SPI2,&SPI2CFG);
 800396c:	463b      	mov	r3, r7
 800396e:	4619      	mov	r1, r3
 8003970:	4804      	ldr	r0, [pc, #16]	@ (8003984 <MCP4151_Init+0x48>)
 8003972:	f002 fdbd 	bl	80064f0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins (SPI2);
 8003976:	4803      	ldr	r0, [pc, #12]	@ (8003984 <MCP4151_Init+0x48>)
 8003978:	f002 fe80 	bl	800667c <MCAL_SPI_GPIO_Set_Pins>
}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40003800 	.word	0x40003800

08003988 <Set_Sample_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_reference_gain"
 */
void Set_Sample_Gain(float32 gain)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	//Sample
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 8003990:	2201      	movs	r2, #1
 8003992:	2108      	movs	r1, #8
 8003994:	2000      	movs	r0, #0
 8003996:	f001 fba3 	bl	80050e0 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 800399a:	2201      	movs	r2, #1
 800399c:	2108      	movs	r1, #8
 800399e:	2000      	movs	r0, #0
 80039a0:	f001 fc84 	bl	80052ac <MGPIO_SetPinValue>
	delay_micro(100);
 80039a4:	2064      	movs	r0, #100	@ 0x64
 80039a6:	f7ff ff4e 	bl	8003846 <delay_micro>
	ref_sample x = SAMPLE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f82c 	bl	8003a10 <steps_calculate>
 80039b8:	4603      	mov	r3, r0
 80039ba:	73bb      	strb	r3, [r7, #14]
	MCP4151_Sample_SetWiperPosition(steps);
 80039bc:	7bbb      	ldrb	r3, [r7, #14]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff58 	bl	8003874 <MCP4151_Sample_SetWiperPosition>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <Set_Reference_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_sample_gain"
 */
void Set_Reference_Gain(float32 gain)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	//Referance
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 80039d4:	2201      	movs	r2, #1
 80039d6:	2102      	movs	r1, #2
 80039d8:	2000      	movs	r0, #0
 80039da:	f001 fb81 	bl	80050e0 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 80039de:	2201      	movs	r2, #1
 80039e0:	2102      	movs	r1, #2
 80039e2:	2000      	movs	r0, #0
 80039e4:	f001 fc62 	bl	80052ac <MGPIO_SetPinValue>
	delay_micro(100);
 80039e8:	2064      	movs	r0, #100	@ 0x64
 80039ea:	f7ff ff2c 	bl	8003846 <delay_micro>
	ref_sample x = REFERENCE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f80a 	bl	8003a10 <steps_calculate>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73bb      	strb	r3, [r7, #14]
	MCP4151_Referance_SetWiperPosition(steps);
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff68 	bl	80038d8 <MCP4151_Referance_SetWiperPosition>
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <steps_calculate>:
 * @param[in]		 -x: where x can be REFERENCE or SAMPLE
 * @retval			 -steps: calculated no. of steps
 * Note			 	 -The number of steps is rounded to the nearest integer
 */
uint8 steps_calculate(float32 gain, ref_sample x)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
	int total_resistance;
	if (x == REFERENCE)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <steps_calculate+0x1a>
		total_resistance = MCP_TOTAL_RESISTANCE_REFERENCE;
 8003a22:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e002      	b.n	8003a30 <steps_calculate+0x20>
	else
		total_resistance = MCP_TOTAL_RESISTANCE_SAMPLE;
 8003a2a:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8003a2e:	617b      	str	r3, [r7, #20]
	float32 R;
	R = (RESISTANCE_ON_PCB / (gain - 1)) + WIPER_RESISTANCE;
 8003a30:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fd f88d 	bl	8000b54 <__aeabi_fsub>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	481d      	ldr	r0, [pc, #116]	@ (8003ab4 <steps_calculate+0xa4>)
 8003a40:	f7fd fa46 	bl	8000ed0 <__aeabi_fdiv>
 8003a44:	4603      	mov	r3, r0
 8003a46:	491c      	ldr	r1, [pc, #112]	@ (8003ab8 <steps_calculate+0xa8>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd f885 	bl	8000b58 <__addsf3>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	613b      	str	r3, [r7, #16]
	float32 steps_result;
	steps_result = ((total_resistance - R) * 256) / total_resistance;
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f7fd f934 	bl	8000cc0 <__aeabi_i2f>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd f879 	bl	8000b54 <__aeabi_fsub>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd f97d 	bl	8000d68 <__aeabi_fmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461c      	mov	r4, r3
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7fd f924 	bl	8000cc0 <__aeabi_i2f>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fd fa27 	bl	8000ed0 <__aeabi_fdiv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	60fb      	str	r3, [r7, #12]
	uint8 steps = round(steps_result);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7fc fce8 	bl	800045c <__aeabi_f2d>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f007 fdf0 	bl	800b678 <round>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fc ffe4 	bl	8000a6c <__aeabi_d2uiz>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	72fb      	strb	r3, [r7, #11]
	return steps;
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	47c35000 	.word	0x47c35000
 8003ab8:	439b8000 	.word	0x439b8000
 8003abc:	00000000 	.word	0x00000000

08003ac0 <get_reference_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the reference
 * Note			 	 -none
 */
float32 get_reference_gain(float32 gain)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	ref_sample x = REFERENCE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff9d 	bl	8003a10 <steps_calculate>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_REFERENCE - steps * (MCP_TOTAL_RESISTANCE_REFERENCE / 256.0);
 8003ada:	7bbb      	ldrb	r3, [r7, #14]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fcab 	bl	8000438 <__aeabi_i2d>
 8003ae2:	a313      	add	r3, pc, #76	@ (adr r3, 8003b30 <get_reference_gain+0x70>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fd10 	bl	800050c <__aeabi_dmul>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	a111      	add	r1, pc, #68	@ (adr r1, 8003b38 <get_reference_gain+0x78>)
 8003af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003af6:	f7fc fb51 	bl	800019c <__aeabi_dsub>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fc ffd3 	bl	8000aac <__aeabi_d2f>
 8003b06:	4603      	mov	r3, r0
 8003b08:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	480c      	ldr	r0, [pc, #48]	@ (8003b40 <get_reference_gain+0x80>)
 8003b0e:	f7fd f9df 	bl	8000ed0 <__aeabi_fdiv>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd f81d 	bl	8000b58 <__addsf3>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	607b      	str	r3, [r7, #4]
	return gain;
 8003b22:	687b      	ldr	r3, [r7, #4]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	f3af 8000 	nop.w
 8003b30:	00000000 	.word	0x00000000
 8003b34:	4067a200 	.word	0x4067a200
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	40e7a200 	.word	0x40e7a200
 8003b40:	47c35000 	.word	0x47c35000
 8003b44:	00000000 	.word	0x00000000

08003b48 <get_sample_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the sample
 * Note			 	 -none
 */
float32 get_sample_gain(float32 gain)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	ref_sample x = SAMPLE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff59 	bl	8003a10 <steps_calculate>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_SAMPLE- steps * (MCP_TOTAL_RESISTANCE_SAMPLE / 256.0);
 8003b62:	7bbb      	ldrb	r3, [r7, #14]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fc67 	bl	8000438 <__aeabi_i2d>
 8003b6a:	a313      	add	r3, pc, #76	@ (adr r3, 8003bb8 <get_sample_gain+0x70>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc fccc 	bl	800050c <__aeabi_dmul>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	a111      	add	r1, pc, #68	@ (adr r1, 8003bc0 <get_sample_gain+0x78>)
 8003b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b7e:	f7fc fb0d 	bl	800019c <__aeabi_dsub>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f7fc ff8f 	bl	8000aac <__aeabi_d2f>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	480c      	ldr	r0, [pc, #48]	@ (8003bc8 <get_sample_gain+0x80>)
 8003b96:	f7fd f99b 	bl	8000ed0 <__aeabi_fdiv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc ffd9 	bl	8000b58 <__addsf3>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	607b      	str	r3, [r7, #4]
	return gain;
 8003baa:	687b      	ldr	r3, [r7, #4]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	4067a200 	.word	0x4067a200
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	40e7a200 	.word	0x40e7a200
 8003bc8:	47c35000 	.word	0x47c35000

08003bcc <HPWRSupply_GetSenseValue>:
static volatile uint16 glbl_uint16SenseValue[HPWRSUPPLY_NO_OF_SENSE_CHANNELS] = {0};
static volatile uint8 glbl_uint8SlowChannelFlag = 0;


void HPWRSupply_GetSenseValue(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	80fb      	strh	r3, [r7, #6]
    
    /****************************Check if VIS supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[0] == HPWRSUPPLY_ON)
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <HPWRSupply_GetSenseValue+0x80>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d121      	bne.n	8003c24 <HPWRSupply_GetSenseValue+0x58>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[0], &Loc_uint16VoltageValue);
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HPWRSupply_GetSenseValue+0x84>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	1dba      	adds	r2, r7, #6
 8003be8:	4619      	mov	r1, r3
 8003bea:	2000      	movs	r0, #0
 8003bec:	f000 ffdc 	bl	8004ba8 <MADC_Conversion>
        glbl_uint16SenseValue[0] = Loc_uint16VoltageValue;
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <HPWRSupply_GetSenseValue+0x88>)
 8003bf4:	801a      	strh	r2, [r3, #0]
        if(glbl_uint8SlowChannelFlag == 1)
 8003bf6:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <HPWRSupply_GetSenseValue+0x8c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10e      	bne.n	8003c1e <HPWRSupply_GetSenseValue+0x52>
        {
            MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[1], &Loc_uint16VoltageValue);
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <HPWRSupply_GetSenseValue+0x84>)
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	1dba      	adds	r2, r7, #6
 8003c08:	4619      	mov	r1, r3
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f000 ffcc 	bl	8004ba8 <MADC_Conversion>
            glbl_uint16SenseValue[1] = Loc_uint16VoltageValue;
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HPWRSupply_GetSenseValue+0x88>)
 8003c14:	805a      	strh	r2, [r3, #2]
            glbl_uint8SlowChannelFlag = 0;
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <HPWRSupply_GetSenseValue+0x8c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e002      	b.n	8003c24 <HPWRSupply_GetSenseValue+0x58>
        }
        else
        {
            glbl_uint8SlowChannelFlag = 1;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <HPWRSupply_GetSenseValue+0x8c>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	701a      	strb	r2, [r3, #0]
    {
        /*Do nothing*/
    }

    /****************************Check if UV supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[1] == HPWRSUPPLY_ON)
 8003c24:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <HPWRSupply_GetSenseValue+0x80>)
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10a      	bne.n	8003c44 <HPWRSupply_GetSenseValue+0x78>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[2], &Loc_uint16VoltageValue);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HPWRSupply_GetSenseValue+0x84>)
 8003c30:	789b      	ldrb	r3, [r3, #2]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	1dba      	adds	r2, r7, #6
 8003c36:	4619      	mov	r1, r3
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f000 ffb5 	bl	8004ba8 <MADC_Conversion>
        glbl_uint16SenseValue[2] = Loc_uint16VoltageValue;
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <HPWRSupply_GetSenseValue+0x88>)
 8003c42:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        /*Do nothing*/
    }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	2000076c 	.word	0x2000076c
 8003c50:	20000368 	.word	0x20000368
 8003c54:	20000770 	.word	0x20000770
 8003c58:	20000776 	.word	0x20000776

08003c5c <HPWRSupply_InitSupplies>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Interface Initialized
 * @retval E_NOT_OK:                                Interface not initialized 
 */
Std_ReturnType HPWRSupply_InitSupplies              (void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM4_EN);
 8003c62:	2102      	movs	r1, #2
 8003c64:	2002      	movs	r0, #2
 8003c66:	f002 f9b9 	bl	8005fdc <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 8003c6a:	2109      	movs	r1, #9
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f002 f9b5 	bl	8005fdc <MRCC_EnablePeripheralClock>
    uint8 Loc_uint8Index = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	71fb      	strb	r3, [r7, #7]

    /************************Initialize Pins Used in PWRSupply Interface************************/
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	71fb      	strb	r3, [r7, #7]
 8003c7a:	e00e      	b.n	8003c9a <HPWRSupply_InitSupplies+0x3e>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf8 <HPWRSupply_InitSupplies+0x9c>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	b2d8      	uxtb	r0, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplySensePinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003c86:	4a1d      	ldr	r2, [pc, #116]	@ (8003cfc <HPWRSupply_InitSupplies+0xa0>)
 8003c88:	5cd3      	ldrb	r3, [r2, r3]
 8003c8a:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f001 fa26 	bl	80050e0 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	3301      	adds	r3, #1
 8003c98:	71fb      	strb	r3, [r7, #7]
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d9ed      	bls.n	8003c7c <HPWRSupply_InitSupplies+0x20>
    }

    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	e00e      	b.n	8003cc4 <HPWRSupply_InitSupplies+0x68>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <HPWRSupply_InitSupplies+0xa4>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	b2d8      	uxtb	r0, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplyControlPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HPWRSupply_InitSupplies+0xa8>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f001 fa11 	bl	80050e0 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	71fb      	strb	r3, [r7, #7]
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d9ed      	bls.n	8003ca6 <HPWRSupply_InitSupplies+0x4a>
    }


    MNVIC_EnableInterrupt(MNVIC_TIM4);
 8003cca:	201e      	movs	r0, #30
 8003ccc:	f002 f8a0 	bl	8005e10 <MNVIC_EnableInterrupt>

    //MADC_Init(MADC1);
    
    MGPTMR_SetTimerPeriod(MGPTMR4, 2000);
 8003cd0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f001 fd11 	bl	80056fc <MGPTMR_SetTimerPeriod>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR4, HPWRSupply_GetSenseValue);
 8003cda:	490b      	ldr	r1, [pc, #44]	@ (8003d08 <HPWRSupply_InitSupplies+0xac>)
 8003cdc:	2002      	movs	r0, #2
 8003cde:	f001 fd35 	bl	800574c <MGPTMR_SetTimerUpdateCallbackFunc>
    MGPTMR_Init(MGPTMR4);
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f001 fc50 	bl	8005588 <MGPTMR_Init>
    MGPTMR_StartTimer(MGPTMR4);
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f001 fccd 	bl	8005688 <MGPTMR_StartTimer>
}
 8003cee:	bf00      	nop
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000036c 	.word	0x2000036c
 8003cfc:	20000370 	.word	0x20000370
 8003d00:	20000374 	.word	0x20000374
 8003d04:	20000378 	.word	0x20000378
 8003d08:	08003bcd 	.word	0x08003bcd

08003d0c <HPWRSupply_SetSupplyMode>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Supply's mode set successfully
 * @retval E_NOT_OK:                                Supply's mode not set  
 */
Std_ReturnType HPWRSupply_SetSupplyMode             (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Mode_t Copy_uint32SupplyMode)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	460a      	mov	r2, r1
 8003d16:	71fb      	strb	r3, [r7, #7]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint32SupplyChoice)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04e      	beq.n	8003dc4 <HPWRSupply_SetSupplyMode+0xb8>
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d179      	bne.n	8003e1e <HPWRSupply_SetSupplyMode+0x112>
    {
        case HPWRSUPPLY_VIS_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003d2a:	79bb      	ldrb	r3, [r7, #6]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d121      	bne.n	8003d74 <HPWRSupply_SetSupplyMode+0x68>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_HIGH);
 8003d30:	4b3f      	ldr	r3, [pc, #252]	@ (8003e30 <HPWRSupply_SetSupplyMode+0x124>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4a3f      	ldr	r2, [pc, #252]	@ (8003e34 <HPWRSupply_SetSupplyMode+0x128>)
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	b2d1      	uxtb	r1, r2
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fab4 	bl	80052ac <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_ON;
 8003d44:	4b3c      	ldr	r3, [pc, #240]	@ (8003e38 <HPWRSupply_SetSupplyMode+0x12c>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
                MSTK_uint8Delay(4000);
 8003d4a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003d4e:	f002 fd81 	bl	8006854 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003d52:	2304      	movs	r3, #4
 8003d54:	73bb      	strb	r3, [r7, #14]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003d56:	f107 030e 	add.w	r3, r7, #14
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f000 f86d 	bl	8003e3c <HPWRSupply_CheckSupplyStatus>
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d102      	bne.n	8003d6e <HPWRSupply_SetSupplyMode+0x62>
                {
                    Loc_uint8FuncStatus = E_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003d6c:	e05a      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
            break;
 8003d72:	e057      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003d74:	79bb      	ldrb	r3, [r7, #6]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <HPWRSupply_SetSupplyMode+0xb2>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_LOW);
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HPWRSupply_SetSupplyMode+0x124>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <HPWRSupply_SetSupplyMode+0x128>)
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	b2d1      	uxtb	r1, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fa8f 	bl	80052ac <MGPIO_SetPinValue>
                MSTK_uint8Delay(4000);
 8003d8e:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003d92:	f002 fd5f 	bl	8006854 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003d96:	2302      	movs	r3, #2
 8003d98:	737b      	strb	r3, [r7, #13]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003d9a:	f107 030d 	add.w	r3, r7, #13
 8003d9e:	4619      	mov	r1, r3
 8003da0:	2001      	movs	r0, #1
 8003da2:	f000 f84b 	bl	8003e3c <HPWRSupply_CheckSupplyStatus>
								glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003da6:	4b24      	ldr	r3, [pc, #144]	@ (8003e38 <HPWRSupply_SetSupplyMode+0x12c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OFF)
 8003dac:	7b7b      	ldrb	r3, [r7, #13]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d102      	bne.n	8003db8 <HPWRSupply_SetSupplyMode+0xac>
                    Loc_uint8FuncStatus = E_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
            break;
 8003db6:	e035      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
            break;
 8003dbc:	e032      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
            break;
 8003dc2:	e02f      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
        }
        case HPWRSUPPLY_UV_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003dc4:	79bb      	ldrb	r3, [r7, #6]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d113      	bne.n	8003df2 <HPWRSupply_SetSupplyMode+0xe6>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_LOW);
 8003dca:	4b19      	ldr	r3, [pc, #100]	@ (8003e30 <HPWRSupply_SetSupplyMode+0x124>)
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	4a18      	ldr	r2, [pc, #96]	@ (8003e34 <HPWRSupply_SetSupplyMode+0x128>)
 8003dd2:	7852      	ldrb	r2, [r2, #1]
 8003dd4:	b2d1      	uxtb	r1, r2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fa67 	bl	80052ac <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[1] = HPWRSUPPLY_ON;
 8003dde:	4b16      	ldr	r3, [pc, #88]	@ (8003e38 <HPWRSupply_SetSupplyMode+0x12c>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	705a      	strb	r2, [r3, #1]
								MSTK_uint8Delay(11000);
 8003de4:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 8003de8:	f002 fd34 	bl	8006854 <MSTK_uint8Delay>
                Loc_uint8FuncStatus = E_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003df0:	e018      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003df2:	79bb      	ldrb	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <HPWRSupply_SetSupplyMode+0x10c>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_HIGH);
 8003df8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <HPWRSupply_SetSupplyMode+0x124>)
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HPWRSupply_SetSupplyMode+0x128>)
 8003e00:	7852      	ldrb	r2, [r2, #1]
 8003e02:	b2d1      	uxtb	r1, r2
 8003e04:	2201      	movs	r2, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fa50 	bl	80052ac <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HPWRSupply_SetSupplyMode+0x12c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
            break;
 8003e16:	e005      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
            break;
 8003e1c:	e002      	b.n	8003e24 <HPWRSupply_SetSupplyMode+0x118>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
            break;
 8003e22:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000374 	.word	0x20000374
 8003e34:	20000378 	.word	0x20000378
 8003e38:	2000076c 	.word	0x2000076c

08003e3c <HPWRSupply_CheckSupplyStatus>:
 * @param Copy_uint32SupplyChoice:                  The power supply whose status is to be checked 
 * @param P_uint32SupplyStatus:                     Power Supply Status (Ok or not Ok or Off)
 * @return Std_ReturnType 
 */
Std_ReturnType HPWRSupply_CheckSupplyStatus         (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Status_t* P_uint32SupplyStatus)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
    if(P_uint32SupplyStatus != NULL_PTR)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d054      	beq.n	8003efc <HPWRSupply_CheckSupplyStatus+0xc0>
    {
        switch(Copy_uint32SupplyChoice)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d037      	beq.n	8003ec8 <HPWRSupply_CheckSupplyStatus+0x8c>
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d14c      	bne.n	8003ef6 <HPWRSupply_CheckSupplyStatus+0xba>
        {
            case HPWRSUPPLY_VIS_SUPPLY:
            {
                float32 Loc_float32VisSupplySenseVoltage = ((float32)glbl_uint16SenseValue[0] / 4096) * 3.3f;
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f0c <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc ff28 	bl	8000cb8 <__aeabi_ui2f>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fd f82e 	bl	8000ed0 <__aeabi_fdiv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4926      	ldr	r1, [pc, #152]	@ (8003f10 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc ff75 	bl	8000d68 <__aeabi_fmul>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	613b      	str	r3, [r7, #16]
                /*Check if Loc_float32VisSupplySenseVoltage is equal to a certain value*/
                /*if it is equal, supply is working well*/
                if((Loc_float32VisSupplySenseVoltage > 0.124f) && (Loc_float32VisSupplySenseVoltage < 0.2f))
 8003e82:	4924      	ldr	r1, [pc, #144]	@ (8003f14 <HPWRSupply_CheckSupplyStatus+0xd8>)
 8003e84:	6938      	ldr	r0, [r7, #16]
 8003e86:	f7fd f92b 	bl	80010e0 <__aeabi_fcmpgt>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HPWRSupply_CheckSupplyStatus+0x6e>
 8003e90:	4921      	ldr	r1, [pc, #132]	@ (8003f18 <HPWRSupply_CheckSupplyStatus+0xdc>)
 8003e92:	6938      	ldr	r0, [r7, #16]
 8003e94:	f7fd f906 	bl	80010a4 <__aeabi_fcmplt>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HPWRSupply_CheckSupplyStatus+0x6e>
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	701a      	strb	r2, [r3, #0]
                    Loc_uint8FuncStatus = E_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
                }
                break;
 8003ea8:	e02a      	b.n	8003f00 <HPWRSupply_CheckSupplyStatus+0xc4>
                else if(Loc_float32VisSupplySenseVoltage < 0.05f)
 8003eaa:	491c      	ldr	r1, [pc, #112]	@ (8003f1c <HPWRSupply_CheckSupplyStatus+0xe0>)
 8003eac:	6938      	ldr	r0, [r7, #16]
 8003eae:	f7fd f8f9 	bl	80010a4 <__aeabi_fcmplt>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HPWRSupply_CheckSupplyStatus+0x84>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	701a      	strb	r2, [r3, #0]
                break;
 8003ebe:	e01f      	b.n	8003f00 <HPWRSupply_CheckSupplyStatus+0xc4>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	701a      	strb	r2, [r3, #0]
                break;
 8003ec6:	e01b      	b.n	8003f00 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            case HPWRSUPPLY_UV_SUPPLY:
            {
                float32 Loc_float32UVSupplySenseVoltage = ((float32)glbl_uint16SenseValue[2] / 4096) * 3.3f;
 8003ec8:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003eca:	889b      	ldrh	r3, [r3, #4]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fef2 	bl	8000cb8 <__aeabi_ui2f>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fff8 	bl	8000ed0 <__aeabi_fdiv>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	490b      	ldr	r1, [pc, #44]	@ (8003f10 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc ff3f 	bl	8000d68 <__aeabi_fmul>
 8003eea:	4603      	mov	r3, r0
 8003eec:	60fb      	str	r3, [r7, #12]
                /*Check if Loc_float32UVSupplySenseVoltage is equal to a certain value*/
                *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
                /*if it is equal, supply is working well*/
                break;
 8003ef4:	e004      	b.n	8003f00 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
                break;
 8003efa:	e001      	b.n	8003f00 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000770 	.word	0x20000770
 8003f10:	40533333 	.word	0x40533333
 8003f14:	3dfdf3b6 	.word	0x3dfdf3b6
 8003f18:	3e4ccccd 	.word	0x3e4ccccd
 8003f1c:	3d4ccccd 	.word	0x3d4ccccd

08003f20 <SPWRVolt_GetConversionValue>:
static volatile uint16 glbl_uint16VoltageValues[SPWRVOLT_NO_OF_VOLTAGE_SOURCES] = {0};
static volatile uint8 glbl_uint8VoltageIndex = 0;


void SPWRVolt_GetConversionValue    (void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	80fb      	strh	r3, [r7, #6]

    MADC_Conversion(MADC1, SPWRVolt_VoltageChannels[glbl_uint8VoltageIndex], &Loc_uint16VoltageValue);
 8003f2a:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <SPWRVolt_GetConversionValue+0x5c>)
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	1dba      	adds	r2, r7, #6
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f000 fe33 	bl	8004ba8 <MADC_Conversion>
    glbl_uint16VoltageValues[glbl_uint8VoltageIndex] = Loc_uint16VoltageValue;
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	88f9      	ldrh	r1, [r7, #6]
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <SPWRVolt_GetConversionValue+0x60>)
 8003f4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    glbl_uint8VoltageIndex++;
 8003f52:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f5e:	701a      	strb	r2, [r3, #0]
    if(glbl_uint8VoltageIndex == SPWRVOLT_NO_OF_VOLTAGE_SOURCES)
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d102      	bne.n	8003f70 <SPWRVolt_GetConversionValue+0x50>
    {
        glbl_uint8VoltageIndex = 0;
 8003f6a:	4b03      	ldr	r3, [pc, #12]	@ (8003f78 <SPWRVolt_GetConversionValue+0x58>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
        //MGPTMR_StopTimer(MGPTMR3);
    }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2000078a 	.word	0x2000078a
 8003f7c:	20000384 	.word	0x20000384
 8003f80:	20000780 	.word	0x20000780

08003f84 <SPWRVolt_Init>:
 * @return Std_ReturnType
 * @retval E_OK:            Interface Successfully Initialized
 * @retval E_NOT_OK:        Interface not initialized 
 */
Std_ReturnType SPWRVolt_Init        (void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
    /*Initialize Pins to be input analog*/
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM3_EN);
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	2002      	movs	r0, #2
 8003f8e:	f002 f825 	bl	8005fdc <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 8003f92:	2109      	movs	r1, #9
 8003f94:	2003      	movs	r0, #3
 8003f96:	f002 f821 	bl	8005fdc <MRCC_EnablePeripheralClock>
    
	uint8 Loc_uint8Index = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	71fb      	strb	r3, [r7, #7]
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	71fb      	strb	r3, [r7, #7]
 8003fa2:	e00e      	b.n	8003fc2 <SPWRVolt_Init+0x3e>
    {
        MGPIO_SetPinMode(SPWRVolt_VoltagesPortIDs[Loc_uint8Index], SPWRVolt_VoltagesPinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <SPWRVolt_Init+0x7c>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	b2d8      	uxtb	r0, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <SPWRVolt_Init+0x80>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f001 f892 	bl	80050e0 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d9ed      	bls.n	8003fa4 <SPWRVolt_Init+0x20>
    }
		
    MADC_Init(MADC1);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f000 fd45 	bl	8004a58 <MADC_Init>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR3, SPWRVolt_GetConversionValue);
 8003fce:	490e      	ldr	r1, [pc, #56]	@ (8004008 <SPWRVolt_Init+0x84>)
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f001 fbbb 	bl	800574c <MGPTMR_SetTimerUpdateCallbackFunc>

    MGPTMR_SetTimerPeriod(MGPTMR3, 1000);
 8003fd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f001 fb8e 	bl	80056fc <MGPTMR_SetTimerPeriod>
		
	MNVIC_EnableInterrupt(MNVIC_TIM3);
 8003fe0:	201d      	movs	r0, #29
 8003fe2:	f001 ff15 	bl	8005e10 <MNVIC_EnableInterrupt>
		
    MGPTMR_Init(MGPTMR3);
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f001 face 	bl	8005588 <MGPTMR_Init>

    SPWRVolt_GetConversionValue();
 8003fec:	f7ff ff98 	bl	8003f20 <SPWRVolt_GetConversionValue>

    MGPTMR_StartTimer(MGPTMR3);
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	f001 fb49 	bl	8005688 <MGPTMR_StartTimer>

    return E_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000778 	.word	0x20000778
 8004004:	2000037c 	.word	0x2000037c
 8004008:	08003f21 	.word	0x08003f21

0800400c <SPWRVolt_GetVoltage>:
 * @return Std_ReturnType
 * @retval E_OK:            Voltage Successfully Read
 * @retval E_NOT_OK:        Voltage not read 
 */
Std_ReturnType SPWRVolt_GetVoltage  (SPWRVolt_Choice_t Copy_uint32VoltageChoice, uint16* P_uint16VoltageValue)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	6039      	str	r1, [r7, #0]
 8004016:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
    if(P_uint16VoltageValue != NULL_PTR)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <SPWRVolt_GetVoltage+0x2a>
    {
        *P_uint16VoltageValue = glbl_uint16VoltageValues[Copy_uint32VoltageChoice];
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <SPWRVolt_GetVoltage+0x3c>)
 8004026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402a:	b29a      	uxth	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e001      	b.n	800403a <SPWRVolt_GetVoltage+0x2e>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000780 	.word	0x20000780

0800404c <HMOTORS_Init>:
static volatile uint32 glbl_uint32FilterInitCalibration 				= 28;
static volatile uint32 glbl_uint32ZeroWLSteps							= 120;
static volatile float32 glbl_float32StepsPerNm							= 5;

Std_ReturnType HMOTORS_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8004052:	2100      	movs	r1, #0
 8004054:	2003      	movs	r0, #3
 8004056:	f001 ffc1 	bl	8005fdc <MRCC_EnablePeripheralClock>
	MAFIO_MAPR_R &= ~((0b111) << 24);
 800405a:	4b3c      	ldr	r3, [pc, #240]	@ (800414c <HMOTORS_Init+0x100>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a3b      	ldr	r2, [pc, #236]	@ (800414c <HMOTORS_Init+0x100>)
 8004060:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004064:	6013      	str	r3, [r2, #0]
	MAFIO_MAPR_R |= ((0b010) << 24);
 8004066:	4b39      	ldr	r3, [pc, #228]	@ (800414c <HMOTORS_Init+0x100>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a38      	ldr	r2, [pc, #224]	@ (800414c <HMOTORS_Init+0x100>)
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004070:	6013      	str	r3, [r2, #0]
	
	uint8 Loc_uint8Index = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	71fb      	strb	r3, [r7, #7]
	
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 8004076:	2300      	movs	r3, #0
 8004078:	71fb      	strb	r3, [r7, #7]
 800407a:	e01a      	b.n	80040b2 <HMOTORS_Init+0x66>
	{
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	4a34      	ldr	r2, [pc, #208]	@ (8004150 <HMOTORS_Init+0x104>)
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	b2d8      	uxtb	r0, r3
 8004084:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorHomingPinIDs[Loc_uint8Index], MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 8004086:	4a33      	ldr	r2, [pc, #204]	@ (8004154 <HMOTORS_Init+0x108>)
 8004088:	5cd3      	ldrb	r3, [r2, r3]
 800408a:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 800408c:	2208      	movs	r2, #8
 800408e:	4619      	mov	r1, r3
 8004090:	f001 f826 	bl	80050e0 <MGPIO_SetPinMode>
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a2e      	ldr	r2, [pc, #184]	@ (8004150 <HMOTORS_Init+0x104>)
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorHomingPinIDs[Loc_uint8Index]);
 800409e:	492d      	ldr	r1, [pc, #180]	@ (8004154 <HMOTORS_Init+0x108>)
 80040a0:	5ccb      	ldrb	r3, [r1, r3]
 80040a2:	b2db      	uxtb	r3, r3
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f001 f9f4 	bl	8005494 <MGPIO_ActivatePullUp>
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	3301      	adds	r3, #1
 80040b0:	71fb      	strb	r3, [r7, #7]
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d9e1      	bls.n	800407c <HMOTORS_Init+0x30>
	}
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	e01a      	b.n	80040f4 <HMOTORS_Init+0xa8>
	{
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	4a25      	ldr	r2, [pc, #148]	@ (8004158 <HMOTORS_Init+0x10c>)
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	b2d8      	uxtb	r0, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80040c8:	4a24      	ldr	r2, [pc, #144]	@ (800415c <HMOTORS_Init+0x110>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 80040ce:	2202      	movs	r2, #2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f001 f805 	bl	80050e0 <MGPIO_SetPinMode>
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	4a21      	ldr	r2, [pc, #132]	@ (8004160 <HMOTORS_Init+0x114>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	b2d8      	uxtb	r0, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsDirPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 80040e0:	4a20      	ldr	r2, [pc, #128]	@ (8004164 <HMOTORS_Init+0x118>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	b2db      	uxtb	r3, r3
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 80040e6:	2202      	movs	r2, #2
 80040e8:	4619      	mov	r1, r3
 80040ea:	f000 fff9 	bl	80050e0 <MGPIO_SetPinMode>
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	3301      	adds	r3, #1
 80040f2:	71fb      	strb	r3, [r7, #7]
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d9e1      	bls.n	80040be <HMOTORS_Init+0x72>
	}

	MNVIC_EnableInterrupt(MNVIC_EXTI15_10);
 80040fa:	2028      	movs	r0, #40	@ 0x28
 80040fc:	f001 fe88 	bl	8005e10 <MNVIC_EnableInterrupt>
	MNVIC_EnableInterrupt(MNVIC_EXTI0);
 8004100:	2006      	movs	r0, #6
 8004102:	f001 fe85 	bl	8005e10 <MNVIC_EnableInterrupt>

	MEXTI_SetCallbackFunction(MEXTI_EXTI13, HMOTOR_FilterHomeIndicator);
 8004106:	4918      	ldr	r1, [pc, #96]	@ (8004168 <HMOTORS_Init+0x11c>)
 8004108:	200d      	movs	r0, #13
 800410a:	f000 fe73 	bl	8004df4 <MEXTI_SetCallbackFunction>
	MEXTI_SetCallbackFunction(MEXTI_EXTI0, HMOTOR_WLHomeIndicator);
 800410e:	4917      	ldr	r1, [pc, #92]	@ (800416c <HMOTORS_Init+0x120>)
 8004110:	2000      	movs	r0, #0
 8004112:	f000 fe6f 	bl	8004df4 <MEXTI_SetCallbackFunction>
	
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI13, MGPIO_PORTC);
 8004116:	2102      	movs	r1, #2
 8004118:	200d      	movs	r0, #13
 800411a:	f000 fdc1 	bl	8004ca0 <MAFIO_SetEXTIPinConfigurations>
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI0, MGPIO_PORTA);
 800411e:	2100      	movs	r1, #0
 8004120:	2000      	movs	r0, #0
 8004122:	f000 fdbd 	bl	8004ca0 <MAFIO_SetEXTIPinConfigurations>

	MEXTI_EnableExternalInterrupt(MEXTI_EXTI13, MEXTI_INT_AT_FALLING_EDGE);
 8004126:	2101      	movs	r1, #1
 8004128:	200d      	movs	r0, #13
 800412a:	f000 fdff 	bl	8004d2c <MEXTI_EnableExternalInterrupt>
	MEXTI_EnableExternalInterrupt(MEXTI_EXTI0, MEXTI_INT_AT_FALLING_EDGE);
 800412e:	2101      	movs	r1, #1
 8004130:	2000      	movs	r0, #0
 8004132:	f000 fdfb 	bl	8004d2c <MEXTI_EnableExternalInterrupt>

	//GET FIRST VALUE OF FILTER CALIBRATION
	eeprom_read_byte(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &glbl_uint32FilterInitCalibration, 1);
 8004136:	2201      	movs	r2, #1
 8004138:	490d      	ldr	r1, [pc, #52]	@ (8004170 <HMOTORS_Init+0x124>)
 800413a:	20d8      	movs	r0, #216	@ 0xd8
 800413c:	f7fe ffc4 	bl	80030c8 <eeprom_read_byte>

	return E_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40010004 	.word	0x40010004
 8004150:	2000039c 	.word	0x2000039c
 8004154:	200003a0 	.word	0x200003a0
 8004158:	2000038c 	.word	0x2000038c
 800415c:	20000390 	.word	0x20000390
 8004160:	20000394 	.word	0x20000394
 8004164:	20000398 	.word	0x20000398
 8004168:	08004925 	.word	0x08004925
 800416c:	0800493d 	.word	0x0800493d
 8004170:	200003a4 	.word	0x200003a4

08004174 <HMOTOR_Step>:

Std_ReturnType HMOTOR_Step(HMOTORS_Select_t Copy_uint32MotorSelect, uint32 Copy_uint32NoOfSetps, uint8 Copy_uint8Direction, uint8 Copy_uint8MotorSpeed)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6039      	str	r1, [r7, #0]
 800417c:	4611      	mov	r1, r2
 800417e:	461a      	mov	r2, r3
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
 8004184:	460b      	mov	r3, r1
 8004186:	71bb      	strb	r3, [r7, #6]
 8004188:	4613      	mov	r3, r2
 800418a:	717b      	strb	r3, [r7, #5]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]

	uint32 Loc_uint32Index = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
	switch(Copy_uint8Direction)
 8004194:	79bb      	ldrb	r3, [r7, #6]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d002      	beq.n	80041a0 <HMOTOR_Step+0x2c>
 800419a:	2b02      	cmp	r3, #2
 800419c:	d00f      	beq.n	80041be <HMOTOR_Step+0x4a>
 800419e:	e01d      	b.n	80041dc <HMOTOR_Step+0x68>
	{
		case HMOTORS_CLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4a36      	ldr	r2, [pc, #216]	@ (800427c <HMOTOR_Step+0x108>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	b2d8      	uxtb	r0, r3
 80041a8:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80041aa:	4a35      	ldr	r2, [pc, #212]	@ (8004280 <HMOTOR_Step+0x10c>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80041b0:	2201      	movs	r2, #1
 80041b2:	4619      	mov	r1, r3
 80041b4:	f001 f87a 	bl	80052ac <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
			break;
 80041bc:	e011      	b.n	80041e2 <HMOTOR_Step+0x6e>
		}
		case HMOTORS_CCLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <HMOTOR_Step+0x108>)
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	b2d8      	uxtb	r0, r3
 80041c6:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 80041c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HMOTOR_Step+0x10c>)
 80041ca:	5cd3      	ldrb	r3, [r2, r3]
 80041cc:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80041ce:	2200      	movs	r2, #0
 80041d0:	4619      	mov	r1, r3
 80041d2:	f001 f86b 	bl	80052ac <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
		
			break;
 80041da:	e002      	b.n	80041e2 <HMOTOR_Step+0x6e>
		}
		default:
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
			break;
 80041e0:	bf00      	nop
		}
	}
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	e040      	b.n	800426a <HMOTOR_Step+0xf6>
	{
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HMOTOR_Step+0x110>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
 80041ee:	b2d8      	uxtb	r0, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80041f2:	4a25      	ldr	r2, [pc, #148]	@ (8004288 <HMOTOR_Step+0x114>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80041f8:	2201      	movs	r2, #1
 80041fa:	4619      	mov	r1, r3
 80041fc:	f001 f856 	bl	80052ac <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8004200:	797b      	ldrb	r3, [r7, #5]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fb24 	bl	8006854 <MSTK_uint8Delay>
		
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <HMOTOR_Step+0x110>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	b2d8      	uxtb	r0, r3
 8004214:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HMOTOR_Step+0x114>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 800421c:	2200      	movs	r2, #0
 800421e:	4619      	mov	r1, r3
 8004220:	f001 f844 	bl	80052ac <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8004224:	797b      	ldrb	r3, [r7, #5]
 8004226:	085b      	lsrs	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	f002 fb12 	bl	8006854 <MSTK_uint8Delay>
		if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d108      	bne.n	8004248 <HMOTOR_Step+0xd4>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] ++;
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	4a14      	ldr	r2, [pc, #80]	@ (800428c <HMOTOR_Step+0x118>)
 800423a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800423e:	3201      	adds	r2, #1
 8004240:	4912      	ldr	r1, [pc, #72]	@ (800428c <HMOTOR_Step+0x118>)
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004246:	e00d      	b.n	8004264 <HMOTOR_Step+0xf0>
		}
		else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 8004248:	79bb      	ldrb	r3, [r7, #6]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d108      	bne.n	8004260 <HMOTOR_Step+0xec>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] --;
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	4a0e      	ldr	r2, [pc, #56]	@ (800428c <HMOTOR_Step+0x118>)
 8004252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004256:	3a01      	subs	r2, #1
 8004258:	490c      	ldr	r1, [pc, #48]	@ (800428c <HMOTOR_Step+0x118>)
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800425e:	e001      	b.n	8004264 <HMOTOR_Step+0xf0>
		}
		else
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3ba      	bcc.n	80041e8 <HMOTOR_Step+0x74>
		}
	}
	return Loc_uint8FuncStatus;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000394 	.word	0x20000394
 8004280:	20000398 	.word	0x20000398
 8004284:	2000038c 	.word	0x2000038c
 8004288:	20000390 	.word	0x20000390
 800428c:	2000078c 	.word	0x2000078c

08004290 <HMOTOR_MoveLampMotor>:

// lamp motor
Std_ReturnType HMOTOR_MoveLampMotor(HMOTOR_Lamp_Select_t Copy_uint32LampSelect)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
	switch(Copy_uint32LampSelect)
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HMOTOR_MoveLampMotor+0x16>
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d008      	beq.n	80042b6 <HMOTOR_MoveLampMotor+0x26>
 80042a4:	e018      	b.n	80042d8 <HMOTOR_MoveLampMotor+0x48>
	{
		case HMOTOR_LAMP_UV:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 0)
 80042a6:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <HMOTOR_MoveLampMotor+0x5c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HMOTOR_MoveLampMotor+0x4c>
			{
				HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 80042ae:	2000      	movs	r0, #0
 80042b0:	f000 fa4a 	bl	8004748 <HMOTOR_GoHome>
			}
			else
			{
				/*Do nothing*/
			}
			break;
 80042b4:	e012      	b.n	80042dc <HMOTOR_MoveLampMotor+0x4c>
		}
		case HMOTOR_LAMP_VIS:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 100)
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <HMOTOR_MoveLampMotor+0x5c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b64      	cmp	r3, #100	@ 0x64
 80042bc:	d010      	beq.n	80042e0 <HMOTOR_MoveLampMotor+0x50>
			{
				HMOTOR_Step(HMOTOR_LAMP_SELECT, 100, HMOTORS_CCLKWISE_DIRECTION, 10);
 80042be:	230a      	movs	r3, #10
 80042c0:	2202      	movs	r2, #2
 80042c2:	2164      	movs	r1, #100	@ 0x64
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7ff ff55 	bl	8004174 <HMOTOR_Step>
				glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] = 100;
 80042ca:	4b08      	ldr	r3, [pc, #32]	@ (80042ec <HMOTOR_MoveLampMotor+0x5c>)
 80042cc:	2264      	movs	r2, #100	@ 0x64
 80042ce:	601a      	str	r2, [r3, #0]
				glbl_uint8HomingIndicator[HMOTOR_LAMP_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 80042d0:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <HMOTOR_MoveLampMotor+0x60>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/*Do nothing*/
			}
			break;
 80042d6:	e003      	b.n	80042e0 <HMOTOR_MoveLampMotor+0x50>
		}
		default:
		{
			return E_NOT_OK;
 80042d8:	2301      	movs	r3, #1
 80042da:	e003      	b.n	80042e4 <HMOTOR_MoveLampMotor+0x54>
			break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <HMOTOR_MoveLampMotor+0x52>
			break;
 80042e0:	bf00      	nop
			break;
		}
	}
	return E_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000078c 	.word	0x2000078c
 80042f0:	2000079c 	.word	0x2000079c

080042f4 <HMOTOR_MoveFilterMotor>:

//filter wheel
Std_ReturnType HMOTOR_MoveFilterMotor(HMOTOR_Filter_Select_t Copy_uint32FilterSelect)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
	uint32 Loc_uint32StepsDifference = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
	switch(Copy_uint32FilterSelect)
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2b07      	cmp	r3, #7
 8004306:	f200 8171 	bhi.w	80045ec <HMOTOR_MoveFilterMotor+0x2f8>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HMOTOR_MoveFilterMotor+0x1c>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004331 	.word	0x08004331
 8004314:	0800437f 	.word	0x0800437f
 8004318:	080043d5 	.word	0x080043d5
 800431c:	0800442b 	.word	0x0800442b
 8004320:	08004481 	.word	0x08004481
 8004324:	080044d7 	.word	0x080044d7
 8004328:	0800452b 	.word	0x0800452b
 800432c:	08004591 	.word	0x08004591
	{
		case HMOTOR_FILTER_AIR:
		{
			if(glbl_uint32MotorSteps[1] > glbl_uint32FilterInitCalibration)
 8004330:	4b95      	ldr	r3, [pc, #596]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4b95      	ldr	r3, [pc, #596]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d90c      	bls.n	8004356 <HMOTOR_MoveFilterMotor+0x62>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - glbl_uint32FilterInitCalibration;
 800433c:	4b92      	ldr	r3, [pc, #584]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4b92      	ldr	r3, [pc, #584]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004348:	230a      	movs	r3, #10
 800434a:	2201      	movs	r2, #1
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	2001      	movs	r0, #1
 8004350:	f7ff ff10 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
			{
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004354:	e14c      	b.n	80045f0 <HMOTOR_MoveFilterMotor+0x2fc>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
 8004356:	4b8c      	ldr	r3, [pc, #560]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4b8c      	ldr	r3, [pc, #560]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	f080 8146 	bcs.w	80045f0 <HMOTOR_MoveFilterMotor+0x2fc>
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
 8004364:	4b89      	ldr	r3, [pc, #548]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b87      	ldr	r3, [pc, #540]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004370:	230a      	movs	r3, #10
 8004372:	2202      	movs	r2, #2
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	2001      	movs	r0, #1
 8004378:	f7ff fefc 	bl	8004174 <HMOTOR_Step>
			break;
 800437c:	e138      	b.n	80045f0 <HMOTOR_MoveFilterMotor+0x2fc>
		}
		case HMOTOR_FILTER_1:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 50))
 800437e:	4b82      	ldr	r3, [pc, #520]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	4b82      	ldr	r3, [pc, #520]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3332      	adds	r3, #50	@ 0x32
 8004388:	429a      	cmp	r2, r3
 800438a:	d90d      	bls.n	80043a8 <HMOTOR_MoveFilterMotor+0xb4>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 50);
 800438c:	4b7e      	ldr	r3, [pc, #504]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b7e      	ldr	r3, [pc, #504]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	3b32      	subs	r3, #50	@ 0x32
 8004398:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800439a:	230a      	movs	r3, #10
 800439c:	2201      	movs	r2, #1
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff fee7 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80043a6:	e125      	b.n	80045f4 <HMOTOR_MoveFilterMotor+0x300>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
 80043a8:	4b77      	ldr	r3, [pc, #476]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4b77      	ldr	r3, [pc, #476]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3332      	adds	r3, #50	@ 0x32
 80043b2:	429a      	cmp	r2, r3
 80043b4:	f080 811e 	bcs.w	80045f4 <HMOTOR_MoveFilterMotor+0x300>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
 80043b8:	4b74      	ldr	r3, [pc, #464]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b72      	ldr	r3, [pc, #456]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	3332      	adds	r3, #50	@ 0x32
 80043c4:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80043c6:	230a      	movs	r3, #10
 80043c8:	2202      	movs	r2, #2
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7ff fed1 	bl	8004174 <HMOTOR_Step>
			break;
 80043d2:	e10f      	b.n	80045f4 <HMOTOR_MoveFilterMotor+0x300>
		}
		case HMOTOR_FILTER_2:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 100))
 80043d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	4b6c      	ldr	r3, [pc, #432]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3364      	adds	r3, #100	@ 0x64
 80043de:	429a      	cmp	r2, r3
 80043e0:	d90d      	bls.n	80043fe <HMOTOR_MoveFilterMotor+0x10a>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 100);
 80043e2:	4b69      	ldr	r3, [pc, #420]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b69      	ldr	r3, [pc, #420]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	3b64      	subs	r3, #100	@ 0x64
 80043ee:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80043f0:	230a      	movs	r3, #10
 80043f2:	2201      	movs	r2, #1
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff febc 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80043fc:	e0fc      	b.n	80045f8 <HMOTOR_MoveFilterMotor+0x304>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
 80043fe:	4b62      	ldr	r3, [pc, #392]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4b62      	ldr	r3, [pc, #392]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3364      	adds	r3, #100	@ 0x64
 8004408:	429a      	cmp	r2, r3
 800440a:	f080 80f5 	bcs.w	80045f8 <HMOTOR_MoveFilterMotor+0x304>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
 800440e:	4b5f      	ldr	r3, [pc, #380]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b5d      	ldr	r3, [pc, #372]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	3364      	adds	r3, #100	@ 0x64
 800441a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 800441c:	230a      	movs	r3, #10
 800441e:	2202      	movs	r2, #2
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	2001      	movs	r0, #1
 8004424:	f7ff fea6 	bl	8004174 <HMOTOR_Step>
			break;
 8004428:	e0e6      	b.n	80045f8 <HMOTOR_MoveFilterMotor+0x304>
		}
		case HMOTOR_FILTER_3:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 150))
 800442a:	4b57      	ldr	r3, [pc, #348]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4b57      	ldr	r3, [pc, #348]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3396      	adds	r3, #150	@ 0x96
 8004434:	429a      	cmp	r2, r3
 8004436:	d90d      	bls.n	8004454 <HMOTOR_MoveFilterMotor+0x160>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 150);
 8004438:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4b53      	ldr	r3, [pc, #332]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	3b96      	subs	r3, #150	@ 0x96
 8004444:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004446:	230a      	movs	r3, #10
 8004448:	2201      	movs	r2, #1
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	2001      	movs	r0, #1
 800444e:	f7ff fe91 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004452:	e0d3      	b.n	80045fc <HMOTOR_MoveFilterMotor+0x308>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
 8004454:	4b4c      	ldr	r3, [pc, #304]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3396      	adds	r3, #150	@ 0x96
 800445e:	429a      	cmp	r2, r3
 8004460:	f080 80cc 	bcs.w	80045fc <HMOTOR_MoveFilterMotor+0x308>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
 8004464:	4b49      	ldr	r3, [pc, #292]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b47      	ldr	r3, [pc, #284]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	3396      	adds	r3, #150	@ 0x96
 8004470:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004472:	230a      	movs	r3, #10
 8004474:	2202      	movs	r2, #2
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	2001      	movs	r0, #1
 800447a:	f7ff fe7b 	bl	8004174 <HMOTOR_Step>
			break;
 800447e:	e0bd      	b.n	80045fc <HMOTOR_MoveFilterMotor+0x308>
		}
		case HMOTOR_FILTER_4:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 200))
 8004480:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	4b41      	ldr	r3, [pc, #260]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	33c8      	adds	r3, #200	@ 0xc8
 800448a:	429a      	cmp	r2, r3
 800448c:	d90d      	bls.n	80044aa <HMOTOR_MoveFilterMotor+0x1b6>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 200);
 800448e:	4b3e      	ldr	r3, [pc, #248]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	3bc8      	subs	r3, #200	@ 0xc8
 800449a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800449c:	230a      	movs	r3, #10
 800449e:	2201      	movs	r2, #1
 80044a0:	68f9      	ldr	r1, [r7, #12]
 80044a2:	2001      	movs	r0, #1
 80044a4:	f7ff fe66 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80044a8:	e0aa      	b.n	8004600 <HMOTOR_MoveFilterMotor+0x30c>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
 80044aa:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	33c8      	adds	r3, #200	@ 0xc8
 80044b4:	429a      	cmp	r2, r3
 80044b6:	f080 80a3 	bcs.w	8004600 <HMOTOR_MoveFilterMotor+0x30c>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
 80044ba:	4b34      	ldr	r3, [pc, #208]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b32      	ldr	r3, [pc, #200]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	33c8      	adds	r3, #200	@ 0xc8
 80044c6:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80044c8:	230a      	movs	r3, #10
 80044ca:	2202      	movs	r2, #2
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	2001      	movs	r0, #1
 80044d0:	f7ff fe50 	bl	8004174 <HMOTOR_Step>
			break;
 80044d4:	e094      	b.n	8004600 <HMOTOR_MoveFilterMotor+0x30c>
		}
		case HMOTOR_FILTER_5:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 250))
 80044d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	4b2c      	ldr	r3, [pc, #176]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	33fa      	adds	r3, #250	@ 0xfa
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d90d      	bls.n	8004500 <HMOTOR_MoveFilterMotor+0x20c>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 250);
 80044e4:	4b28      	ldr	r3, [pc, #160]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b28      	ldr	r3, [pc, #160]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	3bfa      	subs	r3, #250	@ 0xfa
 80044f0:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80044f2:	230a      	movs	r3, #10
 80044f4:	2201      	movs	r2, #1
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7ff fe3b 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80044fe:	e081      	b.n	8004604 <HMOTOR_MoveFilterMotor+0x310>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
 8004500:	4b21      	ldr	r3, [pc, #132]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	4b21      	ldr	r3, [pc, #132]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	33fa      	adds	r3, #250	@ 0xfa
 800450a:	429a      	cmp	r2, r3
 800450c:	d27a      	bcs.n	8004604 <HMOTOR_MoveFilterMotor+0x310>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
 800450e:	4b1f      	ldr	r3, [pc, #124]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	33fa      	adds	r3, #250	@ 0xfa
 800451a:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 800451c:	230a      	movs	r3, #10
 800451e:	2202      	movs	r2, #2
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	2001      	movs	r0, #1
 8004524:	f7ff fe26 	bl	8004174 <HMOTOR_Step>
			break;
 8004528:	e06c      	b.n	8004604 <HMOTOR_MoveFilterMotor+0x310>
		}
		case HMOTOR_FILTER_6:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 300))
 800452a:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b17      	ldr	r3, [pc, #92]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004536:	429a      	cmp	r2, r3
 8004538:	d90e      	bls.n	8004558 <HMOTOR_MoveFilterMotor+0x264>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 300);
 800453a:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4b13      	ldr	r3, [pc, #76]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004548:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800454a:	230a      	movs	r3, #10
 800454c:	2201      	movs	r2, #1
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	2001      	movs	r0, #1
 8004552:	f7ff fe0f 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 8004556:	e057      	b.n	8004608 <HMOTOR_MoveFilterMotor+0x314>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004564:	429a      	cmp	r2, r3
 8004566:	d24f      	bcs.n	8004608 <HMOTOR_MoveFilterMotor+0x314>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
 8004568:	4b08      	ldr	r3, [pc, #32]	@ (800458c <HMOTOR_MoveFilterMotor+0x298>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <HMOTOR_MoveFilterMotor+0x294>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004576:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004578:	230a      	movs	r3, #10
 800457a:	2202      	movs	r2, #2
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	2001      	movs	r0, #1
 8004580:	f7ff fdf8 	bl	8004174 <HMOTOR_Step>
			break;
 8004584:	e040      	b.n	8004608 <HMOTOR_MoveFilterMotor+0x314>
 8004586:	bf00      	nop
 8004588:	2000078c 	.word	0x2000078c
 800458c:	200003a4 	.word	0x200003a4
		}
		case HMOTOR_FILTER_7:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 350))
 8004590:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <HMOTOR_MoveFilterMotor+0x32c>)
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b23      	ldr	r3, [pc, #140]	@ (8004624 <HMOTOR_MoveFilterMotor+0x330>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 800459c:	429a      	cmp	r2, r3
 800459e:	d90e      	bls.n	80045be <HMOTOR_MoveFilterMotor+0x2ca>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 350);
 80045a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004620 <HMOTOR_MoveFilterMotor+0x32c>)
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004624 <HMOTOR_MoveFilterMotor+0x330>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5a3 73af 	sub.w	r3, r3, #350	@ 0x15e
 80045ae:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80045b0:	230a      	movs	r3, #10
 80045b2:	2201      	movs	r2, #1
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7ff fddc 	bl	8004174 <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
			}
			break;
 80045bc:	e026      	b.n	800460c <HMOTOR_MoveFilterMotor+0x318>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
 80045be:	4b18      	ldr	r3, [pc, #96]	@ (8004620 <HMOTOR_MoveFilterMotor+0x32c>)
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <HMOTOR_MoveFilterMotor+0x330>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d21e      	bcs.n	800460c <HMOTOR_MoveFilterMotor+0x318>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <HMOTOR_MoveFilterMotor+0x330>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <HMOTOR_MoveFilterMotor+0x32c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f503 73af 	add.w	r3, r3, #350	@ 0x15e
 80045dc:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10);
 80045de:	230a      	movs	r3, #10
 80045e0:	2202      	movs	r2, #2
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7ff fdc5 	bl	8004174 <HMOTOR_Step>
			break;
 80045ea:	e00f      	b.n	800460c <HMOTOR_MoveFilterMotor+0x318>
		}
		default:
		{
			return E_NOT_OK;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e012      	b.n	8004616 <HMOTOR_MoveFilterMotor+0x322>
			break;
 80045f0:	bf00      	nop
 80045f2:	e00c      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80045f4:	bf00      	nop
 80045f6:	e00a      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80045f8:	bf00      	nop
 80045fa:	e008      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 80045fc:	bf00      	nop
 80045fe:	e006      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004600:	bf00      	nop
 8004602:	e004      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004604:	bf00      	nop
 8004606:	e002      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HMOTOR_MoveFilterMotor+0x31a>
			break;
 800460c:	bf00      	nop
			break;
		}
	}
	glbl_uint8HomingIndicator[HMOTOR_FILTER_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HMOTOR_MoveFilterMotor+0x334>)
 8004610:	2200      	movs	r2, #0
 8004612:	705a      	strb	r2, [r3, #1]
	return E_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	2000078c 	.word	0x2000078c
 8004624:	200003a4 	.word	0x200003a4
 8004628:	2000079c 	.word	0x2000079c

0800462c <HMOTOR_GetWLSelectCalibration>:

Std_ReturnType HMOTOR_GetWLSelectCalibration            (uint32 Copy_uint32ZeroWLSteps, float32 Copy_uint32StepsPerNm)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	glbl_uint32ZeroWLSteps = Copy_uint32ZeroWLSteps;
 8004636:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <HMOTOR_GetWLSelectCalibration+0x24>)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6013      	str	r3, [r2, #0]
	glbl_float32StepsPerNm = Copy_uint32StepsPerNm;
 800463c:	4a05      	ldr	r2, [pc, #20]	@ (8004654 <HMOTOR_GetWLSelectCalibration+0x28>)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6013      	str	r3, [r2, #0]
	return E_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	200003a8 	.word	0x200003a8
 8004654:	200003ac 	.word	0x200003ac

08004658 <HMOTOR_MoveWLSelectMotor>:

Std_ReturnType HMOTOR_MoveWLSelectMotor                 (float32 Copy_float32NextWL)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.01f) && (Copy_float32NextWL < 0.01f))
 8004660:	4933      	ldr	r1, [pc, #204]	@ (8004730 <HMOTOR_MoveWLSelectMotor+0xd8>)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fd3c 	bl	80010e0 <__aeabi_fcmpgt>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d02c      	beq.n	80046c8 <HMOTOR_MoveWLSelectMotor+0x70>
 800466e:	4931      	ldr	r1, [pc, #196]	@ (8004734 <HMOTOR_MoveWLSelectMotor+0xdc>)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fc fd17 	bl	80010a4 <__aeabi_fcmplt>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d025      	beq.n	80046c8 <HMOTOR_MoveWLSelectMotor+0x70>
	{
		if(glbl_uint32MotorSteps[3] > glbl_uint32ZeroWLSteps)
 800467c:	4b2e      	ldr	r3, [pc, #184]	@ (8004738 <HMOTOR_MoveWLSelectMotor+0xe0>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b2e      	ldr	r3, [pc, #184]	@ (800473c <HMOTOR_MoveWLSelectMotor+0xe4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d90a      	bls.n	800469e <HMOTOR_MoveWLSelectMotor+0x46>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32MotorSteps[2] - glbl_uint32ZeroWLSteps), HMOTORS_CLKWISE_DIRECTION, 4);
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HMOTOR_MoveWLSelectMotor+0xe0>)
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	4b2b      	ldr	r3, [pc, #172]	@ (800473c <HMOTOR_MoveWLSelectMotor+0xe4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1ad1      	subs	r1, r2, r3
 8004692:	2304      	movs	r3, #4
 8004694:	2201      	movs	r2, #1
 8004696:	2002      	movs	r0, #2
 8004698:	f7ff fd6c 	bl	8004174 <HMOTOR_Step>
 800469c:	e00f      	b.n	80046be <HMOTOR_MoveWLSelectMotor+0x66>
		}
		else if(glbl_uint32MotorSteps[3] < glbl_uint32ZeroWLSteps)
 800469e:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <HMOTOR_MoveWLSelectMotor+0xe0>)
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b26      	ldr	r3, [pc, #152]	@ (800473c <HMOTOR_MoveWLSelectMotor+0xe4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d209      	bcs.n	80046be <HMOTOR_MoveWLSelectMotor+0x66>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32ZeroWLSteps - glbl_uint32MotorSteps[2]), HMOTORS_CCLKWISE_DIRECTION, 4);
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HMOTOR_MoveWLSelectMotor+0xe4>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b22      	ldr	r3, [pc, #136]	@ (8004738 <HMOTOR_MoveWLSelectMotor+0xe0>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	1ad1      	subs	r1, r2, r3
 80046b4:	2304      	movs	r3, #4
 80046b6:	2202      	movs	r2, #2
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7ff fd5b 	bl	8004174 <HMOTOR_Step>
		}
		glbl_float32CurrentWL = 0.0f;
 80046be:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <HMOTOR_MoveWLSelectMotor+0xe8>)
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e02d      	b.n	8004724 <HMOTOR_MoveWLSelectMotor+0xcc>
	}
	else
	{
		float32 Loc_uint32NextSteps = Copy_float32NextWL * glbl_float32StepsPerNm;
 80046c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <HMOTOR_MoveWLSelectMotor+0xec>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fb4a 	bl	8000d68 <__aeabi_fmul>
 80046d4:	4603      	mov	r3, r0
 80046d6:	60fb      	str	r3, [r7, #12]
		sint32 Loc_uint32StepsDifference = roundf(Loc_uint32NextSteps - glbl_uint32MotorSteps[2]);
 80046d8:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <HMOTOR_MoveWLSelectMotor+0xe0>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fc faeb 	bl	8000cb8 <__aeabi_ui2f>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4619      	mov	r1, r3
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7fc fa34 	bl	8000b54 <__aeabi_fsub>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f007 f808 	bl	800b704 <roundf>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc fcfc 	bl	80010f4 <__aeabi_f2iz>
 80046fc:	4603      	mov	r3, r0
 80046fe:	60bb      	str	r3, [r7, #8]

		if(Loc_uint32StepsDifference > 0)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	dd06      	ble.n	8004714 <HMOTOR_MoveWLSelectMotor+0xbc>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 4);
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	2304      	movs	r3, #4
 800470a:	2201      	movs	r2, #1
 800470c:	2002      	movs	r0, #2
 800470e:	f7ff fd31 	bl	8004174 <HMOTOR_Step>
 8004712:	e007      	b.n	8004724 <HMOTOR_MoveWLSelectMotor+0xcc>
		}
		else
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (uint32)(-Loc_uint32StepsDifference), HMOTORS_CCLKWISE_DIRECTION, 4);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	425b      	negs	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	2304      	movs	r3, #4
 800471c:	2202      	movs	r2, #2
 800471e:	2002      	movs	r0, #2
 8004720:	f7ff fd28 	bl	8004174 <HMOTOR_Step>
		}
	}
	return E_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	bc23d70a 	.word	0xbc23d70a
 8004734:	3c23d70a 	.word	0x3c23d70a
 8004738:	2000078c 	.word	0x2000078c
 800473c:	200003a8 	.word	0x200003a8
 8004740:	20000798 	.word	0x20000798
 8004744:	200003ac 	.word	0x200003ac

08004748 <HMOTOR_GoHome>:
	{
		return E_NOT_OK;
	}
}
Std_ReturnType HMOTOR_GoHome  (HMOTORS_Select_t Copy_uint32MotorSelect)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
	if(Copy_uint32MotorSelect > 0)
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 808b 	beq.w	8004870 <HMOTOR_GoHome+0x128>
	{
		uint8 Loc_uint8SensorReading = MGPIO_HIGH;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
		
		MSTK_uint8Delay(100);
 800475e:	2064      	movs	r0, #100	@ 0x64
 8004760:	f002 f878 	bl	8006854 <MSTK_uint8Delay>
		switch(Copy_uint32MotorSelect)
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d002      	beq.n	8004770 <HMOTOR_GoHome+0x28>
 800476a:	2b02      	cmp	r3, #2
 800476c:	d00f      	beq.n	800478e <HMOTOR_GoHome+0x46>
 800476e:	e016      	b.n	800479e <HMOTOR_GoHome+0x56>
		{
			case HMOTOR_FILTER_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTC, MGPIO_PIN13, &Loc_uint8SensorReading);
 8004770:	f107 030f 	add.w	r3, r7, #15
 8004774:	461a      	mov	r2, r3
 8004776:	210d      	movs	r1, #13
 8004778:	2002      	movs	r0, #2
 800477a:	f000 fe31 	bl	80053e0 <MGPIO_GetPinValue>
					Loc_uint8SensorReading = !Loc_uint8SensorReading;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	73fb      	strb	r3, [r7, #15]
					break;
 800478c:	e007      	b.n	800479e <HMOTOR_GoHome+0x56>
			}
			case HMOTOR_WL_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTA, MGPIO_PIN0, &Loc_uint8SensorReading);
 800478e:	f107 030f 	add.w	r3, r7, #15
 8004792:	461a      	mov	r2, r3
 8004794:	2100      	movs	r1, #0
 8004796:	2000      	movs	r0, #0
 8004798:	f000 fe22 	bl	80053e0 <MGPIO_GetPinValue>
					break;
 800479c:	bf00      	nop
			}
		}
		if(Loc_uint8SensorReading == MGPIO_LOW)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <HMOTOR_GoHome+0x68>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 200, HMOTORS_CLKWISE_DIRECTION, 4);
 80047a4:	79f8      	ldrb	r0, [r7, #7]
 80047a6:	2304      	movs	r3, #4
 80047a8:	2201      	movs	r2, #1
 80047aa:	21c8      	movs	r1, #200	@ 0xc8
 80047ac:	f7ff fce2 	bl	8004174 <HMOTOR_Step>
		}
		uint32 Loc_uint8Index = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	4a3b      	ldr	r2, [pc, #236]	@ (80048a4 <HMOTOR_GoHome+0x15c>)
 80047b8:	2100      	movs	r1, #0
 80047ba:	54d1      	strb	r1, [r2, r3]
		uint32 Loc_uint32NoSteps = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
		switch(Copy_uint32MotorSelect)
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d005      	beq.n	80047d2 <HMOTOR_GoHome+0x8a>
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d107      	bne.n	80047da <HMOTOR_GoHome+0x92>
		{
			case HMOTOR_WL_SELECT:
			{
				Loc_uint32NoSteps = 12000;
 80047ca:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80047ce:	613b      	str	r3, [r7, #16]
				break;
 80047d0:	e006      	b.n	80047e0 <HMOTOR_GoHome+0x98>
			}
			case HMOTOR_FILTER_SELECT:
			{
				Loc_uint32NoSteps = 6000;
 80047d2:	f241 7370 	movw	r3, #6000	@ 0x1770
 80047d6:	613b      	str	r3, [r7, #16]
				break;
 80047d8:	e002      	b.n	80047e0 <HMOTOR_GoHome+0x98>
			}
			default:
			{
				Loc_uint32NoSteps = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
				break;
 80047de:	bf00      	nop
			}
		}
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e00e      	b.n	8004804 <HMOTOR_GoHome+0xbc>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <HMOTOR_GoHome+0x15c>)
 80047ea:	5cd3      	ldrb	r3, [r2, r3]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HMOTOR_GoHome+0xb6>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 4);
 80047f2:	79f8      	ldrb	r0, [r7, #7]
 80047f4:	2304      	movs	r3, #4
 80047f6:	2202      	movs	r2, #2
 80047f8:	2101      	movs	r1, #1
 80047fa:	f7ff fcbb 	bl	8004174 <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	3301      	adds	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3ec      	bcc.n	80047e6 <HMOTOR_GoHome+0x9e>
			}
		}

		HMOTOR_Step(Copy_uint32MotorSelect, 320, HMOTORS_CLKWISE_DIRECTION, 4);
 800480c:	79f8      	ldrb	r0, [r7, #7]
 800480e:	2304      	movs	r3, #4
 8004810:	2201      	movs	r2, #1
 8004812:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004816:	f7ff fcad 	bl	8004174 <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <HMOTOR_GoHome+0x15c>)
 800481e:	2100      	movs	r1, #0
 8004820:	54d1      	strb	r1, [r2, r3]

		Loc_uint8Index = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e00e      	b.n	800484a <HMOTOR_GoHome+0x102>
		{
			if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <HMOTOR_GoHome+0x15c>)
 8004830:	5cd3      	ldrb	r3, [r2, r3]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HMOTOR_GoHome+0xfc>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 10);
 8004838:	79f8      	ldrb	r0, [r7, #7]
 800483a:	230a      	movs	r3, #10
 800483c:	2202      	movs	r2, #2
 800483e:	2101      	movs	r1, #1
 8004840:	f7ff fc98 	bl	8004174 <HMOTOR_Step>
		for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint32NoSteps; Loc_uint8Index++)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3ec      	bcc.n	800482c <HMOTOR_GoHome+0xe4>
			}
		}
		if(Copy_uint32MotorSelect == HMOTOR_WL_SELECT)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d105      	bne.n	8004864 <HMOTOR_GoHome+0x11c>
		{
			HMOTOR_Step(Copy_uint32MotorSelect, 20, HMOTORS_CCLKWISE_DIRECTION, 4);
 8004858:	79f8      	ldrb	r0, [r7, #7]
 800485a:	2304      	movs	r3, #4
 800485c:	2202      	movs	r2, #2
 800485e:	2114      	movs	r1, #20
 8004860:	f7ff fc88 	bl	8004174 <HMOTOR_Step>
		}
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	4a10      	ldr	r2, [pc, #64]	@ (80048a8 <HMOTOR_GoHome+0x160>)
 8004868:	2100      	movs	r1, #0
 800486a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800486e:	e014      	b.n	800489a <HMOTOR_GoHome+0x152>
		//glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;

	}
	else if(Copy_uint32MotorSelect == HMOTOR_LAMP_SELECT)
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <HMOTOR_GoHome+0x14e>
	{
		HMOTOR_Step(Copy_uint32MotorSelect, 100, HMOTORS_CLKWISE_DIRECTION, 10);
 8004876:	79f8      	ldrb	r0, [r7, #7]
 8004878:	230a      	movs	r3, #10
 800487a:	2201      	movs	r2, #1
 800487c:	2164      	movs	r1, #100	@ 0x64
 800487e:	f7ff fc79 	bl	8004174 <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_AT_HOME;
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <HMOTOR_GoHome+0x15c>)
 8004886:	2101      	movs	r1, #1
 8004888:	54d1      	strb	r1, [r2, r3]
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <HMOTOR_GoHome+0x160>)
 800488e:	2100      	movs	r1, #0
 8004890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004894:	e001      	b.n	800489a <HMOTOR_GoHome+0x152>
	}
	else
	{
		return E_NOT_OK;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HMOTOR_GoHome+0x154>
	}
	return E_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	2000079c 	.word	0x2000079c
 80048a8:	2000078c 	.word	0x2000078c

080048ac <HMOTOR_GetCurrentMotorSteps>:
Std_ReturnType HMOTOR_GetCurrentMotorSteps    (HMOTORS_Select_t Copy_uint32MotorSelect, uint32* P_uint32MotorSteps)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
	if(P_uint32MotorSteps != NULL_PTR)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HMOTOR_GetCurrentMotorSteps+0x28>
	{
		*P_uint32MotorSteps = glbl_uint32MotorSteps[Copy_uint32MotorSelect];
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	4a07      	ldr	r2, [pc, #28]	@ (80048e4 <HMOTOR_GetCurrentMotorSteps+0x38>)
 80048c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	e001      	b.n	80048d8 <HMOTOR_GetCurrentMotorSteps+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	2000078c 	.word	0x2000078c

080048e8 <HMOTOR_GetCurrentWL>:
Std_ReturnType HMOTOR_GetCurrentWL            (uint32* P_uint32CurrentWL)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
	if(P_uint32CurrentWL != NULL_PTR)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HMOTOR_GetCurrentWL+0x28>
	{
		*P_uint32CurrentWL = glbl_float32CurrentWL;
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HMOTOR_GetCurrentWL+0x38>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fc1e 	bl	8001140 <__aeabi_f2uiz>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e001      	b.n	8004914 <HMOTOR_GetCurrentWL+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000798 	.word	0x20000798

08004924 <HMOTOR_FilterHomeIndicator>:

void HMOTOR_FilterHomeIndicator(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[1] = HMOTORS_MOTOR_AT_HOME;
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HMOTOR_FilterHomeIndicator+0x14>)
 800492a:	2201      	movs	r2, #1
 800492c:	705a      	strb	r2, [r3, #1]
}
 800492e:	bf00      	nop
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	2000079c 	.word	0x2000079c

0800493c <HMOTOR_WLHomeIndicator>:
void HMOTOR_WLHomeIndicator(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[2] = HMOTORS_MOTOR_AT_HOME;
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <HMOTOR_WLHomeIndicator+0x14>)
 8004942:	2201      	movs	r2, #1
 8004944:	709a      	strb	r2, [r3, #2]
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	2000079c 	.word	0x2000079c

08004954 <HMOTOR_StepNoDelay>:
{
	glbl_uint8HomingIndicator[3] = HMOTORS_MOTOR_AT_HOME;
}

Std_ReturnType HMOTOR_StepNoDelay(HMOTORS_Select_t Copy_uint32MotorSelect, uint8 Copy_uint8Direction)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	460a      	mov	r2, r1
 800495e:	71fb      	strb	r3, [r7, #7]
 8004960:	4613      	mov	r3, r2
 8004962:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uint8Direction)
 8004964:	79bb      	ldrb	r3, [r7, #6]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d002      	beq.n	8004970 <HMOTOR_StepNoDelay+0x1c>
 800496a:	2b02      	cmp	r3, #2
 800496c:	d00d      	beq.n	800498a <HMOTOR_StepNoDelay+0x36>
		
			break;
		}
		default:
		{
			break;
 800496e:	e019      	b.n	80049a4 <HMOTOR_StepNoDelay+0x50>
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <HMOTOR_StepNoDelay+0xc4>)
 8004974:	5cd3      	ldrb	r3, [r2, r3]
 8004976:	b2d8      	uxtb	r0, r3
 8004978:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 800497a:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <HMOTOR_StepNoDelay+0xc8>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004980:	2201      	movs	r2, #1
 8004982:	4619      	mov	r1, r3
 8004984:	f000 fc92 	bl	80052ac <MGPIO_SetPinValue>
			break;
 8004988:	e00c      	b.n	80049a4 <HMOTOR_StepNoDelay+0x50>
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4a22      	ldr	r2, [pc, #136]	@ (8004a18 <HMOTOR_StepNoDelay+0xc4>)
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	b2d8      	uxtb	r0, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004994:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <HMOTOR_StepNoDelay+0xc8>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 800499a:	2200      	movs	r2, #0
 800499c:	4619      	mov	r1, r3
 800499e:	f000 fc85 	bl	80052ac <MGPIO_SetPinValue>
			break;
 80049a2:	bf00      	nop
		}
	}

	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <HMOTOR_StepNoDelay+0xcc>)
 80049a8:	5cd3      	ldrb	r3, [r2, r3]
 80049aa:	b2d8      	uxtb	r0, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <HMOTOR_StepNoDelay+0xd0>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80049b4:	2201      	movs	r2, #1
 80049b6:	4619      	mov	r1, r3
 80049b8:	f000 fc78 	bl	80052ac <MGPIO_SetPinValue>
	
	MSTK_uint8DelayUs(10);
 80049bc:	200a      	movs	r0, #10
 80049be:	f001 ff8d 	bl	80068dc <MSTK_uint8DelayUs>
	
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HMOTOR_StepNoDelay+0xcc>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	b2d8      	uxtb	r0, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 80049cc:	4a15      	ldr	r2, [pc, #84]	@ (8004a24 <HMOTOR_StepNoDelay+0xd0>)
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	b2db      	uxtb	r3, r3
	MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 80049d2:	2200      	movs	r2, #0
 80049d4:	4619      	mov	r1, r3
 80049d6:	f000 fc69 	bl	80052ac <MGPIO_SetPinValue>

	if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d108      	bne.n	80049f2 <HMOTOR_StepNoDelay+0x9e>
	{
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] ++;
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	4a11      	ldr	r2, [pc, #68]	@ (8004a28 <HMOTOR_StepNoDelay+0xd4>)
 80049e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049e8:	3201      	adds	r2, #1
 80049ea:	490f      	ldr	r1, [pc, #60]	@ (8004a28 <HMOTOR_StepNoDelay+0xd4>)
 80049ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80049f0:	e00d      	b.n	8004a0e <HMOTOR_StepNoDelay+0xba>
	}
	else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 80049f2:	79bb      	ldrb	r3, [r7, #6]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d108      	bne.n	8004a0a <HMOTOR_StepNoDelay+0xb6>
	{
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] --;
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004a28 <HMOTOR_StepNoDelay+0xd4>)
 80049fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a00:	3a01      	subs	r2, #1
 8004a02:	4909      	ldr	r1, [pc, #36]	@ (8004a28 <HMOTOR_StepNoDelay+0xd4>)
 8004a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a08:	e001      	b.n	8004a0e <HMOTOR_StepNoDelay+0xba>
	}
	else
	{
		return E_NOT_OK;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HMOTOR_StepNoDelay+0xbc>
	}
	return E_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000394 	.word	0x20000394
 8004a1c:	20000398 	.word	0x20000398
 8004a20:	2000038c 	.word	0x2000038c
 8004a24:	20000390 	.word	0x20000390
 8004a28:	2000078c 	.word	0x2000078c

08004a2c <HMOTOR_GetStepsPerNm>:

Std_ReturnType HMOTOR_GetStepsPerNm			(float32* P_float32StepsPerNm)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	if(P_float32StepsPerNm != NULL_PTR)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HMOTOR_GetStepsPerNm+0x1a>
	{
		*P_float32StepsPerNm = glbl_float32StepsPerNm;
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HMOTOR_GetStepsPerNm+0x28>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
		return E_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HMOTOR_GetStepsPerNm+0x1c>
	}
	else
	{
		return E_NOT_OK;
 8004a46:	2301      	movs	r3, #1
	}
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	200003ac 	.word	0x200003ac

08004a58 <MADC_Init>:

static volatile MADC_Typedef_t* (ADC[2]) = {ADC1, ADC2};
static volatile ptr_to_func_t (glbl_EOCCallbackFunc[2]) = {NULL_PTR};

Std_ReturnType MADC_Init                            (ADC_Select_t Copy_uint32ADCSelect)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
    
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba4 <MADC_Init+0x14c>)
 8004a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	494c      	ldr	r1, [pc, #304]	@ (8004ba4 <MADC_Init+0x14c>)
 8004a74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a78:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004a7c:	605a      	str	r2, [r3, #4]
    ADC[Copy_uint32ADCSelect] -> CR1 |= ((MADC_OPERATION_MODE) << (MADC_CR1_DUALMOD_START_BIT));
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	4a48      	ldr	r2, [pc, #288]	@ (8004ba4 <MADC_Init+0x14c>)
 8004a82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4946      	ldr	r1, [pc, #280]	@ (8004ba4 <MADC_Init+0x14c>)
 8004a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	605a      	str	r2, [r3, #4]

    #if MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
    #elif MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	4a43      	ldr	r2, [pc, #268]	@ (8004ba4 <MADC_Init+0x14c>)
 8004a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	4941      	ldr	r1, [pc, #260]	@ (8004ba4 <MADC_Init+0x14c>)
 8004aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aa4:	f022 0220 	bic.w	r2, r2, #32
 8004aa8:	605a      	str	r2, [r3, #4]
    #else
        #error "ADC End of Conversion Interrupt Status is not specified"
    #endif /*MADC_EOC_INTERRUPT_STATUS*/

    CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CONT_BIT);
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a3d      	ldr	r2, [pc, #244]	@ (8004ba4 <MADC_Init+0x14c>)
 8004aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	493b      	ldr	r1, [pc, #236]	@ (8004ba4 <MADC_Init+0x14c>)
 8004ab8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004abc:	f022 0202 	bic.w	r2, r2, #2
 8004ac0:	609a      	str	r2, [r3, #8]

    #if MADC_DATA_BITS_ADJUST_SELECT == MADC_RIGHT_ADJUST_DATA_BITS
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ALIGN_BIT);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4a37      	ldr	r2, [pc, #220]	@ (8004ba4 <MADC_Init+0x14c>)
 8004ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	4935      	ldr	r1, [pc, #212]	@ (8004ba4 <MADC_Init+0x14c>)
 8004ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad8:	609a      	str	r2, [r3, #8]
    #else
        #error "ADC Data Bits Adjustment is not specified"
    #endif /*MADC_DATA_BITS_ADJUST_SELECT*/

    #if MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	4a31      	ldr	r2, [pc, #196]	@ (8004ba4 <MADC_Init+0x14c>)
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	492f      	ldr	r1, [pc, #188]	@ (8004ba4 <MADC_Init+0x14c>)
 8004ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aec:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004af0:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba4 <MADC_Init+0x14c>)
 8004af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4929      	ldr	r1, [pc, #164]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b04:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 8004b08:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 |= ((MADC_EXTERNAL_TRIGGER_SELECT) << (MADC_CR2_EXTSEL_START_BIT));
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	4923      	ldr	r1, [pc, #140]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b1c:	f442 2260 	orr.w	r2, r2, #917504	@ 0xe0000
 8004b20:	609a      	str	r2, [r3, #8]
    #elif MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
    #else
    #endif /*MADC_EXTERNAL_TRIGGER_STATUS*/

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ADON_BIT);
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	491d      	ldr	r1, [pc, #116]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	609a      	str	r2, [r3, #8]

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT);
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	4917      	ldr	r1, [pc, #92]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT));
 8004b52:	bf00      	nop
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4a13      	ldr	r2, [pc, #76]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f6      	bne.n	8004b54 <MADC_Init+0xfc>

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT);
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	490c      	ldr	r1, [pc, #48]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b78:	f042 0204 	orr.w	r2, r2, #4
 8004b7c:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT));
 8004b7e:	bf00      	nop
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	4a08      	ldr	r2, [pc, #32]	@ (8004ba4 <MADC_Init+0x14c>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f6      	bne.n	8004b80 <MADC_Init+0x128>
    
    Loc_uint8FuncStatus = E_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	200003b0 	.word	0x200003b0

08004ba8 <MADC_Conversion>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MADC_Conversion                      (ADC_Select_t Copy_uint32ADCSelect, ADC_Channel_t Copy_uint32ChannelSelect, uint16* P_uint16ConvertedData)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	603a      	str	r2, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
    if(P_uint16ConvertedData != NULL_PTR)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d03e      	beq.n	8004c40 <MADC_Conversion+0x98>
    {
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	4920      	ldr	r1, [pc, #128]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004bd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bd4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	491a      	ldr	r1, [pc, #104]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bec:	f022 021f 	bic.w	r2, r2, #31
 8004bf0:	635a      	str	r2, [r3, #52]	@ 0x34
        ADC[Copy_uint32ADCSelect] -> SQR3 = (Copy_uint32ChannelSelect) << 0;
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	4a16      	ldr	r2, [pc, #88]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	79ba      	ldrb	r2, [r7, #6]
 8004bfc:	635a      	str	r2, [r3, #52]	@ 0x34

        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_SWSTART_BIT);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4a13      	ldr	r2, [pc, #76]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	4911      	ldr	r1, [pc, #68]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c10:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004c14:	609a      	str	r2, [r3, #8]

        while(!(GET_BIT((ADC[Copy_uint32ADCSelect] -> SR), MADC_SR_EOC_BIT)));
 8004c16:	bf00      	nop
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f6      	beq.n	8004c18 <MADC_Conversion+0x70>

        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <MADC_Conversion+0xa8>)
 8004c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	e001      	b.n	8004c44 <MADC_Conversion+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	200003b0 	.word	0x200003b0

08004c54 <ADC1_2_IRQHandler>:
    }
    return Loc_uint8FuncStatus;
}

void ADC1_2_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
    if(GET_BIT((ADC[0] -> SR), MADC_SR_EOC_BIT))
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <ADC1_2_IRQHandler+0x44>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <ADC1_2_IRQHandler+0x22>
    {
        if(glbl_EOCCallbackFunc[0] != NULL_PTR)
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <ADC1_2_IRQHandler+0x48>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <ADC1_2_IRQHandler+0x3e>
        {
            (glbl_EOCCallbackFunc[0])();
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <ADC1_2_IRQHandler+0x48>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
}
 8004c74:	e00d      	b.n	8004c92 <ADC1_2_IRQHandler+0x3e>
    else if(GET_BIT((ADC[1] -> SR), MADC_SR_EOC_BIT))
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <ADC1_2_IRQHandler+0x44>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <ADC1_2_IRQHandler+0x3e>
		if(glbl_EOCCallbackFunc[1] != NULL_PTR)
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <ADC1_2_IRQHandler+0x48>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <ADC1_2_IRQHandler+0x3e>
            (glbl_EOCCallbackFunc[1])();
 8004c8c:	4b03      	ldr	r3, [pc, #12]	@ (8004c9c <ADC1_2_IRQHandler+0x48>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4798      	blx	r3
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200003b0 	.word	0x200003b0
 8004c9c:	200007a0 	.word	0x200007a0

08004ca0 <MAFIO_SetEXTIPinConfigurations>:
#include "AFIO_Private.h"
#include "AFIO_Interface.h"
#include "AFIO_Config.h"

Std_ReturnType MAFIO_SetEXTIPinConfigurations(uint8 Copy_uint8EXTILine, uint8 Copy_uint8Port)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460a      	mov	r2, r1
 8004caa:	71fb      	strb	r3, [r7, #7]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8Port <= MAFIO_PORTG_PIN) && (Copy_uint8EXTILine <= MAFIO_EXTI15))
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d82d      	bhi.n	8004d16 <MAFIO_SetEXTIPinConfigurations+0x76>
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b0f      	cmp	r3, #15
 8004cbe:	d82a      	bhi.n	8004d16 <MAFIO_SetEXTIPinConfigurations+0x76>
    {
        uint8 Loc_uint8RegIndex = Copy_uint8EXTILine / 4;
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	73bb      	strb	r3, [r7, #14]
        uint8 Loc_uint8RegOffset = Copy_uint8EXTILine % 4;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	737b      	strb	r3, [r7, #13]

        MAFIO ->EXTICR[Loc_uint8RegIndex] &= ~((0b1111) << Loc_uint8RegOffset * 4);
 8004cce:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cd8:	7b7b      	ldrb	r3, [r7, #13]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	210f      	movs	r1, #15
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4910      	ldr	r1, [pc, #64]	@ (8004d28 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004ce8:	7bbb      	ldrb	r3, [r7, #14]
 8004cea:	4002      	ands	r2, r0
 8004cec:	3302      	adds	r3, #2
 8004cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        MAFIO ->EXTICR[Loc_uint8RegIndex] |= ((Copy_uint8Port) << Loc_uint8RegOffset * 4);
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cfc:	79b9      	ldrb	r1, [r7, #6]
 8004cfe:	7b7b      	ldrb	r3, [r7, #13]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	4618      	mov	r0, r3
 8004d08:	4907      	ldr	r1, [pc, #28]	@ (8004d28 <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	4302      	orrs	r2, r0
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
 8004d14:	e001      	b.n	8004d1a <MAFIO_SetEXTIPinConfigurations+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000

08004d2c <MEXTI_EnableExternalInterrupt>:
#include "EXTI_Config.h"

static volatile ptr_to_EXTICallback glbl_PEXTICallbackFunctions[20] = {NULL_PTR};

Std_ReturnType MEXTI_EnableExternalInterrupt(uint8 Copy_uint8EXTILine, uint8 Copy_uint8EXTIMode)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	460a      	mov	r2, r1
 8004d36:	71fb      	strb	r3, [r7, #7]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8EXTILine <= MEXTI_EXTI19) && (Copy_uint8EXTIMode <= MEXTI_INT_AT_BOTH_EDGES))
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	2b13      	cmp	r3, #19
 8004d44:	d84c      	bhi.n	8004de0 <MEXTI_EnableExternalInterrupt+0xb4>
 8004d46:	79bb      	ldrb	r3, [r7, #6]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d849      	bhi.n	8004de0 <MEXTI_EnableExternalInterrupt+0xb4>
    {
        switch(Copy_uint8EXTIMode)
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d020      	beq.n	8004d94 <MEXTI_EnableExternalInterrupt+0x68>
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	dc34      	bgt.n	8004dc0 <MEXTI_EnableExternalInterrupt+0x94>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <MEXTI_EnableExternalInterrupt+0x34>
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d00d      	beq.n	8004d7a <MEXTI_EnableExternalInterrupt+0x4e>
 8004d5e:	e02f      	b.n	8004dc0 <MEXTI_EnableExternalInterrupt+0x94>
        {
            case MEXTI_INT_AT_RISING_EDGE:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004d60:	4b23      	ldr	r3, [pc, #140]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	79fa      	ldrb	r2, [r7, #7]
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4a20      	ldr	r2, [pc, #128]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6093      	str	r3, [r2, #8]
                Loc_uint8FuncStatus = E_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]
                break;
 8004d78:	e025      	b.n	8004dc6 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_FALLING_EDGE:
            {
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	79fa      	ldrb	r2, [r7, #7]
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	4611      	mov	r1, r2
 8004d88:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
                break;
 8004d92:	e018      	b.n	8004dc6 <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_BOTH_EDGES:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004d94:	4b16      	ldr	r3, [pc, #88]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	79fa      	ldrb	r2, [r7, #7]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	4611      	mov	r1, r2
 8004da2:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6093      	str	r3, [r2, #8]
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	79fa      	ldrb	r2, [r7, #7]
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	4611      	mov	r1, r2
 8004db6:	4a0e      	ldr	r2, [pc, #56]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
                break;
 8004dc4:	bf00      	nop
            }
        }

        SET_BIT((MEXTI -> IMR), Copy_uint8EXTILine);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	79fa      	ldrb	r2, [r7, #7]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4a06      	ldr	r2, [pc, #24]	@ (8004df0 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	e001      	b.n	8004de4 <MEXTI_EnableExternalInterrupt+0xb8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40010400 	.word	0x40010400

08004df4 <MEXTI_SetCallbackFunction>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MEXTI_SetCallbackFunction(uint8 Copy_uint8EXTILine, ptr_to_EXTICallback P_EXTICallBackFunc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	6039      	str	r1, [r7, #0]
 8004dfe:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint8EXTILine <= MEXTI_EXTI19)
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	2b13      	cmp	r3, #19
 8004e08:	d805      	bhi.n	8004e16 <MEXTI_SetCallbackFunction+0x22>
    {
        glbl_PEXTICallbackFunctions[Copy_uint8EXTILine] = P_EXTICallBackFunc;
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	4906      	ldr	r1, [pc, #24]	@ (8004e28 <MEXTI_SetCallbackFunction+0x34>)
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004e14:	e001      	b.n	8004e1a <MEXTI_SetCallbackFunction+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	200007a8 	.word	0x200007a8

08004e2c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[0] != NULL_PTR)
 8004e30:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <EXTI0_IRQHandler+0x24>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <EXTI0_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[0])();
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <EXTI0_IRQHandler+0x24>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 0);
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <EXTI0_IRQHandler+0x28>)
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <EXTI0_IRQHandler+0x28>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6153      	str	r3, [r2, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200007a8 	.word	0x200007a8
 8004e54:	40010400 	.word	0x40010400

08004e58 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[1] != NULL_PTR)
 8004e5c:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <EXTI1_IRQHandler+0x24>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <EXTI1_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[1])();
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <EXTI1_IRQHandler+0x24>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 1);
 8004e6a:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <EXTI1_IRQHandler+0x28>)
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <EXTI1_IRQHandler+0x28>)
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6153      	str	r3, [r2, #20]
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200007a8 	.word	0x200007a8
 8004e80:	40010400 	.word	0x40010400

08004e84 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[2] != NULL_PTR)
 8004e88:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <EXTI2_IRQHandler+0x24>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <EXTI2_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[2])();
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <EXTI2_IRQHandler+0x24>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 2);
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <EXTI2_IRQHandler+0x28>)
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <EXTI2_IRQHandler+0x28>)
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	6153      	str	r3, [r2, #20]
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200007a8 	.word	0x200007a8
 8004eac:	40010400 	.word	0x40010400

08004eb0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[3] != NULL_PTR)
 8004eb4:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <EXTI3_IRQHandler+0x24>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <EXTI3_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[3])();
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <EXTI3_IRQHandler+0x24>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 3);
 8004ec2:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <EXTI3_IRQHandler+0x28>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <EXTI3_IRQHandler+0x28>)
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	6153      	str	r3, [r2, #20]
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200007a8 	.word	0x200007a8
 8004ed8:	40010400 	.word	0x40010400

08004edc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[4] != NULL_PTR)
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <EXTI4_IRQHandler+0x24>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <EXTI4_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[4])();
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <EXTI4_IRQHandler+0x24>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 4);
 8004eee:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <EXTI4_IRQHandler+0x28>)
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <EXTI4_IRQHandler+0x28>)
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	6153      	str	r3, [r2, #20]
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200007a8 	.word	0x200007a8
 8004f04:	40010400 	.word	0x40010400

08004f08 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 5))
 8004f0c:	4b32      	ldr	r3, [pc, #200]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <EXTI9_5_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[5] != NULL_PTR)
 8004f18:	4b30      	ldr	r3, [pc, #192]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <EXTI9_5_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[5])();
 8004f20:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 5);
 8004f26:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f2c:	f043 0320 	orr.w	r3, r3, #32
 8004f30:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
}
 8004f32:	e04e      	b.n	8004fd2 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 6))
 8004f34:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00d      	beq.n	8004f5c <EXTI9_5_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[6] != NULL_PTR)
 8004f40:	4b26      	ldr	r3, [pc, #152]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <EXTI9_5_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[6])();
 8004f48:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 6);
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4a21      	ldr	r2, [pc, #132]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f58:	6153      	str	r3, [r2, #20]
}
 8004f5a:	e03a      	b.n	8004fd2 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 7))
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <EXTI9_5_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[7] != NULL_PTR)
 8004f68:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <EXTI9_5_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[7])();
 8004f70:	4b1a      	ldr	r3, [pc, #104]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 7);
 8004f76:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f80:	6153      	str	r3, [r2, #20]
}
 8004f82:	e026      	b.n	8004fd2 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 8))
 8004f84:	4b14      	ldr	r3, [pc, #80]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <EXTI9_5_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[8] != NULL_PTR)
 8004f90:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <EXTI9_5_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[8])();
 8004f98:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 8);
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	6153      	str	r3, [r2, #20]
}
 8004faa:	e012      	b.n	8004fd2 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 9))
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <EXTI9_5_IRQHandler+0xca>
        if(glbl_PEXTICallbackFunctions[9] != NULL_PTR)
 8004fb8:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <EXTI9_5_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[9])();
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <EXTI9_5_IRQHandler+0xd4>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 9);
 8004fc6:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4a03      	ldr	r2, [pc, #12]	@ (8004fd8 <EXTI9_5_IRQHandler+0xd0>)
 8004fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd0:	6153      	str	r3, [r2, #20]
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	200007a8 	.word	0x200007a8

08004fe0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 10))
 8004fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <EXTI15_10_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[10] != NULL_PTR)
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <EXTI15_10_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[10])();
 8004ff8:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 10);
 8004ffe:	4b36      	ldr	r3, [pc, #216]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005004:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005008:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
 800500a:	e062      	b.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 11))
 800500c:	4b32      	ldr	r3, [pc, #200]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <EXTI15_10_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[11] != NULL_PTR)
 8005018:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <EXTI15_10_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[11])();
 8005020:	4b2e      	ldr	r3, [pc, #184]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 11);
 8005026:	4b2c      	ldr	r3, [pc, #176]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4a2b      	ldr	r2, [pc, #172]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 800502c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005030:	6153      	str	r3, [r2, #20]
 8005032:	e04e      	b.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 12))
 8005034:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <EXTI15_10_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[12] != NULL_PTR)
 8005040:	4b26      	ldr	r3, [pc, #152]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <EXTI15_10_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[12])();
 8005048:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 12);
 800504e:	4b22      	ldr	r3, [pc, #136]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	4a21      	ldr	r2, [pc, #132]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005058:	6153      	str	r3, [r2, #20]
 800505a:	e03a      	b.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 13))
 800505c:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <EXTI15_10_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[13] != NULL_PTR)
 8005068:	4b1c      	ldr	r3, [pc, #112]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <EXTI15_10_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[13])();
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 13);
 8005076:	4b18      	ldr	r3, [pc, #96]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4a17      	ldr	r2, [pc, #92]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 800507c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005080:	6153      	str	r3, [r2, #20]
 8005082:	e026      	b.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 14))
 8005084:	4b14      	ldr	r3, [pc, #80]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <EXTI15_10_IRQHandler+0xcc>
        if(glbl_PEXTICallbackFunctions[14] != NULL_PTR)
 8005090:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <EXTI15_10_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[14])();
 8005098:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 14);
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4a0d      	ldr	r2, [pc, #52]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 80050a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050a8:	6153      	str	r3, [r2, #20]
 80050aa:	e012      	b.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 15))
 80050ac:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <EXTI15_10_IRQHandler+0xf2>
        if(glbl_PEXTICallbackFunctions[15] != NULL_PTR)
 80050b8:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <EXTI15_10_IRQHandler+0xe6>
            (glbl_PEXTICallbackFunctions[15])();
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <EXTI15_10_IRQHandler+0xfc>)
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 15);
 80050c6:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	4a03      	ldr	r2, [pc, #12]	@ (80050d8 <EXTI15_10_IRQHandler+0xf8>)
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d0:	6153      	str	r3, [r2, #20]
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40010400 	.word	0x40010400
 80050dc:	200007a8 	.word	0x200007a8

080050e0 <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
 80050ea:	460b      	mov	r3, r1
 80050ec:	71bb      	strb	r3, [r7, #6]
 80050ee:	4613      	mov	r3, r2
 80050f0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	f000 8081 	beq.w	8005200 <MGPIO_SetPinMode+0x120>
 80050fe:	2b02      	cmp	r3, #2
 8005100:	f300 80ba 	bgt.w	8005278 <MGPIO_SetPinMode+0x198>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <MGPIO_SetPinMode+0x2e>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d03d      	beq.n	8005188 <MGPIO_SetPinMode+0xa8>
 800510c:	e0b4      	b.n	8005278 <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 800510e:	79bb      	ldrb	r3, [r7, #6]
 8005110:	2b07      	cmp	r3, #7
 8005112:	d819      	bhi.n	8005148 <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8005114:	4b5f      	ldr	r3, [pc, #380]	@ (8005294 <MGPIO_SetPinMode+0x1b4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	79ba      	ldrb	r2, [r7, #6]
 800511a:	0092      	lsls	r2, r2, #2
 800511c:	210f      	movs	r1, #15
 800511e:	fa01 f202 	lsl.w	r2, r1, r2
 8005122:	43d2      	mvns	r2, r2
 8005124:	4611      	mov	r1, r2
 8005126:	4a5b      	ldr	r2, [pc, #364]	@ (8005294 <MGPIO_SetPinMode+0x1b4>)
 8005128:	400b      	ands	r3, r1
 800512a:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 800512c:	4b59      	ldr	r3, [pc, #356]	@ (8005294 <MGPIO_SetPinMode+0x1b4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	7979      	ldrb	r1, [r7, #5]
 8005132:	79ba      	ldrb	r2, [r7, #6]
 8005134:	0092      	lsls	r2, r2, #2
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	4611      	mov	r1, r2
 800513c:	4a55      	ldr	r2, [pc, #340]	@ (8005294 <MGPIO_SetPinMode+0x1b4>)
 800513e:	430b      	orrs	r3, r1
 8005140:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8005146:	e09a      	b.n	800527e <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8005148:	79bb      	ldrb	r3, [r7, #6]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	f200 8097 	bhi.w	800527e <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005150:	4b51      	ldr	r3, [pc, #324]	@ (8005298 <MGPIO_SetPinMode+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	79ba      	ldrb	r2, [r7, #6]
 8005156:	3a08      	subs	r2, #8
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	210f      	movs	r1, #15
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	43d2      	mvns	r2, r2
 8005162:	4611      	mov	r1, r2
 8005164:	4a4c      	ldr	r2, [pc, #304]	@ (8005298 <MGPIO_SetPinMode+0x1b8>)
 8005166:	400b      	ands	r3, r1
 8005168:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800516a:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <MGPIO_SetPinMode+0x1b8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	7979      	ldrb	r1, [r7, #5]
 8005170:	79ba      	ldrb	r2, [r7, #6]
 8005172:	3a08      	subs	r2, #8
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	fa01 f202 	lsl.w	r2, r1, r2
 800517a:	4611      	mov	r1, r2
 800517c:	4a46      	ldr	r2, [pc, #280]	@ (8005298 <MGPIO_SetPinMode+0x1b8>)
 800517e:	430b      	orrs	r3, r1
 8005180:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
            break;
 8005186:	e07a      	b.n	800527e <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8005188:	79bb      	ldrb	r3, [r7, #6]
 800518a:	2b07      	cmp	r3, #7
 800518c:	d819      	bhi.n	80051c2 <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800518e:	4b43      	ldr	r3, [pc, #268]	@ (800529c <MGPIO_SetPinMode+0x1bc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	79ba      	ldrb	r2, [r7, #6]
 8005194:	0092      	lsls	r2, r2, #2
 8005196:	210f      	movs	r1, #15
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	43d2      	mvns	r2, r2
 800519e:	4611      	mov	r1, r2
 80051a0:	4a3e      	ldr	r2, [pc, #248]	@ (800529c <MGPIO_SetPinMode+0x1bc>)
 80051a2:	400b      	ands	r3, r1
 80051a4:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 80051a6:	4b3d      	ldr	r3, [pc, #244]	@ (800529c <MGPIO_SetPinMode+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	7979      	ldrb	r1, [r7, #5]
 80051ac:	79ba      	ldrb	r2, [r7, #6]
 80051ae:	0092      	lsls	r2, r2, #2
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	4611      	mov	r1, r2
 80051b6:	4a39      	ldr	r2, [pc, #228]	@ (800529c <MGPIO_SetPinMode+0x1bc>)
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80051c0:	e05f      	b.n	8005282 <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80051c2:	79bb      	ldrb	r3, [r7, #6]
 80051c4:	2b0f      	cmp	r3, #15
 80051c6:	d85c      	bhi.n	8005282 <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80051c8:	4b35      	ldr	r3, [pc, #212]	@ (80052a0 <MGPIO_SetPinMode+0x1c0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	79ba      	ldrb	r2, [r7, #6]
 80051ce:	3a08      	subs	r2, #8
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	210f      	movs	r1, #15
 80051d4:	fa01 f202 	lsl.w	r2, r1, r2
 80051d8:	43d2      	mvns	r2, r2
 80051da:	4611      	mov	r1, r2
 80051dc:	4a30      	ldr	r2, [pc, #192]	@ (80052a0 <MGPIO_SetPinMode+0x1c0>)
 80051de:	400b      	ands	r3, r1
 80051e0:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80051e2:	4b2f      	ldr	r3, [pc, #188]	@ (80052a0 <MGPIO_SetPinMode+0x1c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	7979      	ldrb	r1, [r7, #5]
 80051e8:	79ba      	ldrb	r2, [r7, #6]
 80051ea:	3a08      	subs	r2, #8
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	fa01 f202 	lsl.w	r2, r1, r2
 80051f2:	4611      	mov	r1, r2
 80051f4:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <MGPIO_SetPinMode+0x1c0>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
            break;
 80051fe:	e040      	b.n	8005282 <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8005200:	79bb      	ldrb	r3, [r7, #6]
 8005202:	2b07      	cmp	r3, #7
 8005204:	d819      	bhi.n	800523a <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <MGPIO_SetPinMode+0x1c4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	79ba      	ldrb	r2, [r7, #6]
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	210f      	movs	r1, #15
 8005210:	fa01 f202 	lsl.w	r2, r1, r2
 8005214:	43d2      	mvns	r2, r2
 8005216:	4611      	mov	r1, r2
 8005218:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <MGPIO_SetPinMode+0x1c4>)
 800521a:	400b      	ands	r3, r1
 800521c:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 800521e:	4b21      	ldr	r3, [pc, #132]	@ (80052a4 <MGPIO_SetPinMode+0x1c4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	7979      	ldrb	r1, [r7, #5]
 8005224:	79ba      	ldrb	r2, [r7, #6]
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4a1d      	ldr	r2, [pc, #116]	@ (80052a4 <MGPIO_SetPinMode+0x1c4>)
 8005230:	430b      	orrs	r3, r1
 8005232:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8005238:	e025      	b.n	8005286 <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 800523a:	79bb      	ldrb	r3, [r7, #6]
 800523c:	2b0f      	cmp	r3, #15
 800523e:	d822      	bhi.n	8005286 <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <MGPIO_SetPinMode+0x1c8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	79ba      	ldrb	r2, [r7, #6]
 8005246:	3a08      	subs	r2, #8
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	210f      	movs	r1, #15
 800524c:	fa01 f202 	lsl.w	r2, r1, r2
 8005250:	43d2      	mvns	r2, r2
 8005252:	4611      	mov	r1, r2
 8005254:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <MGPIO_SetPinMode+0x1c8>)
 8005256:	400b      	ands	r3, r1
 8005258:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800525a:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <MGPIO_SetPinMode+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	7979      	ldrb	r1, [r7, #5]
 8005260:	79ba      	ldrb	r2, [r7, #6]
 8005262:	3a08      	subs	r2, #8
 8005264:	0092      	lsls	r2, r2, #2
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	4611      	mov	r1, r2
 800526c:	4a0e      	ldr	r2, [pc, #56]	@ (80052a8 <MGPIO_SetPinMode+0x1c8>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
            break;
 8005276:	e006      	b.n	8005286 <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
            break;
 800527c:	e004      	b.n	8005288 <MGPIO_SetPinMode+0x1a8>
            break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <MGPIO_SetPinMode+0x1a8>
            break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <MGPIO_SetPinMode+0x1a8>
            break;
 8005286:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	40010800 	.word	0x40010800
 8005298:	40010804 	.word	0x40010804
 800529c:	40010c00 	.word	0x40010c00
 80052a0:	40010c04 	.word	0x40010c04
 80052a4:	40011000 	.word	0x40011000
 80052a8:	40011004 	.word	0x40011004

080052ac <MGPIO_SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_SetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinValue)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
 80052b6:	460b      	mov	r3, r1
 80052b8:	71bb      	strb	r3, [r7, #6]
 80052ba:	4613      	mov	r3, r2
 80052bc:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d87c      	bhi.n	80053c2 <MGPIO_SetPinValue+0x116>
 80052c8:	79bb      	ldrb	r3, [r7, #6]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d879      	bhi.n	80053c2 <MGPIO_SetPinValue+0x116>
    {
        switch (Copy_uint8PortID)
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d04e      	beq.n	8005372 <MGPIO_SetPinValue+0xc6>
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	dc70      	bgt.n	80053ba <MGPIO_SetPinValue+0x10e>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <MGPIO_SetPinValue+0x36>
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d024      	beq.n	800532a <MGPIO_SetPinValue+0x7e>
 80052e0:	e06b      	b.n	80053ba <MGPIO_SetPinValue+0x10e>
        {
            case MGPIO_PORTA:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 80052e2:	797b      	ldrb	r3, [r7, #5]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10c      	bne.n	8005302 <MGPIO_SetPinValue+0x56>
                {
                    SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	@ (80053d4 <MGPIO_SetPinValue+0x128>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	79ba      	ldrb	r2, [r7, #6]
 80052ee:	2101      	movs	r1, #1
 80052f0:	fa01 f202 	lsl.w	r2, r1, r2
 80052f4:	4611      	mov	r1, r2
 80052f6:	4a37      	ldr	r2, [pc, #220]	@ (80053d4 <MGPIO_SetPinValue+0x128>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005300:	e05e      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8005302:	797b      	ldrb	r3, [r7, #5]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <MGPIO_SetPinValue+0x78>
                    CLR_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8005308:	4b32      	ldr	r3, [pc, #200]	@ (80053d4 <MGPIO_SetPinValue+0x128>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	79ba      	ldrb	r2, [r7, #6]
 800530e:	2101      	movs	r1, #1
 8005310:	fa01 f202 	lsl.w	r2, r1, r2
 8005314:	43d2      	mvns	r2, r2
 8005316:	4611      	mov	r1, r2
 8005318:	4a2e      	ldr	r2, [pc, #184]	@ (80053d4 <MGPIO_SetPinValue+0x128>)
 800531a:	400b      	ands	r3, r1
 800531c:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
                break;
 8005322:	e04d      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
                break;
 8005328:	e04a      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTB:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 800532a:	797b      	ldrb	r3, [r7, #5]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10c      	bne.n	800534a <MGPIO_SetPinValue+0x9e>
                {
                    SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8005330:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <MGPIO_SetPinValue+0x12c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	79ba      	ldrb	r2, [r7, #6]
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f202 	lsl.w	r2, r1, r2
 800533c:	4611      	mov	r1, r2
 800533e:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <MGPIO_SetPinValue+0x12c>)
 8005340:	430b      	orrs	r3, r1
 8005342:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005348:	e03a      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 800534a:	797b      	ldrb	r3, [r7, #5]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10d      	bne.n	800536c <MGPIO_SetPinValue+0xc0>
                    CLR_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8005350:	4b21      	ldr	r3, [pc, #132]	@ (80053d8 <MGPIO_SetPinValue+0x12c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	79ba      	ldrb	r2, [r7, #6]
 8005356:	2101      	movs	r1, #1
 8005358:	fa01 f202 	lsl.w	r2, r1, r2
 800535c:	43d2      	mvns	r2, r2
 800535e:	4611      	mov	r1, r2
 8005360:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <MGPIO_SetPinValue+0x12c>)
 8005362:	400b      	ands	r3, r1
 8005364:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
                break;
 800536a:	e029      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
                break;
 8005370:	e026      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTC:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8005372:	797b      	ldrb	r3, [r7, #5]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10c      	bne.n	8005392 <MGPIO_SetPinValue+0xe6>
                {
                    SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8005378:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <MGPIO_SetPinValue+0x130>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	79ba      	ldrb	r2, [r7, #6]
 800537e:	2101      	movs	r1, #1
 8005380:	fa01 f202 	lsl.w	r2, r1, r2
 8005384:	4611      	mov	r1, r2
 8005386:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <MGPIO_SetPinValue+0x130>)
 8005388:	430b      	orrs	r3, r1
 800538a:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005390:	e016      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8005392:	797b      	ldrb	r3, [r7, #5]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <MGPIO_SetPinValue+0x108>
                    CLR_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8005398:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <MGPIO_SetPinValue+0x130>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	79ba      	ldrb	r2, [r7, #6]
 800539e:	2101      	movs	r1, #1
 80053a0:	fa01 f202 	lsl.w	r2, r1, r2
 80053a4:	43d2      	mvns	r2, r2
 80053a6:	4611      	mov	r1, r2
 80053a8:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <MGPIO_SetPinValue+0x130>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
                break;
 80053b2:	e005      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
                break;
 80053b8:	e002      	b.n	80053c0 <MGPIO_SetPinValue+0x114>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
                break;
 80053be:	bf00      	nop
        switch (Copy_uint8PortID)
 80053c0:	e001      	b.n	80053c6 <MGPIO_SetPinValue+0x11a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	4001080c 	.word	0x4001080c
 80053d8:	40010c0c 	.word	0x40010c0c
 80053dc:	4001100c 	.word	0x4001100c

080053e0 <MGPIO_GetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been read successfully
 * @retval E_NOT_OK: Pin Value has not been read
 */
Std_ReturnType MGPIO_GetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8* P_uint8PinValue)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	603a      	str	r2, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
 80053ec:	460b      	mov	r3, r1
 80053ee:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]

    if((P_uint8PinValue != NULL_PTR) && (Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03d      	beq.n	8005476 <MGPIO_GetPinValue+0x96>
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d83a      	bhi.n	8005476 <MGPIO_GetPinValue+0x96>
 8005400:	79bb      	ldrb	r3, [r7, #6]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d837      	bhi.n	8005476 <MGPIO_GetPinValue+0x96>
    {
        switch(Copy_uint8PortID)
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d022      	beq.n	8005452 <MGPIO_GetPinValue+0x72>
 800540c:	2b02      	cmp	r3, #2
 800540e:	dc2e      	bgt.n	800546e <MGPIO_GetPinValue+0x8e>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <MGPIO_GetPinValue+0x3a>
 8005414:	2b01      	cmp	r3, #1
 8005416:	d00e      	beq.n	8005436 <MGPIO_GetPinValue+0x56>
 8005418:	e029      	b.n	800546e <MGPIO_GetPinValue+0x8e>
        {
            case MGPIO_PORTA:
            {
                *P_uint8PinValue = GET_BIT(MGPIOA_IDR, Copy_uint8PinID);
 800541a:	4b1b      	ldr	r3, [pc, #108]	@ (8005488 <MGPIO_GetPinValue+0xa8>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	79bb      	ldrb	r3, [r7, #6]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
                break;
 8005434:	e01e      	b.n	8005474 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTB:
            {
                *P_uint8PinValue = GET_BIT(MGPIOB_IDR, Copy_uint8PinID);
 8005436:	4b15      	ldr	r3, [pc, #84]	@ (800548c <MGPIO_GetPinValue+0xac>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	79bb      	ldrb	r3, [r7, #6]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
                break;
 8005450:	e010      	b.n	8005474 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTC:
            {
                *P_uint8PinValue = GET_BIT(MGPIOC_IDR, Copy_uint8PinID);
 8005452:	4b0f      	ldr	r3, [pc, #60]	@ (8005490 <MGPIO_GetPinValue+0xb0>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	79bb      	ldrb	r3, [r7, #6]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
                break;
 800546c:	e002      	b.n	8005474 <MGPIO_GetPinValue+0x94>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
                break;
 8005472:	bf00      	nop
        switch(Copy_uint8PortID)
 8005474:	e001      	b.n	800547a <MGPIO_GetPinValue+0x9a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010808 	.word	0x40010808
 800548c:	40010c08 	.word	0x40010c08
 8005490:	40011008 	.word	0x40011008

08005494 <MGPIO_ActivatePullUp>:
 * @return Std_ReturnType
 * @retval E_OK: Pull-up has been activated successfully
 * @retval E_NOT_OK: Pull-up has not been activated 
 */
Std_ReturnType MGPIO_ActivatePullUp(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	460a      	mov	r2, r1
 800549e:	71fb      	strb	r3, [r7, #7]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d837      	bhi.n	800551e <MGPIO_ActivatePullUp+0x8a>
 80054ae:	79bb      	ldrb	r3, [r7, #6]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d834      	bhi.n	800551e <MGPIO_ActivatePullUp+0x8a>
    {
        switch(Copy_uint8PortID)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d020      	beq.n	80054fc <MGPIO_ActivatePullUp+0x68>
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	dc2b      	bgt.n	8005516 <MGPIO_ActivatePullUp+0x82>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <MGPIO_ActivatePullUp+0x34>
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d00d      	beq.n	80054e2 <MGPIO_ActivatePullUp+0x4e>
 80054c6:	e026      	b.n	8005516 <MGPIO_ActivatePullUp+0x82>
        {
            case MGPIO_PORTA:
            {
                SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <MGPIO_ActivatePullUp+0x9c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	79ba      	ldrb	r2, [r7, #6]
 80054ce:	2101      	movs	r1, #1
 80054d0:	fa01 f202 	lsl.w	r2, r1, r2
 80054d4:	4611      	mov	r1, r2
 80054d6:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <MGPIO_ActivatePullUp+0x9c>)
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]
                break;
 80054e0:	e01c      	b.n	800551c <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTB:
            {
                SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <MGPIO_ActivatePullUp+0xa0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	79ba      	ldrb	r2, [r7, #6]
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f202 	lsl.w	r2, r1, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	4a10      	ldr	r2, [pc, #64]	@ (8005534 <MGPIO_ActivatePullUp+0xa0>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
                break;
 80054fa:	e00f      	b.n	800551c <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTC:
            {
                SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <MGPIO_ActivatePullUp+0xa4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	79ba      	ldrb	r2, [r7, #6]
 8005502:	2101      	movs	r1, #1
 8005504:	fa01 f202 	lsl.w	r2, r1, r2
 8005508:	4611      	mov	r1, r2
 800550a:	4a0b      	ldr	r2, [pc, #44]	@ (8005538 <MGPIO_ActivatePullUp+0xa4>)
 800550c:	430b      	orrs	r3, r1
 800550e:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
                break;
 8005514:	e002      	b.n	800551c <MGPIO_ActivatePullUp+0x88>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
                break;
 800551a:	bf00      	nop
        switch(Copy_uint8PortID)
 800551c:	e001      	b.n	8005522 <MGPIO_ActivatePullUp+0x8e>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	4001080c 	.word	0x4001080c
 8005534:	40010c0c 	.word	0x40010c0c
 8005538:	4001100c 	.word	0x4001100c

0800553c <MGPTMR_GetPreloadValue>:
 * @return Std_ReturnType
 * @retval E_OK:                                        Preload value successfully calculated
 * @retval E_NOT_OK:                                    Preload value not calculated 
 */
Std_ReturnType MGPTMR_GetPreloadValue                   (uint32 Copy_uint32PeriodInMs, uint16* P_uint16PreloadValue)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
    if(P_uint16PreloadValue != NULL_PTR)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <MGPTMR_GetPreloadValue+0x3c>
    {
        uint32 Loc_uint32TempPreload = (Copy_uint32PeriodInMs * (MGPTMR_CLK_FREQ / (MGPTMR_CLK_PRESCALER * 1000))) - 1;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3b01      	subs	r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
        if(Loc_uint32TempPreload <= 0xFFFF)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555e:	d204      	bcs.n	800556a <MGPTMR_GetPreloadValue+0x2e>
        {
            *P_uint16PreloadValue = Loc_uint32TempPreload;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	b29a      	uxth	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e003      	b.n	8005572 <MGPTMR_GetPreloadValue+0x36>
        }
        else
        {
            *P_uint16PreloadValue = 0xFFFF;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005570:	801a      	strh	r2, [r3, #0]
        }
        Loc_uint8FuncStatus = E_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
 8005576:	e001      	b.n	800557c <MGPTMR_GetPreloadValue+0x40>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <MGPTMR_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Initialized.
 * @retval E_NOT_OK:                Timer not initialized.
 */
Std_ReturnType MGPTMR_Init                              (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
    #if MGPTMR_UEV_STATUS == MGPTMR_UEV_ENABLED

        //Enable update event by clearing UDIS "Update Disable" bit
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_UDIS_BIT);
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4a3b      	ldr	r2, [pc, #236]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	4939      	ldr	r1, [pc, #228]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055a4:	f022 0202 	bic.w	r2, r2, #2
 80055a8:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_UEV_SOURCE == MGPTMR_UEV_SOURCE_ALL

            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_URS_BIT);
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	4a35      	ldr	r2, [pc, #212]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4933      	ldr	r1, [pc, #204]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055bc:	f022 0204 	bic.w	r2, r2, #4
 80055c0:	601a      	str	r2, [r3, #0]
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
    
    #elif MGPTMR_ONE_PULSE_MODE_STATUS == MGPTMR_ONE_PULSE_MODE_DISABLED
    
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	492d      	ldr	r1, [pc, #180]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055d4:	f022 0208 	bic.w	r2, r2, #8
 80055d8:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_ONE_PULSE_MODE_STATUS*/

    #if MGPTMR_COUNTER_ALLIGNMENT == MGPTMR_EDGE_ALLIGNED_MODE
        
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT);
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	4927      	ldr	r1, [pc, #156]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055ec:	f022 0220 	bic.w	r2, r2, #32
 80055f0:	601a      	str	r2, [r3, #0]
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT + 1);
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	4a23      	ldr	r2, [pc, #140]	@ (8005684 <MGPTMR_Init+0xfc>)
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4921      	ldr	r1, [pc, #132]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005608:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_COUNTER_DIRECTION == MGPTMR_COUNTER_UPCOUNTER
    
            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_DIR_BIT);
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <MGPTMR_Init+0xfc>)
 800560e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	491b      	ldr	r1, [pc, #108]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005618:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800561c:	f022 0210 	bic.w	r2, r2, #16
 8005620:	601a      	str	r2, [r3, #0]
        #error "GPTMR Counter Allignment is not specified"
    #endif /*MGPTMR_COUNTER_ALLIGNMENT*/
    
    #if MGPTMR_AUTO_RELOAD_STATUS == MGPTMR_AUTO_RELOAD_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_ARPE_BIT);
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	4a17      	ldr	r2, [pc, #92]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	4915      	ldr	r1, [pc, #84]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005634:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005638:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_AUTO_RELOAD_STATUS*/

    #if MGPTMR_UPDATE_INTERRUPT_STATUS == MGPTMR_UPDATE_INTERRUPT_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> DIER), MGPTMR_DIER_UIE_BIT);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <MGPTMR_Init+0xfc>)
 800563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	490f      	ldr	r1, [pc, #60]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	60da      	str	r2, [r3, #12]
    
    #endif /*MGPTMR_UPDATE_INTERRUPT_STATUS*/

    #if (MGPTMR_CLK_PRESCALER >= 1) || (MGPTMR_CLK_PRESCALER <= 65536)
    
        GPTMR[Copy_uint32TimerSelect] -> PSC = (uint16)((uint16)(MGPTMR_CLK_PRESCALER) - 1);
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	4a0b      	ldr	r2, [pc, #44]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
    
        #error "GPTMR Prescalar must have a value between 1 and 65536"
    
    #endif /*MGPTMR_CLK_PRESCALER*/
		
		CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> SR), MGPTMR_SR_UIF_BIT);
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	4a08      	ldr	r2, [pc, #32]	@ (8005684 <MGPTMR_Init+0xfc>)
 8005664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	4905      	ldr	r1, [pc, #20]	@ (8005684 <MGPTMR_Init+0xfc>)
 800566e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	611a      	str	r2, [r3, #16]

    return E_OK; 
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	200003b8 	.word	0x200003b8

08005688 <MGPTMR_StartTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Started to Count.
 * @retval E_NOT_OK:                Timer not started.
 */
Std_ReturnType MGPTMR_StartTimer                        (GPTMR_Select_t Copy_uint32TimerSelect)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
    SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	4a0b      	ldr	r2, [pc, #44]	@ (80056c4 <MGPTMR_StartTimer+0x3c>)
 8005696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	4909      	ldr	r1, [pc, #36]	@ (80056c4 <MGPTMR_StartTimer+0x3c>)
 80056a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    GPTMR[Copy_uint32TimerSelect] -> CNT = 0;
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	4a05      	ldr	r2, [pc, #20]	@ (80056c4 <MGPTMR_StartTimer+0x3c>)
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b2:	2200      	movs	r2, #0
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24
    return E_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200003b8 	.word	0x200003b8

080056c8 <MGPTMR_StopTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Stopped Counting.
 * @retval E_NOT_OK:                Timer not stopped.
 */
Std_ReturnType MGPTMR_StopTimer                         (GPTMR_Select_t Copy_uint32TimerSelect)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
    CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4a08      	ldr	r2, [pc, #32]	@ (80056f8 <MGPTMR_StopTimer+0x30>)
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	4906      	ldr	r1, [pc, #24]	@ (80056f8 <MGPTMR_StopTimer+0x30>)
 80056e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056e4:	f022 0201 	bic.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    return E_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	200003b8 	.word	0x200003b8

080056fc <MGPTMR_SetTimerPeriod>:
 * @return Std_ReturnType
 * @retval E_OK:                    Period Successfully Set
 * @retval E_NOT_OK:                Period not set 
 */
Std_ReturnType MGPTMR_SetTimerPeriod                    (GPTMR_Select_t Copy_uint32TimerSelect, uint32 Copy_uint32PeriodInMs)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]

    uint16 Loc_uint16PreloadValue = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	81bb      	strh	r3, [r7, #12]
    Loc_uint8FuncStatus = MGPTMR_GetPreloadValue(Copy_uint32PeriodInMs, &Loc_uint16PreloadValue);
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4619      	mov	r1, r3
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f7ff ff10 	bl	800553c <MGPTMR_GetPreloadValue>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]

    if(Loc_uint8FuncStatus == E_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <MGPTMR_SetTimerPeriod+0x3e>
    {
        GPTMR[Copy_uint32TimerSelect] -> ARR = Loc_uint16PreloadValue;
 8005726:	89b9      	ldrh	r1, [r7, #12]
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	4a07      	ldr	r2, [pc, #28]	@ (8005748 <MGPTMR_SetTimerPeriod+0x4c>)
 800572c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005730:	460a      	mov	r2, r1
 8005732:	62da      	str	r2, [r3, #44]	@ 0x2c
        Loc_uint8FuncStatus = E_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e001      	b.n	800573e <MGPTMR_SetTimerPeriod+0x42>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200003b8 	.word	0x200003b8

0800574c <MGPTMR_SetTimerUpdateCallbackFunc>:
 * @return Std_ReturnType
 * @retval E_OK:                    Function Successfully Set
 * @retval E_NOT_OK:                Function not set  
 */
Std_ReturnType MGPTMR_SetTimerUpdateCallbackFunc        (GPTMR_Select_t Copy_uint32TimerSelect, ptr_to_func_t P_UpdateCallbackFunc)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
    if(P_UpdateCallbackFunc != NULL_PTR)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <MGPTMR_SetTimerUpdateCallbackFunc+0x22>
    {
        glbl_PCallbackFunc[Copy_uint32TimerSelect] = P_UpdateCallbackFunc;
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4906      	ldr	r1, [pc, #24]	@ (8005780 <MGPTMR_SetTimerUpdateCallbackFunc+0x34>)
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800576c:	e001      	b.n	8005772 <MGPTMR_SetTimerUpdateCallbackFunc+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	200007f8 	.word	0x200007f8

08005784 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[0] != NULL_PTR)
 8005788:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <TIM2_IRQHandler+0x28>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <TIM2_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[0])();
 8005790:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <TIM2_IRQHandler+0x28>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[0] -> SR), MGPTMR_SR_UIF_BIT);
 8005796:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <TIM2_IRQHandler+0x2c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <TIM2_IRQHandler+0x2c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	611a      	str	r2, [r3, #16]
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	200007f8 	.word	0x200007f8
 80057b0:	200003b8 	.word	0x200003b8

080057b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[1] != NULL_PTR)
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <TIM3_IRQHandler+0x28>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <TIM3_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[1])();
 80057c0:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <TIM3_IRQHandler+0x28>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[1] -> SR), MGPTMR_SR_UIF_BIT);
 80057c6:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <TIM3_IRQHandler+0x2c>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	4b04      	ldr	r3, [pc, #16]	@ (80057e0 <TIM3_IRQHandler+0x2c>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200007f8 	.word	0x200007f8
 80057e0:	200003b8 	.word	0x200003b8

080057e4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[2] != NULL_PTR)
 80057e8:	4b08      	ldr	r3, [pc, #32]	@ (800580c <TIM4_IRQHandler+0x28>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <TIM4_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[2])();
 80057f0:	4b06      	ldr	r3, [pc, #24]	@ (800580c <TIM4_IRQHandler+0x28>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[2] -> SR), MGPTMR_SR_UIF_BIT);
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <TIM4_IRQHandler+0x2c>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <TIM4_IRQHandler+0x2c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200007f8 	.word	0x200007f8
 8005810:	200003b8 	.word	0x200003b8

08005814 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8005814:	b5b0      	push	{r4, r5, r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	82fb      	strh	r3, [r7, #22]
 8005822:	2300      	movs	r3, #0
 8005824:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 8005826:	4b57      	ldr	r3, [pc, #348]	@ (8005984 <MCAL_I2C_Init+0x170>)
 8005828:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 800582a:	2300      	movs	r3, #0
 800582c:	81fb      	strh	r3, [r7, #14]

	

	//Enable RCC Clock
	if (I2Cx == I2C1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a55      	ldr	r2, [pc, #340]	@ (8005988 <MCAL_I2C_Init+0x174>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10e      	bne.n	8005854 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8005836:	4a55      	ldr	r2, [pc, #340]	@ (800598c <MCAL_I2C_Init+0x178>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4614      	mov	r4, r2
 800583c:	461d      	mov	r5, r3
 800583e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005842:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005846:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 800584a:	2115      	movs	r1, #21
 800584c:	2002      	movs	r0, #2
 800584e:	f000 fbc5 	bl	8005fdc <MRCC_EnablePeripheralClock>
 8005852:	e00e      	b.n	8005872 <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8005854:	4b4d      	ldr	r3, [pc, #308]	@ (800598c <MCAL_I2C_Init+0x178>)
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	f103 0418 	add.w	r4, r3, #24
 800585c:	4615      	mov	r5, r2
 800585e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005866:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 800586a:	2116      	movs	r1, #22
 800586c:	2002      	movs	r0, #2
 800586e:	f000 fbb5 	bl	8005fdc <MRCC_EnablePeripheralClock>
	}
	MCAL_I2C_RESET();
 8005872:	f000 f893 	bl	800599c <MCAL_I2C_RESET>
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	88db      	ldrh	r3, [r3, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d178      	bne.n	8005970 <MCAL_I2C_Init+0x15c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8005884:	8afb      	ldrh	r3, [r7, #22]
 8005886:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800588a:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 800588c:	4b3d      	ldr	r3, [pc, #244]	@ (8005984 <MCAL_I2C_Init+0x170>)
 800588e:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4a3f      	ldr	r2, [pc, #252]	@ (8005990 <MCAL_I2C_Init+0x17c>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	0c9b      	lsrs	r3, r3, #18
 800589a:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 800589c:	8afa      	ldrh	r2, [r7, #22]
 800589e:	8abb      	ldrh	r3, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80058a4:	8afa      	ldrh	r2, [r7, #22]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <MCAL_I2C_Init+0x180>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <MCAL_I2C_Init+0xba>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <MCAL_I2C_Init+0x184>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d112      	bne.n	80058f4 <MCAL_I2C_Init+0xe0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 80058dc:	8afa      	ldrh	r2, [r7, #22]
 80058de:	89fb      	ldrh	r3, [r7, #14]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 80058e4:	8afa      	ldrh	r2, [r7, #22]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 80058ea:	8abb      	ldrh	r3, [r7, #20]
 80058ec:	3301      	adds	r3, #1
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	8a1a      	ldrh	r2, [r3, #16]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	8a5b      	ldrh	r3, [r3, #18]
 8005902:	4313      	orrs	r3, r2
 8005904:	b29a      	uxth	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	88db      	ldrh	r3, [r3, #6]
 800590a:	4313      	orrs	r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	889b      	ldrh	r3, [r3, #4]
 8005912:	4313      	orrs	r3, r2
 8005914:	b29a      	uxth	r2, r3
 8005916:	8afb      	ldrh	r3, [r7, #22]
 8005918:	4313      	orrs	r3, r2
 800591a:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 800591c:	8afa      	ldrh	r2, [r7, #22]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 8005922:	2300      	movs	r3, #0
 8005924:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	891b      	ldrh	r3, [r3, #8]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d10d      	bne.n	800594a <MCAL_I2C_Init+0x136>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 800592e:	2301      	movs	r3, #1
 8005930:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	899b      	ldrh	r3, [r3, #12]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	b21a      	sxth	r2, r3
 800593a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800593e:	4313      	orrs	r3, r2
 8005940:	b21b      	sxth	r3, r3
 8005942:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8005944:	8afa      	ldrh	r2, [r7, #22]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 800594a:	2300      	movs	r3, #0
 800594c:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	895b      	ldrh	r3, [r3, #10]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	b21a      	sxth	r2, r3
 8005956:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800595a:	4313      	orrs	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	89da      	ldrh	r2, [r3, #14]
 8005964:	8afb      	ldrh	r3, [r7, #22]
 8005966:	4313      	orrs	r3, r2
 8005968:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 800596a:	8afa      	ldrh	r2, [r7, #22]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
}
 800597c:	bf00      	nop
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bdb0      	pop	{r4, r5, r7, pc}
 8005984:	007a1200 	.word	0x007a1200
 8005988:	40005400 	.word	0x40005400
 800598c:	20000804 	.word	0x20000804
 8005990:	431bde83 	.word	0x431bde83
 8005994:	0007a120 	.word	0x0007a120
 8005998:	000186a0 	.word	0x000186a0

0800599c <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <MCAL_I2C_RESET+0x48>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <MCAL_I2C_RESET+0x48>)
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059aa:	6013      	str	r3, [r2, #0]
	MRCC_APB1RSTR |= (1 << 21);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <MCAL_I2C_RESET+0x4c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0d      	ldr	r2, [pc, #52]	@ (80059e8 <MCAL_I2C_RESET+0x4c>)
 80059b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059b6:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 80059b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80059bc:	f000 ff4a 	bl	8006854 <MSTK_uint8Delay>
	MRCC_APB1RSTR &= ~(1 << 21);
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <MCAL_I2C_RESET+0x4c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a08      	ldr	r2, [pc, #32]	@ (80059e8 <MCAL_I2C_RESET+0x4c>)
 80059c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ca:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <MCAL_I2C_RESET+0x48>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a04      	ldr	r2, [pc, #16]	@ (80059e4 <MCAL_I2C_RESET+0x48>)
 80059d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059d6:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 80059d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80059dc:	f000 ff3a 	bl	8006854 <MSTK_uint8Delay>
}
 80059e0:	bf00      	nop
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40005400 	.word	0x40005400
 80059e8:	40021010 	.word	0x40021010

080059ec <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10a      	bne.n	8005a12 <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80059fc:	220e      	movs	r2, #14
 80059fe:	2106      	movs	r1, #6
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7ff fb6d 	bl	80050e0 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8005a06:	220e      	movs	r2, #14
 8005a08:	2107      	movs	r1, #7
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	f7ff fb68 	bl	80050e0 <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8005a10:	e00d      	b.n	8005a2e <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a09      	ldr	r2, [pc, #36]	@ (8005a3c <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d109      	bne.n	8005a2e <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005a1a:	220d      	movs	r2, #13
 8005a1c:	210a      	movs	r1, #10
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7ff fb5e 	bl	80050e0 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8005a24:	220d      	movs	r2, #13
 8005a26:	210b      	movs	r1, #11
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7ff fb59 	bl	80050e0 <MGPIO_SetPinMode>
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40005400 	.word	0x40005400
 8005a3c:	40005800 	.word	0x40005800

08005a40 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005a54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f8d3 	bl	8005c08 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005a62:	bf00      	nop
 8005a64:	2101      	movs	r1, #1
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8f6 	bl	8005c58 <I2C_GetFlagStatus>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f8      	beq.n	8005a64 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	2200      	movs	r2, #0
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f973 	bl	8005d64 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005a7e:	bf00      	nop
 8005a80:	2102      	movs	r1, #2
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f8e8 	bl	8005c58 <I2C_GetFlagStatus>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f8      	beq.n	8005a80 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8005a8e:	bf00      	nop
 8005a90:	4918      	ldr	r1, [pc, #96]	@ (8005af4 <MCAL_I2C_MASTER_TX+0xb4>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8e0 	bl	8005c58 <I2C_GetFlagStatus>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f8      	beq.n	8005a90 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e017      	b.n	8005ad4 <MCAL_I2C_MASTER_TX+0x94>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8005aa4:	bf00      	nop
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f8d5 	bl	8005c58 <I2C_GetFlagStatus>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f8      	beq.n	8005aa6 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i > 0)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd02      	ble.n	8005ac0 <MCAL_I2C_MASTER_TX+0x80>
		{
			delay_micro(100);
 8005aba:	2064      	movs	r0, #100	@ 0x64
 8005abc:	f7fd fec3 	bl	8003846 <delay_micro>
		}
		I2Cx->DR = dataOut[i];
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d8e3      	bhi.n	8005aa4 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8005adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <MCAL_I2C_MASTER_TX+0xac>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f95b 	bl	8005da2 <I2C_GenerateSTOP>
	}
}
 8005aec:	bf00      	nop
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	00070080 	.word	0x00070080

08005af8 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start, I2C_SlaveSelect_t slave)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	460b      	mov	r3, r1
 8005b06:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c00 <MCAL_I2C_MASTER_RX+0x108>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b20:	461a      	mov	r2, r3
 8005b22:	2101      	movs	r1, #1
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f86f 	bl	8005c08 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005b2a:	bf00      	nop
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f892 	bl	8005c58 <I2C_GetFlagStatus>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f8      	beq.n	8005b2c <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8005b3a:	897b      	ldrh	r3, [r7, #10]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f90f 	bl	8005d64 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005b46:	bf00      	nop
 8005b48:	2102      	movs	r1, #2
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f884 	bl	8005c58 <I2C_GetFlagStatus>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f8      	beq.n	8005b48 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8005b56:	2101      	movs	r1, #1
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f93d 	bl	8005dd8 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01c      	beq.n	8005bb6 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e011      	b.n	8005ba8 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8005b84:	bf00      	nop
 8005b86:	2103      	movs	r1, #3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f865 	bl	8005c58 <I2C_GetFlagStatus>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f8      	beq.n	8005b86 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6919      	ldr	r1, [r3, #16]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	b2ca      	uxtb	r2, r1
 8005ba0:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	daea      	bge.n	8005b84 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8005bae:	2100      	movs	r1, #0
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f911 	bl	8005dd8 <I2C_ACKnowledgeConfig>

	}
	if(slave == I2C_EEPROM)
 8005bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <MCAL_I2C_MASTER_RX+0xce>
		MSTK_uint8Delay(500);
 8005bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005bc2:	f000 fe47 	bl	8006854 <MSTK_uint8Delay>
	if(Stop == With_Stop)
 8005bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <MCAL_I2C_MASTER_RX+0xde>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f8e6 	bl	8005da2 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8005bd6:	7cfa      	ldrb	r2, [r7, #19]
 8005bd8:	490a      	ldr	r1, [pc, #40]	@ (8005c04 <MCAL_I2C_MASTER_RX+0x10c>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	3310      	adds	r3, #16
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bec:	d103      	bne.n	8005bf6 <MCAL_I2C_MASTER_RX+0xfe>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8005bee:	2101      	movs	r1, #1
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f8f1 	bl	8005dd8 <I2C_ACKnowledgeConfig>
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40005400 	.word	0x40005400
 8005c04:	20000804 	.word	0x20000804

08005c08 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
 8005c14:	4613      	mov	r3, r2
 8005c16:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8005c18:	78bb      	ldrb	r3, [r7, #2]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d007      	beq.n	8005c2e <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8005c1e:	bf00      	nop
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f818 	bl	8005c58 <I2C_GetFlagStatus>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f8      	bne.n	8005c20 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8005c40:	e005      	b.n	8005c4e <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d811      	bhi.n	8005c9c <I2C_GetFlagStatus+0x44>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d86a      	bhi.n	8005d54 <I2C_GetFlagStatus+0xfc>
 8005c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <I2C_GetFlagStatus+0x2c>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005ca7 	.word	0x08005ca7
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cd7 	.word	0x08005cd7
 8005c90:	08005d3d 	.word	0x08005d3d
 8005c94:	08005d25 	.word	0x08005d25
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4a30      	ldr	r2, [pc, #192]	@ (8005d60 <I2C_GetFlagStatus+0x108>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d024      	beq.n	8005cee <I2C_GetFlagStatus+0x96>
 8005ca4:	e056      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005cb6:	e04d      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	75fb      	strb	r3, [r7, #23]
		break;
 8005cbc:	e04a      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005cce:	e041      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75fb      	strb	r3, [r7, #23]
		break;
 8005cd4:	e03e      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8005ce6:	e035      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	75fb      	strb	r3, [r7, #23]
		break;
 8005cec:	e032      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d0a:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4013      	ands	r3, r2
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d102      	bne.n	8005d1e <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8005d1c:	e01a      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	75fb      	strb	r3, [r7, #23]
		break;
 8005d22:	e017      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005d34:	e00e      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
		break;
 8005d3a:	e00b      	b.n	8005d54 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005d4c:	e001      	b.n	8005d52 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]
		break;
 8005d52:	bf00      	nop
	}
	}
	return bitstatus;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	00070080 	.word	0x00070080

08005d64 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
 8005d70:	4613      	mov	r3, r2
 8005d72:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8005d7a:	787b      	ldrb	r3, [r7, #1]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	807b      	strh	r3, [r7, #2]
 8005d88:	e003      	b.n	8005d92 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d006      	beq.n	8005dc2 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8005dc0:	e005      	b.n	8005dce <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8005df6:	e005      	b.n	8005e04 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
	...

08005e10 <MNVIC_EnableInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK: Peripheral Interrupt is enabled successfully
 * @retval E_NOT_OK: Peripheral Interrupt is not enabled 
 */
Std_ReturnType MNVIC_EnableInterrupt(MNVIC_InterruptType Copy_uint32InterruptNumber)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < 32)
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b1f      	cmp	r3, #31
 8005e22:	d80c      	bhi.n	8005e3e <MNVIC_EnableInterrupt+0x2e>
    {
        SET_BIT((NVIC -> ISER[0]), Copy_uint32InterruptNumber);
 8005e24:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <MNVIC_EnableInterrupt+0x64>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	4611      	mov	r1, r2
 8005e32:	4a10      	ldr	r2, [pc, #64]	@ (8005e74 <MNVIC_EnableInterrupt+0x64>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	e014      	b.n	8005e68 <MNVIC_EnableInterrupt+0x58>
    }
    else if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	2b3b      	cmp	r3, #59	@ 0x3b
 8005e42:	d80f      	bhi.n	8005e64 <MNVIC_EnableInterrupt+0x54>
    {
        Copy_uint32InterruptNumber -= 32;
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	3b20      	subs	r3, #32
 8005e48:	71fb      	strb	r3, [r7, #7]
        SET_BIT((NVIC -> ISER[1]), Copy_uint32InterruptNumber);
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <MNVIC_EnableInterrupt+0x64>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	79fa      	ldrb	r2, [r7, #7]
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f202 	lsl.w	r2, r1, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	4a06      	ldr	r2, [pc, #24]	@ (8005e74 <MNVIC_EnableInterrupt+0x64>)
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	6053      	str	r3, [r2, #4]
        Loc_uint8FuncStatus = E_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
 8005e62:	e001      	b.n	8005e68 <MNVIC_EnableInterrupt+0x58>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	e000e100 	.word	0xe000e100

08005e78 <MNVIC_SetInterruptPriority>:
 * @return Std_ReturnType
 * @retval E_OK: Priority has been set successfully
 * @retval E_NOT_OK: Priority has not been set  
 */
Std_ReturnType MNVIC_SetInterruptPriority(MNVIC_InterruptType Copy_uint32InterruptNumber, uint8 Copy_uint8GroupPriority, uint8 Copy_uint8SubGroupPriority)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
 8005e82:	460b      	mov	r3, r1
 8005e84:	71bb      	strb	r3, [r7, #6]
 8005e86:	4613      	mov	r3, r2
 8005e88:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b3b      	cmp	r3, #59	@ 0x3b
 8005e92:	d84e      	bhi.n	8005f32 <MNVIC_SetInterruptPriority+0xba>

                                             -----------------------------------
                                            |     Priority    ||||||||||||||||||                 
                                             -----------------------------------
        */
        uint16 Loc_uint16AIRCRPriorityGroupVal = (uint16)(MSCB_AIRCR & (0xFFFF));
 8005e94:	4b2b      	ldr	r3, [pc, #172]	@ (8005f44 <MNVIC_SetInterruptPriority+0xcc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	81bb      	strh	r3, [r7, #12]
        uint8 Loc_uint8PriorityValue = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	72fb      	strb	r3, [r7, #11]

        switch(Loc_uint16AIRCRPriorityGroupVal)
 8005e9e:	89bb      	ldrh	r3, [r7, #12]
 8005ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ea4:	d038      	beq.n	8005f18 <MNVIC_SetInterruptPriority+0xa0>
 8005ea6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005eaa:	dc3f      	bgt.n	8005f2c <MNVIC_SetInterruptPriority+0xb4>
 8005eac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005eb0:	d019      	beq.n	8005ee6 <MNVIC_SetInterruptPriority+0x6e>
 8005eb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005eb6:	dc39      	bgt.n	8005f2c <MNVIC_SetInterruptPriority+0xb4>
 8005eb8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005ebc:	d013      	beq.n	8005ee6 <MNVIC_SetInterruptPriority+0x6e>
 8005ebe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005ec2:	dc33      	bgt.n	8005f2c <MNVIC_SetInterruptPriority+0xb4>
 8005ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec8:	d003      	beq.n	8005ed2 <MNVIC_SetInterruptPriority+0x5a>
 8005eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ece:	d00a      	beq.n	8005ee6 <MNVIC_SetInterruptPriority+0x6e>
 8005ed0:	e02c      	b.n	8005f2c <MNVIC_SetInterruptPriority+0xb4>
        {
            case MNVIC_PRIORITY_GROUP_4_SUB_0:
            {
                Loc_uint8PriorityValue = (Copy_uint8GroupPriority << 4);
 8005ed2:	79bb      	ldrb	r3, [r7, #6]
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f48 <MNVIC_SetInterruptPriority+0xd0>)
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	4413      	add	r3, r2
 8005ede:	7afa      	ldrb	r2, [r7, #11]
 8005ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005ee4:	e027      	b.n	8005f36 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_3_SUB_1:
            case MNVIC_PRIORITY_GROUP_2_SUB_2:
            case MNVIC_PRIORITY_GROUP_1_SUB_3:
            {
                Loc_uint8PriorityValue = ((Copy_uint8SubGroupPriority) | (Copy_uint8GroupPriority << ((Loc_uint16AIRCRPriorityGroupVal - (uint16)MNVIC_PRIORITY_GROUP_4_SUB_0) / 0x100)));
 8005ee6:	79ba      	ldrb	r2, [r7, #6]
 8005ee8:	89bb      	ldrh	r3, [r7, #12]
 8005eea:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da00      	bge.n	8005ef4 <MNVIC_SetInterruptPriority+0x7c>
 8005ef2:	33ff      	adds	r3, #255	@ 0xff
 8005ef4:	121b      	asrs	r3, r3, #8
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	b25a      	sxtb	r2, r3
 8005efc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue << 4;
 8005f06:	4910      	ldr	r1, [pc, #64]	@ (8005f48 <MNVIC_SetInterruptPriority+0xd0>)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	7afa      	ldrb	r2, [r7, #11]
 8005f0c:	0112      	lsls	r2, r2, #4
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	440b      	add	r3, r1
 8005f12:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005f16:	e00e      	b.n	8005f36 <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_0_SUB_4:
            {
                Loc_uint8PriorityValue = (Copy_uint8SubGroupPriority << 4);
 8005f18:	797b      	ldrb	r3, [r7, #5]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f48 <MNVIC_SetInterruptPriority+0xd0>)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	4413      	add	r3, r2
 8005f24:	7afa      	ldrb	r2, [r7, #11]
 8005f26:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
                break;
 8005f2a:	e004      	b.n	8005f36 <MNVIC_SetInterruptPriority+0xbe>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
                break;
 8005f30:	e001      	b.n	8005f36 <MNVIC_SetInterruptPriority+0xbe>
        }

    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	e000ed0c 	.word	0xe000ed0c
 8005f48:	e000e100 	.word	0xe000e100

08005f4c <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 8005f50:	4b20      	ldr	r3, [pc, #128]	@ (8005fd4 <MRCC_InitClock+0x88>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd4 <MRCC_InitClock+0x88>)
 8005f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f5a:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd4 <MRCC_InitClock+0x88>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <MRCC_InitClock+0x88>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f66:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8005f68:	bf00      	nop
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd4 <MRCC_InitClock+0x88>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f9      	beq.n	8005f6a <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8005f76:	4b18      	ldr	r3, [pc, #96]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8005f82:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a14      	ldr	r2, [pc, #80]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 8005f8e:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a11      	ldr	r2, [pc, #68]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f98:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fa8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005fac:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 8005fae:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fb0:	4a09      	ldr	r2, [pc, #36]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8005fb6:	4b08      	ldr	r3, [pc, #32]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a07      	ldr	r2, [pc, #28]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fbc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005fc0:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8005fc2:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <MRCC_InitClock+0x8c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6013      	str	r3, [r2, #0]

    return E_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40021004 	.word	0x40021004

08005fdc <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	71fb      	strb	r3, [r7, #7]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d020      	beq.n	8006038 <MRCC_EnablePeripheralClock+0x5c>
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	dc2b      	bgt.n	8006052 <MRCC_EnablePeripheralClock+0x76>
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d002      	beq.n	8006004 <MRCC_EnablePeripheralClock+0x28>
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d00d      	beq.n	800601e <MRCC_EnablePeripheralClock+0x42>
 8006002:	e026      	b.n	8006052 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 8006004:	4b17      	ldr	r3, [pc, #92]	@ (8006064 <MRCC_EnablePeripheralClock+0x88>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	79ba      	ldrb	r2, [r7, #6]
 800600a:	2101      	movs	r1, #1
 800600c:	fa01 f202 	lsl.w	r2, r1, r2
 8006010:	4611      	mov	r1, r2
 8006012:	4a14      	ldr	r2, [pc, #80]	@ (8006064 <MRCC_EnablePeripheralClock+0x88>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
            break;
 800601c:	e01c      	b.n	8006058 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 800601e:	4b12      	ldr	r3, [pc, #72]	@ (8006068 <MRCC_EnablePeripheralClock+0x8c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	79ba      	ldrb	r2, [r7, #6]
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f202 	lsl.w	r2, r1, r2
 800602a:	4611      	mov	r1, r2
 800602c:	4a0e      	ldr	r2, [pc, #56]	@ (8006068 <MRCC_EnablePeripheralClock+0x8c>)
 800602e:	430b      	orrs	r3, r1
 8006030:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
            break;
 8006036:	e00f      	b.n	8006058 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 8006038:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <MRCC_EnablePeripheralClock+0x90>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	79ba      	ldrb	r2, [r7, #6]
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f202 	lsl.w	r2, r1, r2
 8006044:	4611      	mov	r1, r2
 8006046:	4a09      	ldr	r2, [pc, #36]	@ (800606c <MRCC_EnablePeripheralClock+0x90>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
            break;
 8006050:	e002      	b.n	8006058 <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
            break;
 8006056:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	40021014 	.word	0x40021014
 8006068:	4002101c 	.word	0x4002101c
 800606c:	40021018 	.word	0x40021018

08006070 <MRTC_CalculateSeconds>:
static volatile Stime_t glbl_SReferenceTime = {17,12,0};
static volatile uint32 glbl_uint32ReferenceSeconds = 0;
static volatile ptr_to_func_t glbl_PCallbackFunc = NULL_PTR;

Std_ReturnType MRTC_CalculateSeconds(Sdate_t* P_SDate, Stime_t* P_STime, uint32* P_uint32Seconds)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b09a      	sub	sp, #104	@ 0x68
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
    struct tm time = {};
 800607c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006080:	2224      	movs	r2, #36	@ 0x24
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 ff60 	bl	8007f4a <memset>
    
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03d      	beq.n	8006112 <MRTC_CalculateSeconds+0xa2>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d03a      	beq.n	8006112 <MRTC_CalculateSeconds+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d037      	beq.n	8006112 <MRTC_CalculateSeconds+0xa2>
    {
        struct tm Loc_SspecificTime = {0};
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	2224      	movs	r2, #36	@ 0x24
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 ff4d 	bl	8007f4a <memset>
        Loc_SspecificTime.tm_year = (P_SDate -> m_years) - 1900; //year since 1900
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mon = (P_SDate -> m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	3b01      	subs	r3, #1
 80060c0:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_mday = (P_SDate -> m_days); //Day (1 ---> 31)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	78db      	ldrb	r3, [r3, #3]
 80060c6:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_hour = (P_STime -> m_hours);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_min = (P_STime -> m_minutes);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	617b      	str	r3, [r7, #20]
        Loc_SspecificTime.tm_sec = (P_STime -> m_seconds);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	789b      	ldrb	r3, [r3, #2]
 80060d8:	613b      	str	r3, [r7, #16]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 f992 	bl	8008408 <mktime>
 80060e4:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58

        *P_uint32Seconds = (uint32)(difftime(Loc_SspecificTime_t, 0));
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80060f4:	f001 ffa0 	bl	8008038 <difftime>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	f7fa fcb4 	bl	8000a6c <__aeabi_d2uiz>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]

        Loc_uint8FuncStatus = E_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    {
 8006110:	e002      	b.n	8006118 <MRTC_CalculateSeconds+0xa8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }
    return Loc_uint8FuncStatus;
 8006118:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800611c:	4618      	mov	r0, r3
 800611e:	3768      	adds	r7, #104	@ 0x68
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <MRTC_CalculateDateTime>:
Std_ReturnType MRTC_CalculateDateTime(uint32* P_uint32Seconds, Sdate_t* P_SDate, Stime_t* P_STime)
{
 8006124:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006128:	b098      	sub	sp, #96	@ 0x60
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d06b      	beq.n	8006216 <MRTC_CalculateDateTime+0xf2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d068      	beq.n	8006216 <MRTC_CalculateDateTime+0xf2>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d065      	beq.n	8006216 <MRTC_CalculateDateTime+0xf2>
    {
        time_t Loc_tInputTime = (time_t)(*P_uint32Seconds);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	4698      	mov	r8, r3
 8006152:	4691      	mov	r9, r2
 8006154:	e9c7 8914 	strd	r8, r9, [r7, #80]	@ 0x50

        struct tm Loc_SspecificTime = {0};
 8006158:	f107 0314 	add.w	r3, r7, #20
 800615c:	2224      	movs	r2, #36	@ 0x24
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f001 fef2 	bl	8007f4a <memset>
        Loc_SspecificTime.tm_year = (glbl_SReferenceDate . m_years) - 1900; //year since 1900
 8006166:	4b31      	ldr	r3, [pc, #196]	@ (800622c <MRTC_CalculateDateTime+0x108>)
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
        Loc_SspecificTime.tm_mon = (glbl_SReferenceDate . m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 8006172:	4b2e      	ldr	r3, [pc, #184]	@ (800622c <MRTC_CalculateDateTime+0x108>)
 8006174:	789b      	ldrb	r3, [r3, #2]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
        Loc_SspecificTime.tm_mday = (glbl_SReferenceDate . m_days); //Day (1 ---> 31)
 800617c:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <MRTC_CalculateDateTime+0x108>)
 800617e:	78db      	ldrb	r3, [r3, #3]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_hour = (glbl_SReferenceTime . m_hours);
 8006184:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <MRTC_CalculateDateTime+0x10c>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_min = (glbl_SReferenceTime . m_minutes);
 800618c:	4b28      	ldr	r3, [pc, #160]	@ (8006230 <MRTC_CalculateDateTime+0x10c>)
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_sec = (glbl_SReferenceTime . m_seconds);
 8006194:	4b26      	ldr	r3, [pc, #152]	@ (8006230 <MRTC_CalculateDateTime+0x10c>)
 8006196:	789b      	ldrb	r3, [r3, #2]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	617b      	str	r3, [r7, #20]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 f931 	bl	8008408 <mktime>
 80061a6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

        time_t Loc_tSumTime = Loc_tInputTime + Loc_SspecificTime_t;
 80061aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80061ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061b2:	1884      	adds	r4, r0, r2
 80061b4:	eb41 0503 	adc.w	r5, r1, r3
 80061b8:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38

        struct tm* Loc_PBrokenTime = localtime(&Loc_tSumTime);
 80061bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 ff41 	bl	8008048 <localtime>
 80061c6:	6478      	str	r0, [r7, #68]	@ 0x44

        P_SDate -> m_years = (Loc_PBrokenTime -> tm_year) + 1900;
 80061c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	801a      	strh	r2, [r3, #0]
        P_SDate -> m_months = (Loc_PBrokenTime -> tm_mon) + 1;
 80061d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	3301      	adds	r3, #1
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	709a      	strb	r2, [r3, #2]
        P_SDate -> m_days = (Loc_PBrokenTime -> tm_mday);
 80061e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	70da      	strb	r2, [r3, #3]
        P_STime -> m_hours = Loc_PBrokenTime -> tm_hour;
 80061f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	701a      	strb	r2, [r3, #0]
        P_STime -> m_minutes = Loc_PBrokenTime -> tm_min;
 80061fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	705a      	strb	r2, [r3, #1]
        P_STime ->m_seconds = Loc_PBrokenTime -> tm_sec;
 8006204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	709a      	strb	r2, [r3, #2]
        Loc_uint8FuncStatus = E_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    {
 8006214:	e002      	b.n	800621c <MRTC_CalculateDateTime+0xf8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }
    return Loc_uint8FuncStatus;
 800621c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006220:	4618      	mov	r0, r3
 8006222:	3760      	adds	r7, #96	@ 0x60
 8006224:	46bd      	mov	sp, r7
 8006226:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800622a:	bf00      	nop
 800622c:	200003c4 	.word	0x200003c4
 8006230:	200003c8 	.word	0x200003c8

08006234 <MRTC_Init>:
 * @return Std_ReturnType
 * @retval E_OK: RTC is Successfully initialized
 * @retval E_NOT_OK: RTC is not initialized 
 */
Std_ReturnType MRTC_Init(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800623a:	2301      	movs	r3, #1
 800623c:	71fb      	strb	r3, [r7, #7]

    //Enable Power Control Clock in order to access backup and RTC Registers
    SET_BIT(MRCC_APB1ENR_R, MRCC_APB1ENR_PWREN_BIT);
 800623e:	4b37      	ldr	r3, [pc, #220]	@ (800631c <MRTC_Init+0xe8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a36      	ldr	r2, [pc, #216]	@ (800631c <MRTC_Init+0xe8>)
 8006244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006248:	6013      	str	r3, [r2, #0]
    //Enable access to backup and RTC Registers
    SET_BIT(MPWR_CR_R, MPWR_CR_DBP_BIT);
 800624a:	4b35      	ldr	r3, [pc, #212]	@ (8006320 <MRTC_Init+0xec>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a34      	ldr	r2, [pc, #208]	@ (8006320 <MRTC_Init+0xec>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006254:	6013      	str	r3, [r2, #0]


    #if MRTC_CLOCK_SOURCE == MRTC_LSE_CLOCK
        //Enable external 32KHz Oscillator
        SET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSEON_BIT);
 8006256:	4b33      	ldr	r3, [pc, #204]	@ (8006324 <MRTC_Init+0xf0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a32      	ldr	r2, [pc, #200]	@ (8006324 <MRTC_Init+0xf0>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6013      	str	r3, [r2, #0]
        //Wait until external 32KHz Oscillator is ready
        while(!(GET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSERDY_BIT)));
 8006262:	bf00      	nop
 8006264:	4b2f      	ldr	r3, [pc, #188]	@ (8006324 <MRTC_Init+0xf0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f9      	beq.n	8006264 <MRTC_Init+0x30>
        //Set Clock Source of RTC to be Low-speed external clock
        SET_BIT(MRCC_BDCR_R , MRCC_BDCR_RTCSEL_START_BIT);
 8006270:	4b2c      	ldr	r3, [pc, #176]	@ (8006324 <MRTC_Init+0xf0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <MRTC_Init+0xf0>)
 8006276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800627a:	6013      	str	r3, [r2, #0]
        CLR_BIT(MRCC_BDCR_R, (MRCC_BDCR_RTCSEL_START_BIT + 1));
 800627c:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <MRTC_Init+0xf0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a28      	ldr	r2, [pc, #160]	@ (8006324 <MRTC_Init+0xf0>)
 8006282:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006286:	6013      	str	r3, [r2, #0]
				SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 8006288:	4b26      	ldr	r3, [pc, #152]	@ (8006324 <MRTC_Init+0xf0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a25      	ldr	r2, [pc, #148]	@ (8006324 <MRTC_Init+0xf0>)
 800628e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006292:	6013      	str	r3, [r2, #0]
        #error "RTC Clock Source is not specified!!"
    #endif /*MRTC_CLOCK_SOURCE*/

    //Enter Configuration mode
    //CLR_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006294:	bf00      	nop
 8006296:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <MRTC_Init+0xf4>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f9      	beq.n	8006296 <MRTC_Init+0x62>
    SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80062a2:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <MRTC_Init+0xf4>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <MRTC_Init+0xf4>)
 80062a8:	f043 0310 	orr.w	r3, r3, #16
 80062ac:	6053      	str	r3, [r2, #4]
    //RTC -> PRLH = 0;
    RTC -> PRLL = 0x7FFF;
 80062ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <MRTC_Init+0xf4>)
 80062b0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80062b4:	60da      	str	r2, [r3, #12]
    CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80062b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006328 <MRTC_Init+0xf4>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <MRTC_Init+0xf4>)
 80062bc:	f023 0310 	bic.w	r3, r3, #16
 80062c0:	6053      	str	r3, [r2, #4]
    //SET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 80062c2:	bf00      	nop
 80062c4:	4b18      	ldr	r3, [pc, #96]	@ (8006328 <MRTC_Init+0xf4>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f9      	beq.n	80062c4 <MRTC_Init+0x90>

    #if MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_ENABLED
        SET_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
    #elif MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_DISABLED
        CLR_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
 80062d0:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <MRTC_Init+0xf4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <MRTC_Init+0xf4>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6013      	str	r3, [r2, #0]
        #error "RTC Second Interrupt Not Specified"
    #endif /*MRTC_SECOND_INTERRUPT_STATUS*/


    //Check for synchronization of RTC Registers
    CLR_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT);
 80062dc:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <MRTC_Init+0xf4>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a11      	ldr	r2, [pc, #68]	@ (8006328 <MRTC_Init+0xf4>)
 80062e2:	f023 0308 	bic.w	r3, r3, #8
 80062e6:	6053      	str	r3, [r2, #4]
    while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT)));
 80062e8:	bf00      	nop
 80062ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006328 <MRTC_Init+0xf4>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f9      	beq.n	80062ea <MRTC_Init+0xb6>

    //Enable RTC Clock
    SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <MRTC_Init+0xf0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <MRTC_Init+0xf0>)
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006300:	6013      	str	r3, [r2, #0]
    MRTC_CalculateSeconds(&glbl_SReferenceDate, &glbl_SReferenceTime, &glbl_uint32ReferenceSeconds);
 8006302:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <MRTC_Init+0xf8>)
 8006304:	490a      	ldr	r1, [pc, #40]	@ (8006330 <MRTC_Init+0xfc>)
 8006306:	480b      	ldr	r0, [pc, #44]	@ (8006334 <MRTC_Init+0x100>)
 8006308:	f7ff feb2 	bl	8006070 <MRTC_CalculateSeconds>

    Loc_uint8FuncStatus = E_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8006310:	79fb      	ldrb	r3, [r7, #7]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	4002101c 	.word	0x4002101c
 8006320:	40007000 	.word	0x40007000
 8006324:	40021020 	.word	0x40021020
 8006328:	40002800 	.word	0x40002800
 800632c:	20000834 	.word	0x20000834
 8006330:	200003c8 	.word	0x200003c8
 8006334:	200003c4 	.word	0x200003c4

08006338 <MRTC_SetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date and time are successfully set
 * @retval E_NOT_OK: Date and time are not set
 */
Std_ReturnType MRTC_SetDateAndTime         (Sdate_t* P_SDateToBeSet, Stime_t* P_STimeToBeSet)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006342:	2301      	movs	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeSet != NULL_PTR) && (P_STimeToBeSet != NULL_PTR))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d03d      	beq.n	80063c8 <MRTC_SetDateAndTime+0x90>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d03a      	beq.n	80063c8 <MRTC_SetDateAndTime+0x90>
    {
        uint32 Loc_uint32SecondsToBeSet = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateSeconds(P_SDateToBeSet, P_STimeToBeSet, &Loc_uint32SecondsToBeSet);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	461a      	mov	r2, r3
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fe86 	bl	8006070 <MRTC_CalculateSeconds>
 8006364:	4603      	mov	r3, r0
 8006366:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d129      	bne.n	80063c2 <MRTC_SetDateAndTime+0x8a>
        {
            Loc_uint32SecondsToBeSet -= glbl_uint32ReferenceSeconds;
 800636e:	4b1a      	ldr	r3, [pc, #104]	@ (80063d8 <MRTC_SetDateAndTime+0xa0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	60bb      	str	r3, [r7, #8]

            //Enter Configuration mode
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006378:	bf00      	nop
 800637a:	4b18      	ldr	r3, [pc, #96]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f9      	beq.n	800637a <MRTC_SetDateAndTime+0x42>
            SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006386:	4b15      	ldr	r3, [pc, #84]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4a14      	ldr	r2, [pc, #80]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 800638c:	f043 0310 	orr.w	r3, r3, #16
 8006390:	6053      	str	r3, [r2, #4]
            RTC -> CNTH = (Loc_uint32SecondsToBeSet >> 16);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	6193      	str	r3, [r2, #24]
            RTC -> CNTL = (Loc_uint32SecondsToBeSet & 0xFFFF);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a0f      	ldr	r2, [pc, #60]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 800639e:	b29b      	uxth	r3, r3
 80063a0:	61d3      	str	r3, [r2, #28]
            CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 80063a2:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4a0d      	ldr	r2, [pc, #52]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	6053      	str	r3, [r2, #4]
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 80063ae:	bf00      	nop
 80063b0:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <MRTC_SetDateAndTime+0xa4>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f9      	beq.n	80063b0 <MRTC_SetDateAndTime+0x78>

            Loc_uint8FuncStatus = E_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
    {
 80063c0:	e004      	b.n	80063cc <MRTC_SetDateAndTime+0x94>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
    {
 80063c6:	e001      	b.n	80063cc <MRTC_SetDateAndTime+0x94>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000834 	.word	0x20000834
 80063dc:	40002800 	.word	0x40002800

080063e0 <MRTC_GetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date & Time is successfully read
 * @retval E_NOT_OK: Date & Time is not read
 */
Std_ReturnType MRTC_GetDateAndTime  (Sdate_t* P_SDateToBeRead, Stime_t* P_STimeToBeRead)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeRead != NULL_PTR) && (P_STimeToBeRead != NULL_PTR))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <MRTC_GetDateAndTime+0x4c>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d018      	beq.n	800642c <MRTC_GetDateAndTime+0x4c>
    {
        uint32 Loc_uint32SecondsInReg = ((RTC -> CNTH) << 16) | (RTC -> CNTL);
 80063fa:	4b10      	ldr	r3, [pc, #64]	@ (800643c <MRTC_GetDateAndTime+0x5c>)
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	041a      	lsls	r2, r3, #16
 8006400:	4b0e      	ldr	r3, [pc, #56]	@ (800643c <MRTC_GetDateAndTime+0x5c>)
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateDateTime(&Loc_uint32SecondsInReg, P_SDateToBeRead, P_STimeToBeRead);
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff fe87 	bl	8006124 <MRTC_CalculateDateTime>
 8006416:	4603      	mov	r3, r0
 8006418:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <MRTC_GetDateAndTime+0x46>
        {

            Loc_uint8FuncStatus = E_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]
    {
 8006424:	e004      	b.n	8006430 <MRTC_GetDateAndTime+0x50>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
    {
 800642a:	e001      	b.n	8006430 <MRTC_GetDateAndTime+0x50>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40002800 	.word	0x40002800

08006440 <RTC_IRQHandler>:
    }

    return Loc_uint8FuncStatus;
}
void RTC_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc != NULL_PTR)
 8006444:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <RTC_IRQHandler+0x24>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <RTC_IRQHandler+0x1e>
    {
        glbl_PCallbackFunc();
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <RTC_IRQHandler+0x24>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4798      	blx	r3
				CLR_BIT(RTC->CRL, MRTC_CRL_SECF_BIT);
 8006452:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <RTC_IRQHandler+0x28>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <RTC_IRQHandler+0x28>)
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6053      	str	r3, [r2, #4]
    }
    else
    {
        /*Do nothing*/
    }
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000838 	.word	0x20000838
 8006468:	40002800 	.word	0x40002800

0800646c <MSCB_SetPriorityGrouping>:
 * @return Std_ReturnType
 * @retval E_OK: Priority Grouping has been set
 * @retval E_NOT_OK: Priority Grouping has not been set   
 */
Std_ReturnType MSCB_SetPriorityGrouping(uint32 Copy_uint32PriorityGrouping)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint32PriorityGrouping)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <MSCB_SetPriorityGrouping+0x6c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01b      	beq.n	80064b8 <MSCB_SetPriorityGrouping+0x4c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a15      	ldr	r2, [pc, #84]	@ (80064d8 <MSCB_SetPriorityGrouping+0x6c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d81d      	bhi.n	80064c4 <MSCB_SetPriorityGrouping+0x58>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a14      	ldr	r2, [pc, #80]	@ (80064dc <MSCB_SetPriorityGrouping+0x70>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <MSCB_SetPriorityGrouping+0x4c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a12      	ldr	r2, [pc, #72]	@ (80064dc <MSCB_SetPriorityGrouping+0x70>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d815      	bhi.n	80064c4 <MSCB_SetPriorityGrouping+0x58>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a11      	ldr	r2, [pc, #68]	@ (80064e0 <MSCB_SetPriorityGrouping+0x74>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <MSCB_SetPriorityGrouping+0x4c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a0f      	ldr	r2, [pc, #60]	@ (80064e0 <MSCB_SetPriorityGrouping+0x74>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d80d      	bhi.n	80064c4 <MSCB_SetPriorityGrouping+0x58>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0e      	ldr	r2, [pc, #56]	@ (80064e4 <MSCB_SetPriorityGrouping+0x78>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <MSCB_SetPriorityGrouping+0x4c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a0d      	ldr	r2, [pc, #52]	@ (80064e8 <MSCB_SetPriorityGrouping+0x7c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d105      	bne.n	80064c4 <MSCB_SetPriorityGrouping+0x58>
        case MSCB_PRIORITY_GROUP_1_SUB_3:
        case MSCB_PRIORITY_GROUP_2_SUB_2:
        case MSCB_PRIORITY_GROUP_3_SUB_1:
        case MSCB_PRIORITY_GROUP_4_SUB_0:
        {
            SCB -> AIRCR = Copy_uint32PriorityGrouping;
 80064b8:	4a0c      	ldr	r2, [pc, #48]	@ (80064ec <MSCB_SetPriorityGrouping+0x80>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60d3      	str	r3, [r2, #12]
            Loc_uint8FuncStatus = E_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
            break;
 80064c2:	e002      	b.n	80064ca <MSCB_SetPriorityGrouping+0x5e>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
            break;
 80064c8:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	05fa0700 	.word	0x05fa0700
 80064dc:	05fa0600 	.word	0x05fa0600
 80064e0:	05fa0500 	.word	0x05fa0500
 80064e4:	05fa0300 	.word	0x05fa0300
 80064e8:	05fa0400 	.word	0x05fa0400
 80064ec:	e000ed00 	.word	0xe000ed00

080064f0 <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				-Support for SPI Full Duplex Master/Slave only  & NSS HW only for slave
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	uint16 tmpreg_CR1 = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	81fb      	strh	r3, [r7, #14]
	uint16 tmpreg_CR2 = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a38      	ldr	r2, [pc, #224]	@ (80065e8 <MCAL_SPI_Init+0xf8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <MCAL_SPI_Init+0x3e>
	{
		Global_SPI_Config1 = *SPI_Config ;
 800650a:	4a38      	ldr	r2, [pc, #224]	@ (80065ec <MCAL_SPI_Init+0xfc>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	4614      	mov	r4, r2
 8006510:	461d      	mov	r5, r3
 8006512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006516:	e895 0003 	ldmia.w	r5, {r0, r1}
 800651a:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <MCAL_SPI_Init+0x100>)
 8006520:	4a32      	ldr	r2, [pc, #200]	@ (80065ec <MCAL_SPI_Init+0xfc>)
 8006522:	601a      	str	r2, [r3, #0]
		MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_SPI1_EN);
 8006524:	210c      	movs	r1, #12
 8006526:	2003      	movs	r0, #3
 8006528:	f7ff fd58 	bl	8005fdc <MRCC_EnablePeripheralClock>
 800652c:	e014      	b.n	8006558 <MCAL_SPI_Init+0x68>

	}else if (SPIx == SPI2)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a30      	ldr	r2, [pc, #192]	@ (80065f4 <MCAL_SPI_Init+0x104>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d110      	bne.n	8006558 <MCAL_SPI_Init+0x68>
	{
		Global_SPI_Config2 = *SPI_Config ;
 8006536:	4a30      	ldr	r2, [pc, #192]	@ (80065f8 <MCAL_SPI_Init+0x108>)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4614      	mov	r4, r2
 800653c:	461d      	mov	r5, r3
 800653e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006542:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006546:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 800654a:	4b29      	ldr	r3, [pc, #164]	@ (80065f0 <MCAL_SPI_Init+0x100>)
 800654c:	4a2a      	ldr	r2, [pc, #168]	@ (80065f8 <MCAL_SPI_Init+0x108>)
 800654e:	605a      	str	r2, [r3, #4]
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 8006550:	210e      	movs	r1, #14
 8006552:	2002      	movs	r0, #2
 8006554:	f7ff fd42 	bl	8005fdc <MRCC_EnablePeripheralClock>

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 8006558:	2340      	movs	r3, #64	@ 0x40
 800655a:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	4313      	orrs	r3, r2
 8006564:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885a      	ldrh	r2, [r3, #2]
 800656a:	89fb      	ldrh	r3, [r7, #14]
 800656c:	4313      	orrs	r3, r2
 800656e:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	889a      	ldrh	r2, [r3, #4]
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	4313      	orrs	r3, r2
 8006578:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	88da      	ldrh	r2, [r3, #6]
 800657e:	89fb      	ldrh	r3, [r7, #14]
 8006580:	4313      	orrs	r3, r2
 8006582:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	891a      	ldrh	r2, [r3, #8]
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	4313      	orrs	r3, r2
 800658c:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	895a      	ldrh	r2, [r3, #10]
 8006592:	89fb      	ldrh	r3, [r7, #14]
 8006594:	4313      	orrs	r3, r2
 8006596:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	899b      	ldrh	r3, [r3, #12]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d105      	bne.n	80065ac <MCAL_SPI_Init+0xbc>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	899a      	ldrh	r2, [r3, #12]
 80065a4:	89bb      	ldrh	r3, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	81bb      	strh	r3, [r7, #12]
 80065aa:	e004      	b.n	80065b6 <MCAL_SPI_Init+0xc6>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	899a      	ldrh	r2, [r3, #12]
 80065b0:	89fb      	ldrh	r3, [r7, #14]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	89da      	ldrh	r2, [r3, #14]
 80065ba:	89fb      	ldrh	r3, [r7, #14]
 80065bc:	4313      	orrs	r3, r2
 80065be:	81fb      	strh	r3, [r7, #14]
//
//	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 80065c0:	89fa      	ldrh	r2, [r7, #14]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 80065c6:	89ba      	ldrh	r2, [r7, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	605a      	str	r2, [r3, #4]
	  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bdb0      	pop	{r4, r5, r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40013000 	.word	0x40013000
 80065ec:	20000844 	.word	0x20000844
 80065f0:	2000083c 	.word	0x2000083c
 80065f4:	40003800 	.word	0x40003800
 80065f8:	2000085c 	.word	0x2000085c

080065fc <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16 *pTxBuffer,enum PollingMechism PollingEn )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0 ;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a17      	ldr	r2, [pc, #92]	@ (8006670 <MCAL_SPI_SendData+0x74>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d102      	bne.n	800661c <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 8006616:	2300      	movs	r3, #0
 8006618:	75fb      	strb	r3, [r7, #23]
 800661a:	e005      	b.n	8006628 <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <MCAL_SPI_SendData+0x78>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_Direction_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_Direction_1LINE_transmit_only) {
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	4a13      	ldr	r2, [pc, #76]	@ (8006678 <MCAL_SPI_SendData+0x7c>)
 800662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006630:	885b      	ldrh	r3, [r3, #2]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <MCAL_SPI_SendData+0x4a>
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	4a0f      	ldr	r2, [pc, #60]	@ (8006678 <MCAL_SPI_SendData+0x7c>)
 800663a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663e:	885b      	ldrh	r3, [r3, #2]
 8006640:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006644:	d10e      	bne.n	8006664 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE));
 800664c:	bf00      	nop
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f9      	beq.n	800664e <MCAL_SPI_SendData+0x52>


		SPIx->SPI_DR =  (*pTxBuffer ) ;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	60da      	str	r2, [r3, #12]
	else
	{
		//SPIx->SPI_DR =  (*pTxBuffer ) ;//todo
	}

}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40013000 	.word	0x40013000
 8006674:	40003800 	.word	0x40003800
 8006678:	2000083c 	.word	0x2000083c

0800667c <MCAL_SPI_GPIO_Set_Pins>:




void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	if (SPIx == SPI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a3a      	ldr	r2, [pc, #232]	@ (8006770 <MCAL_SPI_GPIO_Set_Pins+0xf4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d139      	bne.n	8006700 <MCAL_SPI_GPIO_Set_Pins+0x84>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 800668c:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d11a      	bne.n	80066cc <MCAL_SPI_GPIO_Set_Pins+0x50>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 8006696:	4b37      	ldr	r3, [pc, #220]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	899b      	ldrh	r3, [r3, #12]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d105      	bne.n	80066ac <MCAL_SPI_GPIO_Set_Pins+0x30>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066a0:	2209      	movs	r2, #9
 80066a2:	2104      	movs	r1, #4
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7fe fd1b 	bl	80050e0 <MGPIO_SetPinMode>
				break ;
 80066aa:	bf00      	nop
			}


			//		PA5 : SPI1_SCK
			//			Master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066ac:	2209      	movs	r2, #9
 80066ae:	2105      	movs	r1, #5
 80066b0:	2000      	movs	r0, #0
 80066b2:	f7fe fd15 	bl	80050e0 <MGPIO_SetPinMode>


			//		PA6 : SPI1_MISO  (supported only full duplex)
			//			Full duplex / master Input floating

			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_INPUT_FLOATING_MODE);
 80066b6:	2204      	movs	r2, #4
 80066b8:	2106      	movs	r1, #6
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7fe fd10 	bl	80050e0 <MGPIO_SetPinMode>
			//todo to suport half duplex and simplex


			//		PA7 : SPI1_MOSI
			//			Full duplex / master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066c0:	2209      	movs	r2, #9
 80066c2:	2107      	movs	r1, #7
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7fe fd0b 	bl	80050e0 <MGPIO_SetPinMode>
		}


	}

}
 80066ca:	e04c      	b.n	8006766 <MCAL_SPI_GPIO_Set_Pins+0xea>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80066cc:	4b29      	ldr	r3, [pc, #164]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	899b      	ldrh	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <MCAL_SPI_GPIO_Set_Pins+0x64>
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_INPUT_FLOATING_MODE);
 80066d6:	2204      	movs	r2, #4
 80066d8:	2104      	movs	r1, #4
 80066da:	2000      	movs	r0, #0
 80066dc:	f7fe fd00 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_INPUT_FLOATING_MODE);
 80066e0:	2204      	movs	r2, #4
 80066e2:	2105      	movs	r1, #5
 80066e4:	2000      	movs	r0, #0
 80066e6:	f7fe fcfb 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066ea:	2209      	movs	r2, #9
 80066ec:	2106      	movs	r1, #6
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7fe fcf6 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_INPUT_FLOATING_MODE);
 80066f4:	2204      	movs	r2, #4
 80066f6:	2107      	movs	r1, #7
 80066f8:	2000      	movs	r0, #0
 80066fa:	f7fe fcf1 	bl	80050e0 <MGPIO_SetPinMode>
}
 80066fe:	e032      	b.n	8006766 <MCAL_SPI_GPIO_Set_Pins+0xea>
	}else if (SPIx == SPI2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a1d      	ldr	r2, [pc, #116]	@ (8006778 <MCAL_SPI_GPIO_Set_Pins+0xfc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d12e      	bne.n	8006766 <MCAL_SPI_GPIO_Set_Pins+0xea>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d115      	bne.n	800673e <MCAL_SPI_GPIO_Set_Pins+0xc2>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 8006712:	4b18      	ldr	r3, [pc, #96]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	899b      	ldrh	r3, [r3, #12]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d105      	bne.n	8006728 <MCAL_SPI_GPIO_Set_Pins+0xac>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800671c:	2209      	movs	r2, #9
 800671e:	210c      	movs	r1, #12
 8006720:	2001      	movs	r0, #1
 8006722:	f7fe fcdd 	bl	80050e0 <MGPIO_SetPinMode>
				break ;
 8006726:	bf00      	nop
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006728:	2209      	movs	r2, #9
 800672a:	210d      	movs	r1, #13
 800672c:	2001      	movs	r0, #1
 800672e:	f7fe fcd7 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006732:	2209      	movs	r2, #9
 8006734:	210f      	movs	r1, #15
 8006736:	2001      	movs	r0, #1
 8006738:	f7fe fcd2 	bl	80050e0 <MGPIO_SetPinMode>
}
 800673c:	e013      	b.n	8006766 <MCAL_SPI_GPIO_Set_Pins+0xea>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 800673e:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	899b      	ldrh	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <MCAL_SPI_GPIO_Set_Pins+0xd6>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_INPUT_FLOATING_MODE);
 8006748:	2204      	movs	r2, #4
 800674a:	210c      	movs	r1, #12
 800674c:	2001      	movs	r0, #1
 800674e:	f7fe fcc7 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_INPUT_FLOATING_MODE);
 8006752:	2204      	movs	r2, #4
 8006754:	210d      	movs	r1, #13
 8006756:	2001      	movs	r0, #1
 8006758:	f7fe fcc2 	bl	80050e0 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800675c:	2209      	movs	r2, #9
 800675e:	210f      	movs	r1, #15
 8006760:	2001      	movs	r0, #1
 8006762:	f7fe fcbd 	bl	80050e0 <MGPIO_SetPinMode>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40013000 	.word	0x40013000
 8006774:	2000083c 	.word	0x2000083c
 8006778:	40003800 	.word	0x40003800

0800677c <STK_uint8CalculateReloadValue>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValue(uint32 Copy_uint32msTime, uint32* P_uint32ReloadValue)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <STK_uint8CalculateReloadValue+0x3e>
    {
        uint32 Loc_uint32ReloadValue = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32msTime * (STK_AHB_CLOCK_FREQUENCY / 8000)));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = ((Copy_uint32msTime* STK_AHB_CLOCK_FREQUENCY) / 1000);
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a6:	d205      	bcs.n	80067b4 <STK_uint8CalculateReloadValue+0x38>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
 80067b2:	e004      	b.n	80067be <STK_uint8CalculateReloadValue+0x42>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	e001      	b.n	80067be <STK_uint8CalculateReloadValue+0x42>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr

080067ca <STK_uint8CalculateReloadValueUs>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValueUs(uint32 Copy_uint32usTime, uint32* P_uint32ReloadValue)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <STK_uint8CalculateReloadValueUs+0x36>
    {
        uint32 Loc_uint32ReloadValue = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32usTime * (STK_AHB_CLOCK_FREQUENCY / 8000000)));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = (Copy_uint32usTime * (STK_AHB_CLOCK_FREQUENCY / 1000000));
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067ec:	d205      	bcs.n	80067fa <STK_uint8CalculateReloadValueUs+0x30>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e004      	b.n	8006804 <STK_uint8CalculateReloadValueUs+0x3a>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
 80067fe:	e001      	b.n	8006804 <STK_uint8CalculateReloadValueUs+0x3a>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <MSTK_uint8Init>:
 * @return Std_ReturnType
 * @retval E_OK: SysTick Timer is Successfully initialized
 * @retval E_NOT_OK: SysTick Timer is not initialized 
 */
Std_ReturnType MSTK_uint8Init(void)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006816:	2301      	movs	r3, #1
 8006818:	71fb      	strb	r3, [r7, #7]
    /*Initialize value of LOAD and VAL register "To make sure that there is no value in it"*/
    STK -> LOAD = 0x000000;
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <MSTK_uint8Init+0x40>)
 800681c:	2200      	movs	r2, #0
 800681e:	605a      	str	r2, [r3, #4]
    STK -> VAL = 0x000000;
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <MSTK_uint8Init+0x40>)
 8006822:	2200      	movs	r2, #0
 8006824:	609a      	str	r2, [r3, #8]

    #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
        CLR_BIT((STK -> CTRL), STK_CTRL_CLKSOURCE);
 8006826:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <MSTK_uint8Init+0x40>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a09      	ldr	r2, [pc, #36]	@ (8006850 <MSTK_uint8Init+0x40>)
 800682c:	f023 0304 	bic.w	r3, r3, #4
 8006830:	6013      	str	r3, [r2, #0]
    #endif /*STK_CLOCK_SOURCE*/

    #if STK_INTERRUPT_STATUS == STK_INTERRUPT_ENABLED
        SET_BIT((STK -> CTRL), STK_CTRL_TICKINT);
    #elif STK_INTERRUPT_STATUS == STK_INTERRUPT_DISABLED
        CLR_BIT((STK -> CTRL), STK_CTRL_TICKINT);
 8006832:	4b07      	ldr	r3, [pc, #28]	@ (8006850 <MSTK_uint8Init+0x40>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a06      	ldr	r2, [pc, #24]	@ (8006850 <MSTK_uint8Init+0x40>)
 8006838:	f023 0302 	bic.w	r3, r3, #2
 800683c:	6013      	str	r3, [r2, #0]
    #else
        #error "Systick Timer Interrupt Status is not Identified"
    #endif /*STK_INTERRUPT_STATUS*/

    Loc_uint8FuncStatus = E_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 8006842:	79fb      	ldrb	r3, [r7, #7]
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e010 	.word	0xe000e010

08006854 <MSTK_uint8Delay>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8Delay(uint32 Copy_uint32msTime)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValue(Copy_uint32msTime, &Loc_uint32ReloadValue);
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff ff86 	bl	800677c <STK_uint8CalculateReloadValue>
 8006870:	4603      	mov	r3, r0
 8006872:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d127      	bne.n	80068ca <MSTK_uint8Delay+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 800687a:	4b17      	ldr	r3, [pc, #92]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 8006886:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 8006888:	2200      	movs	r2, #0
 800688a:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 800688c:	4a12      	ldr	r2, [pc, #72]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006892:	4b11      	ldr	r3, [pc, #68]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a10      	ldr	r2, [pc, #64]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 800689e:	bf00      	nop
 80068a0:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f9      	beq.n	80068a0 <MSTK_uint8Delay+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 80068b8:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 80068be:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <MSTK_uint8Delay+0x84>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	e001      	b.n	80068ce <MSTK_uint8Delay+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000e010 	.word	0xe000e010

080068dc <MSTK_uint8DelayUs>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8DelayUs(uint32 Copy_uint32usTime)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValueUs(Copy_uint32usTime, &Loc_uint32ReloadValue);
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff ff69 	bl	80067ca <STK_uint8CalculateReloadValueUs>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d127      	bne.n	8006952 <MSTK_uint8DelayUs+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006902:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 800690e:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 8006914:	4a12      	ldr	r2, [pc, #72]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 800691a:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a10      	ldr	r2, [pc, #64]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 8006926:	bf00      	nop
 8006928:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f9      	beq.n	8006928 <MSTK_uint8DelayUs+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a09      	ldr	r2, [pc, #36]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 8006940:	4b07      	ldr	r3, [pc, #28]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006942:	2200      	movs	r2, #0
 8006944:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 8006946:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <MSTK_uint8DelayUs+0x84>)
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	e001      	b.n	8006956 <MSTK_uint8DelayUs+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	e000e010 	.word	0xe000e010

08006964 <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 8006968:	4b04      	ldr	r3, [pc, #16]	@ (800697c <SysTick_Handler+0x18>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <SysTick_Handler+0x18>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000874 	.word	0x20000874

08006980 <MUART_Init>:
 * @return Std_ReturnType
 * @retval E_OK:        UART Peripheral is successfully initialized
 * @retval E_NOT_OK:    UART Peripheral is not initialized
 */
Std_ReturnType MUART_Init(MUART_Select_t Copy_UARTChoice)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800698a:	2301      	movs	r3, #1
 800698c:	74fb      	strb	r3, [r7, #19]
    
    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_M_BIT);
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	4a61      	ldr	r2, [pc, #388]	@ (8006b18 <MUART_Init+0x198>)
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	495f      	ldr	r1, [pc, #380]	@ (8006b18 <MUART_Init+0x198>)
 800699c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069a4:	60da      	str	r2, [r3, #12]
    #else
        #error "UART No of Data Bits is not Specified Correctly"
    #endif /*MUART_NO_OF_DATA_BITS*/

    #if MUART_PARITY_CHOICE == MUART_NO_PARITY
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PCE_BIT);
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006b18 <MUART_Init+0x198>)
 80069aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	4959      	ldr	r1, [pc, #356]	@ (8006b18 <MUART_Init+0x198>)
 80069b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069bc:	60da      	str	r2, [r3, #12]
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PS_BIT);
    #else
        #error "UART Parity Control not Specified"
    #endif

    ((UART[Copy_UARTChoice]) -> CR2) &= ~(((uint32) 0b11) << MUART_CR2_STOP_START_BIT);
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	4a55      	ldr	r2, [pc, #340]	@ (8006b18 <MUART_Init+0x198>)
 80069c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	4953      	ldr	r1, [pc, #332]	@ (8006b18 <MUART_Init+0x198>)
 80069cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069d0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80069d4:	611a      	str	r2, [r3, #16]
    
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
        ((UART[Copy_UARTChoice]) -> CR2) |= (((uint32) MUART_NO_OF_STOP_BITS) << MUART_CR2_STOP_START_BIT);
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	4a4f      	ldr	r2, [pc, #316]	@ (8006b18 <MUART_Init+0x198>)
 80069da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	494d      	ldr	r1, [pc, #308]	@ (8006b18 <MUART_Init+0x198>)
 80069e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069e6:	6912      	ldr	r2, [r2, #16]
 80069e8:	611a      	str	r2, [r3, #16]
    #endif /*MUART_NO_OF_STOP_BITS*/

    #if MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
    #elif MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_DISABLED
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006b18 <MUART_Init+0x198>)
 80069ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	4948      	ldr	r1, [pc, #288]	@ (8006b18 <MUART_Init+0x198>)
 80069f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a00:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Tx Complete Interrupt Status not Specified"
    #endif /*MUART_TX_COMPLETE_INT_STATUS*/

    #if MUART_RX_COMPLETE_INT_STATUS == MUART_RX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RXNEIE_BIT);
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4a44      	ldr	r2, [pc, #272]	@ (8006b18 <MUART_Init+0x198>)
 8006a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	4942      	ldr	r1, [pc, #264]	@ (8006b18 <MUART_Init+0x198>)
 8006a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a14:	f042 0220 	orr.w	r2, r2, #32
 8006a18:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Rx Complete Interrupt Status not Specified"
    #endif /*MUART_RX_COMPLETE_INT_STATUS*/
    
    /********************Calculate Baud Rate**************************/
    float32 Loc_float32UARTDIV = (float32)MUART_CLK_FREQ / (16 * MUART_BAUD_RATE);
 8006a1a:	4b40      	ldr	r3, [pc, #256]	@ (8006b1c <MUART_Init+0x19c>)
 8006a1c:	60fb      	str	r3, [r7, #12]

    uint16 Loc_uint16Mantissa = (uint16)Loc_float32UARTDIV;
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7fa fb8e 	bl	8001140 <__aeabi_f2uiz>
 8006a24:	4603      	mov	r3, r0
 8006a26:	82fb      	strh	r3, [r7, #22]
    uint16 Loc_uint16Fraction = (uint16)(((Loc_float32UARTDIV - Loc_uint16Mantissa) * 16) + 0.5);
 8006a28:	8afb      	ldrh	r3, [r7, #22]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fa f948 	bl	8000cc0 <__aeabi_i2f>
 8006a30:	4603      	mov	r3, r0
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7fa f88d 	bl	8000b54 <__aeabi_fsub>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fa f991 	bl	8000d68 <__aeabi_fmul>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7f9 fd07 	bl	800045c <__aeabi_f2d>
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <MUART_Init+0x1a0>)
 8006a54:	f7f9 fba4 	bl	80001a0 <__adddf3>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	f7fa f804 	bl	8000a6c <__aeabi_d2uiz>
 8006a64:	4603      	mov	r3, r0
 8006a66:	82bb      	strh	r3, [r7, #20]

    if(Loc_uint16Fraction >= 16)
 8006a68:	8abb      	ldrh	r3, [r7, #20]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	d905      	bls.n	8006a7a <MUART_Init+0xfa>
    {
        Loc_uint16Fraction -= 16;
 8006a6e:	8abb      	ldrh	r3, [r7, #20]
 8006a70:	3b10      	subs	r3, #16
 8006a72:	82bb      	strh	r3, [r7, #20]
        Loc_uint16Mantissa += 1;
 8006a74:	8afb      	ldrh	r3, [r7, #22]
 8006a76:	3301      	adds	r3, #1
 8006a78:	82fb      	strh	r3, [r7, #22]
    }
    ((UART[Copy_UARTChoice]) -> BRR) = (Loc_uint16Fraction << MUART_BRR_FRACTION_START_BIT) | (Loc_uint16Mantissa << MUART_BRR_MANTISSA_START_BIT);
 8006a7a:	8aba      	ldrh	r2, [r7, #20]
 8006a7c:	8afb      	ldrh	r3, [r7, #22]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	ea42 0103 	orr.w	r1, r2, r3
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	4a24      	ldr	r2, [pc, #144]	@ (8006b18 <MUART_Init+0x198>)
 8006a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]

    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TE_BIT);
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	4a21      	ldr	r2, [pc, #132]	@ (8006b18 <MUART_Init+0x198>)
 8006a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	491e      	ldr	r1, [pc, #120]	@ (8006b18 <MUART_Init+0x198>)
 8006a9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006aa2:	f042 0208 	orr.w	r2, r2, #8
 8006aa6:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RE_BIT);
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006b18 <MUART_Init+0x198>)
 8006aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	4918      	ldr	r1, [pc, #96]	@ (8006b18 <MUART_Init+0x198>)
 8006ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006aba:	f042 0204 	orr.w	r2, r2, #4
 8006abe:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_UE_BIT);
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <MUART_Init+0x198>)
 8006ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	4912      	ldr	r1, [pc, #72]	@ (8006b18 <MUART_Init+0x198>)
 8006ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ad2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ad6:	60da      	str	r2, [r3, #12]
		
	CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	4a0f      	ldr	r2, [pc, #60]	@ (8006b18 <MUART_Init+0x198>)
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	490c      	ldr	r1, [pc, #48]	@ (8006b18 <MUART_Init+0x198>)
 8006ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aee:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	4a09      	ldr	r2, [pc, #36]	@ (8006b18 <MUART_Init+0x198>)
 8006af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	4906      	ldr	r1, [pc, #24]	@ (8006b18 <MUART_Init+0x198>)
 8006afe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b02:	f022 0220 	bic.w	r2, r2, #32
 8006b06:	601a      	str	r2, [r3, #0]
    Loc_uint8FuncStatus = E_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	74fb      	strb	r3, [r7, #19]
    return Loc_uint8FuncStatus;
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200003cc 	.word	0x200003cc
 8006b1c:	408ae38e 	.word	0x408ae38e
 8006b20:	3fe00000 	.word	0x3fe00000

08006b24 <MUART_TxChar>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully sent
 * @retval E_NOT_OK:    Character not sent 
 */
Std_ReturnType MUART_TxChar(MUART_Select_t Copy_UARTChoice, uint16 Copy_uint16TxChar)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	71fb      	strb	r3, [r7, #7]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
    /*Wait until Tx Data Register is empty*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
 8006b38:	bf00      	nop
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	@ (8006b98 <MUART_TxChar+0x74>)
 8006b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f6      	beq.n	8006b3a <MUART_TxChar+0x16>

    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        (UART[Copy_UARTChoice] -> DR) = Copy_uint16TxChar & ((uint16)(0x00FF));
 8006b4c:	88b9      	ldrh	r1, [r7, #4]
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	4a11      	ldr	r2, [pc, #68]	@ (8006b98 <MUART_TxChar+0x74>)
 8006b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b56:	b2ca      	uxtb	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
    #else
        #error "UART Number of Data Bits not Specified"
    #endif /*MUART_NO_OF_DATA_BITS*/
    
    /*Wait while transmit is complete*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TC_BIT)));
 8006b5a:	bf00      	nop
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b98 <MUART_TxChar+0x74>)
 8006b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f6      	beq.n	8006b5c <MUART_TxChar+0x38>
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	4a09      	ldr	r2, [pc, #36]	@ (8006b98 <MUART_TxChar+0x74>)
 8006b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	4907      	ldr	r1, [pc, #28]	@ (8006b98 <MUART_TxChar+0x74>)
 8006b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b84:	601a      	str	r2, [r3, #0]

    Loc_uint8FuncStatus = E_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	200003cc 	.word	0x200003cc

08006b9c <MUART_RxCharAsynchronous>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully received
 * @retval E_NOT_OK:    Character not received 
 */
Std_ReturnType MUART_RxCharAsynchronous(MUART_Select_t Copy_UARTChoice, uint16* P_uint16RxChar)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
    if(P_uint16RxChar != NULL_PTR)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d018      	beq.n	8006be4 <MUART_RxCharAsynchronous+0x48>
    {
        #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
            #if MUART_PARITY_CHOICE == MUART_NO_PARITY
                *P_uint16RxChar = (((UART[Copy_UARTChoice]) -> DR) & (uint16)(0xFF));
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8006bf4 <MUART_RxCharAsynchronous+0x58>)
 8006bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	801a      	strh	r2, [r3, #0]
                #error "UART Parity Choice is not specified"
            #endif /*MUART_PARITY_CHOICE*/
        #else
            #error "UART Number of Data Bits not Specified"
        #endif /*MUART_NO_OF_DATA_BITS*/
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf4 <MUART_RxCharAsynchronous+0x58>)
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	4908      	ldr	r1, [pc, #32]	@ (8006bf4 <MUART_RxCharAsynchronous+0x58>)
 8006bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006bd8:	f022 0220 	bic.w	r2, r2, #32
 8006bdc:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e001      	b.n	8006be8 <MUART_RxCharAsynchronous+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr
 8006bf4:	200003cc 	.word	0x200003cc

08006bf8 <MUART_TxString>:
 * @return Std_ReturnType
 * @retval E_OK:        String successfully received
 * @retval E_NOT_OK:    String not received 
 */
Std_ReturnType MUART_TxString(MUART_Select_t Copy_UARTChoice, uint8* P_uint8TxString)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
    if(P_uint8TxString != NULL_PTR)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <MUART_TxString+0x48>
    {
        uint8 Loc_uint8Index = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006c12:	e00c      	b.n	8006c2e <MUART_TxString+0x36>
        {
            MUART_TxChar(Copy_UARTChoice, P_uint8TxString[Loc_uint8Index]);
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ff7e 	bl	8006b24 <MUART_TxChar>
            Loc_uint8Index++;
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4413      	add	r3, r2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1ec      	bne.n	8006c14 <MUART_TxString+0x1c>
        }
        Loc_uint8FuncStatus = E_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
 8006c3e:	e001      	b.n	8006c44 <MUART_TxString+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <MUART_SetRxCompleteCallback>:
 * @return Std_ReturnType
 * @retval E_OK:        Callback Function successfully set
 * @retval E_NOT_OK:    Callback function not set  
 */
Std_ReturnType MUART_SetRxCompleteCallback(MUART_Select_t Copy_UARTChoice, ptr_to_Callback P_RxCompleteCallbackFunc)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	6039      	str	r1, [r7, #0]
 8006c5a:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
    if(P_RxCompleteCallbackFunc != NULL_PTR)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <MUART_SetRxCompleteCallback+0x26>
    {
        Loc_uint8FuncStatus = E_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
        Glbl_PRxCompleteFunc[Copy_UARTChoice] = P_RxCompleteCallbackFunc;
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	4906      	ldr	r1, [pc, #24]	@ (8006c88 <MUART_SetRxCompleteCallback+0x38>)
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c74:	e001      	b.n	8006c7a <MUART_SetRxCompleteCallback+0x2a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000878 	.word	0x20000878

08006c8c <MUART_SendIntegerValue>:

Std_ReturnType MUART_SendIntegerValue(MUART_Select_t Copy_UARTChoice, uint32 Copy_uint32Value)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	@ 0x28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if(Copy_uint32Value == 0)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <MUART_SendIntegerValue+0x2c>
    {
        MUART_TxChar(Copy_UARTChoice, (Copy_uint32Value + 48));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3330      	adds	r3, #48	@ 0x30
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff ff37 	bl	8006b24 <MUART_TxChar>
 8006cb6:	e051      	b.n	8006d5c <MUART_SendIntegerValue+0xd0>
    }
    else
    {
        uint32 Loc_uint8TempValue = Copy_uint32Value;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8 Loc_uint8CharArray[20] = {0},Loc_uint8Count = 0, Loc_uint8Index = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	f107 0310 	add.w	r3, r7, #16
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while(Loc_uint8TempValue != 0)
 8006cda:	e01d      	b.n	8006d18 <MUART_SendIntegerValue+0x8c>
        {
            Loc_uint8CharArray[Loc_uint8Count] = ((Loc_uint8TempValue % 10) + 48);
 8006cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cde:	4b24      	ldr	r3, [pc, #144]	@ (8006d70 <MUART_SendIntegerValue+0xe4>)
 8006ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8006ce4:	08da      	lsrs	r2, r3, #3
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	1aca      	subs	r2, r1, r3
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cf6:	3230      	adds	r2, #48	@ 0x30
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	3328      	adds	r3, #40	@ 0x28
 8006cfc:	443b      	add	r3, r7
 8006cfe:	f803 2c1c 	strb.w	r2, [r3, #-28]
            Loc_uint8TempValue /= 10;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	4a1a      	ldr	r2, [pc, #104]	@ (8006d70 <MUART_SendIntegerValue+0xe4>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
            Loc_uint8Count++;
 8006d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d12:	3301      	adds	r3, #1
 8006d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        while(Loc_uint8TempValue != 0)
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1de      	bne.n	8006cdc <MUART_SendIntegerValue+0x50>
        }
        
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d24:	e014      	b.n	8006d50 <MUART_SendIntegerValue+0xc4>
        {
            MUART_TxChar(Copy_UARTChoice, Loc_uint8CharArray[Loc_uint8Count - Loc_uint8Index - 1]);
 8006d26:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006d2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	3328      	adds	r3, #40	@ 0x28
 8006d34:	443b      	add	r3, r7
 8006d36:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff feef 	bl	8006b24 <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006d46:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d50:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006d54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d3e4      	bcc.n	8006d26 <MUART_SendIntegerValue+0x9a>
        }
    }

    Loc_uint8FuncStatus = E_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    return Loc_uint8FuncStatus;
 8006d62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3728      	adds	r7, #40	@ 0x28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	cccccccd 	.word	0xcccccccd

08006d74 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[0] != NULL_PTR)
 8006d78:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <USART1_IRQHandler+0x38>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <USART1_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[0])();
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <USART1_IRQHandler+0x38>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
 8006d86:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <USART1_IRQHandler+0x3c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b08      	ldr	r3, [pc, #32]	@ (8006db0 <USART1_IRQHandler+0x3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d94:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
 8006d96:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <USART1_IRQHandler+0x3c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <USART1_IRQHandler+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0220 	bic.w	r2, r2, #32
 8006da4:	601a      	str	r2, [r3, #0]
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000878 	.word	0x20000878
 8006db0:	200003cc 	.word	0x200003cc

08006db4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
	if(Glbl_PRxCompleteFunc[1] != NULL_PTR)
 8006db8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <USART2_IRQHandler+0x38>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <USART2_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[1])();
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <USART2_IRQHandler+0x38>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <USART2_IRQHandler+0x3c>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b08      	ldr	r3, [pc, #32]	@ (8006df0 <USART2_IRQHandler+0x3c>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd4:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
 8006dd6:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <USART2_IRQHandler+0x3c>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <USART2_IRQHandler+0x3c>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f022 0220 	bic.w	r2, r2, #32
 8006de4:	601a      	str	r2, [r3, #0]

}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000878 	.word	0x20000878
 8006df0:	200003cc 	.word	0x200003cc

08006df4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[2] != NULL_PTR)
 8006df8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <USART3_IRQHandler+0x38>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USART3_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[2])();
 8006e00:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <USART3_IRQHandler+0x38>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <USART3_IRQHandler+0x3c>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <USART3_IRQHandler+0x3c>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e14:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <USART3_IRQHandler+0x3c>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <USART3_IRQHandler+0x3c>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f022 0220 	bic.w	r2, r2, #32
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	bf00      	nop
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000878 	.word	0x20000878
 8006e30:	200003cc 	.word	0x200003cc

08006e34 <main>:
#include "APP/Signal_Conditioning/signal_conditioning.h"
#include "APP/SpectroStatus/SpectroStatus_Interface.h"


int main(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0

	//HMOTOR_GoHome(HMOTOR_WL_SELECT);
	//HMOTOR_GoHome(HMOTOR_LAMP_SELECT);


	SPECTRO_InitSystem();
 8006e38:	f7fb fc44 	bl	80026c4 <SPECTRO_InitSystem>
	//			max_index = Loc_uint32Index;
	//		}
	//	}

	//HMOTOR_Step(HMOTOR_WL_SELECT, 500, HMOTORS_CCLKWISE_DIRECTION, 10);
	while(1)
 8006e3c:	bf00      	nop
 8006e3e:	e7fd      	b.n	8006e3c <main+0x8>

08006e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return 1;
 8006e44:	2301      	movs	r3, #1
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <_kill>:

int _kill(int pid, int sig)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e58:	f001 ffaa 	bl	8008db0 <__errno>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2216      	movs	r2, #22
 8006e60:	601a      	str	r2, [r3, #0]
  return -1;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <_exit>:

void _exit (int status)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e76:	f04f 31ff 	mov.w	r1, #4294967295
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ffe7 	bl	8006e4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <_exit+0x12>

08006e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e00a      	b.n	8006eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e96:	f3af 8000 	nop.w
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	60ba      	str	r2, [r7, #8]
 8006ea2:	b2ca      	uxtb	r2, r1
 8006ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	dbf0      	blt.n	8006e96 <_read+0x12>
  }

  return len;
 8006eb4:	687b      	ldr	r3, [r7, #4]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e009      	b.n	8006ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	60ba      	str	r2, [r7, #8]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	dbf1      	blt.n	8006ed0 <_write+0x12>
  }
  return len;
 8006eec:	687b      	ldr	r3, [r7, #4]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <_close>:

int _close(int file)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f1c:	605a      	str	r2, [r3, #4]
  return 0;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <_isatty>:

int _isatty(int file)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f32:	2301      	movs	r3, #1
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
	...

08006f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f60:	4a14      	ldr	r2, [pc, #80]	@ (8006fb4 <_sbrk+0x5c>)
 8006f62:	4b15      	ldr	r3, [pc, #84]	@ (8006fb8 <_sbrk+0x60>)
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f6c:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <_sbrk+0x64>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f74:	4b11      	ldr	r3, [pc, #68]	@ (8006fbc <_sbrk+0x64>)
 8006f76:	4a12      	ldr	r2, [pc, #72]	@ (8006fc0 <_sbrk+0x68>)
 8006f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f7a:	4b10      	ldr	r3, [pc, #64]	@ (8006fbc <_sbrk+0x64>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d207      	bcs.n	8006f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f88:	f001 ff12 	bl	8008db0 <__errno>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	220c      	movs	r2, #12
 8006f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f92:	f04f 33ff 	mov.w	r3, #4294967295
 8006f96:	e009      	b.n	8006fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f98:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <_sbrk+0x64>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <_sbrk+0x64>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	4a05      	ldr	r2, [pc, #20]	@ (8006fbc <_sbrk+0x64>)
 8006fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20005000 	.word	0x20005000
 8006fb8:	00000400 	.word	0x00000400
 8006fbc:	20000888 	.word	0x20000888
 8006fc0:	20000a00 	.word	0x20000a00

08006fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006fc4:	480d      	ldr	r0, [pc, #52]	@ (8006ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006fc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006fc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fcc:	480c      	ldr	r0, [pc, #48]	@ (8007000 <LoopForever+0x6>)
  ldr r1, =_edata
 8006fce:	490d      	ldr	r1, [pc, #52]	@ (8007004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8007008 <LoopForever+0xe>)
  movs r3, #0
 8006fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fd4:	e002      	b.n	8006fdc <LoopCopyDataInit>

08006fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fda:	3304      	adds	r3, #4

08006fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fe0:	d3f9      	bcc.n	8006fd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800700c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8007010 <LoopForever+0x16>)
  movs r3, #0
 8006fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fe8:	e001      	b.n	8006fee <LoopFillZerobss>

08006fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fec:	3204      	adds	r2, #4

08006fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ff0:	d3fb      	bcc.n	8006fea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006ff2:	f001 fee3 	bl	8008dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ff6:	f7ff ff1d 	bl	8006e34 <main>

08006ffa <LoopForever>:

LoopForever:
  b LoopForever
 8006ffa:	e7fe      	b.n	8006ffa <LoopForever>
  ldr   r0, =_estack
 8006ffc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8007000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007004:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 8007008:	0800cb88 	.word	0x0800cb88
  ldr r2, =_sbss
 800700c:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 8007010:	200009fc 	.word	0x200009fc

08007014 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007014:	e7fe      	b.n	8007014 <ADC3_IRQHandler>

08007016 <atof>:
 8007016:	2100      	movs	r1, #0
 8007018:	f000 bdfe 	b.w	8007c18 <strtod>

0800701c <atoi>:
 800701c:	220a      	movs	r2, #10
 800701e:	2100      	movs	r1, #0
 8007020:	f000 be82 	b.w	8007d28 <strtol>

08007024 <sulp>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	460f      	mov	r7, r1
 800702a:	4690      	mov	r8, r2
 800702c:	f002 ff3a 	bl	8009ea4 <__ulp>
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	f1b8 0f00 	cmp.w	r8, #0
 8007038:	d011      	beq.n	800705e <sulp+0x3a>
 800703a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800703e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007042:	2b00      	cmp	r3, #0
 8007044:	dd0b      	ble.n	800705e <sulp+0x3a>
 8007046:	2400      	movs	r4, #0
 8007048:	051b      	lsls	r3, r3, #20
 800704a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800704e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007052:	4622      	mov	r2, r4
 8007054:	462b      	mov	r3, r5
 8007056:	f7f9 fa59 	bl	800050c <__aeabi_dmul>
 800705a:	4604      	mov	r4, r0
 800705c:	460d      	mov	r5, r1
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007068 <_strtod_l>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	b09f      	sub	sp, #124	@ 0x7c
 800706e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007070:	2200      	movs	r2, #0
 8007072:	460c      	mov	r4, r1
 8007074:	921a      	str	r2, [sp, #104]	@ 0x68
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	f04f 0b00 	mov.w	fp, #0
 800707e:	460a      	mov	r2, r1
 8007080:	9005      	str	r0, [sp, #20]
 8007082:	9219      	str	r2, [sp, #100]	@ 0x64
 8007084:	7811      	ldrb	r1, [r2, #0]
 8007086:	292b      	cmp	r1, #43	@ 0x2b
 8007088:	d048      	beq.n	800711c <_strtod_l+0xb4>
 800708a:	d836      	bhi.n	80070fa <_strtod_l+0x92>
 800708c:	290d      	cmp	r1, #13
 800708e:	d830      	bhi.n	80070f2 <_strtod_l+0x8a>
 8007090:	2908      	cmp	r1, #8
 8007092:	d830      	bhi.n	80070f6 <_strtod_l+0x8e>
 8007094:	2900      	cmp	r1, #0
 8007096:	d039      	beq.n	800710c <_strtod_l+0xa4>
 8007098:	2200      	movs	r2, #0
 800709a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800709c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800709e:	782a      	ldrb	r2, [r5, #0]
 80070a0:	2a30      	cmp	r2, #48	@ 0x30
 80070a2:	f040 80b1 	bne.w	8007208 <_strtod_l+0x1a0>
 80070a6:	786a      	ldrb	r2, [r5, #1]
 80070a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070ac:	2a58      	cmp	r2, #88	@ 0x58
 80070ae:	d16c      	bne.n	800718a <_strtod_l+0x122>
 80070b0:	9302      	str	r3, [sp, #8]
 80070b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070b4:	4a8e      	ldr	r2, [pc, #568]	@ (80072f0 <_strtod_l+0x288>)
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	9805      	ldr	r0, [sp, #20]
 80070be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070c0:	a919      	add	r1, sp, #100	@ 0x64
 80070c2:	f001 ff97 	bl	8008ff4 <__gethex>
 80070c6:	f010 060f 	ands.w	r6, r0, #15
 80070ca:	4604      	mov	r4, r0
 80070cc:	d005      	beq.n	80070da <_strtod_l+0x72>
 80070ce:	2e06      	cmp	r6, #6
 80070d0:	d126      	bne.n	8007120 <_strtod_l+0xb8>
 80070d2:	2300      	movs	r3, #0
 80070d4:	3501      	adds	r5, #1
 80070d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80070d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8584 	bne.w	8007bea <_strtod_l+0xb82>
 80070e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070e4:	b1bb      	cbz	r3, 8007116 <_strtod_l+0xae>
 80070e6:	4650      	mov	r0, sl
 80070e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80070ec:	b01f      	add	sp, #124	@ 0x7c
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	2920      	cmp	r1, #32
 80070f4:	d1d0      	bne.n	8007098 <_strtod_l+0x30>
 80070f6:	3201      	adds	r2, #1
 80070f8:	e7c3      	b.n	8007082 <_strtod_l+0x1a>
 80070fa:	292d      	cmp	r1, #45	@ 0x2d
 80070fc:	d1cc      	bne.n	8007098 <_strtod_l+0x30>
 80070fe:	2101      	movs	r1, #1
 8007100:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007102:	1c51      	adds	r1, r2, #1
 8007104:	9119      	str	r1, [sp, #100]	@ 0x64
 8007106:	7852      	ldrb	r2, [r2, #1]
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1c7      	bne.n	800709c <_strtod_l+0x34>
 800710c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800710e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 8568 	bne.w	8007be6 <_strtod_l+0xb7e>
 8007116:	4650      	mov	r0, sl
 8007118:	4659      	mov	r1, fp
 800711a:	e7e7      	b.n	80070ec <_strtod_l+0x84>
 800711c:	2100      	movs	r1, #0
 800711e:	e7ef      	b.n	8007100 <_strtod_l+0x98>
 8007120:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007122:	b13a      	cbz	r2, 8007134 <_strtod_l+0xcc>
 8007124:	2135      	movs	r1, #53	@ 0x35
 8007126:	a81c      	add	r0, sp, #112	@ 0x70
 8007128:	f002 ffac 	bl	800a084 <__copybits>
 800712c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800712e:	9805      	ldr	r0, [sp, #20]
 8007130:	f002 fb86 	bl	8009840 <_Bfree>
 8007134:	3e01      	subs	r6, #1
 8007136:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007138:	2e04      	cmp	r6, #4
 800713a:	d806      	bhi.n	800714a <_strtod_l+0xe2>
 800713c:	e8df f006 	tbb	[pc, r6]
 8007140:	201d0314 	.word	0x201d0314
 8007144:	14          	.byte	0x14
 8007145:	00          	.byte	0x00
 8007146:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800714a:	05e1      	lsls	r1, r4, #23
 800714c:	bf48      	it	mi
 800714e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007152:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007156:	0d1b      	lsrs	r3, r3, #20
 8007158:	051b      	lsls	r3, r3, #20
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1bd      	bne.n	80070da <_strtod_l+0x72>
 800715e:	f001 fe27 	bl	8008db0 <__errno>
 8007162:	2322      	movs	r3, #34	@ 0x22
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	e7b8      	b.n	80070da <_strtod_l+0x72>
 8007168:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800716c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007170:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007174:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007178:	e7e7      	b.n	800714a <_strtod_l+0xe2>
 800717a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80072f4 <_strtod_l+0x28c>
 800717e:	e7e4      	b.n	800714a <_strtod_l+0xe2>
 8007180:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007184:	f04f 3aff 	mov.w	sl, #4294967295
 8007188:	e7df      	b.n	800714a <_strtod_l+0xe2>
 800718a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b30      	cmp	r3, #48	@ 0x30
 8007194:	d0f9      	beq.n	800718a <_strtod_l+0x122>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d09f      	beq.n	80070da <_strtod_l+0x72>
 800719a:	2301      	movs	r3, #1
 800719c:	9309      	str	r3, [sp, #36]	@ 0x24
 800719e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071a0:	220a      	movs	r2, #10
 80071a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80071a4:	2300      	movs	r3, #0
 80071a6:	461f      	mov	r7, r3
 80071a8:	9308      	str	r3, [sp, #32]
 80071aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80071ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071ae:	7805      	ldrb	r5, [r0, #0]
 80071b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	2909      	cmp	r1, #9
 80071b8:	d928      	bls.n	800720c <_strtod_l+0x1a4>
 80071ba:	2201      	movs	r2, #1
 80071bc:	494e      	ldr	r1, [pc, #312]	@ (80072f8 <_strtod_l+0x290>)
 80071be:	f000 fecc 	bl	8007f5a <strncmp>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d032      	beq.n	800722c <_strtod_l+0x1c4>
 80071c6:	2000      	movs	r0, #0
 80071c8:	462a      	mov	r2, r5
 80071ca:	4681      	mov	r9, r0
 80071cc:	463d      	mov	r5, r7
 80071ce:	4603      	mov	r3, r0
 80071d0:	2a65      	cmp	r2, #101	@ 0x65
 80071d2:	d001      	beq.n	80071d8 <_strtod_l+0x170>
 80071d4:	2a45      	cmp	r2, #69	@ 0x45
 80071d6:	d114      	bne.n	8007202 <_strtod_l+0x19a>
 80071d8:	b91d      	cbnz	r5, 80071e2 <_strtod_l+0x17a>
 80071da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071dc:	4302      	orrs	r2, r0
 80071de:	d095      	beq.n	800710c <_strtod_l+0xa4>
 80071e0:	2500      	movs	r5, #0
 80071e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071e4:	1c62      	adds	r2, r4, #1
 80071e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80071e8:	7862      	ldrb	r2, [r4, #1]
 80071ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80071ec:	d077      	beq.n	80072de <_strtod_l+0x276>
 80071ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80071f0:	d07b      	beq.n	80072ea <_strtod_l+0x282>
 80071f2:	f04f 0c00 	mov.w	ip, #0
 80071f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80071fa:	2909      	cmp	r1, #9
 80071fc:	f240 8082 	bls.w	8007304 <_strtod_l+0x29c>
 8007200:	9419      	str	r4, [sp, #100]	@ 0x64
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	e0a2      	b.n	800734e <_strtod_l+0x2e6>
 8007208:	2300      	movs	r3, #0
 800720a:	e7c7      	b.n	800719c <_strtod_l+0x134>
 800720c:	2f08      	cmp	r7, #8
 800720e:	bfd5      	itete	le
 8007210:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007212:	9908      	ldrgt	r1, [sp, #32]
 8007214:	fb02 3301 	mlale	r3, r2, r1, r3
 8007218:	fb02 3301 	mlagt	r3, r2, r1, r3
 800721c:	f100 0001 	add.w	r0, r0, #1
 8007220:	bfd4      	ite	le
 8007222:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007224:	9308      	strgt	r3, [sp, #32]
 8007226:	3701      	adds	r7, #1
 8007228:	9019      	str	r0, [sp, #100]	@ 0x64
 800722a:	e7bf      	b.n	80071ac <_strtod_l+0x144>
 800722c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	9219      	str	r2, [sp, #100]	@ 0x64
 8007232:	785a      	ldrb	r2, [r3, #1]
 8007234:	b37f      	cbz	r7, 8007296 <_strtod_l+0x22e>
 8007236:	4681      	mov	r9, r0
 8007238:	463d      	mov	r5, r7
 800723a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800723e:	2b09      	cmp	r3, #9
 8007240:	d912      	bls.n	8007268 <_strtod_l+0x200>
 8007242:	2301      	movs	r3, #1
 8007244:	e7c4      	b.n	80071d0 <_strtod_l+0x168>
 8007246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007248:	3001      	adds	r0, #1
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	9219      	str	r2, [sp, #100]	@ 0x64
 800724e:	785a      	ldrb	r2, [r3, #1]
 8007250:	2a30      	cmp	r2, #48	@ 0x30
 8007252:	d0f8      	beq.n	8007246 <_strtod_l+0x1de>
 8007254:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007258:	2b08      	cmp	r3, #8
 800725a:	f200 84cb 	bhi.w	8007bf4 <_strtod_l+0xb8c>
 800725e:	4681      	mov	r9, r0
 8007260:	2000      	movs	r0, #0
 8007262:	4605      	mov	r5, r0
 8007264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007266:	930c      	str	r3, [sp, #48]	@ 0x30
 8007268:	3a30      	subs	r2, #48	@ 0x30
 800726a:	f100 0301 	add.w	r3, r0, #1
 800726e:	d02a      	beq.n	80072c6 <_strtod_l+0x25e>
 8007270:	4499      	add	r9, r3
 8007272:	210a      	movs	r1, #10
 8007274:	462b      	mov	r3, r5
 8007276:	eb00 0c05 	add.w	ip, r0, r5
 800727a:	4563      	cmp	r3, ip
 800727c:	d10d      	bne.n	800729a <_strtod_l+0x232>
 800727e:	1c69      	adds	r1, r5, #1
 8007280:	4401      	add	r1, r0
 8007282:	4428      	add	r0, r5
 8007284:	2808      	cmp	r0, #8
 8007286:	dc16      	bgt.n	80072b6 <_strtod_l+0x24e>
 8007288:	230a      	movs	r3, #10
 800728a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800728c:	fb03 2300 	mla	r3, r3, r0, r2
 8007290:	930a      	str	r3, [sp, #40]	@ 0x28
 8007292:	2300      	movs	r3, #0
 8007294:	e018      	b.n	80072c8 <_strtod_l+0x260>
 8007296:	4638      	mov	r0, r7
 8007298:	e7da      	b.n	8007250 <_strtod_l+0x1e8>
 800729a:	2b08      	cmp	r3, #8
 800729c:	f103 0301 	add.w	r3, r3, #1
 80072a0:	dc03      	bgt.n	80072aa <_strtod_l+0x242>
 80072a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80072a4:	434e      	muls	r6, r1
 80072a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80072a8:	e7e7      	b.n	800727a <_strtod_l+0x212>
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	bfde      	ittt	le
 80072ae:	9e08      	ldrle	r6, [sp, #32]
 80072b0:	434e      	mulle	r6, r1
 80072b2:	9608      	strle	r6, [sp, #32]
 80072b4:	e7e1      	b.n	800727a <_strtod_l+0x212>
 80072b6:	280f      	cmp	r0, #15
 80072b8:	dceb      	bgt.n	8007292 <_strtod_l+0x22a>
 80072ba:	230a      	movs	r3, #10
 80072bc:	9808      	ldr	r0, [sp, #32]
 80072be:	fb03 2300 	mla	r3, r3, r0, r2
 80072c2:	9308      	str	r3, [sp, #32]
 80072c4:	e7e5      	b.n	8007292 <_strtod_l+0x22a>
 80072c6:	4629      	mov	r1, r5
 80072c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072ca:	460d      	mov	r5, r1
 80072cc:	1c50      	adds	r0, r2, #1
 80072ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80072d0:	7852      	ldrb	r2, [r2, #1]
 80072d2:	4618      	mov	r0, r3
 80072d4:	e7b1      	b.n	800723a <_strtod_l+0x1d2>
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	2301      	movs	r3, #1
 80072dc:	e77d      	b.n	80071da <_strtod_l+0x172>
 80072de:	f04f 0c00 	mov.w	ip, #0
 80072e2:	1ca2      	adds	r2, r4, #2
 80072e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80072e6:	78a2      	ldrb	r2, [r4, #2]
 80072e8:	e785      	b.n	80071f6 <_strtod_l+0x18e>
 80072ea:	f04f 0c01 	mov.w	ip, #1
 80072ee:	e7f8      	b.n	80072e2 <_strtod_l+0x27a>
 80072f0:	0800c5d0 	.word	0x0800c5d0
 80072f4:	7ff00000 	.word	0x7ff00000
 80072f8:	0800c5ac 	.word	0x0800c5ac
 80072fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072fe:	1c51      	adds	r1, r2, #1
 8007300:	9119      	str	r1, [sp, #100]	@ 0x64
 8007302:	7852      	ldrb	r2, [r2, #1]
 8007304:	2a30      	cmp	r2, #48	@ 0x30
 8007306:	d0f9      	beq.n	80072fc <_strtod_l+0x294>
 8007308:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800730c:	2908      	cmp	r1, #8
 800730e:	f63f af78 	bhi.w	8007202 <_strtod_l+0x19a>
 8007312:	f04f 080a 	mov.w	r8, #10
 8007316:	3a30      	subs	r2, #48	@ 0x30
 8007318:	920e      	str	r2, [sp, #56]	@ 0x38
 800731a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800731c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800731e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007320:	1c56      	adds	r6, r2, #1
 8007322:	9619      	str	r6, [sp, #100]	@ 0x64
 8007324:	7852      	ldrb	r2, [r2, #1]
 8007326:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800732a:	f1be 0f09 	cmp.w	lr, #9
 800732e:	d939      	bls.n	80073a4 <_strtod_l+0x33c>
 8007330:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007332:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007336:	1a76      	subs	r6, r6, r1
 8007338:	2e08      	cmp	r6, #8
 800733a:	dc03      	bgt.n	8007344 <_strtod_l+0x2dc>
 800733c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800733e:	4588      	cmp	r8, r1
 8007340:	bfa8      	it	ge
 8007342:	4688      	movge	r8, r1
 8007344:	f1bc 0f00 	cmp.w	ip, #0
 8007348:	d001      	beq.n	800734e <_strtod_l+0x2e6>
 800734a:	f1c8 0800 	rsb	r8, r8, #0
 800734e:	2d00      	cmp	r5, #0
 8007350:	d14e      	bne.n	80073f0 <_strtod_l+0x388>
 8007352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007354:	4308      	orrs	r0, r1
 8007356:	f47f aec0 	bne.w	80070da <_strtod_l+0x72>
 800735a:	2b00      	cmp	r3, #0
 800735c:	f47f aed6 	bne.w	800710c <_strtod_l+0xa4>
 8007360:	2a69      	cmp	r2, #105	@ 0x69
 8007362:	d028      	beq.n	80073b6 <_strtod_l+0x34e>
 8007364:	dc25      	bgt.n	80073b2 <_strtod_l+0x34a>
 8007366:	2a49      	cmp	r2, #73	@ 0x49
 8007368:	d025      	beq.n	80073b6 <_strtod_l+0x34e>
 800736a:	2a4e      	cmp	r2, #78	@ 0x4e
 800736c:	f47f aece 	bne.w	800710c <_strtod_l+0xa4>
 8007370:	499a      	ldr	r1, [pc, #616]	@ (80075dc <_strtod_l+0x574>)
 8007372:	a819      	add	r0, sp, #100	@ 0x64
 8007374:	f002 f860 	bl	8009438 <__match>
 8007378:	2800      	cmp	r0, #0
 800737a:	f43f aec7 	beq.w	800710c <_strtod_l+0xa4>
 800737e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b28      	cmp	r3, #40	@ 0x28
 8007384:	d12e      	bne.n	80073e4 <_strtod_l+0x37c>
 8007386:	4996      	ldr	r1, [pc, #600]	@ (80075e0 <_strtod_l+0x578>)
 8007388:	aa1c      	add	r2, sp, #112	@ 0x70
 800738a:	a819      	add	r0, sp, #100	@ 0x64
 800738c:	f002 f868 	bl	8009460 <__hexnan>
 8007390:	2805      	cmp	r0, #5
 8007392:	d127      	bne.n	80073e4 <_strtod_l+0x37c>
 8007394:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007396:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800739a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800739e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073a2:	e69a      	b.n	80070da <_strtod_l+0x72>
 80073a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073a6:	fb08 2101 	mla	r1, r8, r1, r2
 80073aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80073b0:	e7b5      	b.n	800731e <_strtod_l+0x2b6>
 80073b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80073b4:	e7da      	b.n	800736c <_strtod_l+0x304>
 80073b6:	498b      	ldr	r1, [pc, #556]	@ (80075e4 <_strtod_l+0x57c>)
 80073b8:	a819      	add	r0, sp, #100	@ 0x64
 80073ba:	f002 f83d 	bl	8009438 <__match>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f aea4 	beq.w	800710c <_strtod_l+0xa4>
 80073c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073c6:	4988      	ldr	r1, [pc, #544]	@ (80075e8 <_strtod_l+0x580>)
 80073c8:	3b01      	subs	r3, #1
 80073ca:	a819      	add	r0, sp, #100	@ 0x64
 80073cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80073ce:	f002 f833 	bl	8009438 <__match>
 80073d2:	b910      	cbnz	r0, 80073da <_strtod_l+0x372>
 80073d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073d6:	3301      	adds	r3, #1
 80073d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80073da:	f04f 0a00 	mov.w	sl, #0
 80073de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80075ec <_strtod_l+0x584>
 80073e2:	e67a      	b.n	80070da <_strtod_l+0x72>
 80073e4:	4882      	ldr	r0, [pc, #520]	@ (80075f0 <_strtod_l+0x588>)
 80073e6:	f001 fd29 	bl	8008e3c <nan>
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	e674      	b.n	80070da <_strtod_l+0x72>
 80073f0:	eba8 0309 	sub.w	r3, r8, r9
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	bf08      	it	eq
 80073f8:	462f      	moveq	r7, r5
 80073fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073fc:	2d10      	cmp	r5, #16
 80073fe:	462c      	mov	r4, r5
 8007400:	9309      	str	r3, [sp, #36]	@ 0x24
 8007402:	bfa8      	it	ge
 8007404:	2410      	movge	r4, #16
 8007406:	f7f9 f807 	bl	8000418 <__aeabi_ui2d>
 800740a:	2d09      	cmp	r5, #9
 800740c:	4682      	mov	sl, r0
 800740e:	468b      	mov	fp, r1
 8007410:	dc11      	bgt.n	8007436 <_strtod_l+0x3ce>
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	f43f ae60 	beq.w	80070da <_strtod_l+0x72>
 800741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741c:	dd76      	ble.n	800750c <_strtod_l+0x4a4>
 800741e:	2b16      	cmp	r3, #22
 8007420:	dc5d      	bgt.n	80074de <_strtod_l+0x476>
 8007422:	4974      	ldr	r1, [pc, #464]	@ (80075f4 <_strtod_l+0x58c>)
 8007424:	4652      	mov	r2, sl
 8007426:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800742a:	465b      	mov	r3, fp
 800742c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007430:	f7f9 f86c 	bl	800050c <__aeabi_dmul>
 8007434:	e7d9      	b.n	80073ea <_strtod_l+0x382>
 8007436:	4b6f      	ldr	r3, [pc, #444]	@ (80075f4 <_strtod_l+0x58c>)
 8007438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800743c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007440:	f7f9 f864 	bl	800050c <__aeabi_dmul>
 8007444:	4682      	mov	sl, r0
 8007446:	9808      	ldr	r0, [sp, #32]
 8007448:	468b      	mov	fp, r1
 800744a:	f7f8 ffe5 	bl	8000418 <__aeabi_ui2d>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4650      	mov	r0, sl
 8007454:	4659      	mov	r1, fp
 8007456:	f7f8 fea3 	bl	80001a0 <__adddf3>
 800745a:	2d0f      	cmp	r5, #15
 800745c:	4682      	mov	sl, r0
 800745e:	468b      	mov	fp, r1
 8007460:	ddd7      	ble.n	8007412 <_strtod_l+0x3aa>
 8007462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007464:	1b2c      	subs	r4, r5, r4
 8007466:	441c      	add	r4, r3
 8007468:	2c00      	cmp	r4, #0
 800746a:	f340 8096 	ble.w	800759a <_strtod_l+0x532>
 800746e:	f014 030f 	ands.w	r3, r4, #15
 8007472:	d00a      	beq.n	800748a <_strtod_l+0x422>
 8007474:	495f      	ldr	r1, [pc, #380]	@ (80075f4 <_strtod_l+0x58c>)
 8007476:	4652      	mov	r2, sl
 8007478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800747c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007480:	465b      	mov	r3, fp
 8007482:	f7f9 f843 	bl	800050c <__aeabi_dmul>
 8007486:	4682      	mov	sl, r0
 8007488:	468b      	mov	fp, r1
 800748a:	f034 040f 	bics.w	r4, r4, #15
 800748e:	d073      	beq.n	8007578 <_strtod_l+0x510>
 8007490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007494:	dd48      	ble.n	8007528 <_strtod_l+0x4c0>
 8007496:	2400      	movs	r4, #0
 8007498:	46a0      	mov	r8, r4
 800749a:	46a1      	mov	r9, r4
 800749c:	940a      	str	r4, [sp, #40]	@ 0x28
 800749e:	2322      	movs	r3, #34	@ 0x22
 80074a0:	f04f 0a00 	mov.w	sl, #0
 80074a4:	9a05      	ldr	r2, [sp, #20]
 80074a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80075ec <_strtod_l+0x584>
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f ae13 	beq.w	80070da <_strtod_l+0x72>
 80074b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	f002 f9c2 	bl	8009840 <_Bfree>
 80074bc:	4649      	mov	r1, r9
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	f002 f9be 	bl	8009840 <_Bfree>
 80074c4:	4641      	mov	r1, r8
 80074c6:	9805      	ldr	r0, [sp, #20]
 80074c8:	f002 f9ba 	bl	8009840 <_Bfree>
 80074cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f002 f9b6 	bl	8009840 <_Bfree>
 80074d4:	4621      	mov	r1, r4
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	f002 f9b2 	bl	8009840 <_Bfree>
 80074dc:	e5fd      	b.n	80070da <_strtod_l+0x72>
 80074de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074e4:	4293      	cmp	r3, r2
 80074e6:	dbbc      	blt.n	8007462 <_strtod_l+0x3fa>
 80074e8:	4c42      	ldr	r4, [pc, #264]	@ (80075f4 <_strtod_l+0x58c>)
 80074ea:	f1c5 050f 	rsb	r5, r5, #15
 80074ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074f2:	4652      	mov	r2, sl
 80074f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f8:	465b      	mov	r3, fp
 80074fa:	f7f9 f807 	bl	800050c <__aeabi_dmul>
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	1b5d      	subs	r5, r3, r5
 8007502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800750a:	e791      	b.n	8007430 <_strtod_l+0x3c8>
 800750c:	3316      	adds	r3, #22
 800750e:	dba8      	blt.n	8007462 <_strtod_l+0x3fa>
 8007510:	4b38      	ldr	r3, [pc, #224]	@ (80075f4 <_strtod_l+0x58c>)
 8007512:	eba9 0808 	sub.w	r8, r9, r8
 8007516:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800751a:	4650      	mov	r0, sl
 800751c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007520:	4659      	mov	r1, fp
 8007522:	f7f9 f91d 	bl	8000760 <__aeabi_ddiv>
 8007526:	e760      	b.n	80073ea <_strtod_l+0x382>
 8007528:	4b33      	ldr	r3, [pc, #204]	@ (80075f8 <_strtod_l+0x590>)
 800752a:	4650      	mov	r0, sl
 800752c:	9308      	str	r3, [sp, #32]
 800752e:	2300      	movs	r3, #0
 8007530:	4659      	mov	r1, fp
 8007532:	461e      	mov	r6, r3
 8007534:	1124      	asrs	r4, r4, #4
 8007536:	2c01      	cmp	r4, #1
 8007538:	dc21      	bgt.n	800757e <_strtod_l+0x516>
 800753a:	b10b      	cbz	r3, 8007540 <_strtod_l+0x4d8>
 800753c:	4682      	mov	sl, r0
 800753e:	468b      	mov	fp, r1
 8007540:	492d      	ldr	r1, [pc, #180]	@ (80075f8 <_strtod_l+0x590>)
 8007542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800754a:	4652      	mov	r2, sl
 800754c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007550:	465b      	mov	r3, fp
 8007552:	f7f8 ffdb 	bl	800050c <__aeabi_dmul>
 8007556:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <_strtod_l+0x584>)
 8007558:	460a      	mov	r2, r1
 800755a:	400b      	ands	r3, r1
 800755c:	4927      	ldr	r1, [pc, #156]	@ (80075fc <_strtod_l+0x594>)
 800755e:	4682      	mov	sl, r0
 8007560:	428b      	cmp	r3, r1
 8007562:	d898      	bhi.n	8007496 <_strtod_l+0x42e>
 8007564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007568:	428b      	cmp	r3, r1
 800756a:	bf86      	itte	hi
 800756c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007570:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007600 <_strtod_l+0x598>
 8007574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007578:	2300      	movs	r3, #0
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	e07a      	b.n	8007674 <_strtod_l+0x60c>
 800757e:	07e2      	lsls	r2, r4, #31
 8007580:	d505      	bpl.n	800758e <_strtod_l+0x526>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 ffc0 	bl	800050c <__aeabi_dmul>
 800758c:	2301      	movs	r3, #1
 800758e:	9a08      	ldr	r2, [sp, #32]
 8007590:	3601      	adds	r6, #1
 8007592:	3208      	adds	r2, #8
 8007594:	1064      	asrs	r4, r4, #1
 8007596:	9208      	str	r2, [sp, #32]
 8007598:	e7cd      	b.n	8007536 <_strtod_l+0x4ce>
 800759a:	d0ed      	beq.n	8007578 <_strtod_l+0x510>
 800759c:	4264      	negs	r4, r4
 800759e:	f014 020f 	ands.w	r2, r4, #15
 80075a2:	d00a      	beq.n	80075ba <_strtod_l+0x552>
 80075a4:	4b13      	ldr	r3, [pc, #76]	@ (80075f4 <_strtod_l+0x58c>)
 80075a6:	4650      	mov	r0, sl
 80075a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ac:	4659      	mov	r1, fp
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f9 f8d5 	bl	8000760 <__aeabi_ddiv>
 80075b6:	4682      	mov	sl, r0
 80075b8:	468b      	mov	fp, r1
 80075ba:	1124      	asrs	r4, r4, #4
 80075bc:	d0dc      	beq.n	8007578 <_strtod_l+0x510>
 80075be:	2c1f      	cmp	r4, #31
 80075c0:	dd20      	ble.n	8007604 <_strtod_l+0x59c>
 80075c2:	2400      	movs	r4, #0
 80075c4:	46a0      	mov	r8, r4
 80075c6:	46a1      	mov	r9, r4
 80075c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80075ca:	2322      	movs	r3, #34	@ 0x22
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	f04f 0a00 	mov.w	sl, #0
 80075d2:	f04f 0b00 	mov.w	fp, #0
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e768      	b.n	80074ac <_strtod_l+0x444>
 80075da:	bf00      	nop
 80075dc:	0800c5b7 	.word	0x0800c5b7
 80075e0:	0800c5bc 	.word	0x0800c5bc
 80075e4:	0800c5ae 	.word	0x0800c5ae
 80075e8:	0800c5b1 	.word	0x0800c5b1
 80075ec:	7ff00000 	.word	0x7ff00000
 80075f0:	0800c92d 	.word	0x0800c92d
 80075f4:	0800ca30 	.word	0x0800ca30
 80075f8:	0800ca08 	.word	0x0800ca08
 80075fc:	7ca00000 	.word	0x7ca00000
 8007600:	7fefffff 	.word	0x7fefffff
 8007604:	f014 0310 	ands.w	r3, r4, #16
 8007608:	bf18      	it	ne
 800760a:	236a      	movne	r3, #106	@ 0x6a
 800760c:	4650      	mov	r0, sl
 800760e:	9308      	str	r3, [sp, #32]
 8007610:	4659      	mov	r1, fp
 8007612:	2300      	movs	r3, #0
 8007614:	4ea9      	ldr	r6, [pc, #676]	@ (80078bc <_strtod_l+0x854>)
 8007616:	07e2      	lsls	r2, r4, #31
 8007618:	d504      	bpl.n	8007624 <_strtod_l+0x5bc>
 800761a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800761e:	f7f8 ff75 	bl	800050c <__aeabi_dmul>
 8007622:	2301      	movs	r3, #1
 8007624:	1064      	asrs	r4, r4, #1
 8007626:	f106 0608 	add.w	r6, r6, #8
 800762a:	d1f4      	bne.n	8007616 <_strtod_l+0x5ae>
 800762c:	b10b      	cbz	r3, 8007632 <_strtod_l+0x5ca>
 800762e:	4682      	mov	sl, r0
 8007630:	468b      	mov	fp, r1
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	b1b3      	cbz	r3, 8007664 <_strtod_l+0x5fc>
 8007636:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800763a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800763e:	2b00      	cmp	r3, #0
 8007640:	4659      	mov	r1, fp
 8007642:	dd0f      	ble.n	8007664 <_strtod_l+0x5fc>
 8007644:	2b1f      	cmp	r3, #31
 8007646:	dd57      	ble.n	80076f8 <_strtod_l+0x690>
 8007648:	2b34      	cmp	r3, #52	@ 0x34
 800764a:	bfd8      	it	le
 800764c:	f04f 33ff 	movle.w	r3, #4294967295
 8007650:	f04f 0a00 	mov.w	sl, #0
 8007654:	bfcf      	iteee	gt
 8007656:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800765a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800765e:	4093      	lslle	r3, r2
 8007660:	ea03 0b01 	andle.w	fp, r3, r1
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	4650      	mov	r0, sl
 800766a:	4659      	mov	r1, fp
 800766c:	f7f9 f9b6 	bl	80009dc <__aeabi_dcmpeq>
 8007670:	2800      	cmp	r0, #0
 8007672:	d1a6      	bne.n	80075c2 <_strtod_l+0x55a>
 8007674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007676:	463a      	mov	r2, r7
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800767c:	462b      	mov	r3, r5
 800767e:	9805      	ldr	r0, [sp, #20]
 8007680:	f002 f946 	bl	8009910 <__s2b>
 8007684:	900a      	str	r0, [sp, #40]	@ 0x28
 8007686:	2800      	cmp	r0, #0
 8007688:	f43f af05 	beq.w	8007496 <_strtod_l+0x42e>
 800768c:	2400      	movs	r4, #0
 800768e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007690:	eba9 0308 	sub.w	r3, r9, r8
 8007694:	2a00      	cmp	r2, #0
 8007696:	bfa8      	it	ge
 8007698:	2300      	movge	r3, #0
 800769a:	46a0      	mov	r8, r4
 800769c:	9312      	str	r3, [sp, #72]	@ 0x48
 800769e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	9805      	ldr	r0, [sp, #20]
 80076a8:	6859      	ldr	r1, [r3, #4]
 80076aa:	f002 f889 	bl	80097c0 <_Balloc>
 80076ae:	4681      	mov	r9, r0
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f43f aef4 	beq.w	800749e <_strtod_l+0x436>
 80076b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b8:	300c      	adds	r0, #12
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	f103 010c 	add.w	r1, r3, #12
 80076c0:	3202      	adds	r2, #2
 80076c2:	0092      	lsls	r2, r2, #2
 80076c4:	f001 fbab 	bl	8008e1e <memcpy>
 80076c8:	ab1c      	add	r3, sp, #112	@ 0x70
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4652      	mov	r2, sl
 80076d2:	465b      	mov	r3, fp
 80076d4:	9805      	ldr	r0, [sp, #20]
 80076d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076da:	f002 fc4b 	bl	8009f74 <__d2b>
 80076de:	901a      	str	r0, [sp, #104]	@ 0x68
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f43f aedc 	beq.w	800749e <_strtod_l+0x436>
 80076e6:	2101      	movs	r1, #1
 80076e8:	9805      	ldr	r0, [sp, #20]
 80076ea:	f002 f9a7 	bl	8009a3c <__i2b>
 80076ee:	4680      	mov	r8, r0
 80076f0:	b948      	cbnz	r0, 8007706 <_strtod_l+0x69e>
 80076f2:	f04f 0800 	mov.w	r8, #0
 80076f6:	e6d2      	b.n	800749e <_strtod_l+0x436>
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007700:	ea03 0a0a 	and.w	sl, r3, sl
 8007704:	e7ae      	b.n	8007664 <_strtod_l+0x5fc>
 8007706:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007708:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800770a:	2d00      	cmp	r5, #0
 800770c:	bfab      	itete	ge
 800770e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007710:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007712:	18ef      	addge	r7, r5, r3
 8007714:	1b5e      	sublt	r6, r3, r5
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	bfa8      	it	ge
 800771a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800771c:	eba5 0503 	sub.w	r5, r5, r3
 8007720:	4415      	add	r5, r2
 8007722:	4b67      	ldr	r3, [pc, #412]	@ (80078c0 <_strtod_l+0x858>)
 8007724:	f105 35ff 	add.w	r5, r5, #4294967295
 8007728:	bfb8      	it	lt
 800772a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800772c:	429d      	cmp	r5, r3
 800772e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007732:	da50      	bge.n	80077d6 <_strtod_l+0x76e>
 8007734:	1b5b      	subs	r3, r3, r5
 8007736:	2b1f      	cmp	r3, #31
 8007738:	f04f 0101 	mov.w	r1, #1
 800773c:	eba2 0203 	sub.w	r2, r2, r3
 8007740:	dc3d      	bgt.n	80077be <_strtod_l+0x756>
 8007742:	fa01 f303 	lsl.w	r3, r1, r3
 8007746:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007748:	2300      	movs	r3, #0
 800774a:	9310      	str	r3, [sp, #64]	@ 0x40
 800774c:	18bd      	adds	r5, r7, r2
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	42af      	cmp	r7, r5
 8007752:	4416      	add	r6, r2
 8007754:	441e      	add	r6, r3
 8007756:	463b      	mov	r3, r7
 8007758:	bfa8      	it	ge
 800775a:	462b      	movge	r3, r5
 800775c:	42b3      	cmp	r3, r6
 800775e:	bfa8      	it	ge
 8007760:	4633      	movge	r3, r6
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfc2      	ittt	gt
 8007766:	1aed      	subgt	r5, r5, r3
 8007768:	1af6      	subgt	r6, r6, r3
 800776a:	1aff      	subgt	r7, r7, r3
 800776c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800776e:	2b00      	cmp	r3, #0
 8007770:	dd16      	ble.n	80077a0 <_strtod_l+0x738>
 8007772:	4641      	mov	r1, r8
 8007774:	461a      	mov	r2, r3
 8007776:	9805      	ldr	r0, [sp, #20]
 8007778:	f002 fa1e 	bl	8009bb8 <__pow5mult>
 800777c:	4680      	mov	r8, r0
 800777e:	2800      	cmp	r0, #0
 8007780:	d0b7      	beq.n	80076f2 <_strtod_l+0x68a>
 8007782:	4601      	mov	r1, r0
 8007784:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f002 f96e 	bl	8009a68 <__multiply>
 800778c:	900e      	str	r0, [sp, #56]	@ 0x38
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f ae85 	beq.w	800749e <_strtod_l+0x436>
 8007794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f002 f852 	bl	8009840 <_Bfree>
 800779c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800779e:	931a      	str	r3, [sp, #104]	@ 0x68
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	dc1d      	bgt.n	80077e0 <_strtod_l+0x778>
 80077a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd23      	ble.n	80077f2 <_strtod_l+0x78a>
 80077aa:	4649      	mov	r1, r9
 80077ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077ae:	9805      	ldr	r0, [sp, #20]
 80077b0:	f002 fa02 	bl	8009bb8 <__pow5mult>
 80077b4:	4681      	mov	r9, r0
 80077b6:	b9e0      	cbnz	r0, 80077f2 <_strtod_l+0x78a>
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	e66f      	b.n	800749e <_strtod_l+0x436>
 80077be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077ca:	35e2      	adds	r5, #226	@ 0xe2
 80077cc:	fa01 f305 	lsl.w	r3, r1, r5
 80077d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077d4:	e7ba      	b.n	800774c <_strtod_l+0x6e4>
 80077d6:	2300      	movs	r3, #0
 80077d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077da:	2301      	movs	r3, #1
 80077dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077de:	e7b5      	b.n	800774c <_strtod_l+0x6e4>
 80077e0:	462a      	mov	r2, r5
 80077e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f002 fa41 	bl	8009c6c <__lshift>
 80077ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1d9      	bne.n	80077a4 <_strtod_l+0x73c>
 80077f0:	e655      	b.n	800749e <_strtod_l+0x436>
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	dd07      	ble.n	8007806 <_strtod_l+0x79e>
 80077f6:	4649      	mov	r1, r9
 80077f8:	4632      	mov	r2, r6
 80077fa:	9805      	ldr	r0, [sp, #20]
 80077fc:	f002 fa36 	bl	8009c6c <__lshift>
 8007800:	4681      	mov	r9, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	d0d8      	beq.n	80077b8 <_strtod_l+0x750>
 8007806:	2f00      	cmp	r7, #0
 8007808:	dd08      	ble.n	800781c <_strtod_l+0x7b4>
 800780a:	4641      	mov	r1, r8
 800780c:	463a      	mov	r2, r7
 800780e:	9805      	ldr	r0, [sp, #20]
 8007810:	f002 fa2c 	bl	8009c6c <__lshift>
 8007814:	4680      	mov	r8, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f ae41 	beq.w	800749e <_strtod_l+0x436>
 800781c:	464a      	mov	r2, r9
 800781e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007820:	9805      	ldr	r0, [sp, #20]
 8007822:	f002 faab 	bl	8009d7c <__mdiff>
 8007826:	4604      	mov	r4, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	f43f ae38 	beq.w	800749e <_strtod_l+0x436>
 800782e:	68c3      	ldr	r3, [r0, #12]
 8007830:	4641      	mov	r1, r8
 8007832:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007834:	2300      	movs	r3, #0
 8007836:	60c3      	str	r3, [r0, #12]
 8007838:	f002 fa84 	bl	8009d44 <__mcmp>
 800783c:	2800      	cmp	r0, #0
 800783e:	da45      	bge.n	80078cc <_strtod_l+0x864>
 8007840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007842:	ea53 030a 	orrs.w	r3, r3, sl
 8007846:	d16b      	bne.n	8007920 <_strtod_l+0x8b8>
 8007848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800784c:	2b00      	cmp	r3, #0
 800784e:	d167      	bne.n	8007920 <_strtod_l+0x8b8>
 8007850:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007854:	0d1b      	lsrs	r3, r3, #20
 8007856:	051b      	lsls	r3, r3, #20
 8007858:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800785c:	d960      	bls.n	8007920 <_strtod_l+0x8b8>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	b913      	cbnz	r3, 8007868 <_strtod_l+0x800>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	2b01      	cmp	r3, #1
 8007866:	dd5b      	ble.n	8007920 <_strtod_l+0x8b8>
 8007868:	4621      	mov	r1, r4
 800786a:	2201      	movs	r2, #1
 800786c:	9805      	ldr	r0, [sp, #20]
 800786e:	f002 f9fd 	bl	8009c6c <__lshift>
 8007872:	4641      	mov	r1, r8
 8007874:	4604      	mov	r4, r0
 8007876:	f002 fa65 	bl	8009d44 <__mcmp>
 800787a:	2800      	cmp	r0, #0
 800787c:	dd50      	ble.n	8007920 <_strtod_l+0x8b8>
 800787e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007882:	9a08      	ldr	r2, [sp, #32]
 8007884:	0d1b      	lsrs	r3, r3, #20
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	2a00      	cmp	r2, #0
 800788a:	d06a      	beq.n	8007962 <_strtod_l+0x8fa>
 800788c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007890:	d867      	bhi.n	8007962 <_strtod_l+0x8fa>
 8007892:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007896:	f67f ae98 	bls.w	80075ca <_strtod_l+0x562>
 800789a:	4650      	mov	r0, sl
 800789c:	4659      	mov	r1, fp
 800789e:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <_strtod_l+0x85c>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	f7f8 fe33 	bl	800050c <__aeabi_dmul>
 80078a6:	4b08      	ldr	r3, [pc, #32]	@ (80078c8 <_strtod_l+0x860>)
 80078a8:	4682      	mov	sl, r0
 80078aa:	400b      	ands	r3, r1
 80078ac:	468b      	mov	fp, r1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f ae00 	bne.w	80074b4 <_strtod_l+0x44c>
 80078b4:	2322      	movs	r3, #34	@ 0x22
 80078b6:	9a05      	ldr	r2, [sp, #20]
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	e5fb      	b.n	80074b4 <_strtod_l+0x44c>
 80078bc:	0800c5e8 	.word	0x0800c5e8
 80078c0:	fffffc02 	.word	0xfffffc02
 80078c4:	39500000 	.word	0x39500000
 80078c8:	7ff00000 	.word	0x7ff00000
 80078cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078d0:	d165      	bne.n	800799e <_strtod_l+0x936>
 80078d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d8:	b35a      	cbz	r2, 8007932 <_strtod_l+0x8ca>
 80078da:	4a99      	ldr	r2, [pc, #612]	@ (8007b40 <_strtod_l+0xad8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d12b      	bne.n	8007938 <_strtod_l+0x8d0>
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	4651      	mov	r1, sl
 80078e4:	b303      	cbz	r3, 8007928 <_strtod_l+0x8c0>
 80078e6:	465a      	mov	r2, fp
 80078e8:	4b96      	ldr	r3, [pc, #600]	@ (8007b44 <_strtod_l+0xadc>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80078f0:	f04f 32ff 	mov.w	r2, #4294967295
 80078f4:	d81b      	bhi.n	800792e <_strtod_l+0x8c6>
 80078f6:	0d1b      	lsrs	r3, r3, #20
 80078f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	4299      	cmp	r1, r3
 8007902:	d119      	bne.n	8007938 <_strtod_l+0x8d0>
 8007904:	4b90      	ldr	r3, [pc, #576]	@ (8007b48 <_strtod_l+0xae0>)
 8007906:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007908:	429a      	cmp	r2, r3
 800790a:	d102      	bne.n	8007912 <_strtod_l+0x8aa>
 800790c:	3101      	adds	r1, #1
 800790e:	f43f adc6 	beq.w	800749e <_strtod_l+0x436>
 8007912:	f04f 0a00 	mov.w	sl, #0
 8007916:	4b8b      	ldr	r3, [pc, #556]	@ (8007b44 <_strtod_l+0xadc>)
 8007918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800791a:	401a      	ands	r2, r3
 800791c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1b9      	bne.n	800789a <_strtod_l+0x832>
 8007926:	e5c5      	b.n	80074b4 <_strtod_l+0x44c>
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	e7e8      	b.n	8007900 <_strtod_l+0x898>
 800792e:	4613      	mov	r3, r2
 8007930:	e7e6      	b.n	8007900 <_strtod_l+0x898>
 8007932:	ea53 030a 	orrs.w	r3, r3, sl
 8007936:	d0a2      	beq.n	800787e <_strtod_l+0x816>
 8007938:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800793a:	b1db      	cbz	r3, 8007974 <_strtod_l+0x90c>
 800793c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800793e:	4213      	tst	r3, r2
 8007940:	d0ee      	beq.n	8007920 <_strtod_l+0x8b8>
 8007942:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007944:	4650      	mov	r0, sl
 8007946:	4659      	mov	r1, fp
 8007948:	9a08      	ldr	r2, [sp, #32]
 800794a:	b1bb      	cbz	r3, 800797c <_strtod_l+0x914>
 800794c:	f7ff fb6a 	bl	8007024 <sulp>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007958:	f7f8 fc22 	bl	80001a0 <__adddf3>
 800795c:	4682      	mov	sl, r0
 800795e:	468b      	mov	fp, r1
 8007960:	e7de      	b.n	8007920 <_strtod_l+0x8b8>
 8007962:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007966:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800796a:	f04f 3aff 	mov.w	sl, #4294967295
 800796e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007972:	e7d5      	b.n	8007920 <_strtod_l+0x8b8>
 8007974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007976:	ea13 0f0a 	tst.w	r3, sl
 800797a:	e7e1      	b.n	8007940 <_strtod_l+0x8d8>
 800797c:	f7ff fb52 	bl	8007024 <sulp>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007988:	f7f8 fc08 	bl	800019c <__aeabi_dsub>
 800798c:	2200      	movs	r2, #0
 800798e:	2300      	movs	r3, #0
 8007990:	4682      	mov	sl, r0
 8007992:	468b      	mov	fp, r1
 8007994:	f7f9 f822 	bl	80009dc <__aeabi_dcmpeq>
 8007998:	2800      	cmp	r0, #0
 800799a:	d0c1      	beq.n	8007920 <_strtod_l+0x8b8>
 800799c:	e615      	b.n	80075ca <_strtod_l+0x562>
 800799e:	4641      	mov	r1, r8
 80079a0:	4620      	mov	r0, r4
 80079a2:	f002 fb3f 	bl	800a024 <__ratio>
 80079a6:	2200      	movs	r2, #0
 80079a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	f7f9 f828 	bl	8000a04 <__aeabi_dcmple>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d06d      	beq.n	8007a94 <_strtod_l+0xa2c>
 80079b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d178      	bne.n	8007ab0 <_strtod_l+0xa48>
 80079be:	f1ba 0f00 	cmp.w	sl, #0
 80079c2:	d156      	bne.n	8007a72 <_strtod_l+0xa0a>
 80079c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d158      	bne.n	8007a80 <_strtod_l+0xa18>
 80079ce:	2200      	movs	r2, #0
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b4c <_strtod_l+0xae4>)
 80079d6:	f7f9 f80b 	bl	80009f0 <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d157      	bne.n	8007a8e <_strtod_l+0xa26>
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	2200      	movs	r2, #0
 80079e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b50 <_strtod_l+0xae8>)
 80079e6:	f7f8 fd91 	bl	800050c <__aeabi_dmul>
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80079f2:	9606      	str	r6, [sp, #24]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079fa:	4d52      	ldr	r5, [pc, #328]	@ (8007b44 <_strtod_l+0xadc>)
 80079fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a02:	401d      	ands	r5, r3
 8007a04:	4b53      	ldr	r3, [pc, #332]	@ (8007b54 <_strtod_l+0xaec>)
 8007a06:	429d      	cmp	r5, r3
 8007a08:	f040 80aa 	bne.w	8007b60 <_strtod_l+0xaf8>
 8007a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a0e:	4650      	mov	r0, sl
 8007a10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a14:	4659      	mov	r1, fp
 8007a16:	f002 fa45 	bl	8009ea4 <__ulp>
 8007a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a1e:	f7f8 fd75 	bl	800050c <__aeabi_dmul>
 8007a22:	4652      	mov	r2, sl
 8007a24:	465b      	mov	r3, fp
 8007a26:	f7f8 fbbb 	bl	80001a0 <__adddf3>
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4945      	ldr	r1, [pc, #276]	@ (8007b44 <_strtod_l+0xadc>)
 8007a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b58 <_strtod_l+0xaf0>)
 8007a30:	4019      	ands	r1, r3
 8007a32:	4291      	cmp	r1, r2
 8007a34:	4682      	mov	sl, r0
 8007a36:	d942      	bls.n	8007abe <_strtod_l+0xa56>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a3a:	4b43      	ldr	r3, [pc, #268]	@ (8007b48 <_strtod_l+0xae0>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d103      	bne.n	8007a48 <_strtod_l+0x9e0>
 8007a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a42:	3301      	adds	r3, #1
 8007a44:	f43f ad2b 	beq.w	800749e <_strtod_l+0x436>
 8007a48:	f04f 3aff 	mov.w	sl, #4294967295
 8007a4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007b48 <_strtod_l+0xae0>
 8007a50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a52:	9805      	ldr	r0, [sp, #20]
 8007a54:	f001 fef4 	bl	8009840 <_Bfree>
 8007a58:	4649      	mov	r1, r9
 8007a5a:	9805      	ldr	r0, [sp, #20]
 8007a5c:	f001 fef0 	bl	8009840 <_Bfree>
 8007a60:	4641      	mov	r1, r8
 8007a62:	9805      	ldr	r0, [sp, #20]
 8007a64:	f001 feec 	bl	8009840 <_Bfree>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	9805      	ldr	r0, [sp, #20]
 8007a6c:	f001 fee8 	bl	8009840 <_Bfree>
 8007a70:	e618      	b.n	80076a4 <_strtod_l+0x63c>
 8007a72:	f1ba 0f01 	cmp.w	sl, #1
 8007a76:	d103      	bne.n	8007a80 <_strtod_l+0xa18>
 8007a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f43f ada5 	beq.w	80075ca <_strtod_l+0x562>
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b36      	ldr	r3, [pc, #216]	@ (8007b5c <_strtod_l+0xaf4>)
 8007a84:	2600      	movs	r6, #0
 8007a86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a8a:	4f30      	ldr	r7, [pc, #192]	@ (8007b4c <_strtod_l+0xae4>)
 8007a8c:	e7b3      	b.n	80079f6 <_strtod_l+0x98e>
 8007a8e:	2600      	movs	r6, #0
 8007a90:	4f2f      	ldr	r7, [pc, #188]	@ (8007b50 <_strtod_l+0xae8>)
 8007a92:	e7ac      	b.n	80079ee <_strtod_l+0x986>
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	4b2d      	ldr	r3, [pc, #180]	@ (8007b50 <_strtod_l+0xae8>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f7f8 fd36 	bl	800050c <__aeabi_dmul>
 8007aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0a1      	beq.n	80079ee <_strtod_l+0x986>
 8007aaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007aae:	e7a2      	b.n	80079f6 <_strtod_l+0x98e>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4b26      	ldr	r3, [pc, #152]	@ (8007b4c <_strtod_l+0xae4>)
 8007ab4:	4616      	mov	r6, r2
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007abc:	e79b      	b.n	80079f6 <_strtod_l+0x98e>
 8007abe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1c1      	bne.n	8007a50 <_strtod_l+0x9e8>
 8007acc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ad0:	0d1b      	lsrs	r3, r3, #20
 8007ad2:	051b      	lsls	r3, r3, #20
 8007ad4:	429d      	cmp	r5, r3
 8007ad6:	d1bb      	bne.n	8007a50 <_strtod_l+0x9e8>
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 fba0 	bl	8001220 <__aeabi_d2lz>
 8007ae0:	f7f8 fce6 	bl	80004b0 <__aeabi_l2d>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fb56 	bl	800019c <__aeabi_dsub>
 8007af0:	460b      	mov	r3, r1
 8007af2:	4602      	mov	r2, r0
 8007af4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007af8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007afe:	ea46 060a 	orr.w	r6, r6, sl
 8007b02:	431e      	orrs	r6, r3
 8007b04:	d069      	beq.n	8007bda <_strtod_l+0xb72>
 8007b06:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b30 <_strtod_l+0xac8>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 ff70 	bl	80009f0 <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f47f accf 	bne.w	80074b4 <_strtod_l+0x44c>
 8007b16:	a308      	add	r3, pc, #32	@ (adr r3, 8007b38 <_strtod_l+0xad0>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b20:	f7f8 ff84 	bl	8000a2c <__aeabi_dcmpgt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d093      	beq.n	8007a50 <_strtod_l+0x9e8>
 8007b28:	e4c4      	b.n	80074b4 <_strtod_l+0x44c>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	94a03595 	.word	0x94a03595
 8007b34:	3fdfffff 	.word	0x3fdfffff
 8007b38:	35afe535 	.word	0x35afe535
 8007b3c:	3fe00000 	.word	0x3fe00000
 8007b40:	000fffff 	.word	0x000fffff
 8007b44:	7ff00000 	.word	0x7ff00000
 8007b48:	7fefffff 	.word	0x7fefffff
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	3fe00000 	.word	0x3fe00000
 8007b54:	7fe00000 	.word	0x7fe00000
 8007b58:	7c9fffff 	.word	0x7c9fffff
 8007b5c:	bff00000 	.word	0xbff00000
 8007b60:	9b08      	ldr	r3, [sp, #32]
 8007b62:	b323      	cbz	r3, 8007bae <_strtod_l+0xb46>
 8007b64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b68:	d821      	bhi.n	8007bae <_strtod_l+0xb46>
 8007b6a:	a327      	add	r3, pc, #156	@ (adr r3, 8007c08 <_strtod_l+0xba0>)
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 ff46 	bl	8000a04 <__aeabi_dcmple>
 8007b78:	b1a0      	cbz	r0, 8007ba4 <_strtod_l+0xb3c>
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7f8 ff75 	bl	8000a6c <__aeabi_d2uiz>
 8007b82:	2801      	cmp	r0, #1
 8007b84:	bf38      	it	cc
 8007b86:	2001      	movcc	r0, #1
 8007b88:	f7f8 fc46 	bl	8000418 <__aeabi_ui2d>
 8007b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	b9fb      	cbnz	r3, 8007bd4 <_strtod_l+0xb6c>
 8007b94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b98:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ba0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ba4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ba6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007baa:	1b5b      	subs	r3, r3, r5
 8007bac:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bb6:	f002 f975 	bl	8009ea4 <__ulp>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	f7f8 fca3 	bl	800050c <__aeabi_dmul>
 8007bc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bca:	f7f8 fae9 	bl	80001a0 <__adddf3>
 8007bce:	4682      	mov	sl, r0
 8007bd0:	468b      	mov	fp, r1
 8007bd2:	e776      	b.n	8007ac2 <_strtod_l+0xa5a>
 8007bd4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007bd8:	e7e0      	b.n	8007b9c <_strtod_l+0xb34>
 8007bda:	a30d      	add	r3, pc, #52	@ (adr r3, 8007c10 <_strtod_l+0xba8>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 ff06 	bl	80009f0 <__aeabi_dcmplt>
 8007be4:	e79e      	b.n	8007b24 <_strtod_l+0xabc>
 8007be6:	2300      	movs	r3, #0
 8007be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f7ff ba77 	b.w	80070e2 <_strtod_l+0x7a>
 8007bf4:	2a65      	cmp	r2, #101	@ 0x65
 8007bf6:	f43f ab6e 	beq.w	80072d6 <_strtod_l+0x26e>
 8007bfa:	2a45      	cmp	r2, #69	@ 0x45
 8007bfc:	f43f ab6b 	beq.w	80072d6 <_strtod_l+0x26e>
 8007c00:	2301      	movs	r3, #1
 8007c02:	f7ff bba6 	b.w	8007352 <_strtod_l+0x2ea>
 8007c06:	bf00      	nop
 8007c08:	ffc00000 	.word	0xffc00000
 8007c0c:	41dfffff 	.word	0x41dfffff
 8007c10:	94a03595 	.word	0x94a03595
 8007c14:	3fcfffff 	.word	0x3fcfffff

08007c18 <strtod>:
 8007c18:	460a      	mov	r2, r1
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4802      	ldr	r0, [pc, #8]	@ (8007c28 <strtod+0x10>)
 8007c1e:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <strtod+0x14>)
 8007c20:	6800      	ldr	r0, [r0, #0]
 8007c22:	f7ff ba21 	b.w	8007068 <_strtod_l>
 8007c26:	bf00      	nop
 8007c28:	2000055c 	.word	0x2000055c
 8007c2c:	200003f0 	.word	0x200003f0

08007c30 <_strtol_l.constprop.0>:
 8007c30:	2b24      	cmp	r3, #36	@ 0x24
 8007c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c36:	4686      	mov	lr, r0
 8007c38:	4690      	mov	r8, r2
 8007c3a:	d801      	bhi.n	8007c40 <_strtol_l.constprop.0+0x10>
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d106      	bne.n	8007c4e <_strtol_l.constprop.0+0x1e>
 8007c40:	f001 f8b6 	bl	8008db0 <__errno>
 8007c44:	2316      	movs	r3, #22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4e:	460d      	mov	r5, r1
 8007c50:	4833      	ldr	r0, [pc, #204]	@ (8007d20 <_strtol_l.constprop.0+0xf0>)
 8007c52:	462a      	mov	r2, r5
 8007c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c58:	5d06      	ldrb	r6, [r0, r4]
 8007c5a:	f016 0608 	ands.w	r6, r6, #8
 8007c5e:	d1f8      	bne.n	8007c52 <_strtol_l.constprop.0+0x22>
 8007c60:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c62:	d12d      	bne.n	8007cc0 <_strtol_l.constprop.0+0x90>
 8007c64:	2601      	movs	r6, #1
 8007c66:	782c      	ldrb	r4, [r5, #0]
 8007c68:	1c95      	adds	r5, r2, #2
 8007c6a:	f033 0210 	bics.w	r2, r3, #16
 8007c6e:	d109      	bne.n	8007c84 <_strtol_l.constprop.0+0x54>
 8007c70:	2c30      	cmp	r4, #48	@ 0x30
 8007c72:	d12a      	bne.n	8007cca <_strtol_l.constprop.0+0x9a>
 8007c74:	782a      	ldrb	r2, [r5, #0]
 8007c76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c7a:	2a58      	cmp	r2, #88	@ 0x58
 8007c7c:	d125      	bne.n	8007cca <_strtol_l.constprop.0+0x9a>
 8007c7e:	2310      	movs	r3, #16
 8007c80:	786c      	ldrb	r4, [r5, #1]
 8007c82:	3502      	adds	r5, #2
 8007c84:	2200      	movs	r2, #0
 8007c86:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c8e:	fbbc f9f3 	udiv	r9, ip, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c9c:	2f09      	cmp	r7, #9
 8007c9e:	d81b      	bhi.n	8007cd8 <_strtol_l.constprop.0+0xa8>
 8007ca0:	463c      	mov	r4, r7
 8007ca2:	42a3      	cmp	r3, r4
 8007ca4:	dd27      	ble.n	8007cf6 <_strtol_l.constprop.0+0xc6>
 8007ca6:	1c57      	adds	r7, r2, #1
 8007ca8:	d007      	beq.n	8007cba <_strtol_l.constprop.0+0x8a>
 8007caa:	4581      	cmp	r9, r0
 8007cac:	d320      	bcc.n	8007cf0 <_strtol_l.constprop.0+0xc0>
 8007cae:	d101      	bne.n	8007cb4 <_strtol_l.constprop.0+0x84>
 8007cb0:	45a2      	cmp	sl, r4
 8007cb2:	db1d      	blt.n	8007cf0 <_strtol_l.constprop.0+0xc0>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fb00 4003 	mla	r0, r0, r3, r4
 8007cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cbe:	e7eb      	b.n	8007c98 <_strtol_l.constprop.0+0x68>
 8007cc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8007cc2:	bf04      	itt	eq
 8007cc4:	782c      	ldrbeq	r4, [r5, #0]
 8007cc6:	1c95      	addeq	r5, r2, #2
 8007cc8:	e7cf      	b.n	8007c6a <_strtol_l.constprop.0+0x3a>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1da      	bne.n	8007c84 <_strtol_l.constprop.0+0x54>
 8007cce:	2c30      	cmp	r4, #48	@ 0x30
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2308      	moveq	r3, #8
 8007cd4:	230a      	movne	r3, #10
 8007cd6:	e7d5      	b.n	8007c84 <_strtol_l.constprop.0+0x54>
 8007cd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007cdc:	2f19      	cmp	r7, #25
 8007cde:	d801      	bhi.n	8007ce4 <_strtol_l.constprop.0+0xb4>
 8007ce0:	3c37      	subs	r4, #55	@ 0x37
 8007ce2:	e7de      	b.n	8007ca2 <_strtol_l.constprop.0+0x72>
 8007ce4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ce8:	2f19      	cmp	r7, #25
 8007cea:	d804      	bhi.n	8007cf6 <_strtol_l.constprop.0+0xc6>
 8007cec:	3c57      	subs	r4, #87	@ 0x57
 8007cee:	e7d8      	b.n	8007ca2 <_strtol_l.constprop.0+0x72>
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	e7e1      	b.n	8007cba <_strtol_l.constprop.0+0x8a>
 8007cf6:	1c53      	adds	r3, r2, #1
 8007cf8:	d108      	bne.n	8007d0c <_strtol_l.constprop.0+0xdc>
 8007cfa:	2322      	movs	r3, #34	@ 0x22
 8007cfc:	4660      	mov	r0, ip
 8007cfe:	f8ce 3000 	str.w	r3, [lr]
 8007d02:	f1b8 0f00 	cmp.w	r8, #0
 8007d06:	d0a0      	beq.n	8007c4a <_strtol_l.constprop.0+0x1a>
 8007d08:	1e69      	subs	r1, r5, #1
 8007d0a:	e006      	b.n	8007d1a <_strtol_l.constprop.0+0xea>
 8007d0c:	b106      	cbz	r6, 8007d10 <_strtol_l.constprop.0+0xe0>
 8007d0e:	4240      	negs	r0, r0
 8007d10:	f1b8 0f00 	cmp.w	r8, #0
 8007d14:	d099      	beq.n	8007c4a <_strtol_l.constprop.0+0x1a>
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d1f6      	bne.n	8007d08 <_strtol_l.constprop.0+0xd8>
 8007d1a:	f8c8 1000 	str.w	r1, [r8]
 8007d1e:	e794      	b.n	8007c4a <_strtol_l.constprop.0+0x1a>
 8007d20:	0800c611 	.word	0x0800c611

08007d24 <_strtol_r>:
 8007d24:	f7ff bf84 	b.w	8007c30 <_strtol_l.constprop.0>

08007d28 <strtol>:
 8007d28:	4613      	mov	r3, r2
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	4802      	ldr	r0, [pc, #8]	@ (8007d38 <strtol+0x10>)
 8007d30:	6800      	ldr	r0, [r0, #0]
 8007d32:	f7ff bf7d 	b.w	8007c30 <_strtol_l.constprop.0>
 8007d36:	bf00      	nop
 8007d38:	2000055c 	.word	0x2000055c

08007d3c <std>:
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	4604      	mov	r4, r0
 8007d42:	e9c0 3300 	strd	r3, r3, [r0]
 8007d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d4a:	6083      	str	r3, [r0, #8]
 8007d4c:	8181      	strh	r1, [r0, #12]
 8007d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d50:	81c2      	strh	r2, [r0, #14]
 8007d52:	6183      	str	r3, [r0, #24]
 8007d54:	4619      	mov	r1, r3
 8007d56:	2208      	movs	r2, #8
 8007d58:	305c      	adds	r0, #92	@ 0x5c
 8007d5a:	f000 f8f6 	bl	8007f4a <memset>
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <std+0x58>)
 8007d60:	6224      	str	r4, [r4, #32]
 8007d62:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <std+0x5c>)
 8007d66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d68:	4b0c      	ldr	r3, [pc, #48]	@ (8007d9c <std+0x60>)
 8007d6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <std+0x64>)
 8007d6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d70:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <std+0x68>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d006      	beq.n	8007d84 <std+0x48>
 8007d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d7a:	4294      	cmp	r4, r2
 8007d7c:	d002      	beq.n	8007d84 <std+0x48>
 8007d7e:	33d0      	adds	r3, #208	@ 0xd0
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d105      	bne.n	8007d90 <std+0x54>
 8007d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8c:	f001 b83a 	b.w	8008e04 <__retarget_lock_init_recursive>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop
 8007d94:	08007ec1 	.word	0x08007ec1
 8007d98:	08007ee7 	.word	0x08007ee7
 8007d9c:	08007f1f 	.word	0x08007f1f
 8007da0:	08007f43 	.word	0x08007f43
 8007da4:	2000088c 	.word	0x2000088c

08007da8 <stdio_exit_handler>:
 8007da8:	4a02      	ldr	r2, [pc, #8]	@ (8007db4 <stdio_exit_handler+0xc>)
 8007daa:	4903      	ldr	r1, [pc, #12]	@ (8007db8 <stdio_exit_handler+0x10>)
 8007dac:	4803      	ldr	r0, [pc, #12]	@ (8007dbc <stdio_exit_handler+0x14>)
 8007dae:	f000 b869 	b.w	8007e84 <_fwalk_sglue>
 8007db2:	bf00      	nop
 8007db4:	200003dc 	.word	0x200003dc
 8007db8:	0800a31d 	.word	0x0800a31d
 8007dbc:	20000560 	.word	0x20000560

08007dc0 <cleanup_stdio>:
 8007dc0:	6841      	ldr	r1, [r0, #4]
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <cleanup_stdio+0x34>)
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	4604      	mov	r4, r0
 8007dca:	d001      	beq.n	8007dd0 <cleanup_stdio+0x10>
 8007dcc:	f002 faa6 	bl	800a31c <_fflush_r>
 8007dd0:	68a1      	ldr	r1, [r4, #8]
 8007dd2:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <cleanup_stdio+0x38>)
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d002      	beq.n	8007dde <cleanup_stdio+0x1e>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f002 fa9f 	bl	800a31c <_fflush_r>
 8007dde:	68e1      	ldr	r1, [r4, #12]
 8007de0:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <cleanup_stdio+0x3c>)
 8007de2:	4299      	cmp	r1, r3
 8007de4:	d004      	beq.n	8007df0 <cleanup_stdio+0x30>
 8007de6:	4620      	mov	r0, r4
 8007de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dec:	f002 ba96 	b.w	800a31c <_fflush_r>
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop
 8007df4:	2000088c 	.word	0x2000088c
 8007df8:	200008f4 	.word	0x200008f4
 8007dfc:	2000095c 	.word	0x2000095c

08007e00 <global_stdio_init.part.0>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4b0b      	ldr	r3, [pc, #44]	@ (8007e30 <global_stdio_init.part.0+0x30>)
 8007e04:	4c0b      	ldr	r4, [pc, #44]	@ (8007e34 <global_stdio_init.part.0+0x34>)
 8007e06:	4a0c      	ldr	r2, [pc, #48]	@ (8007e38 <global_stdio_init.part.0+0x38>)
 8007e08:	4620      	mov	r0, r4
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f7ff ff94 	bl	8007d3c <std>
 8007e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e18:	2201      	movs	r2, #1
 8007e1a:	2109      	movs	r1, #9
 8007e1c:	f7ff ff8e 	bl	8007d3c <std>
 8007e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e24:	2202      	movs	r2, #2
 8007e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2a:	2112      	movs	r1, #18
 8007e2c:	f7ff bf86 	b.w	8007d3c <std>
 8007e30:	200009c4 	.word	0x200009c4
 8007e34:	2000088c 	.word	0x2000088c
 8007e38:	08007da9 	.word	0x08007da9

08007e3c <__sfp_lock_acquire>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	@ (8007e44 <__sfp_lock_acquire+0x8>)
 8007e3e:	f000 bfe3 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8007e42:	bf00      	nop
 8007e44:	200009f3 	.word	0x200009f3

08007e48 <__sfp_lock_release>:
 8007e48:	4801      	ldr	r0, [pc, #4]	@ (8007e50 <__sfp_lock_release+0x8>)
 8007e4a:	f000 bfdf 	b.w	8008e0c <__retarget_lock_release_recursive>
 8007e4e:	bf00      	nop
 8007e50:	200009f3 	.word	0x200009f3

08007e54 <__sinit>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	f7ff fff0 	bl	8007e3c <__sfp_lock_acquire>
 8007e5c:	6a23      	ldr	r3, [r4, #32]
 8007e5e:	b11b      	cbz	r3, 8007e68 <__sinit+0x14>
 8007e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e64:	f7ff bff0 	b.w	8007e48 <__sfp_lock_release>
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <__sinit+0x28>)
 8007e6a:	6223      	str	r3, [r4, #32]
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <__sinit+0x2c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f5      	bne.n	8007e60 <__sinit+0xc>
 8007e74:	f7ff ffc4 	bl	8007e00 <global_stdio_init.part.0>
 8007e78:	e7f2      	b.n	8007e60 <__sinit+0xc>
 8007e7a:	bf00      	nop
 8007e7c:	08007dc1 	.word	0x08007dc1
 8007e80:	200009c4 	.word	0x200009c4

08007e84 <_fwalk_sglue>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	4607      	mov	r7, r0
 8007e8a:	4688      	mov	r8, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e94:	f1b9 0901 	subs.w	r9, r9, #1
 8007e98:	d505      	bpl.n	8007ea6 <_fwalk_sglue+0x22>
 8007e9a:	6824      	ldr	r4, [r4, #0]
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	d1f7      	bne.n	8007e90 <_fwalk_sglue+0xc>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d907      	bls.n	8007ebc <_fwalk_sglue+0x38>
 8007eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	d003      	beq.n	8007ebc <_fwalk_sglue+0x38>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	47c0      	blx	r8
 8007eba:	4306      	orrs	r6, r0
 8007ebc:	3568      	adds	r5, #104	@ 0x68
 8007ebe:	e7e9      	b.n	8007e94 <_fwalk_sglue+0x10>

08007ec0 <__sread>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	f000 ff4e 	bl	8008d68 <_read_r>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	bfab      	itete	ge
 8007ed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ed4:	181b      	addge	r3, r3, r0
 8007ed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eda:	bfac      	ite	ge
 8007edc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ede:	81a3      	strhlt	r3, [r4, #12]
 8007ee0:	bd10      	pop	{r4, pc}

08007ee2 <__seofread>:
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	4770      	bx	lr

08007ee6 <__swrite>:
 8007ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	461f      	mov	r7, r3
 8007eec:	898b      	ldrh	r3, [r1, #12]
 8007eee:	4605      	mov	r5, r0
 8007ef0:	05db      	lsls	r3, r3, #23
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	d505      	bpl.n	8007f04 <__swrite+0x1e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	2200      	movs	r2, #0
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	f000 ff20 	bl	8008d44 <_lseek_r>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	4632      	mov	r2, r6
 8007f08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	4628      	mov	r0, r5
 8007f10:	463b      	mov	r3, r7
 8007f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	f000 bf37 	b.w	8008d8c <_write_r>

08007f1e <__sseek>:
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	460c      	mov	r4, r1
 8007f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f26:	f000 ff0d 	bl	8008d44 <_lseek_r>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	bf15      	itete	ne
 8007f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f3a:	81a3      	strheq	r3, [r4, #12]
 8007f3c:	bf18      	it	ne
 8007f3e:	81a3      	strhne	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__sclose>:
 8007f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f46:	f000 beed 	b.w	8008d24 <_close_r>

08007f4a <memset>:
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4402      	add	r2, r0
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d100      	bne.n	8007f54 <memset+0xa>
 8007f52:	4770      	bx	lr
 8007f54:	f803 1b01 	strb.w	r1, [r3], #1
 8007f58:	e7f9      	b.n	8007f4e <memset+0x4>

08007f5a <strncmp>:
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	b16a      	cbz	r2, 8007f7a <strncmp+0x20>
 8007f5e:	3901      	subs	r1, #1
 8007f60:	1884      	adds	r4, r0, r2
 8007f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d103      	bne.n	8007f76 <strncmp+0x1c>
 8007f6e:	42a0      	cmp	r0, r4
 8007f70:	d001      	beq.n	8007f76 <strncmp+0x1c>
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d1f5      	bne.n	8007f62 <strncmp+0x8>
 8007f76:	1ad0      	subs	r0, r2, r3
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	e7fc      	b.n	8007f78 <strncmp+0x1e>
	...

08007f80 <strtok>:
 8007f80:	4b16      	ldr	r3, [pc, #88]	@ (8007fdc <strtok+0x5c>)
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	681f      	ldr	r7, [r3, #0]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	b9ec      	cbnz	r4, 8007fcc <strtok+0x4c>
 8007f90:	2050      	movs	r0, #80	@ 0x50
 8007f92:	f001 fb45 	bl	8009620 <malloc>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6478      	str	r0, [r7, #68]	@ 0x44
 8007f9a:	b920      	cbnz	r0, 8007fa6 <strtok+0x26>
 8007f9c:	215b      	movs	r1, #91	@ 0x5b
 8007f9e:	4b10      	ldr	r3, [pc, #64]	@ (8007fe0 <strtok+0x60>)
 8007fa0:	4810      	ldr	r0, [pc, #64]	@ (8007fe4 <strtok+0x64>)
 8007fa2:	f000 ff51 	bl	8008e48 <__assert_func>
 8007fa6:	e9c0 4400 	strd	r4, r4, [r0]
 8007faa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007fae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007fb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007fb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007fba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007fbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007fc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007fc6:	6184      	str	r4, [r0, #24]
 8007fc8:	7704      	strb	r4, [r0, #28]
 8007fca:	6244      	str	r4, [r0, #36]	@ 0x24
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd8:	f000 b806 	b.w	8007fe8 <__strtok_r>
 8007fdc:	2000055c 	.word	0x2000055c
 8007fe0:	0800c711 	.word	0x0800c711
 8007fe4:	0800c728 	.word	0x0800c728

08007fe8 <__strtok_r>:
 8007fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fea:	4604      	mov	r4, r0
 8007fec:	b908      	cbnz	r0, 8007ff2 <__strtok_r+0xa>
 8007fee:	6814      	ldr	r4, [r2, #0]
 8007ff0:	b144      	cbz	r4, 8008004 <__strtok_r+0x1c>
 8007ff2:	460f      	mov	r7, r1
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ffa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ffe:	b91e      	cbnz	r6, 8008008 <__strtok_r+0x20>
 8008000:	b965      	cbnz	r5, 800801c <__strtok_r+0x34>
 8008002:	6015      	str	r5, [r2, #0]
 8008004:	2000      	movs	r0, #0
 8008006:	e005      	b.n	8008014 <__strtok_r+0x2c>
 8008008:	42b5      	cmp	r5, r6
 800800a:	d1f6      	bne.n	8007ffa <__strtok_r+0x12>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f0      	bne.n	8007ff2 <__strtok_r+0xa>
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	7003      	strb	r3, [r0, #0]
 8008014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008016:	461c      	mov	r4, r3
 8008018:	e00c      	b.n	8008034 <__strtok_r+0x4c>
 800801a:	b915      	cbnz	r5, 8008022 <__strtok_r+0x3a>
 800801c:	460e      	mov	r6, r1
 800801e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008022:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008026:	42ab      	cmp	r3, r5
 8008028:	d1f7      	bne.n	800801a <__strtok_r+0x32>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f3      	beq.n	8008016 <__strtok_r+0x2e>
 800802e:	2300      	movs	r3, #0
 8008030:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008034:	6014      	str	r4, [r2, #0]
 8008036:	e7ed      	b.n	8008014 <__strtok_r+0x2c>

08008038 <difftime>:
 8008038:	b508      	push	{r3, lr}
 800803a:	1a80      	subs	r0, r0, r2
 800803c:	eb61 0103 	sbc.w	r1, r1, r3
 8008040:	f7f8 fa36 	bl	80004b0 <__aeabi_l2d>
 8008044:	bd08      	pop	{r3, pc}
	...

08008048 <localtime>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4b0b      	ldr	r3, [pc, #44]	@ (8008078 <localtime+0x30>)
 800804c:	4604      	mov	r4, r0
 800804e:	681d      	ldr	r5, [r3, #0]
 8008050:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008052:	b953      	cbnz	r3, 800806a <localtime+0x22>
 8008054:	2024      	movs	r0, #36	@ 0x24
 8008056:	f001 fae3 	bl	8009620 <malloc>
 800805a:	4602      	mov	r2, r0
 800805c:	6368      	str	r0, [r5, #52]	@ 0x34
 800805e:	b920      	cbnz	r0, 800806a <localtime+0x22>
 8008060:	2132      	movs	r1, #50	@ 0x32
 8008062:	4b06      	ldr	r3, [pc, #24]	@ (800807c <localtime+0x34>)
 8008064:	4806      	ldr	r0, [pc, #24]	@ (8008080 <localtime+0x38>)
 8008066:	f000 feef 	bl	8008e48 <__assert_func>
 800806a:	4620      	mov	r0, r4
 800806c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008072:	f000 b807 	b.w	8008084 <localtime_r>
 8008076:	bf00      	nop
 8008078:	2000055c 	.word	0x2000055c
 800807c:	0800c711 	.word	0x0800c711
 8008080:	0800c782 	.word	0x0800c782

08008084 <localtime_r>:
 8008084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008088:	460c      	mov	r4, r1
 800808a:	4680      	mov	r8, r0
 800808c:	f002 f9aa 	bl	800a3e4 <__gettzinfo>
 8008090:	4621      	mov	r1, r4
 8008092:	4605      	mov	r5, r0
 8008094:	4640      	mov	r0, r8
 8008096:	f002 f9a9 	bl	800a3ec <gmtime_r>
 800809a:	6943      	ldr	r3, [r0, #20]
 800809c:	4604      	mov	r4, r0
 800809e:	0799      	lsls	r1, r3, #30
 80080a0:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 80080a4:	d106      	bne.n	80080b4 <localtime_r+0x30>
 80080a6:	2264      	movs	r2, #100	@ 0x64
 80080a8:	fb97 f3f2 	sdiv	r3, r7, r2
 80080ac:	fb02 7313 	mls	r3, r2, r3, r7
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d170      	bne.n	8008196 <localtime_r+0x112>
 80080b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80080b8:	fb97 f3f2 	sdiv	r3, r7, r2
 80080bc:	fb02 7313 	mls	r3, r2, r3, r7
 80080c0:	fab3 f383 	clz	r3, r3
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	2230      	movs	r2, #48	@ 0x30
 80080c8:	4e63      	ldr	r6, [pc, #396]	@ (8008258 <localtime_r+0x1d4>)
 80080ca:	fb02 6603 	mla	r6, r2, r3, r6
 80080ce:	f000 fbf3 	bl	80088b8 <__tz_lock>
 80080d2:	f000 fbfd 	bl	80088d0 <_tzset_unlocked>
 80080d6:	4b61      	ldr	r3, [pc, #388]	@ (800825c <localtime_r+0x1d8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d06a      	beq.n	80081b4 <localtime_r+0x130>
 80080de:	686b      	ldr	r3, [r5, #4]
 80080e0:	42bb      	cmp	r3, r7
 80080e2:	d15a      	bne.n	800819a <localtime_r+0x116>
 80080e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080e8:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80080ec:	682f      	ldr	r7, [r5, #0]
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	d15b      	bne.n	80081aa <localtime_r+0x126>
 80080f2:	4282      	cmp	r2, r0
 80080f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80080f8:	db5e      	blt.n	80081b8 <localtime_r+0x134>
 80080fa:	2301      	movs	r3, #1
 80080fc:	6223      	str	r3, [r4, #32]
 80080fe:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008100:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008104:	fb93 f0f2 	sdiv	r0, r3, r2
 8008108:	fb02 3310 	mls	r3, r2, r0, r3
 800810c:	223c      	movs	r2, #60	@ 0x3c
 800810e:	fb93 f5f2 	sdiv	r5, r3, r2
 8008112:	fb02 3215 	mls	r2, r2, r5, r3
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	68a2      	ldr	r2, [r4, #8]
 800811e:	1b49      	subs	r1, r1, r5
 8008120:	1a12      	subs	r2, r2, r0
 8008122:	2b3b      	cmp	r3, #59	@ 0x3b
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6061      	str	r1, [r4, #4]
 8008128:	60a2      	str	r2, [r4, #8]
 800812a:	dd51      	ble.n	80081d0 <localtime_r+0x14c>
 800812c:	3101      	adds	r1, #1
 800812e:	6061      	str	r1, [r4, #4]
 8008130:	3b3c      	subs	r3, #60	@ 0x3c
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	2b3b      	cmp	r3, #59	@ 0x3b
 8008138:	dd50      	ble.n	80081dc <localtime_r+0x158>
 800813a:	3201      	adds	r2, #1
 800813c:	60a2      	str	r2, [r4, #8]
 800813e:	3b3c      	subs	r3, #60	@ 0x3c
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	2b17      	cmp	r3, #23
 8008146:	dd4f      	ble.n	80081e8 <localtime_r+0x164>
 8008148:	69e2      	ldr	r2, [r4, #28]
 800814a:	3b18      	subs	r3, #24
 800814c:	3201      	adds	r2, #1
 800814e:	61e2      	str	r2, [r4, #28]
 8008150:	69a2      	ldr	r2, [r4, #24]
 8008152:	60a3      	str	r3, [r4, #8]
 8008154:	3201      	adds	r2, #1
 8008156:	2a07      	cmp	r2, #7
 8008158:	bfa8      	it	ge
 800815a:	2200      	movge	r2, #0
 800815c:	61a2      	str	r2, [r4, #24]
 800815e:	68e2      	ldr	r2, [r4, #12]
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	3201      	adds	r2, #1
 8008164:	60e2      	str	r2, [r4, #12]
 8008166:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800816a:	428a      	cmp	r2, r1
 800816c:	dd0e      	ble.n	800818c <localtime_r+0x108>
 800816e:	2b0b      	cmp	r3, #11
 8008170:	eba2 0201 	sub.w	r2, r2, r1
 8008174:	60e2      	str	r2, [r4, #12]
 8008176:	f103 0201 	add.w	r2, r3, #1
 800817a:	bf05      	ittet	eq
 800817c:	2200      	moveq	r2, #0
 800817e:	6963      	ldreq	r3, [r4, #20]
 8008180:	6122      	strne	r2, [r4, #16]
 8008182:	3301      	addeq	r3, #1
 8008184:	bf02      	ittt	eq
 8008186:	6122      	streq	r2, [r4, #16]
 8008188:	6163      	streq	r3, [r4, #20]
 800818a:	61e2      	streq	r2, [r4, #28]
 800818c:	f000 fb9a 	bl	80088c4 <__tz_unlock>
 8008190:	4620      	mov	r0, r4
 8008192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008196:	2301      	movs	r3, #1
 8008198:	e795      	b.n	80080c6 <localtime_r+0x42>
 800819a:	4638      	mov	r0, r7
 800819c:	f000 fae4 	bl	8008768 <__tzcalc_limits>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d19f      	bne.n	80080e4 <localtime_r+0x60>
 80081a4:	f04f 33ff 	mov.w	r3, #4294967295
 80081a8:	e004      	b.n	80081b4 <localtime_r+0x130>
 80081aa:	4282      	cmp	r2, r0
 80081ac:	eb73 0101 	sbcs.w	r1, r3, r1
 80081b0:	da02      	bge.n	80081b8 <localtime_r+0x134>
 80081b2:	2300      	movs	r3, #0
 80081b4:	6223      	str	r3, [r4, #32]
 80081b6:	e009      	b.n	80081cc <localtime_r+0x148>
 80081b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80081bc:	4282      	cmp	r2, r0
 80081be:	418b      	sbcs	r3, r1
 80081c0:	bfb4      	ite	lt
 80081c2:	2301      	movlt	r3, #1
 80081c4:	2300      	movge	r3, #0
 80081c6:	6223      	str	r3, [r4, #32]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d198      	bne.n	80080fe <localtime_r+0x7a>
 80081cc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80081ce:	e797      	b.n	8008100 <localtime_r+0x7c>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	daaf      	bge.n	8008134 <localtime_r+0xb0>
 80081d4:	3901      	subs	r1, #1
 80081d6:	6061      	str	r1, [r4, #4]
 80081d8:	333c      	adds	r3, #60	@ 0x3c
 80081da:	e7aa      	b.n	8008132 <localtime_r+0xae>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dab0      	bge.n	8008142 <localtime_r+0xbe>
 80081e0:	3a01      	subs	r2, #1
 80081e2:	60a2      	str	r2, [r4, #8]
 80081e4:	333c      	adds	r3, #60	@ 0x3c
 80081e6:	e7ab      	b.n	8008140 <localtime_r+0xbc>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dacf      	bge.n	800818c <localtime_r+0x108>
 80081ec:	69e2      	ldr	r2, [r4, #28]
 80081ee:	3318      	adds	r3, #24
 80081f0:	3a01      	subs	r2, #1
 80081f2:	61e2      	str	r2, [r4, #28]
 80081f4:	69a2      	ldr	r2, [r4, #24]
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	3a01      	subs	r2, #1
 80081fa:	bf48      	it	mi
 80081fc:	2206      	movmi	r2, #6
 80081fe:	61a2      	str	r2, [r4, #24]
 8008200:	68e2      	ldr	r2, [r4, #12]
 8008202:	3a01      	subs	r2, #1
 8008204:	60e2      	str	r2, [r4, #12]
 8008206:	2a00      	cmp	r2, #0
 8008208:	d1c0      	bne.n	800818c <localtime_r+0x108>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	3b01      	subs	r3, #1
 800820e:	d405      	bmi.n	800821c <localtime_r+0x198>
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008218:	60e3      	str	r3, [r4, #12]
 800821a:	e7b7      	b.n	800818c <localtime_r+0x108>
 800821c:	230b      	movs	r3, #11
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	6963      	ldr	r3, [r4, #20]
 8008222:	1e5a      	subs	r2, r3, #1
 8008224:	6162      	str	r2, [r4, #20]
 8008226:	0792      	lsls	r2, r2, #30
 8008228:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800822c:	d105      	bne.n	800823a <localtime_r+0x1b6>
 800822e:	2164      	movs	r1, #100	@ 0x64
 8008230:	fb93 f2f1 	sdiv	r2, r3, r1
 8008234:	fb01 3212 	mls	r2, r1, r2, r3
 8008238:	b962      	cbnz	r2, 8008254 <localtime_r+0x1d0>
 800823a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800823e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008242:	fb02 3311 	mls	r3, r2, r1, r3
 8008246:	fab3 f383 	clz	r3, r3
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008250:	61e3      	str	r3, [r4, #28]
 8008252:	e7de      	b.n	8008212 <localtime_r+0x18e>
 8008254:	2301      	movs	r3, #1
 8008256:	e7f9      	b.n	800824c <localtime_r+0x1c8>
 8008258:	0800c83c 	.word	0x0800c83c
 800825c:	200009e8 	.word	0x200009e8

08008260 <validate_structure>:
 8008260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008262:	6801      	ldr	r1, [r0, #0]
 8008264:	4604      	mov	r4, r0
 8008266:	293b      	cmp	r1, #59	@ 0x3b
 8008268:	d911      	bls.n	800828e <validate_structure+0x2e>
 800826a:	223c      	movs	r2, #60	@ 0x3c
 800826c:	4668      	mov	r0, sp
 800826e:	f000 fe09 	bl	8008e84 <div>
 8008272:	9a01      	ldr	r2, [sp, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	9900      	ldr	r1, [sp, #0]
 8008278:	2a00      	cmp	r2, #0
 800827a:	440b      	add	r3, r1
 800827c:	6063      	str	r3, [r4, #4]
 800827e:	bfbb      	ittet	lt
 8008280:	323c      	addlt	r2, #60	@ 0x3c
 8008282:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008286:	6022      	strge	r2, [r4, #0]
 8008288:	6022      	strlt	r2, [r4, #0]
 800828a:	bfb8      	it	lt
 800828c:	6063      	strlt	r3, [r4, #4]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	293b      	cmp	r1, #59	@ 0x3b
 8008292:	d911      	bls.n	80082b8 <validate_structure+0x58>
 8008294:	223c      	movs	r2, #60	@ 0x3c
 8008296:	4668      	mov	r0, sp
 8008298:	f000 fdf4 	bl	8008e84 <div>
 800829c:	9a01      	ldr	r2, [sp, #4]
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	9900      	ldr	r1, [sp, #0]
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	440b      	add	r3, r1
 80082a6:	60a3      	str	r3, [r4, #8]
 80082a8:	bfbb      	ittet	lt
 80082aa:	323c      	addlt	r2, #60	@ 0x3c
 80082ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80082b0:	6062      	strge	r2, [r4, #4]
 80082b2:	6062      	strlt	r2, [r4, #4]
 80082b4:	bfb8      	it	lt
 80082b6:	60a3      	strlt	r3, [r4, #8]
 80082b8:	68a1      	ldr	r1, [r4, #8]
 80082ba:	2917      	cmp	r1, #23
 80082bc:	d911      	bls.n	80082e2 <validate_structure+0x82>
 80082be:	2218      	movs	r2, #24
 80082c0:	4668      	mov	r0, sp
 80082c2:	f000 fddf 	bl	8008e84 <div>
 80082c6:	9a01      	ldr	r2, [sp, #4]
 80082c8:	68e3      	ldr	r3, [r4, #12]
 80082ca:	9900      	ldr	r1, [sp, #0]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	440b      	add	r3, r1
 80082d0:	60e3      	str	r3, [r4, #12]
 80082d2:	bfbb      	ittet	lt
 80082d4:	3218      	addlt	r2, #24
 80082d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80082da:	60a2      	strge	r2, [r4, #8]
 80082dc:	60a2      	strlt	r2, [r4, #8]
 80082de:	bfb8      	it	lt
 80082e0:	60e3      	strlt	r3, [r4, #12]
 80082e2:	6921      	ldr	r1, [r4, #16]
 80082e4:	290b      	cmp	r1, #11
 80082e6:	d911      	bls.n	800830c <validate_structure+0xac>
 80082e8:	220c      	movs	r2, #12
 80082ea:	4668      	mov	r0, sp
 80082ec:	f000 fdca 	bl	8008e84 <div>
 80082f0:	9a01      	ldr	r2, [sp, #4]
 80082f2:	6963      	ldr	r3, [r4, #20]
 80082f4:	9900      	ldr	r1, [sp, #0]
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	440b      	add	r3, r1
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	bfbb      	ittet	lt
 80082fe:	320c      	addlt	r2, #12
 8008300:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008304:	6122      	strge	r2, [r4, #16]
 8008306:	6122      	strlt	r2, [r4, #16]
 8008308:	bfb8      	it	lt
 800830a:	6163      	strlt	r3, [r4, #20]
 800830c:	6963      	ldr	r3, [r4, #20]
 800830e:	079a      	lsls	r2, r3, #30
 8008310:	d11c      	bne.n	800834c <validate_structure+0xec>
 8008312:	2164      	movs	r1, #100	@ 0x64
 8008314:	fb93 f2f1 	sdiv	r2, r3, r1
 8008318:	fb01 3212 	mls	r2, r1, r2, r3
 800831c:	b9c2      	cbnz	r2, 8008350 <validate_structure+0xf0>
 800831e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008322:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008326:	fb93 f1f2 	sdiv	r1, r3, r2
 800832a:	fb02 3311 	mls	r3, r2, r1, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	bf14      	ite	ne
 8008332:	231c      	movne	r3, #28
 8008334:	231d      	moveq	r3, #29
 8008336:	68e2      	ldr	r2, [r4, #12]
 8008338:	2a00      	cmp	r2, #0
 800833a:	dc0b      	bgt.n	8008354 <validate_structure+0xf4>
 800833c:	200b      	movs	r0, #11
 800833e:	2164      	movs	r1, #100	@ 0x64
 8008340:	4d30      	ldr	r5, [pc, #192]	@ (8008404 <validate_structure+0x1a4>)
 8008342:	68e6      	ldr	r6, [r4, #12]
 8008344:	2e00      	cmp	r6, #0
 8008346:	dd30      	ble.n	80083aa <validate_structure+0x14a>
 8008348:	b003      	add	sp, #12
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834c:	231c      	movs	r3, #28
 800834e:	e7f2      	b.n	8008336 <validate_structure+0xd6>
 8008350:	231d      	movs	r3, #29
 8008352:	e7f0      	b.n	8008336 <validate_structure+0xd6>
 8008354:	4d2b      	ldr	r5, [pc, #172]	@ (8008404 <validate_structure+0x1a4>)
 8008356:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800835a:	2a01      	cmp	r2, #1
 800835c:	bf0c      	ite	eq
 800835e:	4618      	moveq	r0, r3
 8008360:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8008364:	4281      	cmp	r1, r0
 8008366:	ddef      	ble.n	8008348 <validate_structure+0xe8>
 8008368:	3201      	adds	r2, #1
 800836a:	1a09      	subs	r1, r1, r0
 800836c:	2a0c      	cmp	r2, #12
 800836e:	60e1      	str	r1, [r4, #12]
 8008370:	6122      	str	r2, [r4, #16]
 8008372:	d1f0      	bne.n	8008356 <validate_structure+0xf6>
 8008374:	2100      	movs	r1, #0
 8008376:	6963      	ldr	r3, [r4, #20]
 8008378:	6121      	str	r1, [r4, #16]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	0791      	lsls	r1, r2, #30
 800837e:	6162      	str	r2, [r4, #20]
 8008380:	d13c      	bne.n	80083fc <validate_structure+0x19c>
 8008382:	2164      	movs	r1, #100	@ 0x64
 8008384:	fb92 f0f1 	sdiv	r0, r2, r1
 8008388:	fb01 2210 	mls	r2, r1, r0, r2
 800838c:	2a00      	cmp	r2, #0
 800838e:	d137      	bne.n	8008400 <validate_structure+0x1a0>
 8008390:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008394:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8008398:	fb93 f1f2 	sdiv	r1, r3, r2
 800839c:	fb02 3311 	mls	r3, r2, r1, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf14      	ite	ne
 80083a4:	231c      	movne	r3, #28
 80083a6:	231d      	moveq	r3, #29
 80083a8:	e7d5      	b.n	8008356 <validate_structure+0xf6>
 80083aa:	6922      	ldr	r2, [r4, #16]
 80083ac:	3a01      	subs	r2, #1
 80083ae:	6122      	str	r2, [r4, #16]
 80083b0:	3201      	adds	r2, #1
 80083b2:	d116      	bne.n	80083e2 <validate_structure+0x182>
 80083b4:	6963      	ldr	r3, [r4, #20]
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	0797      	lsls	r7, r2, #30
 80083ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80083be:	d119      	bne.n	80083f4 <validate_structure+0x194>
 80083c0:	fb92 f7f1 	sdiv	r7, r2, r1
 80083c4:	fb01 2217 	mls	r2, r1, r7, r2
 80083c8:	b9b2      	cbnz	r2, 80083f8 <validate_structure+0x198>
 80083ca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80083ce:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80083d2:	fb93 f7f2 	sdiv	r7, r3, r2
 80083d6:	fb02 3317 	mls	r3, r2, r7, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bf14      	ite	ne
 80083de:	231c      	movne	r3, #28
 80083e0:	231d      	moveq	r3, #29
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	2a01      	cmp	r2, #1
 80083e6:	bf0c      	ite	eq
 80083e8:	461a      	moveq	r2, r3
 80083ea:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 80083ee:	4432      	add	r2, r6
 80083f0:	60e2      	str	r2, [r4, #12]
 80083f2:	e7a6      	b.n	8008342 <validate_structure+0xe2>
 80083f4:	231c      	movs	r3, #28
 80083f6:	e7f4      	b.n	80083e2 <validate_structure+0x182>
 80083f8:	231d      	movs	r3, #29
 80083fa:	e7f2      	b.n	80083e2 <validate_structure+0x182>
 80083fc:	231c      	movs	r3, #28
 80083fe:	e7aa      	b.n	8008356 <validate_structure+0xf6>
 8008400:	231d      	movs	r3, #29
 8008402:	e7a8      	b.n	8008356 <validate_structure+0xf6>
 8008404:	0800c80c 	.word	0x0800c80c

08008408 <mktime>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	b085      	sub	sp, #20
 800840e:	4607      	mov	r7, r0
 8008410:	f001 ffe8 	bl	800a3e4 <__gettzinfo>
 8008414:	4681      	mov	r9, r0
 8008416:	4638      	mov	r0, r7
 8008418:	f7ff ff22 	bl	8008260 <validate_structure>
 800841c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008420:	223c      	movs	r2, #60	@ 0x3c
 8008422:	fb02 4403 	mla	r4, r2, r3, r4
 8008426:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	697d      	ldr	r5, [r7, #20]
 800842e:	fb02 4403 	mla	r4, r2, r3, r4
 8008432:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008436:	4ac1      	ldr	r2, [pc, #772]	@ (800873c <mktime+0x334>)
 8008438:	3e01      	subs	r6, #1
 800843a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800843e:	2b01      	cmp	r3, #1
 8008440:	4416      	add	r6, r2
 8008442:	dd11      	ble.n	8008468 <mktime+0x60>
 8008444:	07a9      	lsls	r1, r5, #30
 8008446:	d10f      	bne.n	8008468 <mktime+0x60>
 8008448:	2264      	movs	r2, #100	@ 0x64
 800844a:	fb95 f3f2 	sdiv	r3, r5, r2
 800844e:	fb02 5313 	mls	r3, r2, r3, r5
 8008452:	b943      	cbnz	r3, 8008466 <mktime+0x5e>
 8008454:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008458:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800845c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008460:	fb02 3311 	mls	r3, r2, r1, r3
 8008464:	b903      	cbnz	r3, 8008468 <mktime+0x60>
 8008466:	3601      	adds	r6, #1
 8008468:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800846c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008470:	3310      	adds	r3, #16
 8008472:	4293      	cmp	r3, r2
 8008474:	61fe      	str	r6, [r7, #28]
 8008476:	f200 8167 	bhi.w	8008748 <mktime+0x340>
 800847a:	2d46      	cmp	r5, #70	@ 0x46
 800847c:	f340 808e 	ble.w	800859c <mktime+0x194>
 8008480:	2346      	movs	r3, #70	@ 0x46
 8008482:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008486:	2164      	movs	r1, #100	@ 0x64
 8008488:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800848c:	079a      	lsls	r2, r3, #30
 800848e:	d17f      	bne.n	8008590 <mktime+0x188>
 8008490:	fb93 f2f1 	sdiv	r2, r3, r1
 8008494:	fb01 3212 	mls	r2, r1, r2, r3
 8008498:	2a00      	cmp	r2, #0
 800849a:	d17c      	bne.n	8008596 <mktime+0x18e>
 800849c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80084a0:	fb92 fef0 	sdiv	lr, r2, r0
 80084a4:	fb00 221e 	mls	r2, r0, lr, r2
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	bf14      	ite	ne
 80084ac:	4662      	movne	r2, ip
 80084ae:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80084b2:	3301      	adds	r3, #1
 80084b4:	429d      	cmp	r5, r3
 80084b6:	4416      	add	r6, r2
 80084b8:	d1e8      	bne.n	800848c <mktime+0x84>
 80084ba:	4ba1      	ldr	r3, [pc, #644]	@ (8008740 <mktime+0x338>)
 80084bc:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80084c0:	fbc6 4803 	smlal	r4, r8, r6, r3
 80084c4:	f000 f9f8 	bl	80088b8 <__tz_lock>
 80084c8:	f000 fa02 	bl	80088d0 <_tzset_unlocked>
 80084cc:	4b9d      	ldr	r3, [pc, #628]	@ (8008744 <mktime+0x33c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8140 	beq.w	8008756 <mktime+0x34e>
 80084d6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80084da:	6978      	ldr	r0, [r7, #20]
 80084dc:	4653      	mov	r3, sl
 80084de:	2b01      	cmp	r3, #1
 80084e0:	bfa8      	it	ge
 80084e2:	2301      	movge	r3, #1
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80084ea:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80084ee:	4283      	cmp	r3, r0
 80084f0:	f040 8096 	bne.w	8008620 <mktime+0x218>
 80084f4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80084f8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 80084fc:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008500:	1a13      	subs	r3, r2, r0
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008508:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800850c:	9302      	str	r3, [sp, #8]
 800850e:	9a02      	ldr	r2, [sp, #8]
 8008510:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008514:	ebb2 0e03 	subs.w	lr, r2, r3
 8008518:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800851c:	4574      	cmp	r4, lr
 800851e:	eb78 0201 	sbcs.w	r2, r8, r1
 8008522:	f280 8085 	bge.w	8008630 <mktime+0x228>
 8008526:	f8d9 2000 	ldr.w	r2, [r9]
 800852a:	2a00      	cmp	r2, #0
 800852c:	f000 808d 	beq.w	800864a <mktime+0x242>
 8008530:	9a03      	ldr	r2, [sp, #12]
 8008532:	4294      	cmp	r4, r2
 8008534:	eb78 020b 	sbcs.w	r2, r8, fp
 8008538:	f2c0 810a 	blt.w	8008750 <mktime+0x348>
 800853c:	4574      	cmp	r4, lr
 800853e:	eb78 0101 	sbcs.w	r1, r8, r1
 8008542:	bfb4      	ite	lt
 8008544:	f04f 0b01 	movlt.w	fp, #1
 8008548:	f04f 0b00 	movge.w	fp, #0
 800854c:	f1ba 0f00 	cmp.w	sl, #0
 8008550:	f280 8087 	bge.w	8008662 <mktime+0x25a>
 8008554:	f1bb 0f01 	cmp.w	fp, #1
 8008558:	f040 80ff 	bne.w	800875a <mktime+0x352>
 800855c:	f04f 0b01 	mov.w	fp, #1
 8008560:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008564:	191c      	adds	r4, r3, r4
 8008566:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800856a:	f000 f9ab 	bl	80088c4 <__tz_unlock>
 800856e:	2307      	movs	r3, #7
 8008570:	3604      	adds	r6, #4
 8008572:	fb96 f3f3 	sdiv	r3, r6, r3
 8008576:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800857a:	1af6      	subs	r6, r6, r3
 800857c:	f100 80db 	bmi.w	8008736 <mktime+0x32e>
 8008580:	f8c7 b020 	str.w	fp, [r7, #32]
 8008584:	61be      	str	r6, [r7, #24]
 8008586:	4620      	mov	r0, r4
 8008588:	4641      	mov	r1, r8
 800858a:	b005      	add	sp, #20
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	f240 126d 	movw	r2, #365	@ 0x16d
 8008594:	e78d      	b.n	80084b2 <mktime+0xaa>
 8008596:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800859a:	e78a      	b.n	80084b2 <mktime+0xaa>
 800859c:	d08d      	beq.n	80084ba <mktime+0xb2>
 800859e:	2345      	movs	r3, #69	@ 0x45
 80085a0:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80085a4:	2164      	movs	r1, #100	@ 0x64
 80085a6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80085aa:	e012      	b.n	80085d2 <mktime+0x1ca>
 80085ac:	bb62      	cbnz	r2, 8008608 <mktime+0x200>
 80085ae:	fb93 f2f1 	sdiv	r2, r3, r1
 80085b2:	fb01 3212 	mls	r2, r1, r2, r3
 80085b6:	bb52      	cbnz	r2, 800860e <mktime+0x206>
 80085b8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80085bc:	fb92 fef0 	sdiv	lr, r2, r0
 80085c0:	fb00 221e 	mls	r2, r0, lr, r2
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	bf14      	ite	ne
 80085c8:	4662      	movne	r2, ip
 80085ca:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80085ce:	1ab6      	subs	r6, r6, r2
 80085d0:	3b01      	subs	r3, #1
 80085d2:	429d      	cmp	r5, r3
 80085d4:	f003 0203 	and.w	r2, r3, #3
 80085d8:	dbe8      	blt.n	80085ac <mktime+0x1a4>
 80085da:	b9da      	cbnz	r2, 8008614 <mktime+0x20c>
 80085dc:	2264      	movs	r2, #100	@ 0x64
 80085de:	fb95 f3f2 	sdiv	r3, r5, r2
 80085e2:	fb02 5313 	mls	r3, r2, r3, r5
 80085e6:	b9c3      	cbnz	r3, 800861a <mktime+0x212>
 80085e8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80085ec:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80085f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80085f4:	fb02 3311 	mls	r3, r2, r1, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f240 136d 	movw	r3, #365	@ 0x16d
 80085fe:	bf08      	it	eq
 8008600:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008604:	1af6      	subs	r6, r6, r3
 8008606:	e758      	b.n	80084ba <mktime+0xb2>
 8008608:	f240 126d 	movw	r2, #365	@ 0x16d
 800860c:	e7df      	b.n	80085ce <mktime+0x1c6>
 800860e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008612:	e7dc      	b.n	80085ce <mktime+0x1c6>
 8008614:	f240 136d 	movw	r3, #365	@ 0x16d
 8008618:	e7f4      	b.n	8008604 <mktime+0x1fc>
 800861a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800861e:	e7f1      	b.n	8008604 <mktime+0x1fc>
 8008620:	f000 f8a2 	bl	8008768 <__tzcalc_limits>
 8008624:	2800      	cmp	r0, #0
 8008626:	f47f af65 	bne.w	80084f4 <mktime+0xec>
 800862a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800862e:	e791      	b.n	8008554 <mktime+0x14c>
 8008630:	9a02      	ldr	r2, [sp, #8]
 8008632:	1a12      	subs	r2, r2, r0
 8008634:	9202      	str	r2, [sp, #8]
 8008636:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800863a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800863e:	9a02      	ldr	r2, [sp, #8]
 8008640:	4294      	cmp	r4, r2
 8008642:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008646:	dbf0      	blt.n	800862a <mktime+0x222>
 8008648:	e76d      	b.n	8008526 <mktime+0x11e>
 800864a:	9a03      	ldr	r2, [sp, #12]
 800864c:	4294      	cmp	r4, r2
 800864e:	eb78 020b 	sbcs.w	r2, r8, fp
 8008652:	f6ff af73 	blt.w	800853c <mktime+0x134>
 8008656:	f1ba 0f00 	cmp.w	sl, #0
 800865a:	f6ff af7f 	blt.w	800855c <mktime+0x154>
 800865e:	f04f 0b01 	mov.w	fp, #1
 8008662:	9a01      	ldr	r2, [sp, #4]
 8008664:	ea82 020b 	eor.w	r2, r2, fp
 8008668:	2a01      	cmp	r2, #1
 800866a:	f47f af73 	bne.w	8008554 <mktime+0x14c>
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	d035      	beq.n	80086e0 <mktime+0x2d8>
 8008674:	1a1b      	subs	r3, r3, r0
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	191c      	adds	r4, r3, r4
 800867a:	441a      	add	r2, r3
 800867c:	603a      	str	r2, [r7, #0]
 800867e:	4638      	mov	r0, r7
 8008680:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008684:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008688:	f7ff fdea 	bl	8008260 <validate_structure>
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	ebb2 020a 	subs.w	r2, r2, sl
 8008692:	f43f af5f 	beq.w	8008554 <mktime+0x14c>
 8008696:	2a01      	cmp	r2, #1
 8008698:	dc24      	bgt.n	80086e4 <mktime+0x2dc>
 800869a:	1c93      	adds	r3, r2, #2
 800869c:	bfd8      	it	le
 800869e:	2201      	movle	r2, #1
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	18d3      	adds	r3, r2, r3
 80086a4:	d527      	bpl.n	80086f6 <mktime+0x2ee>
 80086a6:	1e6b      	subs	r3, r5, #1
 80086a8:	0798      	lsls	r0, r3, #30
 80086aa:	d11e      	bne.n	80086ea <mktime+0x2e2>
 80086ac:	2164      	movs	r1, #100	@ 0x64
 80086ae:	fb93 f0f1 	sdiv	r0, r3, r1
 80086b2:	fb01 3310 	mls	r3, r1, r0, r3
 80086b6:	b9db      	cbnz	r3, 80086f0 <mktime+0x2e8>
 80086b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80086bc:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 80086c0:	fb95 f1f3 	sdiv	r1, r5, r3
 80086c4:	fb03 5511 	mls	r5, r3, r1, r5
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	f240 136d 	movw	r3, #365	@ 0x16d
 80086ce:	bf18      	it	ne
 80086d0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	4416      	add	r6, r2
 80086d8:	e73c      	b.n	8008554 <mktime+0x14c>
 80086da:	f04f 0b00 	mov.w	fp, #0
 80086de:	e7c0      	b.n	8008662 <mktime+0x25a>
 80086e0:	1ac3      	subs	r3, r0, r3
 80086e2:	e7c8      	b.n	8008676 <mktime+0x26e>
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	e7da      	b.n	80086a0 <mktime+0x298>
 80086ea:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80086ee:	e7f1      	b.n	80086d4 <mktime+0x2cc>
 80086f0:	f240 136d 	movw	r3, #365	@ 0x16d
 80086f4:	e7ee      	b.n	80086d4 <mktime+0x2cc>
 80086f6:	07a9      	lsls	r1, r5, #30
 80086f8:	d117      	bne.n	800872a <mktime+0x322>
 80086fa:	2064      	movs	r0, #100	@ 0x64
 80086fc:	fb95 f1f0 	sdiv	r1, r5, r0
 8008700:	fb00 5111 	mls	r1, r0, r1, r5
 8008704:	b9a1      	cbnz	r1, 8008730 <mktime+0x328>
 8008706:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800870a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800870e:	fb95 f0f1 	sdiv	r0, r5, r1
 8008712:	fb01 5510 	mls	r5, r1, r0, r5
 8008716:	2d00      	cmp	r5, #0
 8008718:	f240 116d 	movw	r1, #365	@ 0x16d
 800871c:	bf08      	it	eq
 800871e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8008722:	428b      	cmp	r3, r1
 8008724:	bfa8      	it	ge
 8008726:	1a5b      	subge	r3, r3, r1
 8008728:	e7d4      	b.n	80086d4 <mktime+0x2cc>
 800872a:	f240 116d 	movw	r1, #365	@ 0x16d
 800872e:	e7f8      	b.n	8008722 <mktime+0x31a>
 8008730:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8008734:	e7f5      	b.n	8008722 <mktime+0x31a>
 8008736:	3607      	adds	r6, #7
 8008738:	e722      	b.n	8008580 <mktime+0x178>
 800873a:	bf00      	nop
 800873c:	0800c7dc 	.word	0x0800c7dc
 8008740:	00015180 	.word	0x00015180
 8008744:	200009e8 	.word	0x200009e8
 8008748:	f04f 34ff 	mov.w	r4, #4294967295
 800874c:	46a0      	mov	r8, r4
 800874e:	e71a      	b.n	8008586 <mktime+0x17e>
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	dac1      	bge.n	80086da <mktime+0x2d2>
 8008756:	f04f 0b00 	mov.w	fp, #0
 800875a:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800875e:	191c      	adds	r4, r3, r4
 8008760:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008764:	e701      	b.n	800856a <mktime+0x162>
 8008766:	bf00      	nop

08008768 <__tzcalc_limits>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	4604      	mov	r4, r0
 800876e:	f001 fe39 	bl	800a3e4 <__gettzinfo>
 8008772:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008776:	429c      	cmp	r4, r3
 8008778:	f340 8098 	ble.w	80088ac <__tzcalc_limits+0x144>
 800877c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8008780:	f240 126d 	movw	r2, #365	@ 0x16d
 8008784:	19e5      	adds	r5, r4, r7
 8008786:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800878a:	10ad      	asrs	r5, r5, #2
 800878c:	fb02 5503 	mla	r5, r2, r3, r5
 8008790:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008794:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008798:	fb93 f3f2 	sdiv	r3, r3, r2
 800879c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 80087a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80087a4:	441d      	add	r5, r3
 80087a6:	eb04 030c 	add.w	r3, r4, ip
 80087aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ae:	4601      	mov	r1, r0
 80087b0:	4f3f      	ldr	r7, [pc, #252]	@ (80088b0 <__tzcalc_limits+0x148>)
 80087b2:	6044      	str	r4, [r0, #4]
 80087b4:	441d      	add	r5, r3
 80087b6:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 80087ba:	7a0b      	ldrb	r3, [r1, #8]
 80087bc:	694a      	ldr	r2, [r1, #20]
 80087be:	2b4a      	cmp	r3, #74	@ 0x4a
 80087c0:	d133      	bne.n	800882a <__tzcalc_limits+0xc2>
 80087c2:	07a6      	lsls	r6, r4, #30
 80087c4:	eb05 0302 	add.w	r3, r5, r2
 80087c8:	d106      	bne.n	80087d8 <__tzcalc_limits+0x70>
 80087ca:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80087ce:	fb94 f6fe 	sdiv	r6, r4, lr
 80087d2:	fb0e 4616 	mls	r6, lr, r6, r4
 80087d6:	b936      	cbnz	r6, 80087e6 <__tzcalc_limits+0x7e>
 80087d8:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80087dc:	fb94 f6fe 	sdiv	r6, r4, lr
 80087e0:	fb0e 4616 	mls	r6, lr, r6, r4
 80087e4:	b9fe      	cbnz	r6, 8008826 <__tzcalc_limits+0xbe>
 80087e6:	2a3b      	cmp	r2, #59	@ 0x3b
 80087e8:	bfd4      	ite	le
 80087ea:	2200      	movle	r2, #0
 80087ec:	2201      	movgt	r2, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	3b01      	subs	r3, #1
 80087f2:	698a      	ldr	r2, [r1, #24]
 80087f4:	17d6      	asrs	r6, r2, #31
 80087f6:	fbc3 2607 	smlal	r2, r6, r3, r7
 80087fa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80087fc:	18d2      	adds	r2, r2, r3
 80087fe:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8008802:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008806:	3128      	adds	r1, #40	@ 0x28
 8008808:	458c      	cmp	ip, r1
 800880a:	d1d6      	bne.n	80087ba <__tzcalc_limits+0x52>
 800880c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8008810:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8008814:	428c      	cmp	r4, r1
 8008816:	4193      	sbcs	r3, r2
 8008818:	bfb4      	ite	lt
 800881a:	2301      	movlt	r3, #1
 800881c:	2300      	movge	r3, #0
 800881e:	6003      	str	r3, [r0, #0]
 8008820:	2001      	movs	r0, #1
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	2200      	movs	r2, #0
 8008828:	e7e1      	b.n	80087ee <__tzcalc_limits+0x86>
 800882a:	2b44      	cmp	r3, #68	@ 0x44
 800882c:	d101      	bne.n	8008832 <__tzcalc_limits+0xca>
 800882e:	18ab      	adds	r3, r5, r2
 8008830:	e7df      	b.n	80087f2 <__tzcalc_limits+0x8a>
 8008832:	07a3      	lsls	r3, r4, #30
 8008834:	d105      	bne.n	8008842 <__tzcalc_limits+0xda>
 8008836:	2664      	movs	r6, #100	@ 0x64
 8008838:	fb94 f3f6 	sdiv	r3, r4, r6
 800883c:	fb06 4313 	mls	r3, r6, r3, r4
 8008840:	bb73      	cbnz	r3, 80088a0 <__tzcalc_limits+0x138>
 8008842:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008846:	fb94 f6f3 	sdiv	r6, r4, r3
 800884a:	fb03 4616 	mls	r6, r3, r6, r4
 800884e:	fab6 f686 	clz	r6, r6
 8008852:	0976      	lsrs	r6, r6, #5
 8008854:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8008858:	462b      	mov	r3, r5
 800885a:	f04f 0800 	mov.w	r8, #0
 800885e:	f8df e054 	ldr.w	lr, [pc, #84]	@ 80088b4 <__tzcalc_limits+0x14c>
 8008862:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008866:	fb0a e606 	mla	r6, sl, r6, lr
 800886a:	f108 0801 	add.w	r8, r8, #1
 800886e:	45c1      	cmp	r9, r8
 8008870:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8008874:	dc16      	bgt.n	80088a4 <__tzcalc_limits+0x13c>
 8008876:	2607      	movs	r6, #7
 8008878:	f103 0804 	add.w	r8, r3, #4
 800887c:	fb98 f6f6 	sdiv	r6, r8, r6
 8008880:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008884:	eba8 0606 	sub.w	r6, r8, r6
 8008888:	1b92      	subs	r2, r2, r6
 800888a:	690e      	ldr	r6, [r1, #16]
 800888c:	bf48      	it	mi
 800888e:	3207      	addmi	r2, #7
 8008890:	3e01      	subs	r6, #1
 8008892:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008896:	4432      	add	r2, r6
 8008898:	4572      	cmp	r2, lr
 800889a:	da05      	bge.n	80088a8 <__tzcalc_limits+0x140>
 800889c:	4413      	add	r3, r2
 800889e:	e7a8      	b.n	80087f2 <__tzcalc_limits+0x8a>
 80088a0:	2601      	movs	r6, #1
 80088a2:	e7d7      	b.n	8008854 <__tzcalc_limits+0xec>
 80088a4:	4473      	add	r3, lr
 80088a6:	e7e0      	b.n	800886a <__tzcalc_limits+0x102>
 80088a8:	3a07      	subs	r2, #7
 80088aa:	e7f5      	b.n	8008898 <__tzcalc_limits+0x130>
 80088ac:	2000      	movs	r0, #0
 80088ae:	e7b8      	b.n	8008822 <__tzcalc_limits+0xba>
 80088b0:	00015180 	.word	0x00015180
 80088b4:	0800c838 	.word	0x0800c838

080088b8 <__tz_lock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	@ (80088c0 <__tz_lock+0x8>)
 80088ba:	f000 baa4 	b.w	8008e06 <__retarget_lock_acquire>
 80088be:	bf00      	nop
 80088c0:	200009f0 	.word	0x200009f0

080088c4 <__tz_unlock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	@ (80088cc <__tz_unlock+0x8>)
 80088c6:	f000 baa0 	b.w	8008e0a <__retarget_lock_release>
 80088ca:	bf00      	nop
 80088cc:	200009f0 	.word	0x200009f0

080088d0 <_tzset_unlocked>:
 80088d0:	4b01      	ldr	r3, [pc, #4]	@ (80088d8 <_tzset_unlocked+0x8>)
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	f000 b802 	b.w	80088dc <_tzset_unlocked_r>
 80088d8:	2000055c 	.word	0x2000055c

080088dc <_tzset_unlocked_r>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	b08d      	sub	sp, #52	@ 0x34
 80088e2:	4607      	mov	r7, r0
 80088e4:	f001 fd7e 	bl	800a3e4 <__gettzinfo>
 80088e8:	496d      	ldr	r1, [pc, #436]	@ (8008aa0 <_tzset_unlocked_r+0x1c4>)
 80088ea:	4604      	mov	r4, r0
 80088ec:	4638      	mov	r0, r7
 80088ee:	f000 fe8f 	bl	8009610 <_getenv_r>
 80088f2:	4d6c      	ldr	r5, [pc, #432]	@ (8008aa4 <_tzset_unlocked_r+0x1c8>)
 80088f4:	4606      	mov	r6, r0
 80088f6:	bb10      	cbnz	r0, 800893e <_tzset_unlocked_r+0x62>
 80088f8:	4b6b      	ldr	r3, [pc, #428]	@ (8008aa8 <_tzset_unlocked_r+0x1cc>)
 80088fa:	4a6c      	ldr	r2, [pc, #432]	@ (8008aac <_tzset_unlocked_r+0x1d0>)
 80088fc:	6018      	str	r0, [r3, #0]
 80088fe:	4b6c      	ldr	r3, [pc, #432]	@ (8008ab0 <_tzset_unlocked_r+0x1d4>)
 8008900:	214a      	movs	r1, #74	@ 0x4a
 8008902:	6018      	str	r0, [r3, #0]
 8008904:	4b6b      	ldr	r3, [pc, #428]	@ (8008ab4 <_tzset_unlocked_r+0x1d8>)
 8008906:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800890a:	e9c3 2200 	strd	r2, r2, [r3]
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8008916:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800891a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800891e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8008920:	6520      	str	r0, [r4, #80]	@ 0x50
 8008922:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008926:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800892a:	6828      	ldr	r0, [r5, #0]
 800892c:	7221      	strb	r1, [r4, #8]
 800892e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008932:	f000 fe7d 	bl	8009630 <free>
 8008936:	602e      	str	r6, [r5, #0]
 8008938:	b00d      	add	sp, #52	@ 0x34
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	6829      	ldr	r1, [r5, #0]
 8008940:	2900      	cmp	r1, #0
 8008942:	f040 808e 	bne.w	8008a62 <_tzset_unlocked_r+0x186>
 8008946:	6828      	ldr	r0, [r5, #0]
 8008948:	f000 fe72 	bl	8009630 <free>
 800894c:	4630      	mov	r0, r6
 800894e:	f7f7 fc19 	bl	8000184 <strlen>
 8008952:	1c41      	adds	r1, r0, #1
 8008954:	4638      	mov	r0, r7
 8008956:	f000 fe95 	bl	8009684 <_malloc_r>
 800895a:	6028      	str	r0, [r5, #0]
 800895c:	2800      	cmp	r0, #0
 800895e:	f040 8086 	bne.w	8008a6e <_tzset_unlocked_r+0x192>
 8008962:	2300      	movs	r3, #0
 8008964:	4a52      	ldr	r2, [pc, #328]	@ (8008ab0 <_tzset_unlocked_r+0x1d4>)
 8008966:	2000      	movs	r0, #0
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	2100      	movs	r1, #0
 800896c:	4a52      	ldr	r2, [pc, #328]	@ (8008ab8 <_tzset_unlocked_r+0x1dc>)
 800896e:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8008ab4 <_tzset_unlocked_r+0x1d8>
 8008972:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008976:	e9c8 2200 	strd	r2, r2, [r8]
 800897a:	224a      	movs	r2, #74	@ 0x4a
 800897c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008980:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8008984:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8008988:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800898c:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008990:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8008aa8 <_tzset_unlocked_r+0x1cc>
 8008994:	7222      	strb	r2, [r4, #8]
 8008996:	f8ca 3000 	str.w	r3, [sl]
 800899a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800899c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80089a0:	6523      	str	r3, [r4, #80]	@ 0x50
 80089a2:	7833      	ldrb	r3, [r6, #0]
 80089a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80089a6:	bf08      	it	eq
 80089a8:	3601      	addeq	r6, #1
 80089aa:	7833      	ldrb	r3, [r6, #0]
 80089ac:	2b3c      	cmp	r3, #60	@ 0x3c
 80089ae:	d162      	bne.n	8008a76 <_tzset_unlocked_r+0x19a>
 80089b0:	1c75      	adds	r5, r6, #1
 80089b2:	4628      	mov	r0, r5
 80089b4:	4a41      	ldr	r2, [pc, #260]	@ (8008abc <_tzset_unlocked_r+0x1e0>)
 80089b6:	4942      	ldr	r1, [pc, #264]	@ (8008ac0 <_tzset_unlocked_r+0x1e4>)
 80089b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80089ba:	f001 fce9 	bl	800a390 <siscanf>
 80089be:	2800      	cmp	r0, #0
 80089c0:	ddba      	ble.n	8008938 <_tzset_unlocked_r+0x5c>
 80089c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089c4:	1eda      	subs	r2, r3, #3
 80089c6:	2a07      	cmp	r2, #7
 80089c8:	d8b6      	bhi.n	8008938 <_tzset_unlocked_r+0x5c>
 80089ca:	5ceb      	ldrb	r3, [r5, r3]
 80089cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80089ce:	d1b3      	bne.n	8008938 <_tzset_unlocked_r+0x5c>
 80089d0:	3602      	adds	r6, #2
 80089d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089d4:	18f5      	adds	r5, r6, r3
 80089d6:	5cf3      	ldrb	r3, [r6, r3]
 80089d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80089da:	d15a      	bne.n	8008a92 <_tzset_unlocked_r+0x1b6>
 80089dc:	f04f 39ff 	mov.w	r9, #4294967295
 80089e0:	3501      	adds	r5, #1
 80089e2:	2300      	movs	r3, #0
 80089e4:	af08      	add	r7, sp, #32
 80089e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80089ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80089ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80089f0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	f10d 031e 	add.w	r3, sp, #30
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	4628      	mov	r0, r5
 80089fe:	4931      	ldr	r1, [pc, #196]	@ (8008ac4 <_tzset_unlocked_r+0x1e8>)
 8008a00:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a02:	aa07      	add	r2, sp, #28
 8008a04:	f001 fcc4 	bl	800a390 <siscanf>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dd95      	ble.n	8008938 <_tzset_unlocked_r+0x5c>
 8008a0c:	223c      	movs	r2, #60	@ 0x3c
 8008a0e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008a12:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8008a16:	fb02 6603 	mla	r6, r2, r3, r6
 8008a1a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008a1e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008a22:	fb02 6603 	mla	r6, r2, r3, r6
 8008a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a28:	fb09 f606 	mul.w	r6, r9, r6
 8008a2c:	eb05 0903 	add.w	r9, r5, r3
 8008a30:	5ceb      	ldrb	r3, [r5, r3]
 8008a32:	2b3c      	cmp	r3, #60	@ 0x3c
 8008a34:	f040 80e8 	bne.w	8008c08 <_tzset_unlocked_r+0x32c>
 8008a38:	f109 0501 	add.w	r5, r9, #1
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	4a22      	ldr	r2, [pc, #136]	@ (8008ac8 <_tzset_unlocked_r+0x1ec>)
 8008a40:	491f      	ldr	r1, [pc, #124]	@ (8008ac0 <_tzset_unlocked_r+0x1e4>)
 8008a42:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a44:	f001 fca4 	bl	800a390 <siscanf>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dc41      	bgt.n	8008ad0 <_tzset_unlocked_r+0x1f4>
 8008a4c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008a50:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a52:	d13d      	bne.n	8008ad0 <_tzset_unlocked_r+0x1f4>
 8008a54:	4b19      	ldr	r3, [pc, #100]	@ (8008abc <_tzset_unlocked_r+0x1e0>)
 8008a56:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008a58:	e9c8 3300 	strd	r3, r3, [r8]
 8008a5c:	f8ca 6000 	str.w	r6, [sl]
 8008a60:	e76a      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008a62:	f7f7 fb85 	bl	8000170 <strcmp>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f47f af6d 	bne.w	8008946 <_tzset_unlocked_r+0x6a>
 8008a6c:	e764      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008a6e:	4631      	mov	r1, r6
 8008a70:	f000 f9cd 	bl	8008e0e <strcpy>
 8008a74:	e775      	b.n	8008962 <_tzset_unlocked_r+0x86>
 8008a76:	4630      	mov	r0, r6
 8008a78:	4a10      	ldr	r2, [pc, #64]	@ (8008abc <_tzset_unlocked_r+0x1e0>)
 8008a7a:	4914      	ldr	r1, [pc, #80]	@ (8008acc <_tzset_unlocked_r+0x1f0>)
 8008a7c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a7e:	f001 fc87 	bl	800a390 <siscanf>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f77f af58 	ble.w	8008938 <_tzset_unlocked_r+0x5c>
 8008a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a8a:	3b03      	subs	r3, #3
 8008a8c:	2b07      	cmp	r3, #7
 8008a8e:	d9a0      	bls.n	80089d2 <_tzset_unlocked_r+0xf6>
 8008a90:	e752      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008a92:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a94:	f04f 0901 	mov.w	r9, #1
 8008a98:	bf08      	it	eq
 8008a9a:	3501      	addeq	r5, #1
 8008a9c:	e7a1      	b.n	80089e2 <_tzset_unlocked_r+0x106>
 8008a9e:	bf00      	nop
 8008aa0:	0800c89c 	.word	0x0800c89c
 8008aa4:	200009c8 	.word	0x200009c8
 8008aa8:	200009e4 	.word	0x200009e4
 8008aac:	0800c89f 	.word	0x0800c89f
 8008ab0:	200009e8 	.word	0x200009e8
 8008ab4:	200003e8 	.word	0x200003e8
 8008ab8:	0800c92d 	.word	0x0800c92d
 8008abc:	200009d8 	.word	0x200009d8
 8008ac0:	0800c8a3 	.word	0x0800c8a3
 8008ac4:	0800c8d8 	.word	0x0800c8d8
 8008ac8:	200009cc 	.word	0x200009cc
 8008acc:	0800c8b6 	.word	0x0800c8b6
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad2:	1eda      	subs	r2, r3, #3
 8008ad4:	2a07      	cmp	r2, #7
 8008ad6:	f63f af2f 	bhi.w	8008938 <_tzset_unlocked_r+0x5c>
 8008ada:	5ceb      	ldrb	r3, [r5, r3]
 8008adc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ade:	f47f af2b 	bne.w	8008938 <_tzset_unlocked_r+0x5c>
 8008ae2:	f109 0902 	add.w	r9, r9, #2
 8008ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ae8:	eb09 0503 	add.w	r5, r9, r3
 8008aec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008af0:	2b2d      	cmp	r3, #45	@ 0x2d
 8008af2:	f040 8098 	bne.w	8008c26 <_tzset_unlocked_r+0x34a>
 8008af6:	f04f 39ff 	mov.w	r9, #4294967295
 8008afa:	3501      	adds	r5, #1
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b02:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008b06:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b0e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	f10d 031e 	add.w	r3, sp, #30
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	497a      	ldr	r1, [pc, #488]	@ (8008d08 <_tzset_unlocked_r+0x42c>)
 8008b1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b20:	aa07      	add	r2, sp, #28
 8008b22:	f001 fc35 	bl	800a390 <siscanf>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f300 8083 	bgt.w	8008c32 <_tzset_unlocked_r+0x356>
 8008b2c:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8008b30:	4627      	mov	r7, r4
 8008b32:	f04f 0b00 	mov.w	fp, #0
 8008b36:	9304      	str	r3, [sp, #16]
 8008b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b3a:	441d      	add	r5, r3
 8008b3c:	782b      	ldrb	r3, [r5, #0]
 8008b3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8008b40:	bf08      	it	eq
 8008b42:	3501      	addeq	r5, #1
 8008b44:	f895 9000 	ldrb.w	r9, [r5]
 8008b48:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8008b4c:	f040 8084 	bne.w	8008c58 <_tzset_unlocked_r+0x37c>
 8008b50:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b52:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8008b56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b5a:	aa09      	add	r2, sp, #36	@ 0x24
 8008b5c:	9200      	str	r2, [sp, #0]
 8008b5e:	4628      	mov	r0, r5
 8008b60:	496a      	ldr	r1, [pc, #424]	@ (8008d0c <_tzset_unlocked_r+0x430>)
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8008b68:	f001 fc12 	bl	800a390 <siscanf>
 8008b6c:	2803      	cmp	r0, #3
 8008b6e:	f47f aee3 	bne.w	8008938 <_tzset_unlocked_r+0x5c>
 8008b72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8008b76:	1e4b      	subs	r3, r1, #1
 8008b78:	2b0b      	cmp	r3, #11
 8008b7a:	f63f aedd 	bhi.w	8008938 <_tzset_unlocked_r+0x5c>
 8008b7e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8008b82:	1e53      	subs	r3, r2, #1
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	f63f aed7 	bhi.w	8008938 <_tzset_unlocked_r+0x5c>
 8008b8a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	f63f aed2 	bhi.w	8008938 <_tzset_unlocked_r+0x5c>
 8008b94:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008b98:	f887 9008 	strb.w	r9, [r7, #8]
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba0:	eb05 0903 	add.w	r9, r5, r3
 8008ba4:	2500      	movs	r5, #0
 8008ba6:	f04f 0302 	mov.w	r3, #2
 8008baa:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008bae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008bb2:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008bb6:	950a      	str	r5, [sp, #40]	@ 0x28
 8008bb8:	f899 3000 	ldrb.w	r3, [r9]
 8008bbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008bbe:	d177      	bne.n	8008cb0 <_tzset_unlocked_r+0x3d4>
 8008bc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bc2:	aa08      	add	r2, sp, #32
 8008bc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008bc8:	f10d 021e 	add.w	r2, sp, #30
 8008bcc:	9200      	str	r2, [sp, #0]
 8008bce:	4648      	mov	r0, r9
 8008bd0:	494f      	ldr	r1, [pc, #316]	@ (8008d10 <_tzset_unlocked_r+0x434>)
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	aa07      	add	r2, sp, #28
 8008bd6:	f001 fbdb 	bl	800a390 <siscanf>
 8008bda:	42a8      	cmp	r0, r5
 8008bdc:	dc68      	bgt.n	8008cb0 <_tzset_unlocked_r+0x3d4>
 8008bde:	214a      	movs	r1, #74	@ 0x4a
 8008be0:	2200      	movs	r2, #0
 8008be2:	2300      	movs	r3, #0
 8008be4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8008be8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bec:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008bf4:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8008bf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008bfc:	7221      	strb	r1, [r4, #8]
 8008bfe:	62a5      	str	r5, [r4, #40]	@ 0x28
 8008c00:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008c04:	6525      	str	r5, [r4, #80]	@ 0x50
 8008c06:	e697      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008c08:	4648      	mov	r0, r9
 8008c0a:	4a42      	ldr	r2, [pc, #264]	@ (8008d14 <_tzset_unlocked_r+0x438>)
 8008c0c:	4942      	ldr	r1, [pc, #264]	@ (8008d18 <_tzset_unlocked_r+0x43c>)
 8008c0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c10:	f001 fbbe 	bl	800a390 <siscanf>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f77f af1d 	ble.w	8008a54 <_tzset_unlocked_r+0x178>
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1c:	3b03      	subs	r3, #3
 8008c1e:	2b07      	cmp	r3, #7
 8008c20:	f67f af61 	bls.w	8008ae6 <_tzset_unlocked_r+0x20a>
 8008c24:	e688      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008c26:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	bf08      	it	eq
 8008c2e:	3501      	addeq	r5, #1
 8008c30:	e764      	b.n	8008afc <_tzset_unlocked_r+0x220>
 8008c32:	213c      	movs	r1, #60	@ 0x3c
 8008c34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008c38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008c3c:	fb01 3302 	mla	r3, r1, r2, r3
 8008c40:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008c44:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008c48:	fb01 3302 	mla	r3, r1, r2, r3
 8008c4c:	fb09 f303 	mul.w	r3, r9, r3
 8008c50:	e76e      	b.n	8008b30 <_tzset_unlocked_r+0x254>
 8008c52:	f04f 0b01 	mov.w	fp, #1
 8008c56:	e771      	b.n	8008b3c <_tzset_unlocked_r+0x260>
 8008c58:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008c5c:	bf0a      	itet	eq
 8008c5e:	464b      	moveq	r3, r9
 8008c60:	2344      	movne	r3, #68	@ 0x44
 8008c62:	3501      	addeq	r5, #1
 8008c64:	220a      	movs	r2, #10
 8008c66:	4628      	mov	r0, r5
 8008c68:	a90b      	add	r1, sp, #44	@ 0x2c
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	f001 fabe 	bl	800a1ec <strtoul>
 8008c70:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008c74:	9b05      	ldr	r3, [sp, #20]
 8008c76:	45a9      	cmp	r9, r5
 8008c78:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008c7c:	d114      	bne.n	8008ca8 <_tzset_unlocked_r+0x3cc>
 8008c7e:	234d      	movs	r3, #77	@ 0x4d
 8008c80:	f1bb 0f00 	cmp.w	fp, #0
 8008c84:	d107      	bne.n	8008c96 <_tzset_unlocked_r+0x3ba>
 8008c86:	2103      	movs	r1, #3
 8008c88:	7223      	strb	r3, [r4, #8]
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008c90:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8008c94:	e786      	b.n	8008ba4 <_tzset_unlocked_r+0x2c8>
 8008c96:	220b      	movs	r2, #11
 8008c98:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008ca6:	e77d      	b.n	8008ba4 <_tzset_unlocked_r+0x2c8>
 8008ca8:	b280      	uxth	r0, r0
 8008caa:	723b      	strb	r3, [r7, #8]
 8008cac:	6178      	str	r0, [r7, #20]
 8008cae:	e779      	b.n	8008ba4 <_tzset_unlocked_r+0x2c8>
 8008cb0:	213c      	movs	r1, #60	@ 0x3c
 8008cb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008cb6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008cba:	3728      	adds	r7, #40	@ 0x28
 8008cbc:	fb01 3302 	mla	r3, r1, r2, r3
 8008cc0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008cc4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008cc8:	fb01 3302 	mla	r3, r1, r2, r3
 8008ccc:	f847 3c10 	str.w	r3, [r7, #-16]
 8008cd0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008cd2:	444d      	add	r5, r9
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	d0bb      	beq.n	8008c52 <_tzset_unlocked_r+0x376>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	6860      	ldr	r0, [r4, #4]
 8008cde:	6523      	str	r3, [r4, #80]	@ 0x50
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <_tzset_unlocked_r+0x440>)
 8008ce2:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008ce4:	f8c8 3000 	str.w	r3, [r8]
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d14 <_tzset_unlocked_r+0x438>)
 8008cea:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cee:	f7ff fd3b 	bl	8008768 <__tzcalc_limits>
 8008cf2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008cf4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008cf6:	f8ca 2000 	str.w	r2, [sl]
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	bf18      	it	ne
 8008cfe:	2301      	movne	r3, #1
 8008d00:	4a07      	ldr	r2, [pc, #28]	@ (8008d20 <_tzset_unlocked_r+0x444>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	e618      	b.n	8008938 <_tzset_unlocked_r+0x5c>
 8008d06:	bf00      	nop
 8008d08:	0800c8d8 	.word	0x0800c8d8
 8008d0c:	0800c8c4 	.word	0x0800c8c4
 8008d10:	0800c8d7 	.word	0x0800c8d7
 8008d14:	200009cc 	.word	0x200009cc
 8008d18:	0800c8b6 	.word	0x0800c8b6
 8008d1c:	200009d8 	.word	0x200009d8
 8008d20:	200009e8 	.word	0x200009e8

08008d24 <_close_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	2300      	movs	r3, #0
 8008d28:	4d05      	ldr	r5, [pc, #20]	@ (8008d40 <_close_r+0x1c>)
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7fe f8e1 	bl	8006ef6 <_close>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_close_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_close_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200009ec 	.word	0x200009ec

08008d44 <_lseek_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4d05      	ldr	r5, [pc, #20]	@ (8008d64 <_lseek_r+0x20>)
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7fe f8f3 	bl	8006f3e <_lseek>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_lseek_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_lseek_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	200009ec 	.word	0x200009ec

08008d68 <_read_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	2200      	movs	r2, #0
 8008d72:	4d05      	ldr	r5, [pc, #20]	@ (8008d88 <_read_r+0x20>)
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7fe f884 	bl	8006e84 <_read>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_read_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_read_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	200009ec 	.word	0x200009ec

08008d8c <_write_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	4611      	mov	r1, r2
 8008d94:	2200      	movs	r2, #0
 8008d96:	4d05      	ldr	r5, [pc, #20]	@ (8008dac <_write_r+0x20>)
 8008d98:	602a      	str	r2, [r5, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f7fe f88f 	bl	8006ebe <_write>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_write_r+0x1e>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_write_r+0x1e>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	200009ec 	.word	0x200009ec

08008db0 <__errno>:
 8008db0:	4b01      	ldr	r3, [pc, #4]	@ (8008db8 <__errno+0x8>)
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	2000055c 	.word	0x2000055c

08008dbc <__libc_init_array>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	4d0c      	ldr	r5, [pc, #48]	@ (8008df4 <__libc_init_array+0x38>)
 8008dc2:	4c0d      	ldr	r4, [pc, #52]	@ (8008df8 <__libc_init_array+0x3c>)
 8008dc4:	1b64      	subs	r4, r4, r5
 8008dc6:	10a4      	asrs	r4, r4, #2
 8008dc8:	42a6      	cmp	r6, r4
 8008dca:	d109      	bne.n	8008de0 <__libc_init_array+0x24>
 8008dcc:	f003 fb60 	bl	800c490 <_init>
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	4d0a      	ldr	r5, [pc, #40]	@ (8008dfc <__libc_init_array+0x40>)
 8008dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8008e00 <__libc_init_array+0x44>)
 8008dd6:	1b64      	subs	r4, r4, r5
 8008dd8:	10a4      	asrs	r4, r4, #2
 8008dda:	42a6      	cmp	r6, r4
 8008ddc:	d105      	bne.n	8008dea <__libc_init_array+0x2e>
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de4:	4798      	blx	r3
 8008de6:	3601      	adds	r6, #1
 8008de8:	e7ee      	b.n	8008dc8 <__libc_init_array+0xc>
 8008dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dee:	4798      	blx	r3
 8008df0:	3601      	adds	r6, #1
 8008df2:	e7f2      	b.n	8008dda <__libc_init_array+0x1e>
 8008df4:	0800cb80 	.word	0x0800cb80
 8008df8:	0800cb80 	.word	0x0800cb80
 8008dfc:	0800cb80 	.word	0x0800cb80
 8008e00:	0800cb84 	.word	0x0800cb84

08008e04 <__retarget_lock_init_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <__retarget_lock_acquire>:
 8008e06:	4770      	bx	lr

08008e08 <__retarget_lock_acquire_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_release>:
 8008e0a:	4770      	bx	lr

08008e0c <__retarget_lock_release_recursive>:
 8008e0c:	4770      	bx	lr

08008e0e <strcpy>:
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e14:	f803 2b01 	strb.w	r2, [r3], #1
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	d1f9      	bne.n	8008e10 <strcpy+0x2>
 8008e1c:	4770      	bx	lr

08008e1e <memcpy>:
 8008e1e:	440a      	add	r2, r1
 8008e20:	4291      	cmp	r1, r2
 8008e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e26:	d100      	bne.n	8008e2a <memcpy+0xc>
 8008e28:	4770      	bx	lr
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e30:	4291      	cmp	r1, r2
 8008e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e36:	d1f9      	bne.n	8008e2c <memcpy+0xe>
 8008e38:	bd10      	pop	{r4, pc}
	...

08008e3c <nan>:
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	4901      	ldr	r1, [pc, #4]	@ (8008e44 <nan+0x8>)
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	7ff80000 	.word	0x7ff80000

08008e48 <__assert_func>:
 8008e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e4a:	4614      	mov	r4, r2
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4b09      	ldr	r3, [pc, #36]	@ (8008e74 <__assert_func+0x2c>)
 8008e50:	4605      	mov	r5, r0
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68d8      	ldr	r0, [r3, #12]
 8008e56:	b954      	cbnz	r4, 8008e6e <__assert_func+0x26>
 8008e58:	4b07      	ldr	r3, [pc, #28]	@ (8008e78 <__assert_func+0x30>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e60:	9100      	str	r1, [sp, #0]
 8008e62:	462b      	mov	r3, r5
 8008e64:	4905      	ldr	r1, [pc, #20]	@ (8008e7c <__assert_func+0x34>)
 8008e66:	f001 fa81 	bl	800a36c <fiprintf>
 8008e6a:	f001 fb75 	bl	800a558 <abort>
 8008e6e:	4b04      	ldr	r3, [pc, #16]	@ (8008e80 <__assert_func+0x38>)
 8008e70:	e7f4      	b.n	8008e5c <__assert_func+0x14>
 8008e72:	bf00      	nop
 8008e74:	2000055c 	.word	0x2000055c
 8008e78:	0800c92d 	.word	0x0800c92d
 8008e7c:	0800c8ff 	.word	0x0800c8ff
 8008e80:	0800c8f2 	.word	0x0800c8f2

08008e84 <div>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	fb91 f4f2 	sdiv	r4, r1, r2
 8008e8a:	fb02 1114 	mls	r1, r2, r4, r1
 8008e8e:	6004      	str	r4, [r0, #0]
 8008e90:	6041      	str	r1, [r0, #4]
 8008e92:	bd10      	pop	{r4, pc}

08008e94 <_free_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4605      	mov	r5, r0
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	d040      	beq.n	8008f1e <_free_r+0x8a>
 8008e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea0:	1f0c      	subs	r4, r1, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bfb8      	it	lt
 8008ea6:	18e4      	addlt	r4, r4, r3
 8008ea8:	f000 fc7e 	bl	80097a8 <__malloc_lock>
 8008eac:	4a1c      	ldr	r2, [pc, #112]	@ (8008f20 <_free_r+0x8c>)
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	b933      	cbnz	r3, 8008ec0 <_free_r+0x2c>
 8008eb2:	6063      	str	r3, [r4, #4]
 8008eb4:	6014      	str	r4, [r2, #0]
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ebc:	f000 bc7a 	b.w	80097b4 <__malloc_unlock>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d908      	bls.n	8008ed6 <_free_r+0x42>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	1821      	adds	r1, r4, r0
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	bf01      	itttt	eq
 8008ecc:	6819      	ldreq	r1, [r3, #0]
 8008ece:	685b      	ldreq	r3, [r3, #4]
 8008ed0:	1809      	addeq	r1, r1, r0
 8008ed2:	6021      	streq	r1, [r4, #0]
 8008ed4:	e7ed      	b.n	8008eb2 <_free_r+0x1e>
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	b10b      	cbz	r3, 8008ee0 <_free_r+0x4c>
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d9fa      	bls.n	8008ed6 <_free_r+0x42>
 8008ee0:	6811      	ldr	r1, [r2, #0]
 8008ee2:	1850      	adds	r0, r2, r1
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d10b      	bne.n	8008f00 <_free_r+0x6c>
 8008ee8:	6820      	ldr	r0, [r4, #0]
 8008eea:	4401      	add	r1, r0
 8008eec:	1850      	adds	r0, r2, r1
 8008eee:	4283      	cmp	r3, r0
 8008ef0:	6011      	str	r1, [r2, #0]
 8008ef2:	d1e0      	bne.n	8008eb6 <_free_r+0x22>
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	4408      	add	r0, r1
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	6053      	str	r3, [r2, #4]
 8008efe:	e7da      	b.n	8008eb6 <_free_r+0x22>
 8008f00:	d902      	bls.n	8008f08 <_free_r+0x74>
 8008f02:	230c      	movs	r3, #12
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	e7d6      	b.n	8008eb6 <_free_r+0x22>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	1821      	adds	r1, r4, r0
 8008f0c:	428b      	cmp	r3, r1
 8008f0e:	bf01      	itttt	eq
 8008f10:	6819      	ldreq	r1, [r3, #0]
 8008f12:	685b      	ldreq	r3, [r3, #4]
 8008f14:	1809      	addeq	r1, r1, r0
 8008f16:	6021      	streq	r1, [r4, #0]
 8008f18:	6063      	str	r3, [r4, #4]
 8008f1a:	6054      	str	r4, [r2, #4]
 8008f1c:	e7cb      	b.n	8008eb6 <_free_r+0x22>
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	200009f8 	.word	0x200009f8

08008f24 <rshift>:
 8008f24:	6903      	ldr	r3, [r0, #16]
 8008f26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f2e:	f100 0414 	add.w	r4, r0, #20
 8008f32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f36:	dd46      	ble.n	8008fc6 <rshift+0xa2>
 8008f38:	f011 011f 	ands.w	r1, r1, #31
 8008f3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f44:	d10c      	bne.n	8008f60 <rshift+0x3c>
 8008f46:	4629      	mov	r1, r5
 8008f48:	f100 0710 	add.w	r7, r0, #16
 8008f4c:	42b1      	cmp	r1, r6
 8008f4e:	d335      	bcc.n	8008fbc <rshift+0x98>
 8008f50:	1a9b      	subs	r3, r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	1eea      	subs	r2, r5, #3
 8008f56:	4296      	cmp	r6, r2
 8008f58:	bf38      	it	cc
 8008f5a:	2300      	movcc	r3, #0
 8008f5c:	4423      	add	r3, r4
 8008f5e:	e015      	b.n	8008f8c <rshift+0x68>
 8008f60:	46a1      	mov	r9, r4
 8008f62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f66:	f1c1 0820 	rsb	r8, r1, #32
 8008f6a:	40cf      	lsrs	r7, r1
 8008f6c:	f105 0e04 	add.w	lr, r5, #4
 8008f70:	4576      	cmp	r6, lr
 8008f72:	46f4      	mov	ip, lr
 8008f74:	d816      	bhi.n	8008fa4 <rshift+0x80>
 8008f76:	1a9a      	subs	r2, r3, r2
 8008f78:	0092      	lsls	r2, r2, #2
 8008f7a:	3a04      	subs	r2, #4
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	42ae      	cmp	r6, r5
 8008f80:	bf38      	it	cc
 8008f82:	2200      	movcc	r2, #0
 8008f84:	18a3      	adds	r3, r4, r2
 8008f86:	50a7      	str	r7, [r4, r2]
 8008f88:	b107      	cbz	r7, 8008f8c <rshift+0x68>
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	eba3 0204 	sub.w	r2, r3, r4
 8008f92:	bf08      	it	eq
 8008f94:	2300      	moveq	r3, #0
 8008f96:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f9a:	6102      	str	r2, [r0, #16]
 8008f9c:	bf08      	it	eq
 8008f9e:	6143      	streq	r3, [r0, #20]
 8008fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa4:	f8dc c000 	ldr.w	ip, [ip]
 8008fa8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008fac:	ea4c 0707 	orr.w	r7, ip, r7
 8008fb0:	f849 7b04 	str.w	r7, [r9], #4
 8008fb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fb8:	40cf      	lsrs	r7, r1
 8008fba:	e7d9      	b.n	8008f70 <rshift+0x4c>
 8008fbc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fc0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fc4:	e7c2      	b.n	8008f4c <rshift+0x28>
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	e7e0      	b.n	8008f8c <rshift+0x68>

08008fca <__hexdig_fun>:
 8008fca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008fce:	2b09      	cmp	r3, #9
 8008fd0:	d802      	bhi.n	8008fd8 <__hexdig_fun+0xe>
 8008fd2:	3820      	subs	r0, #32
 8008fd4:	b2c0      	uxtb	r0, r0
 8008fd6:	4770      	bx	lr
 8008fd8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008fdc:	2b05      	cmp	r3, #5
 8008fde:	d801      	bhi.n	8008fe4 <__hexdig_fun+0x1a>
 8008fe0:	3847      	subs	r0, #71	@ 0x47
 8008fe2:	e7f7      	b.n	8008fd4 <__hexdig_fun+0xa>
 8008fe4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	d801      	bhi.n	8008ff0 <__hexdig_fun+0x26>
 8008fec:	3827      	subs	r0, #39	@ 0x27
 8008fee:	e7f1      	b.n	8008fd4 <__hexdig_fun+0xa>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	4770      	bx	lr

08008ff4 <__gethex>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	468a      	mov	sl, r1
 8008ffa:	4690      	mov	r8, r2
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	680b      	ldr	r3, [r1, #0]
 8009002:	9001      	str	r0, [sp, #4]
 8009004:	1c9c      	adds	r4, r3, #2
 8009006:	46a1      	mov	r9, r4
 8009008:	f814 0b01 	ldrb.w	r0, [r4], #1
 800900c:	2830      	cmp	r0, #48	@ 0x30
 800900e:	d0fa      	beq.n	8009006 <__gethex+0x12>
 8009010:	eba9 0303 	sub.w	r3, r9, r3
 8009014:	f1a3 0b02 	sub.w	fp, r3, #2
 8009018:	f7ff ffd7 	bl	8008fca <__hexdig_fun>
 800901c:	4605      	mov	r5, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	d168      	bne.n	80090f4 <__gethex+0x100>
 8009022:	2201      	movs	r2, #1
 8009024:	4648      	mov	r0, r9
 8009026:	499f      	ldr	r1, [pc, #636]	@ (80092a4 <__gethex+0x2b0>)
 8009028:	f7fe ff97 	bl	8007f5a <strncmp>
 800902c:	4607      	mov	r7, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	d167      	bne.n	8009102 <__gethex+0x10e>
 8009032:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009036:	4626      	mov	r6, r4
 8009038:	f7ff ffc7 	bl	8008fca <__hexdig_fun>
 800903c:	2800      	cmp	r0, #0
 800903e:	d062      	beq.n	8009106 <__gethex+0x112>
 8009040:	4623      	mov	r3, r4
 8009042:	7818      	ldrb	r0, [r3, #0]
 8009044:	4699      	mov	r9, r3
 8009046:	2830      	cmp	r0, #48	@ 0x30
 8009048:	f103 0301 	add.w	r3, r3, #1
 800904c:	d0f9      	beq.n	8009042 <__gethex+0x4e>
 800904e:	f7ff ffbc 	bl	8008fca <__hexdig_fun>
 8009052:	fab0 f580 	clz	r5, r0
 8009056:	f04f 0b01 	mov.w	fp, #1
 800905a:	096d      	lsrs	r5, r5, #5
 800905c:	464a      	mov	r2, r9
 800905e:	4616      	mov	r6, r2
 8009060:	7830      	ldrb	r0, [r6, #0]
 8009062:	3201      	adds	r2, #1
 8009064:	f7ff ffb1 	bl	8008fca <__hexdig_fun>
 8009068:	2800      	cmp	r0, #0
 800906a:	d1f8      	bne.n	800905e <__gethex+0x6a>
 800906c:	2201      	movs	r2, #1
 800906e:	4630      	mov	r0, r6
 8009070:	498c      	ldr	r1, [pc, #560]	@ (80092a4 <__gethex+0x2b0>)
 8009072:	f7fe ff72 	bl	8007f5a <strncmp>
 8009076:	2800      	cmp	r0, #0
 8009078:	d13f      	bne.n	80090fa <__gethex+0x106>
 800907a:	b944      	cbnz	r4, 800908e <__gethex+0x9a>
 800907c:	1c74      	adds	r4, r6, #1
 800907e:	4622      	mov	r2, r4
 8009080:	4616      	mov	r6, r2
 8009082:	7830      	ldrb	r0, [r6, #0]
 8009084:	3201      	adds	r2, #1
 8009086:	f7ff ffa0 	bl	8008fca <__hexdig_fun>
 800908a:	2800      	cmp	r0, #0
 800908c:	d1f8      	bne.n	8009080 <__gethex+0x8c>
 800908e:	1ba4      	subs	r4, r4, r6
 8009090:	00a7      	lsls	r7, r4, #2
 8009092:	7833      	ldrb	r3, [r6, #0]
 8009094:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009098:	2b50      	cmp	r3, #80	@ 0x50
 800909a:	d13e      	bne.n	800911a <__gethex+0x126>
 800909c:	7873      	ldrb	r3, [r6, #1]
 800909e:	2b2b      	cmp	r3, #43	@ 0x2b
 80090a0:	d033      	beq.n	800910a <__gethex+0x116>
 80090a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80090a4:	d034      	beq.n	8009110 <__gethex+0x11c>
 80090a6:	2400      	movs	r4, #0
 80090a8:	1c71      	adds	r1, r6, #1
 80090aa:	7808      	ldrb	r0, [r1, #0]
 80090ac:	f7ff ff8d 	bl	8008fca <__hexdig_fun>
 80090b0:	1e43      	subs	r3, r0, #1
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b18      	cmp	r3, #24
 80090b6:	d830      	bhi.n	800911a <__gethex+0x126>
 80090b8:	f1a0 0210 	sub.w	r2, r0, #16
 80090bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090c0:	f7ff ff83 	bl	8008fca <__hexdig_fun>
 80090c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80090c8:	fa5f fc8c 	uxtb.w	ip, ip
 80090cc:	f1bc 0f18 	cmp.w	ip, #24
 80090d0:	f04f 030a 	mov.w	r3, #10
 80090d4:	d91e      	bls.n	8009114 <__gethex+0x120>
 80090d6:	b104      	cbz	r4, 80090da <__gethex+0xe6>
 80090d8:	4252      	negs	r2, r2
 80090da:	4417      	add	r7, r2
 80090dc:	f8ca 1000 	str.w	r1, [sl]
 80090e0:	b1ed      	cbz	r5, 800911e <__gethex+0x12a>
 80090e2:	f1bb 0f00 	cmp.w	fp, #0
 80090e6:	bf0c      	ite	eq
 80090e8:	2506      	moveq	r5, #6
 80090ea:	2500      	movne	r5, #0
 80090ec:	4628      	mov	r0, r5
 80090ee:	b005      	add	sp, #20
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	2500      	movs	r5, #0
 80090f6:	462c      	mov	r4, r5
 80090f8:	e7b0      	b.n	800905c <__gethex+0x68>
 80090fa:	2c00      	cmp	r4, #0
 80090fc:	d1c7      	bne.n	800908e <__gethex+0x9a>
 80090fe:	4627      	mov	r7, r4
 8009100:	e7c7      	b.n	8009092 <__gethex+0x9e>
 8009102:	464e      	mov	r6, r9
 8009104:	462f      	mov	r7, r5
 8009106:	2501      	movs	r5, #1
 8009108:	e7c3      	b.n	8009092 <__gethex+0x9e>
 800910a:	2400      	movs	r4, #0
 800910c:	1cb1      	adds	r1, r6, #2
 800910e:	e7cc      	b.n	80090aa <__gethex+0xb6>
 8009110:	2401      	movs	r4, #1
 8009112:	e7fb      	b.n	800910c <__gethex+0x118>
 8009114:	fb03 0002 	mla	r0, r3, r2, r0
 8009118:	e7ce      	b.n	80090b8 <__gethex+0xc4>
 800911a:	4631      	mov	r1, r6
 800911c:	e7de      	b.n	80090dc <__gethex+0xe8>
 800911e:	4629      	mov	r1, r5
 8009120:	eba6 0309 	sub.w	r3, r6, r9
 8009124:	3b01      	subs	r3, #1
 8009126:	2b07      	cmp	r3, #7
 8009128:	dc0a      	bgt.n	8009140 <__gethex+0x14c>
 800912a:	9801      	ldr	r0, [sp, #4]
 800912c:	f000 fb48 	bl	80097c0 <_Balloc>
 8009130:	4604      	mov	r4, r0
 8009132:	b940      	cbnz	r0, 8009146 <__gethex+0x152>
 8009134:	4602      	mov	r2, r0
 8009136:	21e4      	movs	r1, #228	@ 0xe4
 8009138:	4b5b      	ldr	r3, [pc, #364]	@ (80092a8 <__gethex+0x2b4>)
 800913a:	485c      	ldr	r0, [pc, #368]	@ (80092ac <__gethex+0x2b8>)
 800913c:	f7ff fe84 	bl	8008e48 <__assert_func>
 8009140:	3101      	adds	r1, #1
 8009142:	105b      	asrs	r3, r3, #1
 8009144:	e7ef      	b.n	8009126 <__gethex+0x132>
 8009146:	2300      	movs	r3, #0
 8009148:	f100 0a14 	add.w	sl, r0, #20
 800914c:	4655      	mov	r5, sl
 800914e:	469b      	mov	fp, r3
 8009150:	45b1      	cmp	r9, r6
 8009152:	d337      	bcc.n	80091c4 <__gethex+0x1d0>
 8009154:	f845 bb04 	str.w	fp, [r5], #4
 8009158:	eba5 050a 	sub.w	r5, r5, sl
 800915c:	10ad      	asrs	r5, r5, #2
 800915e:	6125      	str	r5, [r4, #16]
 8009160:	4658      	mov	r0, fp
 8009162:	f000 fc1f 	bl	80099a4 <__hi0bits>
 8009166:	016d      	lsls	r5, r5, #5
 8009168:	f8d8 6000 	ldr.w	r6, [r8]
 800916c:	1a2d      	subs	r5, r5, r0
 800916e:	42b5      	cmp	r5, r6
 8009170:	dd54      	ble.n	800921c <__gethex+0x228>
 8009172:	1bad      	subs	r5, r5, r6
 8009174:	4629      	mov	r1, r5
 8009176:	4620      	mov	r0, r4
 8009178:	f000 ffa7 	bl	800a0ca <__any_on>
 800917c:	4681      	mov	r9, r0
 800917e:	b178      	cbz	r0, 80091a0 <__gethex+0x1ac>
 8009180:	f04f 0901 	mov.w	r9, #1
 8009184:	1e6b      	subs	r3, r5, #1
 8009186:	1159      	asrs	r1, r3, #5
 8009188:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800918c:	f003 021f 	and.w	r2, r3, #31
 8009190:	fa09 f202 	lsl.w	r2, r9, r2
 8009194:	420a      	tst	r2, r1
 8009196:	d003      	beq.n	80091a0 <__gethex+0x1ac>
 8009198:	454b      	cmp	r3, r9
 800919a:	dc36      	bgt.n	800920a <__gethex+0x216>
 800919c:	f04f 0902 	mov.w	r9, #2
 80091a0:	4629      	mov	r1, r5
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff febe 	bl	8008f24 <rshift>
 80091a8:	442f      	add	r7, r5
 80091aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091ae:	42bb      	cmp	r3, r7
 80091b0:	da42      	bge.n	8009238 <__gethex+0x244>
 80091b2:	4621      	mov	r1, r4
 80091b4:	9801      	ldr	r0, [sp, #4]
 80091b6:	f000 fb43 	bl	8009840 <_Bfree>
 80091ba:	2300      	movs	r3, #0
 80091bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091be:	25a3      	movs	r5, #163	@ 0xa3
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e793      	b.n	80090ec <__gethex+0xf8>
 80091c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80091c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80091ca:	d012      	beq.n	80091f2 <__gethex+0x1fe>
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d104      	bne.n	80091da <__gethex+0x1e6>
 80091d0:	f845 bb04 	str.w	fp, [r5], #4
 80091d4:	f04f 0b00 	mov.w	fp, #0
 80091d8:	465b      	mov	r3, fp
 80091da:	7830      	ldrb	r0, [r6, #0]
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	f7ff fef4 	bl	8008fca <__hexdig_fun>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	f000 000f 	and.w	r0, r0, #15
 80091e8:	4098      	lsls	r0, r3
 80091ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80091ee:	3304      	adds	r3, #4
 80091f0:	e7ae      	b.n	8009150 <__gethex+0x15c>
 80091f2:	45b1      	cmp	r9, r6
 80091f4:	d8ea      	bhi.n	80091cc <__gethex+0x1d8>
 80091f6:	2201      	movs	r2, #1
 80091f8:	4630      	mov	r0, r6
 80091fa:	492a      	ldr	r1, [pc, #168]	@ (80092a4 <__gethex+0x2b0>)
 80091fc:	9303      	str	r3, [sp, #12]
 80091fe:	f7fe feac 	bl	8007f5a <strncmp>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	2800      	cmp	r0, #0
 8009206:	d1e1      	bne.n	80091cc <__gethex+0x1d8>
 8009208:	e7a2      	b.n	8009150 <__gethex+0x15c>
 800920a:	4620      	mov	r0, r4
 800920c:	1ea9      	subs	r1, r5, #2
 800920e:	f000 ff5c 	bl	800a0ca <__any_on>
 8009212:	2800      	cmp	r0, #0
 8009214:	d0c2      	beq.n	800919c <__gethex+0x1a8>
 8009216:	f04f 0903 	mov.w	r9, #3
 800921a:	e7c1      	b.n	80091a0 <__gethex+0x1ac>
 800921c:	da09      	bge.n	8009232 <__gethex+0x23e>
 800921e:	1b75      	subs	r5, r6, r5
 8009220:	4621      	mov	r1, r4
 8009222:	462a      	mov	r2, r5
 8009224:	9801      	ldr	r0, [sp, #4]
 8009226:	f000 fd21 	bl	8009c6c <__lshift>
 800922a:	4604      	mov	r4, r0
 800922c:	1b7f      	subs	r7, r7, r5
 800922e:	f100 0a14 	add.w	sl, r0, #20
 8009232:	f04f 0900 	mov.w	r9, #0
 8009236:	e7b8      	b.n	80091aa <__gethex+0x1b6>
 8009238:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800923c:	42bd      	cmp	r5, r7
 800923e:	dd6f      	ble.n	8009320 <__gethex+0x32c>
 8009240:	1bed      	subs	r5, r5, r7
 8009242:	42ae      	cmp	r6, r5
 8009244:	dc34      	bgt.n	80092b0 <__gethex+0x2bc>
 8009246:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d022      	beq.n	8009294 <__gethex+0x2a0>
 800924e:	2b03      	cmp	r3, #3
 8009250:	d024      	beq.n	800929c <__gethex+0x2a8>
 8009252:	2b01      	cmp	r3, #1
 8009254:	d115      	bne.n	8009282 <__gethex+0x28e>
 8009256:	42ae      	cmp	r6, r5
 8009258:	d113      	bne.n	8009282 <__gethex+0x28e>
 800925a:	2e01      	cmp	r6, #1
 800925c:	d10b      	bne.n	8009276 <__gethex+0x282>
 800925e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009262:	9a02      	ldr	r2, [sp, #8]
 8009264:	2562      	movs	r5, #98	@ 0x62
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	2301      	movs	r3, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	f8ca 3000 	str.w	r3, [sl]
 8009270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009272:	601c      	str	r4, [r3, #0]
 8009274:	e73a      	b.n	80090ec <__gethex+0xf8>
 8009276:	4620      	mov	r0, r4
 8009278:	1e71      	subs	r1, r6, #1
 800927a:	f000 ff26 	bl	800a0ca <__any_on>
 800927e:	2800      	cmp	r0, #0
 8009280:	d1ed      	bne.n	800925e <__gethex+0x26a>
 8009282:	4621      	mov	r1, r4
 8009284:	9801      	ldr	r0, [sp, #4]
 8009286:	f000 fadb 	bl	8009840 <_Bfree>
 800928a:	2300      	movs	r3, #0
 800928c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800928e:	2550      	movs	r5, #80	@ 0x50
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	e72b      	b.n	80090ec <__gethex+0xf8>
 8009294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f3      	bne.n	8009282 <__gethex+0x28e>
 800929a:	e7e0      	b.n	800925e <__gethex+0x26a>
 800929c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1dd      	bne.n	800925e <__gethex+0x26a>
 80092a2:	e7ee      	b.n	8009282 <__gethex+0x28e>
 80092a4:	0800c5ac 	.word	0x0800c5ac
 80092a8:	0800c92e 	.word	0x0800c92e
 80092ac:	0800c93f 	.word	0x0800c93f
 80092b0:	1e6f      	subs	r7, r5, #1
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	d130      	bne.n	800931a <__gethex+0x326>
 80092b8:	b127      	cbz	r7, 80092c4 <__gethex+0x2d0>
 80092ba:	4639      	mov	r1, r7
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 ff04 	bl	800a0ca <__any_on>
 80092c2:	4681      	mov	r9, r0
 80092c4:	2301      	movs	r3, #1
 80092c6:	4629      	mov	r1, r5
 80092c8:	1b76      	subs	r6, r6, r5
 80092ca:	2502      	movs	r5, #2
 80092cc:	117a      	asrs	r2, r7, #5
 80092ce:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80092d2:	f007 071f 	and.w	r7, r7, #31
 80092d6:	40bb      	lsls	r3, r7
 80092d8:	4213      	tst	r3, r2
 80092da:	4620      	mov	r0, r4
 80092dc:	bf18      	it	ne
 80092de:	f049 0902 	orrne.w	r9, r9, #2
 80092e2:	f7ff fe1f 	bl	8008f24 <rshift>
 80092e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80092ea:	f1b9 0f00 	cmp.w	r9, #0
 80092ee:	d047      	beq.n	8009380 <__gethex+0x38c>
 80092f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d015      	beq.n	8009324 <__gethex+0x330>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d017      	beq.n	800932c <__gethex+0x338>
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d109      	bne.n	8009314 <__gethex+0x320>
 8009300:	f019 0f02 	tst.w	r9, #2
 8009304:	d006      	beq.n	8009314 <__gethex+0x320>
 8009306:	f8da 3000 	ldr.w	r3, [sl]
 800930a:	ea49 0903 	orr.w	r9, r9, r3
 800930e:	f019 0f01 	tst.w	r9, #1
 8009312:	d10e      	bne.n	8009332 <__gethex+0x33e>
 8009314:	f045 0510 	orr.w	r5, r5, #16
 8009318:	e032      	b.n	8009380 <__gethex+0x38c>
 800931a:	f04f 0901 	mov.w	r9, #1
 800931e:	e7d1      	b.n	80092c4 <__gethex+0x2d0>
 8009320:	2501      	movs	r5, #1
 8009322:	e7e2      	b.n	80092ea <__gethex+0x2f6>
 8009324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009326:	f1c3 0301 	rsb	r3, r3, #1
 800932a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800932c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0f0      	beq.n	8009314 <__gethex+0x320>
 8009332:	f04f 0c00 	mov.w	ip, #0
 8009336:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800933a:	f104 0314 	add.w	r3, r4, #20
 800933e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009342:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009346:	4618      	mov	r0, r3
 8009348:	f853 2b04 	ldr.w	r2, [r3], #4
 800934c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009350:	d01b      	beq.n	800938a <__gethex+0x396>
 8009352:	3201      	adds	r2, #1
 8009354:	6002      	str	r2, [r0, #0]
 8009356:	2d02      	cmp	r5, #2
 8009358:	f104 0314 	add.w	r3, r4, #20
 800935c:	d13c      	bne.n	80093d8 <__gethex+0x3e4>
 800935e:	f8d8 2000 	ldr.w	r2, [r8]
 8009362:	3a01      	subs	r2, #1
 8009364:	42b2      	cmp	r2, r6
 8009366:	d109      	bne.n	800937c <__gethex+0x388>
 8009368:	2201      	movs	r2, #1
 800936a:	1171      	asrs	r1, r6, #5
 800936c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009370:	f006 061f 	and.w	r6, r6, #31
 8009374:	fa02 f606 	lsl.w	r6, r2, r6
 8009378:	421e      	tst	r6, r3
 800937a:	d13a      	bne.n	80093f2 <__gethex+0x3fe>
 800937c:	f045 0520 	orr.w	r5, r5, #32
 8009380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009382:	601c      	str	r4, [r3, #0]
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	601f      	str	r7, [r3, #0]
 8009388:	e6b0      	b.n	80090ec <__gethex+0xf8>
 800938a:	4299      	cmp	r1, r3
 800938c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009390:	d8d9      	bhi.n	8009346 <__gethex+0x352>
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	459b      	cmp	fp, r3
 8009396:	db17      	blt.n	80093c8 <__gethex+0x3d4>
 8009398:	6861      	ldr	r1, [r4, #4]
 800939a:	9801      	ldr	r0, [sp, #4]
 800939c:	3101      	adds	r1, #1
 800939e:	f000 fa0f 	bl	80097c0 <_Balloc>
 80093a2:	4681      	mov	r9, r0
 80093a4:	b918      	cbnz	r0, 80093ae <__gethex+0x3ba>
 80093a6:	4602      	mov	r2, r0
 80093a8:	2184      	movs	r1, #132	@ 0x84
 80093aa:	4b19      	ldr	r3, [pc, #100]	@ (8009410 <__gethex+0x41c>)
 80093ac:	e6c5      	b.n	800913a <__gethex+0x146>
 80093ae:	6922      	ldr	r2, [r4, #16]
 80093b0:	f104 010c 	add.w	r1, r4, #12
 80093b4:	3202      	adds	r2, #2
 80093b6:	0092      	lsls	r2, r2, #2
 80093b8:	300c      	adds	r0, #12
 80093ba:	f7ff fd30 	bl	8008e1e <memcpy>
 80093be:	4621      	mov	r1, r4
 80093c0:	9801      	ldr	r0, [sp, #4]
 80093c2:	f000 fa3d 	bl	8009840 <_Bfree>
 80093c6:	464c      	mov	r4, r9
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	6122      	str	r2, [r4, #16]
 80093ce:	2201      	movs	r2, #1
 80093d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093d4:	615a      	str	r2, [r3, #20]
 80093d6:	e7be      	b.n	8009356 <__gethex+0x362>
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	455a      	cmp	r2, fp
 80093dc:	dd0b      	ble.n	80093f6 <__gethex+0x402>
 80093de:	2101      	movs	r1, #1
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff fd9f 	bl	8008f24 <rshift>
 80093e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093ea:	3701      	adds	r7, #1
 80093ec:	42bb      	cmp	r3, r7
 80093ee:	f6ff aee0 	blt.w	80091b2 <__gethex+0x1be>
 80093f2:	2501      	movs	r5, #1
 80093f4:	e7c2      	b.n	800937c <__gethex+0x388>
 80093f6:	f016 061f 	ands.w	r6, r6, #31
 80093fa:	d0fa      	beq.n	80093f2 <__gethex+0x3fe>
 80093fc:	4453      	add	r3, sl
 80093fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009402:	f000 facf 	bl	80099a4 <__hi0bits>
 8009406:	f1c6 0620 	rsb	r6, r6, #32
 800940a:	42b0      	cmp	r0, r6
 800940c:	dbe7      	blt.n	80093de <__gethex+0x3ea>
 800940e:	e7f0      	b.n	80093f2 <__gethex+0x3fe>
 8009410:	0800c92e 	.word	0x0800c92e

08009414 <L_shift>:
 8009414:	f1c2 0208 	rsb	r2, r2, #8
 8009418:	0092      	lsls	r2, r2, #2
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	f1c2 0620 	rsb	r6, r2, #32
 8009420:	6843      	ldr	r3, [r0, #4]
 8009422:	6804      	ldr	r4, [r0, #0]
 8009424:	fa03 f506 	lsl.w	r5, r3, r6
 8009428:	432c      	orrs	r4, r5
 800942a:	40d3      	lsrs	r3, r2
 800942c:	6004      	str	r4, [r0, #0]
 800942e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009432:	4288      	cmp	r0, r1
 8009434:	d3f4      	bcc.n	8009420 <L_shift+0xc>
 8009436:	bd70      	pop	{r4, r5, r6, pc}

08009438 <__match>:
 8009438:	b530      	push	{r4, r5, lr}
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009442:	b914      	cbnz	r4, 800944a <__match+0x12>
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	2001      	movs	r0, #1
 8009448:	bd30      	pop	{r4, r5, pc}
 800944a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009452:	2d19      	cmp	r5, #25
 8009454:	bf98      	it	ls
 8009456:	3220      	addls	r2, #32
 8009458:	42a2      	cmp	r2, r4
 800945a:	d0f0      	beq.n	800943e <__match+0x6>
 800945c:	2000      	movs	r0, #0
 800945e:	e7f3      	b.n	8009448 <__match+0x10>

08009460 <__hexnan>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	2500      	movs	r5, #0
 8009466:	680b      	ldr	r3, [r1, #0]
 8009468:	4682      	mov	sl, r0
 800946a:	115e      	asrs	r6, r3, #5
 800946c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009470:	f013 031f 	ands.w	r3, r3, #31
 8009474:	bf18      	it	ne
 8009476:	3604      	addne	r6, #4
 8009478:	1f37      	subs	r7, r6, #4
 800947a:	4690      	mov	r8, r2
 800947c:	46b9      	mov	r9, r7
 800947e:	463c      	mov	r4, r7
 8009480:	46ab      	mov	fp, r5
 8009482:	b087      	sub	sp, #28
 8009484:	6801      	ldr	r1, [r0, #0]
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	f846 5c04 	str.w	r5, [r6, #-4]
 800948c:	9502      	str	r5, [sp, #8]
 800948e:	784a      	ldrb	r2, [r1, #1]
 8009490:	1c4b      	adds	r3, r1, #1
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	b342      	cbz	r2, 80094e8 <__hexnan+0x88>
 8009496:	4610      	mov	r0, r2
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	9204      	str	r2, [sp, #16]
 800949c:	f7ff fd95 	bl	8008fca <__hexdig_fun>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d151      	bne.n	8009548 <__hexnan+0xe8>
 80094a4:	9a04      	ldr	r2, [sp, #16]
 80094a6:	9905      	ldr	r1, [sp, #20]
 80094a8:	2a20      	cmp	r2, #32
 80094aa:	d818      	bhi.n	80094de <__hexnan+0x7e>
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	459b      	cmp	fp, r3
 80094b0:	dd13      	ble.n	80094da <__hexnan+0x7a>
 80094b2:	454c      	cmp	r4, r9
 80094b4:	d206      	bcs.n	80094c4 <__hexnan+0x64>
 80094b6:	2d07      	cmp	r5, #7
 80094b8:	dc04      	bgt.n	80094c4 <__hexnan+0x64>
 80094ba:	462a      	mov	r2, r5
 80094bc:	4649      	mov	r1, r9
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff ffa8 	bl	8009414 <L_shift>
 80094c4:	4544      	cmp	r4, r8
 80094c6:	d952      	bls.n	800956e <__hexnan+0x10e>
 80094c8:	2300      	movs	r3, #0
 80094ca:	f1a4 0904 	sub.w	r9, r4, #4
 80094ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80094d2:	461d      	mov	r5, r3
 80094d4:	464c      	mov	r4, r9
 80094d6:	f8cd b008 	str.w	fp, [sp, #8]
 80094da:	9903      	ldr	r1, [sp, #12]
 80094dc:	e7d7      	b.n	800948e <__hexnan+0x2e>
 80094de:	2a29      	cmp	r2, #41	@ 0x29
 80094e0:	d157      	bne.n	8009592 <__hexnan+0x132>
 80094e2:	3102      	adds	r1, #2
 80094e4:	f8ca 1000 	str.w	r1, [sl]
 80094e8:	f1bb 0f00 	cmp.w	fp, #0
 80094ec:	d051      	beq.n	8009592 <__hexnan+0x132>
 80094ee:	454c      	cmp	r4, r9
 80094f0:	d206      	bcs.n	8009500 <__hexnan+0xa0>
 80094f2:	2d07      	cmp	r5, #7
 80094f4:	dc04      	bgt.n	8009500 <__hexnan+0xa0>
 80094f6:	462a      	mov	r2, r5
 80094f8:	4649      	mov	r1, r9
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7ff ff8a 	bl	8009414 <L_shift>
 8009500:	4544      	cmp	r4, r8
 8009502:	d936      	bls.n	8009572 <__hexnan+0x112>
 8009504:	4623      	mov	r3, r4
 8009506:	f1a8 0204 	sub.w	r2, r8, #4
 800950a:	f853 1b04 	ldr.w	r1, [r3], #4
 800950e:	429f      	cmp	r7, r3
 8009510:	f842 1f04 	str.w	r1, [r2, #4]!
 8009514:	d2f9      	bcs.n	800950a <__hexnan+0xaa>
 8009516:	1b3b      	subs	r3, r7, r4
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	3304      	adds	r3, #4
 800951e:	3401      	adds	r4, #1
 8009520:	3e03      	subs	r6, #3
 8009522:	42b4      	cmp	r4, r6
 8009524:	bf88      	it	hi
 8009526:	2304      	movhi	r3, #4
 8009528:	2200      	movs	r2, #0
 800952a:	4443      	add	r3, r8
 800952c:	f843 2b04 	str.w	r2, [r3], #4
 8009530:	429f      	cmp	r7, r3
 8009532:	d2fb      	bcs.n	800952c <__hexnan+0xcc>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	b91b      	cbnz	r3, 8009540 <__hexnan+0xe0>
 8009538:	4547      	cmp	r7, r8
 800953a:	d128      	bne.n	800958e <__hexnan+0x12e>
 800953c:	2301      	movs	r3, #1
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	2005      	movs	r0, #5
 8009542:	b007      	add	sp, #28
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	3501      	adds	r5, #1
 800954a:	2d08      	cmp	r5, #8
 800954c:	f10b 0b01 	add.w	fp, fp, #1
 8009550:	dd06      	ble.n	8009560 <__hexnan+0x100>
 8009552:	4544      	cmp	r4, r8
 8009554:	d9c1      	bls.n	80094da <__hexnan+0x7a>
 8009556:	2300      	movs	r3, #0
 8009558:	2501      	movs	r5, #1
 800955a:	f844 3c04 	str.w	r3, [r4, #-4]
 800955e:	3c04      	subs	r4, #4
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	f000 000f 	and.w	r0, r0, #15
 8009566:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	e7b5      	b.n	80094da <__hexnan+0x7a>
 800956e:	2508      	movs	r5, #8
 8009570:	e7b3      	b.n	80094da <__hexnan+0x7a>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0dd      	beq.n	8009534 <__hexnan+0xd4>
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	f1c3 0320 	rsb	r3, r3, #32
 8009580:	40da      	lsrs	r2, r3
 8009582:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009586:	4013      	ands	r3, r2
 8009588:	f846 3c04 	str.w	r3, [r6, #-4]
 800958c:	e7d2      	b.n	8009534 <__hexnan+0xd4>
 800958e:	3f04      	subs	r7, #4
 8009590:	e7d0      	b.n	8009534 <__hexnan+0xd4>
 8009592:	2004      	movs	r0, #4
 8009594:	e7d5      	b.n	8009542 <__hexnan+0xe2>
	...

08009598 <_findenv_r>:
 8009598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800960c <_findenv_r+0x74>
 80095a0:	4606      	mov	r6, r0
 80095a2:	4689      	mov	r9, r1
 80095a4:	4617      	mov	r7, r2
 80095a6:	f000 fff3 	bl	800a590 <__env_lock>
 80095aa:	f8da 4000 	ldr.w	r4, [sl]
 80095ae:	b134      	cbz	r4, 80095be <_findenv_r+0x26>
 80095b0:	464b      	mov	r3, r9
 80095b2:	4698      	mov	r8, r3
 80095b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b8:	b13a      	cbz	r2, 80095ca <_findenv_r+0x32>
 80095ba:	2a3d      	cmp	r2, #61	@ 0x3d
 80095bc:	d1f9      	bne.n	80095b2 <_findenv_r+0x1a>
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 ffec 	bl	800a59c <__env_unlock>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	eba8 0809 	sub.w	r8, r8, r9
 80095ce:	46a3      	mov	fp, r4
 80095d0:	f854 0b04 	ldr.w	r0, [r4], #4
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d0f2      	beq.n	80095be <_findenv_r+0x26>
 80095d8:	4642      	mov	r2, r8
 80095da:	4649      	mov	r1, r9
 80095dc:	f7fe fcbd 	bl	8007f5a <strncmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d1f4      	bne.n	80095ce <_findenv_r+0x36>
 80095e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80095e8:	eb03 0508 	add.w	r5, r3, r8
 80095ec:	f813 3008 	ldrb.w	r3, [r3, r8]
 80095f0:	2b3d      	cmp	r3, #61	@ 0x3d
 80095f2:	d1ec      	bne.n	80095ce <_findenv_r+0x36>
 80095f4:	f8da 3000 	ldr.w	r3, [sl]
 80095f8:	4630      	mov	r0, r6
 80095fa:	ebab 0303 	sub.w	r3, fp, r3
 80095fe:	109b      	asrs	r3, r3, #2
 8009600:	603b      	str	r3, [r7, #0]
 8009602:	f000 ffcb 	bl	800a59c <__env_unlock>
 8009606:	1c68      	adds	r0, r5, #1
 8009608:	e7dd      	b.n	80095c6 <_findenv_r+0x2e>
 800960a:	bf00      	nop
 800960c:	200003d8 	.word	0x200003d8

08009610 <_getenv_r>:
 8009610:	b507      	push	{r0, r1, r2, lr}
 8009612:	aa01      	add	r2, sp, #4
 8009614:	f7ff ffc0 	bl	8009598 <_findenv_r>
 8009618:	b003      	add	sp, #12
 800961a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009620 <malloc>:
 8009620:	4b02      	ldr	r3, [pc, #8]	@ (800962c <malloc+0xc>)
 8009622:	4601      	mov	r1, r0
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f000 b82d 	b.w	8009684 <_malloc_r>
 800962a:	bf00      	nop
 800962c:	2000055c 	.word	0x2000055c

08009630 <free>:
 8009630:	4b02      	ldr	r3, [pc, #8]	@ (800963c <free+0xc>)
 8009632:	4601      	mov	r1, r0
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f7ff bc2d 	b.w	8008e94 <_free_r>
 800963a:	bf00      	nop
 800963c:	2000055c 	.word	0x2000055c

08009640 <sbrk_aligned>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4e0f      	ldr	r6, [pc, #60]	@ (8009680 <sbrk_aligned+0x40>)
 8009644:	460c      	mov	r4, r1
 8009646:	6831      	ldr	r1, [r6, #0]
 8009648:	4605      	mov	r5, r0
 800964a:	b911      	cbnz	r1, 8009652 <sbrk_aligned+0x12>
 800964c:	f000 ff74 	bl	800a538 <_sbrk_r>
 8009650:	6030      	str	r0, [r6, #0]
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 ff6f 	bl	800a538 <_sbrk_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d103      	bne.n	8009666 <sbrk_aligned+0x26>
 800965e:	f04f 34ff 	mov.w	r4, #4294967295
 8009662:	4620      	mov	r0, r4
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	1cc4      	adds	r4, r0, #3
 8009668:	f024 0403 	bic.w	r4, r4, #3
 800966c:	42a0      	cmp	r0, r4
 800966e:	d0f8      	beq.n	8009662 <sbrk_aligned+0x22>
 8009670:	1a21      	subs	r1, r4, r0
 8009672:	4628      	mov	r0, r5
 8009674:	f000 ff60 	bl	800a538 <_sbrk_r>
 8009678:	3001      	adds	r0, #1
 800967a:	d1f2      	bne.n	8009662 <sbrk_aligned+0x22>
 800967c:	e7ef      	b.n	800965e <sbrk_aligned+0x1e>
 800967e:	bf00      	nop
 8009680:	200009f4 	.word	0x200009f4

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4606      	mov	r6, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d904      	bls.n	80096aa <_malloc_r+0x26>
 80096a0:	230c      	movs	r3, #12
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009780 <_malloc_r+0xfc>
 80096ae:	f000 f87b 	bl	80097a8 <__malloc_lock>
 80096b2:	f8d8 3000 	ldr.w	r3, [r8]
 80096b6:	461c      	mov	r4, r3
 80096b8:	bb44      	cbnz	r4, 800970c <_malloc_r+0x88>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff ffbf 	bl	8009640 <sbrk_aligned>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	4604      	mov	r4, r0
 80096c6:	d158      	bne.n	800977a <_malloc_r+0xf6>
 80096c8:	f8d8 4000 	ldr.w	r4, [r8]
 80096cc:	4627      	mov	r7, r4
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d143      	bne.n	800975a <_malloc_r+0xd6>
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d04b      	beq.n	800976e <_malloc_r+0xea>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	4639      	mov	r1, r7
 80096da:	4630      	mov	r0, r6
 80096dc:	eb04 0903 	add.w	r9, r4, r3
 80096e0:	f000 ff2a 	bl	800a538 <_sbrk_r>
 80096e4:	4581      	cmp	r9, r0
 80096e6:	d142      	bne.n	800976e <_malloc_r+0xea>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	4630      	mov	r0, r6
 80096ec:	1a6d      	subs	r5, r5, r1
 80096ee:	4629      	mov	r1, r5
 80096f0:	f7ff ffa6 	bl	8009640 <sbrk_aligned>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d03a      	beq.n	800976e <_malloc_r+0xea>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	442b      	add	r3, r5
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	bb62      	cbnz	r2, 8009760 <_malloc_r+0xdc>
 8009706:	f8c8 7000 	str.w	r7, [r8]
 800970a:	e00f      	b.n	800972c <_malloc_r+0xa8>
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	1b52      	subs	r2, r2, r5
 8009710:	d420      	bmi.n	8009754 <_malloc_r+0xd0>
 8009712:	2a0b      	cmp	r2, #11
 8009714:	d917      	bls.n	8009746 <_malloc_r+0xc2>
 8009716:	1961      	adds	r1, r4, r5
 8009718:	42a3      	cmp	r3, r4
 800971a:	6025      	str	r5, [r4, #0]
 800971c:	bf18      	it	ne
 800971e:	6059      	strne	r1, [r3, #4]
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	bf08      	it	eq
 8009724:	f8c8 1000 	streq.w	r1, [r8]
 8009728:	5162      	str	r2, [r4, r5]
 800972a:	604b      	str	r3, [r1, #4]
 800972c:	4630      	mov	r0, r6
 800972e:	f000 f841 	bl	80097b4 <__malloc_unlock>
 8009732:	f104 000b 	add.w	r0, r4, #11
 8009736:	1d23      	adds	r3, r4, #4
 8009738:	f020 0007 	bic.w	r0, r0, #7
 800973c:	1ac2      	subs	r2, r0, r3
 800973e:	bf1c      	itt	ne
 8009740:	1a1b      	subne	r3, r3, r0
 8009742:	50a3      	strne	r3, [r4, r2]
 8009744:	e7af      	b.n	80096a6 <_malloc_r+0x22>
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	42a3      	cmp	r3, r4
 800974a:	bf0c      	ite	eq
 800974c:	f8c8 2000 	streq.w	r2, [r8]
 8009750:	605a      	strne	r2, [r3, #4]
 8009752:	e7eb      	b.n	800972c <_malloc_r+0xa8>
 8009754:	4623      	mov	r3, r4
 8009756:	6864      	ldr	r4, [r4, #4]
 8009758:	e7ae      	b.n	80096b8 <_malloc_r+0x34>
 800975a:	463c      	mov	r4, r7
 800975c:	687f      	ldr	r7, [r7, #4]
 800975e:	e7b6      	b.n	80096ce <_malloc_r+0x4a>
 8009760:	461a      	mov	r2, r3
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	42a3      	cmp	r3, r4
 8009766:	d1fb      	bne.n	8009760 <_malloc_r+0xdc>
 8009768:	2300      	movs	r3, #0
 800976a:	6053      	str	r3, [r2, #4]
 800976c:	e7de      	b.n	800972c <_malloc_r+0xa8>
 800976e:	230c      	movs	r3, #12
 8009770:	4630      	mov	r0, r6
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	f000 f81e 	bl	80097b4 <__malloc_unlock>
 8009778:	e794      	b.n	80096a4 <_malloc_r+0x20>
 800977a:	6005      	str	r5, [r0, #0]
 800977c:	e7d6      	b.n	800972c <_malloc_r+0xa8>
 800977e:	bf00      	nop
 8009780:	200009f8 	.word	0x200009f8

08009784 <__ascii_mbtowc>:
 8009784:	b082      	sub	sp, #8
 8009786:	b901      	cbnz	r1, 800978a <__ascii_mbtowc+0x6>
 8009788:	a901      	add	r1, sp, #4
 800978a:	b142      	cbz	r2, 800979e <__ascii_mbtowc+0x1a>
 800978c:	b14b      	cbz	r3, 80097a2 <__ascii_mbtowc+0x1e>
 800978e:	7813      	ldrb	r3, [r2, #0]
 8009790:	600b      	str	r3, [r1, #0]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	1e10      	subs	r0, r2, #0
 8009796:	bf18      	it	ne
 8009798:	2001      	movne	r0, #1
 800979a:	b002      	add	sp, #8
 800979c:	4770      	bx	lr
 800979e:	4610      	mov	r0, r2
 80097a0:	e7fb      	b.n	800979a <__ascii_mbtowc+0x16>
 80097a2:	f06f 0001 	mvn.w	r0, #1
 80097a6:	e7f8      	b.n	800979a <__ascii_mbtowc+0x16>

080097a8 <__malloc_lock>:
 80097a8:	4801      	ldr	r0, [pc, #4]	@ (80097b0 <__malloc_lock+0x8>)
 80097aa:	f7ff bb2d 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 80097ae:	bf00      	nop
 80097b0:	200009f2 	.word	0x200009f2

080097b4 <__malloc_unlock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	@ (80097bc <__malloc_unlock+0x8>)
 80097b6:	f7ff bb29 	b.w	8008e0c <__retarget_lock_release_recursive>
 80097ba:	bf00      	nop
 80097bc:	200009f2 	.word	0x200009f2

080097c0 <_Balloc>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	69c6      	ldr	r6, [r0, #28]
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	b976      	cbnz	r6, 80097e8 <_Balloc+0x28>
 80097ca:	2010      	movs	r0, #16
 80097cc:	f7ff ff28 	bl	8009620 <malloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	61e0      	str	r0, [r4, #28]
 80097d4:	b920      	cbnz	r0, 80097e0 <_Balloc+0x20>
 80097d6:	216b      	movs	r1, #107	@ 0x6b
 80097d8:	4b17      	ldr	r3, [pc, #92]	@ (8009838 <_Balloc+0x78>)
 80097da:	4818      	ldr	r0, [pc, #96]	@ (800983c <_Balloc+0x7c>)
 80097dc:	f7ff fb34 	bl	8008e48 <__assert_func>
 80097e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097e4:	6006      	str	r6, [r0, #0]
 80097e6:	60c6      	str	r6, [r0, #12]
 80097e8:	69e6      	ldr	r6, [r4, #28]
 80097ea:	68f3      	ldr	r3, [r6, #12]
 80097ec:	b183      	cbz	r3, 8009810 <_Balloc+0x50>
 80097ee:	69e3      	ldr	r3, [r4, #28]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097f6:	b9b8      	cbnz	r0, 8009828 <_Balloc+0x68>
 80097f8:	2101      	movs	r1, #1
 80097fa:	fa01 f605 	lsl.w	r6, r1, r5
 80097fe:	1d72      	adds	r2, r6, #5
 8009800:	4620      	mov	r0, r4
 8009802:	0092      	lsls	r2, r2, #2
 8009804:	f000 feaf 	bl	800a566 <_calloc_r>
 8009808:	b160      	cbz	r0, 8009824 <_Balloc+0x64>
 800980a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800980e:	e00e      	b.n	800982e <_Balloc+0x6e>
 8009810:	2221      	movs	r2, #33	@ 0x21
 8009812:	2104      	movs	r1, #4
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fea6 	bl	800a566 <_calloc_r>
 800981a:	69e3      	ldr	r3, [r4, #28]
 800981c:	60f0      	str	r0, [r6, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e4      	bne.n	80097ee <_Balloc+0x2e>
 8009824:	2000      	movs	r0, #0
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	6802      	ldr	r2, [r0, #0]
 800982a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800982e:	2300      	movs	r3, #0
 8009830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009834:	e7f7      	b.n	8009826 <_Balloc+0x66>
 8009836:	bf00      	nop
 8009838:	0800c711 	.word	0x0800c711
 800983c:	0800c99f 	.word	0x0800c99f

08009840 <_Bfree>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	69c6      	ldr	r6, [r0, #28]
 8009844:	4605      	mov	r5, r0
 8009846:	460c      	mov	r4, r1
 8009848:	b976      	cbnz	r6, 8009868 <_Bfree+0x28>
 800984a:	2010      	movs	r0, #16
 800984c:	f7ff fee8 	bl	8009620 <malloc>
 8009850:	4602      	mov	r2, r0
 8009852:	61e8      	str	r0, [r5, #28]
 8009854:	b920      	cbnz	r0, 8009860 <_Bfree+0x20>
 8009856:	218f      	movs	r1, #143	@ 0x8f
 8009858:	4b08      	ldr	r3, [pc, #32]	@ (800987c <_Bfree+0x3c>)
 800985a:	4809      	ldr	r0, [pc, #36]	@ (8009880 <_Bfree+0x40>)
 800985c:	f7ff faf4 	bl	8008e48 <__assert_func>
 8009860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009864:	6006      	str	r6, [r0, #0]
 8009866:	60c6      	str	r6, [r0, #12]
 8009868:	b13c      	cbz	r4, 800987a <_Bfree+0x3a>
 800986a:	69eb      	ldr	r3, [r5, #28]
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009874:	6021      	str	r1, [r4, #0]
 8009876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	0800c711 	.word	0x0800c711
 8009880:	0800c99f 	.word	0x0800c99f

08009884 <__multadd>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	4607      	mov	r7, r0
 800988a:	460c      	mov	r4, r1
 800988c:	461e      	mov	r6, r3
 800988e:	2000      	movs	r0, #0
 8009890:	690d      	ldr	r5, [r1, #16]
 8009892:	f101 0c14 	add.w	ip, r1, #20
 8009896:	f8dc 3000 	ldr.w	r3, [ip]
 800989a:	3001      	adds	r0, #1
 800989c:	b299      	uxth	r1, r3
 800989e:	fb02 6101 	mla	r1, r2, r1, r6
 80098a2:	0c1e      	lsrs	r6, r3, #16
 80098a4:	0c0b      	lsrs	r3, r1, #16
 80098a6:	fb02 3306 	mla	r3, r2, r6, r3
 80098aa:	b289      	uxth	r1, r1
 80098ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098b0:	4285      	cmp	r5, r0
 80098b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098b6:	f84c 1b04 	str.w	r1, [ip], #4
 80098ba:	dcec      	bgt.n	8009896 <__multadd+0x12>
 80098bc:	b30e      	cbz	r6, 8009902 <__multadd+0x7e>
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dc19      	bgt.n	80098f8 <__multadd+0x74>
 80098c4:	6861      	ldr	r1, [r4, #4]
 80098c6:	4638      	mov	r0, r7
 80098c8:	3101      	adds	r1, #1
 80098ca:	f7ff ff79 	bl	80097c0 <_Balloc>
 80098ce:	4680      	mov	r8, r0
 80098d0:	b928      	cbnz	r0, 80098de <__multadd+0x5a>
 80098d2:	4602      	mov	r2, r0
 80098d4:	21ba      	movs	r1, #186	@ 0xba
 80098d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009908 <__multadd+0x84>)
 80098d8:	480c      	ldr	r0, [pc, #48]	@ (800990c <__multadd+0x88>)
 80098da:	f7ff fab5 	bl	8008e48 <__assert_func>
 80098de:	6922      	ldr	r2, [r4, #16]
 80098e0:	f104 010c 	add.w	r1, r4, #12
 80098e4:	3202      	adds	r2, #2
 80098e6:	0092      	lsls	r2, r2, #2
 80098e8:	300c      	adds	r0, #12
 80098ea:	f7ff fa98 	bl	8008e1e <memcpy>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ffa5 	bl	8009840 <_Bfree>
 80098f6:	4644      	mov	r4, r8
 80098f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098fc:	3501      	adds	r5, #1
 80098fe:	615e      	str	r6, [r3, #20]
 8009900:	6125      	str	r5, [r4, #16]
 8009902:	4620      	mov	r0, r4
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	0800c92e 	.word	0x0800c92e
 800990c:	0800c99f 	.word	0x0800c99f

08009910 <__s2b>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4615      	mov	r5, r2
 8009916:	2209      	movs	r2, #9
 8009918:	461f      	mov	r7, r3
 800991a:	3308      	adds	r3, #8
 800991c:	460c      	mov	r4, r1
 800991e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009922:	4606      	mov	r6, r0
 8009924:	2201      	movs	r2, #1
 8009926:	2100      	movs	r1, #0
 8009928:	429a      	cmp	r2, r3
 800992a:	db09      	blt.n	8009940 <__s2b+0x30>
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff ff47 	bl	80097c0 <_Balloc>
 8009932:	b940      	cbnz	r0, 8009946 <__s2b+0x36>
 8009934:	4602      	mov	r2, r0
 8009936:	21d3      	movs	r1, #211	@ 0xd3
 8009938:	4b18      	ldr	r3, [pc, #96]	@ (800999c <__s2b+0x8c>)
 800993a:	4819      	ldr	r0, [pc, #100]	@ (80099a0 <__s2b+0x90>)
 800993c:	f7ff fa84 	bl	8008e48 <__assert_func>
 8009940:	0052      	lsls	r2, r2, #1
 8009942:	3101      	adds	r1, #1
 8009944:	e7f0      	b.n	8009928 <__s2b+0x18>
 8009946:	9b08      	ldr	r3, [sp, #32]
 8009948:	2d09      	cmp	r5, #9
 800994a:	6143      	str	r3, [r0, #20]
 800994c:	f04f 0301 	mov.w	r3, #1
 8009950:	6103      	str	r3, [r0, #16]
 8009952:	dd16      	ble.n	8009982 <__s2b+0x72>
 8009954:	f104 0909 	add.w	r9, r4, #9
 8009958:	46c8      	mov	r8, r9
 800995a:	442c      	add	r4, r5
 800995c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009960:	4601      	mov	r1, r0
 8009962:	220a      	movs	r2, #10
 8009964:	4630      	mov	r0, r6
 8009966:	3b30      	subs	r3, #48	@ 0x30
 8009968:	f7ff ff8c 	bl	8009884 <__multadd>
 800996c:	45a0      	cmp	r8, r4
 800996e:	d1f5      	bne.n	800995c <__s2b+0x4c>
 8009970:	f1a5 0408 	sub.w	r4, r5, #8
 8009974:	444c      	add	r4, r9
 8009976:	1b2d      	subs	r5, r5, r4
 8009978:	1963      	adds	r3, r4, r5
 800997a:	42bb      	cmp	r3, r7
 800997c:	db04      	blt.n	8009988 <__s2b+0x78>
 800997e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009982:	2509      	movs	r5, #9
 8009984:	340a      	adds	r4, #10
 8009986:	e7f6      	b.n	8009976 <__s2b+0x66>
 8009988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800998c:	4601      	mov	r1, r0
 800998e:	220a      	movs	r2, #10
 8009990:	4630      	mov	r0, r6
 8009992:	3b30      	subs	r3, #48	@ 0x30
 8009994:	f7ff ff76 	bl	8009884 <__multadd>
 8009998:	e7ee      	b.n	8009978 <__s2b+0x68>
 800999a:	bf00      	nop
 800999c:	0800c92e 	.word	0x0800c92e
 80099a0:	0800c99f 	.word	0x0800c99f

080099a4 <__hi0bits>:
 80099a4:	4603      	mov	r3, r0
 80099a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099aa:	bf3a      	itte	cc
 80099ac:	0403      	lslcc	r3, r0, #16
 80099ae:	2010      	movcc	r0, #16
 80099b0:	2000      	movcs	r0, #0
 80099b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099b6:	bf3c      	itt	cc
 80099b8:	021b      	lslcc	r3, r3, #8
 80099ba:	3008      	addcc	r0, #8
 80099bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099c0:	bf3c      	itt	cc
 80099c2:	011b      	lslcc	r3, r3, #4
 80099c4:	3004      	addcc	r0, #4
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ca:	bf3c      	itt	cc
 80099cc:	009b      	lslcc	r3, r3, #2
 80099ce:	3002      	addcc	r0, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	db05      	blt.n	80099e0 <__hi0bits+0x3c>
 80099d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099d8:	f100 0001 	add.w	r0, r0, #1
 80099dc:	bf08      	it	eq
 80099de:	2020      	moveq	r0, #32
 80099e0:	4770      	bx	lr

080099e2 <__lo0bits>:
 80099e2:	6803      	ldr	r3, [r0, #0]
 80099e4:	4602      	mov	r2, r0
 80099e6:	f013 0007 	ands.w	r0, r3, #7
 80099ea:	d00b      	beq.n	8009a04 <__lo0bits+0x22>
 80099ec:	07d9      	lsls	r1, r3, #31
 80099ee:	d421      	bmi.n	8009a34 <__lo0bits+0x52>
 80099f0:	0798      	lsls	r0, r3, #30
 80099f2:	bf49      	itett	mi
 80099f4:	085b      	lsrmi	r3, r3, #1
 80099f6:	089b      	lsrpl	r3, r3, #2
 80099f8:	2001      	movmi	r0, #1
 80099fa:	6013      	strmi	r3, [r2, #0]
 80099fc:	bf5c      	itt	pl
 80099fe:	2002      	movpl	r0, #2
 8009a00:	6013      	strpl	r3, [r2, #0]
 8009a02:	4770      	bx	lr
 8009a04:	b299      	uxth	r1, r3
 8009a06:	b909      	cbnz	r1, 8009a0c <__lo0bits+0x2a>
 8009a08:	2010      	movs	r0, #16
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	b2d9      	uxtb	r1, r3
 8009a0e:	b909      	cbnz	r1, 8009a14 <__lo0bits+0x32>
 8009a10:	3008      	adds	r0, #8
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	0719      	lsls	r1, r3, #28
 8009a16:	bf04      	itt	eq
 8009a18:	091b      	lsreq	r3, r3, #4
 8009a1a:	3004      	addeq	r0, #4
 8009a1c:	0799      	lsls	r1, r3, #30
 8009a1e:	bf04      	itt	eq
 8009a20:	089b      	lsreq	r3, r3, #2
 8009a22:	3002      	addeq	r0, #2
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d403      	bmi.n	8009a30 <__lo0bits+0x4e>
 8009a28:	085b      	lsrs	r3, r3, #1
 8009a2a:	f100 0001 	add.w	r0, r0, #1
 8009a2e:	d003      	beq.n	8009a38 <__lo0bits+0x56>
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	4770      	bx	lr
 8009a34:	2000      	movs	r0, #0
 8009a36:	4770      	bx	lr
 8009a38:	2020      	movs	r0, #32
 8009a3a:	4770      	bx	lr

08009a3c <__i2b>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	460c      	mov	r4, r1
 8009a40:	2101      	movs	r1, #1
 8009a42:	f7ff febd 	bl	80097c0 <_Balloc>
 8009a46:	4602      	mov	r2, r0
 8009a48:	b928      	cbnz	r0, 8009a56 <__i2b+0x1a>
 8009a4a:	f240 1145 	movw	r1, #325	@ 0x145
 8009a4e:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <__i2b+0x24>)
 8009a50:	4804      	ldr	r0, [pc, #16]	@ (8009a64 <__i2b+0x28>)
 8009a52:	f7ff f9f9 	bl	8008e48 <__assert_func>
 8009a56:	2301      	movs	r3, #1
 8009a58:	6144      	str	r4, [r0, #20]
 8009a5a:	6103      	str	r3, [r0, #16]
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	bf00      	nop
 8009a60:	0800c92e 	.word	0x0800c92e
 8009a64:	0800c99f 	.word	0x0800c99f

08009a68 <__multiply>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	690a      	ldr	r2, [r1, #16]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	460f      	mov	r7, r1
 8009a74:	429a      	cmp	r2, r3
 8009a76:	bfa2      	ittt	ge
 8009a78:	4623      	movge	r3, r4
 8009a7a:	460c      	movge	r4, r1
 8009a7c:	461f      	movge	r7, r3
 8009a7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	6861      	ldr	r1, [r4, #4]
 8009a8a:	eb0a 0609 	add.w	r6, sl, r9
 8009a8e:	42b3      	cmp	r3, r6
 8009a90:	b085      	sub	sp, #20
 8009a92:	bfb8      	it	lt
 8009a94:	3101      	addlt	r1, #1
 8009a96:	f7ff fe93 	bl	80097c0 <_Balloc>
 8009a9a:	b930      	cbnz	r0, 8009aaa <__multiply+0x42>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009aa2:	4b43      	ldr	r3, [pc, #268]	@ (8009bb0 <__multiply+0x148>)
 8009aa4:	4843      	ldr	r0, [pc, #268]	@ (8009bb4 <__multiply+0x14c>)
 8009aa6:	f7ff f9cf 	bl	8008e48 <__assert_func>
 8009aaa:	f100 0514 	add.w	r5, r0, #20
 8009aae:	462b      	mov	r3, r5
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ab6:	4543      	cmp	r3, r8
 8009ab8:	d321      	bcc.n	8009afe <__multiply+0x96>
 8009aba:	f107 0114 	add.w	r1, r7, #20
 8009abe:	f104 0214 	add.w	r2, r4, #20
 8009ac2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ac6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	1b13      	subs	r3, r2, r4
 8009ace:	3b15      	subs	r3, #21
 8009ad0:	f023 0303 	bic.w	r3, r3, #3
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	f104 0715 	add.w	r7, r4, #21
 8009ada:	42ba      	cmp	r2, r7
 8009adc:	bf38      	it	cc
 8009ade:	2304      	movcc	r3, #4
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	9103      	str	r1, [sp, #12]
 8009ae6:	428b      	cmp	r3, r1
 8009ae8:	d80c      	bhi.n	8009b04 <__multiply+0x9c>
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	dd03      	ble.n	8009af6 <__multiply+0x8e>
 8009aee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d05a      	beq.n	8009bac <__multiply+0x144>
 8009af6:	6106      	str	r6, [r0, #16]
 8009af8:	b005      	add	sp, #20
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	f843 2b04 	str.w	r2, [r3], #4
 8009b02:	e7d8      	b.n	8009ab6 <__multiply+0x4e>
 8009b04:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b08:	f1ba 0f00 	cmp.w	sl, #0
 8009b0c:	d023      	beq.n	8009b56 <__multiply+0xee>
 8009b0e:	46a9      	mov	r9, r5
 8009b10:	f04f 0c00 	mov.w	ip, #0
 8009b14:	f104 0e14 	add.w	lr, r4, #20
 8009b18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b1c:	f8d9 3000 	ldr.w	r3, [r9]
 8009b20:	fa1f fb87 	uxth.w	fp, r7
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b2a:	4463      	add	r3, ip
 8009b2c:	f8d9 c000 	ldr.w	ip, [r9]
 8009b30:	0c3f      	lsrs	r7, r7, #16
 8009b32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b36:	fb0a c707 	mla	r7, sl, r7, ip
 8009b3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b44:	4572      	cmp	r2, lr
 8009b46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b4a:	f849 3b04 	str.w	r3, [r9], #4
 8009b4e:	d8e3      	bhi.n	8009b18 <__multiply+0xb0>
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	f845 c003 	str.w	ip, [r5, r3]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	3104      	adds	r1, #4
 8009b5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b5e:	f1b9 0f00 	cmp.w	r9, #0
 8009b62:	d021      	beq.n	8009ba8 <__multiply+0x140>
 8009b64:	46ae      	mov	lr, r5
 8009b66:	f04f 0a00 	mov.w	sl, #0
 8009b6a:	682b      	ldr	r3, [r5, #0]
 8009b6c:	f104 0c14 	add.w	ip, r4, #20
 8009b70:	f8bc b000 	ldrh.w	fp, [ip]
 8009b74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	fb09 770b 	mla	r7, r9, fp, r7
 8009b7e:	4457      	add	r7, sl
 8009b80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b84:	f84e 3b04 	str.w	r3, [lr], #4
 8009b88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b90:	f8be 3000 	ldrh.w	r3, [lr]
 8009b94:	4562      	cmp	r2, ip
 8009b96:	fb09 330a 	mla	r3, r9, sl, r3
 8009b9a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ba2:	d8e5      	bhi.n	8009b70 <__multiply+0x108>
 8009ba4:	9f01      	ldr	r7, [sp, #4]
 8009ba6:	51eb      	str	r3, [r5, r7]
 8009ba8:	3504      	adds	r5, #4
 8009baa:	e79a      	b.n	8009ae2 <__multiply+0x7a>
 8009bac:	3e01      	subs	r6, #1
 8009bae:	e79c      	b.n	8009aea <__multiply+0x82>
 8009bb0:	0800c92e 	.word	0x0800c92e
 8009bb4:	0800c99f 	.word	0x0800c99f

08009bb8 <__pow5mult>:
 8009bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	f012 0203 	ands.w	r2, r2, #3
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	460e      	mov	r6, r1
 8009bc6:	d007      	beq.n	8009bd8 <__pow5mult+0x20>
 8009bc8:	4c25      	ldr	r4, [pc, #148]	@ (8009c60 <__pow5mult+0xa8>)
 8009bca:	3a01      	subs	r2, #1
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bd2:	f7ff fe57 	bl	8009884 <__multadd>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	10ad      	asrs	r5, r5, #2
 8009bda:	d03d      	beq.n	8009c58 <__pow5mult+0xa0>
 8009bdc:	69fc      	ldr	r4, [r7, #28]
 8009bde:	b97c      	cbnz	r4, 8009c00 <__pow5mult+0x48>
 8009be0:	2010      	movs	r0, #16
 8009be2:	f7ff fd1d 	bl	8009620 <malloc>
 8009be6:	4602      	mov	r2, r0
 8009be8:	61f8      	str	r0, [r7, #28]
 8009bea:	b928      	cbnz	r0, 8009bf8 <__pow5mult+0x40>
 8009bec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c64 <__pow5mult+0xac>)
 8009bf2:	481d      	ldr	r0, [pc, #116]	@ (8009c68 <__pow5mult+0xb0>)
 8009bf4:	f7ff f928 	bl	8008e48 <__assert_func>
 8009bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bfc:	6004      	str	r4, [r0, #0]
 8009bfe:	60c4      	str	r4, [r0, #12]
 8009c00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c08:	b94c      	cbnz	r4, 8009c1e <__pow5mult+0x66>
 8009c0a:	f240 2171 	movw	r1, #625	@ 0x271
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f7ff ff14 	bl	8009a3c <__i2b>
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	f04f 0900 	mov.w	r9, #0
 8009c22:	07eb      	lsls	r3, r5, #31
 8009c24:	d50a      	bpl.n	8009c3c <__pow5mult+0x84>
 8009c26:	4631      	mov	r1, r6
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7ff ff1c 	bl	8009a68 <__multiply>
 8009c30:	4680      	mov	r8, r0
 8009c32:	4631      	mov	r1, r6
 8009c34:	4638      	mov	r0, r7
 8009c36:	f7ff fe03 	bl	8009840 <_Bfree>
 8009c3a:	4646      	mov	r6, r8
 8009c3c:	106d      	asrs	r5, r5, #1
 8009c3e:	d00b      	beq.n	8009c58 <__pow5mult+0xa0>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	b938      	cbnz	r0, 8009c54 <__pow5mult+0x9c>
 8009c44:	4622      	mov	r2, r4
 8009c46:	4621      	mov	r1, r4
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff0d 	bl	8009a68 <__multiply>
 8009c4e:	6020      	str	r0, [r4, #0]
 8009c50:	f8c0 9000 	str.w	r9, [r0]
 8009c54:	4604      	mov	r4, r0
 8009c56:	e7e4      	b.n	8009c22 <__pow5mult+0x6a>
 8009c58:	4630      	mov	r0, r6
 8009c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800c9f8 	.word	0x0800c9f8
 8009c64:	0800c711 	.word	0x0800c711
 8009c68:	0800c99f 	.word	0x0800c99f

08009c6c <__lshift>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	460c      	mov	r4, r1
 8009c72:	4607      	mov	r7, r0
 8009c74:	4691      	mov	r9, r2
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	6849      	ldr	r1, [r1, #4]
 8009c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c84:	f108 0601 	add.w	r6, r8, #1
 8009c88:	42b3      	cmp	r3, r6
 8009c8a:	db0b      	blt.n	8009ca4 <__lshift+0x38>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff fd97 	bl	80097c0 <_Balloc>
 8009c92:	4605      	mov	r5, r0
 8009c94:	b948      	cbnz	r0, 8009caa <__lshift+0x3e>
 8009c96:	4602      	mov	r2, r0
 8009c98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c9c:	4b27      	ldr	r3, [pc, #156]	@ (8009d3c <__lshift+0xd0>)
 8009c9e:	4828      	ldr	r0, [pc, #160]	@ (8009d40 <__lshift+0xd4>)
 8009ca0:	f7ff f8d2 	bl	8008e48 <__assert_func>
 8009ca4:	3101      	adds	r1, #1
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	e7ee      	b.n	8009c88 <__lshift+0x1c>
 8009caa:	2300      	movs	r3, #0
 8009cac:	f100 0114 	add.w	r1, r0, #20
 8009cb0:	f100 0210 	add.w	r2, r0, #16
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	4553      	cmp	r3, sl
 8009cb8:	db33      	blt.n	8009d22 <__lshift+0xb6>
 8009cba:	6920      	ldr	r0, [r4, #16]
 8009cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cc0:	f104 0314 	add.w	r3, r4, #20
 8009cc4:	f019 091f 	ands.w	r9, r9, #31
 8009cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cd0:	d02b      	beq.n	8009d2a <__lshift+0xbe>
 8009cd2:	468a      	mov	sl, r1
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8009ce0:	4310      	orrs	r0, r2
 8009ce2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cea:	459c      	cmp	ip, r3
 8009cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cf0:	d8f3      	bhi.n	8009cda <__lshift+0x6e>
 8009cf2:	ebac 0304 	sub.w	r3, ip, r4
 8009cf6:	3b15      	subs	r3, #21
 8009cf8:	f023 0303 	bic.w	r3, r3, #3
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	f104 0015 	add.w	r0, r4, #21
 8009d02:	4584      	cmp	ip, r0
 8009d04:	bf38      	it	cc
 8009d06:	2304      	movcc	r3, #4
 8009d08:	50ca      	str	r2, [r1, r3]
 8009d0a:	b10a      	cbz	r2, 8009d10 <__lshift+0xa4>
 8009d0c:	f108 0602 	add.w	r6, r8, #2
 8009d10:	3e01      	subs	r6, #1
 8009d12:	4638      	mov	r0, r7
 8009d14:	4621      	mov	r1, r4
 8009d16:	612e      	str	r6, [r5, #16]
 8009d18:	f7ff fd92 	bl	8009840 <_Bfree>
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d26:	3301      	adds	r3, #1
 8009d28:	e7c5      	b.n	8009cb6 <__lshift+0x4a>
 8009d2a:	3904      	subs	r1, #4
 8009d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d30:	459c      	cmp	ip, r3
 8009d32:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d36:	d8f9      	bhi.n	8009d2c <__lshift+0xc0>
 8009d38:	e7ea      	b.n	8009d10 <__lshift+0xa4>
 8009d3a:	bf00      	nop
 8009d3c:	0800c92e 	.word	0x0800c92e
 8009d40:	0800c99f 	.word	0x0800c99f

08009d44 <__mcmp>:
 8009d44:	4603      	mov	r3, r0
 8009d46:	690a      	ldr	r2, [r1, #16]
 8009d48:	6900      	ldr	r0, [r0, #16]
 8009d4a:	b530      	push	{r4, r5, lr}
 8009d4c:	1a80      	subs	r0, r0, r2
 8009d4e:	d10e      	bne.n	8009d6e <__mcmp+0x2a>
 8009d50:	3314      	adds	r3, #20
 8009d52:	3114      	adds	r1, #20
 8009d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d64:	4295      	cmp	r5, r2
 8009d66:	d003      	beq.n	8009d70 <__mcmp+0x2c>
 8009d68:	d205      	bcs.n	8009d76 <__mcmp+0x32>
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	bd30      	pop	{r4, r5, pc}
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d3f3      	bcc.n	8009d5c <__mcmp+0x18>
 8009d74:	e7fb      	b.n	8009d6e <__mcmp+0x2a>
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7f9      	b.n	8009d6e <__mcmp+0x2a>
	...

08009d7c <__mdiff>:
 8009d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4689      	mov	r9, r1
 8009d82:	4606      	mov	r6, r0
 8009d84:	4611      	mov	r1, r2
 8009d86:	4648      	mov	r0, r9
 8009d88:	4614      	mov	r4, r2
 8009d8a:	f7ff ffdb 	bl	8009d44 <__mcmp>
 8009d8e:	1e05      	subs	r5, r0, #0
 8009d90:	d112      	bne.n	8009db8 <__mdiff+0x3c>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff fd13 	bl	80097c0 <_Balloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <__mdiff+0x2e>
 8009d9e:	f240 2137 	movw	r1, #567	@ 0x237
 8009da2:	4b3e      	ldr	r3, [pc, #248]	@ (8009e9c <__mdiff+0x120>)
 8009da4:	483e      	ldr	r0, [pc, #248]	@ (8009ea0 <__mdiff+0x124>)
 8009da6:	f7ff f84f 	bl	8008e48 <__assert_func>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009db0:	4610      	mov	r0, r2
 8009db2:	b003      	add	sp, #12
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	bfbc      	itt	lt
 8009dba:	464b      	movlt	r3, r9
 8009dbc:	46a1      	movlt	r9, r4
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009dc4:	bfba      	itte	lt
 8009dc6:	461c      	movlt	r4, r3
 8009dc8:	2501      	movlt	r5, #1
 8009dca:	2500      	movge	r5, #0
 8009dcc:	f7ff fcf8 	bl	80097c0 <_Balloc>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	b918      	cbnz	r0, 8009ddc <__mdiff+0x60>
 8009dd4:	f240 2145 	movw	r1, #581	@ 0x245
 8009dd8:	4b30      	ldr	r3, [pc, #192]	@ (8009e9c <__mdiff+0x120>)
 8009dda:	e7e3      	b.n	8009da4 <__mdiff+0x28>
 8009ddc:	f100 0b14 	add.w	fp, r0, #20
 8009de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009de4:	f109 0310 	add.w	r3, r9, #16
 8009de8:	60c5      	str	r5, [r0, #12]
 8009dea:	f04f 0c00 	mov.w	ip, #0
 8009dee:	f109 0514 	add.w	r5, r9, #20
 8009df2:	46d9      	mov	r9, fp
 8009df4:	6926      	ldr	r6, [r4, #16]
 8009df6:	f104 0e14 	add.w	lr, r4, #20
 8009dfa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009dfe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e0e:	b281      	uxth	r1, r0
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	fa1f f38a 	uxth.w	r3, sl
 8009e16:	1a5b      	subs	r3, r3, r1
 8009e18:	0c00      	lsrs	r0, r0, #16
 8009e1a:	4463      	add	r3, ip
 8009e1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e2a:	4576      	cmp	r6, lr
 8009e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e30:	f849 3b04 	str.w	r3, [r9], #4
 8009e34:	d8e6      	bhi.n	8009e04 <__mdiff+0x88>
 8009e36:	1b33      	subs	r3, r6, r4
 8009e38:	3b15      	subs	r3, #21
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	3415      	adds	r4, #21
 8009e40:	3304      	adds	r3, #4
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	bf38      	it	cc
 8009e46:	2304      	movcc	r3, #4
 8009e48:	441d      	add	r5, r3
 8009e4a:	445b      	add	r3, fp
 8009e4c:	461e      	mov	r6, r3
 8009e4e:	462c      	mov	r4, r5
 8009e50:	4544      	cmp	r4, r8
 8009e52:	d30e      	bcc.n	8009e72 <__mdiff+0xf6>
 8009e54:	f108 0103 	add.w	r1, r8, #3
 8009e58:	1b49      	subs	r1, r1, r5
 8009e5a:	f021 0103 	bic.w	r1, r1, #3
 8009e5e:	3d03      	subs	r5, #3
 8009e60:	45a8      	cmp	r8, r5
 8009e62:	bf38      	it	cc
 8009e64:	2100      	movcc	r1, #0
 8009e66:	440b      	add	r3, r1
 8009e68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e6c:	b199      	cbz	r1, 8009e96 <__mdiff+0x11a>
 8009e6e:	6117      	str	r7, [r2, #16]
 8009e70:	e79e      	b.n	8009db0 <__mdiff+0x34>
 8009e72:	46e6      	mov	lr, ip
 8009e74:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e78:	fa1f fc81 	uxth.w	ip, r1
 8009e7c:	44f4      	add	ip, lr
 8009e7e:	0c08      	lsrs	r0, r1, #16
 8009e80:	4471      	add	r1, lr
 8009e82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e86:	b289      	uxth	r1, r1
 8009e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e90:	f846 1b04 	str.w	r1, [r6], #4
 8009e94:	e7dc      	b.n	8009e50 <__mdiff+0xd4>
 8009e96:	3f01      	subs	r7, #1
 8009e98:	e7e6      	b.n	8009e68 <__mdiff+0xec>
 8009e9a:	bf00      	nop
 8009e9c:	0800c92e 	.word	0x0800c92e
 8009ea0:	0800c99f 	.word	0x0800c99f

08009ea4 <__ulp>:
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee0 <__ulp+0x3c>)
 8009ea6:	400b      	ands	r3, r1
 8009ea8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dc08      	bgt.n	8009ec2 <__ulp+0x1e>
 8009eb0:	425b      	negs	r3, r3
 8009eb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009eb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eba:	da04      	bge.n	8009ec6 <__ulp+0x22>
 8009ebc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ec0:	4113      	asrs	r3, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	e008      	b.n	8009ed8 <__ulp+0x34>
 8009ec6:	f1a2 0314 	sub.w	r3, r2, #20
 8009eca:	2b1e      	cmp	r3, #30
 8009ecc:	bfd6      	itet	le
 8009ece:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ed2:	2201      	movgt	r2, #1
 8009ed4:	40da      	lsrle	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	7ff00000 	.word	0x7ff00000

08009ee4 <__b2d>:
 8009ee4:	6902      	ldr	r2, [r0, #16]
 8009ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee8:	f100 0614 	add.w	r6, r0, #20
 8009eec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009ef0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009ef4:	4f1e      	ldr	r7, [pc, #120]	@ (8009f70 <__b2d+0x8c>)
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7ff fd54 	bl	80099a4 <__hi0bits>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f1c0 0020 	rsb	r0, r0, #32
 8009f02:	2b0a      	cmp	r3, #10
 8009f04:	f1a2 0504 	sub.w	r5, r2, #4
 8009f08:	6008      	str	r0, [r1, #0]
 8009f0a:	dc12      	bgt.n	8009f32 <__b2d+0x4e>
 8009f0c:	42ae      	cmp	r6, r5
 8009f0e:	bf2c      	ite	cs
 8009f10:	2200      	movcs	r2, #0
 8009f12:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f16:	f1c3 0c0b 	rsb	ip, r3, #11
 8009f1a:	3315      	adds	r3, #21
 8009f1c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009f20:	fa04 f303 	lsl.w	r3, r4, r3
 8009f24:	fa22 f20c 	lsr.w	r2, r2, ip
 8009f28:	ea4e 0107 	orr.w	r1, lr, r7
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f32:	42ae      	cmp	r6, r5
 8009f34:	bf36      	itet	cc
 8009f36:	f1a2 0508 	subcc.w	r5, r2, #8
 8009f3a:	2200      	movcs	r2, #0
 8009f3c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f40:	3b0b      	subs	r3, #11
 8009f42:	d012      	beq.n	8009f6a <__b2d+0x86>
 8009f44:	f1c3 0720 	rsb	r7, r3, #32
 8009f48:	fa22 f107 	lsr.w	r1, r2, r7
 8009f4c:	409c      	lsls	r4, r3
 8009f4e:	430c      	orrs	r4, r1
 8009f50:	42b5      	cmp	r5, r6
 8009f52:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009f56:	bf94      	ite	ls
 8009f58:	2400      	movls	r4, #0
 8009f5a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009f5e:	409a      	lsls	r2, r3
 8009f60:	40fc      	lsrs	r4, r7
 8009f62:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009f66:	4322      	orrs	r2, r4
 8009f68:	e7e1      	b.n	8009f2e <__b2d+0x4a>
 8009f6a:	ea44 0107 	orr.w	r1, r4, r7
 8009f6e:	e7de      	b.n	8009f2e <__b2d+0x4a>
 8009f70:	3ff00000 	.word	0x3ff00000

08009f74 <__d2b>:
 8009f74:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4690      	mov	r8, r2
 8009f7c:	4699      	mov	r9, r3
 8009f7e:	9e08      	ldr	r6, [sp, #32]
 8009f80:	f7ff fc1e 	bl	80097c0 <_Balloc>
 8009f84:	4604      	mov	r4, r0
 8009f86:	b930      	cbnz	r0, 8009f96 <__d2b+0x22>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f8e:	4b23      	ldr	r3, [pc, #140]	@ (800a01c <__d2b+0xa8>)
 8009f90:	4823      	ldr	r0, [pc, #140]	@ (800a020 <__d2b+0xac>)
 8009f92:	f7fe ff59 	bl	8008e48 <__assert_func>
 8009f96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f9e:	b10d      	cbz	r5, 8009fa4 <__d2b+0x30>
 8009fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f1b8 0300 	subs.w	r3, r8, #0
 8009faa:	d024      	beq.n	8009ff6 <__d2b+0x82>
 8009fac:	4668      	mov	r0, sp
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	f7ff fd17 	bl	80099e2 <__lo0bits>
 8009fb4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fb8:	b1d8      	cbz	r0, 8009ff2 <__d2b+0x7e>
 8009fba:	f1c0 0320 	rsb	r3, r0, #32
 8009fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	40c2      	lsrs	r2, r0
 8009fc6:	6163      	str	r3, [r4, #20]
 8009fc8:	9201      	str	r2, [sp, #4]
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bf0c      	ite	eq
 8009fd0:	2201      	moveq	r2, #1
 8009fd2:	2202      	movne	r2, #2
 8009fd4:	61a3      	str	r3, [r4, #24]
 8009fd6:	6122      	str	r2, [r4, #16]
 8009fd8:	b1ad      	cbz	r5, 800a006 <__d2b+0x92>
 8009fda:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fde:	4405      	add	r5, r0
 8009fe0:	6035      	str	r5, [r6, #0]
 8009fe2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe8:	6018      	str	r0, [r3, #0]
 8009fea:	4620      	mov	r0, r4
 8009fec:	b002      	add	sp, #8
 8009fee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009ff2:	6161      	str	r1, [r4, #20]
 8009ff4:	e7e9      	b.n	8009fca <__d2b+0x56>
 8009ff6:	a801      	add	r0, sp, #4
 8009ff8:	f7ff fcf3 	bl	80099e2 <__lo0bits>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	3020      	adds	r0, #32
 800a004:	e7e7      	b.n	8009fd6 <__d2b+0x62>
 800a006:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a00a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a00e:	6030      	str	r0, [r6, #0]
 800a010:	6918      	ldr	r0, [r3, #16]
 800a012:	f7ff fcc7 	bl	80099a4 <__hi0bits>
 800a016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a01a:	e7e4      	b.n	8009fe6 <__d2b+0x72>
 800a01c:	0800c92e 	.word	0x0800c92e
 800a020:	0800c99f 	.word	0x0800c99f

0800a024 <__ratio>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	b085      	sub	sp, #20
 800a02a:	e9cd 1000 	strd	r1, r0, [sp]
 800a02e:	a902      	add	r1, sp, #8
 800a030:	f7ff ff58 	bl	8009ee4 <__b2d>
 800a034:	468b      	mov	fp, r1
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	9800      	ldr	r0, [sp, #0]
 800a03c:	a903      	add	r1, sp, #12
 800a03e:	f7ff ff51 	bl	8009ee4 <__b2d>
 800a042:	460d      	mov	r5, r1
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	4689      	mov	r9, r1
 800a048:	6919      	ldr	r1, [r3, #16]
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	4604      	mov	r4, r0
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	4630      	mov	r0, r6
 800a052:	1ac9      	subs	r1, r1, r3
 800a054:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfcd      	iteet	gt
 800a062:	463a      	movgt	r2, r7
 800a064:	462a      	movle	r2, r5
 800a066:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a06a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a06e:	bfd8      	it	le
 800a070:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a074:	464b      	mov	r3, r9
 800a076:	4622      	mov	r2, r4
 800a078:	4659      	mov	r1, fp
 800a07a:	f7f6 fb71 	bl	8000760 <__aeabi_ddiv>
 800a07e:	b005      	add	sp, #20
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a084 <__copybits>:
 800a084:	3901      	subs	r1, #1
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	1149      	asrs	r1, r1, #5
 800a08a:	6914      	ldr	r4, [r2, #16]
 800a08c:	3101      	adds	r1, #1
 800a08e:	f102 0314 	add.w	r3, r2, #20
 800a092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a09a:	1f05      	subs	r5, r0, #4
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d30c      	bcc.n	800a0ba <__copybits+0x36>
 800a0a0:	1aa3      	subs	r3, r4, r2
 800a0a2:	3b11      	subs	r3, #17
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	3211      	adds	r2, #17
 800a0aa:	42a2      	cmp	r2, r4
 800a0ac:	bf88      	it	hi
 800a0ae:	2300      	movhi	r3, #0
 800a0b0:	4418      	add	r0, r3
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4288      	cmp	r0, r1
 800a0b6:	d305      	bcc.n	800a0c4 <__copybits+0x40>
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0c2:	e7eb      	b.n	800a09c <__copybits+0x18>
 800a0c4:	f840 3b04 	str.w	r3, [r0], #4
 800a0c8:	e7f4      	b.n	800a0b4 <__copybits+0x30>

0800a0ca <__any_on>:
 800a0ca:	f100 0214 	add.w	r2, r0, #20
 800a0ce:	6900      	ldr	r0, [r0, #16]
 800a0d0:	114b      	asrs	r3, r1, #5
 800a0d2:	4298      	cmp	r0, r3
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	db11      	blt.n	800a0fc <__any_on+0x32>
 800a0d8:	dd0a      	ble.n	800a0f0 <__any_on+0x26>
 800a0da:	f011 011f 	ands.w	r1, r1, #31
 800a0de:	d007      	beq.n	800a0f0 <__any_on+0x26>
 800a0e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a0e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a0ec:	428c      	cmp	r4, r1
 800a0ee:	d10b      	bne.n	800a108 <__any_on+0x3e>
 800a0f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d803      	bhi.n	800a100 <__any_on+0x36>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	e7f7      	b.n	800a0f0 <__any_on+0x26>
 800a100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a104:	2900      	cmp	r1, #0
 800a106:	d0f5      	beq.n	800a0f4 <__any_on+0x2a>
 800a108:	2001      	movs	r0, #1
 800a10a:	e7f6      	b.n	800a0fa <__any_on+0x30>

0800a10c <_strtoul_l.constprop.0>:
 800a10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a110:	4686      	mov	lr, r0
 800a112:	460d      	mov	r5, r1
 800a114:	4e33      	ldr	r6, [pc, #204]	@ (800a1e4 <_strtoul_l.constprop.0+0xd8>)
 800a116:	4628      	mov	r0, r5
 800a118:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a11c:	5d37      	ldrb	r7, [r6, r4]
 800a11e:	f017 0708 	ands.w	r7, r7, #8
 800a122:	d1f8      	bne.n	800a116 <_strtoul_l.constprop.0+0xa>
 800a124:	2c2d      	cmp	r4, #45	@ 0x2d
 800a126:	d12f      	bne.n	800a188 <_strtoul_l.constprop.0+0x7c>
 800a128:	2701      	movs	r7, #1
 800a12a:	782c      	ldrb	r4, [r5, #0]
 800a12c:	1c85      	adds	r5, r0, #2
 800a12e:	f033 0010 	bics.w	r0, r3, #16
 800a132:	d109      	bne.n	800a148 <_strtoul_l.constprop.0+0x3c>
 800a134:	2c30      	cmp	r4, #48	@ 0x30
 800a136:	d12c      	bne.n	800a192 <_strtoul_l.constprop.0+0x86>
 800a138:	7828      	ldrb	r0, [r5, #0]
 800a13a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a13e:	2858      	cmp	r0, #88	@ 0x58
 800a140:	d127      	bne.n	800a192 <_strtoul_l.constprop.0+0x86>
 800a142:	2310      	movs	r3, #16
 800a144:	786c      	ldrb	r4, [r5, #1]
 800a146:	3502      	adds	r5, #2
 800a148:	f04f 38ff 	mov.w	r8, #4294967295
 800a14c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a150:	2600      	movs	r6, #0
 800a152:	fb03 f908 	mul.w	r9, r3, r8
 800a156:	4630      	mov	r0, r6
 800a158:	ea6f 0909 	mvn.w	r9, r9
 800a15c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a160:	f1bc 0f09 	cmp.w	ip, #9
 800a164:	d81c      	bhi.n	800a1a0 <_strtoul_l.constprop.0+0x94>
 800a166:	4664      	mov	r4, ip
 800a168:	42a3      	cmp	r3, r4
 800a16a:	dd2a      	ble.n	800a1c2 <_strtoul_l.constprop.0+0xb6>
 800a16c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a170:	d007      	beq.n	800a182 <_strtoul_l.constprop.0+0x76>
 800a172:	4580      	cmp	r8, r0
 800a174:	d322      	bcc.n	800a1bc <_strtoul_l.constprop.0+0xb0>
 800a176:	d101      	bne.n	800a17c <_strtoul_l.constprop.0+0x70>
 800a178:	45a1      	cmp	r9, r4
 800a17a:	db1f      	blt.n	800a1bc <_strtoul_l.constprop.0+0xb0>
 800a17c:	2601      	movs	r6, #1
 800a17e:	fb00 4003 	mla	r0, r0, r3, r4
 800a182:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a186:	e7e9      	b.n	800a15c <_strtoul_l.constprop.0+0x50>
 800a188:	2c2b      	cmp	r4, #43	@ 0x2b
 800a18a:	bf04      	itt	eq
 800a18c:	782c      	ldrbeq	r4, [r5, #0]
 800a18e:	1c85      	addeq	r5, r0, #2
 800a190:	e7cd      	b.n	800a12e <_strtoul_l.constprop.0+0x22>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1d8      	bne.n	800a148 <_strtoul_l.constprop.0+0x3c>
 800a196:	2c30      	cmp	r4, #48	@ 0x30
 800a198:	bf0c      	ite	eq
 800a19a:	2308      	moveq	r3, #8
 800a19c:	230a      	movne	r3, #10
 800a19e:	e7d3      	b.n	800a148 <_strtoul_l.constprop.0+0x3c>
 800a1a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a1a4:	f1bc 0f19 	cmp.w	ip, #25
 800a1a8:	d801      	bhi.n	800a1ae <_strtoul_l.constprop.0+0xa2>
 800a1aa:	3c37      	subs	r4, #55	@ 0x37
 800a1ac:	e7dc      	b.n	800a168 <_strtoul_l.constprop.0+0x5c>
 800a1ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a1b2:	f1bc 0f19 	cmp.w	ip, #25
 800a1b6:	d804      	bhi.n	800a1c2 <_strtoul_l.constprop.0+0xb6>
 800a1b8:	3c57      	subs	r4, #87	@ 0x57
 800a1ba:	e7d5      	b.n	800a168 <_strtoul_l.constprop.0+0x5c>
 800a1bc:	f04f 36ff 	mov.w	r6, #4294967295
 800a1c0:	e7df      	b.n	800a182 <_strtoul_l.constprop.0+0x76>
 800a1c2:	1c73      	adds	r3, r6, #1
 800a1c4:	d106      	bne.n	800a1d4 <_strtoul_l.constprop.0+0xc8>
 800a1c6:	2322      	movs	r3, #34	@ 0x22
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f8ce 3000 	str.w	r3, [lr]
 800a1ce:	b932      	cbnz	r2, 800a1de <_strtoul_l.constprop.0+0xd2>
 800a1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d4:	b107      	cbz	r7, 800a1d8 <_strtoul_l.constprop.0+0xcc>
 800a1d6:	4240      	negs	r0, r0
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	d0f9      	beq.n	800a1d0 <_strtoul_l.constprop.0+0xc4>
 800a1dc:	b106      	cbz	r6, 800a1e0 <_strtoul_l.constprop.0+0xd4>
 800a1de:	1e69      	subs	r1, r5, #1
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	e7f5      	b.n	800a1d0 <_strtoul_l.constprop.0+0xc4>
 800a1e4:	0800c611 	.word	0x0800c611

0800a1e8 <_strtoul_r>:
 800a1e8:	f7ff bf90 	b.w	800a10c <_strtoul_l.constprop.0>

0800a1ec <strtoul>:
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	460a      	mov	r2, r1
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	4802      	ldr	r0, [pc, #8]	@ (800a1fc <strtoul+0x10>)
 800a1f4:	6800      	ldr	r0, [r0, #0]
 800a1f6:	f7ff bf89 	b.w	800a10c <_strtoul_l.constprop.0>
 800a1fa:	bf00      	nop
 800a1fc:	2000055c 	.word	0x2000055c

0800a200 <__ascii_wctomb>:
 800a200:	4603      	mov	r3, r0
 800a202:	4608      	mov	r0, r1
 800a204:	b141      	cbz	r1, 800a218 <__ascii_wctomb+0x18>
 800a206:	2aff      	cmp	r2, #255	@ 0xff
 800a208:	d904      	bls.n	800a214 <__ascii_wctomb+0x14>
 800a20a:	228a      	movs	r2, #138	@ 0x8a
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	4770      	bx	lr
 800a214:	2001      	movs	r0, #1
 800a216:	700a      	strb	r2, [r1, #0]
 800a218:	4770      	bx	lr
	...

0800a21c <__sflush_r>:
 800a21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	0716      	lsls	r6, r2, #28
 800a224:	4605      	mov	r5, r0
 800a226:	460c      	mov	r4, r1
 800a228:	d454      	bmi.n	800a2d4 <__sflush_r+0xb8>
 800a22a:	684b      	ldr	r3, [r1, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dc02      	bgt.n	800a236 <__sflush_r+0x1a>
 800a230:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd48      	ble.n	800a2c8 <__sflush_r+0xac>
 800a236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a238:	2e00      	cmp	r6, #0
 800a23a:	d045      	beq.n	800a2c8 <__sflush_r+0xac>
 800a23c:	2300      	movs	r3, #0
 800a23e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a242:	682f      	ldr	r7, [r5, #0]
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	d030      	beq.n	800a2ac <__sflush_r+0x90>
 800a24a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	0759      	lsls	r1, r3, #29
 800a250:	d505      	bpl.n	800a25e <__sflush_r+0x42>
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	1ad2      	subs	r2, r2, r3
 800a256:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a258:	b10b      	cbz	r3, 800a25e <__sflush_r+0x42>
 800a25a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a25c:	1ad2      	subs	r2, r2, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	4628      	mov	r0, r5
 800a262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a264:	6a21      	ldr	r1, [r4, #32]
 800a266:	47b0      	blx	r6
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	d106      	bne.n	800a27c <__sflush_r+0x60>
 800a26e:	6829      	ldr	r1, [r5, #0]
 800a270:	291d      	cmp	r1, #29
 800a272:	d82b      	bhi.n	800a2cc <__sflush_r+0xb0>
 800a274:	4a28      	ldr	r2, [pc, #160]	@ (800a318 <__sflush_r+0xfc>)
 800a276:	410a      	asrs	r2, r1
 800a278:	07d6      	lsls	r6, r2, #31
 800a27a:	d427      	bmi.n	800a2cc <__sflush_r+0xb0>
 800a27c:	2200      	movs	r2, #0
 800a27e:	6062      	str	r2, [r4, #4]
 800a280:	6922      	ldr	r2, [r4, #16]
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	d504      	bpl.n	800a292 <__sflush_r+0x76>
 800a288:	1c42      	adds	r2, r0, #1
 800a28a:	d101      	bne.n	800a290 <__sflush_r+0x74>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b903      	cbnz	r3, 800a292 <__sflush_r+0x76>
 800a290:	6560      	str	r0, [r4, #84]	@ 0x54
 800a292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a294:	602f      	str	r7, [r5, #0]
 800a296:	b1b9      	cbz	r1, 800a2c8 <__sflush_r+0xac>
 800a298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d002      	beq.n	800a2a6 <__sflush_r+0x8a>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f7fe fdf7 	bl	8008e94 <_free_r>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2aa:	e00d      	b.n	800a2c8 <__sflush_r+0xac>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	47b0      	blx	r6
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	1c50      	adds	r0, r2, #1
 800a2b6:	d1c9      	bne.n	800a24c <__sflush_r+0x30>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0c6      	beq.n	800a24c <__sflush_r+0x30>
 800a2be:	2b1d      	cmp	r3, #29
 800a2c0:	d001      	beq.n	800a2c6 <__sflush_r+0xaa>
 800a2c2:	2b16      	cmp	r3, #22
 800a2c4:	d11d      	bne.n	800a302 <__sflush_r+0xe6>
 800a2c6:	602f      	str	r7, [r5, #0]
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e021      	b.n	800a310 <__sflush_r+0xf4>
 800a2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d0:	b21b      	sxth	r3, r3
 800a2d2:	e01a      	b.n	800a30a <__sflush_r+0xee>
 800a2d4:	690f      	ldr	r7, [r1, #16]
 800a2d6:	2f00      	cmp	r7, #0
 800a2d8:	d0f6      	beq.n	800a2c8 <__sflush_r+0xac>
 800a2da:	0793      	lsls	r3, r2, #30
 800a2dc:	bf18      	it	ne
 800a2de:	2300      	movne	r3, #0
 800a2e0:	680e      	ldr	r6, [r1, #0]
 800a2e2:	bf08      	it	eq
 800a2e4:	694b      	ldreq	r3, [r1, #20]
 800a2e6:	1bf6      	subs	r6, r6, r7
 800a2e8:	600f      	str	r7, [r1, #0]
 800a2ea:	608b      	str	r3, [r1, #8]
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	ddeb      	ble.n	800a2c8 <__sflush_r+0xac>
 800a2f0:	4633      	mov	r3, r6
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	6a21      	ldr	r1, [r4, #32]
 800a2f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a2fc:	47e0      	blx	ip
 800a2fe:	2800      	cmp	r0, #0
 800a300:	dc07      	bgt.n	800a312 <__sflush_r+0xf6>
 800a302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a312:	4407      	add	r7, r0
 800a314:	1a36      	subs	r6, r6, r0
 800a316:	e7e9      	b.n	800a2ec <__sflush_r+0xd0>
 800a318:	dfbffffe 	.word	0xdfbffffe

0800a31c <_fflush_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	690b      	ldr	r3, [r1, #16]
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b913      	cbnz	r3, 800a32c <_fflush_r+0x10>
 800a326:	2500      	movs	r5, #0
 800a328:	4628      	mov	r0, r5
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	b118      	cbz	r0, 800a336 <_fflush_r+0x1a>
 800a32e:	6a03      	ldr	r3, [r0, #32]
 800a330:	b90b      	cbnz	r3, 800a336 <_fflush_r+0x1a>
 800a332:	f7fd fd8f 	bl	8007e54 <__sinit>
 800a336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0f3      	beq.n	800a326 <_fflush_r+0xa>
 800a33e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a340:	07d0      	lsls	r0, r2, #31
 800a342:	d404      	bmi.n	800a34e <_fflush_r+0x32>
 800a344:	0599      	lsls	r1, r3, #22
 800a346:	d402      	bmi.n	800a34e <_fflush_r+0x32>
 800a348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a34a:	f7fe fd5d 	bl	8008e08 <__retarget_lock_acquire_recursive>
 800a34e:	4628      	mov	r0, r5
 800a350:	4621      	mov	r1, r4
 800a352:	f7ff ff63 	bl	800a21c <__sflush_r>
 800a356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a358:	4605      	mov	r5, r0
 800a35a:	07da      	lsls	r2, r3, #31
 800a35c:	d4e4      	bmi.n	800a328 <_fflush_r+0xc>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	059b      	lsls	r3, r3, #22
 800a362:	d4e1      	bmi.n	800a328 <_fflush_r+0xc>
 800a364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a366:	f7fe fd51 	bl	8008e0c <__retarget_lock_release_recursive>
 800a36a:	e7dd      	b.n	800a328 <_fflush_r+0xc>

0800a36c <fiprintf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	b503      	push	{r0, r1, lr}
 800a370:	4601      	mov	r1, r0
 800a372:	ab03      	add	r3, sp, #12
 800a374:	4805      	ldr	r0, [pc, #20]	@ (800a38c <fiprintf+0x20>)
 800a376:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	f000 fb05 	bl	800a98c <_vfiprintf_r>
 800a382:	b002      	add	sp, #8
 800a384:	f85d eb04 	ldr.w	lr, [sp], #4
 800a388:	b003      	add	sp, #12
 800a38a:	4770      	bx	lr
 800a38c:	2000055c 	.word	0x2000055c

0800a390 <siscanf>:
 800a390:	b40e      	push	{r1, r2, r3}
 800a392:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a396:	b530      	push	{r4, r5, lr}
 800a398:	b09c      	sub	sp, #112	@ 0x70
 800a39a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a39c:	f854 5b04 	ldr.w	r5, [r4], #4
 800a3a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a3a4:	9002      	str	r0, [sp, #8]
 800a3a6:	9006      	str	r0, [sp, #24]
 800a3a8:	f7f5 feec 	bl	8000184 <strlen>
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <siscanf+0x4c>)
 800a3ae:	9003      	str	r0, [sp, #12]
 800a3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3b6:	9314      	str	r3, [sp, #80]	@ 0x50
 800a3b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3bc:	9007      	str	r0, [sp, #28]
 800a3be:	4808      	ldr	r0, [pc, #32]	@ (800a3e0 <siscanf+0x50>)
 800a3c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4623      	mov	r3, r4
 800a3c8:	a902      	add	r1, sp, #8
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	9401      	str	r4, [sp, #4]
 800a3ce:	f000 f943 	bl	800a658 <__ssvfiscanf_r>
 800a3d2:	b01c      	add	sp, #112	@ 0x70
 800a3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3d8:	b003      	add	sp, #12
 800a3da:	4770      	bx	lr
 800a3dc:	08007ee3 	.word	0x08007ee3
 800a3e0:	2000055c 	.word	0x2000055c

0800a3e4 <__gettzinfo>:
 800a3e4:	4800      	ldr	r0, [pc, #0]	@ (800a3e8 <__gettzinfo+0x4>)
 800a3e6:	4770      	bx	lr
 800a3e8:	200005b0 	.word	0x200005b0

0800a3ec <gmtime_r>:
 800a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a3f8:	4a4b      	ldr	r2, [pc, #300]	@ (800a528 <gmtime_r+0x13c>)
 800a3fa:	f7f6 fec1 	bl	8001180 <__aeabi_ldivmod>
 800a3fe:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a402:	2a00      	cmp	r2, #0
 800a404:	bfbc      	itt	lt
 800a406:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800a40a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800a40e:	fbb2 f3f1 	udiv	r3, r2, r1
 800a412:	fb01 2213 	mls	r2, r1, r3, r2
 800a416:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800a41a:	60a3      	str	r3, [r4, #8]
 800a41c:	fbb2 f3f1 	udiv	r3, r2, r1
 800a420:	fb01 2213 	mls	r2, r1, r3, r2
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	f04f 0207 	mov.w	r2, #7
 800a42a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800a42e:	bfac      	ite	ge
 800a430:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800a434:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800a438:	6063      	str	r3, [r4, #4]
 800a43a:	1cc3      	adds	r3, r0, #3
 800a43c:	fb93 f2f2 	sdiv	r2, r3, r2
 800a440:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	bf48      	it	mi
 800a448:	3307      	addmi	r3, #7
 800a44a:	2800      	cmp	r0, #0
 800a44c:	4937      	ldr	r1, [pc, #220]	@ (800a52c <gmtime_r+0x140>)
 800a44e:	61a3      	str	r3, [r4, #24]
 800a450:	bfbd      	ittte	lt
 800a452:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 800a456:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 800a45a:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a45e:	fb90 f1f1 	sdivge	r1, r0, r1
 800a462:	4b33      	ldr	r3, [pc, #204]	@ (800a530 <gmtime_r+0x144>)
 800a464:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800a468:	fb03 0001 	mla	r0, r3, r1, r0
 800a46c:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800a470:	fbb0 f3f3 	udiv	r3, r0, r3
 800a474:	fbb0 f2fc 	udiv	r2, r0, ip
 800a478:	4403      	add	r3, r0
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	4a2d      	ldr	r2, [pc, #180]	@ (800a534 <gmtime_r+0x148>)
 800a47e:	f240 176d 	movw	r7, #365	@ 0x16d
 800a482:	fbb0 f2f2 	udiv	r2, r0, r2
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	fbb3 f2f7 	udiv	r2, r3, r7
 800a48c:	2664      	movs	r6, #100	@ 0x64
 800a48e:	fbb3 f3fc 	udiv	r3, r3, ip
 800a492:	fbb2 f5f6 	udiv	r5, r2, r6
 800a496:	1aeb      	subs	r3, r5, r3
 800a498:	4403      	add	r3, r0
 800a49a:	2099      	movs	r0, #153	@ 0x99
 800a49c:	fb07 3312 	mls	r3, r7, r2, r3
 800a4a0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a4a4:	3702      	adds	r7, #2
 800a4a6:	fbb7 fcf0 	udiv	ip, r7, r0
 800a4aa:	f04f 0805 	mov.w	r8, #5
 800a4ae:	fb00 f00c 	mul.w	r0, r0, ip
 800a4b2:	3002      	adds	r0, #2
 800a4b4:	fbb0 f0f8 	udiv	r0, r0, r8
 800a4b8:	f103 0e01 	add.w	lr, r3, #1
 800a4bc:	ebae 0000 	sub.w	r0, lr, r0
 800a4c0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800a4c4:	4577      	cmp	r7, lr
 800a4c6:	bf8c      	ite	hi
 800a4c8:	f06f 0709 	mvnhi.w	r7, #9
 800a4cc:	2702      	movls	r7, #2
 800a4ce:	4467      	add	r7, ip
 800a4d0:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800a4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d8:	2f01      	cmp	r7, #1
 800a4da:	bf98      	it	ls
 800a4dc:	3101      	addls	r1, #1
 800a4de:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800a4e2:	d30c      	bcc.n	800a4fe <gmtime_r+0x112>
 800a4e4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a4e8:	61e3      	str	r3, [r4, #28]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800a4f0:	60e0      	str	r0, [r4, #12]
 800a4f2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	6223      	str	r3, [r4, #32]
 800a4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fe:	f012 0f03 	tst.w	r2, #3
 800a502:	d102      	bne.n	800a50a <gmtime_r+0x11e>
 800a504:	fb06 2515 	mls	r5, r6, r5, r2
 800a508:	b95d      	cbnz	r5, 800a522 <gmtime_r+0x136>
 800a50a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800a50e:	fbb2 f6f5 	udiv	r6, r2, r5
 800a512:	fb05 2216 	mls	r2, r5, r6, r2
 800a516:	fab2 f282 	clz	r2, r2
 800a51a:	0952      	lsrs	r2, r2, #5
 800a51c:	333b      	adds	r3, #59	@ 0x3b
 800a51e:	4413      	add	r3, r2
 800a520:	e7e2      	b.n	800a4e8 <gmtime_r+0xfc>
 800a522:	2201      	movs	r2, #1
 800a524:	e7fa      	b.n	800a51c <gmtime_r+0x130>
 800a526:	bf00      	nop
 800a528:	00015180 	.word	0x00015180
 800a52c:	00023ab1 	.word	0x00023ab1
 800a530:	fffdc54f 	.word	0xfffdc54f
 800a534:	00023ab0 	.word	0x00023ab0

0800a538 <_sbrk_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	2300      	movs	r3, #0
 800a53c:	4d05      	ldr	r5, [pc, #20]	@ (800a554 <_sbrk_r+0x1c>)
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7fc fd08 	bl	8006f58 <_sbrk>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_sbrk_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_sbrk_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	200009ec 	.word	0x200009ec

0800a558 <abort>:
 800a558:	2006      	movs	r0, #6
 800a55a:	b508      	push	{r3, lr}
 800a55c:	f000 ff3a 	bl	800b3d4 <raise>
 800a560:	2001      	movs	r0, #1
 800a562:	f7fc fc84 	bl	8006e6e <_exit>

0800a566 <_calloc_r>:
 800a566:	b570      	push	{r4, r5, r6, lr}
 800a568:	fba1 5402 	umull	r5, r4, r1, r2
 800a56c:	b93c      	cbnz	r4, 800a57e <_calloc_r+0x18>
 800a56e:	4629      	mov	r1, r5
 800a570:	f7ff f888 	bl	8009684 <_malloc_r>
 800a574:	4606      	mov	r6, r0
 800a576:	b928      	cbnz	r0, 800a584 <_calloc_r+0x1e>
 800a578:	2600      	movs	r6, #0
 800a57a:	4630      	mov	r0, r6
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	220c      	movs	r2, #12
 800a580:	6002      	str	r2, [r0, #0]
 800a582:	e7f9      	b.n	800a578 <_calloc_r+0x12>
 800a584:	462a      	mov	r2, r5
 800a586:	4621      	mov	r1, r4
 800a588:	f7fd fcdf 	bl	8007f4a <memset>
 800a58c:	e7f5      	b.n	800a57a <_calloc_r+0x14>
	...

0800a590 <__env_lock>:
 800a590:	4801      	ldr	r0, [pc, #4]	@ (800a598 <__env_lock+0x8>)
 800a592:	f7fe bc39 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	200009f1 	.word	0x200009f1

0800a59c <__env_unlock>:
 800a59c:	4801      	ldr	r0, [pc, #4]	@ (800a5a4 <__env_unlock+0x8>)
 800a59e:	f7fe bc35 	b.w	8008e0c <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	200009f1 	.word	0x200009f1

0800a5a8 <_sungetc_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	1c4b      	adds	r3, r1, #1
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	d103      	bne.n	800a5b8 <_sungetc_r+0x10>
 800a5b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	8993      	ldrh	r3, [r2, #12]
 800a5ba:	b2cd      	uxtb	r5, r1
 800a5bc:	f023 0320 	bic.w	r3, r3, #32
 800a5c0:	8193      	strh	r3, [r2, #12]
 800a5c2:	6853      	ldr	r3, [r2, #4]
 800a5c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a5c6:	b18a      	cbz	r2, 800a5ec <_sungetc_r+0x44>
 800a5c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	dd08      	ble.n	800a5e0 <_sungetc_r+0x38>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	1e5a      	subs	r2, r3, #1
 800a5d2:	6022      	str	r2, [r4, #0]
 800a5d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a5d8:	6863      	ldr	r3, [r4, #4]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	6063      	str	r3, [r4, #4]
 800a5de:	e7e9      	b.n	800a5b4 <_sungetc_r+0xc>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f000 fe02 	bl	800b1ea <__submore>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d0f1      	beq.n	800a5ce <_sungetc_r+0x26>
 800a5ea:	e7e1      	b.n	800a5b0 <_sungetc_r+0x8>
 800a5ec:	6921      	ldr	r1, [r4, #16]
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	b141      	cbz	r1, 800a604 <_sungetc_r+0x5c>
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	d206      	bcs.n	800a604 <_sungetc_r+0x5c>
 800a5f6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a5fa:	42a9      	cmp	r1, r5
 800a5fc:	d102      	bne.n	800a604 <_sungetc_r+0x5c>
 800a5fe:	3a01      	subs	r2, #1
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	e7ea      	b.n	800a5da <_sungetc_r+0x32>
 800a604:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a60c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a60e:	2303      	movs	r3, #3
 800a610:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a612:	4623      	mov	r3, r4
 800a614:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	2301      	movs	r3, #1
 800a61c:	e7de      	b.n	800a5dc <_sungetc_r+0x34>

0800a61e <__ssrefill_r>:
 800a61e:	b510      	push	{r4, lr}
 800a620:	460c      	mov	r4, r1
 800a622:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a624:	b169      	cbz	r1, 800a642 <__ssrefill_r+0x24>
 800a626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a62a:	4299      	cmp	r1, r3
 800a62c:	d001      	beq.n	800a632 <__ssrefill_r+0x14>
 800a62e:	f7fe fc31 	bl	8008e94 <_free_r>
 800a632:	2000      	movs	r0, #0
 800a634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a636:	6360      	str	r0, [r4, #52]	@ 0x34
 800a638:	6063      	str	r3, [r4, #4]
 800a63a:	b113      	cbz	r3, 800a642 <__ssrefill_r+0x24>
 800a63c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	bd10      	pop	{r4, pc}
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	2300      	movs	r3, #0
 800a64c:	6063      	str	r3, [r4, #4]
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	f043 0320 	orr.w	r3, r3, #32
 800a654:	81a3      	strh	r3, [r4, #12]
 800a656:	e7f3      	b.n	800a640 <__ssrefill_r+0x22>

0800a658 <__ssvfiscanf_r>:
 800a658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65c:	460c      	mov	r4, r1
 800a65e:	2100      	movs	r1, #0
 800a660:	4606      	mov	r6, r0
 800a662:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a666:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a66a:	49aa      	ldr	r1, [pc, #680]	@ (800a914 <__ssvfiscanf_r+0x2bc>)
 800a66c:	f10d 0804 	add.w	r8, sp, #4
 800a670:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a672:	49a9      	ldr	r1, [pc, #676]	@ (800a918 <__ssvfiscanf_r+0x2c0>)
 800a674:	4fa9      	ldr	r7, [pc, #676]	@ (800a91c <__ssvfiscanf_r+0x2c4>)
 800a676:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a67a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	7813      	ldrb	r3, [r2, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 8159 	beq.w	800a938 <__ssvfiscanf_r+0x2e0>
 800a686:	5cf9      	ldrb	r1, [r7, r3]
 800a688:	1c55      	adds	r5, r2, #1
 800a68a:	f011 0108 	ands.w	r1, r1, #8
 800a68e:	d019      	beq.n	800a6c4 <__ssvfiscanf_r+0x6c>
 800a690:	6863      	ldr	r3, [r4, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd0f      	ble.n	800a6b6 <__ssvfiscanf_r+0x5e>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	5cba      	ldrb	r2, [r7, r2]
 800a69c:	0712      	lsls	r2, r2, #28
 800a69e:	d401      	bmi.n	800a6a4 <__ssvfiscanf_r+0x4c>
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	e7ec      	b.n	800a67e <__ssvfiscanf_r+0x26>
 800a6a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	9245      	str	r2, [sp, #276]	@ 0x114
 800a6ac:	6862      	ldr	r2, [r4, #4]
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	3a01      	subs	r2, #1
 800a6b2:	6062      	str	r2, [r4, #4]
 800a6b4:	e7ec      	b.n	800a690 <__ssvfiscanf_r+0x38>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a6bc:	4798      	blx	r3
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0e9      	beq.n	800a696 <__ssvfiscanf_r+0x3e>
 800a6c2:	e7ed      	b.n	800a6a0 <__ssvfiscanf_r+0x48>
 800a6c4:	2b25      	cmp	r3, #37	@ 0x25
 800a6c6:	d012      	beq.n	800a6ee <__ssvfiscanf_r+0x96>
 800a6c8:	4699      	mov	r9, r3
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f340 8094 	ble.w	800a7fa <__ssvfiscanf_r+0x1a2>
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	7813      	ldrb	r3, [r2, #0]
 800a6d6:	454b      	cmp	r3, r9
 800a6d8:	f040 812e 	bne.w	800a938 <__ssvfiscanf_r+0x2e0>
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	3201      	adds	r2, #1
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	6063      	str	r3, [r4, #4]
 800a6e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	9345      	str	r3, [sp, #276]	@ 0x114
 800a6ec:	e7d8      	b.n	800a6a0 <__ssvfiscanf_r+0x48>
 800a6ee:	9141      	str	r1, [sp, #260]	@ 0x104
 800a6f0:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a6f2:	7853      	ldrb	r3, [r2, #1]
 800a6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6f6:	bf04      	itt	eq
 800a6f8:	2310      	moveq	r3, #16
 800a6fa:	1c95      	addeq	r5, r2, #2
 800a6fc:	f04f 020a 	mov.w	r2, #10
 800a700:	bf08      	it	eq
 800a702:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a704:	46a9      	mov	r9, r5
 800a706:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a70a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a70e:	2b09      	cmp	r3, #9
 800a710:	d91e      	bls.n	800a750 <__ssvfiscanf_r+0xf8>
 800a712:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800a920 <__ssvfiscanf_r+0x2c8>
 800a716:	2203      	movs	r2, #3
 800a718:	4650      	mov	r0, sl
 800a71a:	f000 fe77 	bl	800b40c <memchr>
 800a71e:	b138      	cbz	r0, 800a730 <__ssvfiscanf_r+0xd8>
 800a720:	2301      	movs	r3, #1
 800a722:	464d      	mov	r5, r9
 800a724:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a726:	eba0 000a 	sub.w	r0, r0, sl
 800a72a:	4083      	lsls	r3, r0
 800a72c:	4313      	orrs	r3, r2
 800a72e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a730:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a734:	2b78      	cmp	r3, #120	@ 0x78
 800a736:	d806      	bhi.n	800a746 <__ssvfiscanf_r+0xee>
 800a738:	2b57      	cmp	r3, #87	@ 0x57
 800a73a:	d810      	bhi.n	800a75e <__ssvfiscanf_r+0x106>
 800a73c:	2b25      	cmp	r3, #37	@ 0x25
 800a73e:	d0c3      	beq.n	800a6c8 <__ssvfiscanf_r+0x70>
 800a740:	d856      	bhi.n	800a7f0 <__ssvfiscanf_r+0x198>
 800a742:	2b00      	cmp	r3, #0
 800a744:	d064      	beq.n	800a810 <__ssvfiscanf_r+0x1b8>
 800a746:	2303      	movs	r3, #3
 800a748:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a74a:	230a      	movs	r3, #10
 800a74c:	9342      	str	r3, [sp, #264]	@ 0x108
 800a74e:	e077      	b.n	800a840 <__ssvfiscanf_r+0x1e8>
 800a750:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a752:	464d      	mov	r5, r9
 800a754:	fb02 1103 	mla	r1, r2, r3, r1
 800a758:	3930      	subs	r1, #48	@ 0x30
 800a75a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a75c:	e7d2      	b.n	800a704 <__ssvfiscanf_r+0xac>
 800a75e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a762:	2a20      	cmp	r2, #32
 800a764:	d8ef      	bhi.n	800a746 <__ssvfiscanf_r+0xee>
 800a766:	a101      	add	r1, pc, #4	@ (adr r1, 800a76c <__ssvfiscanf_r+0x114>)
 800a768:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a76c:	0800a81f 	.word	0x0800a81f
 800a770:	0800a747 	.word	0x0800a747
 800a774:	0800a747 	.word	0x0800a747
 800a778:	0800a879 	.word	0x0800a879
 800a77c:	0800a747 	.word	0x0800a747
 800a780:	0800a747 	.word	0x0800a747
 800a784:	0800a747 	.word	0x0800a747
 800a788:	0800a747 	.word	0x0800a747
 800a78c:	0800a747 	.word	0x0800a747
 800a790:	0800a747 	.word	0x0800a747
 800a794:	0800a747 	.word	0x0800a747
 800a798:	0800a88f 	.word	0x0800a88f
 800a79c:	0800a875 	.word	0x0800a875
 800a7a0:	0800a7f7 	.word	0x0800a7f7
 800a7a4:	0800a7f7 	.word	0x0800a7f7
 800a7a8:	0800a7f7 	.word	0x0800a7f7
 800a7ac:	0800a747 	.word	0x0800a747
 800a7b0:	0800a831 	.word	0x0800a831
 800a7b4:	0800a747 	.word	0x0800a747
 800a7b8:	0800a747 	.word	0x0800a747
 800a7bc:	0800a747 	.word	0x0800a747
 800a7c0:	0800a747 	.word	0x0800a747
 800a7c4:	0800a89f 	.word	0x0800a89f
 800a7c8:	0800a839 	.word	0x0800a839
 800a7cc:	0800a817 	.word	0x0800a817
 800a7d0:	0800a747 	.word	0x0800a747
 800a7d4:	0800a747 	.word	0x0800a747
 800a7d8:	0800a89b 	.word	0x0800a89b
 800a7dc:	0800a747 	.word	0x0800a747
 800a7e0:	0800a875 	.word	0x0800a875
 800a7e4:	0800a747 	.word	0x0800a747
 800a7e8:	0800a747 	.word	0x0800a747
 800a7ec:	0800a81f 	.word	0x0800a81f
 800a7f0:	3b45      	subs	r3, #69	@ 0x45
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d8a7      	bhi.n	800a746 <__ssvfiscanf_r+0xee>
 800a7f6:	2305      	movs	r3, #5
 800a7f8:	e021      	b.n	800a83e <__ssvfiscanf_r+0x1e6>
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a800:	4798      	blx	r3
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f af65 	beq.w	800a6d2 <__ssvfiscanf_r+0x7a>
 800a808:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f040 808c 	bne.w	800a928 <__ssvfiscanf_r+0x2d0>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	e08c      	b.n	800a930 <__ssvfiscanf_r+0x2d8>
 800a816:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a818:	f042 0220 	orr.w	r2, r2, #32
 800a81c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a81e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a824:	9241      	str	r2, [sp, #260]	@ 0x104
 800a826:	2210      	movs	r2, #16
 800a828:	2b6e      	cmp	r3, #110	@ 0x6e
 800a82a:	9242      	str	r2, [sp, #264]	@ 0x108
 800a82c:	d902      	bls.n	800a834 <__ssvfiscanf_r+0x1dc>
 800a82e:	e005      	b.n	800a83c <__ssvfiscanf_r+0x1e4>
 800a830:	2300      	movs	r3, #0
 800a832:	9342      	str	r3, [sp, #264]	@ 0x108
 800a834:	2303      	movs	r3, #3
 800a836:	e002      	b.n	800a83e <__ssvfiscanf_r+0x1e6>
 800a838:	2308      	movs	r3, #8
 800a83a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a83c:	2304      	movs	r3, #4
 800a83e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a840:	6863      	ldr	r3, [r4, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	dd39      	ble.n	800a8ba <__ssvfiscanf_r+0x262>
 800a846:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a848:	0659      	lsls	r1, r3, #25
 800a84a:	d404      	bmi.n	800a856 <__ssvfiscanf_r+0x1fe>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	5cba      	ldrb	r2, [r7, r2]
 800a852:	0712      	lsls	r2, r2, #28
 800a854:	d438      	bmi.n	800a8c8 <__ssvfiscanf_r+0x270>
 800a856:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a858:	2b02      	cmp	r3, #2
 800a85a:	dc47      	bgt.n	800a8ec <__ssvfiscanf_r+0x294>
 800a85c:	466b      	mov	r3, sp
 800a85e:	4622      	mov	r2, r4
 800a860:	4630      	mov	r0, r6
 800a862:	a941      	add	r1, sp, #260	@ 0x104
 800a864:	f000 fb3c 	bl	800aee0 <_scanf_chars>
 800a868:	2801      	cmp	r0, #1
 800a86a:	d065      	beq.n	800a938 <__ssvfiscanf_r+0x2e0>
 800a86c:	2802      	cmp	r0, #2
 800a86e:	f47f af17 	bne.w	800a6a0 <__ssvfiscanf_r+0x48>
 800a872:	e7c9      	b.n	800a808 <__ssvfiscanf_r+0x1b0>
 800a874:	220a      	movs	r2, #10
 800a876:	e7d7      	b.n	800a828 <__ssvfiscanf_r+0x1d0>
 800a878:	4629      	mov	r1, r5
 800a87a:	4640      	mov	r0, r8
 800a87c:	f000 fc7c 	bl	800b178 <__sccl>
 800a880:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a882:	4605      	mov	r5, r0
 800a884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a888:	9341      	str	r3, [sp, #260]	@ 0x104
 800a88a:	2301      	movs	r3, #1
 800a88c:	e7d7      	b.n	800a83e <__ssvfiscanf_r+0x1e6>
 800a88e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a894:	9341      	str	r3, [sp, #260]	@ 0x104
 800a896:	2300      	movs	r3, #0
 800a898:	e7d1      	b.n	800a83e <__ssvfiscanf_r+0x1e6>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e7cf      	b.n	800a83e <__ssvfiscanf_r+0x1e6>
 800a89e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a8a0:	06c3      	lsls	r3, r0, #27
 800a8a2:	f53f aefd 	bmi.w	800a6a0 <__ssvfiscanf_r+0x48>
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a8aa:	1d19      	adds	r1, r3, #4
 800a8ac:	9100      	str	r1, [sp, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	07c0      	lsls	r0, r0, #31
 800a8b2:	bf4c      	ite	mi
 800a8b4:	801a      	strhmi	r2, [r3, #0]
 800a8b6:	601a      	strpl	r2, [r3, #0]
 800a8b8:	e6f2      	b.n	800a6a0 <__ssvfiscanf_r+0x48>
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4630      	mov	r0, r6
 800a8be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a8c0:	4798      	blx	r3
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0bf      	beq.n	800a846 <__ssvfiscanf_r+0x1ee>
 800a8c6:	e79f      	b.n	800a808 <__ssvfiscanf_r+0x1b0>
 800a8c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	9245      	str	r2, [sp, #276]	@ 0x114
 800a8ce:	6862      	ldr	r2, [r4, #4]
 800a8d0:	3a01      	subs	r2, #1
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	6062      	str	r2, [r4, #4]
 800a8d6:	dd02      	ble.n	800a8de <__ssvfiscanf_r+0x286>
 800a8d8:	3301      	adds	r3, #1
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	e7b6      	b.n	800a84c <__ssvfiscanf_r+0x1f4>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a8e4:	4798      	blx	r3
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0b0      	beq.n	800a84c <__ssvfiscanf_r+0x1f4>
 800a8ea:	e78d      	b.n	800a808 <__ssvfiscanf_r+0x1b0>
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	dc06      	bgt.n	800a8fe <__ssvfiscanf_r+0x2a6>
 800a8f0:	466b      	mov	r3, sp
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	a941      	add	r1, sp, #260	@ 0x104
 800a8f8:	f000 fb4c 	bl	800af94 <_scanf_i>
 800a8fc:	e7b4      	b.n	800a868 <__ssvfiscanf_r+0x210>
 800a8fe:	4b09      	ldr	r3, [pc, #36]	@ (800a924 <__ssvfiscanf_r+0x2cc>)
 800a900:	2b00      	cmp	r3, #0
 800a902:	f43f aecd 	beq.w	800a6a0 <__ssvfiscanf_r+0x48>
 800a906:	466b      	mov	r3, sp
 800a908:	4622      	mov	r2, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	a941      	add	r1, sp, #260	@ 0x104
 800a90e:	f3af 8000 	nop.w
 800a912:	e7a9      	b.n	800a868 <__ssvfiscanf_r+0x210>
 800a914:	0800a5a9 	.word	0x0800a5a9
 800a918:	0800a61f 	.word	0x0800a61f
 800a91c:	0800c611 	.word	0x0800c611
 800a920:	0800caf8 	.word	0x0800caf8
 800a924:	00000000 	.word	0x00000000
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	065b      	lsls	r3, r3, #25
 800a92c:	f53f af70 	bmi.w	800a810 <__ssvfiscanf_r+0x1b8>
 800a930:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a938:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a93a:	e7f9      	b.n	800a930 <__ssvfiscanf_r+0x2d8>

0800a93c <__sfputc_r>:
 800a93c:	6893      	ldr	r3, [r2, #8]
 800a93e:	b410      	push	{r4}
 800a940:	3b01      	subs	r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	6093      	str	r3, [r2, #8]
 800a946:	da07      	bge.n	800a958 <__sfputc_r+0x1c>
 800a948:	6994      	ldr	r4, [r2, #24]
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	db01      	blt.n	800a952 <__sfputc_r+0x16>
 800a94e:	290a      	cmp	r1, #10
 800a950:	d102      	bne.n	800a958 <__sfputc_r+0x1c>
 800a952:	bc10      	pop	{r4}
 800a954:	f000 bc81 	b.w	800b25a <__swbuf_r>
 800a958:	6813      	ldr	r3, [r2, #0]
 800a95a:	1c58      	adds	r0, r3, #1
 800a95c:	6010      	str	r0, [r2, #0]
 800a95e:	7019      	strb	r1, [r3, #0]
 800a960:	4608      	mov	r0, r1
 800a962:	bc10      	pop	{r4}
 800a964:	4770      	bx	lr

0800a966 <__sfputs_r>:
 800a966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a968:	4606      	mov	r6, r0
 800a96a:	460f      	mov	r7, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	18d5      	adds	r5, r2, r3
 800a970:	42ac      	cmp	r4, r5
 800a972:	d101      	bne.n	800a978 <__sfputs_r+0x12>
 800a974:	2000      	movs	r0, #0
 800a976:	e007      	b.n	800a988 <__sfputs_r+0x22>
 800a978:	463a      	mov	r2, r7
 800a97a:	4630      	mov	r0, r6
 800a97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a980:	f7ff ffdc 	bl	800a93c <__sfputc_r>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d1f3      	bne.n	800a970 <__sfputs_r+0xa>
 800a988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a98c <_vfiprintf_r>:
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	460d      	mov	r5, r1
 800a992:	4614      	mov	r4, r2
 800a994:	4698      	mov	r8, r3
 800a996:	4606      	mov	r6, r0
 800a998:	b09d      	sub	sp, #116	@ 0x74
 800a99a:	b118      	cbz	r0, 800a9a4 <_vfiprintf_r+0x18>
 800a99c:	6a03      	ldr	r3, [r0, #32]
 800a99e:	b90b      	cbnz	r3, 800a9a4 <_vfiprintf_r+0x18>
 800a9a0:	f7fd fa58 	bl	8007e54 <__sinit>
 800a9a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9a6:	07d9      	lsls	r1, r3, #31
 800a9a8:	d405      	bmi.n	800a9b6 <_vfiprintf_r+0x2a>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	059a      	lsls	r2, r3, #22
 800a9ae:	d402      	bmi.n	800a9b6 <_vfiprintf_r+0x2a>
 800a9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9b2:	f7fe fa29 	bl	8008e08 <__retarget_lock_acquire_recursive>
 800a9b6:	89ab      	ldrh	r3, [r5, #12]
 800a9b8:	071b      	lsls	r3, r3, #28
 800a9ba:	d501      	bpl.n	800a9c0 <_vfiprintf_r+0x34>
 800a9bc:	692b      	ldr	r3, [r5, #16]
 800a9be:	b99b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x5c>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f000 fc88 	bl	800b2d8 <__swsetup_r>
 800a9c8:	b170      	cbz	r0, 800a9e8 <_vfiprintf_r+0x5c>
 800a9ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9cc:	07dc      	lsls	r4, r3, #31
 800a9ce:	d504      	bpl.n	800a9da <_vfiprintf_r+0x4e>
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	b01d      	add	sp, #116	@ 0x74
 800a9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	0598      	lsls	r0, r3, #22
 800a9de:	d4f7      	bmi.n	800a9d0 <_vfiprintf_r+0x44>
 800a9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9e2:	f7fe fa13 	bl	8008e0c <__retarget_lock_release_recursive>
 800a9e6:	e7f3      	b.n	800a9d0 <_vfiprintf_r+0x44>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ec:	2320      	movs	r3, #32
 800a9ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9f2:	2330      	movs	r3, #48	@ 0x30
 800a9f4:	f04f 0901 	mov.w	r9, #1
 800a9f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800aba8 <_vfiprintf_r+0x21c>
 800aa00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa04:	4623      	mov	r3, r4
 800aa06:	469a      	mov	sl, r3
 800aa08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0c:	b10a      	cbz	r2, 800aa12 <_vfiprintf_r+0x86>
 800aa0e:	2a25      	cmp	r2, #37	@ 0x25
 800aa10:	d1f9      	bne.n	800aa06 <_vfiprintf_r+0x7a>
 800aa12:	ebba 0b04 	subs.w	fp, sl, r4
 800aa16:	d00b      	beq.n	800aa30 <_vfiprintf_r+0xa4>
 800aa18:	465b      	mov	r3, fp
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f7ff ffa1 	bl	800a966 <__sfputs_r>
 800aa24:	3001      	adds	r0, #1
 800aa26:	f000 80a7 	beq.w	800ab78 <_vfiprintf_r+0x1ec>
 800aa2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa2c:	445a      	add	r2, fp
 800aa2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa30:	f89a 3000 	ldrb.w	r3, [sl]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 809f 	beq.w	800ab78 <_vfiprintf_r+0x1ec>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa44:	f10a 0a01 	add.w	sl, sl, #1
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9307      	str	r3, [sp, #28]
 800aa4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa50:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa52:	4654      	mov	r4, sl
 800aa54:	2205      	movs	r2, #5
 800aa56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5a:	4853      	ldr	r0, [pc, #332]	@ (800aba8 <_vfiprintf_r+0x21c>)
 800aa5c:	f000 fcd6 	bl	800b40c <memchr>
 800aa60:	9a04      	ldr	r2, [sp, #16]
 800aa62:	b9d8      	cbnz	r0, 800aa9c <_vfiprintf_r+0x110>
 800aa64:	06d1      	lsls	r1, r2, #27
 800aa66:	bf44      	itt	mi
 800aa68:	2320      	movmi	r3, #32
 800aa6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa6e:	0713      	lsls	r3, r2, #28
 800aa70:	bf44      	itt	mi
 800aa72:	232b      	movmi	r3, #43	@ 0x2b
 800aa74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa78:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa7e:	d015      	beq.n	800aaac <_vfiprintf_r+0x120>
 800aa80:	4654      	mov	r4, sl
 800aa82:	2000      	movs	r0, #0
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa90:	3b30      	subs	r3, #48	@ 0x30
 800aa92:	2b09      	cmp	r3, #9
 800aa94:	d94b      	bls.n	800ab2e <_vfiprintf_r+0x1a2>
 800aa96:	b1b0      	cbz	r0, 800aac6 <_vfiprintf_r+0x13a>
 800aa98:	9207      	str	r2, [sp, #28]
 800aa9a:	e014      	b.n	800aac6 <_vfiprintf_r+0x13a>
 800aa9c:	eba0 0308 	sub.w	r3, r0, r8
 800aaa0:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	46a2      	mov	sl, r4
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	e7d2      	b.n	800aa52 <_vfiprintf_r+0xc6>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	1d19      	adds	r1, r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	9103      	str	r1, [sp, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfbb      	ittet	lt
 800aab8:	425b      	neglt	r3, r3
 800aaba:	f042 0202 	orrlt.w	r2, r2, #2
 800aabe:	9307      	strge	r3, [sp, #28]
 800aac0:	9307      	strlt	r3, [sp, #28]
 800aac2:	bfb8      	it	lt
 800aac4:	9204      	strlt	r2, [sp, #16]
 800aac6:	7823      	ldrb	r3, [r4, #0]
 800aac8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaca:	d10a      	bne.n	800aae2 <_vfiprintf_r+0x156>
 800aacc:	7863      	ldrb	r3, [r4, #1]
 800aace:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad0:	d132      	bne.n	800ab38 <_vfiprintf_r+0x1ac>
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	3402      	adds	r4, #2
 800aad6:	1d1a      	adds	r2, r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	9203      	str	r2, [sp, #12]
 800aadc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800abac <_vfiprintf_r+0x220>
 800aae6:	2203      	movs	r2, #3
 800aae8:	4650      	mov	r0, sl
 800aaea:	7821      	ldrb	r1, [r4, #0]
 800aaec:	f000 fc8e 	bl	800b40c <memchr>
 800aaf0:	b138      	cbz	r0, 800ab02 <_vfiprintf_r+0x176>
 800aaf2:	2240      	movs	r2, #64	@ 0x40
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	eba0 000a 	sub.w	r0, r0, sl
 800aafa:	4082      	lsls	r2, r0
 800aafc:	4313      	orrs	r3, r2
 800aafe:	3401      	adds	r4, #1
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	2206      	movs	r2, #6
 800ab08:	4829      	ldr	r0, [pc, #164]	@ (800abb0 <_vfiprintf_r+0x224>)
 800ab0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab0e:	f000 fc7d 	bl	800b40c <memchr>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d03f      	beq.n	800ab96 <_vfiprintf_r+0x20a>
 800ab16:	4b27      	ldr	r3, [pc, #156]	@ (800abb4 <_vfiprintf_r+0x228>)
 800ab18:	bb1b      	cbnz	r3, 800ab62 <_vfiprintf_r+0x1d6>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	3307      	adds	r3, #7
 800ab1e:	f023 0307 	bic.w	r3, r3, #7
 800ab22:	3308      	adds	r3, #8
 800ab24:	9303      	str	r3, [sp, #12]
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	443b      	add	r3, r7
 800ab2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab2c:	e76a      	b.n	800aa04 <_vfiprintf_r+0x78>
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2001      	movs	r0, #1
 800ab32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab36:	e7a8      	b.n	800aa8a <_vfiprintf_r+0xfe>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f04f 0c0a 	mov.w	ip, #10
 800ab3e:	4619      	mov	r1, r3
 800ab40:	3401      	adds	r4, #1
 800ab42:	9305      	str	r3, [sp, #20]
 800ab44:	4620      	mov	r0, r4
 800ab46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab4a:	3a30      	subs	r2, #48	@ 0x30
 800ab4c:	2a09      	cmp	r2, #9
 800ab4e:	d903      	bls.n	800ab58 <_vfiprintf_r+0x1cc>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0c6      	beq.n	800aae2 <_vfiprintf_r+0x156>
 800ab54:	9105      	str	r1, [sp, #20]
 800ab56:	e7c4      	b.n	800aae2 <_vfiprintf_r+0x156>
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab60:	e7f0      	b.n	800ab44 <_vfiprintf_r+0x1b8>
 800ab62:	ab03      	add	r3, sp, #12
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	462a      	mov	r2, r5
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4b13      	ldr	r3, [pc, #76]	@ (800abb8 <_vfiprintf_r+0x22c>)
 800ab6c:	a904      	add	r1, sp, #16
 800ab6e:	f3af 8000 	nop.w
 800ab72:	4607      	mov	r7, r0
 800ab74:	1c78      	adds	r0, r7, #1
 800ab76:	d1d6      	bne.n	800ab26 <_vfiprintf_r+0x19a>
 800ab78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab7a:	07d9      	lsls	r1, r3, #31
 800ab7c:	d405      	bmi.n	800ab8a <_vfiprintf_r+0x1fe>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	059a      	lsls	r2, r3, #22
 800ab82:	d402      	bmi.n	800ab8a <_vfiprintf_r+0x1fe>
 800ab84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab86:	f7fe f941 	bl	8008e0c <__retarget_lock_release_recursive>
 800ab8a:	89ab      	ldrh	r3, [r5, #12]
 800ab8c:	065b      	lsls	r3, r3, #25
 800ab8e:	f53f af1f 	bmi.w	800a9d0 <_vfiprintf_r+0x44>
 800ab92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab94:	e71e      	b.n	800a9d4 <_vfiprintf_r+0x48>
 800ab96:	ab03      	add	r3, sp, #12
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	462a      	mov	r2, r5
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <_vfiprintf_r+0x22c>)
 800aba0:	a904      	add	r1, sp, #16
 800aba2:	f000 f87d 	bl	800aca0 <_printf_i>
 800aba6:	e7e4      	b.n	800ab72 <_vfiprintf_r+0x1e6>
 800aba8:	0800cafc 	.word	0x0800cafc
 800abac:	0800caf8 	.word	0x0800caf8
 800abb0:	0800cb02 	.word	0x0800cb02
 800abb4:	00000000 	.word	0x00000000
 800abb8:	0800a967 	.word	0x0800a967

0800abbc <_printf_common>:
 800abbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	4616      	mov	r6, r2
 800abc2:	4698      	mov	r8, r3
 800abc4:	688a      	ldr	r2, [r1, #8]
 800abc6:	690b      	ldr	r3, [r1, #16]
 800abc8:	4607      	mov	r7, r0
 800abca:	4293      	cmp	r3, r2
 800abcc:	bfb8      	it	lt
 800abce:	4613      	movlt	r3, r2
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abd6:	460c      	mov	r4, r1
 800abd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abdc:	b10a      	cbz	r2, 800abe2 <_printf_common+0x26>
 800abde:	3301      	adds	r3, #1
 800abe0:	6033      	str	r3, [r6, #0]
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	0699      	lsls	r1, r3, #26
 800abe6:	bf42      	ittt	mi
 800abe8:	6833      	ldrmi	r3, [r6, #0]
 800abea:	3302      	addmi	r3, #2
 800abec:	6033      	strmi	r3, [r6, #0]
 800abee:	6825      	ldr	r5, [r4, #0]
 800abf0:	f015 0506 	ands.w	r5, r5, #6
 800abf4:	d106      	bne.n	800ac04 <_printf_common+0x48>
 800abf6:	f104 0a19 	add.w	sl, r4, #25
 800abfa:	68e3      	ldr	r3, [r4, #12]
 800abfc:	6832      	ldr	r2, [r6, #0]
 800abfe:	1a9b      	subs	r3, r3, r2
 800ac00:	42ab      	cmp	r3, r5
 800ac02:	dc2b      	bgt.n	800ac5c <_printf_common+0xa0>
 800ac04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac08:	6822      	ldr	r2, [r4, #0]
 800ac0a:	3b00      	subs	r3, #0
 800ac0c:	bf18      	it	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	0692      	lsls	r2, r2, #26
 800ac12:	d430      	bmi.n	800ac76 <_printf_common+0xba>
 800ac14:	4641      	mov	r1, r8
 800ac16:	4638      	mov	r0, r7
 800ac18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac1c:	47c8      	blx	r9
 800ac1e:	3001      	adds	r0, #1
 800ac20:	d023      	beq.n	800ac6a <_printf_common+0xae>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	6922      	ldr	r2, [r4, #16]
 800ac26:	f003 0306 	and.w	r3, r3, #6
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	bf14      	ite	ne
 800ac2e:	2500      	movne	r5, #0
 800ac30:	6833      	ldreq	r3, [r6, #0]
 800ac32:	f04f 0600 	mov.w	r6, #0
 800ac36:	bf08      	it	eq
 800ac38:	68e5      	ldreq	r5, [r4, #12]
 800ac3a:	f104 041a 	add.w	r4, r4, #26
 800ac3e:	bf08      	it	eq
 800ac40:	1aed      	subeq	r5, r5, r3
 800ac42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac46:	bf08      	it	eq
 800ac48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	bfc4      	itt	gt
 800ac50:	1a9b      	subgt	r3, r3, r2
 800ac52:	18ed      	addgt	r5, r5, r3
 800ac54:	42b5      	cmp	r5, r6
 800ac56:	d11a      	bne.n	800ac8e <_printf_common+0xd2>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e008      	b.n	800ac6e <_printf_common+0xb2>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	4652      	mov	r2, sl
 800ac60:	4641      	mov	r1, r8
 800ac62:	4638      	mov	r0, r7
 800ac64:	47c8      	blx	r9
 800ac66:	3001      	adds	r0, #1
 800ac68:	d103      	bne.n	800ac72 <_printf_common+0xb6>
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	3501      	adds	r5, #1
 800ac74:	e7c1      	b.n	800abfa <_printf_common+0x3e>
 800ac76:	2030      	movs	r0, #48	@ 0x30
 800ac78:	18e1      	adds	r1, r4, r3
 800ac7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac84:	4422      	add	r2, r4
 800ac86:	3302      	adds	r3, #2
 800ac88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac8c:	e7c2      	b.n	800ac14 <_printf_common+0x58>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4622      	mov	r2, r4
 800ac92:	4641      	mov	r1, r8
 800ac94:	4638      	mov	r0, r7
 800ac96:	47c8      	blx	r9
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d0e6      	beq.n	800ac6a <_printf_common+0xae>
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7d9      	b.n	800ac54 <_printf_common+0x98>

0800aca0 <_printf_i>:
 800aca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	7e0f      	ldrb	r7, [r1, #24]
 800aca6:	4691      	mov	r9, r2
 800aca8:	2f78      	cmp	r7, #120	@ 0x78
 800acaa:	4680      	mov	r8, r0
 800acac:	460c      	mov	r4, r1
 800acae:	469a      	mov	sl, r3
 800acb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acb6:	d807      	bhi.n	800acc8 <_printf_i+0x28>
 800acb8:	2f62      	cmp	r7, #98	@ 0x62
 800acba:	d80a      	bhi.n	800acd2 <_printf_i+0x32>
 800acbc:	2f00      	cmp	r7, #0
 800acbe:	f000 80d3 	beq.w	800ae68 <_printf_i+0x1c8>
 800acc2:	2f58      	cmp	r7, #88	@ 0x58
 800acc4:	f000 80ba 	beq.w	800ae3c <_printf_i+0x19c>
 800acc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800accc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acd0:	e03a      	b.n	800ad48 <_printf_i+0xa8>
 800acd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acd6:	2b15      	cmp	r3, #21
 800acd8:	d8f6      	bhi.n	800acc8 <_printf_i+0x28>
 800acda:	a101      	add	r1, pc, #4	@ (adr r1, 800ace0 <_printf_i+0x40>)
 800acdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ace0:	0800ad39 	.word	0x0800ad39
 800ace4:	0800ad4d 	.word	0x0800ad4d
 800ace8:	0800acc9 	.word	0x0800acc9
 800acec:	0800acc9 	.word	0x0800acc9
 800acf0:	0800acc9 	.word	0x0800acc9
 800acf4:	0800acc9 	.word	0x0800acc9
 800acf8:	0800ad4d 	.word	0x0800ad4d
 800acfc:	0800acc9 	.word	0x0800acc9
 800ad00:	0800acc9 	.word	0x0800acc9
 800ad04:	0800acc9 	.word	0x0800acc9
 800ad08:	0800acc9 	.word	0x0800acc9
 800ad0c:	0800ae4f 	.word	0x0800ae4f
 800ad10:	0800ad77 	.word	0x0800ad77
 800ad14:	0800ae09 	.word	0x0800ae09
 800ad18:	0800acc9 	.word	0x0800acc9
 800ad1c:	0800acc9 	.word	0x0800acc9
 800ad20:	0800ae71 	.word	0x0800ae71
 800ad24:	0800acc9 	.word	0x0800acc9
 800ad28:	0800ad77 	.word	0x0800ad77
 800ad2c:	0800acc9 	.word	0x0800acc9
 800ad30:	0800acc9 	.word	0x0800acc9
 800ad34:	0800ae11 	.word	0x0800ae11
 800ad38:	6833      	ldr	r3, [r6, #0]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6032      	str	r2, [r6, #0]
 800ad40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e09e      	b.n	800ae8a <_printf_i+0x1ea>
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	1d19      	adds	r1, r3, #4
 800ad52:	6031      	str	r1, [r6, #0]
 800ad54:	0606      	lsls	r6, r0, #24
 800ad56:	d501      	bpl.n	800ad5c <_printf_i+0xbc>
 800ad58:	681d      	ldr	r5, [r3, #0]
 800ad5a:	e003      	b.n	800ad64 <_printf_i+0xc4>
 800ad5c:	0645      	lsls	r5, r0, #25
 800ad5e:	d5fb      	bpl.n	800ad58 <_printf_i+0xb8>
 800ad60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	da03      	bge.n	800ad70 <_printf_i+0xd0>
 800ad68:	232d      	movs	r3, #45	@ 0x2d
 800ad6a:	426d      	negs	r5, r5
 800ad6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad70:	230a      	movs	r3, #10
 800ad72:	4859      	ldr	r0, [pc, #356]	@ (800aed8 <_printf_i+0x238>)
 800ad74:	e011      	b.n	800ad9a <_printf_i+0xfa>
 800ad76:	6821      	ldr	r1, [r4, #0]
 800ad78:	6833      	ldr	r3, [r6, #0]
 800ad7a:	0608      	lsls	r0, r1, #24
 800ad7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad80:	d402      	bmi.n	800ad88 <_printf_i+0xe8>
 800ad82:	0649      	lsls	r1, r1, #25
 800ad84:	bf48      	it	mi
 800ad86:	b2ad      	uxthmi	r5, r5
 800ad88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad8a:	6033      	str	r3, [r6, #0]
 800ad8c:	bf14      	ite	ne
 800ad8e:	230a      	movne	r3, #10
 800ad90:	2308      	moveq	r3, #8
 800ad92:	4851      	ldr	r0, [pc, #324]	@ (800aed8 <_printf_i+0x238>)
 800ad94:	2100      	movs	r1, #0
 800ad96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad9a:	6866      	ldr	r6, [r4, #4]
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	bfa8      	it	ge
 800ada0:	6821      	ldrge	r1, [r4, #0]
 800ada2:	60a6      	str	r6, [r4, #8]
 800ada4:	bfa4      	itt	ge
 800ada6:	f021 0104 	bicge.w	r1, r1, #4
 800adaa:	6021      	strge	r1, [r4, #0]
 800adac:	b90d      	cbnz	r5, 800adb2 <_printf_i+0x112>
 800adae:	2e00      	cmp	r6, #0
 800adb0:	d04b      	beq.n	800ae4a <_printf_i+0x1aa>
 800adb2:	4616      	mov	r6, r2
 800adb4:	fbb5 f1f3 	udiv	r1, r5, r3
 800adb8:	fb03 5711 	mls	r7, r3, r1, r5
 800adbc:	5dc7      	ldrb	r7, [r0, r7]
 800adbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adc2:	462f      	mov	r7, r5
 800adc4:	42bb      	cmp	r3, r7
 800adc6:	460d      	mov	r5, r1
 800adc8:	d9f4      	bls.n	800adb4 <_printf_i+0x114>
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d10b      	bne.n	800ade6 <_printf_i+0x146>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	07df      	lsls	r7, r3, #31
 800add2:	d508      	bpl.n	800ade6 <_printf_i+0x146>
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	6861      	ldr	r1, [r4, #4]
 800add8:	4299      	cmp	r1, r3
 800adda:	bfde      	ittt	le
 800addc:	2330      	movle	r3, #48	@ 0x30
 800adde:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ade2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ade6:	1b92      	subs	r2, r2, r6
 800ade8:	6122      	str	r2, [r4, #16]
 800adea:	464b      	mov	r3, r9
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f8cd a000 	str.w	sl, [sp]
 800adf4:	aa03      	add	r2, sp, #12
 800adf6:	f7ff fee1 	bl	800abbc <_printf_common>
 800adfa:	3001      	adds	r0, #1
 800adfc:	d14a      	bne.n	800ae94 <_printf_i+0x1f4>
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	b004      	add	sp, #16
 800ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	2778      	movs	r7, #120	@ 0x78
 800ae12:	4832      	ldr	r0, [pc, #200]	@ (800aedc <_printf_i+0x23c>)
 800ae14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	6831      	ldr	r1, [r6, #0]
 800ae1c:	061f      	lsls	r7, r3, #24
 800ae1e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae22:	d402      	bmi.n	800ae2a <_printf_i+0x18a>
 800ae24:	065f      	lsls	r7, r3, #25
 800ae26:	bf48      	it	mi
 800ae28:	b2ad      	uxthmi	r5, r5
 800ae2a:	6031      	str	r1, [r6, #0]
 800ae2c:	07d9      	lsls	r1, r3, #31
 800ae2e:	bf44      	itt	mi
 800ae30:	f043 0320 	orrmi.w	r3, r3, #32
 800ae34:	6023      	strmi	r3, [r4, #0]
 800ae36:	b11d      	cbz	r5, 800ae40 <_printf_i+0x1a0>
 800ae38:	2310      	movs	r3, #16
 800ae3a:	e7ab      	b.n	800ad94 <_printf_i+0xf4>
 800ae3c:	4826      	ldr	r0, [pc, #152]	@ (800aed8 <_printf_i+0x238>)
 800ae3e:	e7e9      	b.n	800ae14 <_printf_i+0x174>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	f023 0320 	bic.w	r3, r3, #32
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	e7f6      	b.n	800ae38 <_printf_i+0x198>
 800ae4a:	4616      	mov	r6, r2
 800ae4c:	e7bd      	b.n	800adca <_printf_i+0x12a>
 800ae4e:	6833      	ldr	r3, [r6, #0]
 800ae50:	6825      	ldr	r5, [r4, #0]
 800ae52:	1d18      	adds	r0, r3, #4
 800ae54:	6961      	ldr	r1, [r4, #20]
 800ae56:	6030      	str	r0, [r6, #0]
 800ae58:	062e      	lsls	r6, r5, #24
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	d501      	bpl.n	800ae62 <_printf_i+0x1c2>
 800ae5e:	6019      	str	r1, [r3, #0]
 800ae60:	e002      	b.n	800ae68 <_printf_i+0x1c8>
 800ae62:	0668      	lsls	r0, r5, #25
 800ae64:	d5fb      	bpl.n	800ae5e <_printf_i+0x1be>
 800ae66:	8019      	strh	r1, [r3, #0]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	e7bc      	b.n	800adea <_printf_i+0x14a>
 800ae70:	6833      	ldr	r3, [r6, #0]
 800ae72:	2100      	movs	r1, #0
 800ae74:	1d1a      	adds	r2, r3, #4
 800ae76:	6032      	str	r2, [r6, #0]
 800ae78:	681e      	ldr	r6, [r3, #0]
 800ae7a:	6862      	ldr	r2, [r4, #4]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f000 fac5 	bl	800b40c <memchr>
 800ae82:	b108      	cbz	r0, 800ae88 <_printf_i+0x1e8>
 800ae84:	1b80      	subs	r0, r0, r6
 800ae86:	6060      	str	r0, [r4, #4]
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	6123      	str	r3, [r4, #16]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae92:	e7aa      	b.n	800adea <_printf_i+0x14a>
 800ae94:	4632      	mov	r2, r6
 800ae96:	4649      	mov	r1, r9
 800ae98:	4640      	mov	r0, r8
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	47d0      	blx	sl
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d0ad      	beq.n	800adfe <_printf_i+0x15e>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	079b      	lsls	r3, r3, #30
 800aea6:	d413      	bmi.n	800aed0 <_printf_i+0x230>
 800aea8:	68e0      	ldr	r0, [r4, #12]
 800aeaa:	9b03      	ldr	r3, [sp, #12]
 800aeac:	4298      	cmp	r0, r3
 800aeae:	bfb8      	it	lt
 800aeb0:	4618      	movlt	r0, r3
 800aeb2:	e7a6      	b.n	800ae02 <_printf_i+0x162>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4640      	mov	r0, r8
 800aebc:	47d0      	blx	sl
 800aebe:	3001      	adds	r0, #1
 800aec0:	d09d      	beq.n	800adfe <_printf_i+0x15e>
 800aec2:	3501      	adds	r5, #1
 800aec4:	68e3      	ldr	r3, [r4, #12]
 800aec6:	9903      	ldr	r1, [sp, #12]
 800aec8:	1a5b      	subs	r3, r3, r1
 800aeca:	42ab      	cmp	r3, r5
 800aecc:	dcf2      	bgt.n	800aeb4 <_printf_i+0x214>
 800aece:	e7eb      	b.n	800aea8 <_printf_i+0x208>
 800aed0:	2500      	movs	r5, #0
 800aed2:	f104 0619 	add.w	r6, r4, #25
 800aed6:	e7f5      	b.n	800aec4 <_printf_i+0x224>
 800aed8:	0800cb09 	.word	0x0800cb09
 800aedc:	0800cb1a 	.word	0x0800cb1a

0800aee0 <_scanf_chars>:
 800aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	4615      	mov	r5, r2
 800aee6:	688a      	ldr	r2, [r1, #8]
 800aee8:	4680      	mov	r8, r0
 800aeea:	460c      	mov	r4, r1
 800aeec:	b932      	cbnz	r2, 800aefc <_scanf_chars+0x1c>
 800aeee:	698a      	ldr	r2, [r1, #24]
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	bf14      	ite	ne
 800aef4:	f04f 32ff 	movne.w	r2, #4294967295
 800aef8:	2201      	moveq	r2, #1
 800aefa:	608a      	str	r2, [r1, #8]
 800aefc:	2700      	movs	r7, #0
 800aefe:	6822      	ldr	r2, [r4, #0]
 800af00:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800af90 <_scanf_chars+0xb0>
 800af04:	06d1      	lsls	r1, r2, #27
 800af06:	bf5f      	itttt	pl
 800af08:	681a      	ldrpl	r2, [r3, #0]
 800af0a:	1d11      	addpl	r1, r2, #4
 800af0c:	6019      	strpl	r1, [r3, #0]
 800af0e:	6816      	ldrpl	r6, [r2, #0]
 800af10:	69a0      	ldr	r0, [r4, #24]
 800af12:	b188      	cbz	r0, 800af38 <_scanf_chars+0x58>
 800af14:	2801      	cmp	r0, #1
 800af16:	d107      	bne.n	800af28 <_scanf_chars+0x48>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	6963      	ldr	r3, [r4, #20]
 800af1e:	5c9b      	ldrb	r3, [r3, r2]
 800af20:	b953      	cbnz	r3, 800af38 <_scanf_chars+0x58>
 800af22:	2f00      	cmp	r7, #0
 800af24:	d031      	beq.n	800af8a <_scanf_chars+0xaa>
 800af26:	e022      	b.n	800af6e <_scanf_chars+0x8e>
 800af28:	2802      	cmp	r0, #2
 800af2a:	d120      	bne.n	800af6e <_scanf_chars+0x8e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f819 3003 	ldrb.w	r3, [r9, r3]
 800af34:	071b      	lsls	r3, r3, #28
 800af36:	d41a      	bmi.n	800af6e <_scanf_chars+0x8e>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	3701      	adds	r7, #1
 800af3c:	06da      	lsls	r2, r3, #27
 800af3e:	bf5e      	ittt	pl
 800af40:	682b      	ldrpl	r3, [r5, #0]
 800af42:	781b      	ldrbpl	r3, [r3, #0]
 800af44:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af48:	682a      	ldr	r2, [r5, #0]
 800af4a:	686b      	ldr	r3, [r5, #4]
 800af4c:	3201      	adds	r2, #1
 800af4e:	602a      	str	r2, [r5, #0]
 800af50:	68a2      	ldr	r2, [r4, #8]
 800af52:	3b01      	subs	r3, #1
 800af54:	3a01      	subs	r2, #1
 800af56:	606b      	str	r3, [r5, #4]
 800af58:	60a2      	str	r2, [r4, #8]
 800af5a:	b142      	cbz	r2, 800af6e <_scanf_chars+0x8e>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dcd7      	bgt.n	800af10 <_scanf_chars+0x30>
 800af60:	4629      	mov	r1, r5
 800af62:	4640      	mov	r0, r8
 800af64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800af68:	4798      	blx	r3
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0d0      	beq.n	800af10 <_scanf_chars+0x30>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	f013 0310 	ands.w	r3, r3, #16
 800af74:	d105      	bne.n	800af82 <_scanf_chars+0xa2>
 800af76:	68e2      	ldr	r2, [r4, #12]
 800af78:	3201      	adds	r2, #1
 800af7a:	60e2      	str	r2, [r4, #12]
 800af7c:	69a2      	ldr	r2, [r4, #24]
 800af7e:	b102      	cbz	r2, 800af82 <_scanf_chars+0xa2>
 800af80:	7033      	strb	r3, [r6, #0]
 800af82:	2000      	movs	r0, #0
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	443b      	add	r3, r7
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8e:	bf00      	nop
 800af90:	0800c611 	.word	0x0800c611

0800af94 <_scanf_i>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	4698      	mov	r8, r3
 800af9c:	4b72      	ldr	r3, [pc, #456]	@ (800b168 <_scanf_i+0x1d4>)
 800af9e:	b087      	sub	sp, #28
 800afa0:	4682      	mov	sl, r0
 800afa2:	4616      	mov	r6, r2
 800afa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afa8:	ab03      	add	r3, sp, #12
 800afaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800afae:	4b6f      	ldr	r3, [pc, #444]	@ (800b16c <_scanf_i+0x1d8>)
 800afb0:	69a1      	ldr	r1, [r4, #24]
 800afb2:	4a6f      	ldr	r2, [pc, #444]	@ (800b170 <_scanf_i+0x1dc>)
 800afb4:	4627      	mov	r7, r4
 800afb6:	2903      	cmp	r1, #3
 800afb8:	bf08      	it	eq
 800afba:	461a      	moveq	r2, r3
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	9201      	str	r2, [sp, #4]
 800afc0:	1e5a      	subs	r2, r3, #1
 800afc2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800afc6:	bf81      	itttt	hi
 800afc8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800afcc:	eb03 0905 	addhi.w	r9, r3, r5
 800afd0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800afd4:	60a3      	strhi	r3, [r4, #8]
 800afd6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800afda:	bf98      	it	ls
 800afdc:	f04f 0900 	movls.w	r9, #0
 800afe0:	463d      	mov	r5, r7
 800afe2:	f04f 0b00 	mov.w	fp, #0
 800afe6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800afea:	6023      	str	r3, [r4, #0]
 800afec:	6831      	ldr	r1, [r6, #0]
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	2202      	movs	r2, #2
 800aff2:	7809      	ldrb	r1, [r1, #0]
 800aff4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aff8:	f000 fa08 	bl	800b40c <memchr>
 800affc:	b328      	cbz	r0, 800b04a <_scanf_i+0xb6>
 800affe:	f1bb 0f01 	cmp.w	fp, #1
 800b002:	d159      	bne.n	800b0b8 <_scanf_i+0x124>
 800b004:	6862      	ldr	r2, [r4, #4]
 800b006:	b92a      	cbnz	r2, 800b014 <_scanf_i+0x80>
 800b008:	2108      	movs	r1, #8
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	6061      	str	r1, [r4, #4]
 800b00e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b012:	6022      	str	r2, [r4, #0]
 800b014:	6822      	ldr	r2, [r4, #0]
 800b016:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b01a:	6022      	str	r2, [r4, #0]
 800b01c:	68a2      	ldr	r2, [r4, #8]
 800b01e:	1e51      	subs	r1, r2, #1
 800b020:	60a1      	str	r1, [r4, #8]
 800b022:	b192      	cbz	r2, 800b04a <_scanf_i+0xb6>
 800b024:	6832      	ldr	r2, [r6, #0]
 800b026:	1c51      	adds	r1, r2, #1
 800b028:	6031      	str	r1, [r6, #0]
 800b02a:	7812      	ldrb	r2, [r2, #0]
 800b02c:	f805 2b01 	strb.w	r2, [r5], #1
 800b030:	6872      	ldr	r2, [r6, #4]
 800b032:	3a01      	subs	r2, #1
 800b034:	2a00      	cmp	r2, #0
 800b036:	6072      	str	r2, [r6, #4]
 800b038:	dc07      	bgt.n	800b04a <_scanf_i+0xb6>
 800b03a:	4631      	mov	r1, r6
 800b03c:	4650      	mov	r0, sl
 800b03e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b042:	4790      	blx	r2
 800b044:	2800      	cmp	r0, #0
 800b046:	f040 8085 	bne.w	800b154 <_scanf_i+0x1c0>
 800b04a:	f10b 0b01 	add.w	fp, fp, #1
 800b04e:	f1bb 0f03 	cmp.w	fp, #3
 800b052:	d1cb      	bne.n	800afec <_scanf_i+0x58>
 800b054:	6863      	ldr	r3, [r4, #4]
 800b056:	b90b      	cbnz	r3, 800b05c <_scanf_i+0xc8>
 800b058:	230a      	movs	r3, #10
 800b05a:	6063      	str	r3, [r4, #4]
 800b05c:	6863      	ldr	r3, [r4, #4]
 800b05e:	4945      	ldr	r1, [pc, #276]	@ (800b174 <_scanf_i+0x1e0>)
 800b060:	6960      	ldr	r0, [r4, #20]
 800b062:	1ac9      	subs	r1, r1, r3
 800b064:	f000 f888 	bl	800b178 <__sccl>
 800b068:	f04f 0b00 	mov.w	fp, #0
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d03d      	beq.n	800b0f0 <_scanf_i+0x15c>
 800b074:	6831      	ldr	r1, [r6, #0]
 800b076:	6960      	ldr	r0, [r4, #20]
 800b078:	f891 c000 	ldrb.w	ip, [r1]
 800b07c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b080:	2800      	cmp	r0, #0
 800b082:	d035      	beq.n	800b0f0 <_scanf_i+0x15c>
 800b084:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b088:	d124      	bne.n	800b0d4 <_scanf_i+0x140>
 800b08a:	0510      	lsls	r0, r2, #20
 800b08c:	d522      	bpl.n	800b0d4 <_scanf_i+0x140>
 800b08e:	f10b 0b01 	add.w	fp, fp, #1
 800b092:	f1b9 0f00 	cmp.w	r9, #0
 800b096:	d003      	beq.n	800b0a0 <_scanf_i+0x10c>
 800b098:	3301      	adds	r3, #1
 800b09a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b09e:	60a3      	str	r3, [r4, #8]
 800b0a0:	6873      	ldr	r3, [r6, #4]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	6073      	str	r3, [r6, #4]
 800b0a8:	dd1b      	ble.n	800b0e2 <_scanf_i+0x14e>
 800b0aa:	6833      	ldr	r3, [r6, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	6033      	str	r3, [r6, #0]
 800b0b0:	68a3      	ldr	r3, [r4, #8]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	60a3      	str	r3, [r4, #8]
 800b0b6:	e7d9      	b.n	800b06c <_scanf_i+0xd8>
 800b0b8:	f1bb 0f02 	cmp.w	fp, #2
 800b0bc:	d1ae      	bne.n	800b01c <_scanf_i+0x88>
 800b0be:	6822      	ldr	r2, [r4, #0]
 800b0c0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b0c4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b0c8:	d1bf      	bne.n	800b04a <_scanf_i+0xb6>
 800b0ca:	2110      	movs	r1, #16
 800b0cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0d0:	6061      	str	r1, [r4, #4]
 800b0d2:	e7a2      	b.n	800b01a <_scanf_i+0x86>
 800b0d4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b0d8:	6022      	str	r2, [r4, #0]
 800b0da:	780b      	ldrb	r3, [r1, #0]
 800b0dc:	f805 3b01 	strb.w	r3, [r5], #1
 800b0e0:	e7de      	b.n	800b0a0 <_scanf_i+0x10c>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b0ea:	4798      	blx	r3
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0df      	beq.n	800b0b0 <_scanf_i+0x11c>
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	05d9      	lsls	r1, r3, #23
 800b0f4:	d50d      	bpl.n	800b112 <_scanf_i+0x17e>
 800b0f6:	42bd      	cmp	r5, r7
 800b0f8:	d909      	bls.n	800b10e <_scanf_i+0x17a>
 800b0fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0fe:	4632      	mov	r2, r6
 800b100:	4650      	mov	r0, sl
 800b102:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b106:	f105 39ff 	add.w	r9, r5, #4294967295
 800b10a:	4798      	blx	r3
 800b10c:	464d      	mov	r5, r9
 800b10e:	42bd      	cmp	r5, r7
 800b110:	d028      	beq.n	800b164 <_scanf_i+0x1d0>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	f012 0210 	ands.w	r2, r2, #16
 800b118:	d113      	bne.n	800b142 <_scanf_i+0x1ae>
 800b11a:	702a      	strb	r2, [r5, #0]
 800b11c:	4639      	mov	r1, r7
 800b11e:	6863      	ldr	r3, [r4, #4]
 800b120:	4650      	mov	r0, sl
 800b122:	9e01      	ldr	r6, [sp, #4]
 800b124:	47b0      	blx	r6
 800b126:	f8d8 3000 	ldr.w	r3, [r8]
 800b12a:	6821      	ldr	r1, [r4, #0]
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	f8c8 2000 	str.w	r2, [r8]
 800b132:	f011 0f20 	tst.w	r1, #32
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	d00f      	beq.n	800b15a <_scanf_i+0x1c6>
 800b13a:	6018      	str	r0, [r3, #0]
 800b13c:	68e3      	ldr	r3, [r4, #12]
 800b13e:	3301      	adds	r3, #1
 800b140:	60e3      	str	r3, [r4, #12]
 800b142:	2000      	movs	r0, #0
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	1bed      	subs	r5, r5, r7
 800b148:	445d      	add	r5, fp
 800b14a:	442b      	add	r3, r5
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	b007      	add	sp, #28
 800b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b154:	f04f 0b00 	mov.w	fp, #0
 800b158:	e7ca      	b.n	800b0f0 <_scanf_i+0x15c>
 800b15a:	07ca      	lsls	r2, r1, #31
 800b15c:	bf4c      	ite	mi
 800b15e:	8018      	strhmi	r0, [r3, #0]
 800b160:	6018      	strpl	r0, [r3, #0]
 800b162:	e7eb      	b.n	800b13c <_scanf_i+0x1a8>
 800b164:	2001      	movs	r0, #1
 800b166:	e7f2      	b.n	800b14e <_scanf_i+0x1ba>
 800b168:	0800c5a0 	.word	0x0800c5a0
 800b16c:	08007d25 	.word	0x08007d25
 800b170:	0800a1e9 	.word	0x0800a1e9
 800b174:	0800cb3b 	.word	0x0800cb3b

0800b178 <__sccl>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	780b      	ldrb	r3, [r1, #0]
 800b17c:	4604      	mov	r4, r0
 800b17e:	2b5e      	cmp	r3, #94	@ 0x5e
 800b180:	bf0b      	itete	eq
 800b182:	784b      	ldrbeq	r3, [r1, #1]
 800b184:	1c4a      	addne	r2, r1, #1
 800b186:	1c8a      	addeq	r2, r1, #2
 800b188:	2100      	movne	r1, #0
 800b18a:	bf08      	it	eq
 800b18c:	2101      	moveq	r1, #1
 800b18e:	3801      	subs	r0, #1
 800b190:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b194:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b198:	42a8      	cmp	r0, r5
 800b19a:	d1fb      	bne.n	800b194 <__sccl+0x1c>
 800b19c:	b90b      	cbnz	r3, 800b1a2 <__sccl+0x2a>
 800b19e:	1e50      	subs	r0, r2, #1
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	f081 0101 	eor.w	r1, r1, #1
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	54e1      	strb	r1, [r4, r3]
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b1b0:	2d2d      	cmp	r5, #45	@ 0x2d
 800b1b2:	d005      	beq.n	800b1c0 <__sccl+0x48>
 800b1b4:	2d5d      	cmp	r5, #93	@ 0x5d
 800b1b6:	d016      	beq.n	800b1e6 <__sccl+0x6e>
 800b1b8:	2d00      	cmp	r5, #0
 800b1ba:	d0f1      	beq.n	800b1a0 <__sccl+0x28>
 800b1bc:	462b      	mov	r3, r5
 800b1be:	e7f2      	b.n	800b1a6 <__sccl+0x2e>
 800b1c0:	7846      	ldrb	r6, [r0, #1]
 800b1c2:	2e5d      	cmp	r6, #93	@ 0x5d
 800b1c4:	d0fa      	beq.n	800b1bc <__sccl+0x44>
 800b1c6:	42b3      	cmp	r3, r6
 800b1c8:	dcf8      	bgt.n	800b1bc <__sccl+0x44>
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	3002      	adds	r0, #2
 800b1ce:	3201      	adds	r2, #1
 800b1d0:	4296      	cmp	r6, r2
 800b1d2:	54a1      	strb	r1, [r4, r2]
 800b1d4:	dcfb      	bgt.n	800b1ce <__sccl+0x56>
 800b1d6:	1af2      	subs	r2, r6, r3
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	42b3      	cmp	r3, r6
 800b1dc:	bfa8      	it	ge
 800b1de:	2200      	movge	r2, #0
 800b1e0:	1c5d      	adds	r5, r3, #1
 800b1e2:	18ab      	adds	r3, r5, r2
 800b1e4:	e7e1      	b.n	800b1aa <__sccl+0x32>
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	e7da      	b.n	800b1a0 <__sccl+0x28>

0800b1ea <__submore>:
 800b1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b1f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1f6:	4299      	cmp	r1, r3
 800b1f8:	d11b      	bne.n	800b232 <__submore+0x48>
 800b1fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b1fe:	f7fe fa41 	bl	8009684 <_malloc_r>
 800b202:	b918      	cbnz	r0, 800b20c <__submore+0x22>
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b210:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b212:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b216:	6360      	str	r0, [r4, #52]	@ 0x34
 800b218:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b21c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b220:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b224:	7043      	strb	r3, [r0, #1]
 800b226:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b22a:	7003      	strb	r3, [r0, #0]
 800b22c:	6020      	str	r0, [r4, #0]
 800b22e:	2000      	movs	r0, #0
 800b230:	e7ea      	b.n	800b208 <__submore+0x1e>
 800b232:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b234:	0077      	lsls	r7, r6, #1
 800b236:	463a      	mov	r2, r7
 800b238:	f000 f8f6 	bl	800b428 <_realloc_r>
 800b23c:	4605      	mov	r5, r0
 800b23e:	2800      	cmp	r0, #0
 800b240:	d0e0      	beq.n	800b204 <__submore+0x1a>
 800b242:	eb00 0806 	add.w	r8, r0, r6
 800b246:	4601      	mov	r1, r0
 800b248:	4632      	mov	r2, r6
 800b24a:	4640      	mov	r0, r8
 800b24c:	f7fd fde7 	bl	8008e1e <memcpy>
 800b250:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b254:	f8c4 8000 	str.w	r8, [r4]
 800b258:	e7e9      	b.n	800b22e <__submore+0x44>

0800b25a <__swbuf_r>:
 800b25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25c:	460e      	mov	r6, r1
 800b25e:	4614      	mov	r4, r2
 800b260:	4605      	mov	r5, r0
 800b262:	b118      	cbz	r0, 800b26c <__swbuf_r+0x12>
 800b264:	6a03      	ldr	r3, [r0, #32]
 800b266:	b90b      	cbnz	r3, 800b26c <__swbuf_r+0x12>
 800b268:	f7fc fdf4 	bl	8007e54 <__sinit>
 800b26c:	69a3      	ldr	r3, [r4, #24]
 800b26e:	60a3      	str	r3, [r4, #8]
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	071a      	lsls	r2, r3, #28
 800b274:	d501      	bpl.n	800b27a <__swbuf_r+0x20>
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	b943      	cbnz	r3, 800b28c <__swbuf_r+0x32>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f000 f82b 	bl	800b2d8 <__swsetup_r>
 800b282:	b118      	cbz	r0, 800b28c <__swbuf_r+0x32>
 800b284:	f04f 37ff 	mov.w	r7, #4294967295
 800b288:	4638      	mov	r0, r7
 800b28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	6922      	ldr	r2, [r4, #16]
 800b290:	b2f6      	uxtb	r6, r6
 800b292:	1a98      	subs	r0, r3, r2
 800b294:	6963      	ldr	r3, [r4, #20]
 800b296:	4637      	mov	r7, r6
 800b298:	4283      	cmp	r3, r0
 800b29a:	dc05      	bgt.n	800b2a8 <__swbuf_r+0x4e>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f7ff f83c 	bl	800a31c <_fflush_r>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d1ed      	bne.n	800b284 <__swbuf_r+0x2a>
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	6022      	str	r2, [r4, #0]
 800b2b4:	701e      	strb	r6, [r3, #0]
 800b2b6:	6962      	ldr	r2, [r4, #20]
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d004      	beq.n	800b2c8 <__swbuf_r+0x6e>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	07db      	lsls	r3, r3, #31
 800b2c2:	d5e1      	bpl.n	800b288 <__swbuf_r+0x2e>
 800b2c4:	2e0a      	cmp	r6, #10
 800b2c6:	d1df      	bne.n	800b288 <__swbuf_r+0x2e>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f7ff f826 	bl	800a31c <_fflush_r>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d0d9      	beq.n	800b288 <__swbuf_r+0x2e>
 800b2d4:	e7d6      	b.n	800b284 <__swbuf_r+0x2a>
	...

0800b2d8 <__swsetup_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4b29      	ldr	r3, [pc, #164]	@ (800b380 <__swsetup_r+0xa8>)
 800b2dc:	4605      	mov	r5, r0
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	b118      	cbz	r0, 800b2ec <__swsetup_r+0x14>
 800b2e4:	6a03      	ldr	r3, [r0, #32]
 800b2e6:	b90b      	cbnz	r3, 800b2ec <__swsetup_r+0x14>
 800b2e8:	f7fc fdb4 	bl	8007e54 <__sinit>
 800b2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f0:	0719      	lsls	r1, r3, #28
 800b2f2:	d422      	bmi.n	800b33a <__swsetup_r+0x62>
 800b2f4:	06da      	lsls	r2, r3, #27
 800b2f6:	d407      	bmi.n	800b308 <__swsetup_r+0x30>
 800b2f8:	2209      	movs	r2, #9
 800b2fa:	602a      	str	r2, [r5, #0]
 800b2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	e033      	b.n	800b370 <__swsetup_r+0x98>
 800b308:	0758      	lsls	r0, r3, #29
 800b30a:	d512      	bpl.n	800b332 <__swsetup_r+0x5a>
 800b30c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b30e:	b141      	cbz	r1, 800b322 <__swsetup_r+0x4a>
 800b310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b314:	4299      	cmp	r1, r3
 800b316:	d002      	beq.n	800b31e <__swsetup_r+0x46>
 800b318:	4628      	mov	r0, r5
 800b31a:	f7fd fdbb 	bl	8008e94 <_free_r>
 800b31e:	2300      	movs	r3, #0
 800b320:	6363      	str	r3, [r4, #52]	@ 0x34
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	2300      	movs	r3, #0
 800b32c:	6063      	str	r3, [r4, #4]
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f043 0308 	orr.w	r3, r3, #8
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	b94b      	cbnz	r3, 800b352 <__swsetup_r+0x7a>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b348:	d003      	beq.n	800b352 <__swsetup_r+0x7a>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f000 f8be 	bl	800b4ce <__smakebuf_r>
 800b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b356:	f013 0201 	ands.w	r2, r3, #1
 800b35a:	d00a      	beq.n	800b372 <__swsetup_r+0x9a>
 800b35c:	2200      	movs	r2, #0
 800b35e:	60a2      	str	r2, [r4, #8]
 800b360:	6962      	ldr	r2, [r4, #20]
 800b362:	4252      	negs	r2, r2
 800b364:	61a2      	str	r2, [r4, #24]
 800b366:	6922      	ldr	r2, [r4, #16]
 800b368:	b942      	cbnz	r2, 800b37c <__swsetup_r+0xa4>
 800b36a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b36e:	d1c5      	bne.n	800b2fc <__swsetup_r+0x24>
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	0799      	lsls	r1, r3, #30
 800b374:	bf58      	it	pl
 800b376:	6962      	ldrpl	r2, [r4, #20]
 800b378:	60a2      	str	r2, [r4, #8]
 800b37a:	e7f4      	b.n	800b366 <__swsetup_r+0x8e>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7f7      	b.n	800b370 <__swsetup_r+0x98>
 800b380:	2000055c 	.word	0x2000055c

0800b384 <_raise_r>:
 800b384:	291f      	cmp	r1, #31
 800b386:	b538      	push	{r3, r4, r5, lr}
 800b388:	4605      	mov	r5, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	d904      	bls.n	800b398 <_raise_r+0x14>
 800b38e:	2316      	movs	r3, #22
 800b390:	6003      	str	r3, [r0, #0]
 800b392:	f04f 30ff 	mov.w	r0, #4294967295
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b39a:	b112      	cbz	r2, 800b3a2 <_raise_r+0x1e>
 800b39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3a0:	b94b      	cbnz	r3, 800b3b6 <_raise_r+0x32>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f000 f830 	bl	800b408 <_getpid_r>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b2:	f000 b817 	b.w	800b3e4 <_kill_r>
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d00a      	beq.n	800b3d0 <_raise_r+0x4c>
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	d103      	bne.n	800b3c6 <_raise_r+0x42>
 800b3be:	2316      	movs	r3, #22
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	e7e7      	b.n	800b396 <_raise_r+0x12>
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3ce:	4798      	blx	r3
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e7e0      	b.n	800b396 <_raise_r+0x12>

0800b3d4 <raise>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	@ (800b3e0 <raise+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f7ff bfd3 	b.w	800b384 <_raise_r>
 800b3de:	bf00      	nop
 800b3e0:	2000055c 	.word	0x2000055c

0800b3e4 <_kill_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4d06      	ldr	r5, [pc, #24]	@ (800b404 <_kill_r+0x20>)
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	602b      	str	r3, [r5, #0]
 800b3f2:	f7fb fd2c 	bl	8006e4e <_kill>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	d102      	bne.n	800b400 <_kill_r+0x1c>
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	b103      	cbz	r3, 800b400 <_kill_r+0x1c>
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	bd38      	pop	{r3, r4, r5, pc}
 800b402:	bf00      	nop
 800b404:	200009ec 	.word	0x200009ec

0800b408 <_getpid_r>:
 800b408:	f7fb bd1a 	b.w	8006e40 <_getpid>

0800b40c <memchr>:
 800b40c:	4603      	mov	r3, r0
 800b40e:	b510      	push	{r4, lr}
 800b410:	b2c9      	uxtb	r1, r1
 800b412:	4402      	add	r2, r0
 800b414:	4293      	cmp	r3, r2
 800b416:	4618      	mov	r0, r3
 800b418:	d101      	bne.n	800b41e <memchr+0x12>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e003      	b.n	800b426 <memchr+0x1a>
 800b41e:	7804      	ldrb	r4, [r0, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	428c      	cmp	r4, r1
 800b424:	d1f6      	bne.n	800b414 <memchr+0x8>
 800b426:	bd10      	pop	{r4, pc}

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4615      	mov	r5, r2
 800b430:	460c      	mov	r4, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	4611      	mov	r1, r2
 800b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	f7fe b923 	b.w	8009684 <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7fd fd28 	bl	8008e94 <_free_r>
 800b444:	2400      	movs	r4, #0
 800b446:	4620      	mov	r0, r4
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f89e 	bl	800b58c <_malloc_usable_size_r>
 800b450:	4285      	cmp	r5, r0
 800b452:	4606      	mov	r6, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b45a:	d8f4      	bhi.n	800b446 <_realloc_r+0x1e>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4640      	mov	r0, r8
 800b460:	f7fe f910 	bl	8009684 <_malloc_r>
 800b464:	4607      	mov	r7, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ec      	beq.n	800b444 <_realloc_r+0x1c>
 800b46a:	42b5      	cmp	r5, r6
 800b46c:	462a      	mov	r2, r5
 800b46e:	4621      	mov	r1, r4
 800b470:	bf28      	it	cs
 800b472:	4632      	movcs	r2, r6
 800b474:	f7fd fcd3 	bl	8008e1e <memcpy>
 800b478:	4621      	mov	r1, r4
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7fd fd0a 	bl	8008e94 <_free_r>
 800b480:	463c      	mov	r4, r7
 800b482:	e7e0      	b.n	800b446 <_realloc_r+0x1e>

0800b484 <__swhatbuf_r>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	460c      	mov	r4, r1
 800b488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48c:	4615      	mov	r5, r2
 800b48e:	2900      	cmp	r1, #0
 800b490:	461e      	mov	r6, r3
 800b492:	b096      	sub	sp, #88	@ 0x58
 800b494:	da0c      	bge.n	800b4b0 <__swhatbuf_r+0x2c>
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	2100      	movs	r1, #0
 800b49a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b49e:	bf14      	ite	ne
 800b4a0:	2340      	movne	r3, #64	@ 0x40
 800b4a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	6031      	str	r1, [r6, #0]
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	b016      	add	sp, #88	@ 0x58
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	466a      	mov	r2, sp
 800b4b2:	f000 f849 	bl	800b548 <_fstat_r>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	dbed      	blt.n	800b496 <__swhatbuf_r+0x12>
 800b4ba:	9901      	ldr	r1, [sp, #4]
 800b4bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4c4:	4259      	negs	r1, r3
 800b4c6:	4159      	adcs	r1, r3
 800b4c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4cc:	e7eb      	b.n	800b4a6 <__swhatbuf_r+0x22>

0800b4ce <__smakebuf_r>:
 800b4ce:	898b      	ldrh	r3, [r1, #12]
 800b4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4d2:	079d      	lsls	r5, r3, #30
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	d507      	bpl.n	800b4ea <__smakebuf_r+0x1c>
 800b4da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4de:	6023      	str	r3, [r4, #0]
 800b4e0:	6123      	str	r3, [r4, #16]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	6163      	str	r3, [r4, #20]
 800b4e6:	b003      	add	sp, #12
 800b4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ea:	466a      	mov	r2, sp
 800b4ec:	ab01      	add	r3, sp, #4
 800b4ee:	f7ff ffc9 	bl	800b484 <__swhatbuf_r>
 800b4f2:	9f00      	ldr	r7, [sp, #0]
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7fe f8c3 	bl	8009684 <_malloc_r>
 800b4fe:	b948      	cbnz	r0, 800b514 <__smakebuf_r+0x46>
 800b500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b504:	059a      	lsls	r2, r3, #22
 800b506:	d4ee      	bmi.n	800b4e6 <__smakebuf_r+0x18>
 800b508:	f023 0303 	bic.w	r3, r3, #3
 800b50c:	f043 0302 	orr.w	r3, r3, #2
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	e7e2      	b.n	800b4da <__smakebuf_r+0xc>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	6020      	str	r0, [r4, #0]
 800b524:	b15b      	cbz	r3, 800b53e <__smakebuf_r+0x70>
 800b526:	4630      	mov	r0, r6
 800b528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b52c:	f000 f81e 	bl	800b56c <_isatty_r>
 800b530:	b128      	cbz	r0, 800b53e <__smakebuf_r+0x70>
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f023 0303 	bic.w	r3, r3, #3
 800b538:	f043 0301 	orr.w	r3, r3, #1
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	431d      	orrs	r5, r3
 800b542:	81a5      	strh	r5, [r4, #12]
 800b544:	e7cf      	b.n	800b4e6 <__smakebuf_r+0x18>
	...

0800b548 <_fstat_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	2300      	movs	r3, #0
 800b54c:	4d06      	ldr	r5, [pc, #24]	@ (800b568 <_fstat_r+0x20>)
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	4611      	mov	r1, r2
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	f7fb fcd9 	bl	8006f0c <_fstat>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d102      	bne.n	800b564 <_fstat_r+0x1c>
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	b103      	cbz	r3, 800b564 <_fstat_r+0x1c>
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	bd38      	pop	{r3, r4, r5, pc}
 800b566:	bf00      	nop
 800b568:	200009ec 	.word	0x200009ec

0800b56c <_isatty_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	2300      	movs	r3, #0
 800b570:	4d05      	ldr	r5, [pc, #20]	@ (800b588 <_isatty_r+0x1c>)
 800b572:	4604      	mov	r4, r0
 800b574:	4608      	mov	r0, r1
 800b576:	602b      	str	r3, [r5, #0]
 800b578:	f7fb fcd7 	bl	8006f2a <_isatty>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_isatty_r+0x1a>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	b103      	cbz	r3, 800b586 <_isatty_r+0x1a>
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	200009ec 	.word	0x200009ec

0800b58c <_malloc_usable_size_r>:
 800b58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b590:	1f18      	subs	r0, r3, #4
 800b592:	2b00      	cmp	r3, #0
 800b594:	bfbc      	itt	lt
 800b596:	580b      	ldrlt	r3, [r1, r0]
 800b598:	18c0      	addlt	r0, r0, r3
 800b59a:	4770      	bx	lr

0800b59c <pow>:
 800b59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	461d      	mov	r5, r3
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	f000 f8d2 	bl	800b750 <__ieee754_pow>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	462b      	mov	r3, r5
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f7f5 fa42 	bl	8000a40 <__aeabi_dcmpun>
 800b5bc:	bbc8      	cbnz	r0, 800b632 <pow+0x96>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f5 fa09 	bl	80009dc <__aeabi_dcmpeq>
 800b5ca:	b1b8      	cbz	r0, 800b5fc <pow+0x60>
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	f7f5 fa02 	bl	80009dc <__aeabi_dcmpeq>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d141      	bne.n	800b660 <pow+0xc4>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	f000 f844 	bl	800b66c <finite>
 800b5e4:	b328      	cbz	r0, 800b632 <pow+0x96>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	f7f5 f9ff 	bl	80009f0 <__aeabi_dcmplt>
 800b5f2:	b1f0      	cbz	r0, 800b632 <pow+0x96>
 800b5f4:	f7fd fbdc 	bl	8008db0 <__errno>
 800b5f8:	2322      	movs	r3, #34	@ 0x22
 800b5fa:	e019      	b.n	800b630 <pow+0x94>
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	4639      	mov	r1, r7
 800b600:	f000 f834 	bl	800b66c <finite>
 800b604:	b9c8      	cbnz	r0, 800b63a <pow+0x9e>
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f000 f82f 	bl	800b66c <finite>
 800b60e:	b1a0      	cbz	r0, 800b63a <pow+0x9e>
 800b610:	4620      	mov	r0, r4
 800b612:	4629      	mov	r1, r5
 800b614:	f000 f82a 	bl	800b66c <finite>
 800b618:	b178      	cbz	r0, 800b63a <pow+0x9e>
 800b61a:	4632      	mov	r2, r6
 800b61c:	463b      	mov	r3, r7
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	f7f5 fa0d 	bl	8000a40 <__aeabi_dcmpun>
 800b626:	2800      	cmp	r0, #0
 800b628:	d0e4      	beq.n	800b5f4 <pow+0x58>
 800b62a:	f7fd fbc1 	bl	8008db0 <__errno>
 800b62e:	2321      	movs	r3, #33	@ 0x21
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	4630      	mov	r0, r6
 800b634:	4639      	mov	r1, r7
 800b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f5 f9cb 	bl	80009dc <__aeabi_dcmpeq>
 800b646:	2800      	cmp	r0, #0
 800b648:	d0f3      	beq.n	800b632 <pow+0x96>
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f000 f80d 	bl	800b66c <finite>
 800b652:	2800      	cmp	r0, #0
 800b654:	d0ed      	beq.n	800b632 <pow+0x96>
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f000 f807 	bl	800b66c <finite>
 800b65e:	e7c8      	b.n	800b5f2 <pow+0x56>
 800b660:	2600      	movs	r6, #0
 800b662:	4f01      	ldr	r7, [pc, #4]	@ (800b668 <pow+0xcc>)
 800b664:	e7e5      	b.n	800b632 <pow+0x96>
 800b666:	bf00      	nop
 800b668:	3ff00000 	.word	0x3ff00000

0800b66c <finite>:
 800b66c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b670:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b674:	0fc0      	lsrs	r0, r0, #31
 800b676:	4770      	bx	lr

0800b678 <round>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b67e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800b682:	2a13      	cmp	r2, #19
 800b684:	4604      	mov	r4, r0
 800b686:	460d      	mov	r5, r1
 800b688:	460b      	mov	r3, r1
 800b68a:	dc1a      	bgt.n	800b6c2 <round+0x4a>
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	da0b      	bge.n	800b6a8 <round+0x30>
 800b690:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b694:	3201      	adds	r2, #1
 800b696:	bf04      	itt	eq
 800b698:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b69c:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	461d      	mov	r5, r3
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	e016      	b.n	800b6d6 <round+0x5e>
 800b6a8:	4815      	ldr	r0, [pc, #84]	@ (800b700 <round+0x88>)
 800b6aa:	4110      	asrs	r0, r2
 800b6ac:	4001      	ands	r1, r0
 800b6ae:	4321      	orrs	r1, r4
 800b6b0:	d011      	beq.n	800b6d6 <round+0x5e>
 800b6b2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b6b6:	fa41 f202 	asr.w	r2, r1, r2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	ea23 0300 	bic.w	r3, r3, r0
 800b6c0:	e7ee      	b.n	800b6a0 <round+0x28>
 800b6c2:	2a33      	cmp	r2, #51	@ 0x33
 800b6c4:	dd0a      	ble.n	800b6dc <round+0x64>
 800b6c6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b6ca:	d104      	bne.n	800b6d6 <round+0x5e>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	f7f4 fd67 	bl	80001a0 <__adddf3>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b6e4:	40f8      	lsrs	r0, r7
 800b6e6:	4220      	tst	r0, r4
 800b6e8:	d0f5      	beq.n	800b6d6 <round+0x5e>
 800b6ea:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	408a      	lsls	r2, r1
 800b6f2:	1912      	adds	r2, r2, r4
 800b6f4:	bf28      	it	cs
 800b6f6:	3301      	addcs	r3, #1
 800b6f8:	ea22 0200 	bic.w	r2, r2, r0
 800b6fc:	e7d1      	b.n	800b6a2 <round+0x2a>
 800b6fe:	bf00      	nop
 800b700:	000fffff 	.word	0x000fffff

0800b704 <roundf>:
 800b704:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b708:	3b7f      	subs	r3, #127	@ 0x7f
 800b70a:	2b16      	cmp	r3, #22
 800b70c:	4601      	mov	r1, r0
 800b70e:	b510      	push	{r4, lr}
 800b710:	dc14      	bgt.n	800b73c <roundf+0x38>
 800b712:	2b00      	cmp	r3, #0
 800b714:	da07      	bge.n	800b726 <roundf+0x22>
 800b716:	3301      	adds	r3, #1
 800b718:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800b71c:	d101      	bne.n	800b722 <roundf+0x1e>
 800b71e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800b722:	4608      	mov	r0, r1
 800b724:	bd10      	pop	{r4, pc}
 800b726:	4a08      	ldr	r2, [pc, #32]	@ (800b748 <roundf+0x44>)
 800b728:	411a      	asrs	r2, r3
 800b72a:	4202      	tst	r2, r0
 800b72c:	d0f9      	beq.n	800b722 <roundf+0x1e>
 800b72e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b732:	4119      	asrs	r1, r3
 800b734:	4401      	add	r1, r0
 800b736:	ea21 0102 	bic.w	r1, r1, r2
 800b73a:	e7f2      	b.n	800b722 <roundf+0x1e>
 800b73c:	2b80      	cmp	r3, #128	@ 0x80
 800b73e:	d1f0      	bne.n	800b722 <roundf+0x1e>
 800b740:	f7f5 fa0a 	bl	8000b58 <__addsf3>
 800b744:	4601      	mov	r1, r0
 800b746:	e7ec      	b.n	800b722 <roundf+0x1e>
 800b748:	007fffff 	.word	0x007fffff
 800b74c:	00000000 	.word	0x00000000

0800b750 <__ieee754_pow>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	b091      	sub	sp, #68	@ 0x44
 800b756:	e9cd 2300 	strd	r2, r3, [sp]
 800b75a:	468b      	mov	fp, r1
 800b75c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b760:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b764:	4682      	mov	sl, r0
 800b766:	ea57 0001 	orrs.w	r0, r7, r1
 800b76a:	d112      	bne.n	800b792 <__ieee754_pow+0x42>
 800b76c:	4653      	mov	r3, sl
 800b76e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b772:	18db      	adds	r3, r3, r3
 800b774:	4152      	adcs	r2, r2
 800b776:	4298      	cmp	r0, r3
 800b778:	4b91      	ldr	r3, [pc, #580]	@ (800b9c0 <__ieee754_pow+0x270>)
 800b77a:	4193      	sbcs	r3, r2
 800b77c:	f080 84ce 	bcs.w	800c11c <__ieee754_pow+0x9cc>
 800b780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b784:	4650      	mov	r0, sl
 800b786:	4659      	mov	r1, fp
 800b788:	f7f4 fd0a 	bl	80001a0 <__adddf3>
 800b78c:	b011      	add	sp, #68	@ 0x44
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	4b8c      	ldr	r3, [pc, #560]	@ (800b9c4 <__ieee754_pow+0x274>)
 800b794:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800b798:	429e      	cmp	r6, r3
 800b79a:	465d      	mov	r5, fp
 800b79c:	46d1      	mov	r9, sl
 800b79e:	d807      	bhi.n	800b7b0 <__ieee754_pow+0x60>
 800b7a0:	d102      	bne.n	800b7a8 <__ieee754_pow+0x58>
 800b7a2:	f1ba 0f00 	cmp.w	sl, #0
 800b7a6:	d1eb      	bne.n	800b780 <__ieee754_pow+0x30>
 800b7a8:	429f      	cmp	r7, r3
 800b7aa:	d801      	bhi.n	800b7b0 <__ieee754_pow+0x60>
 800b7ac:	d10f      	bne.n	800b7ce <__ieee754_pow+0x7e>
 800b7ae:	b171      	cbz	r1, 800b7ce <__ieee754_pow+0x7e>
 800b7b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b7b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b7b8:	ea55 0509 	orrs.w	r5, r5, r9
 800b7bc:	d1e0      	bne.n	800b780 <__ieee754_pow+0x30>
 800b7be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7c2:	18db      	adds	r3, r3, r3
 800b7c4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b7c8:	4152      	adcs	r2, r2
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	e7d4      	b.n	800b778 <__ieee754_pow+0x28>
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	4633      	mov	r3, r6
 800b7d2:	da39      	bge.n	800b848 <__ieee754_pow+0xf8>
 800b7d4:	4a7c      	ldr	r2, [pc, #496]	@ (800b9c8 <__ieee754_pow+0x278>)
 800b7d6:	4297      	cmp	r7, r2
 800b7d8:	d84e      	bhi.n	800b878 <__ieee754_pow+0x128>
 800b7da:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b7de:	4297      	cmp	r7, r2
 800b7e0:	f240 84ab 	bls.w	800c13a <__ieee754_pow+0x9ea>
 800b7e4:	153a      	asrs	r2, r7, #20
 800b7e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b7ea:	2a14      	cmp	r2, #20
 800b7ec:	dd0f      	ble.n	800b80e <__ieee754_pow+0xbe>
 800b7ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b7f2:	fa21 f402 	lsr.w	r4, r1, r2
 800b7f6:	fa04 f202 	lsl.w	r2, r4, r2
 800b7fa:	428a      	cmp	r2, r1
 800b7fc:	f040 849d 	bne.w	800c13a <__ieee754_pow+0x9ea>
 800b800:	f004 0401 	and.w	r4, r4, #1
 800b804:	f1c4 0402 	rsb	r4, r4, #2
 800b808:	2900      	cmp	r1, #0
 800b80a:	d15a      	bne.n	800b8c2 <__ieee754_pow+0x172>
 800b80c:	e00e      	b.n	800b82c <__ieee754_pow+0xdc>
 800b80e:	2900      	cmp	r1, #0
 800b810:	d156      	bne.n	800b8c0 <__ieee754_pow+0x170>
 800b812:	f1c2 0214 	rsb	r2, r2, #20
 800b816:	fa47 f402 	asr.w	r4, r7, r2
 800b81a:	fa04 f202 	lsl.w	r2, r4, r2
 800b81e:	42ba      	cmp	r2, r7
 800b820:	f040 8488 	bne.w	800c134 <__ieee754_pow+0x9e4>
 800b824:	f004 0401 	and.w	r4, r4, #1
 800b828:	f1c4 0402 	rsb	r4, r4, #2
 800b82c:	4a67      	ldr	r2, [pc, #412]	@ (800b9cc <__ieee754_pow+0x27c>)
 800b82e:	4297      	cmp	r7, r2
 800b830:	d130      	bne.n	800b894 <__ieee754_pow+0x144>
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	f280 8479 	bge.w	800c12c <__ieee754_pow+0x9dc>
 800b83a:	4652      	mov	r2, sl
 800b83c:	465b      	mov	r3, fp
 800b83e:	2000      	movs	r0, #0
 800b840:	4962      	ldr	r1, [pc, #392]	@ (800b9cc <__ieee754_pow+0x27c>)
 800b842:	f7f4 ff8d 	bl	8000760 <__aeabi_ddiv>
 800b846:	e7a1      	b.n	800b78c <__ieee754_pow+0x3c>
 800b848:	2400      	movs	r4, #0
 800b84a:	2900      	cmp	r1, #0
 800b84c:	d139      	bne.n	800b8c2 <__ieee754_pow+0x172>
 800b84e:	4a5d      	ldr	r2, [pc, #372]	@ (800b9c4 <__ieee754_pow+0x274>)
 800b850:	4297      	cmp	r7, r2
 800b852:	d1eb      	bne.n	800b82c <__ieee754_pow+0xdc>
 800b854:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b858:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b85c:	ea53 0309 	orrs.w	r3, r3, r9
 800b860:	f000 845c 	beq.w	800c11c <__ieee754_pow+0x9cc>
 800b864:	4b5a      	ldr	r3, [pc, #360]	@ (800b9d0 <__ieee754_pow+0x280>)
 800b866:	429e      	cmp	r6, r3
 800b868:	d908      	bls.n	800b87c <__ieee754_pow+0x12c>
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	f2c0 8459 	blt.w	800c124 <__ieee754_pow+0x9d4>
 800b872:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b876:	e789      	b.n	800b78c <__ieee754_pow+0x3c>
 800b878:	2402      	movs	r4, #2
 800b87a:	e7e6      	b.n	800b84a <__ieee754_pow+0xfa>
 800b87c:	f1b8 0f00 	cmp.w	r8, #0
 800b880:	f04f 0000 	mov.w	r0, #0
 800b884:	f04f 0100 	mov.w	r1, #0
 800b888:	da80      	bge.n	800b78c <__ieee754_pow+0x3c>
 800b88a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b88e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b892:	e77b      	b.n	800b78c <__ieee754_pow+0x3c>
 800b894:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b898:	d106      	bne.n	800b8a8 <__ieee754_pow+0x158>
 800b89a:	4652      	mov	r2, sl
 800b89c:	465b      	mov	r3, fp
 800b89e:	4650      	mov	r0, sl
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	f7f4 fe33 	bl	800050c <__aeabi_dmul>
 800b8a6:	e771      	b.n	800b78c <__ieee754_pow+0x3c>
 800b8a8:	4a4a      	ldr	r2, [pc, #296]	@ (800b9d4 <__ieee754_pow+0x284>)
 800b8aa:	4590      	cmp	r8, r2
 800b8ac:	d109      	bne.n	800b8c2 <__ieee754_pow+0x172>
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	db07      	blt.n	800b8c2 <__ieee754_pow+0x172>
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	b011      	add	sp, #68	@ 0x44
 800b8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	f000 bd12 	b.w	800c2e4 <__ieee754_sqrt>
 800b8c0:	2400      	movs	r4, #0
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	9302      	str	r3, [sp, #8]
 800b8c8:	f000 fc6a 	bl	800c1a0 <fabs>
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	f1b9 0f00 	cmp.w	r9, #0
 800b8d2:	d127      	bne.n	800b924 <__ieee754_pow+0x1d4>
 800b8d4:	4a3d      	ldr	r2, [pc, #244]	@ (800b9cc <__ieee754_pow+0x27c>)
 800b8d6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b8da:	4594      	cmp	ip, r2
 800b8dc:	d000      	beq.n	800b8e0 <__ieee754_pow+0x190>
 800b8de:	bb0e      	cbnz	r6, 800b924 <__ieee754_pow+0x1d4>
 800b8e0:	f1b8 0f00 	cmp.w	r8, #0
 800b8e4:	da05      	bge.n	800b8f2 <__ieee754_pow+0x1a2>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	4937      	ldr	r1, [pc, #220]	@ (800b9cc <__ieee754_pow+0x27c>)
 800b8ee:	f7f4 ff37 	bl	8000760 <__aeabi_ddiv>
 800b8f2:	2d00      	cmp	r5, #0
 800b8f4:	f6bf af4a 	bge.w	800b78c <__ieee754_pow+0x3c>
 800b8f8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b8fc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b900:	4326      	orrs	r6, r4
 800b902:	d108      	bne.n	800b916 <__ieee754_pow+0x1c6>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4610      	mov	r0, r2
 800b90a:	4619      	mov	r1, r3
 800b90c:	f7f4 fc46 	bl	800019c <__aeabi_dsub>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	e795      	b.n	800b842 <__ieee754_pow+0xf2>
 800b916:	2c01      	cmp	r4, #1
 800b918:	f47f af38 	bne.w	800b78c <__ieee754_pow+0x3c>
 800b91c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b920:	4619      	mov	r1, r3
 800b922:	e733      	b.n	800b78c <__ieee754_pow+0x3c>
 800b924:	0fea      	lsrs	r2, r5, #31
 800b926:	3a01      	subs	r2, #1
 800b928:	ea52 0c04 	orrs.w	ip, r2, r4
 800b92c:	d102      	bne.n	800b934 <__ieee754_pow+0x1e4>
 800b92e:	4652      	mov	r2, sl
 800b930:	465b      	mov	r3, fp
 800b932:	e7e9      	b.n	800b908 <__ieee754_pow+0x1b8>
 800b934:	f04f 0900 	mov.w	r9, #0
 800b938:	3c01      	subs	r4, #1
 800b93a:	4314      	orrs	r4, r2
 800b93c:	bf14      	ite	ne
 800b93e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b9cc <__ieee754_pow+0x27c>
 800b942:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b9d8 <__ieee754_pow+0x288>
 800b946:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b94a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b94e:	f240 8107 	bls.w	800bb60 <__ieee754_pow+0x410>
 800b952:	4b22      	ldr	r3, [pc, #136]	@ (800b9dc <__ieee754_pow+0x28c>)
 800b954:	429f      	cmp	r7, r3
 800b956:	4b1e      	ldr	r3, [pc, #120]	@ (800b9d0 <__ieee754_pow+0x280>)
 800b958:	d913      	bls.n	800b982 <__ieee754_pow+0x232>
 800b95a:	429e      	cmp	r6, r3
 800b95c:	d808      	bhi.n	800b970 <__ieee754_pow+0x220>
 800b95e:	f1b8 0f00 	cmp.w	r8, #0
 800b962:	da08      	bge.n	800b976 <__ieee754_pow+0x226>
 800b964:	2000      	movs	r0, #0
 800b966:	b011      	add	sp, #68	@ 0x44
 800b968:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	f000 bcb4 	b.w	800c2d8 <__math_oflow>
 800b970:	f1b8 0f00 	cmp.w	r8, #0
 800b974:	dcf6      	bgt.n	800b964 <__ieee754_pow+0x214>
 800b976:	2000      	movs	r0, #0
 800b978:	b011      	add	sp, #68	@ 0x44
 800b97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97e:	f000 bca6 	b.w	800c2ce <__math_uflow>
 800b982:	429e      	cmp	r6, r3
 800b984:	d20c      	bcs.n	800b9a0 <__ieee754_pow+0x250>
 800b986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b98a:	2200      	movs	r2, #0
 800b98c:	2300      	movs	r3, #0
 800b98e:	f7f5 f82f 	bl	80009f0 <__aeabi_dcmplt>
 800b992:	3800      	subs	r0, #0
 800b994:	bf18      	it	ne
 800b996:	2001      	movne	r0, #1
 800b998:	f1b8 0f00 	cmp.w	r8, #0
 800b99c:	daec      	bge.n	800b978 <__ieee754_pow+0x228>
 800b99e:	e7e2      	b.n	800b966 <__ieee754_pow+0x216>
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <__ieee754_pow+0x27c>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	429e      	cmp	r6, r3
 800b9a6:	d91b      	bls.n	800b9e0 <__ieee754_pow+0x290>
 800b9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f7f5 f81f 	bl	80009f0 <__aeabi_dcmplt>
 800b9b2:	3800      	subs	r0, #0
 800b9b4:	bf18      	it	ne
 800b9b6:	2001      	movne	r0, #1
 800b9b8:	f1b8 0f00 	cmp.w	r8, #0
 800b9bc:	dcd3      	bgt.n	800b966 <__ieee754_pow+0x216>
 800b9be:	e7db      	b.n	800b978 <__ieee754_pow+0x228>
 800b9c0:	fff00000 	.word	0xfff00000
 800b9c4:	7ff00000 	.word	0x7ff00000
 800b9c8:	433fffff 	.word	0x433fffff
 800b9cc:	3ff00000 	.word	0x3ff00000
 800b9d0:	3fefffff 	.word	0x3fefffff
 800b9d4:	3fe00000 	.word	0x3fe00000
 800b9d8:	bff00000 	.word	0xbff00000
 800b9dc:	43f00000 	.word	0x43f00000
 800b9e0:	4b5b      	ldr	r3, [pc, #364]	@ (800bb50 <__ieee754_pow+0x400>)
 800b9e2:	f7f4 fbdb 	bl	800019c <__aeabi_dsub>
 800b9e6:	a352      	add	r3, pc, #328	@ (adr r3, 800bb30 <__ieee754_pow+0x3e0>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	f7f4 fd8c 	bl	800050c <__aeabi_dmul>
 800b9f4:	a350      	add	r3, pc, #320	@ (adr r3, 800bb38 <__ieee754_pow+0x3e8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7f4 fd83 	bl	800050c <__aeabi_dmul>
 800ba06:	2200      	movs	r2, #0
 800ba08:	4682      	mov	sl, r0
 800ba0a:	468b      	mov	fp, r1
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4b50      	ldr	r3, [pc, #320]	@ (800bb54 <__ieee754_pow+0x404>)
 800ba12:	f7f4 fd7b 	bl	800050c <__aeabi_dmul>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	a149      	add	r1, pc, #292	@ (adr r1, 800bb40 <__ieee754_pow+0x3f0>)
 800ba1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba20:	f7f4 fbbc 	bl	800019c <__aeabi_dsub>
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	f7f4 fd70 	bl	800050c <__aeabi_dmul>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	2000      	movs	r0, #0
 800ba32:	4949      	ldr	r1, [pc, #292]	@ (800bb58 <__ieee754_pow+0x408>)
 800ba34:	f7f4 fbb2 	bl	800019c <__aeabi_dsub>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	462b      	mov	r3, r5
 800ba40:	4620      	mov	r0, r4
 800ba42:	4629      	mov	r1, r5
 800ba44:	f7f4 fd62 	bl	800050c <__aeabi_dmul>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4649      	mov	r1, r9
 800ba50:	f7f4 fd5c 	bl	800050c <__aeabi_dmul>
 800ba54:	a33c      	add	r3, pc, #240	@ (adr r3, 800bb48 <__ieee754_pow+0x3f8>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fd57 	bl	800050c <__aeabi_dmul>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4650      	mov	r0, sl
 800ba64:	4659      	mov	r1, fp
 800ba66:	f7f4 fb99 	bl	800019c <__aeabi_dsub>
 800ba6a:	2400      	movs	r4, #0
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4680      	mov	r8, r0
 800ba72:	4689      	mov	r9, r1
 800ba74:	4630      	mov	r0, r6
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fb92 	bl	80001a0 <__adddf3>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	4620      	mov	r0, r4
 800ba82:	460d      	mov	r5, r1
 800ba84:	f7f4 fb8a 	bl	800019c <__aeabi_dsub>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f4 fb84 	bl	800019c <__aeabi_dsub>
 800ba94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baac:	4652      	mov	r2, sl
 800baae:	465b      	mov	r3, fp
 800bab0:	f7f4 fb74 	bl	800019c <__aeabi_dsub>
 800bab4:	4622      	mov	r2, r4
 800bab6:	462b      	mov	r3, r5
 800bab8:	f7f4 fd28 	bl	800050c <__aeabi_dmul>
 800babc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac0:	4680      	mov	r8, r0
 800bac2:	4689      	mov	r9, r1
 800bac4:	4630      	mov	r0, r6
 800bac6:	4639      	mov	r1, r7
 800bac8:	f7f4 fd20 	bl	800050c <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f4 fb64 	bl	80001a0 <__adddf3>
 800bad8:	4652      	mov	r2, sl
 800bada:	465b      	mov	r3, fp
 800badc:	4606      	mov	r6, r0
 800bade:	460f      	mov	r7, r1
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fd12 	bl	800050c <__aeabi_dmul>
 800bae8:	460b      	mov	r3, r1
 800baea:	4602      	mov	r2, r0
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	4630      	mov	r0, r6
 800baf2:	4639      	mov	r1, r7
 800baf4:	f7f4 fb54 	bl	80001a0 <__adddf3>
 800baf8:	4b18      	ldr	r3, [pc, #96]	@ (800bb5c <__ieee754_pow+0x40c>)
 800bafa:	4604      	mov	r4, r0
 800bafc:	4299      	cmp	r1, r3
 800bafe:	460d      	mov	r5, r1
 800bb00:	468a      	mov	sl, r1
 800bb02:	468b      	mov	fp, r1
 800bb04:	f340 82e0 	ble.w	800c0c8 <__ieee754_pow+0x978>
 800bb08:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bb0c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bb10:	4303      	orrs	r3, r0
 800bb12:	f000 81df 	beq.w	800bed4 <__ieee754_pow+0x784>
 800bb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f7f4 ff67 	bl	80009f0 <__aeabi_dcmplt>
 800bb22:	3800      	subs	r0, #0
 800bb24:	bf18      	it	ne
 800bb26:	2001      	movne	r0, #1
 800bb28:	e71d      	b.n	800b966 <__ieee754_pow+0x216>
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w
 800bb30:	60000000 	.word	0x60000000
 800bb34:	3ff71547 	.word	0x3ff71547
 800bb38:	f85ddf44 	.word	0xf85ddf44
 800bb3c:	3e54ae0b 	.word	0x3e54ae0b
 800bb40:	55555555 	.word	0x55555555
 800bb44:	3fd55555 	.word	0x3fd55555
 800bb48:	652b82fe 	.word	0x652b82fe
 800bb4c:	3ff71547 	.word	0x3ff71547
 800bb50:	3ff00000 	.word	0x3ff00000
 800bb54:	3fd00000 	.word	0x3fd00000
 800bb58:	3fe00000 	.word	0x3fe00000
 800bb5c:	408fffff 	.word	0x408fffff
 800bb60:	4ad3      	ldr	r2, [pc, #844]	@ (800beb0 <__ieee754_pow+0x760>)
 800bb62:	402a      	ands	r2, r5
 800bb64:	2a00      	cmp	r2, #0
 800bb66:	f040 817a 	bne.w	800be5e <__ieee754_pow+0x70e>
 800bb6a:	4bd2      	ldr	r3, [pc, #840]	@ (800beb4 <__ieee754_pow+0x764>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f7f4 fccd 	bl	800050c <__aeabi_dmul>
 800bb72:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800bb76:	460b      	mov	r3, r1
 800bb78:	151a      	asrs	r2, r3, #20
 800bb7a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb7e:	4422      	add	r2, r4
 800bb80:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb82:	4acd      	ldr	r2, [pc, #820]	@ (800beb8 <__ieee754_pow+0x768>)
 800bb84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb88:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb92:	dd08      	ble.n	800bba6 <__ieee754_pow+0x456>
 800bb94:	4ac9      	ldr	r2, [pc, #804]	@ (800bebc <__ieee754_pow+0x76c>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f340 8163 	ble.w	800be62 <__ieee754_pow+0x712>
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bba2:	3301      	adds	r3, #1
 800bba4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba6:	2600      	movs	r6, #0
 800bba8:	00f3      	lsls	r3, r6, #3
 800bbaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbac:	4bc4      	ldr	r3, [pc, #784]	@ (800bec0 <__ieee754_pow+0x770>)
 800bbae:	4629      	mov	r1, r5
 800bbb0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	f7f4 faeb 	bl	800019c <__aeabi_dsub>
 800bbc6:	4652      	mov	r2, sl
 800bbc8:	462b      	mov	r3, r5
 800bbca:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bbce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbd2:	f7f4 fae5 	bl	80001a0 <__adddf3>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	2000      	movs	r0, #0
 800bbdc:	49b9      	ldr	r1, [pc, #740]	@ (800bec4 <__ieee754_pow+0x774>)
 800bbde:	f7f4 fdbf 	bl	8000760 <__aeabi_ddiv>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bbea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbee:	f7f4 fc8d 	bl	800050c <__aeabi_dmul>
 800bbf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbf6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bbfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2200      	movs	r2, #0
 800bc02:	46ab      	mov	fp, r5
 800bc04:	106d      	asrs	r5, r5, #1
 800bc06:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bc10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bc14:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bc18:	4640      	mov	r0, r8
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	461d      	mov	r5, r3
 800bc20:	f7f4 fc74 	bl	800050c <__aeabi_dmul>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc2c:	f7f4 fab6 	bl	800019c <__aeabi_dsub>
 800bc30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc34:	4606      	mov	r6, r0
 800bc36:	460f      	mov	r7, r1
 800bc38:	4620      	mov	r0, r4
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	f7f4 faae 	bl	800019c <__aeabi_dsub>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4650      	mov	r0, sl
 800bc46:	4659      	mov	r1, fp
 800bc48:	f7f4 faa8 	bl	800019c <__aeabi_dsub>
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	f7f4 fc5c 	bl	800050c <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f7f4 fa9e 	bl	800019c <__aeabi_dsub>
 800bc60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc64:	f7f4 fc52 	bl	800050c <__aeabi_dmul>
 800bc68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc70:	4610      	mov	r0, r2
 800bc72:	4619      	mov	r1, r3
 800bc74:	f7f4 fc4a 	bl	800050c <__aeabi_dmul>
 800bc78:	a37b      	add	r3, pc, #492	@ (adr r3, 800be68 <__ieee754_pow+0x718>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	f7f4 fc43 	bl	800050c <__aeabi_dmul>
 800bc86:	a37a      	add	r3, pc, #488	@ (adr r3, 800be70 <__ieee754_pow+0x720>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f7f4 fa88 	bl	80001a0 <__adddf3>
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	f7f4 fc3a 	bl	800050c <__aeabi_dmul>
 800bc98:	a377      	add	r3, pc, #476	@ (adr r3, 800be78 <__ieee754_pow+0x728>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fa7f 	bl	80001a0 <__adddf3>
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	f7f4 fc31 	bl	800050c <__aeabi_dmul>
 800bcaa:	a375      	add	r3, pc, #468	@ (adr r3, 800be80 <__ieee754_pow+0x730>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f7f4 fa76 	bl	80001a0 <__adddf3>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	462b      	mov	r3, r5
 800bcb8:	f7f4 fc28 	bl	800050c <__aeabi_dmul>
 800bcbc:	a372      	add	r3, pc, #456	@ (adr r3, 800be88 <__ieee754_pow+0x738>)
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	f7f4 fa6d 	bl	80001a0 <__adddf3>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	f7f4 fc1f 	bl	800050c <__aeabi_dmul>
 800bcce:	a370      	add	r3, pc, #448	@ (adr r3, 800be90 <__ieee754_pow+0x740>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fa64 	bl	80001a0 <__adddf3>
 800bcd8:	4622      	mov	r2, r4
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460f      	mov	r7, r1
 800bcde:	462b      	mov	r3, r5
 800bce0:	4620      	mov	r0, r4
 800bce2:	4629      	mov	r1, r5
 800bce4:	f7f4 fc12 	bl	800050c <__aeabi_dmul>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4630      	mov	r0, r6
 800bcee:	4639      	mov	r1, r7
 800bcf0:	f7f4 fc0c 	bl	800050c <__aeabi_dmul>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfc:	4642      	mov	r2, r8
 800bcfe:	464b      	mov	r3, r9
 800bd00:	f7f4 fa4e 	bl	80001a0 <__adddf3>
 800bd04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd08:	f7f4 fc00 	bl	800050c <__aeabi_dmul>
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	462b      	mov	r3, r5
 800bd10:	f7f4 fa46 	bl	80001a0 <__adddf3>
 800bd14:	4642      	mov	r2, r8
 800bd16:	4682      	mov	sl, r0
 800bd18:	468b      	mov	fp, r1
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4649      	mov	r1, r9
 800bd20:	f7f4 fbf4 	bl	800050c <__aeabi_dmul>
 800bd24:	2200      	movs	r2, #0
 800bd26:	4b68      	ldr	r3, [pc, #416]	@ (800bec8 <__ieee754_pow+0x778>)
 800bd28:	4606      	mov	r6, r0
 800bd2a:	460f      	mov	r7, r1
 800bd2c:	f7f4 fa38 	bl	80001a0 <__adddf3>
 800bd30:	4652      	mov	r2, sl
 800bd32:	465b      	mov	r3, fp
 800bd34:	f7f4 fa34 	bl	80001a0 <__adddf3>
 800bd38:	2400      	movs	r4, #0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4640      	mov	r0, r8
 800bd42:	4649      	mov	r1, r9
 800bd44:	f7f4 fbe2 	bl	800050c <__aeabi_dmul>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4680      	mov	r8, r0
 800bd4c:	4689      	mov	r9, r1
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	4b5d      	ldr	r3, [pc, #372]	@ (800bec8 <__ieee754_pow+0x778>)
 800bd54:	f7f4 fa22 	bl	800019c <__aeabi_dsub>
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	f7f4 fa1e 	bl	800019c <__aeabi_dsub>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4650      	mov	r0, sl
 800bd66:	4659      	mov	r1, fp
 800bd68:	f7f4 fa18 	bl	800019c <__aeabi_dsub>
 800bd6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd70:	f7f4 fbcc 	bl	800050c <__aeabi_dmul>
 800bd74:	4622      	mov	r2, r4
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fbc4 	bl	800050c <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fa08 	bl	80001a0 <__adddf3>
 800bd90:	2400      	movs	r4, #0
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 f9ff 	bl	80001a0 <__adddf3>
 800bda2:	a33d      	add	r3, pc, #244	@ (adr r3, 800be98 <__ieee754_pow+0x748>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	460d      	mov	r5, r1
 800bdac:	f7f4 fbae 	bl	800050c <__aeabi_dmul>
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	f7f4 f9ee 	bl	800019c <__aeabi_dsub>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 f9e8 	bl	800019c <__aeabi_dsub>
 800bdcc:	a334      	add	r3, pc, #208	@ (adr r3, 800bea0 <__ieee754_pow+0x750>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fb9b 	bl	800050c <__aeabi_dmul>
 800bdd6:	a334      	add	r3, pc, #208	@ (adr r3, 800bea8 <__ieee754_pow+0x758>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fb92 	bl	800050c <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4630      	mov	r0, r6
 800bdee:	4639      	mov	r1, r7
 800bdf0:	f7f4 f9d6 	bl	80001a0 <__adddf3>
 800bdf4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bdf6:	4b35      	ldr	r3, [pc, #212]	@ (800becc <__ieee754_pow+0x77c>)
 800bdf8:	2400      	movs	r4, #0
 800bdfa:	4413      	add	r3, r2
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 f9ce 	bl	80001a0 <__adddf3>
 800be04:	4682      	mov	sl, r0
 800be06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be08:	468b      	mov	fp, r1
 800be0a:	f7f4 fb15 	bl	8000438 <__aeabi_i2d>
 800be0e:	4606      	mov	r6, r0
 800be10:	460f      	mov	r7, r1
 800be12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be14:	4b2e      	ldr	r3, [pc, #184]	@ (800bed0 <__ieee754_pow+0x780>)
 800be16:	4413      	add	r3, r2
 800be18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be1c:	4652      	mov	r2, sl
 800be1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be22:	465b      	mov	r3, fp
 800be24:	f7f4 f9bc 	bl	80001a0 <__adddf3>
 800be28:	4642      	mov	r2, r8
 800be2a:	464b      	mov	r3, r9
 800be2c:	f7f4 f9b8 	bl	80001a0 <__adddf3>
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	f7f4 f9b4 	bl	80001a0 <__adddf3>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	4620      	mov	r0, r4
 800be3e:	460d      	mov	r5, r1
 800be40:	f7f4 f9ac 	bl	800019c <__aeabi_dsub>
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	f7f4 f9a8 	bl	800019c <__aeabi_dsub>
 800be4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be50:	f7f4 f9a4 	bl	800019c <__aeabi_dsub>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4650      	mov	r0, sl
 800be5a:	4659      	mov	r1, fp
 800be5c:	e618      	b.n	800ba90 <__ieee754_pow+0x340>
 800be5e:	2400      	movs	r4, #0
 800be60:	e68a      	b.n	800bb78 <__ieee754_pow+0x428>
 800be62:	2601      	movs	r6, #1
 800be64:	e6a0      	b.n	800bba8 <__ieee754_pow+0x458>
 800be66:	bf00      	nop
 800be68:	4a454eef 	.word	0x4a454eef
 800be6c:	3fca7e28 	.word	0x3fca7e28
 800be70:	93c9db65 	.word	0x93c9db65
 800be74:	3fcd864a 	.word	0x3fcd864a
 800be78:	a91d4101 	.word	0xa91d4101
 800be7c:	3fd17460 	.word	0x3fd17460
 800be80:	518f264d 	.word	0x518f264d
 800be84:	3fd55555 	.word	0x3fd55555
 800be88:	db6fabff 	.word	0xdb6fabff
 800be8c:	3fdb6db6 	.word	0x3fdb6db6
 800be90:	33333303 	.word	0x33333303
 800be94:	3fe33333 	.word	0x3fe33333
 800be98:	e0000000 	.word	0xe0000000
 800be9c:	3feec709 	.word	0x3feec709
 800bea0:	dc3a03fd 	.word	0xdc3a03fd
 800bea4:	3feec709 	.word	0x3feec709
 800bea8:	145b01f5 	.word	0x145b01f5
 800beac:	be3e2fe0 	.word	0xbe3e2fe0
 800beb0:	7ff00000 	.word	0x7ff00000
 800beb4:	43400000 	.word	0x43400000
 800beb8:	0003988e 	.word	0x0003988e
 800bebc:	000bb679 	.word	0x000bb679
 800bec0:	0800cb68 	.word	0x0800cb68
 800bec4:	3ff00000 	.word	0x3ff00000
 800bec8:	40080000 	.word	0x40080000
 800becc:	0800cb48 	.word	0x0800cb48
 800bed0:	0800cb58 	.word	0x0800cb58
 800bed4:	a39a      	add	r3, pc, #616	@ (adr r3, 800c140 <__ieee754_pow+0x9f0>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 f95f 	bl	80001a0 <__adddf3>
 800bee2:	4642      	mov	r2, r8
 800bee4:	e9cd 0100 	strd	r0, r1, [sp]
 800bee8:	464b      	mov	r3, r9
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 f955 	bl	800019c <__aeabi_dsub>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800befa:	f7f4 fd97 	bl	8000a2c <__aeabi_dcmpgt>
 800befe:	2800      	cmp	r0, #0
 800bf00:	f47f ae09 	bne.w	800bb16 <__ieee754_pow+0x3c6>
 800bf04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bf08:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bf0c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800bf10:	fa43 fa0a 	asr.w	sl, r3, sl
 800bf14:	44da      	add	sl, fp
 800bf16:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bf1a:	489b      	ldr	r0, [pc, #620]	@ (800c188 <__ieee754_pow+0xa38>)
 800bf1c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bf20:	4108      	asrs	r0, r1
 800bf22:	ea00 030a 	and.w	r3, r0, sl
 800bf26:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bf2a:	f1c1 0114 	rsb	r1, r1, #20
 800bf2e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bf32:	4640      	mov	r0, r8
 800bf34:	fa4a fa01 	asr.w	sl, sl, r1
 800bf38:	f1bb 0f00 	cmp.w	fp, #0
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	bfb8      	it	lt
 800bf44:	f1ca 0a00 	rsblt	sl, sl, #0
 800bf48:	f7f4 f928 	bl	800019c <__aeabi_dsub>
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	4689      	mov	r9, r1
 800bf50:	2400      	movs	r4, #0
 800bf52:	4632      	mov	r2, r6
 800bf54:	463b      	mov	r3, r7
 800bf56:	4640      	mov	r0, r8
 800bf58:	4649      	mov	r1, r9
 800bf5a:	f7f4 f921 	bl	80001a0 <__adddf3>
 800bf5e:	a37a      	add	r3, pc, #488	@ (adr r3, 800c148 <__ieee754_pow+0x9f8>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	4620      	mov	r0, r4
 800bf66:	460d      	mov	r5, r1
 800bf68:	f7f4 fad0 	bl	800050c <__aeabi_dmul>
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	464b      	mov	r3, r9
 800bf70:	e9cd 0100 	strd	r0, r1, [sp]
 800bf74:	4620      	mov	r0, r4
 800bf76:	4629      	mov	r1, r5
 800bf78:	f7f4 f910 	bl	800019c <__aeabi_dsub>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4630      	mov	r0, r6
 800bf82:	4639      	mov	r1, r7
 800bf84:	f7f4 f90a 	bl	800019c <__aeabi_dsub>
 800bf88:	a371      	add	r3, pc, #452	@ (adr r3, 800c150 <__ieee754_pow+0xa00>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 fabd 	bl	800050c <__aeabi_dmul>
 800bf92:	a371      	add	r3, pc, #452	@ (adr r3, 800c158 <__ieee754_pow+0xa08>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	4680      	mov	r8, r0
 800bf9a:	4689      	mov	r9, r1
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	f7f4 fab4 	bl	800050c <__aeabi_dmul>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	4649      	mov	r1, r9
 800bfac:	f7f4 f8f8 	bl	80001a0 <__adddf3>
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	460d      	mov	r5, r1
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbc:	f7f4 f8f0 	bl	80001a0 <__adddf3>
 800bfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4689      	mov	r9, r1
 800bfc8:	f7f4 f8e8 	bl	800019c <__aeabi_dsub>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f8e2 	bl	800019c <__aeabi_dsub>
 800bfd8:	4642      	mov	r2, r8
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460f      	mov	r7, r1
 800bfde:	464b      	mov	r3, r9
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	f7f4 fa92 	bl	800050c <__aeabi_dmul>
 800bfe8:	a35d      	add	r3, pc, #372	@ (adr r3, 800c160 <__ieee754_pow+0xa10>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	f7f4 fa8b 	bl	800050c <__aeabi_dmul>
 800bff6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c168 <__ieee754_pow+0xa18>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 f8ce 	bl	800019c <__aeabi_dsub>
 800c000:	4622      	mov	r2, r4
 800c002:	462b      	mov	r3, r5
 800c004:	f7f4 fa82 	bl	800050c <__aeabi_dmul>
 800c008:	a359      	add	r3, pc, #356	@ (adr r3, 800c170 <__ieee754_pow+0xa20>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 f8c7 	bl	80001a0 <__adddf3>
 800c012:	4622      	mov	r2, r4
 800c014:	462b      	mov	r3, r5
 800c016:	f7f4 fa79 	bl	800050c <__aeabi_dmul>
 800c01a:	a357      	add	r3, pc, #348	@ (adr r3, 800c178 <__ieee754_pow+0xa28>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f8bc 	bl	800019c <__aeabi_dsub>
 800c024:	4622      	mov	r2, r4
 800c026:	462b      	mov	r3, r5
 800c028:	f7f4 fa70 	bl	800050c <__aeabi_dmul>
 800c02c:	a354      	add	r3, pc, #336	@ (adr r3, 800c180 <__ieee754_pow+0xa30>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 f8b5 	bl	80001a0 <__adddf3>
 800c036:	4622      	mov	r2, r4
 800c038:	462b      	mov	r3, r5
 800c03a:	f7f4 fa67 	bl	800050c <__aeabi_dmul>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 f8a9 	bl	800019c <__aeabi_dsub>
 800c04a:	4604      	mov	r4, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4640      	mov	r0, r8
 800c054:	4649      	mov	r1, r9
 800c056:	f7f4 fa59 	bl	800050c <__aeabi_dmul>
 800c05a:	2200      	movs	r2, #0
 800c05c:	e9cd 0100 	strd	r0, r1, [sp]
 800c060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f7f4 f898 	bl	800019c <__aeabi_dsub>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c074:	f7f4 fb74 	bl	8000760 <__aeabi_ddiv>
 800c078:	4632      	mov	r2, r6
 800c07a:	4604      	mov	r4, r0
 800c07c:	460d      	mov	r5, r1
 800c07e:	463b      	mov	r3, r7
 800c080:	4640      	mov	r0, r8
 800c082:	4649      	mov	r1, r9
 800c084:	f7f4 fa42 	bl	800050c <__aeabi_dmul>
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	f7f4 f888 	bl	80001a0 <__adddf3>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4620      	mov	r0, r4
 800c096:	4629      	mov	r1, r5
 800c098:	f7f4 f880 	bl	800019c <__aeabi_dsub>
 800c09c:	4642      	mov	r2, r8
 800c09e:	464b      	mov	r3, r9
 800c0a0:	f7f4 f87c 	bl	800019c <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	4938      	ldr	r1, [pc, #224]	@ (800c18c <__ieee754_pow+0xa3c>)
 800c0ac:	f7f4 f876 	bl	800019c <__aeabi_dsub>
 800c0b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c0b4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c0b8:	da2e      	bge.n	800c118 <__ieee754_pow+0x9c8>
 800c0ba:	4652      	mov	r2, sl
 800c0bc:	f000 f874 	bl	800c1a8 <scalbn>
 800c0c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0c4:	f7ff bbed 	b.w	800b8a2 <__ieee754_pow+0x152>
 800c0c8:	4c31      	ldr	r4, [pc, #196]	@ (800c190 <__ieee754_pow+0xa40>)
 800c0ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	d91a      	bls.n	800c108 <__ieee754_pow+0x9b8>
 800c0d2:	4b30      	ldr	r3, [pc, #192]	@ (800c194 <__ieee754_pow+0xa44>)
 800c0d4:	440b      	add	r3, r1
 800c0d6:	4303      	orrs	r3, r0
 800c0d8:	d009      	beq.n	800c0ee <__ieee754_pow+0x99e>
 800c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f7f4 fc85 	bl	80009f0 <__aeabi_dcmplt>
 800c0e6:	3800      	subs	r0, #0
 800c0e8:	bf18      	it	ne
 800c0ea:	2001      	movne	r0, #1
 800c0ec:	e444      	b.n	800b978 <__ieee754_pow+0x228>
 800c0ee:	4642      	mov	r2, r8
 800c0f0:	464b      	mov	r3, r9
 800c0f2:	f7f4 f853 	bl	800019c <__aeabi_dsub>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	463b      	mov	r3, r7
 800c0fa:	f7f4 fc8d 	bl	8000a18 <__aeabi_dcmpge>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d1eb      	bne.n	800c0da <__ieee754_pow+0x98a>
 800c102:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800c198 <__ieee754_pow+0xa48>
 800c106:	e6fd      	b.n	800bf04 <__ieee754_pow+0x7b4>
 800c108:	469a      	mov	sl, r3
 800c10a:	4b24      	ldr	r3, [pc, #144]	@ (800c19c <__ieee754_pow+0xa4c>)
 800c10c:	459a      	cmp	sl, r3
 800c10e:	f63f aef9 	bhi.w	800bf04 <__ieee754_pow+0x7b4>
 800c112:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c116:	e71b      	b.n	800bf50 <__ieee754_pow+0x800>
 800c118:	4621      	mov	r1, r4
 800c11a:	e7d1      	b.n	800c0c0 <__ieee754_pow+0x970>
 800c11c:	2000      	movs	r0, #0
 800c11e:	491b      	ldr	r1, [pc, #108]	@ (800c18c <__ieee754_pow+0xa3c>)
 800c120:	f7ff bb34 	b.w	800b78c <__ieee754_pow+0x3c>
 800c124:	2000      	movs	r0, #0
 800c126:	2100      	movs	r1, #0
 800c128:	f7ff bb30 	b.w	800b78c <__ieee754_pow+0x3c>
 800c12c:	4650      	mov	r0, sl
 800c12e:	4659      	mov	r1, fp
 800c130:	f7ff bb2c 	b.w	800b78c <__ieee754_pow+0x3c>
 800c134:	460c      	mov	r4, r1
 800c136:	f7ff bb79 	b.w	800b82c <__ieee754_pow+0xdc>
 800c13a:	2400      	movs	r4, #0
 800c13c:	f7ff bb64 	b.w	800b808 <__ieee754_pow+0xb8>
 800c140:	652b82fe 	.word	0x652b82fe
 800c144:	3c971547 	.word	0x3c971547
 800c148:	00000000 	.word	0x00000000
 800c14c:	3fe62e43 	.word	0x3fe62e43
 800c150:	fefa39ef 	.word	0xfefa39ef
 800c154:	3fe62e42 	.word	0x3fe62e42
 800c158:	0ca86c39 	.word	0x0ca86c39
 800c15c:	be205c61 	.word	0xbe205c61
 800c160:	72bea4d0 	.word	0x72bea4d0
 800c164:	3e663769 	.word	0x3e663769
 800c168:	c5d26bf1 	.word	0xc5d26bf1
 800c16c:	3ebbbd41 	.word	0x3ebbbd41
 800c170:	af25de2c 	.word	0xaf25de2c
 800c174:	3f11566a 	.word	0x3f11566a
 800c178:	16bebd93 	.word	0x16bebd93
 800c17c:	3f66c16c 	.word	0x3f66c16c
 800c180:	5555553e 	.word	0x5555553e
 800c184:	3fc55555 	.word	0x3fc55555
 800c188:	fff00000 	.word	0xfff00000
 800c18c:	3ff00000 	.word	0x3ff00000
 800c190:	4090cbff 	.word	0x4090cbff
 800c194:	3f6f3400 	.word	0x3f6f3400
 800c198:	4090cc00 	.word	0x4090cc00
 800c19c:	3fe00000 	.word	0x3fe00000

0800c1a0 <fabs>:
 800c1a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4770      	bx	lr

0800c1a8 <scalbn>:
 800c1a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c1ac:	4616      	mov	r6, r2
 800c1ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1b2:	4683      	mov	fp, r0
 800c1b4:	468c      	mov	ip, r1
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	b982      	cbnz	r2, 800c1dc <scalbn+0x34>
 800c1ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1be:	4303      	orrs	r3, r0
 800c1c0:	d039      	beq.n	800c236 <scalbn+0x8e>
 800c1c2:	4b2f      	ldr	r3, [pc, #188]	@ (800c280 <scalbn+0xd8>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f7f4 f9a1 	bl	800050c <__aeabi_dmul>
 800c1ca:	4b2e      	ldr	r3, [pc, #184]	@ (800c284 <scalbn+0xdc>)
 800c1cc:	4683      	mov	fp, r0
 800c1ce:	429e      	cmp	r6, r3
 800c1d0:	468c      	mov	ip, r1
 800c1d2:	da0d      	bge.n	800c1f0 <scalbn+0x48>
 800c1d4:	a326      	add	r3, pc, #152	@ (adr r3, 800c270 <scalbn+0xc8>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	e01b      	b.n	800c214 <scalbn+0x6c>
 800c1dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c1e0:	42ba      	cmp	r2, r7
 800c1e2:	d109      	bne.n	800c1f8 <scalbn+0x50>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	f7f3 ffdb 	bl	80001a0 <__adddf3>
 800c1ea:	4683      	mov	fp, r0
 800c1ec:	468c      	mov	ip, r1
 800c1ee:	e022      	b.n	800c236 <scalbn+0x8e>
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1f6:	3a36      	subs	r2, #54	@ 0x36
 800c1f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c1fc:	428e      	cmp	r6, r1
 800c1fe:	dd0c      	ble.n	800c21a <scalbn+0x72>
 800c200:	a31d      	add	r3, pc, #116	@ (adr r3, 800c278 <scalbn+0xd0>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	461c      	mov	r4, r3
 800c208:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c20c:	f361 74df 	bfi	r4, r1, #31, #1
 800c210:	4621      	mov	r1, r4
 800c212:	481d      	ldr	r0, [pc, #116]	@ (800c288 <scalbn+0xe0>)
 800c214:	f7f4 f97a 	bl	800050c <__aeabi_dmul>
 800c218:	e7e7      	b.n	800c1ea <scalbn+0x42>
 800c21a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c21e:	4432      	add	r2, r6
 800c220:	428a      	cmp	r2, r1
 800c222:	dced      	bgt.n	800c200 <scalbn+0x58>
 800c224:	2a00      	cmp	r2, #0
 800c226:	dd0a      	ble.n	800c23e <scalbn+0x96>
 800c228:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c22c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c230:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c234:	46ac      	mov	ip, r5
 800c236:	4658      	mov	r0, fp
 800c238:	4661      	mov	r1, ip
 800c23a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c23e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c242:	da09      	bge.n	800c258 <scalbn+0xb0>
 800c244:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c248:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c24c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c250:	480e      	ldr	r0, [pc, #56]	@ (800c28c <scalbn+0xe4>)
 800c252:	f041 011f 	orr.w	r1, r1, #31
 800c256:	e7bd      	b.n	800c1d4 <scalbn+0x2c>
 800c258:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c25c:	3236      	adds	r2, #54	@ 0x36
 800c25e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c266:	4658      	mov	r0, fp
 800c268:	4629      	mov	r1, r5
 800c26a:	2200      	movs	r2, #0
 800c26c:	4b08      	ldr	r3, [pc, #32]	@ (800c290 <scalbn+0xe8>)
 800c26e:	e7d1      	b.n	800c214 <scalbn+0x6c>
 800c270:	c2f8f359 	.word	0xc2f8f359
 800c274:	01a56e1f 	.word	0x01a56e1f
 800c278:	8800759c 	.word	0x8800759c
 800c27c:	7e37e43c 	.word	0x7e37e43c
 800c280:	43500000 	.word	0x43500000
 800c284:	ffff3cb0 	.word	0xffff3cb0
 800c288:	8800759c 	.word	0x8800759c
 800c28c:	c2f8f359 	.word	0xc2f8f359
 800c290:	3c900000 	.word	0x3c900000

0800c294 <with_errno>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	4616      	mov	r6, r2
 800c29c:	f7fc fd88 	bl	8008db0 <__errno>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	6006      	str	r6, [r0, #0]
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}

0800c2a8 <xflow>:
 800c2a8:	b513      	push	{r0, r1, r4, lr}
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	b10c      	cbz	r4, 800c2b6 <xflow+0xe>
 800c2b2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c2b6:	e9cd 2300 	strd	r2, r3, [sp]
 800c2ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2be:	f7f4 f925 	bl	800050c <__aeabi_dmul>
 800c2c2:	2222      	movs	r2, #34	@ 0x22
 800c2c4:	b002      	add	sp, #8
 800c2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ca:	f7ff bfe3 	b.w	800c294 <with_errno>

0800c2ce <__math_uflow>:
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c2d4:	f7ff bfe8 	b.w	800c2a8 <xflow>

0800c2d8 <__math_oflow>:
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c2de:	f7ff bfe3 	b.w	800c2a8 <xflow>
	...

0800c2e4 <__ieee754_sqrt>:
 800c2e4:	4a67      	ldr	r2, [pc, #412]	@ (800c484 <__ieee754_sqrt+0x1a0>)
 800c2e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	438a      	bics	r2, r1
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	460f      	mov	r7, r1
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	d10e      	bne.n	800c314 <__ieee754_sqrt+0x30>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	f7f4 f908 	bl	800050c <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f7f3 ff4c 	bl	80001a0 <__adddf3>
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4630      	mov	r0, r6
 800c30e:	4639      	mov	r1, r7
 800c310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c314:	2900      	cmp	r1, #0
 800c316:	dc0c      	bgt.n	800c332 <__ieee754_sqrt+0x4e>
 800c318:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c31c:	4302      	orrs	r2, r0
 800c31e:	d0f5      	beq.n	800c30c <__ieee754_sqrt+0x28>
 800c320:	b189      	cbz	r1, 800c346 <__ieee754_sqrt+0x62>
 800c322:	4602      	mov	r2, r0
 800c324:	f7f3 ff3a 	bl	800019c <__aeabi_dsub>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	f7f4 fa18 	bl	8000760 <__aeabi_ddiv>
 800c330:	e7ea      	b.n	800c308 <__ieee754_sqrt+0x24>
 800c332:	150a      	asrs	r2, r1, #20
 800c334:	d115      	bne.n	800c362 <__ieee754_sqrt+0x7e>
 800c336:	2100      	movs	r1, #0
 800c338:	e009      	b.n	800c34e <__ieee754_sqrt+0x6a>
 800c33a:	0ae3      	lsrs	r3, r4, #11
 800c33c:	3a15      	subs	r2, #21
 800c33e:	0564      	lsls	r4, r4, #21
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0fa      	beq.n	800c33a <__ieee754_sqrt+0x56>
 800c344:	e7f7      	b.n	800c336 <__ieee754_sqrt+0x52>
 800c346:	460a      	mov	r2, r1
 800c348:	e7fa      	b.n	800c340 <__ieee754_sqrt+0x5c>
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	3101      	adds	r1, #1
 800c34e:	02d8      	lsls	r0, r3, #11
 800c350:	d5fb      	bpl.n	800c34a <__ieee754_sqrt+0x66>
 800c352:	1e48      	subs	r0, r1, #1
 800c354:	1a12      	subs	r2, r2, r0
 800c356:	f1c1 0020 	rsb	r0, r1, #32
 800c35a:	fa24 f000 	lsr.w	r0, r4, r0
 800c35e:	4303      	orrs	r3, r0
 800c360:	408c      	lsls	r4, r1
 800c362:	2600      	movs	r6, #0
 800c364:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c368:	2116      	movs	r1, #22
 800c36a:	07d2      	lsls	r2, r2, #31
 800c36c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c370:	4632      	mov	r2, r6
 800c372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c37a:	bf5c      	itt	pl
 800c37c:	005b      	lslpl	r3, r3, #1
 800c37e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c382:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c386:	bf58      	it	pl
 800c388:	0064      	lslpl	r4, r4, #1
 800c38a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c38e:	107f      	asrs	r7, r7, #1
 800c390:	0064      	lsls	r4, r4, #1
 800c392:	1815      	adds	r5, r2, r0
 800c394:	429d      	cmp	r5, r3
 800c396:	bfde      	ittt	le
 800c398:	182a      	addle	r2, r5, r0
 800c39a:	1b5b      	suble	r3, r3, r5
 800c39c:	1836      	addle	r6, r6, r0
 800c39e:	0fe5      	lsrs	r5, r4, #31
 800c3a0:	3901      	subs	r1, #1
 800c3a2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c3a6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c3aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c3ae:	d1f0      	bne.n	800c392 <__ieee754_sqrt+0xae>
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	f04f 0a20 	mov.w	sl, #32
 800c3b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	eb01 0c00 	add.w	ip, r1, r0
 800c3c0:	db02      	blt.n	800c3c8 <__ieee754_sqrt+0xe4>
 800c3c2:	d113      	bne.n	800c3ec <__ieee754_sqrt+0x108>
 800c3c4:	45a4      	cmp	ip, r4
 800c3c6:	d811      	bhi.n	800c3ec <__ieee754_sqrt+0x108>
 800c3c8:	f1bc 0f00 	cmp.w	ip, #0
 800c3cc:	eb0c 0100 	add.w	r1, ip, r0
 800c3d0:	da42      	bge.n	800c458 <__ieee754_sqrt+0x174>
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	db40      	blt.n	800c458 <__ieee754_sqrt+0x174>
 800c3d6:	f102 0e01 	add.w	lr, r2, #1
 800c3da:	1a9b      	subs	r3, r3, r2
 800c3dc:	4672      	mov	r2, lr
 800c3de:	45a4      	cmp	ip, r4
 800c3e0:	bf88      	it	hi
 800c3e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c3e6:	eba4 040c 	sub.w	r4, r4, ip
 800c3ea:	4405      	add	r5, r0
 800c3ec:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c3f0:	f1ba 0a01 	subs.w	sl, sl, #1
 800c3f4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c3f8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c3fc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c400:	d1db      	bne.n	800c3ba <__ieee754_sqrt+0xd6>
 800c402:	431c      	orrs	r4, r3
 800c404:	d01a      	beq.n	800c43c <__ieee754_sqrt+0x158>
 800c406:	4c20      	ldr	r4, [pc, #128]	@ (800c488 <__ieee754_sqrt+0x1a4>)
 800c408:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c48c <__ieee754_sqrt+0x1a8>
 800c40c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c410:	e9db 2300 	ldrd	r2, r3, [fp]
 800c414:	f7f3 fec2 	bl	800019c <__aeabi_dsub>
 800c418:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	f7f4 faee 	bl	8000a04 <__aeabi_dcmple>
 800c428:	b140      	cbz	r0, 800c43c <__ieee754_sqrt+0x158>
 800c42a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c42e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c432:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c436:	d111      	bne.n	800c45c <__ieee754_sqrt+0x178>
 800c438:	4655      	mov	r5, sl
 800c43a:	3601      	adds	r6, #1
 800c43c:	1072      	asrs	r2, r6, #1
 800c43e:	086b      	lsrs	r3, r5, #1
 800c440:	07f1      	lsls	r1, r6, #31
 800c442:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c446:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c44a:	bf48      	it	mi
 800c44c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c450:	4618      	mov	r0, r3
 800c452:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c456:	e757      	b.n	800c308 <__ieee754_sqrt+0x24>
 800c458:	4696      	mov	lr, r2
 800c45a:	e7be      	b.n	800c3da <__ieee754_sqrt+0xf6>
 800c45c:	f7f3 fea0 	bl	80001a0 <__adddf3>
 800c460:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4640      	mov	r0, r8
 800c46a:	4649      	mov	r1, r9
 800c46c:	f7f4 fac0 	bl	80009f0 <__aeabi_dcmplt>
 800c470:	b120      	cbz	r0, 800c47c <__ieee754_sqrt+0x198>
 800c472:	1ca8      	adds	r0, r5, #2
 800c474:	bf08      	it	eq
 800c476:	3601      	addeq	r6, #1
 800c478:	3502      	adds	r5, #2
 800c47a:	e7df      	b.n	800c43c <__ieee754_sqrt+0x158>
 800c47c:	1c6b      	adds	r3, r5, #1
 800c47e:	f023 0501 	bic.w	r5, r3, #1
 800c482:	e7db      	b.n	800c43c <__ieee754_sqrt+0x158>
 800c484:	7ff00000 	.word	0x7ff00000
 800c488:	20000610 	.word	0x20000610
 800c48c:	20000608 	.word	0x20000608

0800c490 <_init>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	bf00      	nop
 800c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c496:	bc08      	pop	{r3}
 800c498:	469e      	mov	lr, r3
 800c49a:	4770      	bx	lr

0800c49c <_fini>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr
