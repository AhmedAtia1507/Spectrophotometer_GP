
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010f0  080010f8  000020f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010f0  080010f0  000020f8  2**0
                  CONTENTS
  4 .ARM          00000000  080010f0  080010f0  000020f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010f0  080010f8  000020f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010f0  080010f0  000020f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010f4  080010f4  000020f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000020f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  080010f8  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080010f8  00003058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001772  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000075c  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000009a4  00000000  00000000  00003fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00004998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  00004b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001757  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001269  00000000  00000000  000063e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006d58  00000000  00000000  00007650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e3a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000564  00000000  00000000  0000e3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010d8 	.word	0x080010d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010d8 	.word	0x080010d8

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	@ 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 80004fa:	2340      	movs	r3, #64	@ 0x40
 80004fc:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 80004fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000502:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <adc_init+0x48>)
 8000506:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8000508:	2300      	movs	r3, #0
 800050a:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8000510:	2300      	movs	r3, #0
 8000512:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8000514:	480a      	ldr	r0, [pc, #40]	@ (8000540 <adc_init+0x4c>)
 8000516:	f000 fa67 	bl	80009e8 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 800051a:	463b      	mov	r3, r7
 800051c:	4619      	mov	r1, r3
 800051e:	4808      	ldr	r0, [pc, #32]	@ (8000540 <adc_init+0x4c>)
 8000520:	f000 f98c 	bl	800083c <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 8000524:	f000 fa52 	bl	80009cc <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000528:	463b      	mov	r3, r7
 800052a:	4619      	mov	r1, r3
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <adc_init+0x4c>)
 800052e:	f000 f985 	bl	800083c <MCAL_I2C_Init>
}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	000186a0 	.word	0x000186a0
 8000540:	40005400 	.word	0x40005400

08000544 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af02      	add	r7, sp, #8
 800054a:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x49;
 800054c:	2349      	movs	r3, #73	@ 0x49
 800054e:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x01;
 8000550:	2301      	movs	r3, #1
 8000552:	753b      	strb	r3, [r7, #20]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 8000554:	797b      	ldrb	r3, [r7, #5]
 8000556:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	01db      	lsls	r3, r3, #7
 800055e:	b25a      	sxtb	r2, r3
 8000560:	797b      	ldrb	r3, [r7, #5]
 8000562:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	b25b      	sxtb	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b25a      	sxtb	r2, r3
 8000570:	797b      	ldrb	r3, [r7, #5]
 8000572:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	b25b      	sxtb	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	b25b      	sxtb	r3, r3
 800058a:	4313      	orrs	r3, r2
 800058c:	b25b      	sxtb	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	757b      	strb	r3, [r7, #21]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 8000592:	793b      	ldrb	r3, [r7, #4]
 8000594:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	b25a      	sxtb	r2, r3
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b25a      	sxtb	r2, r3
 80005ae:	793b      	ldrb	r3, [r7, #4]
 80005b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	793b      	ldrb	r3, [r7, #4]
 80005c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	793b      	ldrb	r3, [r7, #4]
 80005d0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	75bb      	strb	r3, [r7, #22]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 80005e0:	f107 0214 	add.w	r2, r7, #20
 80005e4:	8bf9      	ldrh	r1, [r7, #30]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2303      	movs	r3, #3
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <adc_read_mv+0x124>)
 80005f2:	f000 fa23 	bl	8000a3c <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 80005fa:	f107 0214 	add.w	r2, r7, #20
 80005fe:	8bf9      	ldrh	r1, [r7, #30]
 8000600:	2300      	movs	r3, #0
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2300      	movs	r3, #0
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	4817      	ldr	r0, [pc, #92]	@ (8000668 <adc_read_mv+0x124>)
 800060c:	f000 fa16 	bl	8000a3c <MCAL_I2C_MASTER_TX>
	delay_ms(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fbf4 	bl	8000dfe <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start);
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	8bf9      	ldrh	r1, [r7, #30]
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2300      	movs	r3, #0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2302      	movs	r3, #2
 8000626:	4810      	ldr	r0, [pc, #64]	@ (8000668 <adc_read_mv+0x124>)
 8000628:	f000 fa66 	bl	8000af8 <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 800062c:	7b7b      	ldrb	r3, [r7, #13]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	7b3b      	ldrb	r3, [r7, #12]
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 800063c:	8bbb      	ldrh	r3, [r7, #28]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff00 	bl	8000444 <__aeabi_ui2f>
 8000644:	4603      	mov	r3, r0
 8000646:	4909      	ldr	r1, [pc, #36]	@ (800066c <adc_read_mv+0x128>)
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fd91 	bl	8000170 <__aeabi_fmul>
 800064e:	4603      	mov	r3, r0
 8000650:	4907      	ldr	r1, [pc, #28]	@ (8000670 <adc_read_mv+0x12c>)
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fd8c 	bl	8000170 <__aeabi_fmul>
 8000658:	4603      	mov	r3, r0
 800065a:	61bb      	str	r3, [r7, #24]
	return mv;
 800065c:	69bb      	ldr	r3, [r7, #24]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40005400 	.word	0x40005400
 800066c:	3903126f 	.word	0x3903126f
 8000670:	447a0000 	.word	0x447a0000

08000674 <MGPIO_u8SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_u8SetPinMode(uint8 Copy_u8PortID, uint8 Copy_u8PinID, uint8 Copy_u8PinMode)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_u8FuncStatus = E_NOT_OK;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]

    switch(Copy_u8PortID)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d07f      	beq.n	8000790 <MGPIO_u8SetPinMode+0x11c>
 8000690:	2b02      	cmp	r3, #2
 8000692:	f300 80b8 	bgt.w	8000806 <MGPIO_u8SetPinMode+0x192>
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <MGPIO_u8SetPinMode+0x2c>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d03c      	beq.n	8000718 <MGPIO_u8SetPinMode+0xa4>
 800069e:	e0b2      	b.n	8000806 <MGPIO_u8SetPinMode+0x192>
    {
        case GPIO_PORTA:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d819      	bhi.n	80006da <MGPIO_u8SetPinMode+0x66>
            {
                GPIOA_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 80006a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000824 <MGPIO_u8SetPinMode+0x1b0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	210f      	movs	r1, #15
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a5a      	ldr	r2, [pc, #360]	@ (8000824 <MGPIO_u8SetPinMode+0x1b0>)
 80006ba:	400b      	ands	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80006be:	4b59      	ldr	r3, [pc, #356]	@ (8000824 <MGPIO_u8SetPinMode+0x1b0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7979      	ldrb	r1, [r7, #5]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a55      	ldr	r2, [pc, #340]	@ (8000824 <MGPIO_u8SetPinMode+0x1b0>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
            {
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80006d8:	e098      	b.n	800080c <MGPIO_u8SetPinMode+0x198>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	f200 8095 	bhi.w	800080c <MGPIO_u8SetPinMode+0x198>
                GPIOA_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80006e2:	4b51      	ldr	r3, [pc, #324]	@ (8000828 <MGPIO_u8SetPinMode+0x1b4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	3a08      	subs	r2, #8
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	210f      	movs	r1, #15
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a4c      	ldr	r2, [pc, #304]	@ (8000828 <MGPIO_u8SetPinMode+0x1b4>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80006fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000828 <MGPIO_u8SetPinMode+0x1b4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	7979      	ldrb	r1, [r7, #5]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	3a08      	subs	r2, #8
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a46      	ldr	r2, [pc, #280]	@ (8000828 <MGPIO_u8SetPinMode+0x1b4>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
            break;
 8000716:	e079      	b.n	800080c <MGPIO_u8SetPinMode+0x198>
        }
        case GPIO_PORTB:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d819      	bhi.n	8000752 <MGPIO_u8SetPinMode+0xde>
            {
                GPIOB_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 800071e:	4b43      	ldr	r3, [pc, #268]	@ (800082c <MGPIO_u8SetPinMode+0x1b8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	210f      	movs	r1, #15
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	43d2      	mvns	r2, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a3e      	ldr	r2, [pc, #248]	@ (800082c <MGPIO_u8SetPinMode+0x1b8>)
 8000732:	400b      	ands	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <MGPIO_u8SetPinMode+0x1b8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	7979      	ldrb	r1, [r7, #5]
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	0092      	lsls	r2, r2, #2
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a39      	ldr	r2, [pc, #228]	@ (800082c <MGPIO_u8SetPinMode+0x1b8>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
            {
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOB_CRH |= ((Copy_u8PinMode) << (4 * (Copy_u8PinID-8)));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 8000750:	e05e      	b.n	8000810 <MGPIO_u8SetPinMode+0x19c>
            else if(Copy_u8PinID <= GPIO_PIN15)
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d85b      	bhi.n	8000810 <MGPIO_u8SetPinMode+0x19c>
                GPIOB_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 8000758:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <MGPIO_u8SetPinMode+0x1bc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	3a08      	subs	r2, #8
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	210f      	movs	r1, #15
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	43d2      	mvns	r2, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a30      	ldr	r2, [pc, #192]	@ (8000830 <MGPIO_u8SetPinMode+0x1bc>)
 800076e:	400b      	ands	r3, r1
 8000770:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8PinMode) << (4 * (Copy_u8PinID-8)));
 8000772:	4b2f      	ldr	r3, [pc, #188]	@ (8000830 <MGPIO_u8SetPinMode+0x1bc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7979      	ldrb	r1, [r7, #5]
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	3a08      	subs	r2, #8
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <MGPIO_u8SetPinMode+0x1bc>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
            break;
 800078e:	e03f      	b.n	8000810 <MGPIO_u8SetPinMode+0x19c>
        }
        case GPIO_PORTC:
        {
            if(Copy_u8PinID <= GPIO_PIN7)
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	2b07      	cmp	r3, #7
 8000794:	d819      	bhi.n	80007ca <MGPIO_u8SetPinMode+0x156>
            {
                GPIOC_CRL &= ~((0b1111) << (4 * Copy_u8PinID));
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MGPIO_u8SetPinMode+0x1c0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	210f      	movs	r1, #15
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	43d2      	mvns	r2, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <MGPIO_u8SetPinMode+0x1c0>)
 80007aa:	400b      	ands	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8PinMode) << (4 * Copy_u8PinID));
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MGPIO_u8SetPinMode+0x1c0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7979      	ldrb	r1, [r7, #5]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	0092      	lsls	r2, r2, #2
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <MGPIO_u8SetPinMode+0x1c0>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]

                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
                Loc_u8FuncStatus = E_OK;
            }
            break;
 80007c8:	e024      	b.n	8000814 <MGPIO_u8SetPinMode+0x1a0>
            else if(Copy_u8PinID <= GPIO_PIN15)
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d821      	bhi.n	8000814 <MGPIO_u8SetPinMode+0x1a0>
                GPIOC_CRH &= ~((0b1111) << (4 * (Copy_u8PinID - 8)));
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MGPIO_u8SetPinMode+0x1c4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	3a08      	subs	r2, #8
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	210f      	movs	r1, #15
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <MGPIO_u8SetPinMode+0x1c4>)
 80007e6:	400b      	ands	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8PinMode) << (Copy_u8PinID - 8));
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MGPIO_u8SetPinMode+0x1c4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	7979      	ldrb	r1, [r7, #5]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	3a08      	subs	r2, #8
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <MGPIO_u8SetPinMode+0x1c4>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6013      	str	r3, [r2, #0]
                Loc_u8FuncStatus = E_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
            break;
 8000804:	e006      	b.n	8000814 <MGPIO_u8SetPinMode+0x1a0>
        }
        default:
        {
            Loc_u8FuncStatus = E_NOT_OK;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
            break;
 800080a:	e004      	b.n	8000816 <MGPIO_u8SetPinMode+0x1a2>
            break;
 800080c:	bf00      	nop
 800080e:	e002      	b.n	8000816 <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000810:	bf00      	nop
 8000812:	e000      	b.n	8000816 <MGPIO_u8SetPinMode+0x1a2>
            break;
 8000814:	bf00      	nop
        }
    }
    return Loc_u8FuncStatus;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40010800 	.word	0x40010800
 8000828:	40010804 	.word	0x40010804
 800082c:	40010c00 	.word	0x40010c00
 8000830:	40010c04 	.word	0x40010c04
 8000834:	40011000 	.word	0x40011000
 8000838:	40011004 	.word	0x40011004

0800083c <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	82fb      	strh	r3, [r7, #22]
 800084a:	2300      	movs	r3, #0
 800084c:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 800084e:	4b59      	ldr	r3, [pc, #356]	@ (80009b4 <MCAL_I2C_Init+0x178>)
 8000850:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 8000852:	2300      	movs	r3, #0
 8000854:	81fb      	strh	r3, [r7, #14]

	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000856:	4b58      	ldr	r3, [pc, #352]	@ (80009b8 <MCAL_I2C_Init+0x17c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a57      	ldr	r2, [pc, #348]	@ (80009b8 <MCAL_I2C_Init+0x17c>)
 800085c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000860:	6013      	str	r3, [r2, #0]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a54      	ldr	r2, [pc, #336]	@ (80009b8 <MCAL_I2C_Init+0x17c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10e      	bne.n	8000888 <MCAL_I2C_Init+0x4c>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 800086a:	4a54      	ldr	r2, [pc, #336]	@ (80009bc <MCAL_I2C_Init+0x180>)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4614      	mov	r4, r2
 8000870:	461d      	mov	r5, r3
 8000872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000876:	e895 0003 	ldmia.w	r5, {r0, r1}
 800087a:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C1_EN);
 800087e:	2115      	movs	r1, #21
 8000880:	2002      	movs	r0, #2
 8000882:	f000 fb27 	bl	8000ed4 <MRCC_u8EnablePeripheralClock>
 8000886:	e00e      	b.n	80008a6 <MCAL_I2C_Init+0x6a>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8000888:	4b4c      	ldr	r3, [pc, #304]	@ (80009bc <MCAL_I2C_Init+0x180>)
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	f103 0418 	add.w	r4, r3, #24
 8000890:	4615      	mov	r5, r2
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0003 	ldmia.w	r5, {r0, r1}
 800089a:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_u8EnablePeripheralClock(RCC_APB1, RCC_APB1_I2C2_EN);
 800089e:	2116      	movs	r1, #22
 80008a0:	2002      	movs	r0, #2
 80008a2:	f000 fb17 	bl	8000ed4 <MRCC_u8EnablePeripheralClock>
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	88db      	ldrh	r3, [r3, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d178      	bne.n	80009a0 <MCAL_I2C_Init+0x164>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80008b4:	8afb      	ldrh	r3, [r7, #22]
 80008b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008ba:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 80008bc:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <MCAL_I2C_Init+0x178>)
 80008be:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4a3f      	ldr	r2, [pc, #252]	@ (80009c0 <MCAL_I2C_Init+0x184>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	0c9b      	lsrs	r3, r3, #18
 80008ca:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 80008cc:	8afa      	ldrh	r2, [r7, #22]
 80008ce:	8abb      	ldrh	r3, [r7, #20]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80008d4:	8afa      	ldrh	r2, [r7, #22]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 0201 	bic.w	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a35      	ldr	r2, [pc, #212]	@ (80009c4 <MCAL_I2C_Init+0x188>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d004      	beq.n	80008fe <MCAL_I2C_Init+0xc2>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a33      	ldr	r2, [pc, #204]	@ (80009c8 <MCAL_I2C_Init+0x18c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d112      	bne.n	8000924 <MCAL_I2C_Init+0xe8>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 800090c:	8afa      	ldrh	r2, [r7, #22]
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	4313      	orrs	r3, r2
 8000912:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8000914:	8afa      	ldrh	r2, [r7, #22]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 800091a:	8abb      	ldrh	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	8a1a      	ldrh	r2, [r3, #16]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	8a5b      	ldrh	r3, [r3, #18]
 8000932:	4313      	orrs	r3, r2
 8000934:	b29a      	uxth	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	88db      	ldrh	r3, [r3, #6]
 800093a:	4313      	orrs	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	4313      	orrs	r3, r2
 8000944:	b29a      	uxth	r2, r3
 8000946:	8afb      	ldrh	r3, [r7, #22]
 8000948:	4313      	orrs	r3, r2
 800094a:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 800094c:	8afa      	ldrh	r2, [r7, #22]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 8000952:	2300      	movs	r3, #0
 8000954:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	891b      	ldrh	r3, [r3, #8]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d10d      	bne.n	800097a <MCAL_I2C_Init+0x13e>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 800095e:	2301      	movs	r3, #1
 8000960:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	899b      	ldrh	r3, [r3, #12]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b21a      	sxth	r2, r3
 800096a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 800097a:	2300      	movs	r3, #0
 800097c:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	895b      	ldrh	r3, [r3, #10]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	b21a      	sxth	r2, r3
 8000986:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800098a:	4313      	orrs	r3, r2
 800098c:	b21b      	sxth	r3, r3
 800098e:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	89da      	ldrh	r2, [r3, #14]
 8000994:	8afb      	ldrh	r3, [r7, #22]
 8000996:	4313      	orrs	r3, r2
 8000998:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bdb0      	pop	{r4, r5, r7, pc}
 80009b4:	007a1200 	.word	0x007a1200
 80009b8:	40005400 	.word	0x40005400
 80009bc:	2000001c 	.word	0x2000001c
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	0007a120 	.word	0x0007a120
 80009c8:	000186a0 	.word	0x000186a0

080009cc <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <MCAL_I2C_RESET+0x18>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <MCAL_I2C_RESET+0x18>)
 80009d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40005400 	.word	0x40005400

080009e8 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_u8DisableInterrupt(NVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d10a      	bne.n	8000a0e <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN6, GPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80009f8:	220e      	movs	r2, #14
 80009fa:	2106      	movs	r1, #6
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fe39 	bl	8000674 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN7, GPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8000a02:	220e      	movs	r2, #14
 8000a04:	2107      	movs	r1, #7
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fe34 	bl	8000674 <MGPIO_u8SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8000a0c:	e00d      	b.n	8000a2a <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a09      	ldr	r2, [pc, #36]	@ (8000a38 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d109      	bne.n	8000a2a <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a16:	220d      	movs	r2, #13
 8000a18:	210a      	movs	r1, #10
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fe2a 	bl	8000674 <MGPIO_u8SetPinMode>
		MGPIO_u8SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a20:	220d      	movs	r2, #13
 8000a22:	210b      	movs	r1, #11
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe25 	bl	8000674 <MGPIO_u8SetPinMode>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40005800 	.word	0x40005800

08000a3c <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000a50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a54:	461a      	mov	r2, r3
 8000a56:	2101      	movs	r1, #1
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f8cd 	bl	8000bf8 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a5e:	bf00      	nop
 8000a60:	2101      	movs	r1, #1
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f000 f8f0 	bl	8000c48 <I2C_GetFlagStatus>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f8      	beq.n	8000a60 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8000a6e:	897b      	ldrh	r3, [r7, #10]
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f000 f96d 	bl	8000d54 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a7a:	bf00      	nop
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 f8e2 	bl	8000c48 <I2C_GetFlagStatus>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f8      	beq.n	8000a7c <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a8a:	bf00      	nop
 8000a8c:	4919      	ldr	r1, [pc, #100]	@ (8000af4 <MCAL_I2C_MASTER_TX+0xb8>)
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f000 f8da 	bl	8000c48 <I2C_GetFlagStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e018      	b.n	8000ad2 <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000aa0:	bf00      	nop
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f000 f8cf 	bl	8000c48 <I2C_GetFlagStatus>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f8      	beq.n	8000aa2 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f000 f9a0 	bl	8000dfe <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d8e2      	bhi.n	8000aa0 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8000ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f000 f954 	bl	8000d92 <I2C_GenerateSTOP>
	}
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	00070080 	.word	0x00070080

08000af8 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	460b      	mov	r3, r1
 8000b06:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4a39      	ldr	r2, [pc, #228]	@ (8000bf0 <MCAL_I2C_MASTER_RX+0xf8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000b20:	461a      	mov	r2, r3
 8000b22:	2101      	movs	r1, #1
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f867 	bl	8000bf8 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000b2a:	bf00      	nop
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 f88a 	bl	8000c48 <I2C_GetFlagStatus>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f8      	beq.n	8000b2c <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8000b3a:	897b      	ldrh	r3, [r7, #10]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4619      	mov	r1, r3
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f907 	bl	8000d54 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000b46:	bf00      	nop
 8000b48:	2102      	movs	r1, #2
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f000 f87c 	bl	8000c48 <I2C_GetFlagStatus>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8000b56:	2101      	movs	r1, #1
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f000 f935 	bl	8000dc8 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d01c      	beq.n	8000bb6 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e011      	b.n	8000ba8 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b84:	bf00      	nop
 8000b86:	2103      	movs	r1, #3
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f85d 	bl	8000c48 <I2C_GetFlagStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f8      	beq.n	8000b86 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6919      	ldr	r1, [r3, #16]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	daea      	bge.n	8000b84 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f909 	bl	8000dc8 <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 8000bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f8e6 	bl	8000d92 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000bc6:	7cfa      	ldrb	r2, [r7, #19]
 8000bc8:	490a      	ldr	r1, [pc, #40]	@ (8000bf4 <MCAL_I2C_MASTER_RX+0xfc>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3310      	adds	r3, #16
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bdc:	d103      	bne.n	8000be6 <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8000bde:	2101      	movs	r1, #1
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 f8f1 	bl	8000dc8 <I2C_ACKnowledgeConfig>
	}
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	2000001c 	.word	0x2000001c

08000bf8 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
 8000c04:	4613      	mov	r3, r2
 8000c06:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8000c08:	78bb      	ldrb	r3, [r7, #2]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d007      	beq.n	8000c1e <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000c0e:	bf00      	nop
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f818 	bl	8000c48 <I2C_GetFlagStatus>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f8      	bne.n	8000c10 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000c30:	e005      	b.n	8000c3e <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d811      	bhi.n	8000c8c <I2C_GetFlagStatus+0x44>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d86a      	bhi.n	8000d44 <I2C_GetFlagStatus+0xfc>
 8000c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c74 <I2C_GetFlagStatus+0x2c>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c97 	.word	0x08000c97
 8000c78:	08000caf 	.word	0x08000caf
 8000c7c:	08000cc7 	.word	0x08000cc7
 8000c80:	08000d2d 	.word	0x08000d2d
 8000c84:	08000d15 	.word	0x08000d15
 8000c88:	08000d15 	.word	0x08000d15
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	4a30      	ldr	r2, [pc, #192]	@ (8000d50 <I2C_GetFlagStatus+0x108>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d024      	beq.n	8000cde <I2C_GetFlagStatus+0x96>
 8000c94:	e056      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000ca6:	e04d      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
		break;
 8000cac:	e04a      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000cbe:	e041      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	75fb      	strb	r3, [r7, #23]
		break;
 8000cc4:	e03e      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8000cd6:	e035      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
		break;
 8000cdc:	e032      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000cfa:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	4013      	ands	r3, r2
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d102      	bne.n	8000d0e <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000d0c:	e01a      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]
		break;
 8000d12:	e017      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8000d20:	2301      	movs	r3, #1
 8000d22:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000d24:	e00e      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	75fb      	strb	r3, [r7, #23]
		break;
 8000d2a:	e00b      	b.n	8000d44 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000d3c:	e001      	b.n	8000d42 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
		break;
 8000d42:	bf00      	nop
	}
	}
	return bitstatus;
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	00070080 	.word	0x00070080

08000d54 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000d6a:	787b      	ldrb	r3, [r7, #1]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d004      	beq.n	8000d7a <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	e003      	b.n	8000d82 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	f023 0301 	bic.w	r3, r3, #1
 8000d80:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000db0:	e005      	b.n	8000dbe <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8000de6:	e005      	b.n	8000df4 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <delay_ms>:

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e002      	b.n	8000e1e <delay_ms+0x20>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3f8      	bcc.n	8000e18 <delay_ms+0x1a>
		// Do nothing
	}
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <MRCC_u8InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_u8InitClock(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_HSI_CLOCK
        //Enable High-Speed Internal Clock
        SET_BIT(RCC_CR, RCC_CR_HSION);
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]
        //Wait until HSI Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_HSIRDY) == 0);
 8000e44:	bf00      	nop
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <MRCC_u8InitClock+0x12>

        //Set System Clock Source to be HSI Clock
        CLR_BIT(RCC_CFGR, RCC_CFGR_SW_START);
 8000e52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]
        CLR_BIT(RCC_CFGR, (RCC_CFGR_SW_START + 1));
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e64:	f023 0302 	bic.w	r3, r3, #2
 8000e68:	6013      	str	r3, [r2, #0]

        //Enable Phase-locked loop Clock
        SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e74:	6013      	str	r3, [r2, #0]
        //Wait until PLL Clock is ready
        while(GET_BIT(RCC_CR, RCC_CR_PLLRDY) == 0);
 8000e76:	bf00      	nop
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MRCC_u8InitClock+0x98>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f9      	beq.n	8000e78 <MRCC_u8InitClock+0x44>

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    RCC_CFGR &= ~(((uint32)0b1111) << (RCC_CFGR_HPRE_START));
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e8e:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((uint32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_HPRE_START));
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((uint32)0b111) << (RCC_CFGR_PPRE1_START));
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000e9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ea2:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((uint32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE1_START));
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6013      	str	r3, [r2, #0]
    
    RCC_CFGR &= ~(((uint32)0b111) << (RCC_CFGR_PPRE2_START));
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000eb2:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000eb6:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (((uint32)(RCC_AHB_PRESCALAR)) << (RCC_CFGR_PPRE2_START));
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <MRCC_u8InitClock+0x9c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6013      	str	r3, [r2, #0]
    return E_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021004 	.word	0x40021004

08000ed4 <MRCC_u8EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_u8EnablePeripheralClock(uint8 Copy_u8BusID, uint8 Copy_u8Peripheral)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_u8ErrorCheck = E_NOT_OK;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
    switch(Copy_u8BusID)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d020      	beq.n	8000f30 <MRCC_u8EnablePeripheralClock+0x5c>
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	dc2b      	bgt.n	8000f4a <MRCC_u8EnablePeripheralClock+0x76>
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d002      	beq.n	8000efc <MRCC_u8EnablePeripheralClock+0x28>
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d00d      	beq.n	8000f16 <MRCC_u8EnablePeripheralClock+0x42>
 8000efa:	e026      	b.n	8000f4a <MRCC_u8EnablePeripheralClock+0x76>
    {
        case RCC_AHB:
        {
            SET_BIT(RCC_AHBENR, Copy_u8Peripheral);
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MRCC_u8EnablePeripheralClock+0x88>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <MRCC_u8EnablePeripheralClock+0x88>)
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
            break;
 8000f14:	e01c      	b.n	8000f50 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB1:
        {
            SET_BIT(RCC_APB1ENR, Copy_u8Peripheral);
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MRCC_u8EnablePeripheralClock+0x8c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4611      	mov	r1, r2
 8000f24:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <MRCC_u8EnablePeripheralClock+0x8c>)
 8000f26:	430b      	orrs	r3, r1
 8000f28:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
            break;
 8000f2e:	e00f      	b.n	8000f50 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        case RCC_APB2:
        {
            SET_BIT(RCC_APB2ENR, Copy_u8Peripheral);
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MRCC_u8EnablePeripheralClock+0x90>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <MRCC_u8EnablePeripheralClock+0x90>)
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6013      	str	r3, [r2, #0]
            Loc_u8ErrorCheck = E_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
            break;
 8000f48:	e002      	b.n	8000f50 <MRCC_u8EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_u8ErrorCheck = E_NOT_OK;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
            break;
 8000f4e:	bf00      	nop
        }
    }
    return Loc_u8ErrorCheck;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40021014 	.word	0x40021014
 8000f60:	4002101c 	.word	0x4002101c
 8000f64:	40021018 	.word	0x40021018

08000f68 <MSTK_vStopTimer>:
{
	SET_BIT(STK->CTRL, STK_ENABLE);
}

void MSTK_vStopTimer(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	CLR_BIT(STK->CTRL, STK_ENABLE);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <MSTK_vStopTimer+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <MSTK_vStopTimer+0x18>)
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <SysTick_Handler>:
{
	return  (STK->VAL) ;
}

void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	if(G_vCallBack != 0)
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <SysTick_Handler+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <SysTick_Handler+0x12>
	{
		G_vCallBack();
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SysTick_Handler+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4798      	blx	r3
	}
	if(G_u8Flag == SINGLE)
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SysTick_Handler+0x2c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <SysTick_Handler+0x24>
	{
		G_u8Flag = PERIODIC;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Handler+0x2c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
		MSTK_vStopTimer();
 8000fa4:	f7ff ffe0 	bl	8000f68 <MSTK_vStopTimer>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000050 	.word	0x20000050
 8000fb0:	2000004c 	.word	0x2000004c

08000fb4 <main>:
uint8 ch2[2];
uint8 ch[3];
float32 mv;

int main()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	MRCC_u8InitClock();
 8000fba:	f7ff ff3b 	bl	8000e34 <MRCC_u8InitClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_IOPB_EN);
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff ff87 	bl	8000ed4 <MRCC_u8EnablePeripheralClock>
	MRCC_u8EnablePeripheralClock(RCC_APB2, RCC_APB2_AFIO_EN);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff ff83 	bl	8000ed4 <MRCC_u8EnablePeripheralClock>

	adc_init();
 8000fce:	f7ff fa91 	bl	80004f4 <adc_init>
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	f36f 13c7 	bfc	r3, #7, #1
 8000fd8:	717b      	strb	r3, [r7, #5]
	config.MUX = MUX_AIN0_GND;
 8000fda:	797b      	ldrb	r3, [r7, #5]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	f362 1306 	bfi	r3, r2, #4, #3
 8000fe2:	717b      	strb	r3, [r7, #5]
	config.PGA = PGA_4_096;
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f362 0343 	bfi	r3, r2, #1, #3
 8000fec:	717b      	strb	r3, [r7, #5]
	config.MODE = MODE_CONT_CONVERSION;
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	f36f 0300 	bfc	r3, #0, #1
 8000ff4:	717b      	strb	r3, [r7, #5]
	config.DR = DR_128SPS;
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	f362 1347 	bfi	r3, r2, #5, #3
 8000ffe:	713b      	strb	r3, [r7, #4]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	f36f 1304 	bfc	r3, #4, #1
 8001006:	713b      	strb	r3, [r7, #4]
	config.COMP_POL = COMP_POL_DEFAULT;
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	f36f 03c3 	bfc	r3, #3, #1
 800100e:	713b      	strb	r3, [r7, #4]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	f36f 0382 	bfc	r3, #2, #1
 8001016:	713b      	strb	r3, [r7, #4]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	f043 0303 	orr.w	r3, r3, #3
 800101e:	713b      	strb	r3, [r7, #4]

	while(1)
	{
		mv = adc_read_mv(config);
 8001020:	88b8      	ldrh	r0, [r7, #4]
 8001022:	f7ff fa8f 	bl	8000544 <adc_read_mv>
 8001026:	4603      	mov	r3, r0
 8001028:	4a03      	ldr	r2, [pc, #12]	@ (8001038 <main+0x84>)
 800102a:	6013      	str	r3, [r2, #0]
		delay_ms(100);
 800102c:	2064      	movs	r0, #100	@ 0x64
 800102e:	f7ff fee6 	bl	8000dfe <delay_ms>
		mv = adc_read_mv(config);
 8001032:	bf00      	nop
 8001034:	e7f4      	b.n	8001020 <main+0x6c>
 8001036:	bf00      	nop
 8001038:	20000054 	.word	0x20000054

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106a:	f000 f811 	bl	8001090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff ffa1 	bl	8000fb4 <main>

08001072 <LoopForever>:

LoopForever:
  b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001080:	080010f8 	.word	0x080010f8
  ldr r2, =_sbss
 8001084:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001088:	20000058 	.word	0x20000058

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <__libc_init_array>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	2600      	movs	r6, #0
 8001094:	4d0c      	ldr	r5, [pc, #48]	@ (80010c8 <__libc_init_array+0x38>)
 8001096:	4c0d      	ldr	r4, [pc, #52]	@ (80010cc <__libc_init_array+0x3c>)
 8001098:	1b64      	subs	r4, r4, r5
 800109a:	10a4      	asrs	r4, r4, #2
 800109c:	42a6      	cmp	r6, r4
 800109e:	d109      	bne.n	80010b4 <__libc_init_array+0x24>
 80010a0:	f000 f81a 	bl	80010d8 <_init>
 80010a4:	2600      	movs	r6, #0
 80010a6:	4d0a      	ldr	r5, [pc, #40]	@ (80010d0 <__libc_init_array+0x40>)
 80010a8:	4c0a      	ldr	r4, [pc, #40]	@ (80010d4 <__libc_init_array+0x44>)
 80010aa:	1b64      	subs	r4, r4, r5
 80010ac:	10a4      	asrs	r4, r4, #2
 80010ae:	42a6      	cmp	r6, r4
 80010b0:	d105      	bne.n	80010be <__libc_init_array+0x2e>
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
 80010b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010b8:	4798      	blx	r3
 80010ba:	3601      	adds	r6, #1
 80010bc:	e7ee      	b.n	800109c <__libc_init_array+0xc>
 80010be:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c2:	4798      	blx	r3
 80010c4:	3601      	adds	r6, #1
 80010c6:	e7f2      	b.n	80010ae <__libc_init_array+0x1e>
 80010c8:	080010f0 	.word	0x080010f0
 80010cc:	080010f0 	.word	0x080010f0
 80010d0:	080010f0 	.word	0x080010f0
 80010d4:	080010f4 	.word	0x080010f4

080010d8 <_init>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr

080010e4 <_fini>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr
