
test20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080011b4  080011b4  000111b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011bc  080011bc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080011bc  080011bc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011bc  080011bc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080011c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  080011e4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080011e4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f45  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d8b  00000000  00000000  00022fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000181a  00000000  00000000  00023d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003a8  00000000  00000000  00025578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000320  00000000  00000000  00025920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001d78  00000000  00000000  00025c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000294b  00000000  00000000  000279b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000dd6c  00000000  00000000  0002a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c1c  00000000  00000000  00038070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	0800119c 	.word	0x0800119c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	0800119c 	.word	0x0800119c

08000170 <eeprom_init>:
 */

#include "I2C_Slave_EEPROM.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <eeprom_init+0x48>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8000188:	2300      	movs	r3, #0
 800018a:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8000190:	480a      	ldr	r0, [pc, #40]	; (80001bc <eeprom_init+0x4c>)
 8000192:	f000 fc2d 	bl	80009f0 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4808      	ldr	r0, [pc, #32]	; (80001bc <eeprom_init+0x4c>)
 800019c:	f000 fb52 	bl	8000844 <MCAL_I2C_Init>
	MCAL_I2C_RESET();
 80001a0:	f000 fc18 	bl	80009d4 <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 80001a4:	463b      	mov	r3, r7
 80001a6:	4619      	mov	r1, r3
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <eeprom_init+0x4c>)
 80001aa:	f000 fb4b 	bl	8000844 <MCAL_I2C_Init>


}
 80001ae:	bf00      	nop
 80001b0:	3718      	adds	r7, #24
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	000186a0 	.word	0x000186a0
 80001bc:	40005400 	.word	0x40005400

080001c0 <eeprom_write_Nbytes>:
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b0c8      	sub	sp, #288	; 0x120
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001ce:	6018      	str	r0, [r3, #0]
 80001d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001d8:	6019      	str	r1, [r3, #0]
 80001da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001de:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001e2:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 80001e4:	2300      	movs	r3, #0
 80001e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MISRA C++ 2008, 18-4-1 - Dynamic heap memory allocation shall not be used
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256];
	buffer[0] = (uint8)(Memory_address>>8) ; 	//upper byte Memory Address
 80001ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	0a1b      	lsrs	r3, r3, #8
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000200:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8)Memory_address ; 	//lower byte Memory Address
 8000202:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000206:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	b2da      	uxtb	r2, r3
 800020e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000216:	705a      	strb	r2, [r3, #1]

	for (i=2 ; i<(Data_Length+2) ; i++ )
 8000218:	2302      	movs	r3, #2
 800021a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800021e:	e015      	b.n	800024c <eeprom_write_Nbytes+0x8c>
	{buffer[i] = bytes[i-2] ;}
 8000220:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000224:	3b02      	subs	r3, #2
 8000226:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800022a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800022e:	6812      	ldr	r2, [r2, #0]
 8000230:	441a      	add	r2, r3
 8000232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000236:	7811      	ldrb	r1, [r2, #0]
 8000238:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800023c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000240:	54d1      	strb	r1, [r2, r3]
	for (i=2 ; i<(Data_Length+2) ; i++ )
 8000242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000246:	3301      	adds	r3, #1
 8000248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800024c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000250:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800025c:	429a      	cmp	r2, r3
 800025e:	dadf      	bge.n	8000220 <eeprom_write_Nbytes+0x60>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+2), With_Stop, Start);
 8000260:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000264:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	3302      	adds	r3, #2
 800026c:	4619      	mov	r1, r3
 800026e:	f107 0214 	add.w	r2, r7, #20
 8000272:	2300      	movs	r3, #0
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	2300      	movs	r3, #0
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	460b      	mov	r3, r1
 800027c:	2150      	movs	r1, #80	; 0x50
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <eeprom_write_Nbytes+0xd0>)
 8000280:	f000 fbe0 	bl	8000a44 <MCAL_I2C_MASTER_TX>

	return 0 ;
 8000284:	2300      	movs	r3, #0
}
 8000286:	4618      	mov	r0, r3
 8000288:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40005400 	.word	0x40005400

08000294 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af02      	add	r7, sp, #8
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	4613      	mov	r3, r2
 80002a0:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = (uint8)(address>>8) ; 	//Upper Memory Address
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8)(address) ; 	//Lower Memory Address
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 2 ,Without_Stop ,Start); //Write Address Only
 80002b0:	f107 0214 	add.w	r2, r7, #20
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2301      	movs	r3, #1
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2302      	movs	r3, #2
 80002be:	2150      	movs	r1, #80	; 0x50
 80002c0:	4808      	ldr	r0, [pc, #32]	; (80002e4 <eeprom_read_byte+0x50>)
 80002c2:	f000 fbbf 	bl	8000a44 <MCAL_I2C_MASTER_TX>

	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start); 			//Read Data
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2201      	movs	r2, #1
 80002ca:	9201      	str	r2, [sp, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	2150      	movs	r1, #80	; 0x50
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <eeprom_read_byte+0x50>)
 80002d6:	f000 fc13 	bl	8000b00 <MCAL_I2C_MASTER_RX>

	return 0 ;
 80002da:	2300      	movs	r3, #0

}
 80002dc:	4618      	mov	r0, r3
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40005400 	.word	0x40005400

080002e8 <ADC1_2_IRQHandler>:
    }
    return Loc_uint8FuncStatus;
}

void ADC1_2_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    if(GET_BIT((ADC[0] -> SR), MADC_SR_EOC_BIT))
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <ADC1_2_IRQHandler+0x44>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d007      	beq.n	800030a <ADC1_2_IRQHandler+0x22>
    {
        if(glbl_EOCCallbackFunc[0] != NULL_PTR)
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <ADC1_2_IRQHandler+0x48>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d011      	beq.n	8000326 <ADC1_2_IRQHandler+0x3e>
        {
            (glbl_EOCCallbackFunc[0])();
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <ADC1_2_IRQHandler+0x48>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
}
 8000308:	e00d      	b.n	8000326 <ADC1_2_IRQHandler+0x3e>
    else if(GET_BIT((ADC[1] -> SR), MADC_SR_EOC_BIT))
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <ADC1_2_IRQHandler+0x44>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d006      	beq.n	8000326 <ADC1_2_IRQHandler+0x3e>
		if(glbl_EOCCallbackFunc[1] != NULL_PTR)
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <ADC1_2_IRQHandler+0x48>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <ADC1_2_IRQHandler+0x3e>
            (glbl_EOCCallbackFunc[1])();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <ADC1_2_IRQHandler+0x48>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000000 	.word	0x20000000
 8000330:	2000003c 	.word	0x2000003c

08000334 <EXTI0_IRQHandler>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
void EXTI0_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[0] != NULL_PTR)
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <EXTI0_IRQHandler+0x24>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d002      	beq.n	8000346 <EXTI0_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[0])();
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI0_IRQHandler+0x24>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 0);
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI0_IRQHandler+0x28>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI0_IRQHandler+0x28>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6153      	str	r3, [r2, #20]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000044 	.word	0x20000044
 800035c:	40010400 	.word	0x40010400

08000360 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[1] != NULL_PTR)
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <EXTI1_IRQHandler+0x24>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <EXTI1_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[1])();
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI1_IRQHandler+0x24>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 1);
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI1_IRQHandler+0x28>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI1_IRQHandler+0x28>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	6153      	str	r3, [r2, #20]
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000044 	.word	0x20000044
 8000388:	40010400 	.word	0x40010400

0800038c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[2] != NULL_PTR)
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <EXTI2_IRQHandler+0x24>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d002      	beq.n	800039e <EXTI2_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[2])();
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI2_IRQHandler+0x24>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 2);
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI2_IRQHandler+0x28>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI2_IRQHandler+0x28>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6153      	str	r3, [r2, #20]
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000044 	.word	0x20000044
 80003b4:	40010400 	.word	0x40010400

080003b8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[3] != NULL_PTR)
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <EXTI3_IRQHandler+0x24>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <EXTI3_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[3])();
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <EXTI3_IRQHandler+0x24>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 3);
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <EXTI3_IRQHandler+0x28>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <EXTI3_IRQHandler+0x28>)
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	6153      	str	r3, [r2, #20]
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000044 	.word	0x20000044
 80003e0:	40010400 	.word	0x40010400

080003e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[4] != NULL_PTR)
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <EXTI4_IRQHandler+0x24>)
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <EXTI4_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[4])();
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <EXTI4_IRQHandler+0x24>)
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 4);
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <EXTI4_IRQHandler+0x28>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <EXTI4_IRQHandler+0x28>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6153      	str	r3, [r2, #20]
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000044 	.word	0x20000044
 800040c:	40010400 	.word	0x40010400

08000410 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 5))
 8000414:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00d      	beq.n	800043c <EXTI9_5_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[5] != NULL_PTR)
 8000420:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <EXTI9_5_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[5])();
 8000428:	4b2e      	ldr	r3, [pc, #184]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 5);
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000434:	f043 0320 	orr.w	r3, r3, #32
 8000438:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
}
 800043a:	e04e      	b.n	80004da <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 6))
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00d      	beq.n	8000464 <EXTI9_5_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[6] != NULL_PTR)
 8000448:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <EXTI9_5_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[6])();
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 6);
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 800045c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000460:	6153      	str	r3, [r2, #20]
}
 8000462:	e03a      	b.n	80004da <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 7))
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00d      	beq.n	800048c <EXTI9_5_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[7] != NULL_PTR)
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <EXTI9_5_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[7])();
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 7);
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	6153      	str	r3, [r2, #20]
}
 800048a:	e026      	b.n	80004da <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 8))
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000494:	2b00      	cmp	r3, #0
 8000496:	d00d      	beq.n	80004b4 <EXTI9_5_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[8] != NULL_PTR)
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 800049a:	6a1b      	ldr	r3, [r3, #32]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <EXTI9_5_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[8])();
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 80004a2:	6a1b      	ldr	r3, [r3, #32]
 80004a4:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 8);
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 80004ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b0:	6153      	str	r3, [r2, #20]
}
 80004b2:	e012      	b.n	80004da <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 9))
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00c      	beq.n	80004da <EXTI9_5_IRQHandler+0xca>
        if(glbl_PEXTICallbackFunctions[9] != NULL_PTR)
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <EXTI9_5_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[9])();
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <EXTI9_5_IRQHandler+0xd4>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004cc:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 9);
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a03      	ldr	r2, [pc, #12]	; (80004e0 <EXTI9_5_IRQHandler+0xd0>)
 80004d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d8:	6153      	str	r3, [r2, #20]
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010400 	.word	0x40010400
 80004e4:	20000044 	.word	0x20000044

080004e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 10))
 80004ec:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00d      	beq.n	8000514 <EXTI15_10_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[10] != NULL_PTR)
 80004f8:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 80004fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <EXTI15_10_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[10])();
 8000500:	4b38      	ldr	r3, [pc, #224]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 8000502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000504:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 10);
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 800050c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000510:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
 8000512:	e062      	b.n	80005da <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 11))
 8000514:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00d      	beq.n	800053c <EXTI15_10_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[11] != NULL_PTR)
 8000520:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 8000522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <EXTI15_10_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[11])();
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 800052a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 11);
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	e04e      	b.n	80005da <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 12))
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00d      	beq.n	8000564 <EXTI15_10_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[12] != NULL_PTR)
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <EXTI15_10_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[12])();
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 12);
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 800055c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	e03a      	b.n	80005da <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 13))
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00d      	beq.n	800058c <EXTI15_10_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[13] != NULL_PTR)
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <EXTI15_10_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[13])();
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 800057a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057c:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 13);
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 8000584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	e026      	b.n	80005da <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 14))
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00d      	beq.n	80005b4 <EXTI15_10_IRQHandler+0xcc>
        if(glbl_PEXTICallbackFunctions[14] != NULL_PTR)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 800059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <EXTI15_10_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[14])();
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 80005a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a4:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 14);
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	e012      	b.n	80005da <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 15))
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00c      	beq.n	80005da <EXTI15_10_IRQHandler+0xf2>
        if(glbl_PEXTICallbackFunctions[15] != NULL_PTR)
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 80005c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <EXTI15_10_IRQHandler+0xe6>
            (glbl_PEXTICallbackFunctions[15])();
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <EXTI15_10_IRQHandler+0xfc>)
 80005ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005cc:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 15);
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <EXTI15_10_IRQHandler+0xf8>)
 80005d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010400 	.word	0x40010400
 80005e4:	20000044 	.word	0x20000044

080005e8 <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80005fa:	2301      	movs	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b02      	cmp	r3, #2
 8000602:	f000 8081 	beq.w	8000708 <MGPIO_SetPinMode+0x120>
 8000606:	2b02      	cmp	r3, #2
 8000608:	f300 80ba 	bgt.w	8000780 <MGPIO_SetPinMode+0x198>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <MGPIO_SetPinMode+0x2e>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d03d      	beq.n	8000690 <MGPIO_SetPinMode+0xa8>
 8000614:	e0b4      	b.n	8000780 <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b07      	cmp	r3, #7
 800061a:	d819      	bhi.n	8000650 <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800061c:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MGPIO_SetPinMode+0x1b4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	210f      	movs	r1, #15
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	43d2      	mvns	r2, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a5b      	ldr	r2, [pc, #364]	; (800079c <MGPIO_SetPinMode+0x1b4>)
 8000630:	400b      	ands	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8000634:	4b59      	ldr	r3, [pc, #356]	; (800079c <MGPIO_SetPinMode+0x1b4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7979      	ldrb	r1, [r7, #5]
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a55      	ldr	r2, [pc, #340]	; (800079c <MGPIO_SetPinMode+0x1b4>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 800064e:	e09a      	b.n	8000786 <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	2b0f      	cmp	r3, #15
 8000654:	f200 8097 	bhi.w	8000786 <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8000658:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <MGPIO_SetPinMode+0x1b8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	3a08      	subs	r2, #8
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	210f      	movs	r1, #15
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	43d2      	mvns	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <MGPIO_SetPinMode+0x1b8>)
 800066e:	400b      	ands	r3, r1
 8000670:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8000672:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <MGPIO_SetPinMode+0x1b8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	7979      	ldrb	r1, [r7, #5]
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	3a08      	subs	r2, #8
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	fa01 f202 	lsl.w	r2, r1, r2
 8000682:	4611      	mov	r1, r2
 8000684:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <MGPIO_SetPinMode+0x1b8>)
 8000686:	430b      	orrs	r3, r1
 8000688:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
            break;
 800068e:	e07a      	b.n	8000786 <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	2b07      	cmp	r3, #7
 8000694:	d819      	bhi.n	80006ca <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MGPIO_SetPinMode+0x1bc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	210f      	movs	r1, #15
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a3e      	ldr	r2, [pc, #248]	; (80007a4 <MGPIO_SetPinMode+0x1bc>)
 80006aa:	400b      	ands	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MGPIO_SetPinMode+0x1bc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7979      	ldrb	r1, [r7, #5]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a39      	ldr	r2, [pc, #228]	; (80007a4 <MGPIO_SetPinMode+0x1bc>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80006c8:	e05f      	b.n	800078a <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d85c      	bhi.n	800078a <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80006d0:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <MGPIO_SetPinMode+0x1c0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	79ba      	ldrb	r2, [r7, #6]
 80006d6:	3a08      	subs	r2, #8
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	210f      	movs	r1, #15
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <MGPIO_SetPinMode+0x1c0>)
 80006e6:	400b      	ands	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MGPIO_SetPinMode+0x1c0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7979      	ldrb	r1, [r7, #5]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	3a08      	subs	r2, #8
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <MGPIO_SetPinMode+0x1c0>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
            break;
 8000706:	e040      	b.n	800078a <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d819      	bhi.n	8000742 <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MGPIO_SetPinMode+0x1c4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	79ba      	ldrb	r2, [r7, #6]
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	210f      	movs	r1, #15
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MGPIO_SetPinMode+0x1c4>)
 8000722:	400b      	ands	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MGPIO_SetPinMode+0x1c4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	7979      	ldrb	r1, [r7, #5]
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	4611      	mov	r1, r2
 8000736:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <MGPIO_SetPinMode+0x1c4>)
 8000738:	430b      	orrs	r3, r1
 800073a:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8000740:	e025      	b.n	800078e <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d822      	bhi.n	800078e <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MGPIO_SetPinMode+0x1c8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	79ba      	ldrb	r2, [r7, #6]
 800074e:	3a08      	subs	r2, #8
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	210f      	movs	r1, #15
 8000754:	fa01 f202 	lsl.w	r2, r1, r2
 8000758:	43d2      	mvns	r2, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <MGPIO_SetPinMode+0x1c8>)
 800075e:	400b      	ands	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MGPIO_SetPinMode+0x1c8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	7979      	ldrb	r1, [r7, #5]
 8000768:	79ba      	ldrb	r2, [r7, #6]
 800076a:	3a08      	subs	r2, #8
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <MGPIO_SetPinMode+0x1c8>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
            break;
 800077e:	e006      	b.n	800078e <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
            break;
 8000784:	e004      	b.n	8000790 <MGPIO_SetPinMode+0x1a8>
            break;
 8000786:	bf00      	nop
 8000788:	e002      	b.n	8000790 <MGPIO_SetPinMode+0x1a8>
            break;
 800078a:	bf00      	nop
 800078c:	e000      	b.n	8000790 <MGPIO_SetPinMode+0x1a8>
            break;
 800078e:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40010800 	.word	0x40010800
 80007a0:	40010804 	.word	0x40010804
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	40010c04 	.word	0x40010c04
 80007ac:	40011000 	.word	0x40011000
 80007b0:	40011004 	.word	0x40011004

080007b4 <TIM2_IRQHandler>:
    }
    return Loc_uint8FuncStatus;
}

void TIM2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[0] != NULL_PTR)
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <TIM2_IRQHandler+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <TIM2_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[0])();
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <TIM2_IRQHandler+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[0] -> SR), MGPTMR_SR_UIF_BIT);
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <TIM2_IRQHandler+0x2c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691a      	ldr	r2, [r3, #16]
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <TIM2_IRQHandler+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0201 	bic.w	r2, r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000094 	.word	0x20000094
 80007e0:	20000008 	.word	0x20000008

080007e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[1] != NULL_PTR)
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <TIM3_IRQHandler+0x28>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <TIM3_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[1])();
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <TIM3_IRQHandler+0x28>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[1] -> SR), MGPTMR_SR_UIF_BIT);
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <TIM3_IRQHandler+0x2c>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <TIM3_IRQHandler+0x2c>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f022 0201 	bic.w	r2, r2, #1
 8000804:	611a      	str	r2, [r3, #16]
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094
 8000810:	20000008 	.word	0x20000008

08000814 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[2] != NULL_PTR)
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <TIM4_IRQHandler+0x28>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <TIM4_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[2])();
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <TIM4_IRQHandler+0x28>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[2] -> SR), MGPTMR_SR_UIF_BIT);
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <TIM4_IRQHandler+0x2c>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	691a      	ldr	r2, [r3, #16]
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <TIM4_IRQHandler+0x2c>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f022 0201 	bic.w	r2, r2, #1
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	20000008 	.word	0x20000008

08000844 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000844:	b5b0      	push	{r4, r5, r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	82fb      	strh	r3, [r7, #22]
 8000852:	2300      	movs	r3, #0
 8000854:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 8000856:	4b59      	ldr	r3, [pc, #356]	; (80009bc <MCAL_I2C_Init+0x178>)
 8000858:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 800085a:	2300      	movs	r3, #0
 800085c:	81fb      	strh	r3, [r7, #14]

	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800085e:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <MCAL_I2C_Init+0x17c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a57      	ldr	r2, [pc, #348]	; (80009c0 <MCAL_I2C_Init+0x17c>)
 8000864:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000868:	6013      	str	r3, [r2, #0]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a54      	ldr	r2, [pc, #336]	; (80009c0 <MCAL_I2C_Init+0x17c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10e      	bne.n	8000890 <MCAL_I2C_Init+0x4c>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8000872:	4a54      	ldr	r2, [pc, #336]	; (80009c4 <MCAL_I2C_Init+0x180>)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	4614      	mov	r4, r2
 8000878:	461d      	mov	r5, r3
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000882:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 8000886:	2115      	movs	r1, #21
 8000888:	2002      	movs	r0, #2
 800088a:	f000 fb1f 	bl	8000ecc <MRCC_EnablePeripheralClock>
 800088e:	e00e      	b.n	80008ae <MCAL_I2C_Init+0x6a>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8000890:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <MCAL_I2C_Init+0x180>)
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	f103 0418 	add.w	r4, r3, #24
 8000898:	4615      	mov	r5, r2
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a2:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 80008a6:	2116      	movs	r1, #22
 80008a8:	2002      	movs	r0, #2
 80008aa:	f000 fb0f 	bl	8000ecc <MRCC_EnablePeripheralClock>
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	88db      	ldrh	r3, [r3, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d178      	bne.n	80009a8 <MCAL_I2C_Init+0x164>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 80008bc:	8afb      	ldrh	r3, [r7, #22]
 80008be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008c2:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 80008c4:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <MCAL_I2C_Init+0x178>)
 80008c6:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MCAL_I2C_Init+0x184>)
 80008cc:	fba2 2303 	umull	r2, r3, r2, r3
 80008d0:	0c9b      	lsrs	r3, r3, #18
 80008d2:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 80008d4:	8afa      	ldrh	r2, [r7, #22]
 80008d6:	8abb      	ldrh	r3, [r7, #20]
 80008d8:	4313      	orrs	r3, r2
 80008da:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 80008dc:	8afa      	ldrh	r2, [r7, #22]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f023 0201 	bic.w	r2, r3, #1
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a35      	ldr	r2, [pc, #212]	; (80009cc <MCAL_I2C_Init+0x188>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d004      	beq.n	8000906 <MCAL_I2C_Init+0xc2>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a33      	ldr	r2, [pc, #204]	; (80009d0 <MCAL_I2C_Init+0x18c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d112      	bne.n	800092c <MCAL_I2C_Init+0xe8>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8000914:	8afa      	ldrh	r2, [r7, #22]
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	4313      	orrs	r3, r2
 800091a:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 800091c:	8afa      	ldrh	r2, [r7, #22]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000922:	8abb      	ldrh	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	8a1a      	ldrh	r2, [r3, #16]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	8a5b      	ldrh	r3, [r3, #18]
 800093a:	4313      	orrs	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	4313      	orrs	r3, r2
 8000944:	b29a      	uxth	r2, r3
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	889b      	ldrh	r3, [r3, #4]
 800094a:	4313      	orrs	r3, r2
 800094c:	b29a      	uxth	r2, r3
 800094e:	8afb      	ldrh	r3, [r7, #22]
 8000950:	4313      	orrs	r3, r2
 8000952:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8000954:	8afa      	ldrh	r2, [r7, #22]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 800095a:	2300      	movs	r3, #0
 800095c:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	891b      	ldrh	r3, [r3, #8]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10d      	bne.n	8000982 <MCAL_I2C_Init+0x13e>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 8000966:	2301      	movs	r3, #1
 8000968:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	899b      	ldrh	r3, [r3, #12]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	b21a      	sxth	r2, r3
 8000972:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 800097c:	8afa      	ldrh	r2, [r7, #22]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 8000982:	2300      	movs	r3, #0
 8000984:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	895b      	ldrh	r3, [r3, #10]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b21a      	sxth	r2, r3
 800098e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000992:	4313      	orrs	r3, r2
 8000994:	b21b      	sxth	r3, r3
 8000996:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	89da      	ldrh	r2, [r3, #14]
 800099c:	8afb      	ldrh	r3, [r7, #22]
 800099e:	4313      	orrs	r3, r2
 80009a0:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f043 0201 	orr.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bdb0      	pop	{r4, r5, r7, pc}
 80009bc:	007a1200 	.word	0x007a1200
 80009c0:	40005400 	.word	0x40005400
 80009c4:	200000a0 	.word	0x200000a0
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	0007a120 	.word	0x0007a120
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <MCAL_I2C_RESET+0x18>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <MCAL_I2C_RESET+0x18>)
 80009de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40005400 	.word	0x40005400

080009f0 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d10a      	bne.n	8000a16 <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a00:	220d      	movs	r2, #13
 8000a02:	2106      	movs	r1, #6
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fdef 	bl	80005e8 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a0a:	220d      	movs	r2, #13
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fdea 	bl	80005e8 <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8000a14:	e00d      	b.n	8000a32 <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d109      	bne.n	8000a32 <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a1e:	220d      	movs	r2, #13
 8000a20:	210a      	movs	r1, #10
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fde0 	bl	80005e8 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8000a28:	220d      	movs	r2, #13
 8000a2a:	210b      	movs	r1, #11
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fddb 	bl	80005e8 <MGPIO_SetPinMode>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40005800 	.word	0x40005800

08000a44 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	460b      	mov	r3, r1
 8000a52:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2101      	movs	r1, #1
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 f8cd 	bl	8000c00 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a66:	bf00      	nop
 8000a68:	2101      	movs	r1, #1
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f8f0 	bl	8000c50 <I2C_GetFlagStatus>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8000a76:	897b      	ldrh	r3, [r7, #10]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f96d 	bl	8000d5c <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a82:	bf00      	nop
 8000a84:	2102      	movs	r1, #2
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f8e2 	bl	8000c50 <I2C_GetFlagStatus>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a92:	bf00      	nop
 8000a94:	4919      	ldr	r1, [pc, #100]	; (8000afc <MCAL_I2C_MASTER_TX+0xb8>)
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f8da 	bl	8000c50 <I2C_GetFlagStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f8      	beq.n	8000a94 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e018      	b.n	8000ada <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000aa8:	bf00      	nop
 8000aaa:	2104      	movs	r1, #4
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f8cf 	bl	8000c50 <I2C_GetFlagStatus>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f8      	beq.n	8000aaa <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	105b      	asrs	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 f9a0 	bl	8000e06 <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8e2      	bhi.n	8000aa8 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8000ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000aea:	2101      	movs	r1, #1
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f954 	bl	8000d9a <I2C_GenerateSTOP>
	}
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	00070080 	.word	0x00070080

08000b00 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <MCAL_I2C_MASTER_RX+0xf8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8000b24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f867 	bl	8000c00 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000b32:	bf00      	nop
 8000b34:	2101      	movs	r1, #1
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f000 f88a 	bl	8000c50 <I2C_GetFlagStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f8      	beq.n	8000b34 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8000b42:	897b      	ldrh	r3, [r7, #10]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f907 	bl	8000d5c <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000b4e:	bf00      	nop
 8000b50:	2102      	movs	r1, #2
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f87c 	bl	8000c50 <I2C_GetFlagStatus>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f8      	beq.n	8000b50 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f000 f935 	bl	8000dd0 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d01c      	beq.n	8000bbe <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e011      	b.n	8000bb0 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000b8c:	bf00      	nop
 8000b8e:	2103      	movs	r1, #3
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f85d 	bl	8000c50 <I2C_GetFlagStatus>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f8      	beq.n	8000b8e <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6919      	ldr	r1, [r3, #16]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	daea      	bge.n	8000b8c <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f909 	bl	8000dd0 <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 8000bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f8e6 	bl	8000d9a <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000bce:	7cfa      	ldrb	r2, [r7, #19]
 8000bd0:	490a      	ldr	r1, [pc, #40]	; (8000bfc <MCAL_I2C_MASTER_RX+0xfc>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3310      	adds	r3, #16
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be4:	d103      	bne.n	8000bee <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8000be6:	2101      	movs	r1, #1
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f8f1 	bl	8000dd0 <I2C_ACKnowledgeConfig>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8000c10:	78bb      	ldrb	r3, [r7, #2]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d007      	beq.n	8000c26 <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000c16:	bf00      	nop
 8000c18:	2100      	movs	r1, #0
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f818 	bl	8000c50 <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f8      	bne.n	8000c18 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000c38:	e005      	b.n	8000c46 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d811      	bhi.n	8000c94 <I2C_GetFlagStatus+0x44>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d86a      	bhi.n	8000d4c <I2C_GetFlagStatus+0xfc>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <I2C_GetFlagStatus+0x2c>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c9f 	.word	0x08000c9f
 8000c80:	08000cb7 	.word	0x08000cb7
 8000c84:	08000ccf 	.word	0x08000ccf
 8000c88:	08000d35 	.word	0x08000d35
 8000c8c:	08000d1d 	.word	0x08000d1d
 8000c90:	08000d1d 	.word	0x08000d1d
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <I2C_GetFlagStatus+0x108>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d024      	beq.n	8000ce6 <I2C_GetFlagStatus+0x96>
 8000c9c:	e056      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000cae:	e04d      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]
		break;
 8000cb4:	e04a      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000cc6:	e041      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]
		break;
 8000ccc:	e03e      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <I2C_GetFlagStatus+0x90>
			bitstatus = SET;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8000cde:	e035      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce4:	e032      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d02:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d102      	bne.n	8000d16 <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8000d10:	2301      	movs	r3, #1
 8000d12:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8000d14:	e01a      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]
		break;
 8000d1a:	e017      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000d2c:	e00e      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]
		break;
 8000d32:	e00b      	b.n	8000d4c <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8000d40:	2301      	movs	r3, #1
 8000d42:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8000d44:	e001      	b.n	8000d4a <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]
		break;
 8000d4a:	bf00      	nop
	}
	}
	return bitstatus;
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	00070080 	.word	0x00070080

08000d5c <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000d72:	787b      	ldrb	r3, [r7, #1]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	807b      	strh	r3, [r7, #2]
 8000d80:	e003      	b.n	8000d8a <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000db8:	e005      	b.n	8000dc6 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8000dee:	e005      	b.n	8000dfc <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <delay_ms>:

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e002      	b.n	8000e26 <delay_ms+0x20>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3f8      	bcc.n	8000e20 <delay_ms+0x1a>
		// Do nothing
	}
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MRCC_InitClock+0x88>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <MRCC_InitClock+0x88>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MRCC_InitClock+0x88>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MRCC_InitClock+0x88>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8000e58:	bf00      	nop
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MRCC_InitClock+0x88>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f9      	beq.n	8000e5a <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e78:	f023 0302 	bic.w	r3, r3, #2
 8000e7c:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e88:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000e98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e9c:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000eac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000eb0:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <MRCC_InitClock+0x8c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6013      	str	r3, [r2, #0]

    return E_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021004 	.word	0x40021004

08000ecc <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d020      	beq.n	8000f28 <MRCC_EnablePeripheralClock+0x5c>
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	dc2b      	bgt.n	8000f42 <MRCC_EnablePeripheralClock+0x76>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d002      	beq.n	8000ef4 <MRCC_EnablePeripheralClock+0x28>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d00d      	beq.n	8000f0e <MRCC_EnablePeripheralClock+0x42>
 8000ef2:	e026      	b.n	8000f42 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MRCC_EnablePeripheralClock+0x88>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	79ba      	ldrb	r2, [r7, #6]
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	4611      	mov	r1, r2
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <MRCC_EnablePeripheralClock+0x88>)
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
            break;
 8000f0c:	e01c      	b.n	8000f48 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MRCC_EnablePeripheralClock+0x8c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	79ba      	ldrb	r2, [r7, #6]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <MRCC_EnablePeripheralClock+0x8c>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
            break;
 8000f26:	e00f      	b.n	8000f48 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MRCC_EnablePeripheralClock+0x90>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	4611      	mov	r1, r2
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <MRCC_EnablePeripheralClock+0x90>)
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
            break;
 8000f40:	e002      	b.n	8000f48 <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
            break;
 8000f46:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021014 	.word	0x40021014
 8000f58:	4002101c 	.word	0x4002101c
 8000f5c:	40021018 	.word	0x40021018

08000f60 <RTC_IRQHandler>:
    }

    return Loc_uint8FuncStatus;
}
void RTC_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc != NULL_PTR)
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <RTC_IRQHandler+0x24>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <RTC_IRQHandler+0x1e>
    {
        glbl_PCallbackFunc();
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <RTC_IRQHandler+0x24>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4798      	blx	r3
				CLR_BIT(RTC->CRL, MRTC_CRL_SECF_BIT);
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <RTC_IRQHandler+0x28>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <RTC_IRQHandler+0x28>)
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
    }
    else
    {
        /*Do nothing*/
    }
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000d0 	.word	0x200000d0
 8000f88:	40002800 	.word	0x40002800

08000f8c <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Handler+0x18>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <SysTick_Handler+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000d4 	.word	0x200000d4

08000fa8 <USART1_IRQHandler>:
    return Loc_uint8FuncStatus;
}


void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[0] != NULL_PTR)
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <USART1_IRQHandler+0x38>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <USART1_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[0])();
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <USART1_IRQHandler+0x38>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <USART1_IRQHandler+0x3c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <USART1_IRQHandler+0x3c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc8:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <USART1_IRQHandler+0x3c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <USART1_IRQHandler+0x3c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0220 	bic.w	r2, r2, #32
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	20000014 	.word	0x20000014

08000fe8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	if(Glbl_PRxCompleteFunc[1] != NULL_PTR)
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <USART2_IRQHandler+0x38>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <USART2_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[1])();
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <USART2_IRQHandler+0x38>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <USART2_IRQHandler+0x3c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <USART2_IRQHandler+0x3c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001008:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <USART2_IRQHandler+0x3c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <USART2_IRQHandler+0x3c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f022 0220 	bic.w	r2, r2, #32
 8001018:	601a      	str	r2, [r3, #0]

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000d8 	.word	0x200000d8
 8001024:	20000014 	.word	0x20000014

08001028 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[2] != NULL_PTR)
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <USART3_IRQHandler+0x38>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <USART3_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[2])();
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <USART3_IRQHandler+0x38>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <USART3_IRQHandler+0x3c>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <USART3_IRQHandler+0x3c>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001048:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <USART3_IRQHandler+0x3c>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <USART3_IRQHandler+0x3c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f022 0220 	bic.w	r2, r2, #32
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000d8 	.word	0x200000d8
 8001064:	20000014 	.word	0x20000014

08001068 <main>:
#include "HAL/I2C_EEPROM/I2C_Slave_EEPROM.h"
void delay_ms(uint32 milliseconds);

unsigned char ch2[7] = {0};
void main()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	MRCC_InitClock();
 800106e:	f7ff fee5 	bl	8000e3c <MRCC_InitClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPA_EN);
 8001072:	2102      	movs	r1, #2
 8001074:	2003      	movs	r0, #3
 8001076:	f7ff ff29 	bl	8000ecc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 800107a:	2103      	movs	r1, #3
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff ff25 	bl	8000ecc <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8001082:	2100      	movs	r1, #0
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff ff21 	bl	8000ecc <MRCC_EnablePeripheralClock>

	//Test case 1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <main+0x90>)
 800108c:	463b      	mov	r3, r7
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	6018      	str	r0, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	0c0a      	lsrs	r2, r1, #16
 800109c:	701a      	strb	r2, [r3, #0]


	eeprom_init();
 800109e:	f7ff f867 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xA0,ch1,7);
 80010a2:	463b      	mov	r3, r7
 80010a4:	2207      	movs	r2, #7
 80010a6:	4619      	mov	r1, r3
 80010a8:	20a0      	movs	r0, #160	; 0xa0
 80010aa:	f7ff f889 	bl	80001c0 <eeprom_write_Nbytes>
	delay_ms(20);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f7ff fea9 	bl	8000e06 <delay_ms>
	eeprom_read_byte(0xA1, ch2, 7);
 80010b4:	2207      	movs	r2, #7
 80010b6:	4911      	ldr	r1, [pc, #68]	; (80010fc <main+0x94>)
 80010b8:	20a1      	movs	r0, #161	; 0xa1
 80010ba:	f7ff f8eb 	bl	8000294 <eeprom_read_byte>
	delay_ms(20);
 80010be:	2014      	movs	r0, #20
 80010c0:	f7ff fea1 	bl	8000e06 <delay_ms>

	//Test case 2
	ch1[0] = 0xA;
 80010c4:	230a      	movs	r3, #10
 80010c6:	703b      	strb	r3, [r7, #0]
	ch1[1] = 0xB;
 80010c8:	230b      	movs	r3, #11
 80010ca:	707b      	strb	r3, [r7, #1]
	ch1[2] = 0xC;
 80010cc:	230c      	movs	r3, #12
 80010ce:	70bb      	strb	r3, [r7, #2]
	ch1[3] = 0xD;
 80010d0:	230d      	movs	r3, #13
 80010d2:	70fb      	strb	r3, [r7, #3]

	eeprom_write_Nbytes(0x21,ch1,4);
 80010d4:	463b      	mov	r3, r7
 80010d6:	2204      	movs	r2, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	2021      	movs	r0, #33	; 0x21
 80010dc:	f7ff f870 	bl	80001c0 <eeprom_write_Nbytes>
	delay_ms(20);
 80010e0:	2014      	movs	r0, #20
 80010e2:	f7ff fe90 	bl	8000e06 <delay_ms>
	eeprom_read_byte(0x21, ch2, 4);
 80010e6:	2204      	movs	r2, #4
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <main+0x94>)
 80010ea:	2021      	movs	r0, #33	; 0x21
 80010ec:	f7ff f8d2 	bl	8000294 <eeprom_read_byte>
	delay_ms(20);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f7ff fe88 	bl	8000e06 <delay_ms>

	while(1)
 80010f6:	e7fe      	b.n	80010f6 <main+0x8e>
 80010f8:	080011b4 	.word	0x080011b4
 80010fc:	200000e4 	.word	0x200000e4

08001100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001102:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001104:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800112e:	f000 f811 	bl	8001154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff ff99 	bl	8001068 <main>

08001136 <LoopForever>:

LoopForever:
  b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   r0, =_estack
 8001138:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001144:	080011c4 	.word	0x080011c4
  ldr r2, =_sbss
 8001148:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800114c:	200000ec 	.word	0x200000ec

08001150 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC3_IRQHandler>
	...

08001154 <__libc_init_array>:
 8001154:	b570      	push	{r4, r5, r6, lr}
 8001156:	2600      	movs	r6, #0
 8001158:	4d0c      	ldr	r5, [pc, #48]	; (800118c <__libc_init_array+0x38>)
 800115a:	4c0d      	ldr	r4, [pc, #52]	; (8001190 <__libc_init_array+0x3c>)
 800115c:	1b64      	subs	r4, r4, r5
 800115e:	10a4      	asrs	r4, r4, #2
 8001160:	42a6      	cmp	r6, r4
 8001162:	d109      	bne.n	8001178 <__libc_init_array+0x24>
 8001164:	f000 f81a 	bl	800119c <_init>
 8001168:	2600      	movs	r6, #0
 800116a:	4d0a      	ldr	r5, [pc, #40]	; (8001194 <__libc_init_array+0x40>)
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <__libc_init_array+0x44>)
 800116e:	1b64      	subs	r4, r4, r5
 8001170:	10a4      	asrs	r4, r4, #2
 8001172:	42a6      	cmp	r6, r4
 8001174:	d105      	bne.n	8001182 <__libc_init_array+0x2e>
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	f855 3b04 	ldr.w	r3, [r5], #4
 800117c:	4798      	blx	r3
 800117e:	3601      	adds	r6, #1
 8001180:	e7ee      	b.n	8001160 <__libc_init_array+0xc>
 8001182:	f855 3b04 	ldr.w	r3, [r5], #4
 8001186:	4798      	blx	r3
 8001188:	3601      	adds	r6, #1
 800118a:	e7f2      	b.n	8001172 <__libc_init_array+0x1e>
 800118c:	080011bc 	.word	0x080011bc
 8001190:	080011bc 	.word	0x080011bc
 8001194:	080011bc 	.word	0x080011bc
 8001198:	080011c0 	.word	0x080011c0

0800119c <_init>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	bf00      	nop
 80011a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a2:	bc08      	pop	{r3}
 80011a4:	469e      	mov	lr, r3
 80011a6:	4770      	bx	lr

080011a8 <_fini>:
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011aa:	bf00      	nop
 80011ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ae:	bc08      	pop	{r3}
 80011b0:	469e      	mov	lr, r3
 80011b2:	4770      	bx	lr
