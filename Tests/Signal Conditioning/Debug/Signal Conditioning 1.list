
Signal Conditioning 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000250c  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800263c  08002644  00003644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00003644  2**0
                  CONTENTS
  4 .ARM          00000000  0800263c  0800263c  00003644  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800263c  08002644  00003644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0000363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002640  08002640  00003640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000000  08002644  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002644  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002aff  00000000  00000000  0000366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d71  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000010d2  00000000  00000000  00006edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00007fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00008268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028b3  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030a0  00000000  00000000  0000ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bb74  00000000  00000000  0000ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001993f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b10  00000000  00000000  00019984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08002624 	.word	0x08002624

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08002624 	.word	0x08002624

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	@ 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <__aeabi_d2f>:
 800077c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000780:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000784:	bf24      	itt	cs
 8000786:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800078a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800078e:	d90d      	bls.n	80007ac <__aeabi_d2f+0x30>
 8000790:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000794:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000798:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800079c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007a4:	bf08      	it	eq
 80007a6:	f020 0001 	biceq.w	r0, r0, #1
 80007aa:	4770      	bx	lr
 80007ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007b0:	d121      	bne.n	80007f6 <__aeabi_d2f+0x7a>
 80007b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007b6:	bfbc      	itt	lt
 80007b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007bc:	4770      	bxlt	lr
 80007be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007c6:	f1c2 0218 	rsb	r2, r2, #24
 80007ca:	f1c2 0c20 	rsb	ip, r2, #32
 80007ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80007d2:	fa20 f002 	lsr.w	r0, r0, r2
 80007d6:	bf18      	it	ne
 80007d8:	f040 0001 	orrne.w	r0, r0, #1
 80007dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007e8:	ea40 000c 	orr.w	r0, r0, ip
 80007ec:	fa23 f302 	lsr.w	r3, r3, r2
 80007f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007f4:	e7cc      	b.n	8000790 <__aeabi_d2f+0x14>
 80007f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007fa:	d107      	bne.n	800080c <__aeabi_d2f+0x90>
 80007fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000800:	bf1e      	ittt	ne
 8000802:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000806:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800080a:	4770      	bxne	lr
 800080c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000810:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000814:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <__aeabi_frsub>:
 800081c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000820:	e002      	b.n	8000828 <__addsf3>
 8000822:	bf00      	nop

08000824 <__aeabi_fsub>:
 8000824:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000828 <__addsf3>:
 8000828:	0042      	lsls	r2, r0, #1
 800082a:	bf1f      	itttt	ne
 800082c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000830:	ea92 0f03 	teqne	r2, r3
 8000834:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000838:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800083c:	d06a      	beq.n	8000914 <__addsf3+0xec>
 800083e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000842:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000846:	bfc1      	itttt	gt
 8000848:	18d2      	addgt	r2, r2, r3
 800084a:	4041      	eorgt	r1, r0
 800084c:	4048      	eorgt	r0, r1
 800084e:	4041      	eorgt	r1, r0
 8000850:	bfb8      	it	lt
 8000852:	425b      	neglt	r3, r3
 8000854:	2b19      	cmp	r3, #25
 8000856:	bf88      	it	hi
 8000858:	4770      	bxhi	lr
 800085a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800085e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000862:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800086e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000872:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000876:	bf18      	it	ne
 8000878:	4249      	negne	r1, r1
 800087a:	ea92 0f03 	teq	r2, r3
 800087e:	d03f      	beq.n	8000900 <__addsf3+0xd8>
 8000880:	f1a2 0201 	sub.w	r2, r2, #1
 8000884:	fa41 fc03 	asr.w	ip, r1, r3
 8000888:	eb10 000c 	adds.w	r0, r0, ip
 800088c:	f1c3 0320 	rsb	r3, r3, #32
 8000890:	fa01 f103 	lsl.w	r1, r1, r3
 8000894:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000898:	d502      	bpl.n	80008a0 <__addsf3+0x78>
 800089a:	4249      	negs	r1, r1
 800089c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008a0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80008a4:	d313      	bcc.n	80008ce <__addsf3+0xa6>
 80008a6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008aa:	d306      	bcc.n	80008ba <__addsf3+0x92>
 80008ac:	0840      	lsrs	r0, r0, #1
 80008ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80008b2:	f102 0201 	add.w	r2, r2, #1
 80008b6:	2afe      	cmp	r2, #254	@ 0xfe
 80008b8:	d251      	bcs.n	800095e <__addsf3+0x136>
 80008ba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80008be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008c2:	bf08      	it	eq
 80008c4:	f020 0001 	biceq.w	r0, r0, #1
 80008c8:	ea40 0003 	orr.w	r0, r0, r3
 80008cc:	4770      	bx	lr
 80008ce:	0049      	lsls	r1, r1, #1
 80008d0:	eb40 0000 	adc.w	r0, r0, r0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	bf28      	it	cs
 80008d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80008dc:	d2ed      	bcs.n	80008ba <__addsf3+0x92>
 80008de:	fab0 fc80 	clz	ip, r0
 80008e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008e6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ee:	bfaa      	itet	ge
 80008f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008f4:	4252      	neglt	r2, r2
 80008f6:	4318      	orrge	r0, r3
 80008f8:	bfbc      	itt	lt
 80008fa:	40d0      	lsrlt	r0, r2
 80008fc:	4318      	orrlt	r0, r3
 80008fe:	4770      	bx	lr
 8000900:	f092 0f00 	teq	r2, #0
 8000904:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000908:	bf06      	itte	eq
 800090a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800090e:	3201      	addeq	r2, #1
 8000910:	3b01      	subne	r3, #1
 8000912:	e7b5      	b.n	8000880 <__addsf3+0x58>
 8000914:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000918:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800091c:	bf18      	it	ne
 800091e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000922:	d021      	beq.n	8000968 <__addsf3+0x140>
 8000924:	ea92 0f03 	teq	r2, r3
 8000928:	d004      	beq.n	8000934 <__addsf3+0x10c>
 800092a:	f092 0f00 	teq	r2, #0
 800092e:	bf08      	it	eq
 8000930:	4608      	moveq	r0, r1
 8000932:	4770      	bx	lr
 8000934:	ea90 0f01 	teq	r0, r1
 8000938:	bf1c      	itt	ne
 800093a:	2000      	movne	r0, #0
 800093c:	4770      	bxne	lr
 800093e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000942:	d104      	bne.n	800094e <__addsf3+0x126>
 8000944:	0040      	lsls	r0, r0, #1
 8000946:	bf28      	it	cs
 8000948:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800094c:	4770      	bx	lr
 800094e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000952:	bf3c      	itt	cc
 8000954:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000958:	4770      	bxcc	lr
 800095a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800095e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000962:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000966:	4770      	bx	lr
 8000968:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800096c:	bf16      	itet	ne
 800096e:	4608      	movne	r0, r1
 8000970:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000974:	4601      	movne	r1, r0
 8000976:	0242      	lsls	r2, r0, #9
 8000978:	bf06      	itte	eq
 800097a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800097e:	ea90 0f01 	teqeq	r0, r1
 8000982:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000986:	4770      	bx	lr

08000988 <__aeabi_ui2f>:
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	e004      	b.n	8000998 <__aeabi_i2f+0x8>
 800098e:	bf00      	nop

08000990 <__aeabi_i2f>:
 8000990:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000994:	bf48      	it	mi
 8000996:	4240      	negmi	r0, r0
 8000998:	ea5f 0c00 	movs.w	ip, r0
 800099c:	bf08      	it	eq
 800099e:	4770      	bxeq	lr
 80009a0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80009a4:	4601      	mov	r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	e01c      	b.n	80009e6 <__aeabi_l2f+0x2a>

080009ac <__aeabi_ul2f>:
 80009ac:	ea50 0201 	orrs.w	r2, r0, r1
 80009b0:	bf08      	it	eq
 80009b2:	4770      	bxeq	lr
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	e00a      	b.n	80009d0 <__aeabi_l2f+0x14>
 80009ba:	bf00      	nop

080009bc <__aeabi_l2f>:
 80009bc:	ea50 0201 	orrs.w	r2, r0, r1
 80009c0:	bf08      	it	eq
 80009c2:	4770      	bxeq	lr
 80009c4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__aeabi_l2f+0x14>
 80009ca:	4240      	negs	r0, r0
 80009cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009d0:	ea5f 0c01 	movs.w	ip, r1
 80009d4:	bf02      	ittt	eq
 80009d6:	4684      	moveq	ip, r0
 80009d8:	4601      	moveq	r1, r0
 80009da:	2000      	moveq	r0, #0
 80009dc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80009e0:	bf08      	it	eq
 80009e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80009ea:	fabc f28c 	clz	r2, ip
 80009ee:	3a08      	subs	r2, #8
 80009f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009f4:	db10      	blt.n	8000a18 <__aeabi_l2f+0x5c>
 80009f6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009fa:	4463      	add	r3, ip
 80009fc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a08:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	f020 0001 	biceq.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	f102 0220 	add.w	r2, r2, #32
 8000a1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a20:	f1c2 0220 	rsb	r2, r2, #32
 8000a24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a28:	fa21 f202 	lsr.w	r2, r1, r2
 8000a2c:	eb43 0002 	adc.w	r0, r3, r2
 8000a30:	bf08      	it	eq
 8000a32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_fmul>:
 8000a38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a40:	bf1e      	ittt	ne
 8000a42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a46:	ea92 0f0c 	teqne	r2, ip
 8000a4a:	ea93 0f0c 	teqne	r3, ip
 8000a4e:	d06f      	beq.n	8000b30 <__aeabi_fmul+0xf8>
 8000a50:	441a      	add	r2, r3
 8000a52:	ea80 0c01 	eor.w	ip, r0, r1
 8000a56:	0240      	lsls	r0, r0, #9
 8000a58:	bf18      	it	ne
 8000a5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a5e:	d01e      	beq.n	8000a9e <__aeabi_fmul+0x66>
 8000a60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a78:	bf3e      	ittt	cc
 8000a7a:	0049      	lslcc	r1, r1, #1
 8000a7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a80:	005b      	lslcc	r3, r3, #1
 8000a82:	ea40 0001 	orr.w	r0, r0, r1
 8000a86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a8c:	d81d      	bhi.n	8000aca <__aeabi_fmul+0x92>
 8000a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a96:	bf08      	it	eq
 8000a98:	f020 0001 	biceq.w	r0, r0, #1
 8000a9c:	4770      	bx	lr
 8000a9e:	f090 0f00 	teq	r0, #0
 8000aa2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000aa6:	bf08      	it	eq
 8000aa8:	0249      	lsleq	r1, r1, #9
 8000aaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000aae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ab2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ab4:	bfc2      	ittt	gt
 8000ab6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000aba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000abe:	4770      	bxgt	lr
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	dc5d      	bgt.n	8000b88 <__aeabi_fmul+0x150>
 8000acc:	f112 0f19 	cmn.w	r2, #25
 8000ad0:	bfdc      	itt	le
 8000ad2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ad6:	4770      	bxle	lr
 8000ad8:	f1c2 0200 	rsb	r2, r2, #0
 8000adc:	0041      	lsls	r1, r0, #1
 8000ade:	fa21 f102 	lsr.w	r1, r1, r2
 8000ae2:	f1c2 0220 	rsb	r2, r2, #32
 8000ae6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000aee:	f140 0000 	adc.w	r0, r0, #0
 8000af2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000af6:	bf08      	it	eq
 8000af8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000afc:	4770      	bx	lr
 8000afe:	f092 0f00 	teq	r2, #0
 8000b02:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b06:	bf02      	ittt	eq
 8000b08:	0040      	lsleq	r0, r0, #1
 8000b0a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b0e:	3a01      	subeq	r2, #1
 8000b10:	d0f9      	beq.n	8000b06 <__aeabi_fmul+0xce>
 8000b12:	ea40 000c 	orr.w	r0, r0, ip
 8000b16:	f093 0f00 	teq	r3, #0
 8000b1a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1e:	bf02      	ittt	eq
 8000b20:	0049      	lsleq	r1, r1, #1
 8000b22:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b26:	3b01      	subeq	r3, #1
 8000b28:	d0f9      	beq.n	8000b1e <__aeabi_fmul+0xe6>
 8000b2a:	ea41 010c 	orr.w	r1, r1, ip
 8000b2e:	e78f      	b.n	8000a50 <__aeabi_fmul+0x18>
 8000b30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b34:	ea92 0f0c 	teq	r2, ip
 8000b38:	bf18      	it	ne
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d00a      	beq.n	8000b56 <__aeabi_fmul+0x11e>
 8000b40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b44:	bf18      	it	ne
 8000b46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b4a:	d1d8      	bne.n	8000afe <__aeabi_fmul+0xc6>
 8000b4c:	ea80 0001 	eor.w	r0, r0, r1
 8000b50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b54:	4770      	bx	lr
 8000b56:	f090 0f00 	teq	r0, #0
 8000b5a:	bf17      	itett	ne
 8000b5c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b60:	4608      	moveq	r0, r1
 8000b62:	f091 0f00 	teqne	r1, #0
 8000b66:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b6a:	d014      	beq.n	8000b96 <__aeabi_fmul+0x15e>
 8000b6c:	ea92 0f0c 	teq	r2, ip
 8000b70:	d101      	bne.n	8000b76 <__aeabi_fmul+0x13e>
 8000b72:	0242      	lsls	r2, r0, #9
 8000b74:	d10f      	bne.n	8000b96 <__aeabi_fmul+0x15e>
 8000b76:	ea93 0f0c 	teq	r3, ip
 8000b7a:	d103      	bne.n	8000b84 <__aeabi_fmul+0x14c>
 8000b7c:	024b      	lsls	r3, r1, #9
 8000b7e:	bf18      	it	ne
 8000b80:	4608      	movne	r0, r1
 8000b82:	d108      	bne.n	8000b96 <__aeabi_fmul+0x15e>
 8000b84:	ea80 0001 	eor.w	r0, r0, r1
 8000b88:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_fdiv>:
 8000ba0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ba4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba8:	bf1e      	ittt	ne
 8000baa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bae:	ea92 0f0c 	teqne	r2, ip
 8000bb2:	ea93 0f0c 	teqne	r3, ip
 8000bb6:	d069      	beq.n	8000c8c <__aeabi_fdiv+0xec>
 8000bb8:	eba2 0203 	sub.w	r2, r2, r3
 8000bbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc0:	0249      	lsls	r1, r1, #9
 8000bc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bc6:	d037      	beq.n	8000c38 <__aeabi_fdiv+0x98>
 8000bc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bd4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	bf38      	it	cc
 8000bdc:	005b      	lslcc	r3, r3, #1
 8000bde:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000be2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000be6:	428b      	cmp	r3, r1
 8000be8:	bf24      	itt	cs
 8000bea:	1a5b      	subcs	r3, r3, r1
 8000bec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bf4:	bf24      	itt	cs
 8000bf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c02:	bf24      	itt	cs
 8000c04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c10:	bf24      	itt	cs
 8000c12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	bf18      	it	ne
 8000c1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c22:	d1e0      	bne.n	8000be6 <__aeabi_fdiv+0x46>
 8000c24:	2afd      	cmp	r2, #253	@ 0xfd
 8000c26:	f63f af50 	bhi.w	8000aca <__aeabi_fmul+0x92>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c40:	327f      	adds	r2, #127	@ 0x7f
 8000c42:	bfc2      	ittt	gt
 8000c44:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4c:	4770      	bxgt	lr
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	f04f 0300 	mov.w	r3, #0
 8000c56:	3a01      	subs	r2, #1
 8000c58:	e737      	b.n	8000aca <__aeabi_fmul+0x92>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c62:	bf02      	ittt	eq
 8000c64:	0040      	lsleq	r0, r0, #1
 8000c66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c6a:	3a01      	subeq	r2, #1
 8000c6c:	d0f9      	beq.n	8000c62 <__aeabi_fdiv+0xc2>
 8000c6e:	ea40 000c 	orr.w	r0, r0, ip
 8000c72:	f093 0f00 	teq	r3, #0
 8000c76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	bf02      	ittt	eq
 8000c7c:	0049      	lsleq	r1, r1, #1
 8000c7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c82:	3b01      	subeq	r3, #1
 8000c84:	d0f9      	beq.n	8000c7a <__aeabi_fdiv+0xda>
 8000c86:	ea41 010c 	orr.w	r1, r1, ip
 8000c8a:	e795      	b.n	8000bb8 <__aeabi_fdiv+0x18>
 8000c8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c90:	ea92 0f0c 	teq	r2, ip
 8000c94:	d108      	bne.n	8000ca8 <__aeabi_fdiv+0x108>
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	f47f af7d 	bne.w	8000b96 <__aeabi_fmul+0x15e>
 8000c9c:	ea93 0f0c 	teq	r3, ip
 8000ca0:	f47f af70 	bne.w	8000b84 <__aeabi_fmul+0x14c>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e776      	b.n	8000b96 <__aeabi_fmul+0x15e>
 8000ca8:	ea93 0f0c 	teq	r3, ip
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_fdiv+0x118>
 8000cae:	024b      	lsls	r3, r1, #9
 8000cb0:	f43f af4c 	beq.w	8000b4c <__aeabi_fmul+0x114>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e76e      	b.n	8000b96 <__aeabi_fmul+0x15e>
 8000cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cbc:	bf18      	it	ne
 8000cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cc2:	d1ca      	bne.n	8000c5a <__aeabi_fdiv+0xba>
 8000cc4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000cc8:	f47f af5c 	bne.w	8000b84 <__aeabi_fmul+0x14c>
 8000ccc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000cd0:	f47f af3c 	bne.w	8000b4c <__aeabi_fmul+0x114>
 8000cd4:	e75f      	b.n	8000b96 <__aeabi_fmul+0x15e>
 8000cd6:	bf00      	nop

08000cd8 <__gesf2>:
 8000cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cdc:	e006      	b.n	8000cec <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__lesf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	e002      	b.n	8000cec <__cmpsf2+0x4>
 8000ce6:	bf00      	nop

08000ce8 <__cmpsf2>:
 8000ce8:	f04f 0c01 	mov.w	ip, #1
 8000cec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cfc:	bf18      	it	ne
 8000cfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d02:	d011      	beq.n	8000d28 <__cmpsf2+0x40>
 8000d04:	b001      	add	sp, #4
 8000d06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d0a:	bf18      	it	ne
 8000d0c:	ea90 0f01 	teqne	r0, r1
 8000d10:	bf58      	it	pl
 8000d12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d16:	bf88      	it	hi
 8000d18:	17c8      	asrhi	r0, r1, #31
 8000d1a:	bf38      	it	cc
 8000d1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d20:	bf18      	it	ne
 8000d22:	f040 0001 	orrne.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	d102      	bne.n	8000d34 <__cmpsf2+0x4c>
 8000d2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d32:	d105      	bne.n	8000d40 <__cmpsf2+0x58>
 8000d34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d38:	d1e4      	bne.n	8000d04 <__cmpsf2+0x1c>
 8000d3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d3e:	d0e1      	beq.n	8000d04 <__cmpsf2+0x1c>
 8000d40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_cfrcmple>:
 8000d48:	4684      	mov	ip, r0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	4661      	mov	r1, ip
 8000d4e:	e7ff      	b.n	8000d50 <__aeabi_cfcmpeq>

08000d50 <__aeabi_cfcmpeq>:
 8000d50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d52:	f7ff ffc9 	bl	8000ce8 <__cmpsf2>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	bf48      	it	mi
 8000d5a:	f110 0f00 	cmnmi.w	r0, #0
 8000d5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d60 <__aeabi_fcmpeq>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff fff4 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d68:	bf0c      	ite	eq
 8000d6a:	2001      	moveq	r0, #1
 8000d6c:	2000      	movne	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_fcmplt>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffea 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d7c:	bf34      	ite	cc
 8000d7e:	2001      	movcc	r0, #1
 8000d80:	2000      	movcs	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_fcmple>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffe0 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d90:	bf94      	ite	ls
 8000d92:	2001      	movls	r0, #1
 8000d94:	2000      	movhi	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_fcmpge>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff ffd2 	bl	8000d48 <__aeabi_cfrcmple>
 8000da4:	bf94      	ite	ls
 8000da6:	2001      	movls	r0, #1
 8000da8:	2000      	movhi	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_fcmpgt>:
 8000db0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db4:	f7ff ffc8 	bl	8000d48 <__aeabi_cfrcmple>
 8000db8:	bf34      	ite	cc
 8000dba:	2001      	movcc	r0, #1
 8000dbc:	2000      	movcs	r0, #0
 8000dbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc2:	bf00      	nop
 8000dc4:	0000      	movs	r0, r0
	...

08000dc8 <read_reference_voltage>:
#include "signal_conditioning.h"
#include "MCP4151.h"
#include "ADC.h"

void read_reference_voltage(float32 *ref, float32 *gain)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8000dd2:	7a7b      	ldrb	r3, [r7, #9]
 8000dd4:	f36f 13c7 	bfc	r3, #7, #1
 8000dd8:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN0_GND;
 8000dda:	7a7b      	ldrb	r3, [r7, #9]
 8000ddc:	2204      	movs	r2, #4
 8000dde:	f362 1306 	bfi	r3, r2, #4, #3
 8000de2:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8000de4:	7a7b      	ldrb	r3, [r7, #9]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f362 0343 	bfi	r3, r2, #1, #3
 8000dec:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
 8000df0:	f36f 0300 	bfc	r3, #0, #1
 8000df4:	727b      	strb	r3, [r7, #9]
	config.DR = DR_128SPS;
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	2204      	movs	r2, #4
 8000dfa:	f362 1347 	bfi	r3, r2, #5, #3
 8000dfe:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8000e00:	7a3b      	ldrb	r3, [r7, #8]
 8000e02:	f36f 1304 	bfc	r3, #4, #1
 8000e06:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8000e08:	7a3b      	ldrb	r3, [r7, #8]
 8000e0a:	f36f 03c3 	bfc	r3, #3, #1
 8000e0e:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8000e10:	7a3b      	ldrb	r3, [r7, #8]
 8000e12:	f36f 0382 	bfc	r3, #2, #1
 8000e16:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	f043 0303 	orr.w	r3, r3, #3
 8000e1e:	723b      	strb	r3, [r7, #8]

	ref_sample x;
	x = REFERENCE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8000e24:	8938      	ldrh	r0, [r7, #8]
 8000e26:	f000 f975 	bl	8001114 <adc_read_mv>
 8000e2a:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8000e2c:	4942      	ldr	r1, [pc, #264]	@ (8000f38 <read_reference_voltage+0x170>)
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff ffa0 	bl	8000d74 <__aeabi_fcmplt>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d01c      	beq.n	8000e74 <read_reference_voltage+0xac>
	{
		config.MUX = MUX_AIN1_GND;
 8000e3a:	7a7b      	ldrb	r3, [r7, #9]
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	f362 1306 	bfi	r3, r2, #4, #3
 8000e42:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(50.0);
 8000e44:	483c      	ldr	r0, [pc, #240]	@ (8000f38 <read_reference_voltage+0x170>)
 8000e46:	f000 fb3d 	bl	80014c4 <Set_Reference_Gain>
		reading = adc_read_mv(config);
 8000e4a:	8938      	ldrh	r0, [r7, #8]
 8000e4c:	f000 f962 	bl	8001114 <adc_read_mv>
 8000e50:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8000e52:	4839      	ldr	r0, [pc, #228]	@ (8000f38 <read_reference_voltage+0x170>)
 8000e54:	f000 fbb0 	bl	80015b8 <get_reference_gain>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fe9f 	bl	8000ba0 <__aeabi_fdiv>
 8000e62:	4603      	mov	r3, r0
 8000e64:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(50.0);
 8000e66:	4834      	ldr	r0, [pc, #208]	@ (8000f38 <read_reference_voltage+0x170>)
 8000e68:	f000 fba6 	bl	80015b8 <get_reference_gain>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e046      	b.n	8000f02 <read_reference_voltage+0x13a>
	}
	else if(reading < 100.0)
 8000e74:	4931      	ldr	r1, [pc, #196]	@ (8000f3c <read_reference_voltage+0x174>)
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ff7c 	bl	8000d74 <__aeabi_fcmplt>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01c      	beq.n	8000ebc <read_reference_voltage+0xf4>
	{
		config.MUX = MUX_AIN1_GND;
 8000e82:	7a7b      	ldrb	r3, [r7, #9]
 8000e84:	2205      	movs	r2, #5
 8000e86:	f362 1306 	bfi	r3, r2, #4, #3
 8000e8a:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(30.0);
 8000e8c:	482c      	ldr	r0, [pc, #176]	@ (8000f40 <read_reference_voltage+0x178>)
 8000e8e:	f000 fb19 	bl	80014c4 <Set_Reference_Gain>
		reading = adc_read_mv(config);
 8000e92:	8938      	ldrh	r0, [r7, #8]
 8000e94:	f000 f93e 	bl	8001114 <adc_read_mv>
 8000e98:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(30.0);
 8000e9a:	4829      	ldr	r0, [pc, #164]	@ (8000f40 <read_reference_voltage+0x178>)
 8000e9c:	f000 fb8c 	bl	80015b8 <get_reference_gain>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fe7b 	bl	8000ba0 <__aeabi_fdiv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(30.0);
 8000eae:	4824      	ldr	r0, [pc, #144]	@ (8000f40 <read_reference_voltage+0x178>)
 8000eb0:	f000 fb82 	bl	80015b8 <get_reference_gain>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e022      	b.n	8000f02 <read_reference_voltage+0x13a>
	}
	else if(reading < 200.0)
 8000ebc:	4921      	ldr	r1, [pc, #132]	@ (8000f44 <read_reference_voltage+0x17c>)
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ff58 	bl	8000d74 <__aeabi_fcmplt>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01b      	beq.n	8000f02 <read_reference_voltage+0x13a>
	{
		config.MUX = MUX_AIN1_GND;
 8000eca:	7a7b      	ldrb	r3, [r7, #9]
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f362 1306 	bfi	r3, r2, #4, #3
 8000ed2:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(15.0);
 8000ed4:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <read_reference_voltage+0x180>)
 8000ed6:	f000 faf5 	bl	80014c4 <Set_Reference_Gain>
		reading = adc_read_mv(config);
 8000eda:	8938      	ldrh	r0, [r7, #8]
 8000edc:	f000 f91a 	bl	8001114 <adc_read_mv>
 8000ee0:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(15.0);
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <read_reference_voltage+0x180>)
 8000ee4:	f000 fb68 	bl	80015b8 <get_reference_gain>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4619      	mov	r1, r3
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fe57 	bl	8000ba0 <__aeabi_fdiv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(15.0);
 8000ef6:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <read_reference_voltage+0x180>)
 8000ef8:	f000 fb5e 	bl	80015b8 <get_reference_gain>
 8000efc:	4602      	mov	r2, r0
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	601a      	str	r2, [r3, #0]
//		Set_Reference_Gain(3.0);
//		reading = adc_read_mv(config);
//		reading /= get_reference_gain(3.0);
//		*gain = get_reference_gain(3.0);
//	};
	reading *= (11.0 + 29.0)/11.0;
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fbc2 	bl	800068c <__aeabi_f2d>
 8000f08:	a309      	add	r3, pc, #36	@ (adr r3, 8000f30 <read_reference_voltage+0x168>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff f92f 	bl	8000170 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fc2f 	bl	800077c <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60fb      	str	r3, [r7, #12]
	*ref = reading;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	d1745d17 	.word	0xd1745d17
 8000f34:	400d1745 	.word	0x400d1745
 8000f38:	42480000 	.word	0x42480000
 8000f3c:	42c80000 	.word	0x42c80000
 8000f40:	41f00000 	.word	0x41f00000
 8000f44:	43480000 	.word	0x43480000
 8000f48:	41700000 	.word	0x41700000
 8000f4c:	00000000 	.word	0x00000000

08000f50 <read_sample_voltage>:

void read_sample_voltage(float32 *sample, float32 *gain)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8000f5a:	7a7b      	ldrb	r3, [r7, #9]
 8000f5c:	f36f 13c7 	bfc	r3, #7, #1
 8000f60:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN2_GND;
 8000f62:	7a7b      	ldrb	r3, [r7, #9]
 8000f64:	2206      	movs	r2, #6
 8000f66:	f362 1306 	bfi	r3, r2, #4, #3
 8000f6a:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8000f6c:	7a7b      	ldrb	r3, [r7, #9]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f362 0343 	bfi	r3, r2, #1, #3
 8000f74:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8000f76:	7a7b      	ldrb	r3, [r7, #9]
 8000f78:	f36f 0300 	bfc	r3, #0, #1
 8000f7c:	727b      	strb	r3, [r7, #9]
	config.DR = DR_128SPS;
 8000f7e:	7a3b      	ldrb	r3, [r7, #8]
 8000f80:	2204      	movs	r2, #4
 8000f82:	f362 1347 	bfi	r3, r2, #5, #3
 8000f86:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	f36f 1304 	bfc	r3, #4, #1
 8000f8e:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8000f90:	7a3b      	ldrb	r3, [r7, #8]
 8000f92:	f36f 03c3 	bfc	r3, #3, #1
 8000f96:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8000f98:	7a3b      	ldrb	r3, [r7, #8]
 8000f9a:	f36f 0382 	bfc	r3, #2, #1
 8000f9e:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8000fa0:	7a3b      	ldrb	r3, [r7, #8]
 8000fa2:	f043 0303 	orr.w	r3, r3, #3
 8000fa6:	723b      	strb	r3, [r7, #8]

	ref_sample x;
	x = SAMPLE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	72fb      	strb	r3, [r7, #11]
	reading = adc_read_mv(config);
 8000fac:	8938      	ldrh	r0, [r7, #8]
 8000fae:	f000 f8b1 	bl	8001114 <adc_read_mv>
 8000fb2:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8000fb4:	4942      	ldr	r1, [pc, #264]	@ (80010c0 <read_sample_voltage+0x170>)
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff fedc 	bl	8000d74 <__aeabi_fcmplt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d01b      	beq.n	8000ffa <read_sample_voltage+0xaa>
	{
		config.MUX = MUX_AIN3_GND;
 8000fc2:	7a7b      	ldrb	r3, [r7, #9]
 8000fc4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000fc8:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(50.0);
 8000fca:	483d      	ldr	r0, [pc, #244]	@ (80010c0 <read_sample_voltage+0x170>)
 8000fcc:	f000 fa58 	bl	8001480 <Set_Sample_Gain>
		reading = adc_read_mv(config);
 8000fd0:	8938      	ldrh	r0, [r7, #8]
 8000fd2:	f000 f89f 	bl	8001114 <adc_read_mv>
 8000fd6:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8000fd8:	4839      	ldr	r0, [pc, #228]	@ (80010c0 <read_sample_voltage+0x170>)
 8000fda:	f000 faed 	bl	80015b8 <get_reference_gain>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff fddc 	bl	8000ba0 <__aeabi_fdiv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(50.0);
 8000fec:	4834      	ldr	r0, [pc, #208]	@ (80010c0 <read_sample_voltage+0x170>)
 8000fee:	f000 fb27 	bl	8001640 <get_sample_gain>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e044      	b.n	8001084 <read_sample_voltage+0x134>
	}
	else if(reading < 100.0)
 8000ffa:	4932      	ldr	r1, [pc, #200]	@ (80010c4 <read_sample_voltage+0x174>)
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff feb9 	bl	8000d74 <__aeabi_fcmplt>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d01b      	beq.n	8001040 <read_sample_voltage+0xf0>
	{
		config.MUX = MUX_AIN3_GND;
 8001008:	7a7b      	ldrb	r3, [r7, #9]
 800100a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800100e:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(30.0);
 8001010:	482d      	ldr	r0, [pc, #180]	@ (80010c8 <read_sample_voltage+0x178>)
 8001012:	f000 fa35 	bl	8001480 <Set_Sample_Gain>
		reading = adc_read_mv(config);
 8001016:	8938      	ldrh	r0, [r7, #8]
 8001018:	f000 f87c 	bl	8001114 <adc_read_mv>
 800101c:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(30.0);
 800101e:	482a      	ldr	r0, [pc, #168]	@ (80010c8 <read_sample_voltage+0x178>)
 8001020:	f000 fb0e 	bl	8001640 <get_sample_gain>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fdb9 	bl	8000ba0 <__aeabi_fdiv>
 800102e:	4603      	mov	r3, r0
 8001030:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(30.0);
 8001032:	4825      	ldr	r0, [pc, #148]	@ (80010c8 <read_sample_voltage+0x178>)
 8001034:	f000 fb04 	bl	8001640 <get_sample_gain>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e021      	b.n	8001084 <read_sample_voltage+0x134>
	}
	else if(reading < 200.0)
 8001040:	4922      	ldr	r1, [pc, #136]	@ (80010cc <read_sample_voltage+0x17c>)
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff fe96 	bl	8000d74 <__aeabi_fcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01a      	beq.n	8001084 <read_sample_voltage+0x134>
	{
		config.MUX = MUX_AIN3_GND;
 800104e:	7a7b      	ldrb	r3, [r7, #9]
 8001050:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001054:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(15.0);
 8001056:	481e      	ldr	r0, [pc, #120]	@ (80010d0 <read_sample_voltage+0x180>)
 8001058:	f000 fa12 	bl	8001480 <Set_Sample_Gain>
		reading = adc_read_mv(config);
 800105c:	8938      	ldrh	r0, [r7, #8]
 800105e:	f000 f859 	bl	8001114 <adc_read_mv>
 8001062:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(15.0);
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <read_sample_voltage+0x180>)
 8001066:	f000 faeb 	bl	8001640 <get_sample_gain>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff fd96 	bl	8000ba0 <__aeabi_fdiv>
 8001074:	4603      	mov	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(15.0);
 8001078:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <read_sample_voltage+0x180>)
 800107a:	f000 fae1 	bl	8001640 <get_sample_gain>
 800107e:	4602      	mov	r2, r0
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	601a      	str	r2, [r3, #0]
//		reading = adc_read_mv(config);
//		reading /= get_sample_gain(3.0);
//		*gain = get_sample_gain(3.0);
//	};

	reading *= (11.0 + 29.0)/11.0;
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fb01 	bl	800068c <__aeabi_f2d>
 800108a:	a30b      	add	r3, pc, #44	@ (adr r3, 80010b8 <read_sample_voltage+0x168>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff f86e 	bl	8000170 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fb6e 	bl	800077c <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
	*sample = reading;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	d1745d17 	.word	0xd1745d17
 80010bc:	400d1745 	.word	0x400d1745
 80010c0:	42480000 	.word	0x42480000
 80010c4:	42c80000 	.word	0x42c80000
 80010c8:	41f00000 	.word	0x41f00000
 80010cc:	43480000 	.word	0x43480000
 80010d0:	41700000 	.word	0x41700000

080010d4 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 80010da:	2340      	movs	r3, #64	@ 0x40
 80010dc:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 80010de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e2:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <adc_init+0x38>)
 80010e6:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 80010e8:	2300      	movs	r3, #0
 80010ea:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 80010f0:	2300      	movs	r3, #0
 80010f2:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <adc_init+0x3c>)
 80010f6:	f000 fd5d 	bl	8001bb4 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <adc_init+0x3c>)
 8001100:	f000 fc7a 	bl	80019f8 <MCAL_I2C_Init>
	//MCAL_I2C_RESET();
	//MCAL_I2C_Init(I2C1, &I2C1CFG);
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	000186a0 	.word	0x000186a0
 8001110:	40005400 	.word	0x40005400

08001114 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af02      	add	r7, sp, #8
 800111a:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x48;
 800111c:	2348      	movs	r3, #72	@ 0x48
 800111e:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x01;
 8001120:	2301      	movs	r3, #1
 8001122:	753b      	strb	r3, [r7, #20]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	b25a      	sxtb	r2, r3
 8001130:	797b      	ldrb	r3, [r7, #5]
 8001132:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b25b      	sxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b25a      	sxtb	r2, r3
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	b25b      	sxtb	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b25a      	sxtb	r2, r3
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b25b      	sxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b25b      	sxtb	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	757b      	strb	r3, [r7, #21]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	b25a      	sxtb	r2, r3
 800116e:	793b      	ldrb	r3, [r7, #4]
 8001170:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25a      	sxtb	r2, r3
 800118e:	793b      	ldrb	r3, [r7, #4]
 8001190:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25a      	sxtb	r2, r3
 800119e:	793b      	ldrb	r3, [r7, #4]
 80011a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	75bb      	strb	r3, [r7, #22]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 80011b0:	f107 0214 	add.w	r2, r7, #20
 80011b4:	8bf9      	ldrh	r1, [r7, #30]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2303      	movs	r3, #3
 80011c0:	481d      	ldr	r0, [pc, #116]	@ (8001238 <adc_read_mv+0x124>)
 80011c2:	f000 fd21 	bl	8001c08 <MCAL_I2C_MASTER_TX>
	ch[0] = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 80011ca:	f107 0214 	add.w	r2, r7, #20
 80011ce:	8bf9      	ldrh	r1, [r7, #30]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	4817      	ldr	r0, [pc, #92]	@ (8001238 <adc_read_mv+0x124>)
 80011dc:	f000 fd14 	bl	8001c08 <MCAL_I2C_MASTER_TX>
	delay_ms(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f000 fa6f 	bl	80016c4 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start);
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	8bf9      	ldrh	r1, [r7, #30]
 80011ec:	2300      	movs	r3, #0
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2302      	movs	r3, #2
 80011f6:	4810      	ldr	r0, [pc, #64]	@ (8001238 <adc_read_mv+0x124>)
 80011f8:	f000 fd64 	bl	8001cc4 <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21b      	sxth	r3, r3
 800120a:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 800120c:	8bbb      	ldrh	r3, [r7, #28]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fbba 	bl	8000988 <__aeabi_ui2f>
 8001214:	4603      	mov	r3, r0
 8001216:	4909      	ldr	r1, [pc, #36]	@ (800123c <adc_read_mv+0x128>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc0d 	bl	8000a38 <__aeabi_fmul>
 800121e:	4603      	mov	r3, r0
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <adc_read_mv+0x12c>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fc08 	bl	8000a38 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
	return mv;
 800122c:	69bb      	ldr	r3, [r7, #24]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	3903126f 	.word	0x3903126f
 8001240:	447a0000 	.word	0x447a0000

08001244 <eeprom_write_Nbytes>:
	//MCAL_I2C_Init(I2C1, &I2C1CFG);


}
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0c8      	sub	sp, #288	@ 0x120
 8001248:	af02      	add	r7, sp, #8
 800124a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800124e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001258:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800125c:	6019      	str	r1, [r3, #0]
 800125e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001262:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001266:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	//MISRA C++ 2008, 18-4-1 - Dynamic heap memory allocation shall not be used
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256]  ;
	buffer[0] = (uint8)(Memory_address>>8) ; 	//upper byte Memory Address
 800126e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001272:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b2da      	uxtb	r2, r3
 800127c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001284:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8)Memory_address ; 	//lower byte Memory Address
 8001286:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800128a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800129a:	705a      	strb	r2, [r3, #1]

	for (i=2 ; i<(Data_Length+2) ; i++ )
 800129c:	2302      	movs	r3, #2
 800129e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80012a2:	e015      	b.n	80012d0 <eeprom_write_Nbytes+0x8c>
	{buffer[i] = bytes[i-2] ;}
 80012a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012a8:	3b02      	subs	r3, #2
 80012aa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80012ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	441a      	add	r2, r3
 80012b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012ba:	7811      	ldrb	r1, [r2, #0]
 80012bc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80012c0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012c4:	54d1      	strb	r1, [r2, r3]
	for (i=2 ; i<(Data_Length+2) ; i++ )
 80012c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012ca:	3301      	adds	r3, #1
 80012cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80012d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012d4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dadf      	bge.n	80012a4 <eeprom_write_Nbytes+0x60>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+2), With_Stop, Start);
 80012e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012e8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3302      	adds	r3, #2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f107 0214 	add.w	r2, r7, #20
 80012f6:	2300      	movs	r3, #0
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	460b      	mov	r3, r1
 8001300:	2150      	movs	r1, #80	@ 0x50
 8001302:	4804      	ldr	r0, [pc, #16]	@ (8001314 <eeprom_write_Nbytes+0xd0>)
 8001304:	f000 fc80 	bl	8001c08 <MCAL_I2C_MASTER_TX>

	return 0 ;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400

08001318 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = (uint8)(address>>8) ; 	//Upper Memory Address
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8)(address) ; 	//Lower Memory Address
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 2 ,Without_Stop ,Start); //Write Address Only
 8001334:	f107 0214 	add.w	r2, r7, #20
 8001338:	2300      	movs	r3, #0
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2301      	movs	r3, #1
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	2150      	movs	r1, #80	@ 0x50
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <eeprom_read_byte+0x50>)
 8001346:	f000 fc5f 	bl	8001c08 <MCAL_I2C_MASTER_TX>

	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start); 			//Read Data
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2201      	movs	r2, #1
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	2150      	movs	r1, #80	@ 0x50
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <eeprom_read_byte+0x50>)
 800135a:	f000 fcb3 	bl	8001cc4 <MCAL_I2C_MASTER_RX>

	return 0 ;
 800135e:	2300      	movs	r3, #0

}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005400 	.word	0x40005400

0800136c <MCP4151_Sample_SetWiperPosition>:
 */
#include "MCP4151.h"
#include "math.h"


void MCP4151_Sample_SetWiperPosition(uint8 position){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_LOW);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	2000      	movs	r0, #0
 8001380:	f000 faa0 	bl	80018c4 <MGPIO_SetPinValue>
	delay_ms(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f000 f99d 	bl	80016c4 <delay_ms>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 800138a:	f107 030e 	add.w	r3, r7, #14
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	480e      	ldr	r0, [pc, #56]	@ (80013cc <MCP4151_Sample_SetWiperPosition+0x60>)
 8001394:	f000 ff32 	bl	80021fc <MCAL_SPI_SendData>
	delay_ms(10);
 8001398:	200a      	movs	r0, #10
 800139a:	f000 f993 	bl	80016c4 <delay_ms>
	command = position;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80013a4:	f107 030e 	add.w	r3, r7, #14
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MCP4151_Sample_SetWiperPosition+0x60>)
 80013ae:	f000 ff25 	bl	80021fc <MCAL_SPI_SendData>
	delay_ms(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f000 f986 	bl	80016c4 <delay_ms>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2108      	movs	r1, #8
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fa81 	bl	80018c4 <MGPIO_SetPinValue>
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40003800 	.word	0x40003800

080013d0 <MCP4151_Referance_SetWiperPosition>:

void MCP4151_Referance_SetWiperPosition(uint8 position){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_LOW);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fa6e 	bl	80018c4 <MGPIO_SetPinValue>
	delay_ms(10);
 80013e8:	200a      	movs	r0, #10
 80013ea:	f000 f96b 	bl	80016c4 <delay_ms>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80013ee:	f107 030e 	add.w	r3, r7, #14
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	480e      	ldr	r0, [pc, #56]	@ (8001430 <MCP4151_Referance_SetWiperPosition+0x60>)
 80013f8:	f000 ff00 	bl	80021fc <MCAL_SPI_SendData>
	delay_ms(10);
 80013fc:	200a      	movs	r0, #10
 80013fe:	f000 f961 	bl	80016c4 <delay_ms>
	command = position;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	b29b      	uxth	r3, r3
 8001406:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8001408:	f107 030e 	add.w	r3, r7, #14
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <MCP4151_Referance_SetWiperPosition+0x60>)
 8001412:	f000 fef3 	bl	80021fc <MCAL_SPI_SendData>
	delay_ms(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f000 f954 	bl	80016c4 <delay_ms>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 800141c:	2201      	movs	r2, #1
 800141e:	2102      	movs	r1, #2
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fa4f 	bl	80018c4 <MGPIO_SetPinValue>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40003800 	.word	0x40003800

08001434 <MCP4151_Init>:
 * @param[in]		 -none
 * @retval			 -none
 * Note				 -SPI2 used
 */
void MCP4151_Init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
	//SPI Init

	SPI_Config SPI2CFG;

	SPI2CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 800143a:	2301      	movs	r3, #1
 800143c:	817b      	strh	r3, [r7, #10]
	SPI2CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 800143e:	2302      	movs	r3, #2
 8001440:	813b      	strh	r3, [r7, #8]
	SPI2CFG.DataSize = SPI_DataSize_8BIT;
 8001442:	2300      	movs	r3, #0
 8001444:	80fb      	strh	r3, [r7, #6]
	SPI2CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 8001446:	2300      	movs	r3, #0
 8001448:	80bb      	strh	r3, [r7, #4]
	SPI2CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_16;
 800144a:	2318      	movs	r3, #24
 800144c:	81fb      	strh	r3, [r7, #14]
	SPI2CFG.Communication_Mode = SPI_Direction_2LINES;
 800144e:	2300      	movs	r3, #0
 8001450:	807b      	strh	r3, [r7, #2]

#ifdef MCU_Act_As_Master

	SPI2CFG.Device_Mode = SPI_Device_Mode_MASTER;
 8001452:	2304      	movs	r3, #4
 8001454:	803b      	strh	r3, [r7, #0]
	SPI2CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	823b      	strh	r3, [r7, #16]
	SPI2CFG.NSS = SPI_NSS_soft_NSSInternalSoft_Set;
 800145a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800145e:	81bb      	strh	r3, [r7, #12]
	SPI2CFG.P_IRQ_CallBack = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_Init(SPI2,&SPI2CFG);
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MCP4151_Init+0x48>)
 800146a:	f000 fe41 	bl	80020f0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins (SPI2);
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <MCP4151_Init+0x48>)
 8001470:	f000 ff04 	bl	800227c <MCAL_SPI_GPIO_Set_Pins>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40003800 	.word	0x40003800

08001480 <Set_Sample_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_reference_gain"
 */
void Set_Sample_Gain(float32 gain)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	//Sample
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 8001488:	2201      	movs	r2, #1
 800148a:	2108      	movs	r1, #8
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f933 	bl	80016f8 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 8001492:	2201      	movs	r2, #1
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f000 fa14 	bl	80018c4 <MGPIO_SetPinValue>
	delay_ms(5);
 800149c:	2005      	movs	r0, #5
 800149e:	f000 f911 	bl	80016c4 <delay_ms>
	ref_sample x = SAMPLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	4619      	mov	r1, r3
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f82c 	bl	8001508 <steps_calculate>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73bb      	strb	r3, [r7, #14]
	MCP4151_Sample_SetWiperPosition(steps);
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff58 	bl	800136c <MCP4151_Sample_SetWiperPosition>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Set_Reference_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_sample_gain"
 */
void Set_Reference_Gain(float32 gain)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	//Referance
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_10MHZ);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2102      	movs	r1, #2
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f911 	bl	80016f8 <MGPIO_SetPinMode>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2102      	movs	r1, #2
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f9f2 	bl	80018c4 <MGPIO_SetPinValue>
	delay_ms(5);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 f8ef 	bl	80016c4 <delay_ms>
	ref_sample x = REFERENCE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f80a 	bl	8001508 <steps_calculate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73bb      	strb	r3, [r7, #14]
	MCP4151_Referance_SetWiperPosition(steps);
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff68 	bl	80013d0 <MCP4151_Referance_SetWiperPosition>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <steps_calculate>:
 * @param[in]		 -x: where x can be REFERENCE or SAMPLE
 * @retval			 -steps: calculated no. of steps
 * Note			 	 -The number of steps is rounded to the nearest integer
 */
uint8 steps_calculate(float32 gain, ref_sample x)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
	int total_resistance;
	if (x == REFERENCE)
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <steps_calculate+0x1a>
		total_resistance = MCP_TOTAL_RESISTANCE_REFERENCE;
 800151a:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e002      	b.n	8001528 <steps_calculate+0x20>
	else
		total_resistance = MCP_TOTAL_RESISTANCE_SAMPLE;
 8001522:	f64b 5310 	movw	r3, #48400	@ 0xbd10
 8001526:	617b      	str	r3, [r7, #20]
	float32 R;
	R = (RESISTANCE_ON_PCB / (gain - 1)) + WIPER_RESISTANCE;
 8001528:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff f979 	bl	8000824 <__aeabi_fsub>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	481d      	ldr	r0, [pc, #116]	@ (80015ac <steps_calculate+0xa4>)
 8001538:	f7ff fb32 	bl	8000ba0 <__aeabi_fdiv>
 800153c:	4603      	mov	r3, r0
 800153e:	491c      	ldr	r1, [pc, #112]	@ (80015b0 <steps_calculate+0xa8>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f971 	bl	8000828 <__addsf3>
 8001546:	4603      	mov	r3, r0
 8001548:	613b      	str	r3, [r7, #16]
	float32 steps_result;
	steps_result = ((total_resistance - R) * 256) / total_resistance;
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff fa20 	bl	8000990 <__aeabi_i2f>
 8001550:	4603      	mov	r3, r0
 8001552:	6939      	ldr	r1, [r7, #16]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f965 	bl	8000824 <__aeabi_fsub>
 800155a:	4603      	mov	r3, r0
 800155c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa69 	bl	8000a38 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	461c      	mov	r4, r3
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff fa10 	bl	8000990 <__aeabi_i2f>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fb13 	bl	8000ba0 <__aeabi_fdiv>
 800157a:	4603      	mov	r3, r0
 800157c:	60fb      	str	r3, [r7, #12]
	uint8 steps = round(steps_result);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7ff f884 	bl	800068c <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f001 f804 	bl	8002598 <round>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff f8d0 	bl	800073c <__aeabi_d2uiz>
 800159c:	4603      	mov	r3, r0
 800159e:	72fb      	strb	r3, [r7, #11]
	return steps;
 80015a0:	7afb      	ldrb	r3, [r7, #11]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	47c35000 	.word	0x47c35000
 80015b0:	439b8000 	.word	0x439b8000
 80015b4:	00000000 	.word	0x00000000

080015b8 <get_reference_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the reference
 * Note			 	 -none
 */
float32 get_reference_gain(float32 gain)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	ref_sample x = REFERENCE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff9d 	bl	8001508 <steps_calculate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_REFERENCE - steps * (MCP_TOTAL_RESISTANCE_REFERENCE / 256.0);
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f847 	bl	8000668 <__aeabi_i2d>
 80015da:	a313      	add	r3, pc, #76	@ (adr r3, 8001628 <get_reference_gain+0x70>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fdc6 	bl	8000170 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	a111      	add	r1, pc, #68	@ (adr r1, 8001630 <get_reference_gain+0x78>)
 80015ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ee:	f7fe feed 	bl	80003cc <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f8bf 	bl	800077c <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <get_reference_gain+0x80>)
 8001606:	f7ff facb 	bl	8000ba0 <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f909 	bl	8000828 <__addsf3>
 8001616:	4603      	mov	r3, r0
 8001618:	607b      	str	r3, [r7, #4]
	return gain;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	4067a200 	.word	0x4067a200
 8001630:	00000000 	.word	0x00000000
 8001634:	40e7a200 	.word	0x40e7a200
 8001638:	47c35000 	.word	0x47c35000
 800163c:	00000000 	.word	0x00000000

08001640 <get_sample_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the sample
 * Note			 	 -none
 */
float32 get_sample_gain(float32 gain)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	ref_sample x = SAMPLE;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff59 	bl	8001508 <steps_calculate>
 8001656:	4603      	mov	r3, r0
 8001658:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_SAMPLE- steps * (MCP_TOTAL_RESISTANCE_SAMPLE / 256.0);
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f803 	bl	8000668 <__aeabi_i2d>
 8001662:	a313      	add	r3, pc, #76	@ (adr r3, 80016b0 <get_sample_gain+0x70>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fd82 	bl	8000170 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	a111      	add	r1, pc, #68	@ (adr r1, 80016b8 <get_sample_gain+0x78>)
 8001672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001676:	f7fe fea9 	bl	80003cc <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f87b 	bl	800077c <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <get_sample_gain+0x80>)
 800168e:	f7ff fa87 	bl	8000ba0 <__aeabi_fdiv>
 8001692:	4603      	mov	r3, r0
 8001694:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f8c5 	bl	8000828 <__addsf3>
 800169e:	4603      	mov	r3, r0
 80016a0:	607b      	str	r3, [r7, #4]
	return gain;
 80016a2:	687b      	ldr	r3, [r7, #4]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	4067a200 	.word	0x4067a200
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40e7a200 	.word	0x40e7a200
 80016c0:	47c35000 	.word	0x47c35000

080016c4 <delay_ms>:

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e002      	b.n	80016e4 <delay_ms+0x20>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3f8      	bcc.n	80016de <delay_ms+0x1a>
		// Do nothing
	}
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	460b      	mov	r3, r1
 8001704:	71bb      	strb	r3, [r7, #6]
 8001706:	4613      	mov	r3, r2
 8001708:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f000 8081 	beq.w	8001818 <MGPIO_SetPinMode+0x120>
 8001716:	2b02      	cmp	r3, #2
 8001718:	f300 80ba 	bgt.w	8001890 <MGPIO_SetPinMode+0x198>
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <MGPIO_SetPinMode+0x2e>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d03d      	beq.n	80017a0 <MGPIO_SetPinMode+0xa8>
 8001724:	e0b4      	b.n	8001890 <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d819      	bhi.n	8001760 <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800172c:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <MGPIO_SetPinMode+0x1b4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	79ba      	ldrb	r2, [r7, #6]
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	210f      	movs	r1, #15
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	43d2      	mvns	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4a5b      	ldr	r2, [pc, #364]	@ (80018ac <MGPIO_SetPinMode+0x1b4>)
 8001740:	400b      	ands	r3, r1
 8001742:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8001744:	4b59      	ldr	r3, [pc, #356]	@ (80018ac <MGPIO_SetPinMode+0x1b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	7979      	ldrb	r1, [r7, #5]
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4611      	mov	r1, r2
 8001754:	4a55      	ldr	r2, [pc, #340]	@ (80018ac <MGPIO_SetPinMode+0x1b4>)
 8001756:	430b      	orrs	r3, r1
 8001758:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 800175e:	e09a      	b.n	8001896 <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f200 8097 	bhi.w	8001896 <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8001768:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <MGPIO_SetPinMode+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	79ba      	ldrb	r2, [r7, #6]
 800176e:	3a08      	subs	r2, #8
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	210f      	movs	r1, #15
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	43d2      	mvns	r2, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <MGPIO_SetPinMode+0x1b8>)
 800177e:	400b      	ands	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8001782:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <MGPIO_SetPinMode+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7979      	ldrb	r1, [r7, #5]
 8001788:	79ba      	ldrb	r2, [r7, #6]
 800178a:	3a08      	subs	r2, #8
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4611      	mov	r1, r2
 8001794:	4a46      	ldr	r2, [pc, #280]	@ (80018b0 <MGPIO_SetPinMode+0x1b8>)
 8001796:	430b      	orrs	r3, r1
 8001798:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
            break;
 800179e:	e07a      	b.n	8001896 <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d819      	bhi.n	80017da <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 80017a6:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <MGPIO_SetPinMode+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	210f      	movs	r1, #15
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	4611      	mov	r1, r2
 80017b8:	4a3e      	ldr	r2, [pc, #248]	@ (80018b4 <MGPIO_SetPinMode+0x1bc>)
 80017ba:	400b      	ands	r3, r1
 80017bc:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <MGPIO_SetPinMode+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	7979      	ldrb	r1, [r7, #5]
 80017c4:	79ba      	ldrb	r2, [r7, #6]
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	4611      	mov	r1, r2
 80017ce:	4a39      	ldr	r2, [pc, #228]	@ (80018b4 <MGPIO_SetPinMode+0x1bc>)
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80017d8:	e05f      	b.n	800189a <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d85c      	bhi.n	800189a <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <MGPIO_SetPinMode+0x1c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	3a08      	subs	r2, #8
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	210f      	movs	r1, #15
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	4611      	mov	r1, r2
 80017f4:	4a30      	ldr	r2, [pc, #192]	@ (80018b8 <MGPIO_SetPinMode+0x1c0>)
 80017f6:	400b      	ands	r3, r1
 80017f8:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <MGPIO_SetPinMode+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	7979      	ldrb	r1, [r7, #5]
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	3a08      	subs	r2, #8
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4611      	mov	r1, r2
 800180c:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <MGPIO_SetPinMode+0x1c0>)
 800180e:	430b      	orrs	r3, r1
 8001810:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
            break;
 8001816:	e040      	b.n	800189a <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d819      	bhi.n	8001852 <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 800181e:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <MGPIO_SetPinMode+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	79ba      	ldrb	r2, [r7, #6]
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	210f      	movs	r1, #15
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	43d2      	mvns	r2, r2
 800182e:	4611      	mov	r1, r2
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <MGPIO_SetPinMode+0x1c4>)
 8001832:	400b      	ands	r3, r1
 8001834:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <MGPIO_SetPinMode+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	7979      	ldrb	r1, [r7, #5]
 800183c:	79ba      	ldrb	r2, [r7, #6]
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4611      	mov	r1, r2
 8001846:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <MGPIO_SetPinMode+0x1c4>)
 8001848:	430b      	orrs	r3, r1
 800184a:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 8001850:	e025      	b.n	800189e <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d822      	bhi.n	800189e <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8001858:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <MGPIO_SetPinMode+0x1c8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	79ba      	ldrb	r2, [r7, #6]
 800185e:	3a08      	subs	r2, #8
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	210f      	movs	r1, #15
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	43d2      	mvns	r2, r2
 800186a:	4611      	mov	r1, r2
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <MGPIO_SetPinMode+0x1c8>)
 800186e:	400b      	ands	r3, r1
 8001870:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <MGPIO_SetPinMode+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	7979      	ldrb	r1, [r7, #5]
 8001878:	79ba      	ldrb	r2, [r7, #6]
 800187a:	3a08      	subs	r2, #8
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	4611      	mov	r1, r2
 8001884:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <MGPIO_SetPinMode+0x1c8>)
 8001886:	430b      	orrs	r3, r1
 8001888:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
            break;
 800188e:	e006      	b.n	800189e <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
            break;
 8001894:	e004      	b.n	80018a0 <MGPIO_SetPinMode+0x1a8>
            break;
 8001896:	bf00      	nop
 8001898:	e002      	b.n	80018a0 <MGPIO_SetPinMode+0x1a8>
            break;
 800189a:	bf00      	nop
 800189c:	e000      	b.n	80018a0 <MGPIO_SetPinMode+0x1a8>
            break;
 800189e:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40010800 	.word	0x40010800
 80018b0:	40010804 	.word	0x40010804
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	40010c04 	.word	0x40010c04
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40011004 	.word	0x40011004

080018c4 <MGPIO_SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_SetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinValue)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	460b      	mov	r3, r1
 80018d0:	71bb      	strb	r3, [r7, #6]
 80018d2:	4613      	mov	r3, r2
 80018d4:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d87c      	bhi.n	80019da <MGPIO_SetPinValue+0x116>
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	d879      	bhi.n	80019da <MGPIO_SetPinValue+0x116>
    {
        switch (Copy_uint8PortID)
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d04e      	beq.n	800198a <MGPIO_SetPinValue+0xc6>
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	dc70      	bgt.n	80019d2 <MGPIO_SetPinValue+0x10e>
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <MGPIO_SetPinValue+0x36>
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d024      	beq.n	8001942 <MGPIO_SetPinValue+0x7e>
 80018f8:	e06b      	b.n	80019d2 <MGPIO_SetPinValue+0x10e>
        {
            case MGPIO_PORTA:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 80018fa:	797b      	ldrb	r3, [r7, #5]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d10c      	bne.n	800191a <MGPIO_SetPinValue+0x56>
                {
                    SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8001900:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <MGPIO_SetPinValue+0x128>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	79ba      	ldrb	r2, [r7, #6]
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f202 	lsl.w	r2, r1, r2
 800190c:	4611      	mov	r1, r2
 800190e:	4a37      	ldr	r2, [pc, #220]	@ (80019ec <MGPIO_SetPinValue+0x128>)
 8001910:	430b      	orrs	r3, r1
 8001912:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8001918:	e05e      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <MGPIO_SetPinValue+0x78>
                    CLR_BIT(MGPIOA_ODR, Copy_uint8PinID);
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <MGPIO_SetPinValue+0x128>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	43d2      	mvns	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4a2e      	ldr	r2, [pc, #184]	@ (80019ec <MGPIO_SetPinValue+0x128>)
 8001932:	400b      	ands	r3, r1
 8001934:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
                break;
 800193a:	e04d      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
                break;
 8001940:	e04a      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTB:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8001942:	797b      	ldrb	r3, [r7, #5]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10c      	bne.n	8001962 <MGPIO_SetPinValue+0x9e>
                {
                    SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <MGPIO_SetPinValue+0x12c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	79ba      	ldrb	r2, [r7, #6]
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	4611      	mov	r1, r2
 8001956:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <MGPIO_SetPinValue+0x12c>)
 8001958:	430b      	orrs	r3, r1
 800195a:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8001960:	e03a      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10d      	bne.n	8001984 <MGPIO_SetPinValue+0xc0>
                    CLR_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <MGPIO_SetPinValue+0x12c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	79ba      	ldrb	r2, [r7, #6]
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	43d2      	mvns	r2, r2
 8001976:	4611      	mov	r1, r2
 8001978:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <MGPIO_SetPinValue+0x12c>)
 800197a:	400b      	ands	r3, r1
 800197c:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
                break;
 8001982:	e029      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
                break;
 8001988:	e026      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTC:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <MGPIO_SetPinValue+0xe6>
                {
                    SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <MGPIO_SetPinValue+0x130>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	79ba      	ldrb	r2, [r7, #6]
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4611      	mov	r1, r2
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <MGPIO_SetPinValue+0x130>)
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 80019a8:	e016      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <MGPIO_SetPinValue+0x108>
                    CLR_BIT(MGPIOC_ODR, Copy_uint8PinID);
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MGPIO_SetPinValue+0x130>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	79ba      	ldrb	r2, [r7, #6]
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	43d2      	mvns	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <MGPIO_SetPinValue+0x130>)
 80019c2:	400b      	ands	r3, r1
 80019c4:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
                break;
 80019ca:	e005      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
                break;
 80019d0:	e002      	b.n	80019d8 <MGPIO_SetPinValue+0x114>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
                break;
 80019d6:	bf00      	nop
        switch (Copy_uint8PortID)
 80019d8:	e001      	b.n	80019de <MGPIO_SetPinValue+0x11a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	4001080c 	.word	0x4001080c
 80019f0:	40010c0c 	.word	0x40010c0c
 80019f4:	4001100c 	.word	0x4001100c

080019f8 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	82fb      	strh	r3, [r7, #22]
 8001a06:	2300      	movs	r3, #0
 8001a08:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <MCAL_I2C_Init+0x170>)
 8001a0c:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	81fb      	strh	r3, [r7, #14]

	

	//Enable RCC Clock
	if (I2Cx == I2C1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a55      	ldr	r2, [pc, #340]	@ (8001b6c <MCAL_I2C_Init+0x174>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10e      	bne.n	8001a38 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 8001a1a:	4a55      	ldr	r2, [pc, #340]	@ (8001b70 <MCAL_I2C_Init+0x178>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a2a:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 8001a2e:	2115      	movs	r1, #21
 8001a30:	2002      	movs	r0, #2
 8001a32:	f000 fb13 	bl	800205c <MRCC_EnablePeripheralClock>
 8001a36:	e00e      	b.n	8001a56 <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8001a38:	4b4d      	ldr	r3, [pc, #308]	@ (8001b70 <MCAL_I2C_Init+0x178>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	f103 0418 	add.w	r4, r3, #24
 8001a40:	4615      	mov	r5, r2
 8001a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a4a:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 8001a4e:	2116      	movs	r1, #22
 8001a50:	2002      	movs	r0, #2
 8001a52:	f000 fb03 	bl	800205c <MRCC_EnablePeripheralClock>
	}
	MCAL_I2C_RESET();
 8001a56:	f000 f893 	bl	8001b80 <MCAL_I2C_RESET>
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	88db      	ldrh	r3, [r3, #6]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d178      	bne.n	8001b54 <MCAL_I2C_Init+0x15c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a6e:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <MCAL_I2C_Init+0x170>)
 8001a72:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4a3f      	ldr	r2, [pc, #252]	@ (8001b74 <MCAL_I2C_Init+0x17c>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 8001a80:	8afa      	ldrh	r2, [r7, #22]
 8001a82:	8abb      	ldrh	r3, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 8001a88:	8afa      	ldrh	r2, [r7, #22]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0201 	bic.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a35      	ldr	r2, [pc, #212]	@ (8001b78 <MCAL_I2C_Init+0x180>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <MCAL_I2C_Init+0xba>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a33      	ldr	r2, [pc, #204]	@ (8001b7c <MCAL_I2C_Init+0x184>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d112      	bne.n	8001ad8 <MCAL_I2C_Init+0xe0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 8001ac0:	8afa      	ldrh	r2, [r7, #22]
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8001ac8:	8afa      	ldrh	r2, [r7, #22]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	8a1a      	ldrh	r2, [r3, #16]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	8a5b      	ldrh	r3, [r3, #18]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	88db      	ldrh	r3, [r3, #6]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	889b      	ldrh	r3, [r3, #4]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	8afb      	ldrh	r3, [r7, #22]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 8001b00:	8afa      	ldrh	r2, [r7, #22]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 8001b06:	2300      	movs	r3, #0
 8001b08:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	891b      	ldrh	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <MCAL_I2C_Init+0x136>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 8001b12:	2301      	movs	r3, #1
 8001b14:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	899b      	ldrh	r3, [r3, #12]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8001b28:	8afa      	ldrh	r2, [r7, #22]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	895b      	ldrh	r3, [r3, #10]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	89da      	ldrh	r2, [r3, #14]
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8001b4e:	8afa      	ldrh	r2, [r7, #22]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	0007a120 	.word	0x0007a120
 8001b7c:	000186a0 	.word	0x000186a0

08001b80 <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <MCAL_I2C_RESET+0x30>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <MCAL_I2C_RESET+0x30>)
 8001b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b8e:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b94:	f000 fc1a 	bl	80023cc <MSTK_uint8Delay>
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <MCAL_I2C_RESET+0x30>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <MCAL_I2C_RESET+0x30>)
 8001b9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ba2:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8001ba4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ba8:	f000 fc10 	bl	80023cc <MSTK_uint8Delay>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40005400 	.word	0x40005400

08001bb4 <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10a      	bne.n	8001bda <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8001bc4:	220e      	movs	r2, #14
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff fd95 	bl	80016f8 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 8001bce:	220e      	movs	r2, #14
 8001bd0:	2107      	movs	r1, #7
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff fd90 	bl	80016f8 <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 8001bd8:	e00d      	b.n	8001bf6 <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <MCAL_I2C_GPIO_Set_Pins+0x50>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d109      	bne.n	8001bf6 <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8001be2:	220d      	movs	r2, #13
 8001be4:	210a      	movs	r1, #10
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fd86 	bl	80016f8 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 8001bec:	220d      	movs	r2, #13
 8001bee:	210b      	movs	r1, #11
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fd81 	bl	80016f8 <MGPIO_SetPinMode>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40005800 	.word	0x40005800

08001c08 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8001c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c20:	461a      	mov	r2, r3
 8001c22:	2101      	movs	r1, #1
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f8cd 	bl	8001dc4 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8001c2a:	bf00      	nop
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f8f0 	bl	8001e14 <I2C_GetFlagStatus>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f8      	beq.n	8001c2c <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8001c3a:	897b      	ldrh	r3, [r7, #10]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f96d 	bl	8001f20 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8001c46:	bf00      	nop
 8001c48:	2102      	movs	r1, #2
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f8e2 	bl	8001e14 <I2C_GetFlagStatus>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f8      	beq.n	8001c48 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8001c56:	bf00      	nop
 8001c58:	4919      	ldr	r1, [pc, #100]	@ (8001cc0 <MCAL_I2C_MASTER_TX+0xb8>)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8da 	bl	8001e14 <I2C_GetFlagStatus>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f8      	beq.n	8001c58 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e018      	b.n	8001c9e <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8001c6c:	bf00      	nop
 8001c6e:	2104      	movs	r1, #4
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f8cf 	bl	8001e14 <I2C_GetFlagStatus>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f8      	beq.n	8001c6e <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	105b      	asrs	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 8001c84:	200a      	movs	r0, #10
 8001c86:	f7ff fd1d 	bl	80016c4 <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d8e2      	bhi.n	8001c6c <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8001ca6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f954 	bl	8001f5e <I2C_GenerateSTOP>
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	00070080 	.word	0x00070080

08001cc4 <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a39      	ldr	r2, [pc, #228]	@ (8001dbc <MCAL_I2C_MASTER_RX+0xf8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8001ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cec:	461a      	mov	r2, r3
 8001cee:	2101      	movs	r1, #1
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f867 	bl	8001dc4 <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8001cf6:	bf00      	nop
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f88a 	bl	8001e14 <I2C_GetFlagStatus>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f8      	beq.n	8001cf8 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f907 	bl	8001f20 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8001d12:	bf00      	nop
 8001d14:	2102      	movs	r1, #2
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f87c 	bl	8001e14 <I2C_GetFlagStatus>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f8      	beq.n	8001d14 <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8001d22:	2101      	movs	r1, #1
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f935 	bl	8001f94 <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01c      	beq.n	8001d82 <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e011      	b.n	8001d74 <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8001d50:	bf00      	nop
 8001d52:	2103      	movs	r1, #3
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f85d 	bl	8001e14 <I2C_GetFlagStatus>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f8      	beq.n	8001d52 <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6919      	ldr	r1, [r3, #16]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	daea      	bge.n	8001d50 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f909 	bl	8001f94 <I2C_ACKnowledgeConfig>

	}

	if(Stop == With_Stop)
 8001d82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f8e6 	bl	8001f5e <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8001d92:	7cfa      	ldrb	r2, [r7, #19]
 8001d94:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <MCAL_I2C_MASTER_RX+0xfc>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	3310      	adds	r3, #16
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da8:	d103      	bne.n	8001db2 <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8001daa:	2101      	movs	r1, #1
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f8f1 	bl	8001f94 <I2C_ACKnowledgeConfig>
	}
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	2000001c 	.word	0x2000001c

08001dc4 <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8001dd4:	78bb      	ldrb	r3, [r7, #2]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d007      	beq.n	8001dea <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001dda:	bf00      	nop
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f818 	bl	8001e14 <I2C_GetFlagStatus>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f8      	bne.n	8001ddc <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8001dfc:	e005      	b.n	8001e0a <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d811      	bhi.n	8001e58 <I2C_GetFlagStatus+0x44>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d86a      	bhi.n	8001f10 <I2C_GetFlagStatus+0xfc>
 8001e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <I2C_GetFlagStatus+0x2c>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e63 	.word	0x08001e63
 8001e44:	08001e7b 	.word	0x08001e7b
 8001e48:	08001e93 	.word	0x08001e93
 8001e4c:	08001ef9 	.word	0x08001ef9
 8001e50:	08001ee1 	.word	0x08001ee1
 8001e54:	08001ee1 	.word	0x08001ee1
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4a30      	ldr	r2, [pc, #192]	@ (8001f1c <I2C_GetFlagStatus+0x108>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d024      	beq.n	8001eaa <I2C_GetFlagStatus+0x96>
 8001e60:	e056      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8001e72:	e04d      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	75fb      	strb	r3, [r7, #23]
		break;
 8001e78:	e04a      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8001e8a:	e041      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]
		break;
 8001e90:	e03e      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8001ea2:	e035      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]
		break;
 8001ea8:	e032      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ec6:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d102      	bne.n	8001eda <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8001ed8:	e01a      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
		break;
 8001ede:	e017      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8001ef0:	e00e      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
		break;
 8001ef6:	e00b      	b.n	8001f10 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8001f08:	e001      	b.n	8001f0e <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
		break;
 8001f0e:	bf00      	nop
	}
	}
	return bitstatus;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	00070080 	.word	0x00070080

08001f20 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8001f36:	787b      	ldrb	r3, [r7, #1]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	e003      	b.n	8001f4e <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8001f7c:	e005      	b.n	8001f8a <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8001fb2:	e005      	b.n	8001fc0 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 8001fd0:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <MRCC_InitClock+0x88>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <MRCC_InitClock+0x88>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fda:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <MRCC_InitClock+0x88>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <MRCC_InitClock+0x88>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8001fe8:	bf00      	nop
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MRCC_InitClock+0x88>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f9      	beq.n	8001fea <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MRCC_InitClock+0x8c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <MRCC_InitClock+0x8c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002014:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002018:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MRCC_InitClock+0x8c>)
 800201c:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <MRCC_InitClock+0x8c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002028:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800202c:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a07      	ldr	r2, [pc, #28]	@ (8002058 <MRCC_InitClock+0x8c>)
 800203c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002040:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <MRCC_InitClock+0x8c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6013      	str	r3, [r2, #0]

    return E_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	40021000 	.word	0x40021000
 8002058:	40021004 	.word	0x40021004

0800205c <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	460a      	mov	r2, r1
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	4613      	mov	r3, r2
 800206a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d020      	beq.n	80020b8 <MRCC_EnablePeripheralClock+0x5c>
 8002076:	2b03      	cmp	r3, #3
 8002078:	dc2b      	bgt.n	80020d2 <MRCC_EnablePeripheralClock+0x76>
 800207a:	2b01      	cmp	r3, #1
 800207c:	d002      	beq.n	8002084 <MRCC_EnablePeripheralClock+0x28>
 800207e:	2b02      	cmp	r3, #2
 8002080:	d00d      	beq.n	800209e <MRCC_EnablePeripheralClock+0x42>
 8002082:	e026      	b.n	80020d2 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 8002084:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <MRCC_EnablePeripheralClock+0x88>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <MRCC_EnablePeripheralClock+0x88>)
 8002094:	430b      	orrs	r3, r1
 8002096:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
            break;
 800209c:	e01c      	b.n	80020d8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <MRCC_EnablePeripheralClock+0x8c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	79ba      	ldrb	r2, [r7, #6]
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4611      	mov	r1, r2
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <MRCC_EnablePeripheralClock+0x8c>)
 80020ae:	430b      	orrs	r3, r1
 80020b0:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
            break;
 80020b6:	e00f      	b.n	80020d8 <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MRCC_EnablePeripheralClock+0x90>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	79ba      	ldrb	r2, [r7, #6]
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4611      	mov	r1, r2
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <MRCC_EnablePeripheralClock+0x90>)
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
            break;
 80020d0:	e002      	b.n	80020d8 <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
            break;
 80020d6:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40021014 	.word	0x40021014
 80020e8:	4002101c 	.word	0x4002101c
 80020ec:	40021018 	.word	0x40021018

080020f0 <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				-Support for SPI Full Duplex Master/Slave only  & NSS HW only for slave
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint16 tmpreg_CR1 = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	81fb      	strh	r3, [r7, #14]
	uint16 tmpreg_CR2 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a38      	ldr	r2, [pc, #224]	@ (80021e8 <MCAL_SPI_Init+0xf8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <MCAL_SPI_Init+0x3e>
	{
		Global_SPI_Config1 = *SPI_Config ;
 800210a:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <MCAL_SPI_Init+0xfc>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4614      	mov	r4, r2
 8002110:	461d      	mov	r5, r3
 8002112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002116:	e895 0003 	ldmia.w	r5, {r0, r1}
 800211a:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 800211e:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <MCAL_SPI_Init+0x100>)
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <MCAL_SPI_Init+0xfc>)
 8002122:	601a      	str	r2, [r3, #0]
		MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_SPI1_EN);
 8002124:	210c      	movs	r1, #12
 8002126:	2003      	movs	r0, #3
 8002128:	f7ff ff98 	bl	800205c <MRCC_EnablePeripheralClock>
 800212c:	e014      	b.n	8002158 <MCAL_SPI_Init+0x68>

	}else if (SPIx == SPI2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <MCAL_SPI_Init+0x104>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d110      	bne.n	8002158 <MCAL_SPI_Init+0x68>
	{
		Global_SPI_Config2 = *SPI_Config ;
 8002136:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <MCAL_SPI_Init+0x108>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
 800213e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002142:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002146:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 800214a:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <MCAL_SPI_Init+0x100>)
 800214c:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <MCAL_SPI_Init+0x108>)
 800214e:	605a      	str	r2, [r3, #4]
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 8002150:	210e      	movs	r1, #14
 8002152:	2002      	movs	r0, #2
 8002154:	f7ff ff82 	bl	800205c <MRCC_EnablePeripheralClock>

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 8002158:	2340      	movs	r3, #64	@ 0x40
 800215a:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	4313      	orrs	r3, r2
 8002164:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	885a      	ldrh	r2, [r3, #2]
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	4313      	orrs	r3, r2
 800216e:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	889a      	ldrh	r2, [r3, #4]
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	4313      	orrs	r3, r2
 8002178:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	88da      	ldrh	r2, [r3, #6]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	4313      	orrs	r3, r2
 8002182:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	891a      	ldrh	r2, [r3, #8]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4313      	orrs	r3, r2
 800218c:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	895a      	ldrh	r2, [r3, #10]
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	4313      	orrs	r3, r2
 8002196:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	899b      	ldrh	r3, [r3, #12]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d105      	bne.n	80021ac <MCAL_SPI_Init+0xbc>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	899a      	ldrh	r2, [r3, #12]
 80021a4:	89bb      	ldrh	r3, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	81bb      	strh	r3, [r7, #12]
 80021aa:	e004      	b.n	80021b6 <MCAL_SPI_Init+0xc6>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	899a      	ldrh	r2, [r3, #12]
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	89da      	ldrh	r2, [r3, #14]
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	4313      	orrs	r3, r2
 80021be:	81fb      	strh	r3, [r7, #14]
//
//	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 80021c0:	89fa      	ldrh	r2, [r7, #14]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 80021c6:	89ba      	ldrh	r2, [r7, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	605a      	str	r2, [r3, #4]
	  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40013000 	.word	0x40013000
 80021ec:	20000054 	.word	0x20000054
 80021f0:	2000004c 	.word	0x2000004c
 80021f4:	40003800 	.word	0x40003800
 80021f8:	2000006c 	.word	0x2000006c

080021fc <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16 *pTxBuffer,enum PollingMechism PollingEn )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0 ;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <MCAL_SPI_SendData+0x74>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d102      	bne.n	800221c <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
 800221a:	e005      	b.n	8002228 <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <MCAL_SPI_SendData+0x78>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_Direction_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_Direction_1LINE_transmit_only) {
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <MCAL_SPI_SendData+0x7c>)
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	885b      	ldrh	r3, [r3, #2]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <MCAL_SPI_SendData+0x4a>
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	4a0f      	ldr	r2, [pc, #60]	@ (8002278 <MCAL_SPI_SendData+0x7c>)
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	885b      	ldrh	r3, [r3, #2]
 8002240:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002244:	d10e      	bne.n	8002264 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE));
 800224c:	bf00      	nop
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f9      	beq.n	800224e <MCAL_SPI_SendData+0x52>


		SPIx->SPI_DR =  (*pTxBuffer ) ;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	60da      	str	r2, [r3, #12]
	else
	{
		//SPIx->SPI_DR =  (*pTxBuffer ) ;//todo
	}

}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40013000 	.word	0x40013000
 8002274:	40003800 	.word	0x40003800
 8002278:	2000004c 	.word	0x2000004c

0800227c <MCAL_SPI_GPIO_Set_Pins>:




void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	if (SPIx == SPI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3a      	ldr	r2, [pc, #232]	@ (8002370 <MCAL_SPI_GPIO_Set_Pins+0xf4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d139      	bne.n	8002300 <MCAL_SPI_GPIO_Set_Pins+0x84>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 800228c:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d11a      	bne.n	80022cc <MCAL_SPI_GPIO_Set_Pins+0x50>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	899b      	ldrh	r3, [r3, #12]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d105      	bne.n	80022ac <MCAL_SPI_GPIO_Set_Pins+0x30>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80022a0:	2209      	movs	r2, #9
 80022a2:	2104      	movs	r1, #4
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fa27 	bl	80016f8 <MGPIO_SetPinMode>
				break ;
 80022aa:	bf00      	nop
			}


			//		PA5 : SPI1_SCK
			//			Master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80022ac:	2209      	movs	r2, #9
 80022ae:	2105      	movs	r1, #5
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff fa21 	bl	80016f8 <MGPIO_SetPinMode>


			//		PA6 : SPI1_MISO  (supported only full duplex)
			//			Full duplex / master Input floating

			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_INPUT_FLOATING_MODE);
 80022b6:	2204      	movs	r2, #4
 80022b8:	2106      	movs	r1, #6
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff fa1c 	bl	80016f8 <MGPIO_SetPinMode>
			//todo to suport half duplex and simplex


			//		PA7 : SPI1_MOSI
			//			Full duplex / master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80022c0:	2209      	movs	r2, #9
 80022c2:	2107      	movs	r1, #7
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff fa17 	bl	80016f8 <MGPIO_SetPinMode>
		}


	}

}
 80022ca:	e04c      	b.n	8002366 <MCAL_SPI_GPIO_Set_Pins+0xea>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	899b      	ldrh	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <MCAL_SPI_GPIO_Set_Pins+0x64>
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_INPUT_FLOATING_MODE);
 80022d6:	2204      	movs	r2, #4
 80022d8:	2104      	movs	r1, #4
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff fa0c 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_INPUT_FLOATING_MODE);
 80022e0:	2204      	movs	r2, #4
 80022e2:	2105      	movs	r1, #5
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff fa07 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80022ea:	2209      	movs	r2, #9
 80022ec:	2106      	movs	r1, #6
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff fa02 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_INPUT_FLOATING_MODE);
 80022f4:	2204      	movs	r2, #4
 80022f6:	2107      	movs	r1, #7
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff f9fd 	bl	80016f8 <MGPIO_SetPinMode>
}
 80022fe:	e032      	b.n	8002366 <MCAL_SPI_GPIO_Set_Pins+0xea>
	}else if (SPIx == SPI2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <MCAL_SPI_GPIO_Set_Pins+0xfc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d12e      	bne.n	8002366 <MCAL_SPI_GPIO_Set_Pins+0xea>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d115      	bne.n	800233e <MCAL_SPI_GPIO_Set_Pins+0xc2>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	899b      	ldrh	r3, [r3, #12]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d105      	bne.n	8002328 <MCAL_SPI_GPIO_Set_Pins+0xac>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800231c:	2209      	movs	r2, #9
 800231e:	210c      	movs	r1, #12
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff f9e9 	bl	80016f8 <MGPIO_SetPinMode>
				break ;
 8002326:	bf00      	nop
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8002328:	2209      	movs	r2, #9
 800232a:	210d      	movs	r1, #13
 800232c:	2001      	movs	r0, #1
 800232e:	f7ff f9e3 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8002332:	2209      	movs	r2, #9
 8002334:	210f      	movs	r1, #15
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff f9de 	bl	80016f8 <MGPIO_SetPinMode>
}
 800233c:	e013      	b.n	8002366 <MCAL_SPI_GPIO_Set_Pins+0xea>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	899b      	ldrh	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <MCAL_SPI_GPIO_Set_Pins+0xd6>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_INPUT_FLOATING_MODE);
 8002348:	2204      	movs	r2, #4
 800234a:	210c      	movs	r1, #12
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff f9d3 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_INPUT_FLOATING_MODE);
 8002352:	2204      	movs	r2, #4
 8002354:	210d      	movs	r1, #13
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff f9ce 	bl	80016f8 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800235c:	2209      	movs	r2, #9
 800235e:	210f      	movs	r1, #15
 8002360:	2001      	movs	r0, #1
 8002362:	f7ff f9c9 	bl	80016f8 <MGPIO_SetPinMode>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40013000 	.word	0x40013000
 8002374:	2000004c 	.word	0x2000004c
 8002378:	40003800 	.word	0x40003800

0800237c <STK_uint8CalculateReloadValue>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValue(uint32 Copy_uint32msTime, uint32* P_uint32ReloadValue)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d014      	beq.n	80023ba <STK_uint8CalculateReloadValue+0x3e>
    {
        uint32 Loc_uint32ReloadValue = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32msTime * (STK_AHB_CLOCK_FREQUENCY / 8000)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = ((Copy_uint32msTime* STK_AHB_CLOCK_FREQUENCY) / 1000);
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a6:	d205      	bcs.n	80023b4 <STK_uint8CalculateReloadValue+0x38>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e004      	b.n	80023be <STK_uint8CalculateReloadValue+0x42>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e001      	b.n	80023be <STK_uint8CalculateReloadValue+0x42>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <MSTK_uint8Delay>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8Delay(uint32 Copy_uint32msTime)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValue(Copy_uint32msTime, &Loc_uint32ReloadValue);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffca 	bl	800237c <STK_uint8CalculateReloadValue>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d127      	bne.n	8002442 <MSTK_uint8Delay+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <MSTK_uint8Delay+0x84>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a16      	ldr	r2, [pc, #88]	@ (8002450 <MSTK_uint8Delay+0x84>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 8002404:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MSTK_uint8Delay+0x84>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 8002416:	bf00      	nop
 8002418:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <MSTK_uint8Delay+0x84>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f9      	beq.n	8002418 <MSTK_uint8Delay+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <MSTK_uint8Delay+0x84>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <MSTK_uint8Delay+0x84>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e001      	b.n	8002446 <MSTK_uint8Delay+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	e000e010 	.word	0xe000e010

08002454 <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Handler+0x18>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 8002460:	4b02      	ldr	r3, [pc, #8]	@ (800246c <SysTick_Handler+0x18>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000084 	.word	0x20000084

08002470 <main>:
float32 calculated_sample;
float32 gain_ref;
float32 gain_sample;

int main()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	MRCC_InitClock();
 8002476:	f7ff fda9 	bl	8001fcc <MRCC_InitClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 800247a:	2103      	movs	r1, #3
 800247c:	2003      	movs	r0, #3
 800247e:	f7ff fded 	bl	800205c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8002482:	2100      	movs	r1, #0
 8002484:	2003      	movs	r0, #3
 8002486:	f7ff fde9 	bl	800205c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPA_EN);
 800248a:	2102      	movs	r1, #2
 800248c:	2003      	movs	r0, #3
 800248e:	f7ff fde5 	bl	800205c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8002492:	2100      	movs	r1, #0
 8002494:	2003      	movs	r0, #3
 8002496:	f7ff fde1 	bl	800205c <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 800249a:	210e      	movs	r1, #14
 800249c:	2002      	movs	r0, #2
 800249e:	f7ff fddd 	bl	800205c <MRCC_EnablePeripheralClock>

	adc_init();
 80024a2:	f7fe fe17 	bl	80010d4 <adc_init>
	MCP4151_Init();
 80024a6:	f7fe ffc5 	bl	8001434 <MCP4151_Init>
	uint8 de7k;
	eeprom_write_Nbytes(EEPROM_Slave_address, 7, 1);
 80024aa:	2201      	movs	r2, #1
 80024ac:	2107      	movs	r1, #7
 80024ae:	2050      	movs	r0, #80	@ 0x50
 80024b0:	f7fe fec8 	bl	8001244 <eeprom_write_Nbytes>
	MSTK_uint8Delay(500);
 80024b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024b8:	f7ff ff88 	bl	80023cc <MSTK_uint8Delay>
	eeprom_read_byte(EEPROM_Slave_address, &de7k, 1);
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	2201      	movs	r2, #1
 80024c0:	4619      	mov	r1, r3
 80024c2:	2050      	movs	r0, #80	@ 0x50
 80024c4:	f7fe ff28 	bl	8001318 <eeprom_read_byte>
	MSTK_uint8Delay(500);
 80024c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024cc:	f7ff ff7e 	bl	80023cc <MSTK_uint8Delay>
	while(1)
	{
		read_reference_voltage(&calculated_ref, &gain_ref);
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <main+0x7c>)
 80024d2:	4807      	ldr	r0, [pc, #28]	@ (80024f0 <main+0x80>)
 80024d4:	f7fe fc78 	bl	8000dc8 <read_reference_voltage>
		read_sample_voltage(&calculated_sample, &gain_sample);
 80024d8:	4906      	ldr	r1, [pc, #24]	@ (80024f4 <main+0x84>)
 80024da:	4807      	ldr	r0, [pc, #28]	@ (80024f8 <main+0x88>)
 80024dc:	f7fe fd38 	bl	8000f50 <read_sample_voltage>
		delay_ms(10);
 80024e0:	200a      	movs	r0, #10
 80024e2:	f7ff f8ef 	bl	80016c4 <delay_ms>
		read_reference_voltage(&calculated_ref, &gain_ref);
 80024e6:	bf00      	nop
 80024e8:	e7f2      	b.n	80024d0 <main+0x60>
 80024ea:	bf00      	nop
 80024ec:	20000090 	.word	0x20000090
 80024f0:	20000088 	.word	0x20000088
 80024f4:	20000094 	.word	0x20000094
 80024f8:	2000008c 	.word	0x2000008c

080024fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024fc:	480d      	ldr	r0, [pc, #52]	@ (8002534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <LoopForever+0x6>)
  ldr r1, =_edata
 8002506:	490d      	ldr	r1, [pc, #52]	@ (800253c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <LoopForever+0xe>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800251c:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <LoopForever+0x16>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800252a:	f000 f811 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252e:	f7ff ff9f 	bl	8002470 <main>

08002532 <LoopForever>:

LoopForever:
  b LoopForever
 8002532:	e7fe      	b.n	8002532 <LoopForever>
  ldr   r0, =_estack
 8002534:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800253c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002540:	08002644 	.word	0x08002644
  ldr r2, =_sbss
 8002544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8002548:	20000098 	.word	0x20000098

0800254c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC1_2_IRQHandler>
	...

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	2600      	movs	r6, #0
 8002554:	4d0c      	ldr	r5, [pc, #48]	@ (8002588 <__libc_init_array+0x38>)
 8002556:	4c0d      	ldr	r4, [pc, #52]	@ (800258c <__libc_init_array+0x3c>)
 8002558:	1b64      	subs	r4, r4, r5
 800255a:	10a4      	asrs	r4, r4, #2
 800255c:	42a6      	cmp	r6, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	f000 f860 	bl	8002624 <_init>
 8002564:	2600      	movs	r6, #0
 8002566:	4d0a      	ldr	r5, [pc, #40]	@ (8002590 <__libc_init_array+0x40>)
 8002568:	4c0a      	ldr	r4, [pc, #40]	@ (8002594 <__libc_init_array+0x44>)
 800256a:	1b64      	subs	r4, r4, r5
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	42a6      	cmp	r6, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	f855 3b04 	ldr.w	r3, [r5], #4
 8002578:	4798      	blx	r3
 800257a:	3601      	adds	r6, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002582:	4798      	blx	r3
 8002584:	3601      	adds	r6, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	0800263c 	.word	0x0800263c
 800258c:	0800263c 	.word	0x0800263c
 8002590:	0800263c 	.word	0x0800263c
 8002594:	08002640 	.word	0x08002640

08002598 <round>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800259e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80025a2:	2a13      	cmp	r2, #19
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	460b      	mov	r3, r1
 80025aa:	dc1a      	bgt.n	80025e2 <round+0x4a>
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	da0b      	bge.n	80025c8 <round+0x30>
 80025b0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80025b4:	3201      	adds	r2, #1
 80025b6:	bf04      	itt	eq
 80025b8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80025bc:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80025c0:	2200      	movs	r2, #0
 80025c2:	461d      	mov	r5, r3
 80025c4:	4614      	mov	r4, r2
 80025c6:	e016      	b.n	80025f6 <round+0x5e>
 80025c8:	4815      	ldr	r0, [pc, #84]	@ (8002620 <round+0x88>)
 80025ca:	4110      	asrs	r0, r2
 80025cc:	4001      	ands	r1, r0
 80025ce:	4321      	orrs	r1, r4
 80025d0:	d011      	beq.n	80025f6 <round+0x5e>
 80025d2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80025d6:	fa41 f202 	asr.w	r2, r1, r2
 80025da:	4413      	add	r3, r2
 80025dc:	ea23 0300 	bic.w	r3, r3, r0
 80025e0:	e7ee      	b.n	80025c0 <round+0x28>
 80025e2:	2a33      	cmp	r2, #51	@ 0x33
 80025e4:	dd0a      	ble.n	80025fc <round+0x64>
 80025e6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80025ea:	d104      	bne.n	80025f6 <round+0x5e>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f7fd feef 	bl	80003d0 <__adddf3>
 80025f2:	4604      	mov	r4, r0
 80025f4:	460d      	mov	r5, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8002604:	40f8      	lsrs	r0, r7
 8002606:	4220      	tst	r0, r4
 8002608:	d0f5      	beq.n	80025f6 <round+0x5e>
 800260a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800260e:	2201      	movs	r2, #1
 8002610:	408a      	lsls	r2, r1
 8002612:	1912      	adds	r2, r2, r4
 8002614:	bf28      	it	cs
 8002616:	3301      	addcs	r3, #1
 8002618:	ea22 0200 	bic.w	r2, r2, r0
 800261c:	e7d1      	b.n	80025c2 <round+0x2a>
 800261e:	bf00      	nop
 8002620:	000fffff 	.word	0x000fffff

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr
