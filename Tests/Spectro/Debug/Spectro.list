
Spectro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c30c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800c440  0800c440  0001c440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae8  0800cae8  000205a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caf0  0800caf0  000205a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf0  0800caf0  0001caf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005a0  20000000  0800caf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200005a0  0800d098  000205a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800d098  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000205c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008327  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fc  00000000  00000000  00028933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ce  00000000  00000000  0002b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000051d6  00000000  00000000  0002bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d3c  00000000  00000000  00030e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000148fe  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cbc  00000000  00000000  0004e440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000520fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200005a0 	.word	0x200005a0
 800014c:	00000000 	.word	0x00000000
 8000150:	0800c424 	.word	0x0800c424

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200005a4 	.word	0x200005a4
 800016c:	0800c424 	.word	0x0800c424

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	; 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	3a01      	subs	r2, #1
 8000c06:	bf28      	it	cs
 8000c08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c0c:	d2ed      	bcs.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dba:	2afd      	cmp	r2, #253	; 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	; 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	; 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	; 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2iz>:
 80010f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30f      	bcc.n	800111e <__aeabi_f2iz+0x2a>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d90d      	bls.n	8001124 <__aeabi_f2iz+0x30>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001114:	fa23 f002 	lsr.w	r0, r3, r2
 8001118:	bf18      	it	ne
 800111a:	4240      	negne	r0, r0
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2iz+0x3a>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d105      	bne.n	800113a <__aeabi_f2iz+0x46>
 800112e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001132:	bf08      	it	eq
 8001134:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_ldivmod>:
 8001180:	b97b      	cbnz	r3, 80011a2 <__aeabi_ldivmod+0x22>
 8001182:	b972      	cbnz	r2, 80011a2 <__aeabi_ldivmod+0x22>
 8001184:	2900      	cmp	r1, #0
 8001186:	bfbe      	ittt	lt
 8001188:	2000      	movlt	r0, #0
 800118a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800118e:	e006      	blt.n	800119e <__aeabi_ldivmod+0x1e>
 8001190:	bf08      	it	eq
 8001192:	2800      	cmpeq	r0, #0
 8001194:	bf1c      	itt	ne
 8001196:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800119a:	f04f 30ff 	movne.w	r0, #4294967295
 800119e:	f000 b9dd 	b.w	800155c <__aeabi_idiv0>
 80011a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011aa:	2900      	cmp	r1, #0
 80011ac:	db09      	blt.n	80011c2 <__aeabi_ldivmod+0x42>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db1a      	blt.n	80011e8 <__aeabi_ldivmod+0x68>
 80011b2:	f000 f86d 	bl	8001290 <__udivmoddi4>
 80011b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011be:	b004      	add	sp, #16
 80011c0:	4770      	bx	lr
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db1b      	blt.n	8001204 <__aeabi_ldivmod+0x84>
 80011cc:	f000 f860 	bl	8001290 <__udivmoddi4>
 80011d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d8:	b004      	add	sp, #16
 80011da:	4240      	negs	r0, r0
 80011dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	4770      	bx	lr
 80011e8:	4252      	negs	r2, r2
 80011ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ee:	f000 f84f 	bl	8001290 <__udivmoddi4>
 80011f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fa:	b004      	add	sp, #16
 80011fc:	4240      	negs	r0, r0
 80011fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f841 	bl	8001290 <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4252      	negs	r2, r2
 800121a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121e:	4770      	bx	lr

08001220 <__aeabi_d2lz>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4605      	mov	r5, r0
 8001224:	460c      	mov	r4, r1
 8001226:	2200      	movs	r2, #0
 8001228:	2300      	movs	r3, #0
 800122a:	4628      	mov	r0, r5
 800122c:	4621      	mov	r1, r4
 800122e:	f7ff fbdf 	bl	80009f0 <__aeabi_dcmplt>
 8001232:	b928      	cbnz	r0, 8001240 <__aeabi_d2lz+0x20>
 8001234:	4628      	mov	r0, r5
 8001236:	4621      	mov	r1, r4
 8001238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800123c:	f000 b80a 	b.w	8001254 <__aeabi_d2ulz>
 8001240:	4628      	mov	r0, r5
 8001242:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001246:	f000 f805 	bl	8001254 <__aeabi_d2ulz>
 800124a:	4240      	negs	r0, r0
 800124c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001250:	bd38      	pop	{r3, r4, r5, pc}
 8001252:	bf00      	nop

08001254 <__aeabi_d2ulz>:
 8001254:	b5d0      	push	{r4, r6, r7, lr}
 8001256:	2200      	movs	r2, #0
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <__aeabi_d2ulz+0x34>)
 800125a:	4606      	mov	r6, r0
 800125c:	460f      	mov	r7, r1
 800125e:	f7ff f955 	bl	800050c <__aeabi_dmul>
 8001262:	f7ff fc03 	bl	8000a6c <__aeabi_d2uiz>
 8001266:	4604      	mov	r4, r0
 8001268:	f7ff f8d6 	bl	8000418 <__aeabi_ui2d>
 800126c:	2200      	movs	r2, #0
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <__aeabi_d2ulz+0x38>)
 8001270:	f7ff f94c 	bl	800050c <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4630      	mov	r0, r6
 800127a:	4639      	mov	r1, r7
 800127c:	f7fe ff8e 	bl	800019c <__aeabi_dsub>
 8001280:	f7ff fbf4 	bl	8000a6c <__aeabi_d2uiz>
 8001284:	4621      	mov	r1, r4
 8001286:	bdd0      	pop	{r4, r6, r7, pc}
 8001288:	3df00000 	.word	0x3df00000
 800128c:	41f00000 	.word	0x41f00000

08001290 <__udivmoddi4>:
 8001290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001294:	9e08      	ldr	r6, [sp, #32]
 8001296:	460d      	mov	r5, r1
 8001298:	4604      	mov	r4, r0
 800129a:	468e      	mov	lr, r1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d14c      	bne.n	800133a <__udivmoddi4+0xaa>
 80012a0:	428a      	cmp	r2, r1
 80012a2:	4694      	mov	ip, r2
 80012a4:	d967      	bls.n	8001376 <__udivmoddi4+0xe6>
 80012a6:	fab2 f382 	clz	r3, r2
 80012aa:	b153      	cbz	r3, 80012c2 <__udivmoddi4+0x32>
 80012ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b0:	f1c3 0220 	rsb	r2, r3, #32
 80012b4:	fa01 fe03 	lsl.w	lr, r1, r3
 80012b8:	fa20 f202 	lsr.w	r2, r0, r2
 80012bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80012c0:	409c      	lsls	r4, r3
 80012c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c6:	fbbe f1f7 	udiv	r1, lr, r7
 80012ca:	fa1f f58c 	uxth.w	r5, ip
 80012ce:	fb07 ee11 	mls	lr, r7, r1, lr
 80012d2:	fb01 f005 	mul.w	r0, r1, r5
 80012d6:	0c22      	lsrs	r2, r4, #16
 80012d8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80012dc:	4290      	cmp	r0, r2
 80012de:	d90a      	bls.n	80012f6 <__udivmoddi4+0x66>
 80012e0:	eb1c 0202 	adds.w	r2, ip, r2
 80012e4:	f101 3eff 	add.w	lr, r1, #4294967295
 80012e8:	f080 8119 	bcs.w	800151e <__udivmoddi4+0x28e>
 80012ec:	4290      	cmp	r0, r2
 80012ee:	f240 8116 	bls.w	800151e <__udivmoddi4+0x28e>
 80012f2:	3902      	subs	r1, #2
 80012f4:	4462      	add	r2, ip
 80012f6:	1a12      	subs	r2, r2, r0
 80012f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80012fc:	fb07 2210 	mls	r2, r7, r0, r2
 8001300:	fb00 f505 	mul.w	r5, r0, r5
 8001304:	b2a4      	uxth	r4, r4
 8001306:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800130a:	42a5      	cmp	r5, r4
 800130c:	d90a      	bls.n	8001324 <__udivmoddi4+0x94>
 800130e:	eb1c 0404 	adds.w	r4, ip, r4
 8001312:	f100 32ff 	add.w	r2, r0, #4294967295
 8001316:	f080 8104 	bcs.w	8001522 <__udivmoddi4+0x292>
 800131a:	42a5      	cmp	r5, r4
 800131c:	f240 8101 	bls.w	8001522 <__udivmoddi4+0x292>
 8001320:	4464      	add	r4, ip
 8001322:	3802      	subs	r0, #2
 8001324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001328:	2100      	movs	r1, #0
 800132a:	1b64      	subs	r4, r4, r5
 800132c:	b11e      	cbz	r6, 8001336 <__udivmoddi4+0xa6>
 800132e:	40dc      	lsrs	r4, r3
 8001330:	2300      	movs	r3, #0
 8001332:	e9c6 4300 	strd	r4, r3, [r6]
 8001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133a:	428b      	cmp	r3, r1
 800133c:	d908      	bls.n	8001350 <__udivmoddi4+0xc0>
 800133e:	2e00      	cmp	r6, #0
 8001340:	f000 80ea 	beq.w	8001518 <__udivmoddi4+0x288>
 8001344:	2100      	movs	r1, #0
 8001346:	e9c6 0500 	strd	r0, r5, [r6]
 800134a:	4608      	mov	r0, r1
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	fab3 f183 	clz	r1, r3
 8001354:	2900      	cmp	r1, #0
 8001356:	d148      	bne.n	80013ea <__udivmoddi4+0x15a>
 8001358:	42ab      	cmp	r3, r5
 800135a:	d302      	bcc.n	8001362 <__udivmoddi4+0xd2>
 800135c:	4282      	cmp	r2, r0
 800135e:	f200 80f8 	bhi.w	8001552 <__udivmoddi4+0x2c2>
 8001362:	1a84      	subs	r4, r0, r2
 8001364:	eb65 0203 	sbc.w	r2, r5, r3
 8001368:	2001      	movs	r0, #1
 800136a:	4696      	mov	lr, r2
 800136c:	2e00      	cmp	r6, #0
 800136e:	d0e2      	beq.n	8001336 <__udivmoddi4+0xa6>
 8001370:	e9c6 4e00 	strd	r4, lr, [r6]
 8001374:	e7df      	b.n	8001336 <__udivmoddi4+0xa6>
 8001376:	b902      	cbnz	r2, 800137a <__udivmoddi4+0xea>
 8001378:	deff      	udf	#255	; 0xff
 800137a:	fab2 f382 	clz	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 808e 	bne.w	80014a0 <__udivmoddi4+0x210>
 8001384:	1a88      	subs	r0, r1, r2
 8001386:	2101      	movs	r1, #1
 8001388:	0c17      	lsrs	r7, r2, #16
 800138a:	fa1f fe82 	uxth.w	lr, r2
 800138e:	fbb0 f5f7 	udiv	r5, r0, r7
 8001392:	fb07 0015 	mls	r0, r7, r5, r0
 8001396:	0c22      	lsrs	r2, r4, #16
 8001398:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800139c:	fb0e f005 	mul.w	r0, lr, r5
 80013a0:	4290      	cmp	r0, r2
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x126>
 80013a4:	eb1c 0202 	adds.w	r2, ip, r2
 80013a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80013ac:	d202      	bcs.n	80013b4 <__udivmoddi4+0x124>
 80013ae:	4290      	cmp	r0, r2
 80013b0:	f200 80cc 	bhi.w	800154c <__udivmoddi4+0x2bc>
 80013b4:	4645      	mov	r5, r8
 80013b6:	1a12      	subs	r2, r2, r0
 80013b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80013bc:	fb07 2210 	mls	r2, r7, r0, r2
 80013c0:	fb0e fe00 	mul.w	lr, lr, r0
 80013c4:	b2a4      	uxth	r4, r4
 80013c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80013ca:	45a6      	cmp	lr, r4
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x150>
 80013ce:	eb1c 0404 	adds.w	r4, ip, r4
 80013d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80013d6:	d202      	bcs.n	80013de <__udivmoddi4+0x14e>
 80013d8:	45a6      	cmp	lr, r4
 80013da:	f200 80b4 	bhi.w	8001546 <__udivmoddi4+0x2b6>
 80013de:	4610      	mov	r0, r2
 80013e0:	eba4 040e 	sub.w	r4, r4, lr
 80013e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80013e8:	e7a0      	b.n	800132c <__udivmoddi4+0x9c>
 80013ea:	f1c1 0720 	rsb	r7, r1, #32
 80013ee:	408b      	lsls	r3, r1
 80013f0:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f4:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f8:	fa25 fa07 	lsr.w	sl, r5, r7
 80013fc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001400:	fbba f8f9 	udiv	r8, sl, r9
 8001404:	408d      	lsls	r5, r1
 8001406:	fa20 f307 	lsr.w	r3, r0, r7
 800140a:	fb09 aa18 	mls	sl, r9, r8, sl
 800140e:	fa1f fe8c 	uxth.w	lr, ip
 8001412:	432b      	orrs	r3, r5
 8001414:	fa00 f501 	lsl.w	r5, r0, r1
 8001418:	fb08 f00e 	mul.w	r0, r8, lr
 800141c:	0c1c      	lsrs	r4, r3, #16
 800141e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001422:	42a0      	cmp	r0, r4
 8001424:	fa02 f201 	lsl.w	r2, r2, r1
 8001428:	d90b      	bls.n	8001442 <__udivmoddi4+0x1b2>
 800142a:	eb1c 0404 	adds.w	r4, ip, r4
 800142e:	f108 3aff 	add.w	sl, r8, #4294967295
 8001432:	f080 8086 	bcs.w	8001542 <__udivmoddi4+0x2b2>
 8001436:	42a0      	cmp	r0, r4
 8001438:	f240 8083 	bls.w	8001542 <__udivmoddi4+0x2b2>
 800143c:	f1a8 0802 	sub.w	r8, r8, #2
 8001440:	4464      	add	r4, ip
 8001442:	1a24      	subs	r4, r4, r0
 8001444:	b298      	uxth	r0, r3
 8001446:	fbb4 f3f9 	udiv	r3, r4, r9
 800144a:	fb09 4413 	mls	r4, r9, r3, r4
 800144e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001452:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001456:	45a6      	cmp	lr, r4
 8001458:	d908      	bls.n	800146c <__udivmoddi4+0x1dc>
 800145a:	eb1c 0404 	adds.w	r4, ip, r4
 800145e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001462:	d26a      	bcs.n	800153a <__udivmoddi4+0x2aa>
 8001464:	45a6      	cmp	lr, r4
 8001466:	d968      	bls.n	800153a <__udivmoddi4+0x2aa>
 8001468:	3b02      	subs	r3, #2
 800146a:	4464      	add	r4, ip
 800146c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001470:	fba0 9302 	umull	r9, r3, r0, r2
 8001474:	eba4 040e 	sub.w	r4, r4, lr
 8001478:	429c      	cmp	r4, r3
 800147a:	46c8      	mov	r8, r9
 800147c:	469e      	mov	lr, r3
 800147e:	d354      	bcc.n	800152a <__udivmoddi4+0x29a>
 8001480:	d051      	beq.n	8001526 <__udivmoddi4+0x296>
 8001482:	2e00      	cmp	r6, #0
 8001484:	d067      	beq.n	8001556 <__udivmoddi4+0x2c6>
 8001486:	ebb5 0308 	subs.w	r3, r5, r8
 800148a:	eb64 040e 	sbc.w	r4, r4, lr
 800148e:	40cb      	lsrs	r3, r1
 8001490:	fa04 f707 	lsl.w	r7, r4, r7
 8001494:	431f      	orrs	r7, r3
 8001496:	40cc      	lsrs	r4, r1
 8001498:	e9c6 7400 	strd	r7, r4, [r6]
 800149c:	2100      	movs	r1, #0
 800149e:	e74a      	b.n	8001336 <__udivmoddi4+0xa6>
 80014a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80014a4:	f1c3 0020 	rsb	r0, r3, #32
 80014a8:	40c1      	lsrs	r1, r0
 80014aa:	409d      	lsls	r5, r3
 80014ac:	fa24 f000 	lsr.w	r0, r4, r0
 80014b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014b4:	4328      	orrs	r0, r5
 80014b6:	fbb1 f5f7 	udiv	r5, r1, r7
 80014ba:	fb07 1115 	mls	r1, r7, r5, r1
 80014be:	fa1f fe8c 	uxth.w	lr, ip
 80014c2:	0c02      	lsrs	r2, r0, #16
 80014c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014c8:	fb05 f10e 	mul.w	r1, r5, lr
 80014cc:	4291      	cmp	r1, r2
 80014ce:	fa04 f403 	lsl.w	r4, r4, r3
 80014d2:	d908      	bls.n	80014e6 <__udivmoddi4+0x256>
 80014d4:	eb1c 0202 	adds.w	r2, ip, r2
 80014d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80014dc:	d22f      	bcs.n	800153e <__udivmoddi4+0x2ae>
 80014de:	4291      	cmp	r1, r2
 80014e0:	d92d      	bls.n	800153e <__udivmoddi4+0x2ae>
 80014e2:	3d02      	subs	r5, #2
 80014e4:	4462      	add	r2, ip
 80014e6:	1a52      	subs	r2, r2, r1
 80014e8:	fbb2 f1f7 	udiv	r1, r2, r7
 80014ec:	fb07 2211 	mls	r2, r7, r1, r2
 80014f0:	b280      	uxth	r0, r0
 80014f2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80014f6:	fb01 f20e 	mul.w	r2, r1, lr
 80014fa:	4282      	cmp	r2, r0
 80014fc:	d908      	bls.n	8001510 <__udivmoddi4+0x280>
 80014fe:	eb1c 0000 	adds.w	r0, ip, r0
 8001502:	f101 38ff 	add.w	r8, r1, #4294967295
 8001506:	d216      	bcs.n	8001536 <__udivmoddi4+0x2a6>
 8001508:	4282      	cmp	r2, r0
 800150a:	d914      	bls.n	8001536 <__udivmoddi4+0x2a6>
 800150c:	3902      	subs	r1, #2
 800150e:	4460      	add	r0, ip
 8001510:	1a80      	subs	r0, r0, r2
 8001512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001516:	e73a      	b.n	800138e <__udivmoddi4+0xfe>
 8001518:	4631      	mov	r1, r6
 800151a:	4630      	mov	r0, r6
 800151c:	e70b      	b.n	8001336 <__udivmoddi4+0xa6>
 800151e:	4671      	mov	r1, lr
 8001520:	e6e9      	b.n	80012f6 <__udivmoddi4+0x66>
 8001522:	4610      	mov	r0, r2
 8001524:	e6fe      	b.n	8001324 <__udivmoddi4+0x94>
 8001526:	454d      	cmp	r5, r9
 8001528:	d2ab      	bcs.n	8001482 <__udivmoddi4+0x1f2>
 800152a:	ebb9 0802 	subs.w	r8, r9, r2
 800152e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001532:	3801      	subs	r0, #1
 8001534:	e7a5      	b.n	8001482 <__udivmoddi4+0x1f2>
 8001536:	4641      	mov	r1, r8
 8001538:	e7ea      	b.n	8001510 <__udivmoddi4+0x280>
 800153a:	4603      	mov	r3, r0
 800153c:	e796      	b.n	800146c <__udivmoddi4+0x1dc>
 800153e:	4645      	mov	r5, r8
 8001540:	e7d1      	b.n	80014e6 <__udivmoddi4+0x256>
 8001542:	46d0      	mov	r8, sl
 8001544:	e77d      	b.n	8001442 <__udivmoddi4+0x1b2>
 8001546:	4464      	add	r4, ip
 8001548:	3802      	subs	r0, #2
 800154a:	e749      	b.n	80013e0 <__udivmoddi4+0x150>
 800154c:	3d02      	subs	r5, #2
 800154e:	4462      	add	r2, ip
 8001550:	e731      	b.n	80013b6 <__udivmoddi4+0x126>
 8001552:	4608      	mov	r0, r1
 8001554:	e70a      	b.n	800136c <__udivmoddi4+0xdc>
 8001556:	4631      	mov	r1, r6
 8001558:	e6ed      	b.n	8001336 <__udivmoddi4+0xa6>
 800155a:	bf00      	nop

0800155c <__aeabi_idiv0>:
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <SCommands_Init>:
#include "SCommands_Interface.h"
#include "SCommands_Private.h"


Std_ReturnType SCommands_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HESP32_SetCommandCallbackFunction       (0, SCommands_GetUVStatus);
 8001564:	493c      	ldr	r1, [pc, #240]	; (8001658 <SCommands_Init+0xf8>)
 8001566:	2000      	movs	r0, #0
 8001568:	f001 fef2 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (1, SCommands_SetUVOn);
 800156c:	493b      	ldr	r1, [pc, #236]	; (800165c <SCommands_Init+0xfc>)
 800156e:	2001      	movs	r0, #1
 8001570:	f001 feee 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (2, SCommands_SetUVOff);
 8001574:	493a      	ldr	r1, [pc, #232]	; (8001660 <SCommands_Init+0x100>)
 8001576:	2002      	movs	r0, #2
 8001578:	f001 feea 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (3, SCommands_GetVisStatus);
 800157c:	4939      	ldr	r1, [pc, #228]	; (8001664 <SCommands_Init+0x104>)
 800157e:	2003      	movs	r0, #3
 8001580:	f001 fee6 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (4, SCommands_SetVisOn);
 8001584:	4938      	ldr	r1, [pc, #224]	; (8001668 <SCommands_Init+0x108>)
 8001586:	2004      	movs	r0, #4
 8001588:	f001 fee2 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (5, SCommands_SetVisOff);
 800158c:	4937      	ldr	r1, [pc, #220]	; (800166c <SCommands_Init+0x10c>)
 800158e:	2005      	movs	r0, #5
 8001590:	f001 fede 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (6, SCommands_GetSupplyVoltages);
 8001594:	4936      	ldr	r1, [pc, #216]	; (8001670 <SCommands_Init+0x110>)
 8001596:	2006      	movs	r0, #6
 8001598:	f001 feda 	bl	8003350 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackFunction       (7, SCommands_SendCurrentMotorsSteps);
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <SCommands_Init+0x114>)
 800159e:	2007      	movs	r0, #7
 80015a0:	f001 fed6 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (8, SCommands_HomeLampMotor);
 80015a4:	4934      	ldr	r1, [pc, #208]	; (8001678 <SCommands_Init+0x118>)
 80015a6:	2008      	movs	r0, #8
 80015a8:	f001 fed2 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (9, SCommands_HomeWLSelectMotor);
 80015ac:	4933      	ldr	r1, [pc, #204]	; (800167c <SCommands_Init+0x11c>)
 80015ae:	2009      	movs	r0, #9
 80015b0:	f001 fece 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (10, SCommands_HomeFilterSelectMotor);
 80015b4:	4932      	ldr	r1, [pc, #200]	; (8001680 <SCommands_Init+0x120>)
 80015b6:	200a      	movs	r0, #10
 80015b8:	f001 feca 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (11, SCommands_SendCurrentWL);
 80015bc:	4931      	ldr	r1, [pc, #196]	; (8001684 <SCommands_Init+0x124>)
 80015be:	200b      	movs	r0, #11
 80015c0:	f001 fec6 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (12, SCommands_SendCurrentDateTime);
 80015c4:	4930      	ldr	r1, [pc, #192]	; (8001688 <SCommands_Init+0x128>)
 80015c6:	200c      	movs	r0, #12
 80015c8:	f001 fec2 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (13, SCommands_SendCurrentDetectorValues);
 80015cc:	492f      	ldr	r1, [pc, #188]	; (800168c <SCommands_Init+0x12c>)
 80015ce:	200d      	movs	r0, #13
 80015d0:	f001 febe 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (14, SCommands_GetLampMotorPosition);
 80015d4:	492e      	ldr	r1, [pc, #184]	; (8001690 <SCommands_Init+0x130>)
 80015d6:	200e      	movs	r0, #14
 80015d8:	f001 feba 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (15, SCommands_SetLampMotorVisible);
 80015dc:	492d      	ldr	r1, [pc, #180]	; (8001694 <SCommands_Init+0x134>)
 80015de:	200f      	movs	r0, #15
 80015e0:	f001 feb6 	bl	8003350 <HESP32_SetCommandCallbackFunction>
	HESP32_SetCommandCallbackFunction       (16, SCommands_SetLampMotorUV);
 80015e4:	492c      	ldr	r1, [pc, #176]	; (8001698 <SCommands_Init+0x138>)
 80015e6:	2010      	movs	r0, #16
 80015e8:	f001 feb2 	bl	8003350 <HESP32_SetCommandCallbackFunction>

	HESP32_SetCommandCallbackArgFunction    (17, SCommands_UpdateDateTime);
 80015ec:	492b      	ldr	r1, [pc, #172]	; (800169c <SCommands_Init+0x13c>)
 80015ee:	2011      	movs	r0, #17
 80015f0:	f001 fece 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (18, SCommands_SaveFilterMotorCalibSteps);
 80015f4:	492a      	ldr	r1, [pc, #168]	; (80016a0 <SCommands_Init+0x140>)
 80015f6:	2012      	movs	r0, #18
 80015f8:	f001 feca 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (19, SCommands_SaveFilterMotorCalibWL);
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <SCommands_Init+0x144>)
 80015fe:	2013      	movs	r0, #19
 8001600:	f001 fec6 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (20, SCommands_StartOperation);
 8001604:	4928      	ldr	r1, [pc, #160]	; (80016a8 <SCommands_Init+0x148>)
 8001606:	2014      	movs	r0, #20
 8001608:	f001 fec2 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (21, SCommands_SetReferenceGain);
 800160c:	4927      	ldr	r1, [pc, #156]	; (80016ac <SCommands_Init+0x14c>)
 800160e:	2015      	movs	r0, #21
 8001610:	f001 febe 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (22, SCommands_SetSampleGain);
 8001614:	4926      	ldr	r1, [pc, #152]	; (80016b0 <SCommands_Init+0x150>)
 8001616:	2016      	movs	r0, #22
 8001618:	f001 feba 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (23, SCommands_MoveFilterLeft);
 800161c:	4925      	ldr	r1, [pc, #148]	; (80016b4 <SCommands_Init+0x154>)
 800161e:	2017      	movs	r0, #23
 8001620:	f001 feb6 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (24, SCommands_MoveFilterRight);
 8001624:	4924      	ldr	r1, [pc, #144]	; (80016b8 <SCommands_Init+0x158>)
 8001626:	2018      	movs	r0, #24
 8001628:	f001 feb2 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (25, SCommands_SelectFilter);
 800162c:	4923      	ldr	r1, [pc, #140]	; (80016bc <SCommands_Init+0x15c>)
 800162e:	2019      	movs	r0, #25
 8001630:	f001 feae 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (26, SCommands_SelectGratingWL);
 8001634:	4922      	ldr	r1, [pc, #136]	; (80016c0 <SCommands_Init+0x160>)
 8001636:	201a      	movs	r0, #26
 8001638:	f001 feaa 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (27, SCommands_MoveGratingLeft);
 800163c:	4921      	ldr	r1, [pc, #132]	; (80016c4 <SCommands_Init+0x164>)
 800163e:	201b      	movs	r0, #27
 8001640:	f001 fea6 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>
	HESP32_SetCommandCallbackArgFunction    (28, SCommands_MoveGratingRight);
 8001644:	4920      	ldr	r1, [pc, #128]	; (80016c8 <SCommands_Init+0x168>)
 8001646:	201c      	movs	r0, #28
 8001648:	f001 fea2 	bl	8003390 <HESP32_SetCommandCallbackArgFunction>

	HESP32_InitInterface();
 800164c:	f001 fe36 	bl	80032bc <HESP32_InitInterface>

	return E_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	080016cd 	.word	0x080016cd
 800165c:	08001719 	.word	0x08001719
 8001660:	08001741 	.word	0x08001741
 8001664:	08001769 	.word	0x08001769
 8001668:	080017b5 	.word	0x080017b5
 800166c:	080017dd 	.word	0x080017dd
 8001670:	08001805 	.word	0x08001805
 8001674:	08001a59 	.word	0x08001a59
 8001678:	08001ac3 	.word	0x08001ac3
 800167c:	08001b09 	.word	0x08001b09
 8001680:	08001b4f 	.word	0x08001b4f
 8001684:	08001b95 	.word	0x08001b95
 8001688:	08001c95 	.word	0x08001c95
 800168c:	08001cc9 	.word	0x08001cc9
 8001690:	08001be9 	.word	0x08001be9
 8001694:	08001c2d 	.word	0x08001c2d
 8001698:	08001c61 	.word	0x08001c61
 800169c:	08001dd5 	.word	0x08001dd5
 80016a0:	08001f29 	.word	0x08001f29
 80016a4:	08001f79 	.word	0x08001f79
 80016a8:	08001fc9 	.word	0x08001fc9
 80016ac:	0800212d 	.word	0x0800212d
 80016b0:	08002181 	.word	0x08002181
 80016b4:	08002225 	.word	0x08002225
 80016b8:	080021d5 	.word	0x080021d5
 80016bc:	08002275 	.word	0x08002275
 80016c0:	080022c1 	.word	0x080022c1
 80016c4:	08002315 	.word	0x08002315
 80016c8:	08002365 	.word	0x08002365

080016cc <SCommands_GetUVStatus>:

void SCommands_GetUVStatus(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f001 fb00 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint8 Loc_uint8LampStatus = MGPIO_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	71fb      	strb	r3, [r7, #7]
	MGPIO_GetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, &Loc_uint8LampStatus);
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	461a      	mov	r2, r3
 80016e0:	2109      	movs	r1, #9
 80016e2:	2000      	movs	r0, #0
 80016e4:	f003 fe6e 	bl	80053c4 <MGPIO_GetPinValue>
	if(Loc_uint8LampStatus == MGPIO_HIGH)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d103      	bne.n	80016f6 <SCommands_GetUVStatus+0x2a>
	{
		HESP32_SendCommand("on");
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <SCommands_GetUVStatus+0x44>)
 80016f0:	f001 fe12 	bl	8003318 <HESP32_SendCommand>
 80016f4:	e005      	b.n	8001702 <SCommands_GetUVStatus+0x36>
	}
	else if(Loc_uint8LampStatus == MGPIO_LOW)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <SCommands_GetUVStatus+0x36>
	{
		HESP32_SendCommand("off");
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <SCommands_GetUVStatus+0x48>)
 80016fe:	f001 fe0b 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 8001702:	2000      	movs	r0, #0
 8001704:	f001 fae8 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	0800c440 	.word	0x0800c440
 8001714:	0800c444 	.word	0x0800c444

08001718 <SCommands_SetUVOn>:


void SCommands_SetUVOn(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 800171c:	2001      	movs	r0, #1
 800171e:	f001 fadb 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
 8001722:	2201      	movs	r2, #1
 8001724:	2109      	movs	r1, #9
 8001726:	2000      	movs	r0, #0
 8001728:	f003 fdb2 	bl	8005290 <MGPIO_SetPinValue>
	HESP32_SendCommand("on");
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <SCommands_SetUVOn+0x24>)
 800172e:	f001 fdf3 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 8001732:	2000      	movs	r0, #0
 8001734:	f001 fad0 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800c440 	.word	0x0800c440

08001740 <SCommands_SetUVOff>:


void SCommands_SetUVOff(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 fac7 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	MGPIO_SetPinValue(SPECTRO_UV_POWER_CONTROL_PORT_ID, SPECTRO_UV_POWER_CONTROL_PIN_ID, MGPIO_LOW);
 800174a:	2200      	movs	r2, #0
 800174c:	2109      	movs	r1, #9
 800174e:	2000      	movs	r0, #0
 8001750:	f003 fd9e 	bl	8005290 <MGPIO_SetPinValue>
	HESP32_SendCommand("off");
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <SCommands_SetUVOff+0x24>)
 8001756:	f001 fddf 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("on");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 800175a:	2000      	movs	r0, #0
 800175c:	f001 fabc 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800c444 	.word	0x0800c444

08001768 <SCommands_GetVisStatus>:


void SCommands_GetVisStatus(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 800176e:	2001      	movs	r0, #1
 8001770:	f001 fab2 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint8 Loc_uint8LampStatus = MGPIO_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]
	MGPIO_GetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, &Loc_uint8LampStatus);
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	461a      	mov	r2, r3
 800177c:	210e      	movs	r1, #14
 800177e:	2001      	movs	r0, #1
 8001780:	f003 fe20 	bl	80053c4 <MGPIO_GetPinValue>
	if(Loc_uint8LampStatus == MGPIO_HIGH)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d103      	bne.n	8001792 <SCommands_GetVisStatus+0x2a>
	{
		HESP32_SendCommand("on");
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <SCommands_GetVisStatus+0x44>)
 800178c:	f001 fdc4 	bl	8003318 <HESP32_SendCommand>
 8001790:	e005      	b.n	800179e <SCommands_GetVisStatus+0x36>
	}
	else if(Loc_uint8LampStatus == MGPIO_LOW)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <SCommands_GetVisStatus+0x36>
	{
		HESP32_SendCommand("off");
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <SCommands_GetVisStatus+0x48>)
 800179a:	f001 fdbd 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 800179e:	2000      	movs	r0, #0
 80017a0:	f001 fa9a 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0800c440 	.word	0x0800c440
 80017b0:	0800c444 	.word	0x0800c444

080017b4 <SCommands_SetVisOn>:


void SCommands_SetVisOn(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f001 fa8d 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_HIGH);
 80017be:	2201      	movs	r2, #1
 80017c0:	210e      	movs	r1, #14
 80017c2:	2001      	movs	r0, #1
 80017c4:	f003 fd64 	bl	8005290 <MGPIO_SetPinValue>
	HESP32_SendCommand("on");
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <SCommands_SetVisOn+0x24>)
 80017ca:	f001 fda5 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("off");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 fa82 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800c440 	.word	0x0800c440

080017dc <SCommands_SetVisOff>:


void SCommands_SetVisOff(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f001 fa79 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	MGPIO_SetPinValue(SPECTRO_VIS_POWER_CONTROL_PORT_ID, SPECTRO_VIS_POWER_CONTROL_PIN_ID, MGPIO_LOW);
 80017e6:	2200      	movs	r2, #0
 80017e8:	210e      	movs	r1, #14
 80017ea:	2001      	movs	r0, #1
 80017ec:	f003 fd50 	bl	8005290 <MGPIO_SetPinValue>
	HESP32_SendCommand("off");
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <SCommands_SetVisOff+0x24>)
 80017f2:	f001 fd91 	bl	8003318 <HESP32_SendCommand>
	//}
	//else
	//{
	//    HESP32_SendCommand("on");
	//}
	SpectroStatus_SetNewStatus(IDLE);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f001 fa6e 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800c444 	.word	0x0800c444

08001804 <SCommands_GetSupplyVoltages>:

void SCommands_GetSupplyVoltages(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0ae      	sub	sp, #184	; 0xb8
 8001808:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 800180a:	2001      	movs	r0, #1
 800180c:	f001 fa64 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint16 Loc_uint16VoltageConversion = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	float32 Loc_float32VoltageValue = 0.0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint8 glbl_uint8VoltageBuffer[5][32] = {{0}};
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	22a0      	movs	r2, #160	; 0xa0
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f006 fb63 	bl	8007ef2 <memset>
	uint16 Loc_uint16EnteredVoltageConversion = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	80fb      	strh	r3, [r7, #6]
	uint16 Loc_uint16_33VoltageConversion = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	80bb      	strh	r3, [r7, #4]
	float32 Loc_float32EnteredVoltageValue = 0.0;
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float32 Loc_float32_33VoltageValue = 0.0;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*************************************************P12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_POS_12, &Loc_uint16VoltageConversion);
 8001844:	f107 03aa 	add.w	r3, r7, #170	; 0xaa
 8001848:	4619      	mov	r1, r3
 800184a:	2004      	movs	r0, #4
 800184c:	f002 fb7a 	bl	8003f44 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 8001850:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa2f 	bl	8000cb8 <__aeabi_ui2f>
 800185a:	4603      	mov	r3, r0
 800185c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb35 	bl	8000ed0 <__aeabi_fdiv>
 8001866:	4603      	mov	r3, r0
 8001868:	4978      	ldr	r1, [pc, #480]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa7c 	bl	8000d68 <__aeabi_fmul>
 8001870:	4603      	mov	r3, r0
 8001872:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa76 	bl	8000d68 <__aeabi_fmul>
 800187c:	4603      	mov	r3, r0
 800187e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	float_to_string_manual((glbl_uint8VoltageBuffer[0] + 1),Loc_float32VoltageValue, 3);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	3301      	adds	r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fba0 	bl	8002fd4 <float_to_string_manual>
	glbl_uint8VoltageBuffer[0][0] = '+';
 8001894:	232b      	movs	r3, #43	; 0x2b
 8001896:	723b      	strb	r3, [r7, #8]

	/************************************************N12*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_DCDC_NEG_12, &Loc_uint16EnteredVoltageConversion);
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	4619      	mov	r1, r3
 800189c:	2001      	movs	r0, #1
 800189e:	f002 fb51 	bl	8003f44 <SPWRVolt_GetVoltage>
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16_33VoltageConversion);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	2000      	movs	r0, #0
 80018a8:	f002 fb4c 	bl	8003f44 <SPWRVolt_GetVoltage>

	Loc_float32EnteredVoltageValue = (float32)((float32)((float32)Loc_uint16EnteredVoltageConversion / 4096) * 3.3f) ;
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa02 	bl	8000cb8 <__aeabi_ui2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb08 	bl	8000ed0 <__aeabi_fdiv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4962      	ldr	r1, [pc, #392]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa4f 	bl	8000d68 <__aeabi_fmul>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	Loc_float32_33VoltageValue = (float32)((float32)((float32)Loc_uint16_33VoltageConversion / 4096) * 3.3f) * 2 ;
 80018d0:	88bb      	ldrh	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f9f0 	bl	8000cb8 <__aeabi_ui2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff faf6 	bl	8000ed0 <__aeabi_fdiv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4959      	ldr	r1, [pc, #356]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fa3d 	bl	8000d68 <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f930 	bl	8000b58 <__addsf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	Loc_float32VoltageValue = ((Loc_float32_33VoltageValue - Loc_float32EnteredVoltageValue) * 11) - 3.3f;
 80018fe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001902:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001906:	f7ff f925 	bl	8000b54 <__aeabi_fsub>
 800190a:	4603      	mov	r3, r0
 800190c:	4950      	ldr	r1, [pc, #320]	; (8001a50 <SCommands_GetSupplyVoltages+0x24c>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fa2a 	bl	8000d68 <__aeabi_fmul>
 8001914:	4603      	mov	r3, r0
 8001916:	494d      	ldr	r1, [pc, #308]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f91b 	bl	8000b54 <__aeabi_fsub>
 800191e:	4603      	mov	r3, r0
 8001920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//snprintf((glbl_uint8VoltageBuffer + 1), (sizeof(glbl_uint8VoltageBuffer) - 1), "%.*f", 3,Loc_float32FinalVoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[1] + 1),Loc_float32VoltageValue, 3);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	3320      	adds	r3, #32
 800192a:	3301      	adds	r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001932:	4618      	mov	r0, r3
 8001934:	f001 fb4e 	bl	8002fd4 <float_to_string_manual>
	glbl_uint8VoltageBuffer[1][0] = '-';
 8001938:	232d      	movs	r3, #45	; 0x2d
 800193a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	/************************************************P5*****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_5, &Loc_uint16VoltageConversion);
 800193e:	f107 03aa 	add.w	r3, r7, #170	; 0xaa
 8001942:	4619      	mov	r1, r3
 8001944:	2003      	movs	r0, #3
 8001946:	f002 fafd 	bl	8003f44 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = ((float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) + 0.16f) * 2;
 800194a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f9b2 	bl	8000cb8 <__aeabi_ui2f>
 8001954:	4603      	mov	r3, r0
 8001956:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fab8 	bl	8000ed0 <__aeabi_fdiv>
 8001960:	4603      	mov	r3, r0
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f9ff 	bl	8000d68 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	4939      	ldr	r1, [pc, #228]	; (8001a54 <SCommands_GetSupplyVoltages+0x250>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8f2 	bl	8000b58 <__addsf3>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8ed 	bl	8000b58 <__addsf3>
 800197e:	4603      	mov	r3, r0
 8001980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[2]),Loc_float32VoltageValue, 3);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	3340      	adds	r3, #64	; 0x40
 800198a:	2203      	movs	r2, #3
 800198c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001990:	4618      	mov	r0, r3
 8001992:	f001 fb1f 	bl	8002fd4 <float_to_string_manual>

	/***********************************************P3.3****************************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_33, &Loc_uint16VoltageConversion);
 8001996:	f107 03aa 	add.w	r3, r7, #170	; 0xaa
 800199a:	4619      	mov	r1, r3
 800199c:	2000      	movs	r0, #0
 800199e:	f002 fad1 	bl	8003f44 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 2;
 80019a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f986 	bl	8000cb8 <__aeabi_ui2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fa8c 	bl	8000ed0 <__aeabi_fdiv>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f9d3 	bl	8000d68 <__aeabi_fmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4619      	mov	r1, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f8c6 	bl	8000b58 <__addsf3>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[3]),Loc_float32VoltageValue, 3);
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	3360      	adds	r3, #96	; 0x60
 80019d8:	2203      	movs	r2, #3
 80019da:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 faf8 	bl	8002fd4 <float_to_string_manual>

	/***********************************************Supply 12***********************************************/
	SPWRVolt_GetVoltage(SPWRVOLT_SUPPLY_12, &Loc_uint16VoltageConversion);
 80019e4:	f107 03aa 	add.w	r3, r7, #170	; 0xaa
 80019e8:	4619      	mov	r1, r3
 80019ea:	2002      	movs	r0, #2
 80019ec:	f002 faaa 	bl	8003f44 <SPWRVolt_GetVoltage>

	Loc_float32VoltageValue = (float32)((float32)((float32)Loc_uint16VoltageConversion / 4096) * 3.3f) * 4;
 80019f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f95f 	bl	8000cb8 <__aeabi_ui2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fa65 	bl	8000ed0 <__aeabi_fdiv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4910      	ldr	r1, [pc, #64]	; (8001a4c <SCommands_GetSupplyVoltages+0x248>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9ac 	bl	8000d68 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f9a6 	bl	8000d68 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//snprintf(glbl_uint8VoltageBuffer, sizeof(glbl_uint8VoltageBuffer), "%.*f", 3,Loc_float32VoltageValue);
	float_to_string_manual((glbl_uint8VoltageBuffer[4]),Loc_float32VoltageValue, 3);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	3380      	adds	r3, #128	; 0x80
 8001a28:	2203      	movs	r2, #3
 8001a2a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fad0 	bl	8002fd4 <float_to_string_manual>

	/*******************************************Send Voltages***********************************************/
	HESP32_SendVoltages(glbl_uint8VoltageBuffer);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 fe09 	bl	8003650 <HESP32_SendVoltages>
	SpectroStatus_SetNewStatus(IDLE);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f001 f94a 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001a44:	bf00      	nop
 8001a46:	37b8      	adds	r7, #184	; 0xb8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40533333 	.word	0x40533333
 8001a50:	41300000 	.word	0x41300000
 8001a54:	3e23d70a 	.word	0x3e23d70a

08001a58 <SCommands_SendCurrentMotorsSteps>:


void SCommands_SendCurrentMotorsSteps   (void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f001 f93a 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32MotorsCurrentSteps[3] = {0};
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
	uint32 Loc_uint32CurrentWL = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
	uint8 Loc_uint8Index = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]

	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	75fb      	strb	r3, [r7, #23]
 8001a7c:	e00c      	b.n	8001a98 <SCommands_SendCurrentMotorsSteps+0x40>
	{
		HMOTOR_GetCurrentMotorSteps(Loc_uint8Index, &Loc_uint32MotorsCurrentSteps[Loc_uint8Index]);
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	441a      	add	r2, r3
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 ff81 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
	for(Loc_uint8Index = HMOTOR_LAMP_SELECT; Loc_uint8Index < (HMOTOR_WL_SELECT + 1); Loc_uint8Index++)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	3301      	adds	r3, #1
 8001a96:	75fb      	strb	r3, [r7, #23]
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d9ef      	bls.n	8001a7e <SCommands_SendCurrentMotorsSteps+0x26>
	}
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 ff95 	bl	80049d0 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(Loc_uint32MotorsCurrentSteps, &Loc_uint32CurrentWL, 3);
 8001aa6:	1d39      	adds	r1, r7, #4
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2203      	movs	r2, #3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fc90 	bl	80033d4 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f001 f90f 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <SCommands_HomeLampMotor>:


void SCommands_HomeLampMotor    (void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f001 f905 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32LampCurrentSteps = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f002 fec8 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampCurrentSteps);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f002 ff57 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 ff71 	bl	80049d0 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32LampCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001aee:	4639      	mov	r1, r7
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2201      	movs	r2, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fc6d 	bl	80033d4 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f001 f8ec 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SCommands_HomeWLSelectMotor>:


void SCommands_HomeWLSelectMotor (void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f001 f8e2 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32WLCurrentSteps = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f002 fea5 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32WLCurrentSteps);
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	2002      	movs	r0, #2
 8001b28:	f002 ff34 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 ff4e 	bl	80049d0 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32WLCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b34:	4639      	mov	r1, r7
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fc4a 	bl	80033d4 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f001 f8c9 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <SCommands_HomeFilterSelectMotor>:


void SCommands_HomeFilterSelectMotor  (void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f001 f8bf 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint32 Loc_uint32FilterCurrentSteps = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
	uint32 Loc_uint32CurrentWL = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
	HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f002 fe82 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_GetCurrentMotorSteps(HMOTOR_FILTER_SELECT, &Loc_uint32FilterCurrentSteps);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f002 ff11 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001b72:	463b      	mov	r3, r7
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 ff2b 	bl	80049d0 <HMOTOR_GetCurrentWL>
	HESP32_SendMotorStatus(&Loc_uint32FilterCurrentSteps, &Loc_uint32CurrentWL, 1);
 8001b7a:	4639      	mov	r1, r7
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 fc27 	bl	80033d4 <HESP32_SendMotorStatus>
	SpectroStatus_SetNewStatus(IDLE);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f001 f8a6 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SCommands_SendCurrentWL>:


void SCommands_SendCurrentWL    (void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f001 f89c 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	uint8 P_uint8WL[20] = {0};
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
	uint32 Loc_uint32CurrentWL = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
	HMOTOR_GetCurrentWL(&Loc_uint32CurrentWL);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 ff09 	bl	80049d0 <HMOTOR_GetCurrentWL>
	//snprintf(P_uint8WL, sizeof(P_uint8WL), "%d", Loc_uint32CurrentWL);
	float_to_string_manual(P_uint8WL, Loc_uint32CurrentWL, 0);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f879 	bl	8000cb8 <__aeabi_ui2f>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fa01 	bl	8002fd4 <float_to_string_manual>
	HESP32_SendCommand(P_uint8WL);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fb9f 	bl	8003318 <HESP32_SendCommand>
	SpectroStatus_SetNewStatus(IDLE);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f001 f87c 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SCommands_GetLampMotorPosition>:

void SCommands_GetLampMotorPosition(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f001 f872 	bl	8002cd8 <SpectroStatus_SetNewStatus>

	uint32 Loc_uint32LampSteps = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
	HMOTOR_GetCurrentMotorSteps(HMOTOR_LAMP_SELECT, &Loc_uint32LampSteps);
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f002 fec9 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>

	if(Loc_uint32LampSteps == 0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <SCommands_GetLampMotorPosition+0x28>
	{
		HESP32_SendCommand("UV Lamp");
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <SCommands_GetLampMotorPosition+0x3c>)
 8001c0a:	f001 fb85 	bl	8003318 <HESP32_SendCommand>
	}
	else
	{
		/*Do nothing*/
	}
}
 8001c0e:	e005      	b.n	8001c1c <SCommands_GetLampMotorPosition+0x34>
	else if(Loc_uint32LampSteps == 100)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d102      	bne.n	8001c1c <SCommands_GetLampMotorPosition+0x34>
		HESP32_SendCommand("VI Lamp");
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <SCommands_GetLampMotorPosition+0x40>)
 8001c18:	f001 fb7e 	bl	8003318 <HESP32_SendCommand>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800c448 	.word	0x0800c448
 8001c28:	0800c450 	.word	0x0800c450

08001c2c <SCommands_SetLampMotorVisible>:

void SCommands_SetLampMotorVisible(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f002 fac8 	bl	80041c8 <HMOTOR_MoveLampMotor>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <SCommands_SetLampMotorVisible+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <SCommands_SetLampMotorVisible+0x2c>)
 8001c44:	f001 fb68 	bl	8003318 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c48:	e002      	b.n	8001c50 <SCommands_SetLampMotorVisible+0x24>
		HESP32_SendCommand("failed to move");
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <SCommands_SetLampMotorVisible+0x30>)
 8001c4c:	f001 fb64 	bl	8003318 <HESP32_SendCommand>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0800c458 	.word	0x0800c458
 8001c5c:	0800c460 	.word	0x0800c460

08001c60 <SCommands_SetLampMotorUV>:

void SCommands_SetLampMotorUV(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8FuncStatus = HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f002 faae 	bl	80041c8 <HMOTOR_MoveLampMotor>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8FuncStatus == E_OK)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <SCommands_SetLampMotorUV+0x1e>
	{
		HESP32_SendCommand("moved");
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <SCommands_SetLampMotorUV+0x2c>)
 8001c78:	f001 fb4e 	bl	8003318 <HESP32_SendCommand>
	}
	else
	{
		HESP32_SendCommand("failed to move");
	}
}
 8001c7c:	e002      	b.n	8001c84 <SCommands_SetLampMotorUV+0x24>
		HESP32_SendCommand("failed to move");
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <SCommands_SetLampMotorUV+0x30>)
 8001c80:	f001 fb4a 	bl	8003318 <HESP32_SendCommand>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800c458 	.word	0x0800c458
 8001c90:	0800c460 	.word	0x0800c460

08001c94 <SCommands_SendCurrentDateTime>:

void SCommands_SendCurrentDateTime(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f001 f81c 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	Sdate_t current_date;
	Stime_t current_time;

	MRTC_GetDateAndTime(&current_date, &current_time);
 8001ca0:	463a      	mov	r2, r7
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fb6c 	bl	8006384 <MRTC_GetDateAndTime>

	HESP32_SendDateTime(&current_date, &current_time);
 8001cac:	463a      	mov	r2, r7
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fbdd 	bl	8003472 <HESP32_SendDateTime>
	SpectroStatus_SetNewStatus(IDLE);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f001 f80d 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <SCommands_SendCurrentDetectorValues>:

void SCommands_SendCurrentDetectorValues(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(BUSY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f001 f802 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	float32 Loc_float32Readings[4] = {0.0f};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
	float32 Loc_float32SampleReading = 0.0f;
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
	float32 Loc_float32ReferenceReading = 0.0f;
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
	float32 Loc_float32Gain[2] = {0.0f};
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]

	read_reference_voltage(&Loc_float32ReferenceReading, &Loc_float32Gain[0]);
 8001cf6:	463a      	mov	r2, r7
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fe06 	bl	8002910 <read_reference_voltage>

	if((Loc_float32Gain[0] > 0.98f) && (Loc_float32Gain[0] < 1.01f))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4931      	ldr	r1, [pc, #196]	; (8001dcc <SCommands_SendCurrentDetectorValues+0x104>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f9e9 	bl	80010e0 <__aeabi_fcmpgt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <SCommands_SendCurrentDetectorValues+0x66>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	492e      	ldr	r1, [pc, #184]	; (8001dd0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f9c3 	bl	80010a4 <__aeabi_fcmplt>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <SCommands_SendCurrentDetectorValues+0x66>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e011      	b.n	8001d52 <SCommands_SendCurrentDetectorValues+0x8a>
	}
	else if(Loc_float32Gain[0] > 1.01f)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f9d4 	bl	80010e0 <__aeabi_fcmpgt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <SCommands_SendCurrentDetectorValues+0x8a>
	{
		Loc_float32Readings[0] = Loc_float32ReferenceReading / Loc_float32Gain[0];
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f8c3 	bl	8000ed0 <__aeabi_fdiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	613b      	str	r3, [r7, #16]
		Loc_float32Readings[1] = Loc_float32ReferenceReading;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	617b      	str	r3, [r7, #20]
	else
	{
		/*Do nothing*/
	}

	read_sample_voltage(&Loc_float32SampleReading, &Loc_float32Gain[1]);
 8001d52:	463b      	mov	r3, r7
 8001d54:	1d1a      	adds	r2, r3, #4
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 febf 	bl	8002ae0 <read_sample_voltage>

	if((Loc_float32Gain[1] > 0.98f) && (Loc_float32Gain[1] < 1.01f))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4919      	ldr	r1, [pc, #100]	; (8001dcc <SCommands_SendCurrentDetectorValues+0x104>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9ba 	bl	80010e0 <__aeabi_fcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <SCommands_SendCurrentDetectorValues+0xc4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f994 	bl	80010a4 <__aeabi_fcmplt>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <SCommands_SendCurrentDetectorValues+0xc4>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e011      	b.n	8001db0 <SCommands_SendCurrentDetectorValues+0xe8>
	}
	else if(Loc_float32Gain[1] > 1.01f)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4910      	ldr	r1, [pc, #64]	; (8001dd0 <SCommands_SendCurrentDetectorValues+0x108>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f9a5 	bl	80010e0 <__aeabi_fcmpgt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <SCommands_SendCurrentDetectorValues+0xe8>
	{
		Loc_float32Readings[2] = Loc_float32SampleReading / Loc_float32Gain[1];
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f894 	bl	8000ed0 <__aeabi_fdiv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
		Loc_float32Readings[3] = Loc_float32SampleReading;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	61fb      	str	r3, [r7, #28]
	{
		/*Do nothing*/
	}


	HESP32_SendDetectorValues(Loc_float32Readings, Loc_float32Gain);
 8001db0:	463a      	mov	r2, r7
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 fc75 	bl	80036a8 <HESP32_SendDetectorValues>
	SpectroStatus_SetNewStatus(IDLE);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 ff8a 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	3f7ae148 	.word	0x3f7ae148
 8001dd0:	3f8147ae 	.word	0x3f8147ae

08001dd4 <SCommands_UpdateDateTime>:

void SCommands_UpdateDateTime(uint8* P_uint8DateTime)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 ff7b 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8DateTime != NULL_PTR)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 808a 	beq.w	8001efe <SCommands_UpdateDateTime+0x12a>
	{
		Sdate_t date;
		Stime_t time;

		uint8* Loc_PToken = NULL_PTR;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
		uint8 Loc_uint8Count = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	74fb      	strb	r3, [r7, #19]
		Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8001df2:	2301      	movs	r3, #1
 8001df4:	74bb      	strb	r3, [r7, #18]

		Loc_PToken = strtok(P_uint8DateTime, "/");
 8001df6:	4947      	ldr	r1, [pc, #284]	; (8001f14 <SCommands_UpdateDateTime+0x140>)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f006 f895 	bl	8007f28 <strtok>
 8001dfe:	6178      	str	r0, [r7, #20]

		if(Loc_PToken != NULL_PTR)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d05f      	beq.n	8001ec6 <SCommands_UpdateDateTime+0xf2>
		{
			date.m_months = atoi(Loc_PToken);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f005 f8ba 	bl	8006f80 <atoi>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73bb      	strb	r3, [r7, #14]

			while(Loc_PToken != NULL_PTR)
 8001e12:	e055      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
			{
				Loc_uint8Count++;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	3301      	adds	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]

				if(Loc_uint8Count < 3)
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d81b      	bhi.n	8001e58 <SCommands_UpdateDateTime+0x84>
				{
					Loc_PToken = strtok(NULL_PTR, "/");
 8001e20:	493c      	ldr	r1, [pc, #240]	; (8001f14 <SCommands_UpdateDateTime+0x140>)
 8001e22:	2000      	movs	r0, #0
 8001e24:	f006 f880 	bl	8007f28 <strtok>
 8001e28:	6178      	str	r0, [r7, #20]

					if(Loc_PToken != NULL_PTR)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d047      	beq.n	8001ec0 <SCommands_UpdateDateTime+0xec>
					{
						switch(Loc_uint8Count)
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d002      	beq.n	8001e3c <SCommands_UpdateDateTime+0x68>
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d007      	beq.n	8001e4a <SCommands_UpdateDateTime+0x76>
 8001e3a:	e041      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
						{
						case 1:
						{
							date.m_days = atoi(Loc_PToken);
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f005 f89f 	bl	8006f80 <atoi>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	73fb      	strb	r3, [r7, #15]
							break;
 8001e48:	e03a      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
						}
						case 2:
						{
							Loc_PToken = strtok(Loc_PToken, " ");
 8001e4a:	4933      	ldr	r1, [pc, #204]	; (8001f18 <SCommands_UpdateDateTime+0x144>)
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f006 f86b 	bl	8007f28 <strtok>
 8001e52:	6178      	str	r0, [r7, #20]
							break;
 8001e54:	bf00      	nop
 8001e56:	e033      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
						}
						}
					}
				}
				else if(Loc_uint8Count == 3)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d114      	bne.n	8001e88 <SCommands_UpdateDateTime+0xb4>
				{
					date.m_years = atoi(Loc_PToken);
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f005 f88e 	bl	8006f80 <atoi>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	81bb      	strh	r3, [r7, #12]
					Loc_PToken = strtok(NULL_PTR, ":");
 8001e6a:	492c      	ldr	r1, [pc, #176]	; (8001f1c <SCommands_UpdateDateTime+0x148>)
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f006 f85b 	bl	8007f28 <strtok>
 8001e72:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d022      	beq.n	8001ec0 <SCommands_UpdateDateTime+0xec>
					{
						time.m_hours = atoi(Loc_PToken);
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f005 f880 	bl	8006f80 <atoi>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	723b      	strb	r3, [r7, #8]
 8001e86:	e01b      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
					}
				}
				else
				{
					Loc_PToken = strtok(NULL_PTR, ":");
 8001e88:	4924      	ldr	r1, [pc, #144]	; (8001f1c <SCommands_UpdateDateTime+0x148>)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f006 f84c 	bl	8007f28 <strtok>
 8001e90:	6178      	str	r0, [r7, #20]
					if(Loc_PToken != NULL_PTR)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <SCommands_UpdateDateTime+0xec>
					{
						switch(Loc_uint8Count)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d002      	beq.n	8001ea4 <SCommands_UpdateDateTime+0xd0>
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d007      	beq.n	8001eb2 <SCommands_UpdateDateTime+0xde>
 8001ea2:	e00d      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
						{
						case 4:
						{
							time.m_minutes = atoi(Loc_PToken);
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f005 f86b 	bl	8006f80 <atoi>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	727b      	strb	r3, [r7, #9]
							break;
 8001eb0:	e006      	b.n	8001ec0 <SCommands_UpdateDateTime+0xec>
						}
						case 5:
						{
							time.m_seconds = atoi(Loc_PToken);
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f005 f864 	bl	8006f80 <atoi>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	72bb      	strb	r3, [r7, #10]
							break;
 8001ebe:	bf00      	nop
			while(Loc_PToken != NULL_PTR)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1a6      	bne.n	8001e14 <SCommands_UpdateDateTime+0x40>
					}
				}
			}
		}

		if(Loc_uint8Count == 6)
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b06      	cmp	r3, #6
 8001eca:	d114      	bne.n	8001ef6 <SCommands_UpdateDateTime+0x122>
		{
			Loc_uint8FuncStatus = MRTC_SetDateAndTime(&date, &time);
 8001ecc:	f107 0208 	add.w	r2, r7, #8
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fa00 	bl	80062dc <MRTC_SetDateAndTime>
 8001edc:	4603      	mov	r3, r0
 8001ede:	74bb      	strb	r3, [r7, #18]
			if(Loc_uint8FuncStatus == E_OK)
 8001ee0:	7cbb      	ldrb	r3, [r7, #18]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <SCommands_UpdateDateTime+0x11a>
			{
				HESP32_SendCommand("time update success");
 8001ee6:	480e      	ldr	r0, [pc, #56]	; (8001f20 <SCommands_UpdateDateTime+0x14c>)
 8001ee8:	f001 fa16 	bl	8003318 <HESP32_SendCommand>
 8001eec:	e00a      	b.n	8001f04 <SCommands_UpdateDateTime+0x130>
			}
			else
			{
				HESP32_SendCommand("time update failed");
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <SCommands_UpdateDateTime+0x150>)
 8001ef0:	f001 fa12 	bl	8003318 <HESP32_SendCommand>
 8001ef4:	e006      	b.n	8001f04 <SCommands_UpdateDateTime+0x130>
			}
		}
		else
		{
			HESP32_SendCommand("time update failed");
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <SCommands_UpdateDateTime+0x150>)
 8001ef8:	f001 fa0e 	bl	8003318 <HESP32_SendCommand>
 8001efc:	e002      	b.n	8001f04 <SCommands_UpdateDateTime+0x130>
		}
	}
	else
	{
		HESP32_SendCommand("time update failed");
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <SCommands_UpdateDateTime+0x150>)
 8001f00:	f001 fa0a 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fee7 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	0800c470 	.word	0x0800c470
 8001f18:	0800c474 	.word	0x0800c474
 8001f1c:	0800c478 	.word	0x0800c478
 8001f20:	0800c47c 	.word	0x0800c47c
 8001f24:	0800c490 	.word	0x0800c490

08001f28 <SCommands_SaveFilterMotorCalibSteps>:
	SpectroStatus_SetNewStatus(IDLE);
}


void SCommands_SaveFilterMotorCalibSteps          (uint8* P_uint8MotorSteps)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f000 fed1 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8MotorSteps != NULL_PTR)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00f      	beq.n	8001f5c <SCommands_SaveFilterMotorCalibSteps+0x34>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8MotorSteps);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f005 f81f 	bl	8006f80 <atoi>
 8001f42:	4603      	mov	r3, r0
 8001f44:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint32FilterSteps, 4);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	20d8      	movs	r0, #216	; 0xd8
 8001f50:	f000 ffb6 	bl	8002ec0 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <SCommands_SaveFilterMotorCalibSteps+0x48>)
 8001f56:	f001 f9df 	bl	8003318 <HESP32_SendCommand>
 8001f5a:	e002      	b.n	8001f62 <SCommands_SaveFilterMotorCalibSteps+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <SCommands_SaveFilterMotorCalibSteps+0x4c>)
 8001f5e:	f001 f9db 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 feb8 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800c4a4 	.word	0x0800c4a4
 8001f74:	0800c4ac 	.word	0x0800c4ac

08001f78 <SCommands_SaveFilterMotorCalibWL>:


void SCommands_SaveFilterMotorCalibWL          (uint8* P_uint8Wavelength)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f000 fea9 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8Wavelength != NULL_PTR)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <SCommands_SaveFilterMotorCalibWL+0x34>
	{
		uint32 Loc_uint32FilterWL = atoi(P_uint8Wavelength);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f004 fff7 	bl	8006f80 <atoi>
 8001f92:	4603      	mov	r3, r0
 8001f94:	60fb      	str	r3, [r7, #12]
		eeprom_write_Nbytes(EEPROM_MOTOR_WL_MEM_ADDRESS, &Loc_uint32FilterWL, 4);
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	20d0      	movs	r0, #208	; 0xd0
 8001fa0:	f000 ff8e 	bl	8002ec0 <eeprom_write_Nbytes>
		HESP32_SendCommand("saved");
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <SCommands_SaveFilterMotorCalibWL+0x48>)
 8001fa6:	f001 f9b7 	bl	8003318 <HESP32_SendCommand>
 8001faa:	e002      	b.n	8001fb2 <SCommands_SaveFilterMotorCalibWL+0x3a>
	}
	else
	{
		HESP32_SendCommand("failed to save");
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <SCommands_SaveFilterMotorCalibWL+0x4c>)
 8001fae:	f001 f9b3 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 fe90 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	0800c4a4 	.word	0x0800c4a4
 8001fc4:	0800c4ac 	.word	0x0800c4ac

08001fc8 <SCommands_StartOperation>:
}
float32 gain_ref;
float32 gain_sample;

void SCommands_StartOperation         (uint8* P_uint8ScanParam)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08f      	sub	sp, #60	; 0x3c
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f000 fe81 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8ScanParam != NULL_PTR)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8099 	beq.w	8002110 <SCommands_StartOperation+0x148>
	{
		//Loc_float32ScanParameters[0] --> start wavelength
		//Loc_float32ScanParameters[1] --> end wavelength
		//Loc_float32ScanParameters[2] --> wavelength resolution
		float32 Loc_float32ScanParameters[3] = {0.0};
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
		uint8* P_uint8Token = NULL_PTR;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8 Loc_uint8Index = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		// separate the string input P_uint8ScanParam to three strings
		P_uint8Token = strtok(P_uint8ScanParam, " ");
 8001ff4:	494a      	ldr	r1, [pc, #296]	; (8002120 <SCommands_StartOperation+0x158>)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f005 ff96 	bl	8007f28 <strtok>
 8001ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
		Loc_float32ScanParameters[Loc_uint8Index] = atof(P_uint8Token);
 8001ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002000:	f004 ffbb 	bl	8006f7a <atof>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd4c 	bl	8000aac <__aeabi_d2f>
 8002014:	4602      	mov	r2, r0
 8002016:	00a3      	lsls	r3, r4, #2
 8002018:	3330      	adds	r3, #48	; 0x30
 800201a:	443b      	add	r3, r7
 800201c:	f843 2c18 	str.w	r2, [r3, #-24]
		Loc_uint8Index++;
 8002020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002024:	3301      	adds	r3, #1
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 800202a:	e019      	b.n	8002060 <SCommands_StartOperation+0x98>
		{
			P_uint8Token = strtok(NULL_PTR, " ");
 800202c:	493c      	ldr	r1, [pc, #240]	; (8002120 <SCommands_StartOperation+0x158>)
 800202e:	2000      	movs	r0, #0
 8002030:	f005 ff7a 	bl	8007f28 <strtok>
 8002034:	62f8      	str	r0, [r7, #44]	; 0x2c
			Loc_float32ScanParameters[Loc_uint8Index++] = atof(P_uint8Token);
 8002036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002038:	f004 ff9f 	bl	8006f7a <atof>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002044:	1c48      	adds	r0, r1, #1
 8002046:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
 800204a:	460c      	mov	r4, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fd2c 	bl	8000aac <__aeabi_d2f>
 8002054:	4602      	mov	r2, r0
 8002056:	00a3      	lsls	r3, r4, #2
 8002058:	3330      	adds	r3, #48	; 0x30
 800205a:	443b      	add	r3, r7
 800205c:	f843 2c18 	str.w	r2, [r3, #-24]
		while((P_uint8Token != NULL_PTR) && (Loc_uint8Index < 3))
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <SCommands_StartOperation+0xa6>
 8002066:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800206a:	2b02      	cmp	r3, #2
 800206c:	d9de      	bls.n	800202c <SCommands_StartOperation+0x64>
		//			//HESP32_SendCommand("done");
		//        }



		if(Loc_uint8Index == 3)
 800206e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002072:	2b03      	cmp	r3, #3
 8002074:	d14c      	bne.n	8002110 <SCommands_StartOperation+0x148>
		{
			//HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
			// Move the motor to the location of the first wavelength


			float32 Loc_float32Index = Loc_float32ScanParameters[0];
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
			float32 Loc_float32RefIntensity = 0.0;
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
			float32 Loc_float32SampleIntensity = 0.0;
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	613b      	str	r3, [r7, #16]

			Sdate_t Loc_SCurrentDate = {0};
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
			Stime_t Loc_SCurrentTime = {0};
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	2100      	movs	r1, #0
 8002090:	460a      	mov	r2, r1
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	460a      	mov	r2, r1
 8002096:	709a      	strb	r2, [r3, #2]

			while(Loc_float32Index < Loc_float32ScanParameters[1])
 8002098:	e032      	b.n	8002100 <SCommands_StartOperation+0x138>
			{
				HMOTOR_MoveMotors(Loc_float32Index);
 800209a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800209c:	f7fe f9de 	bl	800045c <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f002 fb06 	bl	80046b8 <HMOTOR_MoveMotors>
				read_reference_voltage(&Loc_float32RefIntensity, &gain_ref);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	491c      	ldr	r1, [pc, #112]	; (8002124 <SCommands_StartOperation+0x15c>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fc2c 	bl	8002910 <read_reference_voltage>
				read_sample_voltage(&Loc_float32SampleIntensity, &gain_sample);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	491a      	ldr	r1, [pc, #104]	; (8002128 <SCommands_StartOperation+0x160>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fd0e 	bl	8002ae0 <read_sample_voltage>
				MRTC_GetDateAndTime(&Loc_SCurrentDate, &Loc_SCurrentTime);
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 f958 	bl	8006384 <MRTC_GetDateAndTime>
				HESP32_SendIntensities(Loc_float32Index, Loc_float32RefIntensity, Loc_float32SampleIntensity, &Loc_SCurrentDate, &Loc_SCurrentTime);
 80020d4:	6979      	ldr	r1, [r7, #20]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f107 000c 	add.w	r0, r7, #12
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4603      	mov	r3, r0
 80020e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e6:	f001 fa17 	bl	8003518 <HESP32_SendIntensities>
				MSTK_uint8Delay(1000);
 80020ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ee:	f004 fb61 	bl	80067b4 <MSTK_uint8Delay>
				Loc_float32Index += Loc_float32ScanParameters[2];
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020f8:	f7fe fd2e 	bl	8000b58 <__addsf3>
 80020fc:	4603      	mov	r3, r0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
			while(Loc_float32Index < Loc_float32ScanParameters[1])
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4619      	mov	r1, r3
 8002104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002106:	f7fe ffcd 	bl	80010a4 <__aeabi_fcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1c4      	bne.n	800209a <SCommands_StartOperation+0xd2>
	}
	else
	{
		/*Do nothing*/
	}
	SpectroStatus_SetNewStatus(IDLE);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 fde1 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002116:	bf00      	nop
 8002118:	3734      	adds	r7, #52	; 0x34
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	0800c474 	.word	0x0800c474
 8002124:	200005bc 	.word	0x200005bc
 8002128:	200005c0 	.word	0x200005c0

0800212c <SCommands_SetReferenceGain>:

void SCommands_SetReferenceGain(uint8* P_uint8GainToBeSet)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002134:	2001      	movs	r0, #1
 8002136:	f000 fdcf 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d011      	beq.n	8002164 <SCommands_SetReferenceGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f004 ff1a 	bl	8006f7a <atof>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fcad 	bl	8000aac <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	60fb      	str	r3, [r7, #12]
		Set_Reference_Gain(Loc_uint32GainToBeSet);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f001 fbdb 	bl	8003912 <Set_Reference_Gain>
		HESP32_SendCommand("applied");
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <SCommands_SetReferenceGain+0x4c>)
 800215e:	f001 f8db 	bl	8003318 <HESP32_SendCommand>
 8002162:	e002      	b.n	800216a <SCommands_SetReferenceGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <SCommands_SetReferenceGain+0x50>)
 8002166:	f001 f8d7 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 fdb4 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0800c4bc 	.word	0x0800c4bc
 800217c:	0800c4c4 	.word	0x0800c4c4

08002180 <SCommands_SetSampleGain>:
void SCommands_SetSampleGain(uint8* P_uint8GainToBeSet)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 8002188:	2001      	movs	r0, #1
 800218a:	f000 fda5 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8GainToBeSet != NULL_PTR)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d011      	beq.n	80021b8 <SCommands_SetSampleGain+0x38>
	{
		float32 Loc_uint32GainToBeSet = (float32)(atof(P_uint8GainToBeSet));
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f004 fef0 	bl	8006f7a <atof>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fc83 	bl	8000aac <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	60fb      	str	r3, [r7, #12]
		Set_Sample_Gain(Loc_uint32GainToBeSet);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f001 fb94 	bl	80038d8 <Set_Sample_Gain>
		HESP32_SendCommand("applied");
 80021b0:	4806      	ldr	r0, [pc, #24]	; (80021cc <SCommands_SetSampleGain+0x4c>)
 80021b2:	f001 f8b1 	bl	8003318 <HESP32_SendCommand>
 80021b6:	e002      	b.n	80021be <SCommands_SetSampleGain+0x3e>
	}
	else
	{
		HESP32_SendCommand("not applied");
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <SCommands_SetSampleGain+0x50>)
 80021ba:	f001 f8ad 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 fd8a 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	0800c4bc 	.word	0x0800c4bc
 80021d0:	0800c4c4 	.word	0x0800c4c4

080021d4 <SCommands_MoveFilterRight>:

void SCommands_MoveFilterRight(uint8* P_uint8FilterSteps)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 fd7b 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <SCommands_MoveFilterRight+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f004 fec9 	bl	8006f80 <atoi>
 80021ee:	4603      	mov	r3, r0
 80021f0:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CLKWISE_DIRECTION, 10);
 80021f2:	230a      	movs	r3, #10
 80021f4:	2201      	movs	r2, #1
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	2001      	movs	r0, #1
 80021fa:	f001 ff57 	bl	80040ac <HMOTOR_Step>
		HESP32_SendCommand("moved");
 80021fe:	4807      	ldr	r0, [pc, #28]	; (800221c <SCommands_MoveFilterRight+0x48>)
 8002200:	f001 f88a 	bl	8003318 <HESP32_SendCommand>
 8002204:	e002      	b.n	800220c <SCommands_MoveFilterRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <SCommands_MoveFilterRight+0x4c>)
 8002208:	f001 f886 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800220c:	2000      	movs	r0, #0
 800220e:	f000 fd63 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	0800c458 	.word	0x0800c458
 8002220:	0800c460 	.word	0x0800c460

08002224 <SCommands_MoveFilterLeft>:
void SCommands_MoveFilterLeft(uint8* P_uint8FilterSteps)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800222c:	2001      	movs	r0, #1
 800222e:	f000 fd53 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSteps != NULL_PTR)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <SCommands_MoveFilterLeft+0x32>
	{
		uint32 Loc_uint32FilterSteps = atoi(P_uint8FilterSteps);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fea1 	bl	8006f80 <atoi>
 800223e:	4603      	mov	r3, r0
 8002240:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32FilterSteps, HMOTORS_CCLKWISE_DIRECTION, 10);
 8002242:	230a      	movs	r3, #10
 8002244:	2202      	movs	r2, #2
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	2001      	movs	r0, #1
 800224a:	f001 ff2f 	bl	80040ac <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <SCommands_MoveFilterLeft+0x48>)
 8002250:	f001 f862 	bl	8003318 <HESP32_SendCommand>
 8002254:	e002      	b.n	800225c <SCommands_MoveFilterLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <SCommands_MoveFilterLeft+0x4c>)
 8002258:	f001 f85e 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800225c:	2000      	movs	r0, #0
 800225e:	f000 fd3b 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	0800c458 	.word	0x0800c458
 8002270:	0800c460 	.word	0x0800c460

08002274 <SCommands_SelectFilter>:
void SCommands_SelectFilter(uint8* P_uint8FilterSelect)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800227c:	2001      	movs	r0, #1
 800227e:	f000 fd2b 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8FilterSelect != NULL_PTR)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <SCommands_SelectFilter+0x2e>
	{
		HMOTOR_Filter_Select_t Loc_uint8FilterSelect = (P_uint8FilterSelect[1] - '0') - 1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	3b31      	subs	r3, #49	; 0x31
 8002290:	73fb      	strb	r3, [r7, #15]
		HMOTOR_MoveFilterMotor(Loc_uint8FilterSelect);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4618      	mov	r0, r3
 8002296:	f001 ffc9 	bl	800422c <HMOTOR_MoveFilterMotor>
		HESP32_SendCommand("moved");
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <SCommands_SelectFilter+0x44>)
 800229c:	f001 f83c 	bl	8003318 <HESP32_SendCommand>
 80022a0:	e002      	b.n	80022a8 <SCommands_SelectFilter+0x34>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <SCommands_SelectFilter+0x48>)
 80022a4:	f001 f838 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 fd15 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	0800c458 	.word	0x0800c458
 80022bc:	0800c460 	.word	0x0800c460

080022c0 <SCommands_SelectGratingWL>:

void SCommands_SelectGratingWL(uint8* P_uint8WL)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f000 fd05 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8WL != NULL_PTR)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d011      	beq.n	80022f8 <SCommands_SelectGratingWL+0x38>
	{
		float32 Loc_float32WL = atof(P_uint8WL);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f004 fe50 	bl	8006f7a <atof>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fbe3 	bl	8000aac <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60fb      	str	r3, [r7, #12]
		HMOTOR_MoveWLSelectMotor(Loc_float32WL);
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f002 f950 	bl	8004590 <HMOTOR_MoveWLSelectMotor>
		HESP32_SendCommand("moved");
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <SCommands_SelectGratingWL+0x4c>)
 80022f2:	f001 f811 	bl	8003318 <HESP32_SendCommand>
 80022f6:	e002      	b.n	80022fe <SCommands_SelectGratingWL+0x3e>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <SCommands_SelectGratingWL+0x50>)
 80022fa:	f001 f80d 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 fcea 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	0800c458 	.word	0x0800c458
 8002310:	0800c460 	.word	0x0800c460

08002314 <SCommands_MoveGratingLeft>:
void SCommands_MoveGratingLeft(uint8* P_uint8WLSteps)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800231c:	2001      	movs	r0, #1
 800231e:	f000 fcdb 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <SCommands_MoveGratingLeft+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f004 fe29 	bl	8006f80 <atoi>
 800232e:	4603      	mov	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CCLKWISE_DIRECTION, 10);
 8002332:	230a      	movs	r3, #10
 8002334:	2202      	movs	r2, #2
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	2002      	movs	r0, #2
 800233a:	f001 feb7 	bl	80040ac <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <SCommands_MoveGratingLeft+0x48>)
 8002340:	f000 ffea 	bl	8003318 <HESP32_SendCommand>
 8002344:	e002      	b.n	800234c <SCommands_MoveGratingLeft+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <SCommands_MoveGratingLeft+0x4c>)
 8002348:	f000 ffe6 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 fcc3 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	0800c458 	.word	0x0800c458
 8002360:	0800c460 	.word	0x0800c460

08002364 <SCommands_MoveGratingRight>:
void SCommands_MoveGratingRight(uint8* P_uint8WLSteps)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	SpectroStatus_SetNewStatus(BUSY);
 800236c:	2001      	movs	r0, #1
 800236e:	f000 fcb3 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	if(P_uint8WLSteps != NULL_PTR)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00e      	beq.n	8002396 <SCommands_MoveGratingRight+0x32>
	{
		uint32 Loc_uint32WLSteps = atoi(P_uint8WLSteps);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f004 fe01 	bl	8006f80 <atoi>
 800237e:	4603      	mov	r3, r0
 8002380:	60fb      	str	r3, [r7, #12]
		HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32WLSteps, HMOTORS_CLKWISE_DIRECTION, 10);
 8002382:	230a      	movs	r3, #10
 8002384:	2201      	movs	r2, #1
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	2002      	movs	r0, #2
 800238a:	f001 fe8f 	bl	80040ac <HMOTOR_Step>
		HESP32_SendCommand("moved");
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <SCommands_MoveGratingRight+0x48>)
 8002390:	f000 ffc2 	bl	8003318 <HESP32_SendCommand>
 8002394:	e002      	b.n	800239c <SCommands_MoveGratingRight+0x38>
	}
	else
	{
		HESP32_SendCommand("failed to move");
 8002396:	4806      	ldr	r0, [pc, #24]	; (80023b0 <SCommands_MoveGratingRight+0x4c>)
 8002398:	f000 ffbe 	bl	8003318 <HESP32_SendCommand>
	}
	SpectroStatus_SetNewStatus(IDLE);
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fc9b 	bl	8002cd8 <SpectroStatus_SetNewStatus>
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	0800c458 	.word	0x0800c458
 80023b0:	0800c460 	.word	0x0800c460

080023b4 <SPECTRO_InitSystem>:
#include "../../APP/SpectroStatus/SpectroStatus_Interface.h"
#include "../../APP/Signal_Conditioning/signal_conditioning.h"


Std_ReturnType SPECTRO_InitSystem(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
	SpectroStatus_SetNewStatus(INITIALIZING);
 80023ba:	2002      	movs	r0, #2
 80023bc:	f000 fc8c 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80023c0:	2301      	movs	r3, #1
 80023c2:	71fb      	strb	r3, [r7, #7]
	Loc_uint8InitStatus = SPECTRO_InitSoftware();
 80023c4:	f000 f81c 	bl	8002400 <SPECTRO_InitSoftware>
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
	if(Loc_uint8InitStatus == E_OK)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <SPECTRO_InitSystem+0x3c>
	{
		Loc_uint8InitStatus = SPECTRO_InitHardware();
 80023d2:	f000 f865 	bl	80024a0 <SPECTRO_InitHardware>
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <SPECTRO_InitSystem+0x34>
		{
			SpectroStatus_SetNewStatus(IDLE);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 fc79 	bl	8002cd8 <SpectroStatus_SetNewStatus>
 80023e6:	e006      	b.n	80023f6 <SPECTRO_InitSystem+0x42>
		}
		else
		{
			SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 fc75 	bl	8002cd8 <SpectroStatus_SetNewStatus>
 80023ee:	e002      	b.n	80023f6 <SPECTRO_InitSystem+0x42>
		}
	}
	else
	{
		SpectroStatus_SetNewStatus(ERROR_INITIALIZING);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 fc71 	bl	8002cd8 <SpectroStatus_SetNewStatus>
	}
	return Loc_uint8InitStatus;
 80023f6:	79fb      	ldrb	r3, [r7, #7]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <SPECTRO_InitSoftware>:

Std_ReturnType SPECTRO_InitSoftware(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	/***********************************Initialize System Clock***********************************/
	MRCC_InitClock();
 8002406:	f003 fd73 	bl	8005ef0 <MRCC_InitClock>

	/***********************************Enable Peripherals' clocks***********************************/

	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPA_EN);
 800240a:	2102      	movs	r1, #2
 800240c:	2003      	movs	r0, #3
 800240e:	f003 fdb7 	bl	8005f80 <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2,MRCC_APB2_IOPB_EN);
 8002412:	2103      	movs	r1, #3
 8002414:	2003      	movs	r0, #3
 8002416:	f003 fdb3 	bl	8005f80 <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_IOPC_EN);
 800241a:	2104      	movs	r1, #4
 800241c:	2003      	movs	r0, #3
 800241e:	f003 fdaf 	bl	8005f80 <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB2, MRCC_APB2_AFIO_EN);
 8002422:	2100      	movs	r1, #0
 8002424:	2003      	movs	r0, #3
 8002426:	f003 fdab 	bl	8005f80 <MRCC_EnablePeripheralClock>
	MRCC_EnablePeripheralClock              (MRCC_APB1, MRCC_APB1_SPI2_EN);
 800242a:	210e      	movs	r1, #14
 800242c:	2002      	movs	r0, #2
 800242e:	f003 fda7 	bl	8005f80 <MRCC_EnablePeripheralClock>


	/***********************************Setting Interrupts' Priorities***********************************/
	MSCB_SetPriorityGrouping                (MSCB_PRIORITY_GROUP_4_SUB_0);
 8002432:	481a      	ldr	r0, [pc, #104]	; (800249c <SPECTRO_InitSoftware+0x9c>)
 8002434:	f003 ffec 	bl	8006410 <MSCB_SetPriorityGrouping>
	MNVIC_SetInterruptPriority              (MNVIC_EXTI15_10, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2028      	movs	r0, #40	; 0x28
 800243e:	f003 fced 	bl	8005e1c <MNVIC_SetInterruptPriority>
	MNVIC_SetInterruptPriority              (MNVIC_USART3, 1, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2101      	movs	r1, #1
 8002446:	2027      	movs	r0, #39	; 0x27
 8002448:	f003 fce8 	bl	8005e1c <MNVIC_SetInterruptPriority>

	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN8, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 800244c:	2202      	movs	r2, #2
 800244e:	2108      	movs	r1, #8
 8002450:	2000      	movs	r0, #0
 8002452:	f002 fe37 	bl	80050c4 <MGPIO_SetPinMode>
	MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN2, MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8002456:	2202      	movs	r2, #2
 8002458:	2102      	movs	r1, #2
 800245a:	2000      	movs	r0, #0
 800245c:	f002 fe32 	bl	80050c4 <MGPIO_SetPinMode>

	MRTC_Init();
 8002460:	f003 feba 	bl	80061d8 <MRTC_Init>
	MSTK_uint8Init();
 8002464:	f004 f984 	bl	8006770 <MSTK_uint8Init>
	eeprom_init();
 8002468:	f000 fd0a 	bl	8002e80 <eeprom_init>
	uint32 Loc_uint32dummyData = 32;
 800246c:	2320      	movs	r3, #32
 800246e:	607b      	str	r3, [r7, #4]
	eeprom_write_Nbytes(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &Loc_uint32dummyData, 4);
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2204      	movs	r2, #4
 8002474:	4619      	mov	r1, r3
 8002476:	20d8      	movs	r0, #216	; 0xd8
 8002478:	f000 fd22 	bl	8002ec0 <eeprom_write_Nbytes>
	SCommands_Init();
 800247c:	f7ff f870 	bl	8001560 <SCommands_Init>
	SPWRVolt_Init();
 8002480:	f001 fd1c 	bl	8003ebc <SPWRVolt_Init>


	//eeprom_init();

	MCP4151_Init();
 8002484:	f001 fa02 	bl	800388c <MCP4151_Init>
	HPWRSupply_InitSupplies();
 8002488:	f001 fb84 	bl	8003b94 <HPWRSupply_InitSupplies>
	HMOTORS_Init();
 800248c:	f001 fd7a 	bl	8003f84 <HMOTORS_Init>

	return E_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	05fa0300 	.word	0x05fa0300

080024a0 <SPECTRO_InitHardware>:
Std_ReturnType SPECTRO_InitHardware(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	Std_ReturnType Loc_uint8InitStatus = E_NOT_OK;
 80024a6:	2301      	movs	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]

	Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 80024aa:	2101      	movs	r1, #1
 80024ac:	2000      	movs	r0, #0
 80024ae:	f001 fbc9 	bl	8003c44 <HPWRSupply_SetSupplyMode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]

	if(Loc_uint8InitStatus == E_OK)
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11e      	bne.n	80024fa <SPECTRO_InitHardware+0x5a>
	{
		Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_OFF);
 80024bc:	2100      	movs	r1, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	f001 fbc0 	bl	8003c44 <HPWRSupply_SetSupplyMode>
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
		if(Loc_uint8InitStatus == E_OK)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d115      	bne.n	80024fa <SPECTRO_InitHardware+0x5a>
		{
			Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 80024ce:	2101      	movs	r1, #1
 80024d0:	2001      	movs	r0, #1
 80024d2:	f001 fbb7 	bl	8003c44 <HPWRSupply_SetSupplyMode>
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
			if(Loc_uint8InitStatus == E_OK)
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <SPECTRO_InitHardware+0x5a>
			{
				Loc_uint8InitStatus = HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 80024e0:	2100      	movs	r1, #0
 80024e2:	2001      	movs	r0, #1
 80024e4:	f001 fbae 	bl	8003c44 <HPWRSupply_SetSupplyMode>
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
				if(Loc_uint8InitStatus == E_OK)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <SPECTRO_InitHardware+0x5a>
				{
					Loc_uint8InitStatus = SPECTRO_InitCalibration();
 80024f2:	f000 f807 	bl	8002504 <SPECTRO_InitCalibration>
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_uint8InitStatus;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <SPECTRO_InitCalibration>:

Std_ReturnType SPECTRO_InitCalibration(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0fe      	sub	sp, #504	; 0x1f8
 8002508:	af00      	add	r7, sp, #0
	float32 Loc_uint32StepsPerNm = 0;
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	HMOTOR_Step(HMOTOR_WL_SELECT, 100, HMOTORS_CLKWISE_DIRECTION, 10);
 8002512:	230a      	movs	r3, #10
 8002514:	2201      	movs	r2, #1
 8002516:	2164      	movs	r1, #100	; 0x64
 8002518:	2002      	movs	r0, #2
 800251a:	f001 fdc7 	bl	80040ac <HMOTOR_Step>
	HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 800251e:	2000      	movs	r0, #0
 8002520:	f002 f9a4 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_GoHome(HMOTOR_FILTER_SELECT);
 8002524:	2001      	movs	r0, #1
 8002526:	f002 f9a1 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 800252a:	2002      	movs	r0, #2
 800252c:	f002 f99e 	bl	800486c <HMOTOR_GoHome>

	//turn on visible lamp
	HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_ON);
 8002530:	2101      	movs	r1, #1
 8002532:	2001      	movs	r0, #1
 8002534:	f001 fb86 	bl	8003c44 <HPWRSupply_SetSupplyMode>
	HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 8002538:	2001      	movs	r0, #1
 800253a:	f001 fe45 	bl	80041c8 <HMOTOR_MoveLampMotor>
	//HMOTOR_MoveFilterMotor(HMOTOR_FILTER_AIR);

	//Zero Wavelength
	uint32 Loc_uint32Index = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	float32	Loc_float32Gain = 0;
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float32 Loc_uint32WhiteLightIntensities[110] = {0};
 800254c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002550:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002554:	4618      	mov	r0, r3
 8002556:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800255a:	461a      	mov	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f005 fcc8 	bl	8007ef2 <memset>

	uint32 Loc_uint32ZeroWLSteps = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	//HMOTOR_Step(HMOTOR_WL_SELECT, 77, HMOTORS_CLKWISE_DIRECTION, 10);
	adc_init();
 8002568:	f000 fbc6 	bl	8002cf8 <adc_init>
	for(Loc_uint32Index = 0; Loc_uint32Index < 110; Loc_uint32Index++)
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002572:	e032      	b.n	80025da <SPECTRO_InitCalibration+0xd6>
	{
		MUART_SendIntegerValue(UART3, Loc_uint32Index);
 8002574:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8002578:	2002      	movs	r0, #2
 800257a:	f004 faf3 	bl	8006b64 <MUART_SendIntegerValue>
		MUART_TxChar(UART3, ':');
 800257e:	213a      	movs	r1, #58	; 0x3a
 8002580:	2002      	movs	r0, #2
 8002582:	f004 fa3b 	bl	80069fc <MUART_TxChar>
		MUART_TxChar(UART3, ' ');
 8002586:	2120      	movs	r1, #32
 8002588:	2002      	movs	r0, #2
 800258a:	f004 fa37 	bl	80069fc <MUART_TxChar>
		read_sample_voltage(&Loc_uint32WhiteLightIntensities[Loc_uint32Index], &Loc_float32Gain);
 800258e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002592:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fa9d 	bl	8002ae0 <read_sample_voltage>
		//HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32WhiteLightSteps[Loc_uint32Index]);
		HESP32_SendDetectorValues(&Loc_uint32WhiteLightIntensities[Loc_uint32Index], &Loc_float32Gain);
 80025a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 f875 	bl	80036a8 <HESP32_SendDetectorValues>
		HMOTOR_Step(HMOTOR_WL_SELECT, 1, HMOTORS_CLKWISE_DIRECTION, 10);
 80025be:	230a      	movs	r3, #10
 80025c0:	2201      	movs	r2, #1
 80025c2:	2101      	movs	r1, #1
 80025c4:	2002      	movs	r0, #2
 80025c6:	f001 fd71 	bl	80040ac <HMOTOR_Step>
		MSTK_uint8Delay(50);
 80025ca:	2032      	movs	r0, #50	; 0x32
 80025cc:	f004 f8f2 	bl	80067b4 <MSTK_uint8Delay>
	for(Loc_uint32Index = 0; Loc_uint32Index < 110; Loc_uint32Index++)
 80025d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80025da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025de:	2b6d      	cmp	r3, #109	; 0x6d
 80025e0:	d9c8      	bls.n	8002574 <SPECTRO_InitCalibration+0x70>
	}
	uint32 Loc_uint32MiddleStepIndex = Medium_Step_Index(Loc_uint32WhiteLightIntensities, 110);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	216e      	movs	r1, #110	; 0x6e
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f907 	bl	80027fc <Medium_Step_Index>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	Loc_uint32ZeroWLSteps = Loc_uint32MiddleStepIndex;
 80025f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	MUART_TxString(UART3, "Zero Wavelength Steps = ");
 80025fc:	497b      	ldr	r1, [pc, #492]	; (80027ec <SPECTRO_InitCalibration+0x2e8>)
 80025fe:	2002      	movs	r0, #2
 8002600:	f004 fa66 	bl	8006ad0 <MUART_TxString>
	MUART_SendIntegerValue(UART3, Loc_uint32ZeroWLSteps);
 8002604:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8002608:	2002      	movs	r0, #2
 800260a:	f004 faab 	bl	8006b64 <MUART_SendIntegerValue>
	MUART_TxChar(UART3, '\n');
 800260e:	210a      	movs	r1, #10
 8002610:	2002      	movs	r0, #2
 8002612:	f004 f9f3 	bl	80069fc <MUART_TxChar>


	HPWRSupply_SetSupplyMode(HPWRSUPPLY_VIS_SUPPLY, HPWRSUPPLY_OFF);
 8002616:	2100      	movs	r1, #0
 8002618:	2001      	movs	r0, #1
 800261a:	f001 fb13 	bl	8003c44 <HPWRSupply_SetSupplyMode>
	HPWRSupply_SetSupplyMode(HPWRSUPPLY_UV_SUPPLY, HPWRSUPPLY_ON);
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f001 fb0f 	bl	8003c44 <HPWRSupply_SetSupplyMode>
	HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 8002626:	2000      	movs	r0, #0
 8002628:	f001 fdce 	bl	80041c8 <HMOTOR_MoveLampMotor>

	float32 Loc_float32Voltages = 0.0;
 800262c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002630:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
	uint32 Loc_uint32MaxIndex = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	float32 Loc_float32MaxIntensity = 0.0;
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	HMOTOR_Step(HMOTOR_WL_SELECT, 790, HMOTORS_CLKWISE_DIRECTION, 10);
 8002648:	230a      	movs	r3, #10
 800264a:	2201      	movs	r2, #1
 800264c:	f240 3116 	movw	r1, #790	; 0x316
 8002650:	2002      	movs	r0, #2
 8002652:	f001 fd2b 	bl	80040ac <HMOTOR_Step>
	MUART_SendIntegerValue(UART3, 0);
 8002656:	2100      	movs	r1, #0
 8002658:	2002      	movs	r0, #2
 800265a:	f004 fa83 	bl	8006b64 <MUART_SendIntegerValue>
	MUART_TxChar(UART3, ':');
 800265e:	213a      	movs	r1, #58	; 0x3a
 8002660:	2002      	movs	r0, #2
 8002662:	f004 f9cb 	bl	80069fc <MUART_TxChar>
	MUART_TxChar(UART3, ' ');
 8002666:	2120      	movs	r1, #32
 8002668:	2002      	movs	r0, #2
 800266a:	f004 f9c7 	bl	80069fc <MUART_TxChar>
	read_reference_voltage(&Loc_float32Voltages, &Loc_float32Gain);
 800266e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f949 	bl	8002910 <read_reference_voltage>
	HESP32_SendDetectorValues(&Loc_float32Voltages, &Loc_float32Gain);
 800267e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f80d 	bl	80036a8 <HESP32_SendDetectorValues>
	//read_sample_voltage(&reading, &gain);
	//HESP32_SendDetectorValues(&reading, &gain);
	Loc_float32MaxIntensity = Loc_float32Voltages;
 800268e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002692:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	//adc_init();
	for(Loc_uint32Index = 1; Loc_uint32Index < 600; Loc_uint32Index++)
 800269c:	2301      	movs	r3, #1
 800269e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80026a2:	e042      	b.n	800272a <SPECTRO_InitCalibration+0x226>
	{
		MUART_SendIntegerValue(UART3, Loc_uint32Index);
 80026a4:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80026a8:	2002      	movs	r0, #2
 80026aa:	f004 fa5b 	bl	8006b64 <MUART_SendIntegerValue>
		MUART_TxChar(UART3, ':');
 80026ae:	213a      	movs	r1, #58	; 0x3a
 80026b0:	2002      	movs	r0, #2
 80026b2:	f004 f9a3 	bl	80069fc <MUART_TxChar>
		MUART_TxChar(UART3, ' ');
 80026b6:	2120      	movs	r1, #32
 80026b8:	2002      	movs	r0, #2
 80026ba:	f004 f99f 	bl	80069fc <MUART_TxChar>
		read_reference_voltage(&Loc_float32Voltages, &Loc_float32Gain);
 80026be:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f921 	bl	8002910 <read_reference_voltage>
		HESP32_SendDetectorValues(&Loc_float32Voltages, &Loc_float32Gain);
 80026ce:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 ffe5 	bl	80036a8 <HESP32_SendDetectorValues>
		HMOTOR_Step(HMOTOR_WL_SELECT, 1, HMOTORS_CLKWISE_DIRECTION, 10);
 80026de:	230a      	movs	r3, #10
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	2002      	movs	r0, #2
 80026e6:	f001 fce1 	bl	80040ac <HMOTOR_Step>
		MSTK_uint8Delay(50);
 80026ea:	2032      	movs	r0, #50	; 0x32
 80026ec:	f004 f862 	bl	80067b4 <MSTK_uint8Delay>
		if(Loc_float32Voltages > Loc_float32MaxIntensity)
 80026f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80026f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8002700:	f7fe fcd0 	bl	80010a4 <__aeabi_fcmplt>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <SPECTRO_InitCalibration+0x21c>
		{
			Loc_float32MaxIntensity = Loc_float32Voltages;
 800270a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800270e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
			Loc_uint32MaxIndex = Loc_uint32Index;
 8002718:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800271c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	for(Loc_uint32Index = 1; Loc_uint32Index < 600; Loc_uint32Index++)
 8002720:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002724:	3301      	adds	r3, #1
 8002726:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800272a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800272e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002732:	d3b7      	bcc.n	80026a4 <SPECTRO_InitCalibration+0x1a0>
		}
	}
	MUART_TxString(UART3, "UV Maximum Steps = ");
 8002734:	492e      	ldr	r1, [pc, #184]	; (80027f0 <SPECTRO_InitCalibration+0x2ec>)
 8002736:	2002      	movs	r0, #2
 8002738:	f004 f9ca 	bl	8006ad0 <MUART_TxString>
	MUART_SendIntegerValue(UART3, (Loc_uint32MaxIndex + 900));
 800273c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002740:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002744:	4619      	mov	r1, r3
 8002746:	2002      	movs	r0, #2
 8002748:	f004 fa0c 	bl	8006b64 <MUART_SendIntegerValue>
	MUART_TxChar(UART3, '\n');
 800274c:	210a      	movs	r1, #10
 800274e:	2002      	movs	r0, #2
 8002750:	f004 f954 	bl	80069fc <MUART_TxChar>

	Loc_uint32StepsPerNm = (float32)(Loc_uint32MaxIndex + 900 - Loc_uint32ZeroWLSteps) / 656.1f;
 8002754:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8002758:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe faa8 	bl	8000cb8 <__aeabi_ui2f>
 8002768:	4603      	mov	r3, r0
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <SPECTRO_InitCalibration+0x2f0>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fbaf 	bl	8000ed0 <__aeabi_fdiv>
 8002772:	4603      	mov	r3, r0
 8002774:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	uint8 Loc_uint8Buffer[32] = {0};
 8002778:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800277c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	3304      	adds	r3, #4
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	611a      	str	r2, [r3, #16]
 8002792:	615a      	str	r2, [r3, #20]
 8002794:	619a      	str	r2, [r3, #24]
	float_to_string_manual(Loc_uint8Buffer, Loc_uint32StepsPerNm, 3);
 8002796:	463b      	mov	r3, r7
 8002798:	2203      	movs	r2, #3
 800279a:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fc18 	bl	8002fd4 <float_to_string_manual>
	MUART_TxString(UART3, "Steps/nm = ");
 80027a4:	4914      	ldr	r1, [pc, #80]	; (80027f8 <SPECTRO_InitCalibration+0x2f4>)
 80027a6:	2002      	movs	r0, #2
 80027a8:	f004 f992 	bl	8006ad0 <MUART_TxString>
	//MUART_SendIntegerValue(UART3, Loc_uint32StepsPerNm);
	MUART_TxString(UART3, Loc_uint8Buffer);
 80027ac:	463b      	mov	r3, r7
 80027ae:	4619      	mov	r1, r3
 80027b0:	2002      	movs	r0, #2
 80027b2:	f004 f98d 	bl	8006ad0 <MUART_TxString>
	MUART_TxChar(UART3, '\n');
 80027b6:	210a      	movs	r1, #10
 80027b8:	2002      	movs	r0, #2
 80027ba:	f004 f91f 	bl	80069fc <MUART_TxChar>
	HMOTOR_GetWLSelectCalibration(Loc_uint32ZeroWLSteps, Loc_uint32StepsPerNm);
 80027be:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 80027c2:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 80027c6:	f001 fecd 	bl	8004564 <HMOTOR_GetWLSelectCalibration>
	HMOTOR_GoHome(HMOTOR_WL_SELECT);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f002 f84e 	bl	800486c <HMOTOR_GoHome>
	HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32ZeroWLSteps, HMOTORS_CLKWISE_DIRECTION, 10);
 80027d0:	230a      	movs	r3, #10
 80027d2:	2201      	movs	r2, #1
 80027d4:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80027d8:	2002      	movs	r0, #2
 80027da:	f001 fc67 	bl	80040ac <HMOTOR_Step>
	return E_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	0800c4d0 	.word	0x0800c4d0
 80027f0:	0800c4ec 	.word	0x0800c4ec
 80027f4:	44240666 	.word	0x44240666
 80027f8:	0800c500 	.word	0x0800c500

080027fc <Medium_Step_Index>:
//**********************Mohanad was here***********************************/
//*************************************************************************/
//*************************************************************************/

unsigned char Medium_Step_Index(float* readings, unsigned char size)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
	float max = readings[0], min = readings[0];
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
	for(unsigned char i = 0; i < size; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]
 8002818:	e026      	b.n	8002868 <Medium_Step_Index+0x6c>
	{
		if(readings[i] > max)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	69f8      	ldr	r0, [r7, #28]
 8002828:	f7fe fc3c 	bl	80010a4 <__aeabi_fcmplt>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <Medium_Step_Index+0x42>
		{
			max = readings[i];
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61fb      	str	r3, [r7, #28]
		}
		if(readings[i] < min)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	69b8      	ldr	r0, [r7, #24]
 800284c:	f7fe fc48 	bl	80010e0 <__aeabi_fcmpgt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <Medium_Step_Index+0x66>
		{
			min = readings[i];
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
	for(unsigned char i = 0; i < size; i++)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	3301      	adds	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
 8002868:	7dfa      	ldrb	r2, [r7, #23]
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3d4      	bcc.n	800281a <Medium_Step_Index+0x1e>
		}
	}
	float threshold = (max+min)/2.0f;
 8002870:	69b9      	ldr	r1, [r7, #24]
 8002872:	69f8      	ldr	r0, [r7, #28]
 8002874:	f7fe f970 	bl	8000b58 <__addsf3>
 8002878:	4603      	mov	r3, r0
 800287a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fb26 	bl	8000ed0 <__aeabi_fdiv>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]
	unsigned char first_step_index = 0, last_step_index = 0, indicator = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	75bb      	strb	r3, [r7, #22]
 800288c:	2300      	movs	r3, #0
 800288e:	757b      	strb	r3, [r7, #21]
 8002890:	2300      	movs	r3, #0
 8002892:	753b      	strb	r3, [r7, #20]
	for(unsigned char i = 0; i < size; i++)
 8002894:	2300      	movs	r3, #0
 8002896:	74fb      	strb	r3, [r7, #19]
 8002898:	e028      	b.n	80028ec <Medium_Step_Index+0xf0>
	{
		if((readings[i] > threshold) && (indicator == 0))
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7fe fbfc 	bl	80010a4 <__aeabi_fcmplt>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <Medium_Step_Index+0xc6>
 80028b2:	7d3b      	ldrb	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <Medium_Step_Index+0xc6>
		{
			indicator = 1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	753b      	strb	r3, [r7, #20]
			first_step_index = i;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	75bb      	strb	r3, [r7, #22]
			continue;
 80028c0:	e011      	b.n	80028e6 <Medium_Step_Index+0xea>
		}
		if((readings[i] < threshold) && (indicator == 1))
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7fe fc06 	bl	80010e0 <__aeabi_fcmpgt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <Medium_Step_Index+0xea>
 80028da:	7d3b      	ldrb	r3, [r7, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d102      	bne.n	80028e6 <Medium_Step_Index+0xea>
		{
			last_step_index = i;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	757b      	strb	r3, [r7, #21]
			break;
 80028e4:	e006      	b.n	80028f4 <Medium_Step_Index+0xf8>
	for(unsigned char i = 0; i < size; i++)
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	3301      	adds	r3, #1
 80028ea:	74fb      	strb	r3, [r7, #19]
 80028ec:	7cfa      	ldrb	r2, [r7, #19]
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d3d2      	bcc.n	800289a <Medium_Step_Index+0x9e>
		}
	}
	return (((last_step_index + first_step_index)/2));
 80028f4:	7d7a      	ldrb	r2, [r7, #21]
 80028f6:	7dbb      	ldrb	r3, [r7, #22]
 80028f8:	4413      	add	r3, r2
 80028fa:	0fda      	lsrs	r2, r3, #31
 80028fc:	4413      	add	r3, r2
 80028fe:	105b      	asrs	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	0000      	movs	r0, r0
 800290c:	0000      	movs	r0, r0
	...

08002910 <read_reference_voltage>:
#include "../../HAL/MCP4151/MCP4151.h"
#include "../../HAL/ADS1115/ADC.h"

static volatile uint8 current_gain;
void read_reference_voltage(float32 *ref, float32 *gain)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	float32 reading;
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 800291a:	7a7b      	ldrb	r3, [r7, #9]
 800291c:	f36f 13c7 	bfc	r3, #7, #1
 8002920:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN0_GND;
 8002922:	7a7b      	ldrb	r3, [r7, #9]
 8002924:	2204      	movs	r2, #4
 8002926:	f362 1306 	bfi	r3, r2, #4, #3
 800292a:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	2201      	movs	r2, #1
 8002930:	f362 0343 	bfi	r3, r2, #1, #3
 8002934:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8002936:	7a7b      	ldrb	r3, [r7, #9]
 8002938:	f36f 0300 	bfc	r3, #0, #1
 800293c:	727b      	strb	r3, [r7, #9]
	config.DR = DR_128SPS;
 800293e:	7a3b      	ldrb	r3, [r7, #8]
 8002940:	2204      	movs	r2, #4
 8002942:	f362 1347 	bfi	r3, r2, #5, #3
 8002946:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002948:	7a3b      	ldrb	r3, [r7, #8]
 800294a:	f36f 1304 	bfc	r3, #4, #1
 800294e:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002950:	7a3b      	ldrb	r3, [r7, #8]
 8002952:	f36f 03c3 	bfc	r3, #3, #1
 8002956:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002958:	7a3b      	ldrb	r3, [r7, #8]
 800295a:	f36f 0382 	bfc	r3, #2, #1
 800295e:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002960:	7a3b      	ldrb	r3, [r7, #8]
 8002962:	f043 0303 	orr.w	r3, r3, #3
 8002966:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800296e:	601a      	str	r2, [r3, #0]

	adc_set_configurations(config);
 8002970:	8938      	ldrh	r0, [r7, #8]
 8002972:	f000 fa25 	bl	8002dc0 <adc_set_configurations>
	MSTK_uint8Delay(10);
 8002976:	200a      	movs	r0, #10
 8002978:	f003 ff1c 	bl	80067b4 <MSTK_uint8Delay>
	reading = adc_read_mv(config);
 800297c:	8938      	ldrh	r0, [r7, #8]
 800297e:	f000 f9db 	bl	8002d38 <adc_read_mv>
 8002982:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002984:	4950      	ldr	r1, [pc, #320]	; (8002ac8 <read_reference_voltage+0x1b8>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fe fb8c 	bl	80010a4 <__aeabi_fcmplt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d025      	beq.n	80029de <read_reference_voltage+0xce>
	{
		config.MUX = MUX_AIN1_GND;
 8002992:	7a7b      	ldrb	r3, [r7, #9]
 8002994:	2205      	movs	r2, #5
 8002996:	f362 1306 	bfi	r3, r2, #4, #3
 800299a:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(50.0);
 800299c:	484a      	ldr	r0, [pc, #296]	; (8002ac8 <read_reference_voltage+0x1b8>)
 800299e:	f000 ffb8 	bl	8003912 <Set_Reference_Gain>
		MSTK_uint8Delay(10);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f003 ff06 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 80029a8:	8938      	ldrh	r0, [r7, #8]
 80029aa:	f000 fa09 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 80029ae:	200a      	movs	r0, #10
 80029b0:	f003 ff00 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 80029b4:	8938      	ldrh	r0, [r7, #8]
 80029b6:	f000 f9bf 	bl	8002d38 <adc_read_mv>
 80029ba:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 80029bc:	4842      	ldr	r0, [pc, #264]	; (8002ac8 <read_reference_voltage+0x1b8>)
 80029be:	f001 f81b 	bl	80039f8 <get_reference_gain>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7fe fa82 	bl	8000ed0 <__aeabi_fdiv>
 80029cc:	4603      	mov	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(50.0);
 80029d0:	483d      	ldr	r0, [pc, #244]	; (8002ac8 <read_reference_voltage+0x1b8>)
 80029d2:	f001 f811 	bl	80039f8 <get_reference_gain>
 80029d6:	4602      	mov	r2, r0
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e058      	b.n	8002a90 <read_reference_voltage+0x180>
	}
	else if(reading < 100.0)
 80029de:	493b      	ldr	r1, [pc, #236]	; (8002acc <read_reference_voltage+0x1bc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7fe fb5f 	bl	80010a4 <__aeabi_fcmplt>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d025      	beq.n	8002a38 <read_reference_voltage+0x128>
	{
		config.MUX = MUX_AIN1_GND;
 80029ec:	7a7b      	ldrb	r3, [r7, #9]
 80029ee:	2205      	movs	r2, #5
 80029f0:	f362 1306 	bfi	r3, r2, #4, #3
 80029f4:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(30.0);
 80029f6:	4836      	ldr	r0, [pc, #216]	; (8002ad0 <read_reference_voltage+0x1c0>)
 80029f8:	f000 ff8b 	bl	8003912 <Set_Reference_Gain>
		MSTK_uint8Delay(10);
 80029fc:	200a      	movs	r0, #10
 80029fe:	f003 fed9 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 8002a02:	8938      	ldrh	r0, [r7, #8]
 8002a04:	f000 f9dc 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f003 fed3 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 8002a0e:	8938      	ldrh	r0, [r7, #8]
 8002a10:	f000 f992 	bl	8002d38 <adc_read_mv>
 8002a14:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(30.0);
 8002a16:	482e      	ldr	r0, [pc, #184]	; (8002ad0 <read_reference_voltage+0x1c0>)
 8002a18:	f000 ffee 	bl	80039f8 <get_reference_gain>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7fe fa55 	bl	8000ed0 <__aeabi_fdiv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(30.0);
 8002a2a:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <read_reference_voltage+0x1c0>)
 8002a2c:	f000 ffe4 	bl	80039f8 <get_reference_gain>
 8002a30:	4602      	mov	r2, r0
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e02b      	b.n	8002a90 <read_reference_voltage+0x180>
	}
	else if(reading < 200.0)
 8002a38:	4926      	ldr	r1, [pc, #152]	; (8002ad4 <read_reference_voltage+0x1c4>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7fe fb32 	bl	80010a4 <__aeabi_fcmplt>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d024      	beq.n	8002a90 <read_reference_voltage+0x180>
	{
		config.MUX = MUX_AIN1_GND;
 8002a46:	7a7b      	ldrb	r3, [r7, #9]
 8002a48:	2205      	movs	r2, #5
 8002a4a:	f362 1306 	bfi	r3, r2, #4, #3
 8002a4e:	727b      	strb	r3, [r7, #9]
		Set_Reference_Gain(15.0);
 8002a50:	4821      	ldr	r0, [pc, #132]	; (8002ad8 <read_reference_voltage+0x1c8>)
 8002a52:	f000 ff5e 	bl	8003912 <Set_Reference_Gain>
		MSTK_uint8Delay(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f003 feac 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 8002a5c:	8938      	ldrh	r0, [r7, #8]
 8002a5e:	f000 f9af 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f003 fea6 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 8002a68:	8938      	ldrh	r0, [r7, #8]
 8002a6a:	f000 f965 	bl	8002d38 <adc_read_mv>
 8002a6e:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(15.0);
 8002a70:	4819      	ldr	r0, [pc, #100]	; (8002ad8 <read_reference_voltage+0x1c8>)
 8002a72:	f000 ffc1 	bl	80039f8 <get_reference_gain>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7fe fa28 	bl	8000ed0 <__aeabi_fdiv>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
		*gain = get_reference_gain(15.0);
 8002a84:	4814      	ldr	r0, [pc, #80]	; (8002ad8 <read_reference_voltage+0x1c8>)
 8002a86:	f000 ffb7 	bl	80039f8 <get_reference_gain>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
	}
	reading *= (11.0 + 29.4)/11.0;
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7fd fce3 	bl	800045c <__aeabi_f2d>
 8002a96:	a30a      	add	r3, pc, #40	; (adr r3, 8002ac0 <read_reference_voltage+0x1b0>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fd36 	bl	800050c <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f800 	bl	8000aac <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
	*ref = reading;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	d61bed61 	.word	0xd61bed61
 8002ac4:	400d61be 	.word	0x400d61be
 8002ac8:	42480000 	.word	0x42480000
 8002acc:	42c80000 	.word	0x42c80000
 8002ad0:	41f00000 	.word	0x41f00000
 8002ad4:	43480000 	.word	0x43480000
 8002ad8:	41700000 	.word	0x41700000
 8002adc:	00000000 	.word	0x00000000

08002ae0 <read_sample_voltage>:

void read_sample_voltage(float32 *sample, float32 *gain)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	float32 reading = 0.0;
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
	ADC_config config;
	config.OS = OS_NO_EFFECT;
 8002af0:	7a7b      	ldrb	r3, [r7, #9]
 8002af2:	f36f 13c7 	bfc	r3, #7, #1
 8002af6:	727b      	strb	r3, [r7, #9]
	config.MUX = MUX_AIN2_GND;
 8002af8:	7a7b      	ldrb	r3, [r7, #9]
 8002afa:	2206      	movs	r2, #6
 8002afc:	f362 1306 	bfi	r3, r2, #4, #3
 8002b00:	727b      	strb	r3, [r7, #9]
	config.PGA = PGA_4_096;
 8002b02:	7a7b      	ldrb	r3, [r7, #9]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f362 0343 	bfi	r3, r2, #1, #3
 8002b0a:	727b      	strb	r3, [r7, #9]
	config.MODE = MODE_CONT_CONVERSION;
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	f36f 0300 	bfc	r3, #0, #1
 8002b12:	727b      	strb	r3, [r7, #9]
	config.DR = DR_128SPS;
 8002b14:	7a3b      	ldrb	r3, [r7, #8]
 8002b16:	2204      	movs	r2, #4
 8002b18:	f362 1347 	bfi	r3, r2, #5, #3
 8002b1c:	723b      	strb	r3, [r7, #8]
	config.COMP_MODE = COMP_MODE_DEFAULT;
 8002b1e:	7a3b      	ldrb	r3, [r7, #8]
 8002b20:	f36f 1304 	bfc	r3, #4, #1
 8002b24:	723b      	strb	r3, [r7, #8]
	config.COMP_POL = COMP_POL_DEFAULT;
 8002b26:	7a3b      	ldrb	r3, [r7, #8]
 8002b28:	f36f 03c3 	bfc	r3, #3, #1
 8002b2c:	723b      	strb	r3, [r7, #8]
	config.COMP_LAT = COMP_LAT_DEFAULT;
 8002b2e:	7a3b      	ldrb	r3, [r7, #8]
 8002b30:	f36f 0382 	bfc	r3, #2, #1
 8002b34:	723b      	strb	r3, [r7, #8]
	config.COMP_QUE = COMP_QUE_DEFAULT;
 8002b36:	7a3b      	ldrb	r3, [r7, #8]
 8002b38:	f043 0303 	orr.w	r3, r3, #3
 8002b3c:	723b      	strb	r3, [r7, #8]
	*gain = 1.0f;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b44:	601a      	str	r2, [r3, #0]

	adc_set_configurations(config);
 8002b46:	8938      	ldrh	r0, [r7, #8]
 8002b48:	f000 f93a 	bl	8002dc0 <adc_set_configurations>
	MSTK_uint8Delay(10);
 8002b4c:	200a      	movs	r0, #10
 8002b4e:	f003 fe31 	bl	80067b4 <MSTK_uint8Delay>
	reading = adc_read_mv(config);
 8002b52:	8938      	ldrh	r0, [r7, #8]
 8002b54:	f000 f8f0 	bl	8002d38 <adc_read_mv>
 8002b58:	60f8      	str	r0, [r7, #12]
	if(reading < 50.0)
 8002b5a:	494f      	ldr	r1, [pc, #316]	; (8002c98 <read_sample_voltage+0x1b8>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7fe faa1 	bl	80010a4 <__aeabi_fcmplt>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d024      	beq.n	8002bb2 <read_sample_voltage+0xd2>
	{
		config.MUX = MUX_AIN3_GND;
 8002b68:	7a7b      	ldrb	r3, [r7, #9]
 8002b6a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002b6e:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(50.0);
 8002b70:	4849      	ldr	r0, [pc, #292]	; (8002c98 <read_sample_voltage+0x1b8>)
 8002b72:	f000 feb1 	bl	80038d8 <Set_Sample_Gain>
		MSTK_uint8Delay(10);
 8002b76:	200a      	movs	r0, #10
 8002b78:	f003 fe1c 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 8002b7c:	8938      	ldrh	r0, [r7, #8]
 8002b7e:	f000 f91f 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 8002b82:	200a      	movs	r0, #10
 8002b84:	f003 fe16 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 8002b88:	8938      	ldrh	r0, [r7, #8]
 8002b8a:	f000 f8d5 	bl	8002d38 <adc_read_mv>
 8002b8e:	60f8      	str	r0, [r7, #12]
		reading /= get_reference_gain(50.0);
 8002b90:	4841      	ldr	r0, [pc, #260]	; (8002c98 <read_sample_voltage+0x1b8>)
 8002b92:	f000 ff31 	bl	80039f8 <get_reference_gain>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7fe f998 	bl	8000ed0 <__aeabi_fdiv>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(50.0);
 8002ba4:	483c      	ldr	r0, [pc, #240]	; (8002c98 <read_sample_voltage+0x1b8>)
 8002ba6:	f000 ff6b 	bl	8003a80 <get_sample_gain>
 8002baa:	4602      	mov	r2, r0
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e056      	b.n	8002c60 <read_sample_voltage+0x180>
	}
	else if(reading < 100.0)
 8002bb2:	493a      	ldr	r1, [pc, #232]	; (8002c9c <read_sample_voltage+0x1bc>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7fe fa75 	bl	80010a4 <__aeabi_fcmplt>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d024      	beq.n	8002c0a <read_sample_voltage+0x12a>
	{
		config.MUX = MUX_AIN3_GND;
 8002bc0:	7a7b      	ldrb	r3, [r7, #9]
 8002bc2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002bc6:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(30.0);
 8002bc8:	4835      	ldr	r0, [pc, #212]	; (8002ca0 <read_sample_voltage+0x1c0>)
 8002bca:	f000 fe85 	bl	80038d8 <Set_Sample_Gain>
		MSTK_uint8Delay(10);
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f003 fdf0 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 8002bd4:	8938      	ldrh	r0, [r7, #8]
 8002bd6:	f000 f8f3 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f003 fdea 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 8002be0:	8938      	ldrh	r0, [r7, #8]
 8002be2:	f000 f8a9 	bl	8002d38 <adc_read_mv>
 8002be6:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(30.0);
 8002be8:	482d      	ldr	r0, [pc, #180]	; (8002ca0 <read_sample_voltage+0x1c0>)
 8002bea:	f000 ff49 	bl	8003a80 <get_sample_gain>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7fe f96c 	bl	8000ed0 <__aeabi_fdiv>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(30.0);
 8002bfc:	4828      	ldr	r0, [pc, #160]	; (8002ca0 <read_sample_voltage+0x1c0>)
 8002bfe:	f000 ff3f 	bl	8003a80 <get_sample_gain>
 8002c02:	4602      	mov	r2, r0
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e02a      	b.n	8002c60 <read_sample_voltage+0x180>
	}
	else if(reading < 200.0)
 8002c0a:	4926      	ldr	r1, [pc, #152]	; (8002ca4 <read_sample_voltage+0x1c4>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7fe fa49 	bl	80010a4 <__aeabi_fcmplt>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d023      	beq.n	8002c60 <read_sample_voltage+0x180>
	{
		config.MUX = MUX_AIN3_GND;
 8002c18:	7a7b      	ldrb	r3, [r7, #9]
 8002c1a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002c1e:	727b      	strb	r3, [r7, #9]
		Set_Sample_Gain(15.0);
 8002c20:	4821      	ldr	r0, [pc, #132]	; (8002ca8 <read_sample_voltage+0x1c8>)
 8002c22:	f000 fe59 	bl	80038d8 <Set_Sample_Gain>
		MSTK_uint8Delay(10);
 8002c26:	200a      	movs	r0, #10
 8002c28:	f003 fdc4 	bl	80067b4 <MSTK_uint8Delay>
		adc_set_configurations(config);
 8002c2c:	8938      	ldrh	r0, [r7, #8]
 8002c2e:	f000 f8c7 	bl	8002dc0 <adc_set_configurations>
		MSTK_uint8Delay(10);
 8002c32:	200a      	movs	r0, #10
 8002c34:	f003 fdbe 	bl	80067b4 <MSTK_uint8Delay>
		reading = adc_read_mv(config);
 8002c38:	8938      	ldrh	r0, [r7, #8]
 8002c3a:	f000 f87d 	bl	8002d38 <adc_read_mv>
 8002c3e:	60f8      	str	r0, [r7, #12]
		reading /= get_sample_gain(15.0);
 8002c40:	4819      	ldr	r0, [pc, #100]	; (8002ca8 <read_sample_voltage+0x1c8>)
 8002c42:	f000 ff1d 	bl	8003a80 <get_sample_gain>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7fe f940 	bl	8000ed0 <__aeabi_fdiv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]
		*gain = get_sample_gain(15.0);
 8002c54:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <read_sample_voltage+0x1c8>)
 8002c56:	f000 ff13 	bl	8003a80 <get_sample_gain>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
	}
	reading *= (11.0 + 29.4)/11.0;
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7fd fbfb 	bl	800045c <__aeabi_f2d>
 8002c66:	a30a      	add	r3, pc, #40	; (adr r3, 8002c90 <read_sample_voltage+0x1b0>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fc4e 	bl	800050c <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ff18 	bl	8000aac <__aeabi_d2f>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]
	*sample = reading;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	d61bed61 	.word	0xd61bed61
 8002c94:	400d61be 	.word	0x400d61be
 8002c98:	42480000 	.word	0x42480000
 8002c9c:	42c80000 	.word	0x42c80000
 8002ca0:	41f00000 	.word	0x41f00000
 8002ca4:	43480000 	.word	0x43480000
 8002ca8:	41700000 	.word	0x41700000

08002cac <SpectroStatus_GetCurrentStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                    Spectrophotometer's Status is given  
 * @retval E_NOT_OK:                Error giving status
 */
Std_ReturnType SpectroStatus_GetCurrentStatus       (SPECTRO_Status_t* P_uint32SpectroStatus)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    if(P_uint32SpectroStatus != NULL_PTR)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <SpectroStatus_GetCurrentStatus+0x1c>
    {
        *P_uint32SpectroStatus = glbl_uint32SpectroCurrentStatus;
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <SpectroStatus_GetCurrentStatus+0x28>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	701a      	strb	r2, [r3, #0]
        return E_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <SpectroStatus_GetCurrentStatus+0x1e>
    }
    else
    {
        return E_NOT_OK;
 8002cc8:	2301      	movs	r3, #1
    }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	200005c4 	.word	0x200005c4

08002cd8 <SpectroStatus_SetNewStatus>:
 * @return Std_ReturnType
 * @retval E_OK:                    Spectrophotometer's Status Successfully Set
 * @retval E_NOT_OK:                Spectrophotometer's Status not Set 
 */
Std_ReturnType SpectroStatus_SetNewStatus           (SPECTRO_Status_t Copy_uint32SpectroStatus)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
    glbl_uint32SpectroCurrentStatus = Copy_uint32SpectroStatus;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <SpectroStatus_SetNewStatus+0x1c>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	7013      	strb	r3, [r2, #0]
    return E_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	200005c4 	.word	0x200005c4

08002cf8 <adc_init>:
#include "ADC.h"

uint8 ch4[2];

void adc_init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8002cfe:	2340      	movs	r3, #64	; 0x40
 8002d00:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 8002d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d06:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <adc_init+0x38>)
 8002d0a:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8002d14:	2300      	movs	r3, #0
 8002d16:	80bb      	strh	r3, [r7, #4]

	//MCAL_I2C_GPIO_Set_Pins (I2C1);
	//MCAL_I2C_Init(I2C1, &I2C1CFG);
	MCAL_I2C_RESET();
 8002d18:	f002 fe18 	bl	800594c <MCAL_I2C_RESET>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <adc_init+0x3c>)
 8002d22:	f002 fd4f 	bl	80057c4 <MCAL_I2C_Init>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	000186a0 	.word	0x000186a0
 8002d34:	40005400 	.word	0x40005400

08002d38 <adc_read_mv>:

float32 adc_read_mv(ADC_config a)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x48;
 8002d40:	2348      	movs	r3, #72	; 0x48
 8002d42:	83fb      	strh	r3, [r7, #30]
	uint8 ch[3], ch2[2];
	uint8 ch4[2];
	uint16 reading;
	float32 mv;
	ch[0] = 0x00;
 8002d44:	2300      	movs	r3, #0
 8002d46:	753b      	strb	r3, [r7, #20]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 1, With_Stop, Start);
 8002d48:	f107 0214 	add.w	r2, r7, #20
 8002d4c:	8bf9      	ldrh	r1, [r7, #30]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2301      	movs	r3, #1
 8002d58:	4816      	ldr	r0, [pc, #88]	; (8002db4 <adc_read_mv+0x7c>)
 8002d5a:	f002 fe49 	bl	80059f0 <MCAL_I2C_MASTER_TX>
	delay_ms(10);
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f000 fd11 	bl	8003786 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, Slave_address, ch4 , 2, With_Stop,Start);
 8002d64:	f107 020c 	add.w	r2, r7, #12
 8002d68:	8bf9      	ldrh	r1, [r7, #30]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2302      	movs	r3, #2
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <adc_read_mv+0x7c>)
 8002d76:	f002 fe99 	bl	8005aac <MCAL_I2C_MASTER_RX>
	reading = (ch4[1] << 8) | ch4[0];
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	7b3b      	ldrb	r3, [r7, #12]
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	83bb      	strh	r3, [r7, #28]
	mv = ((float32)reading * ((float32)4.096/(float32)0x8000))*1000;
 8002d8a:	8bbb      	ldrh	r3, [r7, #28]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd ff93 	bl	8000cb8 <__aeabi_ui2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4908      	ldr	r1, [pc, #32]	; (8002db8 <adc_read_mv+0x80>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd ffe6 	bl	8000d68 <__aeabi_fmul>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4907      	ldr	r1, [pc, #28]	; (8002dbc <adc_read_mv+0x84>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd ffe1 	bl	8000d68 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	61bb      	str	r3, [r7, #24]
	return mv;
 8002daa:	69bb      	ldr	r3, [r7, #24]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40005400 	.word	0x40005400
 8002db8:	3903126f 	.word	0x3903126f
 8002dbc:	447a0000 	.word	0x447a0000

08002dc0 <adc_set_configurations>:

float32 adc_set_configurations(ADC_config a)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	80b8      	strh	r0, [r7, #4]
	uint16 Slave_address = 0x48;
 8002dc8:	2348      	movs	r3, #72	; 0x48
 8002dca:	81fb      	strh	r3, [r7, #14]
	uint8 ch[3];
	ch[0] = 0x01;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	723b      	strb	r3, [r7, #8]
	ch[1] = (a.OS << 7) | (a.MUX << 4) | (a.PGA<<1) | (a.MODE<<0);
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	01db      	lsls	r3, r3, #7
 8002dda:	b25a      	sxtb	r2, r3
 8002ddc:	797b      	ldrb	r3, [r7, #5]
 8002dde:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	797b      	ldrb	r3, [r7, #5]
 8002dee:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b25a      	sxtb	r2, r3
 8002dfc:	797b      	ldrb	r3, [r7, #5]
 8002dfe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	4313      	orrs	r3, r2
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	727b      	strb	r3, [r7, #9]
	ch[2] = (a.DR<<5) | (a.COMP_MODE<<4) | (a.COMP_POL<<3) | (a.COMP_LAT<<2) | (a.COMP_QUE);
 8002e0e:	793b      	ldrb	r3, [r7, #4]
 8002e10:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	b25a      	sxtb	r2, r3
 8002e1a:	793b      	ldrb	r3, [r7, #4]
 8002e1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b25a      	sxtb	r2, r3
 8002e2a:	793b      	ldrb	r3, [r7, #4]
 8002e2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b25a      	sxtb	r2, r3
 8002e3a:	793b      	ldrb	r3, [r7, #4]
 8002e3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b25a      	sxtb	r2, r3
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	72bb      	strb	r3, [r7, #10]
	MCAL_I2C_MASTER_TX(I2C1, Slave_address, ch, 3, With_Stop, Start);
 8002e5c:	f107 0208 	add.w	r2, r7, #8
 8002e60:	89f9      	ldrh	r1, [r7, #14]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <adc_set_configurations+0xbc>)
 8002e6e:	f002 fdbf 	bl	80059f0 <MCAL_I2C_MASTER_TX>
}
 8002e72:	bf00      	nop
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40005400 	.word	0x40005400

08002e80 <eeprom_init>:
 */

#include "I2C_Slave_EEPROM.h"

void eeprom_init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8002e86:	2340      	movs	r3, #64	; 0x40
 8002e88:	827b      	strh	r3, [r7, #18]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 8002e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8e:	823b      	strh	r3, [r7, #16]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100k ;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <eeprom_init+0x38>)
 8002e92:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8002e94:	2300      	movs	r3, #0
 8002e96:	80fb      	strh	r3, [r7, #6]
	I2C1CFG.P_Slave_Event_CallBack = 0 ;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	80bb      	strh	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8002ea0:	4806      	ldr	r0, [pc, #24]	; (8002ebc <eeprom_init+0x3c>)
 8002ea2:	f002 fd7b 	bl	800599c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <eeprom_init+0x3c>)
 8002eac:	f002 fc8a 	bl	80057c4 <MCAL_I2C_Init>
//	MCAL_I2C_RESET();
//	MCAL_I2C_Init(I2C1, &I2C1CFG);


}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	40005400 	.word	0x40005400

08002ec0 <eeprom_write_Nbytes>:
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8 Data_Length)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b0c8      	sub	sp, #288	; 0x120
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ece:	6018      	str	r0, [r3, #0]
 8002ed0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ed4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ed8:	6019      	str	r1, [r3, #0]
 8002eda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ede:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ee2:	701a      	strb	r2, [r3, #0]
	uint8 i=0 ;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8 buffer[256]  ;
	//buffer[0] = (u8)(Memory_address>>8) ; 	//upper byte Memory Address
	//buffer[1] = (u8)Memory_address ; 	//lower byte Memory Address
	buffer[0] = (uint8)(Memory_address) ; 	//Memory Address
 8002eea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002eee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002efe:	701a      	strb	r2, [r3, #0]

	for (i=1 ; i<(Data_Length+1) ; i++ )
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002f06:	e015      	b.n	8002f34 <eeprom_write_Nbytes+0x74>
	{buffer[i] = bytes[i-1] ;}
 8002f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002f12:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	441a      	add	r2, r3
 8002f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f1e:	7811      	ldrb	r1, [r2, #0]
 8002f20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002f24:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002f28:	54d1      	strb	r1, [r2, r3]
	for (i=1 ; i<(Data_Length+1) ; i++ )
 8002f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002f34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002f38:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d2e0      	bcs.n	8002f08 <eeprom_write_Nbytes+0x48>

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+1), With_Stop, Start);
 8002f46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002f4a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4619      	mov	r1, r3
 8002f54:	f107 0214 	add.w	r2, r7, #20
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	460b      	mov	r3, r1
 8002f62:	2150      	movs	r1, #80	; 0x50
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <eeprom_write_Nbytes+0xb8>)
 8002f66:	f002 fd43 	bl	80059f0 <MCAL_I2C_MASTER_TX>

	return 0;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40005400 	.word	0x40005400

08002f7c <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8* dataOut, uint8 dataLen)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	//buffer[0] = (u8)(address>>8) ; 	//Upper Memory Address
	//buffer[1] = (u8)(address) ; 	//Lower Memory Address
	buffer[0] = (uint8)(address) ; 	//Memory Address
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	753b      	strb	r3, [r7, #20]

	delay_ms(100);
 8002f90:	2064      	movs	r0, #100	; 0x64
 8002f92:	f000 fbf8 	bl	8003786 <delay_ms>
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_address , buffer, 1,Without_Stop ,Start); //Write Address Only
 8002f96:	f107 0214 	add.w	r2, r7, #20
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2150      	movs	r1, #80	; 0x50
 8002fa6:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <eeprom_read_byte+0x54>)
 8002fa8:	f002 fd22 	bl	80059f0 <MCAL_I2C_MASTER_TX>
	delay_ms(100);
 8002fac:	2064      	movs	r0, #100	; 0x64
 8002fae:	f000 fbea 	bl	8003786 <delay_ms>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start); 			//Read Data
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	9201      	str	r2, [sp, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	2150      	movs	r1, #80	; 0x50
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <eeprom_read_byte+0x54>)
 8002fc2:	f002 fd73 	bl	8005aac <MCAL_I2C_MASTER_RX>

	return 0;
 8002fc6:	2300      	movs	r3, #0

}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40005400 	.word	0x40005400

08002fd4 <float_to_string_manual>:

static volatile uint8 glbl_uint8CommandBuffer[HESP32_MAX_BUFFER_SPACE] = {0};
static volatile uint8 glbl_uint8BufferIndex = 0;

void float_to_string_manual(uint8* P_uint8Buffer, float32 Copy_float32FloatNum, uint32 Loc_uint32precision) 
{
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	b090      	sub	sp, #64	; 0x40
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
    uint32 Loc_uint32IntPart = 0, Loc_uint32DecimalPart = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32 i = 0, k = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	2300      	movs	r3, #0
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
    uint8 Loc_uint8TempBuffer[8] = {0};
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    boolean is_negative = FALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Handle sign and extract integer part (modify for specific needs)
    if (Copy_float32FloatNum < 0) 
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	68b8      	ldr	r0, [r7, #8]
 8003004:	f7fe f84e 	bl	80010a4 <__aeabi_fcmplt>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <float_to_string_manual+0x48>
    {
        Copy_float32FloatNum = -Copy_float32FloatNum;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003014:	60bb      	str	r3, [r7, #8]
        is_negative = TRUE;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    Loc_uint32IntPart = (sint32)Copy_float32FloatNum;
 800301c:	68b8      	ldr	r0, [r7, #8]
 800301e:	f7fe f869 	bl	80010f4 <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Handle decimal part if needed (modify for precision)
    if (Loc_uint32precision > 0) 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d021      	beq.n	8003070 <float_to_string_manual+0x9c>
    {
        Copy_float32FloatNum *= pow(10, Loc_uint32precision);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd f9f3 	bl	8000418 <__aeabi_ui2d>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	4952      	ldr	r1, [pc, #328]	; (8003184 <float_to_string_manual+0x1b0>)
 800303c:	f008 faa4 	bl	800b588 <pow>
 8003040:	4604      	mov	r4, r0
 8003042:	460d      	mov	r5, r1
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7fd fa09 	bl	800045c <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4620      	mov	r0, r4
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd fa5b 	bl	800050c <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fd25 	bl	8000aac <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	60bb      	str	r3, [r7, #8]
        Loc_uint32DecimalPart = (uint32)Copy_float32FloatNum;
 8003066:	68b8      	ldr	r0, [r7, #8]
 8003068:	f7fe f86a 	bl	8001140 <__aeabi_f2uiz>
 800306c:	4603      	mov	r3, r0
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Convert integer part to string (replace with your implementation)
    if (is_negative) 
 8003070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <float_to_string_manual+0xb2>
    {
        P_uint8Buffer[i++] = '-';
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	637a      	str	r2, [r7, #52]	; 0x34
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	222d      	movs	r2, #45	; 0x2d
 8003084:	701a      	strb	r2, [r3, #0]
    }
    do 
    {
        //buf[i++] = int_part % 10 + '0';
        Loc_uint8TempBuffer[k++] = Loc_uint32IntPart % 10 + '0';
 8003086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003088:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <float_to_string_manual+0x1b4>)
 800308a:	fba3 2301 	umull	r2, r3, r3, r1
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	1aca      	subs	r2, r1, r3
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	6339      	str	r1, [r7, #48]	; 0x30
 80030a2:	3230      	adds	r2, #48	; 0x30
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	3340      	adds	r3, #64	; 0x40
 80030a8:	443b      	add	r3, r7
 80030aa:	f803 2c2c 	strb.w	r2, [r3, #-44]
        Loc_uint32IntPart /= 10;
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	4a35      	ldr	r2, [pc, #212]	; (8003188 <float_to_string_manual+0x1b4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    } while (Loc_uint32IntPart > 0);
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e2      	bne.n	8003086 <float_to_string_manual+0xb2>

    // Append sign, decimal point, and decimal digits (modify for precision)
    for(sint32 j = (k - 1); j >= 0; j--)
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	3b01      	subs	r3, #1
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	e00d      	b.n	80030e4 <float_to_string_manual+0x110>
    {
        P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	637a      	str	r2, [r7, #52]	; 0x34
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f107 0114 	add.w	r1, r7, #20
 80030d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d8:	440a      	add	r2, r1
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	701a      	strb	r2, [r3, #0]
    for(sint32 j = (k - 1); j >= 0; j--)
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	daee      	bge.n	80030c8 <float_to_string_manual+0xf4>
    }

    if (Loc_uint32precision > 0) 
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d040      	beq.n	8003172 <float_to_string_manual+0x19e>
    {
        uint8 temp = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
        P_uint8Buffer[i++] = '.';
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	637a      	str	r2, [r7, #52]	; 0x34
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	222e      	movs	r2, #46	; 0x2e
 8003100:	701a      	strb	r2, [r3, #0]
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e01b      	b.n	8003140 <float_to_string_manual+0x16c>
        {
            Loc_uint8TempBuffer[j] = Loc_uint32DecimalPart % 10 + '0';
 8003108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <float_to_string_manual+0x1b4>)
 800310c:	fba3 2301 	umull	r2, r3, r3, r1
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	1aca      	subs	r2, r1, r3
 800311c:	b2d3      	uxtb	r3, r2
 800311e:	3330      	adds	r3, #48	; 0x30
 8003120:	b2d9      	uxtb	r1, r3
 8003122:	f107 0214 	add.w	r2, r7, #20
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	4413      	add	r3, r2
 800312a:	460a      	mov	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]
            Loc_uint32DecimalPart /= 10;
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <float_to_string_manual+0x1b4>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	08db      	lsrs	r3, r3, #3
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
        for (sint32 j = 0; j < Loc_uint32precision; j++) 
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3301      	adds	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d8df      	bhi.n	8003108 <float_to_string_manual+0x134>
        }
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	e00d      	b.n	800316c <float_to_string_manual+0x198>
        {
            P_uint8Buffer[i++] = Loc_uint8TempBuffer[j];
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	637a      	str	r2, [r7, #52]	; 0x34
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f107 0114 	add.w	r1, r7, #20
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	440a      	add	r2, r1
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
        for (sint32 j = (Loc_uint32precision - 1); j >= 0; j--) 
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	3b01      	subs	r3, #1
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	daee      	bge.n	8003150 <float_to_string_manual+0x17c>
        }
    }
    P_uint8Buffer[i] = '\0'; // Null terminate the string
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	4413      	add	r3, r2
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
}
 800317c:	bf00      	nop
 800317e:	3740      	adds	r7, #64	; 0x40
 8003180:	46bd      	mov	sp, r7
 8003182:	bdb0      	pop	{r4, r5, r7, pc}
 8003184:	40240000 	.word	0x40240000
 8003188:	cccccccd 	.word	0xcccccccd

0800318c <HESP32_ParseReceivedCommand>:

void HESP32_ParseReceivedCommand  (void)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
    uint16 Loc_uint16RxChar = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	807b      	strh	r3, [r7, #2]
    MUART_RxCharAsynchronous(HESP32_UART_CHOICE, &Loc_uint16RxChar);
 8003196:	1cbb      	adds	r3, r7, #2
 8003198:	4619      	mov	r1, r3
 800319a:	2002      	movs	r0, #2
 800319c:	f003 fc6a 	bl	8006a74 <MUART_RxCharAsynchronous>
	
    if(glbl_uint8BufferIndex < HESP32_MAX_BUFFER_SPACE)
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b27      	cmp	r3, #39	; 0x27
 80031a8:	d876      	bhi.n	8003298 <HESP32_ParseReceivedCommand+0x10c>
    {
        if((uint8)Loc_uint16RxChar == '\n')
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d162      	bne.n	8003278 <HESP32_ParseReceivedCommand+0xec>
        {
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = '\0';
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HESP32_ParseReceivedCommand+0x120>)
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]
            
            uint8 Loc_uint8Index = 0; 
 80031c0:	2300      	movs	r3, #0
 80031c2:	71fb      	strb	r3, [r7, #7]
	    	uint8 Loc_uint8FoundCommand = HESP32_COMMAND_NOT_FOUND;
 80031c4:	2300      	movs	r3, #0
 80031c6:	71bb      	strb	r3, [r7, #6]
	    	uint8 Loc_uint8Compare = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	717b      	strb	r3, [r7, #5]

            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	e049      	b.n	8003266 <HESP32_ParseReceivedCommand+0xda>
            {
	    		Loc_uint8Compare = strncmp((HESP32_AvailableTasks[Loc_uint8Index]), glbl_uint8CommandBuffer, strlen((HESP32_AvailableTasks[Loc_uint8Index])));
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	221a      	movs	r2, #26
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a35      	ldr	r2, [pc, #212]	; (80032b0 <HESP32_ParseReceivedCommand+0x124>)
 80031dc:	189c      	adds	r4, r3, r2
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	221a      	movs	r2, #26
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <HESP32_ParseReceivedCommand+0x124>)
 80031e8:	4413      	add	r3, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fc ffca 	bl	8000184 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	492d      	ldr	r1, [pc, #180]	; (80032ac <HESP32_ParseReceivedCommand+0x120>)
 80031f6:	4620      	mov	r0, r4
 80031f8:	f004 fe83 	bl	8007f02 <strncmp>
 80031fc:	4603      	mov	r3, r0
 80031fe:	717b      	strb	r3, [r7, #5]
                if(Loc_uint8Compare == 0)
 8003200:	797b      	ldrb	r3, [r7, #5]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d12c      	bne.n	8003260 <HESP32_ParseReceivedCommand+0xd4>
                {
                    Loc_uint8FoundCommand = HESP32_COMMAND_FOUND;
 8003206:	2301      	movs	r3, #1
 8003208:	71bb      	strb	r3, [r7, #6]
                    //HESP32_SendCommand("acknowledged");
                    
                    if(Loc_uint8Index < HESP32_NO_OF_NON_ARG_COMMANDS)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b10      	cmp	r3, #16
 800320e:	d80b      	bhi.n	8003228 <HESP32_ParseReceivedCommand+0x9c>
                    {
                        if((glbl_PCallbackFunc[Loc_uint8Index]) != NULL_PTR)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HESP32_ParseReceivedCommand+0x128>)
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d028      	beq.n	800326e <HESP32_ParseReceivedCommand+0xe2>
                        {
                            (glbl_PCallbackFunc[Loc_uint8Index])();
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <HESP32_ParseReceivedCommand+0x128>)
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	4798      	blx	r3
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
                            }
                        #else
                        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
                    }
	    			break;
 8003226:	e022      	b.n	800326e <HESP32_ParseReceivedCommand+0xe2>
                            if((glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS]) != NULL_PTR)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	3b11      	subs	r3, #17
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HESP32_ParseReceivedCommand+0x12c>)
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <HESP32_ParseReceivedCommand+0xe2>
                                (glbl_PArgCallbackFunc[Loc_uint8Index - HESP32_NO_OF_NON_ARG_COMMANDS])((glbl_uint8CommandBuffer + strlen((HESP32_AvailableTasks[Loc_uint8Index])) + 1));
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	3b11      	subs	r3, #17
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HESP32_ParseReceivedCommand+0x12c>)
 800323c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	221a      	movs	r2, #26
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HESP32_ParseReceivedCommand+0x124>)
 800324a:	4413      	add	r3, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7fc ff99 	bl	8000184 <strlen>
 8003252:	4603      	mov	r3, r0
 8003254:	3301      	adds	r3, #1
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HESP32_ParseReceivedCommand+0x120>)
 8003258:	4413      	add	r3, r2
 800325a:	4618      	mov	r0, r3
 800325c:	47a0      	blx	r4
	    			break;
 800325e:	e006      	b.n	800326e <HESP32_ParseReceivedCommand+0xe2>
            for(Loc_uint8Index = 0; Loc_uint8Index < HESP32_NO_OF_COMMANDS; Loc_uint8Index++)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	3301      	adds	r3, #1
 8003264:	71fb      	strb	r3, [r7, #7]
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b1c      	cmp	r3, #28
 800326a:	d9b2      	bls.n	80031d2 <HESP32_ParseReceivedCommand+0x46>
 800326c:	e000      	b.n	8003270 <HESP32_ParseReceivedCommand+0xe4>
	    			break;
 800326e:	bf00      	nop
                else
	    		{
                    /*Do nothing*/
                }
            }
            glbl_uint8BufferIndex = 0;
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    else
    {
        glbl_uint8BufferIndex = 0;
    }

}
 8003276:	e012      	b.n	800329e <HESP32_ParseReceivedCommand+0x112>
            glbl_uint8CommandBuffer[glbl_uint8BufferIndex] = (uint8)(Loc_uint16RxChar);
 8003278:	8879      	ldrh	r1, [r7, #2]
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	b2c9      	uxtb	r1, r1
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HESP32_ParseReceivedCommand+0x120>)
 8003286:	5499      	strb	r1, [r3, r2]
            glbl_uint8BufferIndex++;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 8003294:	701a      	strb	r2, [r3, #0]
}
 8003296:	e002      	b.n	800329e <HESP32_ParseReceivedCommand+0x112>
        glbl_uint8BufferIndex = 0;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HESP32_ParseReceivedCommand+0x11c>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000690 	.word	0x20000690
 80032ac:	20000668 	.word	0x20000668
 80032b0:	20000000 	.word	0x20000000
 80032b4:	200005c8 	.word	0x200005c8
 80032b8:	20000638 	.word	0x20000638

080032bc <HESP32_InitInterface>:
 * @return Std_ReturnType
 * @retval E_OK:        Initialization is successful
 * @retval E_NOT_OK:    Failed to initialize communication 
 */
Std_ReturnType HESP32_InitInterface              (void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80032c2:	2301      	movs	r3, #1
 80032c4:	71fb      	strb	r3, [r7, #7]

        //Initialize UART 2 peripheral
        MUART_Init(UART2);
    #elif HESP32_UART_CHOICE == HESP32_UART3
        //Enable Clock for UART3 and its tx and rx pins
        MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_USART3_EN);
 80032c6:	2112      	movs	r1, #18
 80032c8:	2002      	movs	r0, #2
 80032ca:	f002 fe59 	bl	8005f80 <MRCC_EnablePeripheralClock>
        MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_IOPB_EN);
 80032ce:	2103      	movs	r1, #3
 80032d0:	2003      	movs	r0, #3
 80032d2:	f002 fe55 	bl	8005f80 <MRCC_EnablePeripheralClock>

        //Set Tx pin to be output alternate function and rx to be input pull-up
        MGPIO_SetPinMode(MUART3_TX_PORT_ID, MUART3_TX_PIN_ID, MGPIO_OUTPUT_AF_PUSH_PULL_2MHZ);
 80032d6:	220a      	movs	r2, #10
 80032d8:	210a      	movs	r1, #10
 80032da:	2001      	movs	r0, #1
 80032dc:	f001 fef2 	bl	80050c4 <MGPIO_SetPinMode>
        MGPIO_SetPinMode(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID, MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 80032e0:	2208      	movs	r2, #8
 80032e2:	210b      	movs	r1, #11
 80032e4:	2001      	movs	r0, #1
 80032e6:	f001 feed 	bl	80050c4 <MGPIO_SetPinMode>
        MGPIO_ActivatePullUp(MUART3_RX_PORT_ID, MUART3_RX_PIN_ID);
 80032ea:	210b      	movs	r1, #11
 80032ec:	2001      	movs	r0, #1
 80032ee:	f002 f8c3 	bl	8005478 <MGPIO_ActivatePullUp>

        //Enable Interrupt for UART 3
        MNVIC_EnableInterrupt(MNVIC_USART3);
 80032f2:	2027      	movs	r0, #39	; 0x27
 80032f4:	f002 fd5e 	bl	8005db4 <MNVIC_EnableInterrupt>

        MUART_SetRxCompleteCallback(UART3, HESP32_ParseReceivedCommand);
 80032f8:	4906      	ldr	r1, [pc, #24]	; (8003314 <HESP32_InitInterface+0x58>)
 80032fa:	2002      	movs	r0, #2
 80032fc:	f003 fc14 	bl	8006b28 <MUART_SetRxCompleteCallback>
        
        //Initialize UART 1 peripheral
        MUART_Init(UART3);
 8003300:	2002      	movs	r0, #2
 8003302:	f003 faa9 	bl	8006858 <MUART_Init>
    #else
        #error "UART Choice for communication is not specified"
    #endif /*HESP32_UART_CHOICE*/
    Loc_uint8FuncStatus = E_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 800330a:	79fb      	ldrb	r3, [r7, #7]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0800318d 	.word	0x0800318d

08003318 <HESP32_SendCommand>:

Std_ReturnType HESP32_SendCommand                (uint8* P_uint8Command)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
    if(P_uint8Command != NULL_PTR)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HESP32_SendCommand+0x28>
    {
        MUART_TxString(HESP32_UART_CHOICE , P_uint8Command);
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	2002      	movs	r0, #2
 800332e:	f003 fbcf 	bl	8006ad0 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003332:	210a      	movs	r1, #10
 8003334:	2002      	movs	r0, #2
 8003336:	f003 fb61 	bl	80069fc <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e001      	b.n	8003344 <HESP32_SendCommand+0x2c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HESP32_SetCommandCallbackFunction>:

Std_ReturnType HESP32_SetCommandCallbackFunction    (uint8 Copy_uint8CommandNumber,ptr_to_Callback_func P_CommandCallbackFunc)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b1c      	cmp	r3, #28
 8003364:	d80a      	bhi.n	800337c <HESP32_SetCommandCallbackFunction+0x2c>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HESP32_SetCommandCallbackFunction+0x2c>
    {
        glbl_PCallbackFunc[Copy_uint8CommandNumber] = P_CommandCallbackFunc;
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	4907      	ldr	r1, [pc, #28]	; (800338c <HESP32_SetCommandCallbackFunction+0x3c>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Loc_uint8FuncStatus = E_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e001      	b.n	8003380 <HESP32_SetCommandCallbackFunction+0x30>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	200005c8 	.word	0x200005c8

08003390 <HESP32_SetCommandCallbackArgFunction>:

Std_ReturnType HESP32_SetCommandCallbackArgFunction (uint8 Copy_uint8CommandNumber, ptr_to_Arg_Callback_func P_CommandCallbackFunc)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8CommandNumber < HESP32_NO_OF_COMMANDS) && (P_CommandCallbackFunc != NULL_PTR))
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	2b1c      	cmp	r3, #28
 80033a4:	d80b      	bhi.n	80033be <HESP32_SetCommandCallbackArgFunction+0x2e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HESP32_SetCommandCallbackArgFunction+0x2e>
    {
        #if HESP32_NO_OF_ARG_COMMANDS == 1
            glbl_PArgCallbackFunc = P_CommandCallbackFunc;
        #elif HESP32_NO_OF_ARG_COMMANDS > 1
            glbl_PArgCallbackFunc[Copy_uint8CommandNumber - HESP32_NO_OF_NON_ARG_COMMANDS] = P_CommandCallbackFunc;
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	3b11      	subs	r3, #17
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <HESP32_SetCommandCallbackArgFunction+0x40>)
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        #else
        #endif /*HESP32_NO_OF_ARG_COMMANDS*/
        
        Loc_uint8FuncStatus = E_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e001      	b.n	80033c2 <HESP32_SetCommandCallbackArgFunction+0x32>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000638 	.word	0x20000638

080033d4 <HESP32_SendMotorStatus>:

Std_ReturnType HESP32_SendMotorStatus               (uint32* P_uint32MotorSteps, uint32* P_uint32CurrentWL, uint8 Copy_uint8MotorNum)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
    if((P_uint32MotorSteps != NULL_PTR) && (P_uint32CurrentWL != NULL_PTR) && ((Copy_uint8MotorNum == 1) || (Copy_uint8MotorNum == 3)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03b      	beq.n	8003464 <HESP32_SendMotorStatus+0x90>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d038      	beq.n	8003464 <HESP32_SendMotorStatus+0x90>
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <HESP32_SendMotorStatus+0x2a>
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d132      	bne.n	8003464 <HESP32_SendMotorStatus+0x90>
    {
        uint8 Loc_uint8Index = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	75bb      	strb	r3, [r7, #22]
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 8003402:	2300      	movs	r3, #0
 8003404:	75bb      	strb	r3, [r7, #22]
 8003406:	e015      	b.n	8003434 <HESP32_SendMotorStatus+0x60>
        {
            MUART_SendIntegerValue(HESP32_UART_CHOICE, P_uint32MotorSteps[Loc_uint8Index]);
 8003408:	7dbb      	ldrb	r3, [r7, #22]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	2002      	movs	r0, #2
 8003416:	f003 fba5 	bl	8006b64 <MUART_SendIntegerValue>
            if((Loc_uint8Index < 2) && (Copy_uint8MotorNum == 3))
 800341a:	7dbb      	ldrb	r3, [r7, #22]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d80d      	bhi.n	800343c <HESP32_SendMotorStatus+0x68>
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d10a      	bne.n	800343c <HESP32_SendMotorStatus+0x68>
            {
                MUART_TxChar(HESP32_UART_CHOICE, '-');
 8003426:	212d      	movs	r1, #45	; 0x2d
 8003428:	2002      	movs	r0, #2
 800342a:	f003 fae7 	bl	80069fc <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Copy_uint8MotorNum; Loc_uint8Index++)
 800342e:	7dbb      	ldrb	r3, [r7, #22]
 8003430:	3301      	adds	r3, #1
 8003432:	75bb      	strb	r3, [r7, #22]
 8003434:	7dba      	ldrb	r2, [r7, #22]
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3e5      	bcc.n	8003408 <HESP32_SendMotorStatus+0x34>
			else
			{
				break;
			}
        }
        if(Copy_uint8MotorNum == 3)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d109      	bne.n	8003456 <HESP32_SendMotorStatus+0x82>
        {
			MUART_TxChar(HESP32_UART_CHOICE, '-');
 8003442:	212d      	movs	r1, #45	; 0x2d
 8003444:	2002      	movs	r0, #2
 8003446:	f003 fad9 	bl	80069fc <MUART_TxChar>
            MUART_SendIntegerValue(HESP32_UART_CHOICE, *P_uint32CurrentWL);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	2002      	movs	r0, #2
 8003452:	f003 fb87 	bl	8006b64 <MUART_SendIntegerValue>
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003456:	210a      	movs	r1, #10
 8003458:	2002      	movs	r0, #2
 800345a:	f003 facf 	bl	80069fc <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    {
 8003462:	e001      	b.n	8003468 <HESP32_SendMotorStatus+0x94>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 8003468:	7dfb      	ldrb	r3, [r7, #23]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HESP32_SendDateTime>:
Std_ReturnType HESP32_SendDateTime                  (Sdate_t* P_SDateToBeSent, Stime_t* P_STimeToBeSent)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]

    if((P_SDateToBeSent != NULL_PTR) && (P_STimeToBeSent != NULL_PTR))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d041      	beq.n	800350a <HESP32_SendDateTime+0x98>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d03e      	beq.n	800350a <HESP32_SendDateTime+0x98>
    {
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_months));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	789b      	ldrb	r3, [r3, #2]
 8003490:	4619      	mov	r1, r3
 8003492:	2002      	movs	r0, #2
 8003494:	f003 fb66 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003498:	212f      	movs	r1, #47	; 0x2f
 800349a:	2002      	movs	r0, #2
 800349c:	f003 faae 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_days));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	4619      	mov	r1, r3
 80034a6:	2002      	movs	r0, #2
 80034a8:	f003 fb5c 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 80034ac:	212f      	movs	r1, #47	; 0x2f
 80034ae:	2002      	movs	r0, #2
 80034b0:	f003 faa4 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SDateToBeSent -> m_years));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2002      	movs	r0, #2
 80034bc:	f003 fb52 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80034c0:	2120      	movs	r1, #32
 80034c2:	2002      	movs	r0, #2
 80034c4:	f003 fa9a 	bl	80069fc <MUART_TxChar>
        
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_hours));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	2002      	movs	r0, #2
 80034d0:	f003 fb48 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 80034d4:	213a      	movs	r1, #58	; 0x3a
 80034d6:	2002      	movs	r0, #2
 80034d8:	f003 fa90 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_minutes));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	4619      	mov	r1, r3
 80034e2:	2002      	movs	r0, #2
 80034e4:	f003 fb3e 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 80034e8:	213a      	movs	r1, #58	; 0x3a
 80034ea:	2002      	movs	r0, #2
 80034ec:	f003 fa86 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_STimeToBeSent -> m_seconds));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	789b      	ldrb	r3, [r3, #2]
 80034f4:	4619      	mov	r1, r3
 80034f6:	2002      	movs	r0, #2
 80034f8:	f003 fb34 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 80034fc:	210a      	movs	r1, #10
 80034fe:	2002      	movs	r0, #2
 8003500:	f003 fa7c 	bl	80069fc <MUART_TxChar>
        
        Loc_uint8FuncStatus = E_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e001      	b.n	800350e <HESP32_SendDateTime+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
    }

    return Loc_uint8FuncStatus;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HESP32_SendIntensities>:

Std_ReturnType HESP32_SendIntensities\               
    (float32 Copy_float32CurrentWL ,float32 P_float32RefIntensity, float32 P_float32SampleIntensity, Sdate_t* P_SCurrentDate, Stime_t* P_SCurrentTime)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	; 0x38
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if((P_SCurrentDate != NULL_PTR) && (P_SCurrentTime != NULL_PTR))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8082 	beq.w	8003638 <HESP32_SendIntensities+0x120>
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d07e      	beq.n	8003638 <HESP32_SendIntensities+0x120>
    {
        uint8 Loc_uint8IntensityBuffer[32] = {0};
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	f107 0318 	add.w	r3, r7, #24
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	619a      	str	r2, [r3, #24]
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_months));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	789b      	ldrb	r3, [r3, #2]
 8003556:	4619      	mov	r1, r3
 8003558:	2002      	movs	r0, #2
 800355a:	f003 fb03 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 800355e:	212f      	movs	r1, #47	; 0x2f
 8003560:	2002      	movs	r0, #2
 8003562:	f003 fa4b 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_days));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	4619      	mov	r1, r3
 800356c:	2002      	movs	r0, #2
 800356e:	f003 faf9 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, '/');
 8003572:	212f      	movs	r1, #47	; 0x2f
 8003574:	2002      	movs	r0, #2
 8003576:	f003 fa41 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentDate -> m_years));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	2002      	movs	r0, #2
 8003582:	f003 faef 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxString(HESP32_UART_CHOICE, "||");
 8003586:	4931      	ldr	r1, [pc, #196]	; (800364c <HESP32_SendIntensities+0x134>)
 8003588:	2002      	movs	r0, #2
 800358a:	f003 faa1 	bl	8006ad0 <MUART_TxString>

        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_hours));
 800358e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	2002      	movs	r0, #2
 8003596:	f003 fae5 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 800359a:	213a      	movs	r1, #58	; 0x3a
 800359c:	2002      	movs	r0, #2
 800359e:	f003 fa2d 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_minutes));
 80035a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	4619      	mov	r1, r3
 80035a8:	2002      	movs	r0, #2
 80035aa:	f003 fadb 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ':');
 80035ae:	213a      	movs	r1, #58	; 0x3a
 80035b0:	2002      	movs	r0, #2
 80035b2:	f003 fa23 	bl	80069fc <MUART_TxChar>
        MUART_SendIntegerValue(HESP32_UART_CHOICE,(uint32)(P_SCurrentTime -> m_seconds));
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	789b      	ldrb	r3, [r3, #2]
 80035ba:	4619      	mov	r1, r3
 80035bc:	2002      	movs	r0, #2
 80035be:	f003 fad1 	bl	8006b64 <MUART_SendIntegerValue>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80035c2:	2120      	movs	r1, #32
 80035c4:	2002      	movs	r0, #2
 80035c6:	f003 fa19 	bl	80069fc <MUART_TxChar>

        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", Copy_float32CurrentWL);
        float_to_string_manual(Loc_uint8IntensityBuffer, Copy_float32CurrentWL, 3);
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	2203      	movs	r2, #3
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fcfe 	bl	8002fd4 <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4619      	mov	r1, r3
 80035de:	2002      	movs	r0, #2
 80035e0:	f003 fa76 	bl	8006ad0 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 80035e4:	2120      	movs	r1, #32
 80035e6:	2002      	movs	r0, #2
 80035e8:	f003 fa08 	bl	80069fc <MUART_TxChar>
        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", *P_float32RefIntensity);
        float_to_string_manual(Loc_uint8IntensityBuffer, P_float32RefIntensity, 3);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2203      	movs	r2, #3
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fced 	bl	8002fd4 <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	2002      	movs	r0, #2
 8003602:	f003 fa65 	bl	8006ad0 <MUART_TxString>
        MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003606:	2120      	movs	r1, #32
 8003608:	2002      	movs	r0, #2
 800360a:	f003 f9f7 	bl	80069fc <MUART_TxChar>
        //snprintf(Loc_uint8IntensityBuffer, sizeof(Loc_uint8IntensityBuffer), "%f", *P_float32SampleIntensity);
        float_to_string_manual(Loc_uint8IntensityBuffer, P_float32SampleIntensity, 3);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	2203      	movs	r2, #3
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fcdc 	bl	8002fd4 <float_to_string_manual>
        MUART_TxString(HESP32_UART_CHOICE, Loc_uint8IntensityBuffer);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	2002      	movs	r0, #2
 8003624:	f003 fa54 	bl	8006ad0 <MUART_TxString>
        
        
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003628:	210a      	movs	r1, #10
 800362a:	2002      	movs	r0, #2
 800362c:	f003 f9e6 	bl	80069fc <MUART_TxChar>
        Loc_uint8FuncStatus = E_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    {
 8003636:	e002      	b.n	800363e <HESP32_SendIntensities+0x126>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    return Loc_uint8FuncStatus;
 800363e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003642:	4618      	mov	r0, r3
 8003644:	3738      	adds	r7, #56	; 0x38
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	0800c50c 	.word	0x0800c50c

08003650 <HESP32_SendVoltages>:

Std_ReturnType HESP32_SendVoltages(uint8 PP_uint8Voltages[][32])
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    if(PP_uint8Voltages != NULL_PTR)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01f      	beq.n	800369e <HESP32_SendVoltages+0x4e>
    {
        uint8 Loc_uint8Index = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e011      	b.n	800368c <HESP32_SendVoltages+0x3c>
        {
            MUART_TxString(HESP32_UART_CHOICE, PP_uint8Voltages[Loc_uint8Index]);
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	015b      	lsls	r3, r3, #5
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	4619      	mov	r1, r3
 8003672:	2002      	movs	r0, #2
 8003674:	f003 fa2c 	bl	8006ad0 <MUART_TxString>
            if(Loc_uint8Index < 4)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d803      	bhi.n	8003686 <HESP32_SendVoltages+0x36>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 800367e:	2120      	movs	r1, #32
 8003680:	2002      	movs	r0, #2
 8003682:	f003 f9bb 	bl	80069fc <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 5; Loc_uint8Index++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d9ea      	bls.n	8003668 <HESP32_SendVoltages+0x18>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003692:	210a      	movs	r1, #10
 8003694:	2002      	movs	r0, #2
 8003696:	f003 f9b1 	bl	80069fc <MUART_TxChar>
        return E_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HESP32_SendVoltages+0x50>

    }
    else
    {
        return E_NOT_OK;
 800369e:	2301      	movs	r3, #1
    }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HESP32_SendDetectorValues>:

Std_ReturnType HESP32_SendDetectorValues(float32* P_float32Readings, float32* P_float32GainValues)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    if((P_float32GainValues != NULL_PTR) && (P_float32Readings != NULL_PTR))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d061      	beq.n	800377c <HESP32_SendDetectorValues+0xd4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d05e      	beq.n	800377c <HESP32_SendDetectorValues+0xd4>
    {
        uint8 Loc_uint8Index = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        uint8 Loc_uint8DetBuffer[32] = {0};
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
 80036d8:	615a      	str	r2, [r3, #20]
 80036da:	619a      	str	r2, [r3, #24]
        for(Loc_uint8Index = 0; Loc_uint8Index < 1; Loc_uint8Index++)
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036e2:	e01a      	b.n	800371a <HESP32_SendDetectorValues+0x72>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32Readings[Loc_uint8Index], 3);
 80036e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2203      	movs	r2, #3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fc6c 	bl	8002fd4 <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	4619      	mov	r1, r3
 8003702:	2002      	movs	r0, #2
 8003704:	f003 f9e4 	bl	8006ad0 <MUART_TxString>
            MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003708:	2120      	movs	r1, #32
 800370a:	2002      	movs	r0, #2
 800370c:	f003 f976 	bl	80069fc <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 1; Loc_uint8Index++)
 8003710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003714:	3301      	adds	r3, #1
 8003716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800371a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0e0      	beq.n	80036e4 <HESP32_SendDetectorValues+0x3c>
        }
        for(Loc_uint8Index = 0; Loc_uint8Index < 1; Loc_uint8Index++)
 8003722:	2300      	movs	r3, #0
 8003724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003728:	e01e      	b.n	8003768 <HESP32_SendDetectorValues+0xc0>
        {
            float_to_string_manual(Loc_uint8DetBuffer, P_float32GainValues[Loc_uint8Index], 3);
 800372a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	2203      	movs	r2, #3
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fc49 	bl	8002fd4 <float_to_string_manual>
            MUART_TxString(HESP32_UART_CHOICE, Loc_uint8DetBuffer);
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	2002      	movs	r0, #2
 800374a:	f003 f9c1 	bl	8006ad0 <MUART_TxString>
            if(Loc_uint8Index < 1)
 800374e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HESP32_SendDetectorValues+0xb6>
            {
                MUART_TxChar(HESP32_UART_CHOICE, ' ');
 8003756:	2120      	movs	r1, #32
 8003758:	2002      	movs	r0, #2
 800375a:	f003 f94f 	bl	80069fc <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < 1; Loc_uint8Index++)
 800375e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003762:	3301      	adds	r3, #1
 8003764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0dc      	beq.n	800372a <HESP32_SendDetectorValues+0x82>
            }
        }
        MUART_TxChar(HESP32_UART_CHOICE, '\n');
 8003770:	210a      	movs	r1, #10
 8003772:	2002      	movs	r0, #2
 8003774:	f003 f942 	bl	80069fc <MUART_TxChar>
        return E_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HESP32_SendDetectorValues+0xd6>
    }
    else
    {
        return E_NOT_OK;
 800377c:	2301      	movs	r3, #1
    }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3730      	adds	r7, #48	; 0x30
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <delay_ms>:
 */
#include "MCP4151.h"
#include "math.h"

// Function to provide a delay in milliseconds
void delay_ms(uint32 milliseconds) {
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	// Adjust the loop count based on your actual clock frequency
	// This is a simple and blocking delay function
	// In a real application, you might want to use a timer for more accurate timing

	// Calculate the loop count needed for the specified delay
	uint32 loop_count = milliseconds * 1000;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	60bb      	str	r3, [r7, #8]

	// Perform the delay using a loop
	for (uint32 i = 0; i < loop_count; i++) {
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e002      	b.n	80037a6 <delay_ms+0x20>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3f8      	bcc.n	80037a0 <delay_ms+0x1a>
		// Do nothing
	}
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
	...

080037bc <MCP4151_Sample_SetWiperPosition>:
void MCP4151_Sample_SetWiperPosition(uint8 position){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 80037c6:	2300      	movs	r3, #0
 80037c8:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_LOW);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2108      	movs	r1, #8
 80037ce:	2000      	movs	r0, #0
 80037d0:	f001 fd5e 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(10);
 80037d4:	200a      	movs	r0, #10
 80037d6:	f7ff ffd6 	bl	8003786 <delay_ms>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80037da:	f107 030e 	add.w	r3, r7, #14
 80037de:	2200      	movs	r2, #0
 80037e0:	4619      	mov	r1, r3
 80037e2:	480f      	ldr	r0, [pc, #60]	; (8003820 <MCP4151_Sample_SetWiperPosition+0x64>)
 80037e4:	f002 fedc 	bl	80065a0 <MCAL_SPI_SendData>
	delay_ms(10);
 80037e8:	200a      	movs	r0, #10
 80037ea:	f7ff ffcc 	bl	8003786 <delay_ms>
	command = position;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 80037f4:	f107 030e 	add.w	r3, r7, #14
 80037f8:	2200      	movs	r2, #0
 80037fa:	4619      	mov	r1, r3
 80037fc:	4808      	ldr	r0, [pc, #32]	; (8003820 <MCP4151_Sample_SetWiperPosition+0x64>)
 80037fe:	f002 fecf 	bl	80065a0 <MCAL_SPI_SendData>
	delay_ms(10);
 8003802:	200a      	movs	r0, #10
 8003804:	f7ff ffbf 	bl	8003786 <delay_ms>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 8003808:	2201      	movs	r2, #1
 800380a:	2108      	movs	r1, #8
 800380c:	2000      	movs	r0, #0
 800380e:	f001 fd3f 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(10);
 8003812:	200a      	movs	r0, #10
 8003814:	f7ff ffb7 	bl	8003786 <delay_ms>
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40003800 	.word	0x40003800

08003824 <MCP4151_Referance_SetWiperPosition>:

void MCP4151_Referance_SetWiperPosition(uint8 position){
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]

	uint16 command = 0x00;
 800382e:	2300      	movs	r3, #0
 8003830:	81fb      	strh	r3, [r7, #14]
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_LOW);
 8003832:	2200      	movs	r2, #0
 8003834:	2102      	movs	r1, #2
 8003836:	2000      	movs	r0, #0
 8003838:	f001 fd2a 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(10);
 800383c:	200a      	movs	r0, #10
 800383e:	f7ff ffa2 	bl	8003786 <delay_ms>
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 8003842:	f107 030e 	add.w	r3, r7, #14
 8003846:	2200      	movs	r2, #0
 8003848:	4619      	mov	r1, r3
 800384a:	480f      	ldr	r0, [pc, #60]	; (8003888 <MCP4151_Referance_SetWiperPosition+0x64>)
 800384c:	f002 fea8 	bl	80065a0 <MCAL_SPI_SendData>
	delay_ms(10);
 8003850:	200a      	movs	r0, #10
 8003852:	f7ff ff98 	bl	8003786 <delay_ms>
	command = position;
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	b29b      	uxth	r3, r3
 800385a:	81fb      	strh	r3, [r7, #14]
	MCAL_SPI_SendData(SPI2, &command, Pollingenable);
 800385c:	f107 030e 	add.w	r3, r7, #14
 8003860:	2200      	movs	r2, #0
 8003862:	4619      	mov	r1, r3
 8003864:	4808      	ldr	r0, [pc, #32]	; (8003888 <MCP4151_Referance_SetWiperPosition+0x64>)
 8003866:	f002 fe9b 	bl	80065a0 <MCAL_SPI_SendData>
	delay_ms(10);
 800386a:	200a      	movs	r0, #10
 800386c:	f7ff ff8b 	bl	8003786 <delay_ms>
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 8003870:	2201      	movs	r2, #1
 8003872:	2102      	movs	r1, #2
 8003874:	2000      	movs	r0, #0
 8003876:	f001 fd0b 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(10);
 800387a:	200a      	movs	r0, #10
 800387c:	f7ff ff83 	bl	8003786 <delay_ms>
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40003800 	.word	0x40003800

0800388c <MCP4151_Init>:
 * @param[in]		 -none
 * @retval			 -none
 * Note				 -SPI2 used
 */
void MCP4151_Init()
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
	//SPI Init

	SPI_Config SPI2CFG;

	SPI2CFG.CLKPhase = SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 8003892:	2301      	movs	r3, #1
 8003894:	817b      	strh	r3, [r7, #10]
	SPI2CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle;
 8003896:	2302      	movs	r3, #2
 8003898:	813b      	strh	r3, [r7, #8]
	SPI2CFG.DataSize = SPI_DataSize_8BIT;
 800389a:	2300      	movs	r3, #0
 800389c:	80fb      	strh	r3, [r7, #6]
	SPI2CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 800389e:	2300      	movs	r3, #0
 80038a0:	80bb      	strh	r3, [r7, #4]
	SPI2CFG.SPI_BAUDRATEPRESCALER = SPI_BAUDRATEPRESCALER_16;
 80038a2:	2318      	movs	r3, #24
 80038a4:	81fb      	strh	r3, [r7, #14]
	SPI2CFG.Communication_Mode = SPI_Direction_2LINES;
 80038a6:	2300      	movs	r3, #0
 80038a8:	807b      	strh	r3, [r7, #2]

#ifdef MCU_Act_As_Master

	SPI2CFG.Device_Mode = SPI_Device_Mode_MASTER;
 80038aa:	2304      	movs	r3, #4
 80038ac:	803b      	strh	r3, [r7, #0]
	SPI2CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	823b      	strh	r3, [r7, #16]
	SPI2CFG.NSS = SPI_NSS_soft_NSSInternalSoft_Set;
 80038b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038b6:	81bb      	strh	r3, [r7, #12]
	SPI2CFG.P_IRQ_CallBack = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

#endif

	MCAL_SPI_Init(SPI2,&SPI2CFG);
 80038bc:	463b      	mov	r3, r7
 80038be:	4619      	mov	r1, r3
 80038c0:	4804      	ldr	r0, [pc, #16]	; (80038d4 <MCP4151_Init+0x48>)
 80038c2:	f002 fde7 	bl	8006494 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins (SPI2);
 80038c6:	4803      	ldr	r0, [pc, #12]	; (80038d4 <MCP4151_Init+0x48>)
 80038c8:	f002 feaa 	bl	8006620 <MCAL_SPI_GPIO_Set_Pins>
}
 80038cc:	bf00      	nop
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40003800 	.word	0x40003800

080038d8 <Set_Sample_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_reference_gain"
 */
void Set_Sample_Gain(float32 gain)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	//Sample
	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN8, MGPIO_HIGH);
 80038e0:	2201      	movs	r2, #1
 80038e2:	2108      	movs	r1, #8
 80038e4:	2000      	movs	r0, #0
 80038e6:	f001 fcd3 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(5);
 80038ea:	2005      	movs	r0, #5
 80038ec:	f7ff ff4b 	bl	8003786 <delay_ms>
	ref_sample x = SAMPLE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f827 	bl	800394c <steps_calculate>
 80038fe:	4603      	mov	r3, r0
 8003900:	73bb      	strb	r3, [r7, #14]
	MCP4151_Sample_SetWiperPosition(steps);
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff59 	bl	80037bc <MCP4151_Sample_SetWiperPosition>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <Set_Reference_Gain>:
 * @retval			 -none
 * Note			 	 -The gain value is changed according to the required steps which is rounded to the nearest integer
 * 					 -To get the resulted gain value, use the function "get_sample_gain"
 */
void Set_Reference_Gain(float32 gain)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	//Referance

	MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN2, MGPIO_HIGH);
 800391a:	2201      	movs	r2, #1
 800391c:	2102      	movs	r1, #2
 800391e:	2000      	movs	r0, #0
 8003920:	f001 fcb6 	bl	8005290 <MGPIO_SetPinValue>
	delay_ms(5);
 8003924:	2005      	movs	r0, #5
 8003926:	f7ff ff2e 	bl	8003786 <delay_ms>
	ref_sample x = REFERENCE;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f80a 	bl	800394c <steps_calculate>
 8003938:	4603      	mov	r3, r0
 800393a:	73bb      	strb	r3, [r7, #14]
	MCP4151_Referance_SetWiperPosition(steps);
 800393c:	7bbb      	ldrb	r3, [r7, #14]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff70 	bl	8003824 <MCP4151_Referance_SetWiperPosition>
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <steps_calculate>:
 * @param[in]		 -x: where x can be REFERENCE or SAMPLE
 * @retval			 -steps: calculated no. of steps
 * Note			 	 -The number of steps is rounded to the nearest integer
 */
uint8 steps_calculate(float32 gain, ref_sample x)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
	int total_resistance;
	if (x == REFERENCE)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <steps_calculate+0x1a>
		total_resistance = MCP_TOTAL_RESISTANCE_REFERENCE;
 800395e:	f64b 5310 	movw	r3, #48400	; 0xbd10
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e002      	b.n	800396c <steps_calculate+0x20>
	else
		total_resistance = MCP_TOTAL_RESISTANCE_SAMPLE;
 8003966:	f64b 5310 	movw	r3, #48400	; 0xbd10
 800396a:	617b      	str	r3, [r7, #20]
	float32 R;
	R = (RESISTANCE_ON_PCB / (gain - 1)) + WIPER_RESISTANCE;
 800396c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd f8ef 	bl	8000b54 <__aeabi_fsub>
 8003976:	4603      	mov	r3, r0
 8003978:	4619      	mov	r1, r3
 800397a:	481d      	ldr	r0, [pc, #116]	; (80039f0 <steps_calculate+0xa4>)
 800397c:	f7fd faa8 	bl	8000ed0 <__aeabi_fdiv>
 8003980:	4603      	mov	r3, r0
 8003982:	491c      	ldr	r1, [pc, #112]	; (80039f4 <steps_calculate+0xa8>)
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd f8e7 	bl	8000b58 <__addsf3>
 800398a:	4603      	mov	r3, r0
 800398c:	613b      	str	r3, [r7, #16]
	float32 steps_result;
	steps_result = ((total_resistance - R) * 256) / total_resistance;
 800398e:	6978      	ldr	r0, [r7, #20]
 8003990:	f7fd f996 	bl	8000cc0 <__aeabi_i2f>
 8003994:	4603      	mov	r3, r0
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd f8db 	bl	8000b54 <__aeabi_fsub>
 800399e:	4603      	mov	r3, r0
 80039a0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd f9df 	bl	8000d68 <__aeabi_fmul>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461c      	mov	r4, r3
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7fd f986 	bl	8000cc0 <__aeabi_i2f>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd fa89 	bl	8000ed0 <__aeabi_fdiv>
 80039be:	4603      	mov	r3, r0
 80039c0:	60fb      	str	r3, [r7, #12]
	uint8 steps = round(steps_result);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7fc fd4a 	bl	800045c <__aeabi_f2d>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f007 fe48 	bl	800b664 <round>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	f7fd f846 	bl	8000a6c <__aeabi_d2uiz>
 80039e0:	4603      	mov	r3, r0
 80039e2:	72fb      	strb	r3, [r7, #11]
	return steps;
 80039e4:	7afb      	ldrb	r3, [r7, #11]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}
 80039ee:	bf00      	nop
 80039f0:	47c35000 	.word	0x47c35000
 80039f4:	439b8000 	.word	0x439b8000

080039f8 <get_reference_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the reference
 * Note			 	 -none
 */
float32 get_reference_gain(float32 gain)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	ref_sample x = REFERENCE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff9f 	bl	800394c <steps_calculate>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_REFERENCE - steps * (MCP_TOTAL_RESISTANCE_REFERENCE / 256.0);
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fd0f 	bl	8000438 <__aeabi_i2d>
 8003a1a:	a313      	add	r3, pc, #76	; (adr r3, 8003a68 <get_reference_gain+0x70>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fd74 	bl	800050c <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	a111      	add	r1, pc, #68	; (adr r1, 8003a70 <get_reference_gain+0x78>)
 8003a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a2e:	f7fc fbb5 	bl	800019c <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fd f837 	bl	8000aac <__aeabi_d2f>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <get_reference_gain+0x80>)
 8003a46:	f7fd fa43 	bl	8000ed0 <__aeabi_fdiv>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd f881 	bl	8000b58 <__addsf3>
 8003a56:	4603      	mov	r3, r0
 8003a58:	607b      	str	r3, [r7, #4]
	return gain;
 8003a5a:	687b      	ldr	r3, [r7, #4]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f3af 8000 	nop.w
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	4067a200 	.word	0x4067a200
 8003a70:	00000000 	.word	0x00000000
 8003a74:	40e7a200 	.word	0x40e7a200
 8003a78:	47c35000 	.word	0x47c35000
 8003a7c:	00000000 	.word	0x00000000

08003a80 <get_sample_gain>:
 * @param[in]		 -gain: required gain to be set
 * @retval			 -gain: resulted gain for the sample
 * Note			 	 -none
 */
float32 get_sample_gain(float32 gain)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	ref_sample x = SAMPLE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
	uint8 steps = steps_calculate(gain, x);
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff5b 	bl	800394c <steps_calculate>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73bb      	strb	r3, [r7, #14]
	float32 R = MCP_TOTAL_RESISTANCE_SAMPLE- steps * (MCP_TOTAL_RESISTANCE_SAMPLE / 256.0);
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fccb 	bl	8000438 <__aeabi_i2d>
 8003aa2:	a313      	add	r3, pc, #76	; (adr r3, 8003af0 <get_sample_gain+0x70>)
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f7fc fd30 	bl	800050c <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	a111      	add	r1, pc, #68	; (adr r1, 8003af8 <get_sample_gain+0x78>)
 8003ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ab6:	f7fc fb71 	bl	800019c <__aeabi_dsub>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7fc fff3 	bl	8000aac <__aeabi_d2f>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	60bb      	str	r3, [r7, #8]
	gain = 1 + (RESISTANCE_ON_PCB / R);
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <get_sample_gain+0x80>)
 8003ace:	f7fd f9ff 	bl	8000ed0 <__aeabi_fdiv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd f83d 	bl	8000b58 <__addsf3>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	607b      	str	r3, [r7, #4]
	return gain;
 8003ae2:	687b      	ldr	r3, [r7, #4]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	00000000 	.word	0x00000000
 8003af4:	4067a200 	.word	0x4067a200
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40e7a200 	.word	0x40e7a200
 8003b00:	47c35000 	.word	0x47c35000

08003b04 <HPWRSupply_GetSenseValue>:
static volatile uint16 glbl_uint16SenseValue[HPWRSUPPLY_NO_OF_SENSE_CHANNELS] = {0};
static volatile uint8 glbl_uint8SlowChannelFlag = 0;


void HPWRSupply_GetSenseValue(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	80fb      	strh	r3, [r7, #6]
    
    /****************************Check if VIS supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[0] == HPWRSUPPLY_ON)
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HPWRSupply_GetSenseValue+0x80>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d121      	bne.n	8003b5c <HPWRSupply_GetSenseValue+0x58>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[0], &Loc_uint16VoltageValue);
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HPWRSupply_GetSenseValue+0x84>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	1dba      	adds	r2, r7, #6
 8003b20:	4619      	mov	r1, r3
 8003b22:	2000      	movs	r0, #0
 8003b24:	f001 f832 	bl	8004b8c <MADC_Conversion>
        glbl_uint16SenseValue[0] = Loc_uint16VoltageValue;
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HPWRSupply_GetSenseValue+0x88>)
 8003b2c:	801a      	strh	r2, [r3, #0]
        if(glbl_uint8SlowChannelFlag == 1)
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HPWRSupply_GetSenseValue+0x8c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10e      	bne.n	8003b56 <HPWRSupply_GetSenseValue+0x52>
        {
            MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[1], &Loc_uint16VoltageValue);
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HPWRSupply_GetSenseValue+0x84>)
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	1dba      	adds	r2, r7, #6
 8003b40:	4619      	mov	r1, r3
 8003b42:	2000      	movs	r0, #0
 8003b44:	f001 f822 	bl	8004b8c <MADC_Conversion>
            glbl_uint16SenseValue[1] = Loc_uint16VoltageValue;
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HPWRSupply_GetSenseValue+0x88>)
 8003b4c:	805a      	strh	r2, [r3, #2]
            glbl_uint8SlowChannelFlag = 0;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HPWRSupply_GetSenseValue+0x8c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e002      	b.n	8003b5c <HPWRSupply_GetSenseValue+0x58>
        }
        else
        {
            glbl_uint8SlowChannelFlag = 1;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HPWRSupply_GetSenseValue+0x8c>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
    {
        /*Do nothing*/
    }

    /****************************Check if UV supply is turned on or off****************************/
    if(glbl_uint8SupplyFlags[1] == HPWRSUPPLY_ON)
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HPWRSupply_GetSenseValue+0x80>)
 8003b5e:	785b      	ldrb	r3, [r3, #1]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10a      	bne.n	8003b7c <HPWRSupply_GetSenseValue+0x78>
    {
        MADC_Conversion(MADC1, glbl_uint8PWRSupplySenseChannelIDs[2], &Loc_uint16VoltageValue);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HPWRSupply_GetSenseValue+0x84>)
 8003b68:	789b      	ldrb	r3, [r3, #2]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	1dba      	adds	r2, r7, #6
 8003b6e:	4619      	mov	r1, r3
 8003b70:	2000      	movs	r0, #0
 8003b72:	f001 f80b 	bl	8004b8c <MADC_Conversion>
        glbl_uint16SenseValue[2] = Loc_uint16VoltageValue;
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HPWRSupply_GetSenseValue+0x88>)
 8003b7a:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        /*Do nothing*/
    }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000694 	.word	0x20000694
 8003b88:	200002f4 	.word	0x200002f4
 8003b8c:	20000698 	.word	0x20000698
 8003b90:	2000069e 	.word	0x2000069e

08003b94 <HPWRSupply_InitSupplies>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Interface Initialized
 * @retval E_NOT_OK:                                Interface not initialized 
 */
Std_ReturnType HPWRSupply_InitSupplies              (void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM4_EN);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f002 f9ef 	bl	8005f80 <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 8003ba2:	2109      	movs	r1, #9
 8003ba4:	2003      	movs	r0, #3
 8003ba6:	f002 f9eb 	bl	8005f80 <MRCC_EnablePeripheralClock>
    uint8 Loc_uint8Index = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	71fb      	strb	r3, [r7, #7]

    /************************Initialize Pins Used in PWRSupply Interface************************/
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	71fb      	strb	r3, [r7, #7]
 8003bb2:	e00e      	b.n	8003bd2 <HPWRSupply_InitSupplies+0x3e>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <HPWRSupply_InitSupplies+0x9c>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	b2d8      	uxtb	r0, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplySensePinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HPWRSupply_InitSupplies+0xa0>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplySensePortIDs[Loc_uint8Index],\
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f001 fa7c 	bl	80050c4 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_SENSE_CHANNELS; Loc_uint8Index++)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	71fb      	strb	r3, [r7, #7]
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d9ed      	bls.n	8003bb4 <HPWRSupply_InitSupplies+0x20>
    }

    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	71fb      	strb	r3, [r7, #7]
 8003bdc:	e00e      	b.n	8003bfc <HPWRSupply_InitSupplies+0x68>
    {
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HPWRSupply_InitSupplies+0xa4>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	b2d8      	uxtb	r0, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
                            glbl_uint8PWRSupplyControlPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HPWRSupply_InitSupplies+0xa8>)
 8003bea:	5cd3      	ldrb	r3, [r2, r3]
 8003bec:	b2db      	uxtb	r3, r3
        MGPIO_SetPinMode(glbl_uint8PWRSupplyControlPortIDs[Loc_uint8Index],\
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f001 fa67 	bl	80050c4 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < HPWRSUPPLY_NO_OF_CONTROL_PINS; Loc_uint8Index++)
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d9ed      	bls.n	8003bde <HPWRSupply_InitSupplies+0x4a>
    }


    MNVIC_EnableInterrupt(MNVIC_TIM4);
 8003c02:	201e      	movs	r0, #30
 8003c04:	f002 f8d6 	bl	8005db4 <MNVIC_EnableInterrupt>

    //MADC_Init(MADC1);
    
    MGPTMR_SetTimerPeriod(MGPTMR4, 2000);
 8003c08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f001 fd4d 	bl	80056ac <MGPTMR_SetTimerPeriod>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR4, HPWRSupply_GetSenseValue);
 8003c12:	490b      	ldr	r1, [pc, #44]	; (8003c40 <HPWRSupply_InitSupplies+0xac>)
 8003c14:	2002      	movs	r0, #2
 8003c16:	f001 fd71 	bl	80056fc <MGPTMR_SetTimerUpdateCallbackFunc>
    MGPTMR_Init(MGPTMR4);
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f001 fca6 	bl	800556c <MGPTMR_Init>
    MGPTMR_StartTimer(MGPTMR4);
 8003c20:	2002      	movs	r0, #2
 8003c22:	f001 fd23 	bl	800566c <MGPTMR_StartTimer>
}
 8003c26:	bf00      	nop
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200002f8 	.word	0x200002f8
 8003c34:	200002fc 	.word	0x200002fc
 8003c38:	20000300 	.word	0x20000300
 8003c3c:	20000304 	.word	0x20000304
 8003c40:	08003b05 	.word	0x08003b05

08003c44 <HPWRSupply_SetSupplyMode>:
 * @return Std_ReturnType
 * @retval E_OK:                                    Supply's mode set successfully
 * @retval E_NOT_OK:                                Supply's mode not set  
 */
Std_ReturnType HPWRSupply_SetSupplyMode             (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Mode_t Copy_uint32SupplyMode)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	71fb      	strb	r3, [r7, #7]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint32SupplyChoice)
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04e      	beq.n	8003cfc <HPWRSupply_SetSupplyMode+0xb8>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d179      	bne.n	8003d56 <HPWRSupply_SetSupplyMode+0x112>
    {
        case HPWRSUPPLY_VIS_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003c62:	79bb      	ldrb	r3, [r7, #6]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d121      	bne.n	8003cac <HPWRSupply_SetSupplyMode+0x68>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_HIGH);
 8003c68:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HPWRSupply_SetSupplyMode+0x124>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <HPWRSupply_SetSupplyMode+0x128>)
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	b2d1      	uxtb	r1, r2
 8003c74:	2201      	movs	r2, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fb0a 	bl	8005290 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_ON;
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <HPWRSupply_SetSupplyMode+0x12c>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
                MSTK_uint8Delay(4000);
 8003c82:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003c86:	f002 fd95 	bl	80067b4 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	73bb      	strb	r3, [r7, #14]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003c8e:	f107 030e 	add.w	r3, r7, #14
 8003c92:	4619      	mov	r1, r3
 8003c94:	2001      	movs	r0, #1
 8003c96:	f000 f86d 	bl	8003d74 <HPWRSupply_CheckSupplyStatus>
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OK)
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d102      	bne.n	8003ca6 <HPWRSupply_SetSupplyMode+0x62>
                {
                    Loc_uint8FuncStatus = E_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003ca4:	e05a      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
            break;
 8003caa:	e057      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003cac:	79bb      	ldrb	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d121      	bne.n	8003cf6 <HPWRSupply_SetSupplyMode+0xb2>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[0], glbl_uint8PWRSupplyControlPinIDs[0], MGPIO_LOW);
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <HPWRSupply_SetSupplyMode+0x124>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <HPWRSupply_SetSupplyMode+0x128>)
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	b2d1      	uxtb	r1, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fae5 	bl	8005290 <MGPIO_SetPinValue>
                MSTK_uint8Delay(4000);
 8003cc6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003cca:	f002 fd73 	bl	80067b4 <MSTK_uint8Delay>
                HPWRSupply_Status_t Loc_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	737b      	strb	r3, [r7, #13]
                HPWRSupply_CheckSupplyStatus(HPWRSUPPLY_VIS_SUPPLY, &Loc_uint32SupplyStatus);
 8003cd2:	f107 030d 	add.w	r3, r7, #13
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f000 f84b 	bl	8003d74 <HPWRSupply_CheckSupplyStatus>
								glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HPWRSupply_SetSupplyMode+0x12c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
                if(Loc_uint32SupplyStatus == HPWRSUPPLY_STATUS_OFF)
 8003ce4:	7b7b      	ldrb	r3, [r7, #13]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d102      	bne.n	8003cf0 <HPWRSupply_SetSupplyMode+0xac>
                    Loc_uint8FuncStatus = E_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
            break;
 8003cee:	e035      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
            break;
 8003cf4:	e032      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
            break;
 8003cfa:	e02f      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
        }
        case HPWRSUPPLY_UV_SUPPLY:
        {
            if(Copy_uint32SupplyMode == HPWRSUPPLY_ON)
 8003cfc:	79bb      	ldrb	r3, [r7, #6]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d113      	bne.n	8003d2a <HPWRSupply_SetSupplyMode+0xe6>
            {
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_LOW);
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HPWRSupply_SetSupplyMode+0x124>)
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HPWRSupply_SetSupplyMode+0x128>)
 8003d0a:	7852      	ldrb	r2, [r2, #1]
 8003d0c:	b2d1      	uxtb	r1, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fabd 	bl	8005290 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[1] = HPWRSUPPLY_ON;
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HPWRSupply_SetSupplyMode+0x12c>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	705a      	strb	r2, [r3, #1]
								MSTK_uint8Delay(11000);
 8003d1c:	f642 20f8 	movw	r0, #11000	; 0x2af8
 8003d20:	f002 fd48 	bl	80067b4 <MSTK_uint8Delay>
                Loc_uint8FuncStatus = E_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
            }
            else
            {
                Loc_uint8FuncStatus = E_NOT_OK;
            }
            break;
 8003d28:	e018      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
            else if(Copy_uint32SupplyMode == HPWRSUPPLY_OFF)
 8003d2a:	79bb      	ldrb	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10f      	bne.n	8003d50 <HPWRSupply_SetSupplyMode+0x10c>
                MGPIO_SetPinValue(glbl_uint8PWRSupplyControlPortIDs[1], glbl_uint8PWRSupplyControlPinIDs[1], MGPIO_HIGH);
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HPWRSupply_SetSupplyMode+0x124>)
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <HPWRSupply_SetSupplyMode+0x128>)
 8003d38:	7852      	ldrb	r2, [r2, #1]
 8003d3a:	b2d1      	uxtb	r1, r2
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 faa6 	bl	8005290 <MGPIO_SetPinValue>
                glbl_uint8SupplyFlags[0] = HPWRSUPPLY_OFF;
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HPWRSupply_SetSupplyMode+0x12c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
            break;
 8003d4e:	e005      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
                Loc_uint8FuncStatus = E_NOT_OK;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
            break;
 8003d54:	e002      	b.n	8003d5c <HPWRSupply_SetSupplyMode+0x118>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
            break;
 8003d5a:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000300 	.word	0x20000300
 8003d6c:	20000304 	.word	0x20000304
 8003d70:	20000694 	.word	0x20000694

08003d74 <HPWRSupply_CheckSupplyStatus>:
 * @param Copy_uint32SupplyChoice:                  The power supply whose status is to be checked 
 * @param P_uint32SupplyStatus:                     Power Supply Status (Ok or not Ok or Off)
 * @return Std_ReturnType 
 */
Std_ReturnType HPWRSupply_CheckSupplyStatus         (HPWRSupply_Choice_t Copy_uint32SupplyChoice, HPWRSupply_Status_t* P_uint32SupplyStatus)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
    if(P_uint32SupplyStatus != NULL_PTR)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d054      	beq.n	8003e34 <HPWRSupply_CheckSupplyStatus+0xc0>
    {
        switch(Copy_uint32SupplyChoice)
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d037      	beq.n	8003e00 <HPWRSupply_CheckSupplyStatus+0x8c>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d14c      	bne.n	8003e2e <HPWRSupply_CheckSupplyStatus+0xba>
        {
            case HPWRSUPPLY_VIS_SUPPLY:
            {
                float32 Loc_float32VisSupplySenseVoltage = ((float32)glbl_uint16SenseValue[0] / 4096) * 3.3f;
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc ff8c 	bl	8000cb8 <__aeabi_ui2f>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f892 	bl	8000ed0 <__aeabi_fdiv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4926      	ldr	r1, [pc, #152]	; (8003e48 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc ffd9 	bl	8000d68 <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	613b      	str	r3, [r7, #16]
                /*Check if Loc_float32VisSupplySenseVoltage is equal to a certain value*/
                /*if it is equal, supply is working well*/
                if((Loc_float32VisSupplySenseVoltage > 0.124f) && (Loc_float32VisSupplySenseVoltage < 0.2f))
 8003dba:	4924      	ldr	r1, [pc, #144]	; (8003e4c <HPWRSupply_CheckSupplyStatus+0xd8>)
 8003dbc:	6938      	ldr	r0, [r7, #16]
 8003dbe:	f7fd f98f 	bl	80010e0 <__aeabi_fcmpgt>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HPWRSupply_CheckSupplyStatus+0x6e>
 8003dc8:	4921      	ldr	r1, [pc, #132]	; (8003e50 <HPWRSupply_CheckSupplyStatus+0xdc>)
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f7fd f96a 	bl	80010a4 <__aeabi_fcmplt>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HPWRSupply_CheckSupplyStatus+0x6e>
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	701a      	strb	r2, [r3, #0]
                    Loc_uint8FuncStatus = E_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
                }
                break;
 8003de0:	e02a      	b.n	8003e38 <HPWRSupply_CheckSupplyStatus+0xc4>
                else if(Loc_float32VisSupplySenseVoltage < 0.05f)
 8003de2:	491c      	ldr	r1, [pc, #112]	; (8003e54 <HPWRSupply_CheckSupplyStatus+0xe0>)
 8003de4:	6938      	ldr	r0, [r7, #16]
 8003de6:	f7fd f95d 	bl	80010a4 <__aeabi_fcmplt>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HPWRSupply_CheckSupplyStatus+0x84>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OFF;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	701a      	strb	r2, [r3, #0]
                break;
 8003df6:	e01f      	b.n	8003e38 <HPWRSupply_CheckSupplyStatus+0xc4>
                    *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_NOT_OK;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	701a      	strb	r2, [r3, #0]
                break;
 8003dfe:	e01b      	b.n	8003e38 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            case HPWRSUPPLY_UV_SUPPLY:
            {
                float32 Loc_float32UVSupplySenseVoltage = ((float32)glbl_uint16SenseValue[2] / 4096) * 3.3f;
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HPWRSupply_CheckSupplyStatus+0xd0>)
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc ff56 	bl	8000cb8 <__aeabi_ui2f>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd f85c 	bl	8000ed0 <__aeabi_fdiv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	490b      	ldr	r1, [pc, #44]	; (8003e48 <HPWRSupply_CheckSupplyStatus+0xd4>)
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc ffa3 	bl	8000d68 <__aeabi_fmul>
 8003e22:	4603      	mov	r3, r0
 8003e24:	60fb      	str	r3, [r7, #12]
                /*Check if Loc_float32UVSupplySenseVoltage is equal to a certain value*/
                *P_uint32SupplyStatus = HPWRSUPPLY_STATUS_OK;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
                /*if it is equal, supply is working well*/
                break;
 8003e2c:	e004      	b.n	8003e38 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
                break;
 8003e32:	e001      	b.n	8003e38 <HPWRSupply_CheckSupplyStatus+0xc4>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
    }
    return Loc_uint8FuncStatus;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000698 	.word	0x20000698
 8003e48:	40533333 	.word	0x40533333
 8003e4c:	3dfdf3b6 	.word	0x3dfdf3b6
 8003e50:	3e4ccccd 	.word	0x3e4ccccd
 8003e54:	3d4ccccd 	.word	0x3d4ccccd

08003e58 <SPWRVolt_GetConversionValue>:
static volatile uint16 glbl_uint16VoltageValues[SPWRVOLT_NO_OF_VOLTAGE_SOURCES] = {0};
static volatile uint8 glbl_uint8VoltageIndex = 0;


void SPWRVolt_GetConversionValue    (void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
    uint16 Loc_uint16VoltageValue = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	80fb      	strh	r3, [r7, #6]

    MADC_Conversion(MADC1, SPWRVolt_VoltageChannels[glbl_uint8VoltageIndex], &Loc_uint16VoltageValue);
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <SPWRVolt_GetConversionValue+0x5c>)
 8003e6c:	5c9b      	ldrb	r3, [r3, r2]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	1dba      	adds	r2, r7, #6
 8003e72:	4619      	mov	r1, r3
 8003e74:	2000      	movs	r0, #0
 8003e76:	f000 fe89 	bl	8004b8c <MADC_Conversion>
    glbl_uint16VoltageValues[glbl_uint8VoltageIndex] = Loc_uint16VoltageValue;
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	88f9      	ldrh	r1, [r7, #6]
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <SPWRVolt_GetConversionValue+0x60>)
 8003e86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    glbl_uint8VoltageIndex++;
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003e96:	701a      	strb	r2, [r3, #0]
    if(glbl_uint8VoltageIndex == SPWRVOLT_NO_OF_VOLTAGE_SOURCES)
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d102      	bne.n	8003ea8 <SPWRVolt_GetConversionValue+0x50>
    {
        glbl_uint8VoltageIndex = 0;
 8003ea2:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <SPWRVolt_GetConversionValue+0x58>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
        //MGPTMR_StopTimer(MGPTMR3);
    }
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	200006b2 	.word	0x200006b2
 8003eb4:	20000310 	.word	0x20000310
 8003eb8:	200006a8 	.word	0x200006a8

08003ebc <SPWRVolt_Init>:
 * @return Std_ReturnType
 * @retval E_OK:            Interface Successfully Initialized
 * @retval E_NOT_OK:        Interface not initialized 
 */
Std_ReturnType SPWRVolt_Init        (void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
    /*Initialize Pins to be input analog*/
    MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_TIM3_EN);
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f002 f85b 	bl	8005f80 <MRCC_EnablePeripheralClock>
    MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_ADC1_EN);
 8003eca:	2109      	movs	r1, #9
 8003ecc:	2003      	movs	r0, #3
 8003ece:	f002 f857 	bl	8005f80 <MRCC_EnablePeripheralClock>
    
	uint8 Loc_uint8Index = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	71fb      	strb	r3, [r7, #7]
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	e00e      	b.n	8003efa <SPWRVolt_Init+0x3e>
    {
        MGPIO_SetPinMode(SPWRVolt_VoltagesPortIDs[Loc_uint8Index], SPWRVolt_VoltagesPinIDs[Loc_uint8Index], MGPIO_INPUT_ANALOG_MODE);
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <SPWRVolt_Init+0x7c>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
 8003ee2:	b2d8      	uxtb	r0, r3
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <SPWRVolt_Init+0x80>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2200      	movs	r2, #0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f001 f8e8 	bl	80050c4 <MGPIO_SetPinMode>
    for(Loc_uint8Index = 0; Loc_uint8Index < SPWRVOLT_NO_OF_VOLTAGE_SOURCES; Loc_uint8Index++)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	71fb      	strb	r3, [r7, #7]
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d9ed      	bls.n	8003edc <SPWRVolt_Init+0x20>
    }
		
    MADC_Init(MADC1);
 8003f00:	2000      	movs	r0, #0
 8003f02:	f000 fd9b 	bl	8004a3c <MADC_Init>

    MGPTMR_SetTimerUpdateCallbackFunc(MGPTMR3, SPWRVolt_GetConversionValue);
 8003f06:	490e      	ldr	r1, [pc, #56]	; (8003f40 <SPWRVolt_Init+0x84>)
 8003f08:	2001      	movs	r0, #1
 8003f0a:	f001 fbf7 	bl	80056fc <MGPTMR_SetTimerUpdateCallbackFunc>

    MGPTMR_SetTimerPeriod(MGPTMR3, 1000);
 8003f0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f12:	2001      	movs	r0, #1
 8003f14:	f001 fbca 	bl	80056ac <MGPTMR_SetTimerPeriod>
		
	MNVIC_EnableInterrupt(MNVIC_TIM3);
 8003f18:	201d      	movs	r0, #29
 8003f1a:	f001 ff4b 	bl	8005db4 <MNVIC_EnableInterrupt>
		
    MGPTMR_Init(MGPTMR3);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f001 fb24 	bl	800556c <MGPTMR_Init>

    SPWRVolt_GetConversionValue();
 8003f24:	f7ff ff98 	bl	8003e58 <SPWRVolt_GetConversionValue>

    MGPTMR_StartTimer(MGPTMR3);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f001 fb9f 	bl	800566c <MGPTMR_StartTimer>

    return E_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200006a0 	.word	0x200006a0
 8003f3c:	20000308 	.word	0x20000308
 8003f40:	08003e59 	.word	0x08003e59

08003f44 <SPWRVolt_GetVoltage>:
 * @return Std_ReturnType
 * @retval E_OK:            Voltage Successfully Read
 * @retval E_NOT_OK:        Voltage not read 
 */
Std_ReturnType SPWRVolt_GetVoltage  (SPWRVolt_Choice_t Copy_uint32VoltageChoice, uint16* P_uint16VoltageValue)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
    if(P_uint16VoltageValue != NULL_PTR)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <SPWRVolt_GetVoltage+0x2a>
    {
        *P_uint16VoltageValue = glbl_uint16VoltageValues[Copy_uint32VoltageChoice];
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <SPWRVolt_GetVoltage+0x3c>)
 8003f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e001      	b.n	8003f72 <SPWRVolt_GetVoltage+0x2e>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	200006a8 	.word	0x200006a8

08003f84 <HMOTORS_Init>:
static volatile uint32 glbl_uint32FilterInitCalibration 				= 28;
static volatile uint32 glbl_uint32ZeroWLSteps							= 120;
static volatile float32 glbl_uint32StepsPerNm							= 5;

Std_ReturnType HMOTORS_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
	MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_AFIO_EN);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	f001 fff7 	bl	8005f80 <MRCC_EnablePeripheralClock>
	MAFIO_MAPR_R &= ~((0b111) << 24);
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HMOTORS_Init+0x100>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HMOTORS_Init+0x100>)
 8003f98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f9c:	6013      	str	r3, [r2, #0]
	MAFIO_MAPR_R |= ((0b010) << 24);
 8003f9e:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HMOTORS_Init+0x100>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a38      	ldr	r2, [pc, #224]	; (8004084 <HMOTORS_Init+0x100>)
 8003fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	6013      	str	r3, [r2, #0]
	
	uint8 Loc_uint8Index = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	71fb      	strb	r3, [r7, #7]
	
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	71fb      	strb	r3, [r7, #7]
 8003fb2:	e01a      	b.n	8003fea <HMOTORS_Init+0x66>
	{
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HMOTORS_Init+0x104>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	b2d8      	uxtb	r0, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorHomingPinIDs[Loc_uint8Index], MGPIO_INPUT_PULL_UP_OR_DOWN_MODE);
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HMOTORS_Init+0x108>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f001 f87c 	bl	80050c4 <MGPIO_SetPinMode>
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	4a2e      	ldr	r2, [pc, #184]	; (8004088 <HMOTORS_Init+0x104>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorHomingPinIDs[Loc_uint8Index]);
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <HMOTORS_Init+0x108>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	b2db      	uxtb	r3, r3
		MGPIO_ActivatePullUp(glbl_uint8MotorHomingPortIDs[Loc_uint8Index],\
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f001 fa4a 	bl	8005478 <MGPIO_ActivatePullUp>
	for(Loc_uint8Index = 0; Loc_uint8Index < (HMOTORS_NUM_MOTORS - 1); Loc_uint8Index++)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	71fb      	strb	r3, [r7, #7]
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d9e1      	bls.n	8003fb4 <HMOTORS_Init+0x30>
	}
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	71fb      	strb	r3, [r7, #7]
 8003ff4:	e01a      	b.n	800402c <HMOTORS_Init+0xa8>
	{
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HMOTORS_Init+0x10c>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	b2d8      	uxtb	r0, r3
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsStepPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <HMOTORS_Init+0x110>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	b2db      	uxtb	r3, r3
		MGPIO_SetPinMode(glbl_uint8MotorsStepPortIDs[Loc_uint8Index],\
 8004006:	2202      	movs	r2, #2
 8004008:	4619      	mov	r1, r3
 800400a:	f001 f85b 	bl	80050c4 <MGPIO_SetPinMode>
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HMOTORS_Init+0x114>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	b2d8      	uxtb	r0, r3
 8004016:	79fb      	ldrb	r3, [r7, #7]
							glbl_uint8MotorsDirPinIDs[Loc_uint8Index], MGPIO_OUTPUT_PUSH_PULL_2MHZ);
 8004018:	4a20      	ldr	r2, [pc, #128]	; (800409c <HMOTORS_Init+0x118>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	b2db      	uxtb	r3, r3
    	MGPIO_SetPinMode(glbl_uint8MotorsDirPortIDs[Loc_uint8Index],\
 800401e:	2202      	movs	r2, #2
 8004020:	4619      	mov	r1, r3
 8004022:	f001 f84f 	bl	80050c4 <MGPIO_SetPinMode>
	for(Loc_uint8Index = 0; Loc_uint8Index < HMOTORS_NUM_MOTORS; Loc_uint8Index++)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	3301      	adds	r3, #1
 800402a:	71fb      	strb	r3, [r7, #7]
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d9e1      	bls.n	8003ff6 <HMOTORS_Init+0x72>
	}

	MNVIC_EnableInterrupt(MNVIC_EXTI15_10);
 8004032:	2028      	movs	r0, #40	; 0x28
 8004034:	f001 febe 	bl	8005db4 <MNVIC_EnableInterrupt>
	MNVIC_EnableInterrupt(MNVIC_EXTI0);
 8004038:	2006      	movs	r0, #6
 800403a:	f001 febb 	bl	8005db4 <MNVIC_EnableInterrupt>

	MEXTI_SetCallbackFunction(MEXTI_EXTI13, HMOTOR_FilterHomeIndicator);
 800403e:	4918      	ldr	r1, [pc, #96]	; (80040a0 <HMOTORS_Init+0x11c>)
 8004040:	200d      	movs	r0, #13
 8004042:	f000 fec9 	bl	8004dd8 <MEXTI_SetCallbackFunction>
	MEXTI_SetCallbackFunction(MEXTI_EXTI0, HMOTOR_WLHomeIndicator);
 8004046:	4917      	ldr	r1, [pc, #92]	; (80040a4 <HMOTORS_Init+0x120>)
 8004048:	2000      	movs	r0, #0
 800404a:	f000 fec5 	bl	8004dd8 <MEXTI_SetCallbackFunction>
	
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI13, MGPIO_PORTC);
 800404e:	2102      	movs	r1, #2
 8004050:	200d      	movs	r0, #13
 8004052:	f000 fe17 	bl	8004c84 <MAFIO_SetEXTIPinConfigurations>
	MAFIO_SetEXTIPinConfigurations(MAFIO_EXTI0, MGPIO_PORTA);
 8004056:	2100      	movs	r1, #0
 8004058:	2000      	movs	r0, #0
 800405a:	f000 fe13 	bl	8004c84 <MAFIO_SetEXTIPinConfigurations>

	MEXTI_EnableExternalInterrupt(MEXTI_EXTI13, MEXTI_INT_AT_FALLING_EDGE);
 800405e:	2101      	movs	r1, #1
 8004060:	200d      	movs	r0, #13
 8004062:	f000 fe55 	bl	8004d10 <MEXTI_EnableExternalInterrupt>
	MEXTI_EnableExternalInterrupt(MEXTI_EXTI0, MEXTI_INT_AT_FALLING_EDGE);
 8004066:	2101      	movs	r1, #1
 8004068:	2000      	movs	r0, #0
 800406a:	f000 fe51 	bl	8004d10 <MEXTI_EnableExternalInterrupt>

	//GET FIRST VALUE OF FILTER CALIBRATION
	eeprom_read_byte(EEPROM_MOTOR_STEPS_MEM_ADDRESS, &glbl_uint32FilterInitCalibration, 4);
 800406e:	2204      	movs	r2, #4
 8004070:	490d      	ldr	r1, [pc, #52]	; (80040a8 <HMOTORS_Init+0x124>)
 8004072:	20d8      	movs	r0, #216	; 0xd8
 8004074:	f7fe ff82 	bl	8002f7c <eeprom_read_byte>

	return E_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40010004 	.word	0x40010004
 8004088:	20000328 	.word	0x20000328
 800408c:	2000032c 	.word	0x2000032c
 8004090:	20000318 	.word	0x20000318
 8004094:	2000031c 	.word	0x2000031c
 8004098:	20000320 	.word	0x20000320
 800409c:	20000324 	.word	0x20000324
 80040a0:	08004a0d 	.word	0x08004a0d
 80040a4:	08004a25 	.word	0x08004a25
 80040a8:	20000330 	.word	0x20000330

080040ac <HMOTOR_Step>:

Std_ReturnType HMOTOR_Step(HMOTORS_Select_t Copy_uint32MotorSelect, uint32 Copy_uint32NoOfSetps, uint8 Copy_uint8Direction, uint8 Copy_uint8MotorSpeed)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6039      	str	r1, [r7, #0]
 80040b4:	4611      	mov	r1, r2
 80040b6:	461a      	mov	r2, r3
 80040b8:	4603      	mov	r3, r0
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	460b      	mov	r3, r1
 80040be:	71bb      	strb	r3, [r7, #6]
 80040c0:	4613      	mov	r3, r2
 80040c2:	717b      	strb	r3, [r7, #5]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]

	uint32 Loc_uint32Index = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
	switch(Copy_uint8Direction)
 80040cc:	79bb      	ldrb	r3, [r7, #6]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d002      	beq.n	80040d8 <HMOTOR_Step+0x2c>
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d00f      	beq.n	80040f6 <HMOTOR_Step+0x4a>
 80040d6:	e01d      	b.n	8004114 <HMOTOR_Step+0x68>
	{
		case HMOTORS_CLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	4a36      	ldr	r2, [pc, #216]	; (80041b4 <HMOTOR_Step+0x108>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	b2d8      	uxtb	r0, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 80040e2:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <HMOTOR_Step+0x10c>)
 80040e4:	5cd3      	ldrb	r3, [r2, r3]
 80040e6:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80040e8:	2201      	movs	r2, #1
 80040ea:	4619      	mov	r1, r3
 80040ec:	f001 f8d0 	bl	8005290 <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
			break;
 80040f4:	e010      	b.n	8004118 <HMOTOR_Step+0x6c>
		}
		case HMOTORS_CCLKWISE_DIRECTION:
		{
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <HMOTOR_Step+0x108>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	b2d8      	uxtb	r0, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsDirPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HMOTOR_Step+0x10c>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	b2db      	uxtb	r3, r3
			MGPIO_SetPinValue(glbl_uint8MotorsDirPortIDs[Copy_uint32MotorSelect],\ 
 8004106:	2200      	movs	r2, #0
 8004108:	4619      	mov	r1, r3
 800410a:	f001 f8c1 	bl	8005290 <MGPIO_SetPinValue>
			Loc_uint8FuncStatus = E_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
		
			break;
 8004112:	e001      	b.n	8004118 <HMOTOR_Step+0x6c>
		}
		default:
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
		}
	}
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	e040      	b.n	80041a0 <HMOTOR_Step+0xf4>
	{
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HMOTOR_Step+0x110>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	b2d8      	uxtb	r0, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_HIGH);
 8004128:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <HMOTOR_Step+0x114>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 800412e:	2201      	movs	r2, #1
 8004130:	4619      	mov	r1, r3
 8004132:	f001 f8ad 	bl	8005290 <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 8004136:	797b      	ldrb	r3, [r7, #5]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f002 fb39 	bl	80067b4 <MSTK_uint8Delay>
		
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <HMOTOR_Step+0x110>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	b2d8      	uxtb	r0, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
								glbl_uint8MotorsStepPinIDs[Copy_uint32MotorSelect], MGPIO_LOW);
 800414c:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HMOTOR_Step+0x114>)
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	b2db      	uxtb	r3, r3
		MGPIO_SetPinValue(glbl_uint8MotorsStepPortIDs[Copy_uint32MotorSelect],\ 
 8004152:	2200      	movs	r2, #0
 8004154:	4619      	mov	r1, r3
 8004156:	f001 f89b 	bl	8005290 <MGPIO_SetPinValue>
		
		MSTK_uint8Delay(Copy_uint8MotorSpeed / 2);
 800415a:	797b      	ldrb	r3, [r7, #5]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4618      	mov	r0, r3
 8004162:	f002 fb27 	bl	80067b4 <MSTK_uint8Delay>
		if(Copy_uint8Direction == HMOTORS_CLKWISE_DIRECTION)
 8004166:	79bb      	ldrb	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HMOTOR_Step+0xd2>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] ++;
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <HMOTOR_Step+0x118>)
 8004170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004174:	3201      	adds	r2, #1
 8004176:	4913      	ldr	r1, [pc, #76]	; (80041c4 <HMOTOR_Step+0x118>)
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800417c:	e00d      	b.n	800419a <HMOTOR_Step+0xee>
		}
		else if(Copy_uint8Direction == HMOTORS_CCLKWISE_DIRECTION)
 800417e:	79bb      	ldrb	r3, [r7, #6]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d108      	bne.n	8004196 <HMOTOR_Step+0xea>
		{
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] --;
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <HMOTOR_Step+0x118>)
 8004188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800418c:	3a01      	subs	r2, #1
 800418e:	490d      	ldr	r1, [pc, #52]	; (80041c4 <HMOTOR_Step+0x118>)
 8004190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004194:	e001      	b.n	800419a <HMOTOR_Step+0xee>
		}
		else
		{
			Loc_uint8FuncStatus = E_NOT_OK;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
	for(Loc_uint32Index = 0; Loc_uint32Index < (Copy_uint32NoOfSetps); Loc_uint32Index++)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3301      	adds	r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d3ba      	bcc.n	800411e <HMOTOR_Step+0x72>
		}
	}
	return Loc_uint8FuncStatus;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000320 	.word	0x20000320
 80041b8:	20000324 	.word	0x20000324
 80041bc:	20000318 	.word	0x20000318
 80041c0:	2000031c 	.word	0x2000031c
 80041c4:	200006b4 	.word	0x200006b4

080041c8 <HMOTOR_MoveLampMotor>:

// lamp motor
Std_ReturnType HMOTOR_MoveLampMotor(HMOTOR_Lamp_Select_t Copy_uint32LampSelect)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
	switch(Copy_uint32LampSelect)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HMOTOR_MoveLampMotor+0x16>
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d008      	beq.n	80041ee <HMOTOR_MoveLampMotor+0x26>
 80041dc:	e018      	b.n	8004210 <HMOTOR_MoveLampMotor+0x48>
	{
		case HMOTOR_LAMP_UV:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 0)
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HMOTOR_MoveLampMotor+0x5c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HMOTOR_MoveLampMotor+0x4c>
			{
				HMOTOR_GoHome(HMOTOR_LAMP_SELECT);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f000 fb40 	bl	800486c <HMOTOR_GoHome>
			}
			else
			{
				/*Do nothing*/
			}
			break;
 80041ec:	e012      	b.n	8004214 <HMOTOR_MoveLampMotor+0x4c>
		}
		case HMOTOR_LAMP_VIS:
		{
			if(glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] != 100)
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <HMOTOR_MoveLampMotor+0x5c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d010      	beq.n	8004218 <HMOTOR_MoveLampMotor+0x50>
			{
				HMOTOR_Step(HMOTOR_LAMP_SELECT, 100, HMOTORS_CCLKWISE_DIRECTION, 10);
 80041f6:	230a      	movs	r3, #10
 80041f8:	2202      	movs	r2, #2
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	2000      	movs	r0, #0
 80041fe:	f7ff ff55 	bl	80040ac <HMOTOR_Step>
				glbl_uint32MotorSteps[HMOTOR_LAMP_SELECT] = 100;
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HMOTOR_MoveLampMotor+0x5c>)
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	601a      	str	r2, [r3, #0]
				glbl_uint8HomingIndicator[HMOTOR_LAMP_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HMOTOR_MoveLampMotor+0x60>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/*Do nothing*/
			}
			break;
 800420e:	e003      	b.n	8004218 <HMOTOR_MoveLampMotor+0x50>
		}
		default:
		{
			return E_NOT_OK;
 8004210:	2301      	movs	r3, #1
 8004212:	e003      	b.n	800421c <HMOTOR_MoveLampMotor+0x54>
			break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HMOTOR_MoveLampMotor+0x52>
			break;
 8004218:	bf00      	nop
			break;
		}
	}
	return E_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	200006b4 	.word	0x200006b4
 8004228:	200006c4 	.word	0x200006c4

0800422c <HMOTOR_MoveFilterMotor>:

//filter wheel
Std_ReturnType HMOTOR_MoveFilterMotor(HMOTOR_Filter_Select_t Copy_uint32FilterSelect)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
	uint32 Loc_uint32StepsDifference = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
	switch(Copy_uint32FilterSelect)
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	2b07      	cmp	r3, #7
 800423e:	f200 8171 	bhi.w	8004524 <HMOTOR_MoveFilterMotor+0x2f8>
 8004242:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HMOTOR_MoveFilterMotor+0x1c>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	08004269 	.word	0x08004269
 800424c:	080042b7 	.word	0x080042b7
 8004250:	0800430d 	.word	0x0800430d
 8004254:	08004363 	.word	0x08004363
 8004258:	080043b9 	.word	0x080043b9
 800425c:	0800440f 	.word	0x0800440f
 8004260:	08004463 	.word	0x08004463
 8004264:	080044c9 	.word	0x080044c9
	{
		case HMOTOR_FILTER_AIR:
		{
			if(glbl_uint32MotorSteps[1] > glbl_uint32FilterInitCalibration)
 8004268:	4b95      	ldr	r3, [pc, #596]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b95      	ldr	r3, [pc, #596]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d90c      	bls.n	800428e <HMOTOR_MoveFilterMotor+0x62>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - glbl_uint32FilterInitCalibration;
 8004274:	4b92      	ldr	r3, [pc, #584]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004280:	230a      	movs	r3, #10
 8004282:	2201      	movs	r2, #1
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	2001      	movs	r0, #1
 8004288:	f7ff ff10 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
			{
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 800428c:	e14c      	b.n	8004528 <HMOTOR_MoveFilterMotor+0x2fc>
			else if(glbl_uint32MotorSteps[1] < glbl_uint32FilterInitCalibration)
 800428e:	4b8c      	ldr	r3, [pc, #560]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	f080 8146 	bcs.w	8004528 <HMOTOR_MoveFilterMotor+0x2fc>
				Loc_uint32StepsDifference = glbl_uint32FilterInitCalibration - glbl_uint32MotorSteps[1];
 800429c:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b87      	ldr	r3, [pc, #540]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 80042a8:	230a      	movs	r3, #10
 80042aa:	2202      	movs	r2, #2
 80042ac:	68f9      	ldr	r1, [r7, #12]
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7ff fefc 	bl	80040ac <HMOTOR_Step>
			break;
 80042b4:	e138      	b.n	8004528 <HMOTOR_MoveFilterMotor+0x2fc>
		}
		case HMOTOR_FILTER_1:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 50))
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d90d      	bls.n	80042e0 <HMOTOR_MoveFilterMotor+0xb4>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 50);
 80042c4:	4b7e      	ldr	r3, [pc, #504]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	3b32      	subs	r3, #50	; 0x32
 80042d0:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80042d2:	230a      	movs	r3, #10
 80042d4:	2201      	movs	r2, #1
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	2001      	movs	r0, #1
 80042da:	f7ff fee7 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 80042de:	e125      	b.n	800452c <HMOTOR_MoveFilterMotor+0x300>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 50))
 80042e0:	4b77      	ldr	r3, [pc, #476]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3332      	adds	r3, #50	; 0x32
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f080 811e 	bcs.w	800452c <HMOTOR_MoveFilterMotor+0x300>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 50) - glbl_uint32MotorSteps[1];
 80042f0:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4b72      	ldr	r3, [pc, #456]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 80042fe:	230a      	movs	r3, #10
 8004300:	2202      	movs	r2, #2
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	2001      	movs	r0, #1
 8004306:	f7ff fed1 	bl	80040ac <HMOTOR_Step>
			break;
 800430a:	e10f      	b.n	800452c <HMOTOR_MoveFilterMotor+0x300>
		}
		case HMOTOR_FILTER_2:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 100))
 800430c:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3364      	adds	r3, #100	; 0x64
 8004316:	429a      	cmp	r2, r3
 8004318:	d90d      	bls.n	8004336 <HMOTOR_MoveFilterMotor+0x10a>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 100);
 800431a:	4b69      	ldr	r3, [pc, #420]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4b69      	ldr	r3, [pc, #420]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	3b64      	subs	r3, #100	; 0x64
 8004326:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004328:	230a      	movs	r3, #10
 800432a:	2201      	movs	r2, #1
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	2001      	movs	r0, #1
 8004330:	f7ff febc 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 8004334:	e0fc      	b.n	8004530 <HMOTOR_MoveFilterMotor+0x304>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 100))
 8004336:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3364      	adds	r3, #100	; 0x64
 8004340:	429a      	cmp	r2, r3
 8004342:	f080 80f5 	bcs.w	8004530 <HMOTOR_MoveFilterMotor+0x304>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 100) - glbl_uint32MotorSteps[1];
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	3364      	adds	r3, #100	; 0x64
 8004352:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 8004354:	230a      	movs	r3, #10
 8004356:	2202      	movs	r2, #2
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	2001      	movs	r0, #1
 800435c:	f7ff fea6 	bl	80040ac <HMOTOR_Step>
			break;
 8004360:	e0e6      	b.n	8004530 <HMOTOR_MoveFilterMotor+0x304>
		}
		case HMOTOR_FILTER_3:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 150))
 8004362:	4b57      	ldr	r3, [pc, #348]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3396      	adds	r3, #150	; 0x96
 800436c:	429a      	cmp	r2, r3
 800436e:	d90d      	bls.n	800438c <HMOTOR_MoveFilterMotor+0x160>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 150);
 8004370:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	3b96      	subs	r3, #150	; 0x96
 800437c:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800437e:	230a      	movs	r3, #10
 8004380:	2201      	movs	r2, #1
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	2001      	movs	r0, #1
 8004386:	f7ff fe91 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 800438a:	e0d3      	b.n	8004534 <HMOTOR_MoveFilterMotor+0x308>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 150))
 800438c:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b4c      	ldr	r3, [pc, #304]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3396      	adds	r3, #150	; 0x96
 8004396:	429a      	cmp	r2, r3
 8004398:	f080 80cc 	bcs.w	8004534 <HMOTOR_MoveFilterMotor+0x308>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 150) - glbl_uint32MotorSteps[1];
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	3396      	adds	r3, #150	; 0x96
 80043a8:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 80043aa:	230a      	movs	r3, #10
 80043ac:	2202      	movs	r2, #2
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	2001      	movs	r0, #1
 80043b2:	f7ff fe7b 	bl	80040ac <HMOTOR_Step>
			break;
 80043b6:	e0bd      	b.n	8004534 <HMOTOR_MoveFilterMotor+0x308>
		}
		case HMOTOR_FILTER_4:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 200))
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	33c8      	adds	r3, #200	; 0xc8
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d90d      	bls.n	80043e2 <HMOTOR_MoveFilterMotor+0x1b6>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 200);
 80043c6:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	3bc8      	subs	r3, #200	; 0xc8
 80043d2:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80043d4:	230a      	movs	r3, #10
 80043d6:	2201      	movs	r2, #1
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	2001      	movs	r0, #1
 80043dc:	f7ff fe66 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 80043e0:	e0aa      	b.n	8004538 <HMOTOR_MoveFilterMotor+0x30c>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 200))
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	33c8      	adds	r3, #200	; 0xc8
 80043ec:	429a      	cmp	r2, r3
 80043ee:	f080 80a3 	bcs.w	8004538 <HMOTOR_MoveFilterMotor+0x30c>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 200) - glbl_uint32MotorSteps[1];
 80043f2:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	33c8      	adds	r3, #200	; 0xc8
 80043fe:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 8004400:	230a      	movs	r3, #10
 8004402:	2202      	movs	r2, #2
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	2001      	movs	r0, #1
 8004408:	f7ff fe50 	bl	80040ac <HMOTOR_Step>
			break;
 800440c:	e094      	b.n	8004538 <HMOTOR_MoveFilterMotor+0x30c>
		}
		case HMOTOR_FILTER_5:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 250))
 800440e:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	33fa      	adds	r3, #250	; 0xfa
 8004418:	429a      	cmp	r2, r3
 800441a:	d90d      	bls.n	8004438 <HMOTOR_MoveFilterMotor+0x20c>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 250);
 800441c:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	3bfa      	subs	r3, #250	; 0xfa
 8004428:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 800442a:	230a      	movs	r3, #10
 800442c:	2201      	movs	r2, #1
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	2001      	movs	r0, #1
 8004432:	f7ff fe3b 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 8004436:	e081      	b.n	800453c <HMOTOR_MoveFilterMotor+0x310>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 250))
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	33fa      	adds	r3, #250	; 0xfa
 8004442:	429a      	cmp	r2, r3
 8004444:	d27a      	bcs.n	800453c <HMOTOR_MoveFilterMotor+0x310>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 250) - glbl_uint32MotorSteps[1];
 8004446:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	33fa      	adds	r3, #250	; 0xfa
 8004452:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 8004454:	230a      	movs	r3, #10
 8004456:	2202      	movs	r2, #2
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	2001      	movs	r0, #1
 800445c:	f7ff fe26 	bl	80040ac <HMOTOR_Step>
			break;
 8004460:	e06c      	b.n	800453c <HMOTOR_MoveFilterMotor+0x310>
		}
		case HMOTOR_FILTER_6:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 300))
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800446e:	429a      	cmp	r2, r3
 8004470:	d90e      	bls.n	8004490 <HMOTOR_MoveFilterMotor+0x264>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 300);
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004480:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 8004482:	230a      	movs	r3, #10
 8004484:	2201      	movs	r2, #1
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	2001      	movs	r0, #1
 800448a:	f7ff fe0f 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 800448e:	e057      	b.n	8004540 <HMOTOR_MoveFilterMotor+0x314>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 300))
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800449c:	429a      	cmp	r2, r3
 800449e:	d24f      	bcs.n	8004540 <HMOTOR_MoveFilterMotor+0x314>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 300) - glbl_uint32MotorSteps[1];
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HMOTOR_MoveFilterMotor+0x298>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HMOTOR_MoveFilterMotor+0x294>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80044ae:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 80044b0:	230a      	movs	r3, #10
 80044b2:	2202      	movs	r2, #2
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	2001      	movs	r0, #1
 80044b8:	f7ff fdf8 	bl	80040ac <HMOTOR_Step>
			break;
 80044bc:	e040      	b.n	8004540 <HMOTOR_MoveFilterMotor+0x314>
 80044be:	bf00      	nop
 80044c0:	200006b4 	.word	0x200006b4
 80044c4:	20000330 	.word	0x20000330
		}
		case HMOTOR_FILTER_7:
		{
			if(glbl_uint32MotorSteps[1] > (glbl_uint32FilterInitCalibration + 350))
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HMOTOR_MoveFilterMotor+0x32c>)
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <HMOTOR_MoveFilterMotor+0x330>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d90e      	bls.n	80044f6 <HMOTOR_MoveFilterMotor+0x2ca>
			{
				Loc_uint32StepsDifference = glbl_uint32MotorSteps[1] - (glbl_uint32FilterInitCalibration + 350);
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HMOTOR_MoveFilterMotor+0x32c>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HMOTOR_MoveFilterMotor+0x330>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
 80044e6:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CLKWISE_DIRECTION, 10);
 80044e8:	230a      	movs	r3, #10
 80044ea:	2201      	movs	r2, #1
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	2001      	movs	r0, #1
 80044f0:	f7ff fddc 	bl	80040ac <HMOTOR_Step>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
			{
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
			}
			break;
 80044f4:	e026      	b.n	8004544 <HMOTOR_MoveFilterMotor+0x318>
			else if(glbl_uint32MotorSteps[1] < (glbl_uint32FilterInitCalibration + 350))
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HMOTOR_MoveFilterMotor+0x32c>)
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <HMOTOR_MoveFilterMotor+0x330>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8004502:	429a      	cmp	r2, r3
 8004504:	d21e      	bcs.n	8004544 <HMOTOR_MoveFilterMotor+0x318>
				Loc_uint32StepsDifference = (glbl_uint32FilterInitCalibration + 350) - glbl_uint32MotorSteps[1];
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <HMOTOR_MoveFilterMotor+0x330>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HMOTOR_MoveFilterMotor+0x32c>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8004514:	60fb      	str	r3, [r7, #12]
				HMOTOR_Step(HMOTOR_FILTER_SELECT, Loc_uint32StepsDifference, HMOTORS_CCLKWISE_DIRECTION, 10); 
 8004516:	230a      	movs	r3, #10
 8004518:	2202      	movs	r2, #2
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	2001      	movs	r0, #1
 800451e:	f7ff fdc5 	bl	80040ac <HMOTOR_Step>
			break;
 8004522:	e00f      	b.n	8004544 <HMOTOR_MoveFilterMotor+0x318>
		}
		default:
		{
			return E_NOT_OK;
 8004524:	2301      	movs	r3, #1
 8004526:	e012      	b.n	800454e <HMOTOR_MoveFilterMotor+0x322>
			break;
 8004528:	bf00      	nop
 800452a:	e00c      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 800452c:	bf00      	nop
 800452e:	e00a      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004530:	bf00      	nop
 8004532:	e008      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004534:	bf00      	nop
 8004536:	e006      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004538:	bf00      	nop
 800453a:	e004      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HMOTOR_MoveFilterMotor+0x31a>
			break;
 8004544:	bf00      	nop
			break;
		}
	}
	glbl_uint8HomingIndicator[HMOTOR_FILTER_SELECT] = HMOTORS_MOTOR_NOT_AT_HOME;
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HMOTOR_MoveFilterMotor+0x334>)
 8004548:	2200      	movs	r2, #0
 800454a:	705a      	strb	r2, [r3, #1]
	return E_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200006b4 	.word	0x200006b4
 800455c:	20000330 	.word	0x20000330
 8004560:	200006c4 	.word	0x200006c4

08004564 <HMOTOR_GetWLSelectCalibration>:

Std_ReturnType HMOTOR_GetWLSelectCalibration            (uint32 Copy_uint32ZeroWLSteps, float32 Copy_uint32StepsPerNm)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	glbl_uint32ZeroWLSteps = Copy_uint32ZeroWLSteps;
 800456e:	4a06      	ldr	r2, [pc, #24]	; (8004588 <HMOTOR_GetWLSelectCalibration+0x24>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
	glbl_uint32StepsPerNm = Copy_uint32StepsPerNm;
 8004574:	4a05      	ldr	r2, [pc, #20]	; (800458c <HMOTOR_GetWLSelectCalibration+0x28>)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6013      	str	r3, [r2, #0]
	return E_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000334 	.word	0x20000334
 800458c:	20000338 	.word	0x20000338

08004590 <HMOTOR_MoveWLSelectMotor>:

Std_ReturnType HMOTOR_MoveWLSelectMotor                 (float32 Copy_float32NextWL)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.01f) && (Copy_float32NextWL < 0.01f))
 8004598:	493f      	ldr	r1, [pc, #252]	; (8004698 <HMOTOR_MoveWLSelectMotor+0x108>)
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fda0 	bl	80010e0 <__aeabi_fcmpgt>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02c      	beq.n	8004600 <HMOTOR_MoveWLSelectMotor+0x70>
 80045a6:	493d      	ldr	r1, [pc, #244]	; (800469c <HMOTOR_MoveWLSelectMotor+0x10c>)
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fd7b 	bl	80010a4 <__aeabi_fcmplt>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d025      	beq.n	8004600 <HMOTOR_MoveWLSelectMotor+0x70>
	{
		if(glbl_uint32MotorSteps[3] > glbl_uint32ZeroWLSteps)
 80045b4:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HMOTOR_MoveWLSelectMotor+0x110>)
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HMOTOR_MoveWLSelectMotor+0x114>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d90a      	bls.n	80045d6 <HMOTOR_MoveWLSelectMotor+0x46>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32MotorSteps[3] - glbl_uint32ZeroWLSteps), HMOTORS_CLKWISE_DIRECTION, 10);
 80045c0:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <HMOTOR_MoveWLSelectMotor+0x110>)
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HMOTOR_MoveWLSelectMotor+0x114>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1ad1      	subs	r1, r2, r3
 80045ca:	230a      	movs	r3, #10
 80045cc:	2201      	movs	r2, #1
 80045ce:	2002      	movs	r0, #2
 80045d0:	f7ff fd6c 	bl	80040ac <HMOTOR_Step>
 80045d4:	e00f      	b.n	80045f6 <HMOTOR_MoveWLSelectMotor+0x66>
		}
		else if(glbl_uint32MotorSteps[3] < glbl_uint32ZeroWLSteps)
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HMOTOR_MoveWLSelectMotor+0x110>)
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <HMOTOR_MoveWLSelectMotor+0x114>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d209      	bcs.n	80045f6 <HMOTOR_MoveWLSelectMotor+0x66>
		{
			HMOTOR_Step(HMOTOR_WL_SELECT, (glbl_uint32ZeroWLSteps - glbl_uint32MotorSteps[3]), HMOTORS_CCLKWISE_DIRECTION, 10);
 80045e2:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HMOTOR_MoveWLSelectMotor+0x114>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <HMOTOR_MoveWLSelectMotor+0x110>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	1ad1      	subs	r1, r2, r3
 80045ec:	230a      	movs	r3, #10
 80045ee:	2202      	movs	r2, #2
 80045f0:	2002      	movs	r0, #2
 80045f2:	f7ff fd5b 	bl	80040ac <HMOTOR_Step>
		}
		glbl_float32CurrentWL = 0.0f;
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HMOTOR_MoveWLSelectMotor+0x118>)
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e045      	b.n	800468c <HMOTOR_MoveWLSelectMotor+0xfc>
	}
	else
	{
		float32 Loc_float32WLDifference = Copy_float32NextWL - glbl_float32CurrentWL;
 8004600:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <HMOTOR_MoveWLSelectMotor+0x118>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc faa4 	bl	8000b54 <__aeabi_fsub>
 800460c:	4603      	mov	r3, r0
 800460e:	60fb      	str	r3, [r7, #12]
		uint32 Loc_uint32MotorSteps = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]

		if(Loc_float32WLDifference > 0.098f)
 8004614:	4925      	ldr	r1, [pc, #148]	; (80046ac <HMOTOR_MoveWLSelectMotor+0x11c>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7fc fd62 	bl	80010e0 <__aeabi_fcmpgt>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d015      	beq.n	800464e <HMOTOR_MoveWLSelectMotor+0xbe>
		{
			Loc_uint32MotorSteps = (uint32)(Loc_float32WLDifference * (float32)glbl_uint32StepsPerNm);
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <HMOTOR_MoveWLSelectMotor+0x120>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fb9d 	bl	8000d68 <__aeabi_fmul>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fd85 	bl	8001140 <__aeabi_f2uiz>
 8004636:	4603      	mov	r3, r0
 8004638:	60bb      	str	r3, [r7, #8]
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32MotorSteps, HMOTORS_CLKWISE_DIRECTION, 10);
 800463a:	230a      	movs	r3, #10
 800463c:	2201      	movs	r2, #1
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	2002      	movs	r0, #2
 8004642:	f7ff fd33 	bl	80040ac <HMOTOR_Step>
			glbl_float32CurrentWL = Copy_float32NextWL;
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HMOTOR_MoveWLSelectMotor+0x118>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e01e      	b.n	800468c <HMOTOR_MoveWLSelectMotor+0xfc>
		}
		else if(Loc_float32WLDifference < -0.098f)
 800464e:	4919      	ldr	r1, [pc, #100]	; (80046b4 <HMOTOR_MoveWLSelectMotor+0x124>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7fc fd27 	bl	80010a4 <__aeabi_fcmplt>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HMOTOR_MoveWLSelectMotor+0xfc>
		{
			Loc_uint32MotorSteps = (uint32)((-Loc_float32WLDifference) * (float32)glbl_uint32StepsPerNm);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <HMOTOR_MoveWLSelectMotor+0x120>)
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fc fb7d 	bl	8000d68 <__aeabi_fmul>
 800466e:	4603      	mov	r3, r0
 8004670:	4618      	mov	r0, r3
 8004672:	f7fc fd65 	bl	8001140 <__aeabi_f2uiz>
 8004676:	4603      	mov	r3, r0
 8004678:	60bb      	str	r3, [r7, #8]
			HMOTOR_Step(HMOTOR_WL_SELECT, Loc_uint32MotorSteps, HMOTORS_CCLKWISE_DIRECTION, 10);
 800467a:	230a      	movs	r3, #10
 800467c:	2202      	movs	r2, #2
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	2002      	movs	r0, #2
 8004682:	f7ff fd13 	bl	80040ac <HMOTOR_Step>
			glbl_float32CurrentWL = Copy_float32NextWL;
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <HMOTOR_MoveWLSelectMotor+0x118>)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6013      	str	r3, [r2, #0]
		}
	}
	return E_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	bc23d70a 	.word	0xbc23d70a
 800469c:	3c23d70a 	.word	0x3c23d70a
 80046a0:	200006b4 	.word	0x200006b4
 80046a4:	20000334 	.word	0x20000334
 80046a8:	200006c0 	.word	0x200006c0
 80046ac:	3dc8b439 	.word	0x3dc8b439
 80046b0:	20000338 	.word	0x20000338
 80046b4:	bdc8b439 	.word	0xbdc8b439

080046b8 <HMOTOR_MoveMotors>:
Std_ReturnType HMOTOR_MoveMotors(float32 Copy_float32NextWL)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	if((Copy_float32NextWL > -0.001f) && (Copy_float32NextWL < 1100.1f))
 80046c0:	495a      	ldr	r1, [pc, #360]	; (800482c <HMOTOR_MoveMotors+0x174>)
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fd0c 	bl	80010e0 <__aeabi_fcmpgt>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a9 	beq.w	8004822 <HMOTOR_MoveMotors+0x16a>
 80046d0:	4957      	ldr	r1, [pc, #348]	; (8004830 <HMOTOR_MoveMotors+0x178>)
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fce6 	bl	80010a4 <__aeabi_fcmplt>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80a1 	beq.w	8004822 <HMOTOR_MoveMotors+0x16a>
	{
		if(Copy_float32NextWL < 326.0f)
 80046e0:	4954      	ldr	r1, [pc, #336]	; (8004834 <HMOTOR_MoveMotors+0x17c>)
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fcde 	bl	80010a4 <__aeabi_fcmplt>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HMOTOR_MoveMotors+0x3e>
		{
			HMOTOR_MoveLampMotor(HMOTOR_LAMP_UV);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7ff fd6a 	bl	80041c8 <HMOTOR_MoveLampMotor>
 80046f4:	e002      	b.n	80046fc <HMOTOR_MoveMotors+0x44>
		}
		else
		{
			HMOTOR_MoveLampMotor(HMOTOR_LAMP_VIS);
 80046f6:	2001      	movs	r0, #1
 80046f8:	f7ff fd66 	bl	80041c8 <HMOTOR_MoveLampMotor>
		}

		if((Copy_float32NextWL > -0.001f) && (Copy_float32NextWL < 326.0f))
 80046fc:	494b      	ldr	r1, [pc, #300]	; (800482c <HMOTOR_MoveMotors+0x174>)
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fcee 	bl	80010e0 <__aeabi_fcmpgt>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HMOTOR_MoveMotors+0x68>
 800470a:	494a      	ldr	r1, [pc, #296]	; (8004834 <HMOTOR_MoveMotors+0x17c>)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fc fcc9 	bl	80010a4 <__aeabi_fcmplt>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HMOTOR_MoveMotors+0x68>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_AIR);
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff fd87 	bl	800422c <HMOTOR_MoveFilterMotor>
 800471e:	e07c      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 325.9f) && (Copy_float32NextWL < 383.0f))
 8004720:	4945      	ldr	r1, [pc, #276]	; (8004838 <HMOTOR_MoveMotors+0x180>)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fcdc 	bl	80010e0 <__aeabi_fcmpgt>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HMOTOR_MoveMotors+0x8c>
 800472e:	4943      	ldr	r1, [pc, #268]	; (800483c <HMOTOR_MoveMotors+0x184>)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc fcb7 	bl	80010a4 <__aeabi_fcmplt>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HMOTOR_MoveMotors+0x8c>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_1);
 800473c:	2001      	movs	r0, #1
 800473e:	f7ff fd75 	bl	800422c <HMOTOR_MoveFilterMotor>
 8004742:	e06a      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 382.9f) && (Copy_float32NextWL < 420.0f))
 8004744:	493e      	ldr	r1, [pc, #248]	; (8004840 <HMOTOR_MoveMotors+0x188>)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fcca 	bl	80010e0 <__aeabi_fcmpgt>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HMOTOR_MoveMotors+0xb0>
 8004752:	493c      	ldr	r1, [pc, #240]	; (8004844 <HMOTOR_MoveMotors+0x18c>)
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc fca5 	bl	80010a4 <__aeabi_fcmplt>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HMOTOR_MoveMotors+0xb0>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_2);
 8004760:	2002      	movs	r0, #2
 8004762:	f7ff fd63 	bl	800422c <HMOTOR_MoveFilterMotor>
 8004766:	e058      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 419.9f) && (Copy_float32NextWL < 558.0f))
 8004768:	4937      	ldr	r1, [pc, #220]	; (8004848 <HMOTOR_MoveMotors+0x190>)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fcb8 	bl	80010e0 <__aeabi_fcmpgt>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HMOTOR_MoveMotors+0xd4>
 8004776:	4935      	ldr	r1, [pc, #212]	; (800484c <HMOTOR_MoveMotors+0x194>)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fc fc93 	bl	80010a4 <__aeabi_fcmplt>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HMOTOR_MoveMotors+0xd4>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_3);
 8004784:	2003      	movs	r0, #3
 8004786:	f7ff fd51 	bl	800422c <HMOTOR_MoveFilterMotor>
 800478a:	e046      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 557.9f) && (Copy_float32NextWL < 683.0f))
 800478c:	4930      	ldr	r1, [pc, #192]	; (8004850 <HMOTOR_MoveMotors+0x198>)
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fca6 	bl	80010e0 <__aeabi_fcmpgt>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HMOTOR_MoveMotors+0xf8>
 800479a:	492e      	ldr	r1, [pc, #184]	; (8004854 <HMOTOR_MoveMotors+0x19c>)
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fc81 	bl	80010a4 <__aeabi_fcmplt>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HMOTOR_MoveMotors+0xf8>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_4);
 80047a8:	2004      	movs	r0, #4
 80047aa:	f7ff fd3f 	bl	800422c <HMOTOR_MoveFilterMotor>
 80047ae:	e034      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 682.9f) && (Copy_float32NextWL < 794.0f))
 80047b0:	4929      	ldr	r1, [pc, #164]	; (8004858 <HMOTOR_MoveMotors+0x1a0>)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fc94 	bl	80010e0 <__aeabi_fcmpgt>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HMOTOR_MoveMotors+0x11c>
 80047be:	4927      	ldr	r1, [pc, #156]	; (800485c <HMOTOR_MoveMotors+0x1a4>)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fc fc6f 	bl	80010a4 <__aeabi_fcmplt>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HMOTOR_MoveMotors+0x11c>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_5);
 80047cc:	2005      	movs	r0, #5
 80047ce:	f7ff fd2d 	bl	800422c <HMOTOR_MoveFilterMotor>
 80047d2:	e022      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 793.9f) && (Copy_float32NextWL < 980.0f))
 80047d4:	4922      	ldr	r1, [pc, #136]	; (8004860 <HMOTOR_MoveMotors+0x1a8>)
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc fc82 	bl	80010e0 <__aeabi_fcmpgt>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HMOTOR_MoveMotors+0x140>
 80047e2:	4920      	ldr	r1, [pc, #128]	; (8004864 <HMOTOR_MoveMotors+0x1ac>)
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fc5d 	bl	80010a4 <__aeabi_fcmplt>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HMOTOR_MoveMotors+0x140>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_6);
 80047f0:	2006      	movs	r0, #6
 80047f2:	f7ff fd1b 	bl	800422c <HMOTOR_MoveFilterMotor>
 80047f6:	e010      	b.n	800481a <HMOTOR_MoveMotors+0x162>
		}
		else if((Copy_float32NextWL > 979.9f) && (Copy_float32NextWL < 1100.1f))
 80047f8:	491b      	ldr	r1, [pc, #108]	; (8004868 <HMOTOR_MoveMotors+0x1b0>)
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fc70 	bl	80010e0 <__aeabi_fcmpgt>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HMOTOR_MoveMotors+0x162>
 8004806:	490a      	ldr	r1, [pc, #40]	; (8004830 <HMOTOR_MoveMotors+0x178>)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fc fc4b 	bl	80010a4 <__aeabi_fcmplt>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HMOTOR_MoveMotors+0x162>
		{
			HMOTOR_MoveFilterMotor(HMOTOR_FILTER_7);
 8004814:	2007      	movs	r0, #7
 8004816:	f7ff fd09 	bl	800422c <HMOTOR_MoveFilterMotor>
		else
		{
			/*Do nothing*/
		}

		HMOTOR_MoveWLSelectMotor(Copy_float32NextWL);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff feb8 	bl	8004590 <HMOTOR_MoveWLSelectMotor>
	}
	else
	{
		return E_NOT_OK;
	}
}
 8004820:	e000      	b.n	8004824 <HMOTOR_MoveMotors+0x16c>
		return E_NOT_OK;
 8004822:	2301      	movs	r3, #1
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	ba83126f 	.word	0xba83126f
 8004830:	44898333 	.word	0x44898333
 8004834:	43a30000 	.word	0x43a30000
 8004838:	43a2f333 	.word	0x43a2f333
 800483c:	43bf8000 	.word	0x43bf8000
 8004840:	43bf7333 	.word	0x43bf7333
 8004844:	43d20000 	.word	0x43d20000
 8004848:	43d1f333 	.word	0x43d1f333
 800484c:	440b8000 	.word	0x440b8000
 8004850:	440b799a 	.word	0x440b799a
 8004854:	442ac000 	.word	0x442ac000
 8004858:	442ab99a 	.word	0x442ab99a
 800485c:	44468000 	.word	0x44468000
 8004860:	4446799a 	.word	0x4446799a
 8004864:	44750000 	.word	0x44750000
 8004868:	4474f99a 	.word	0x4474f99a

0800486c <HMOTOR_GoHome>:
Std_ReturnType HMOTOR_GoHome  (HMOTORS_Select_t Copy_uint32MotorSelect)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
	if(Copy_uint32MotorSelect > 0)
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d06c      	beq.n	8004956 <HMOTOR_GoHome+0xea>
	{
		uint8 Loc_uint8SensorReading = MGPIO_HIGH;
 800487c:	2301      	movs	r3, #1
 800487e:	72fb      	strb	r3, [r7, #11]
		
		MSTK_uint8Delay(100);
 8004880:	2064      	movs	r0, #100	; 0x64
 8004882:	f001 ff97 	bl	80067b4 <MSTK_uint8Delay>
		switch(Copy_uint32MotorSelect)
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <HMOTOR_GoHome+0x26>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d008      	beq.n	80048a2 <HMOTOR_GoHome+0x36>
 8004890:	e00f      	b.n	80048b2 <HMOTOR_GoHome+0x46>
		{
			case HMOTOR_FILTER_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTC, MGPIO_PIN13, &Loc_uint8SensorReading);
 8004892:	f107 030b 	add.w	r3, r7, #11
 8004896:	461a      	mov	r2, r3
 8004898:	210d      	movs	r1, #13
 800489a:	2002      	movs	r0, #2
 800489c:	f000 fd92 	bl	80053c4 <MGPIO_GetPinValue>
					break;
 80048a0:	e007      	b.n	80048b2 <HMOTOR_GoHome+0x46>
			}
			case HMOTOR_WL_SELECT:
			{
					MGPIO_GetPinValue(MGPIO_PORTA, MGPIO_PIN0, &Loc_uint8SensorReading);
 80048a2:	f107 030b 	add.w	r3, r7, #11
 80048a6:	461a      	mov	r2, r3
 80048a8:	2100      	movs	r1, #0
 80048aa:	2000      	movs	r0, #0
 80048ac:	f000 fd8a 	bl	80053c4 <MGPIO_GetPinValue>
					break;
 80048b0:	bf00      	nop
			}
		}
		if(Loc_uint8SensorReading != MGPIO_LOW)
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d063      	beq.n	8004980 <HMOTOR_GoHome+0x114>
		{
			uint32 Loc_uint8Index = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
			glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	4a33      	ldr	r2, [pc, #204]	; (800498c <HMOTOR_GoHome+0x120>)
 80048c0:	2100      	movs	r1, #0
 80048c2:	54d1      	strb	r1, [r2, r3]
			
			for(Loc_uint8Index = 0; Loc_uint8Index < 6000; Loc_uint8Index++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e00e      	b.n	80048e8 <HMOTOR_GoHome+0x7c>
			{
				if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	4a2f      	ldr	r2, [pc, #188]	; (800498c <HMOTOR_GoHome+0x120>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HMOTOR_GoHome+0x76>
				{
					HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 10);
 80048d6:	79f8      	ldrb	r0, [r7, #7]
 80048d8:	230a      	movs	r3, #10
 80048da:	2202      	movs	r2, #2
 80048dc:	2101      	movs	r1, #1
 80048de:	f7ff fbe5 	bl	80040ac <HMOTOR_Step>
			for(Loc_uint8Index = 0; Loc_uint8Index < 6000; Loc_uint8Index++)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f241 726f 	movw	r2, #5999	; 0x176f
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d9eb      	bls.n	80048ca <HMOTOR_GoHome+0x5e>
				}
			}

			HMOTOR_Step(Copy_uint32MotorSelect, 160, HMOTORS_CLKWISE_DIRECTION, 10);
 80048f2:	79f8      	ldrb	r0, [r7, #7]
 80048f4:	230a      	movs	r3, #10
 80048f6:	2201      	movs	r2, #1
 80048f8:	21a0      	movs	r1, #160	; 0xa0
 80048fa:	f7ff fbd7 	bl	80040ac <HMOTOR_Step>
			glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <HMOTOR_GoHome+0x120>)
 8004902:	2100      	movs	r1, #0
 8004904:	54d1      	strb	r1, [r2, r3]
			
			Loc_uint8Index = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
			for(Loc_uint8Index = 0; Loc_uint8Index < 6000; Loc_uint8Index++)
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e00e      	b.n	800492e <HMOTOR_GoHome+0xc2>
			{
				if((glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)]) == HMOTORS_MOTOR_NOT_AT_HOME)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <HMOTOR_GoHome+0x120>)
 8004914:	5cd3      	ldrb	r3, [r2, r3]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HMOTOR_GoHome+0xbc>
				{
					HMOTOR_Step(Copy_uint32MotorSelect, 1, HMOTORS_CCLKWISE_DIRECTION, 50);
 800491c:	79f8      	ldrb	r0, [r7, #7]
 800491e:	2332      	movs	r3, #50	; 0x32
 8004920:	2202      	movs	r2, #2
 8004922:	2101      	movs	r1, #1
 8004924:	f7ff fbc2 	bl	80040ac <HMOTOR_Step>
			for(Loc_uint8Index = 0; Loc_uint8Index < 6000; Loc_uint8Index++)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f241 726f 	movw	r2, #5999	; 0x176f
 8004934:	4293      	cmp	r3, r2
 8004936:	d9eb      	bls.n	8004910 <HMOTOR_GoHome+0xa4>
				}
			}
			if(Copy_uint32MotorSelect == HMOTOR_WL_SELECT)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d105      	bne.n	800494a <HMOTOR_GoHome+0xde>
			{
				HMOTOR_Step(Copy_uint32MotorSelect, 10, HMOTORS_CCLKWISE_DIRECTION, 50);
 800493e:	79f8      	ldrb	r0, [r7, #7]
 8004940:	2332      	movs	r3, #50	; 0x32
 8004942:	2202      	movs	r2, #2
 8004944:	210a      	movs	r1, #10
 8004946:	f7ff fbb1 	bl	80040ac <HMOTOR_Step>
			}
			glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4a10      	ldr	r2, [pc, #64]	; (8004990 <HMOTOR_GoHome+0x124>)
 800494e:	2100      	movs	r1, #0
 8004950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004954:	e014      	b.n	8004980 <HMOTOR_GoHome+0x114>
			//glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_NOT_AT_HOME;
		}
	}
	else if(Copy_uint32MotorSelect == HMOTOR_LAMP_SELECT)
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10f      	bne.n	800497c <HMOTOR_GoHome+0x110>
	{
		HMOTOR_Step(Copy_uint32MotorSelect, 100, HMOTORS_CLKWISE_DIRECTION, 10);
 800495c:	79f8      	ldrb	r0, [r7, #7]
 800495e:	230a      	movs	r3, #10
 8004960:	2201      	movs	r2, #1
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	f7ff fba2 	bl	80040ac <HMOTOR_Step>
		glbl_uint8HomingIndicator[(Copy_uint32MotorSelect)] = HMOTORS_MOTOR_AT_HOME;
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4a08      	ldr	r2, [pc, #32]	; (800498c <HMOTOR_GoHome+0x120>)
 800496c:	2101      	movs	r1, #1
 800496e:	54d1      	strb	r1, [r2, r3]
		glbl_uint32MotorSteps[Copy_uint32MotorSelect] = 0;
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HMOTOR_GoHome+0x124>)
 8004974:	2100      	movs	r1, #0
 8004976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800497a:	e001      	b.n	8004980 <HMOTOR_GoHome+0x114>
	}
	else
	{
		return E_NOT_OK;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HMOTOR_GoHome+0x116>
	}
	return E_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200006c4 	.word	0x200006c4
 8004990:	200006b4 	.word	0x200006b4

08004994 <HMOTOR_GetCurrentMotorSteps>:
Std_ReturnType HMOTOR_GetCurrentMotorSteps    (HMOTORS_Select_t Copy_uint32MotorSelect, uint32* P_uint32MotorSteps)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
	if(P_uint32MotorSteps != NULL_PTR)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HMOTOR_GetCurrentMotorSteps+0x28>
	{
		*P_uint32MotorSteps = glbl_uint32MotorSteps[Copy_uint32MotorSelect];
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HMOTOR_GetCurrentMotorSteps+0x38>)
 80049ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e001      	b.n	80049c0 <HMOTOR_GetCurrentMotorSteps+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	200006b4 	.word	0x200006b4

080049d0 <HMOTOR_GetCurrentWL>:
Std_ReturnType HMOTOR_GetCurrentWL            (uint32* P_uint32CurrentWL)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
	if(P_uint32CurrentWL != NULL_PTR)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HMOTOR_GetCurrentWL+0x28>
	{
		*P_uint32CurrentWL = glbl_float32CurrentWL;
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <HMOTOR_GetCurrentWL+0x38>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc fbaa 	bl	8001140 <__aeabi_f2uiz>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e001      	b.n	80049fc <HMOTOR_GetCurrentWL+0x2c>
	}
	else
	{
		Loc_uint8FuncStatus = E_NOT_OK;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_uint8FuncStatus;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200006c0 	.word	0x200006c0

08004a0c <HMOTOR_FilterHomeIndicator>:

void HMOTOR_FilterHomeIndicator(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[1] = HMOTORS_MOTOR_AT_HOME;
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HMOTOR_FilterHomeIndicator+0x14>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	705a      	strb	r2, [r3, #1]
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	200006c4 	.word	0x200006c4

08004a24 <HMOTOR_WLHomeIndicator>:
void HMOTOR_WLHomeIndicator(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
	glbl_uint8HomingIndicator[2] = HMOTORS_MOTOR_AT_HOME;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HMOTOR_WLHomeIndicator+0x14>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	709a      	strb	r2, [r3, #2]
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	200006c4 	.word	0x200006c4

08004a3c <MADC_Init>:

static volatile MADC_Typedef_t* (ADC[2]) = {ADC1, ADC2};
static volatile ptr_to_func_t (glbl_EOCCallbackFunc[2]) = {NULL_PTR};

Std_ReturnType MADC_Init                            (ADC_Select_t Copy_uint32ADCSelect)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
    
    ADC[Copy_uint32ADCSelect] -> CR1 &= ~((0b1111) << (MADC_CR1_DUALMOD_START_BIT));
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <MADC_Init+0x14c>)
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	494c      	ldr	r1, [pc, #304]	; (8004b88 <MADC_Init+0x14c>)
 8004a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a5c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004a60:	605a      	str	r2, [r3, #4]
    ADC[Copy_uint32ADCSelect] -> CR1 |= ((MADC_OPERATION_MODE) << (MADC_CR1_DUALMOD_START_BIT));
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a48      	ldr	r2, [pc, #288]	; (8004b88 <MADC_Init+0x14c>)
 8004a66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4946      	ldr	r1, [pc, #280]	; (8004b88 <MADC_Init+0x14c>)
 8004a6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a72:	6852      	ldr	r2, [r2, #4]
 8004a74:	605a      	str	r2, [r3, #4]

    #if MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
    #elif MADC_EOC_INTERRUPT_STATUS == MADC_EOC_INTERRUPT_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR1), MADC_CR1_EOCIE_BIT);
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a43      	ldr	r2, [pc, #268]	; (8004b88 <MADC_Init+0x14c>)
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	4941      	ldr	r1, [pc, #260]	; (8004b88 <MADC_Init+0x14c>)
 8004a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a88:	f022 0220 	bic.w	r2, r2, #32
 8004a8c:	605a      	str	r2, [r3, #4]
    #else
        #error "ADC End of Conversion Interrupt Status is not specified"
    #endif /*MADC_EOC_INTERRUPT_STATUS*/

    CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CONT_BIT);
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4a3d      	ldr	r2, [pc, #244]	; (8004b88 <MADC_Init+0x14c>)
 8004a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	493b      	ldr	r1, [pc, #236]	; (8004b88 <MADC_Init+0x14c>)
 8004a9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aa0:	f022 0202 	bic.w	r2, r2, #2
 8004aa4:	609a      	str	r2, [r3, #8]

    #if MADC_DATA_BITS_ADJUST_SELECT == MADC_RIGHT_ADJUST_DATA_BITS
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ALIGN_BIT);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4a37      	ldr	r2, [pc, #220]	; (8004b88 <MADC_Init+0x14c>)
 8004aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	4935      	ldr	r1, [pc, #212]	; (8004b88 <MADC_Init+0x14c>)
 8004ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abc:	609a      	str	r2, [r3, #8]
    #else
        #error "ADC Data Bits Adjustment is not specified"
    #endif /*MADC_DATA_BITS_ADJUST_SELECT*/

    #if MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_ENABLED
        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <MADC_Init+0x14c>)
 8004ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	492f      	ldr	r1, [pc, #188]	; (8004b88 <MADC_Init+0x14c>)
 8004acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ad0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ad4:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 &= ~((0b111) << (MADC_CR2_EXTSEL_START_BIT));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <MADC_Init+0x14c>)
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	4929      	ldr	r1, [pc, #164]	; (8004b88 <MADC_Init+0x14c>)
 8004ae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ae8:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8004aec:	609a      	str	r2, [r3, #8]
        ADC[Copy_uint32ADCSelect] -> CR2 |= ((MADC_EXTERNAL_TRIGGER_SELECT) << (MADC_CR2_EXTSEL_START_BIT));
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <MADC_Init+0x14c>)
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	4923      	ldr	r1, [pc, #140]	; (8004b88 <MADC_Init+0x14c>)
 8004afc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b00:	f442 2260 	orr.w	r2, r2, #917504	; 0xe0000
 8004b04:	609a      	str	r2, [r3, #8]
    #elif MADC_EXTERNAL_TRIGGER_STATUS == MADC_EXTERNAL_TRIGGER_DISABLED
        CLR_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_EXTTRIG_BIT);
    #else
    #endif /*MADC_EXTERNAL_TRIGGER_STATUS*/

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_ADON_BIT);
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <MADC_Init+0x14c>)
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	491d      	ldr	r1, [pc, #116]	; (8004b88 <MADC_Init+0x14c>)
 8004b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	609a      	str	r2, [r3, #8]

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT);
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <MADC_Init+0x14c>)
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4917      	ldr	r1, [pc, #92]	; (8004b88 <MADC_Init+0x14c>)
 8004b2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b30:	f042 0208 	orr.w	r2, r2, #8
 8004b34:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_RSTCAL_BIT));
 8004b36:	bf00      	nop
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <MADC_Init+0x14c>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f6      	bne.n	8004b38 <MADC_Init+0xfc>

    SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <MADC_Init+0x14c>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <MADC_Init+0x14c>)
 8004b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b5c:	f042 0204 	orr.w	r2, r2, #4
 8004b60:	609a      	str	r2, [r3, #8]
    while(GET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_CAL_BIT));
 8004b62:	bf00      	nop
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <MADC_Init+0x14c>)
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f6      	bne.n	8004b64 <MADC_Init+0x128>
    
    Loc_uint8FuncStatus = E_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	2000033c 	.word	0x2000033c

08004b8c <MADC_Conversion>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MADC_Conversion                      (ADC_Select_t Copy_uint32ADCSelect, ADC_Channel_t Copy_uint32ChannelSelect, uint16* P_uint16ConvertedData)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	603a      	str	r2, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
    if(P_uint16ConvertedData != NULL_PTR)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03e      	beq.n	8004c24 <MADC_Conversion+0x98>
    {
        ADC[Copy_uint32ADCSelect] -> SQR1 &= ~((0b1111) << 20);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <MADC_Conversion+0xa8>)
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	4920      	ldr	r1, [pc, #128]	; (8004c34 <MADC_Conversion+0xa8>)
 8004bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bb8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
        ADC[Copy_uint32ADCSelect] -> SQR3 &= ~((0b11111) << 0);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <MADC_Conversion+0xa8>)
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	491a      	ldr	r1, [pc, #104]	; (8004c34 <MADC_Conversion+0xa8>)
 8004bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bd0:	f022 021f 	bic.w	r2, r2, #31
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
        ADC[Copy_uint32ADCSelect] -> SQR3 = (Copy_uint32ChannelSelect) << 0;
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <MADC_Conversion+0xa8>)
 8004bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bde:	79ba      	ldrb	r2, [r7, #6]
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

        SET_BIT((ADC[Copy_uint32ADCSelect] -> CR2), MADC_CR2_SWSTART_BIT);
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <MADC_Conversion+0xa8>)
 8004be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	4911      	ldr	r1, [pc, #68]	; (8004c34 <MADC_Conversion+0xa8>)
 8004bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004bf8:	609a      	str	r2, [r3, #8]

        while(!(GET_BIT((ADC[Copy_uint32ADCSelect] -> SR), MADC_SR_EOC_BIT)));
 8004bfa:	bf00      	nop
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <MADC_Conversion+0xa8>)
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f6      	beq.n	8004bfc <MADC_Conversion+0x70>

        *P_uint16ConvertedData = ADC[Copy_uint32ADCSelect] -> DR;
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <MADC_Conversion+0xa8>)
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	801a      	strh	r2, [r3, #0]
        Loc_uint8FuncStatus = E_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	e001      	b.n	8004c28 <MADC_Conversion+0x9c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	2000033c 	.word	0x2000033c

08004c38 <ADC1_2_IRQHandler>:
    }
    return Loc_uint8FuncStatus;
}

void ADC1_2_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
    if(GET_BIT((ADC[0] -> SR), MADC_SR_EOC_BIT))
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <ADC1_2_IRQHandler+0x44>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <ADC1_2_IRQHandler+0x22>
    {
        if(glbl_EOCCallbackFunc[0] != NULL_PTR)
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <ADC1_2_IRQHandler+0x48>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <ADC1_2_IRQHandler+0x3e>
        {
            (glbl_EOCCallbackFunc[0])();
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <ADC1_2_IRQHandler+0x48>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
}
 8004c58:	e00d      	b.n	8004c76 <ADC1_2_IRQHandler+0x3e>
    else if(GET_BIT((ADC[1] -> SR), MADC_SR_EOC_BIT))
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <ADC1_2_IRQHandler+0x44>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <ADC1_2_IRQHandler+0x3e>
		if(glbl_EOCCallbackFunc[1] != NULL_PTR)
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <ADC1_2_IRQHandler+0x48>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <ADC1_2_IRQHandler+0x3e>
            (glbl_EOCCallbackFunc[1])();
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <ADC1_2_IRQHandler+0x48>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4798      	blx	r3
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000033c 	.word	0x2000033c
 8004c80:	200006c8 	.word	0x200006c8

08004c84 <MAFIO_SetEXTIPinConfigurations>:
#include "AFIO_Private.h"
#include "AFIO_Interface.h"
#include "AFIO_Config.h"

Std_ReturnType MAFIO_SetEXTIPinConfigurations(uint8 Copy_uint8EXTILine, uint8 Copy_uint8Port)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	460a      	mov	r2, r1
 8004c8e:	71fb      	strb	r3, [r7, #7]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8Port <= MAFIO_PORTG_PIN) && (Copy_uint8EXTILine <= MAFIO_EXTI15))
 8004c98:	79bb      	ldrb	r3, [r7, #6]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d82d      	bhi.n	8004cfa <MAFIO_SetEXTIPinConfigurations+0x76>
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d82a      	bhi.n	8004cfa <MAFIO_SetEXTIPinConfigurations+0x76>
    {
        uint8 Loc_uint8RegIndex = Copy_uint8EXTILine / 4;
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	73bb      	strb	r3, [r7, #14]
        uint8 Loc_uint8RegOffset = Copy_uint8EXTILine % 4;
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	737b      	strb	r3, [r7, #13]

        MAFIO ->EXTICR[Loc_uint8RegIndex] &= ~((0b1111) << Loc_uint8RegOffset * 4);
 8004cb2:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cbc:	7b7b      	ldrb	r3, [r7, #13]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	210f      	movs	r1, #15
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	4618      	mov	r0, r3
 8004cca:	4910      	ldr	r1, [pc, #64]	; (8004d0c <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004ccc:	7bbb      	ldrb	r3, [r7, #14]
 8004cce:	4002      	ands	r2, r0
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        MAFIO ->EXTICR[Loc_uint8RegIndex] |= ((Copy_uint8Port) << Loc_uint8RegOffset * 4);
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004cd8:	7bbb      	ldrb	r3, [r7, #14]
 8004cda:	3302      	adds	r3, #2
 8004cdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ce0:	79b9      	ldrb	r1, [r7, #6]
 8004ce2:	7b7b      	ldrb	r3, [r7, #13]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	4618      	mov	r0, r3
 8004cec:	4907      	ldr	r1, [pc, #28]	; (8004d0c <MAFIO_SetEXTIPinConfigurations+0x88>)
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	4302      	orrs	r2, r0
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
 8004cf8:	e001      	b.n	8004cfe <MAFIO_SetEXTIPinConfigurations+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000

08004d10 <MEXTI_EnableExternalInterrupt>:
#include "EXTI_Config.h"

static volatile ptr_to_EXTICallback glbl_PEXTICallbackFunctions[20] = {NULL_PTR};

Std_ReturnType MEXTI_EnableExternalInterrupt(uint8 Copy_uint8EXTILine, uint8 Copy_uint8EXTIMode)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	460a      	mov	r2, r1
 8004d1a:	71fb      	strb	r3, [r7, #7]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8EXTILine <= MEXTI_EXTI19) && (Copy_uint8EXTIMode <= MEXTI_INT_AT_BOTH_EDGES))
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	2b13      	cmp	r3, #19
 8004d28:	d84c      	bhi.n	8004dc4 <MEXTI_EnableExternalInterrupt+0xb4>
 8004d2a:	79bb      	ldrb	r3, [r7, #6]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d849      	bhi.n	8004dc4 <MEXTI_EnableExternalInterrupt+0xb4>
    {
        switch(Copy_uint8EXTIMode)
 8004d30:	79bb      	ldrb	r3, [r7, #6]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d020      	beq.n	8004d78 <MEXTI_EnableExternalInterrupt+0x68>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	dc34      	bgt.n	8004da4 <MEXTI_EnableExternalInterrupt+0x94>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <MEXTI_EnableExternalInterrupt+0x34>
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d00d      	beq.n	8004d5e <MEXTI_EnableExternalInterrupt+0x4e>
 8004d42:	e02f      	b.n	8004da4 <MEXTI_EnableExternalInterrupt+0x94>
        {
            case MEXTI_INT_AT_RISING_EDGE:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d50:	4611      	mov	r1, r2
 8004d52:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6093      	str	r3, [r2, #8]
                Loc_uint8FuncStatus = E_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
                break;
 8004d5c:	e025      	b.n	8004daa <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_FALLING_EDGE:
            {
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	79fa      	ldrb	r2, [r7, #7]
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
                break;
 8004d76:	e018      	b.n	8004daa <MEXTI_EnableExternalInterrupt+0x9a>
            }
            case MEXTI_INT_AT_BOTH_EDGES:
            {
                SET_BIT((MEXTI->RTSR), Copy_uint8EXTILine);
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	79fa      	ldrb	r2, [r7, #7]
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f202 	lsl.w	r2, r1, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6093      	str	r3, [r2, #8]
                SET_BIT((MEXTI->FTSR), Copy_uint8EXTILine);
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	79fa      	ldrb	r2, [r7, #7]
 8004d92:	2101      	movs	r1, #1
 8004d94:	fa01 f202 	lsl.w	r2, r1, r2
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	60d3      	str	r3, [r2, #12]
                Loc_uint8FuncStatus = E_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
                break;
 8004da8:	bf00      	nop
            }
        }

        SET_BIT((MEXTI -> IMR), Copy_uint8EXTILine);
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	79fa      	ldrb	r2, [r7, #7]
 8004db0:	2101      	movs	r1, #1
 8004db2:	fa01 f202 	lsl.w	r2, r1, r2
 8004db6:	4611      	mov	r1, r2
 8004db8:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <MEXTI_EnableExternalInterrupt+0xc4>)
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e001      	b.n	8004dc8 <MEXTI_EnableExternalInterrupt+0xb8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <MEXTI_SetCallbackFunction>:
        Loc_uint8FuncStatus = E_NOT_OK;
    }
    return Loc_uint8FuncStatus;
}
Std_ReturnType MEXTI_SetCallbackFunction(uint8 Copy_uint8EXTILine, ptr_to_EXTICallback P_EXTICallBackFunc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint8EXTILine <= MEXTI_EXTI19)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b13      	cmp	r3, #19
 8004dec:	d805      	bhi.n	8004dfa <MEXTI_SetCallbackFunction+0x22>
    {
        glbl_PEXTICallbackFunctions[Copy_uint8EXTILine] = P_EXTICallBackFunc;
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	4906      	ldr	r1, [pc, #24]	; (8004e0c <MEXTI_SetCallbackFunction+0x34>)
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004df8:	e001      	b.n	8004dfe <MEXTI_SetCallbackFunction+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	200006d0 	.word	0x200006d0

08004e10 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[0] != NULL_PTR)
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <EXTI0_IRQHandler+0x24>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <EXTI0_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[0])();
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <EXTI0_IRQHandler+0x24>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 0);
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <EXTI0_IRQHandler+0x28>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <EXTI0_IRQHandler+0x28>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6153      	str	r3, [r2, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200006d0 	.word	0x200006d0
 8004e38:	40010400 	.word	0x40010400

08004e3c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[1] != NULL_PTR)
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <EXTI1_IRQHandler+0x24>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <EXTI1_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[1])();
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <EXTI1_IRQHandler+0x24>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 1);
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <EXTI1_IRQHandler+0x28>)
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <EXTI1_IRQHandler+0x28>)
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	6153      	str	r3, [r2, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200006d0 	.word	0x200006d0
 8004e64:	40010400 	.word	0x40010400

08004e68 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[2] != NULL_PTR)
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <EXTI2_IRQHandler+0x24>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <EXTI2_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[2])();
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <EXTI2_IRQHandler+0x24>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 2);
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <EXTI2_IRQHandler+0x28>)
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <EXTI2_IRQHandler+0x28>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6153      	str	r3, [r2, #20]
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200006d0 	.word	0x200006d0
 8004e90:	40010400 	.word	0x40010400

08004e94 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[3] != NULL_PTR)
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <EXTI3_IRQHandler+0x24>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <EXTI3_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[3])();
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <EXTI3_IRQHandler+0x24>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 3);
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <EXTI3_IRQHandler+0x28>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <EXTI3_IRQHandler+0x28>)
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	6153      	str	r3, [r2, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200006d0 	.word	0x200006d0
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
    if(glbl_PEXTICallbackFunctions[4] != NULL_PTR)
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <EXTI4_IRQHandler+0x24>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <EXTI4_IRQHandler+0x12>
    {
        (glbl_PEXTICallbackFunctions[4])();
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <EXTI4_IRQHandler+0x24>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    SET_BIT((MEXTI -> PR), 4);
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <EXTI4_IRQHandler+0x28>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <EXTI4_IRQHandler+0x28>)
 8004ed8:	f043 0310 	orr.w	r3, r3, #16
 8004edc:	6153      	str	r3, [r2, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200006d0 	.word	0x200006d0
 8004ee8:	40010400 	.word	0x40010400

08004eec <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 5))
 8004ef0:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <EXTI9_5_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[5] != NULL_PTR)
 8004efc:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <EXTI9_5_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[5])();
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 5);
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	4a2b      	ldr	r2, [pc, #172]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
}
 8004f16:	e04e      	b.n	8004fb6 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 6))
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <EXTI9_5_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[6] != NULL_PTR)
 8004f24:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <EXTI9_5_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[6])();
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 6);
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3c:	6153      	str	r3, [r2, #20]
}
 8004f3e:	e03a      	b.n	8004fb6 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 7))
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <EXTI9_5_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[7] != NULL_PTR)
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <EXTI9_5_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[7])();
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 7);
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	6153      	str	r3, [r2, #20]
}
 8004f66:	e026      	b.n	8004fb6 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 8))
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <EXTI9_5_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[8] != NULL_PTR)
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <EXTI9_5_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[8])();
 8004f7c:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 8);
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6153      	str	r3, [r2, #20]
}
 8004f8e:	e012      	b.n	8004fb6 <EXTI9_5_IRQHandler+0xca>
    else if(GET_BIT((MEXTI->PR), 9))
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <EXTI9_5_IRQHandler+0xca>
        if(glbl_PEXTICallbackFunctions[9] != NULL_PTR)
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <EXTI9_5_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[9])();
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <EXTI9_5_IRQHandler+0xd4>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 9);
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <EXTI9_5_IRQHandler+0xd0>)
 8004fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb4:	6153      	str	r3, [r2, #20]
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	200006d0 	.word	0x200006d0

08004fc4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
    if(GET_BIT((MEXTI->PR), 10))
 8004fc8:	4b3c      	ldr	r3, [pc, #240]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <EXTI15_10_IRQHandler+0x2c>
    {
        if(glbl_PEXTICallbackFunctions[10] != NULL_PTR)
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <EXTI15_10_IRQHandler+0x1e>
        {
            (glbl_PEXTICallbackFunctions[10])();
 8004fdc:	4b38      	ldr	r3, [pc, #224]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	4798      	blx	r3
        }
        else
        {
            /*Do nothing*/
        }
        SET_BIT((MEXTI -> PR), 10);
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4a35      	ldr	r2, [pc, #212]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8004fe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fec:	6153      	str	r3, [r2, #20]
    }
    else
    {
        /*Do nothing*/
    }
 8004fee:	e062      	b.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 11))
 8004ff0:	4b32      	ldr	r3, [pc, #200]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <EXTI15_10_IRQHandler+0x54>
        if(glbl_PEXTICallbackFunctions[11] != NULL_PTR)
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <EXTI15_10_IRQHandler+0x46>
            (glbl_PEXTICallbackFunctions[11])();
 8005004:	4b2e      	ldr	r3, [pc, #184]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 11);
 800500a:	4b2c      	ldr	r3, [pc, #176]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005014:	6153      	str	r3, [r2, #20]
 8005016:	e04e      	b.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 12))
 8005018:	4b28      	ldr	r3, [pc, #160]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <EXTI15_10_IRQHandler+0x7c>
        if(glbl_PEXTICallbackFunctions[12] != NULL_PTR)
 8005024:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <EXTI15_10_IRQHandler+0x6e>
            (glbl_PEXTICallbackFunctions[12])();
 800502c:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 12);
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4a21      	ldr	r2, [pc, #132]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800503c:	6153      	str	r3, [r2, #20]
 800503e:	e03a      	b.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 13))
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <EXTI15_10_IRQHandler+0xa4>
        if(glbl_PEXTICallbackFunctions[13] != NULL_PTR)
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <EXTI15_10_IRQHandler+0x96>
            (glbl_PEXTICallbackFunctions[13])();
 8005054:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 13);
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4a17      	ldr	r2, [pc, #92]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005064:	6153      	str	r3, [r2, #20]
 8005066:	e026      	b.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 14))
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <EXTI15_10_IRQHandler+0xcc>
        if(glbl_PEXTICallbackFunctions[14] != NULL_PTR)
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <EXTI15_10_IRQHandler+0xbe>
            (glbl_PEXTICallbackFunctions[14])();
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 14);
 8005082:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800508c:	6153      	str	r3, [r2, #20]
 800508e:	e012      	b.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
    else if(GET_BIT((MEXTI->PR), 15))
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00c      	beq.n	80050b6 <EXTI15_10_IRQHandler+0xf2>
        if(glbl_PEXTICallbackFunctions[15] != NULL_PTR)
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <EXTI15_10_IRQHandler+0xe6>
            (glbl_PEXTICallbackFunctions[15])();
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <EXTI15_10_IRQHandler+0xfc>)
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	4798      	blx	r3
        SET_BIT((MEXTI -> PR), 15);
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4a03      	ldr	r2, [pc, #12]	; (80050bc <EXTI15_10_IRQHandler+0xf8>)
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	6153      	str	r3, [r2, #20]
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40010400 	.word	0x40010400
 80050c0:	200006d0 	.word	0x200006d0

080050c4 <MGPIO_SetPinMode>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Mode has been set successfully
 * @retval E_NOT_OK: Pin mode has not been set 
 */
Std_ReturnType MGPIO_SetPinMode(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinMode)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
 80050ce:	460b      	mov	r3, r1
 80050d0:	71bb      	strb	r3, [r7, #6]
 80050d2:	4613      	mov	r3, r2
 80050d4:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]

    switch(Copy_uint8PortID)
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f000 8081 	beq.w	80051e4 <MGPIO_SetPinMode+0x120>
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	f300 80ba 	bgt.w	800525c <MGPIO_SetPinMode+0x198>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <MGPIO_SetPinMode+0x2e>
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d03d      	beq.n	800516c <MGPIO_SetPinMode+0xa8>
 80050f0:	e0b4      	b.n	800525c <MGPIO_SetPinMode+0x198>
    {
        case MGPIO_PORTA:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 80050f2:	79bb      	ldrb	r3, [r7, #6]
 80050f4:	2b07      	cmp	r3, #7
 80050f6:	d819      	bhi.n	800512c <MGPIO_SetPinMode+0x68>
            {
                MGPIOA_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 80050f8:	4b5f      	ldr	r3, [pc, #380]	; (8005278 <MGPIO_SetPinMode+0x1b4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	79ba      	ldrb	r2, [r7, #6]
 80050fe:	0092      	lsls	r2, r2, #2
 8005100:	210f      	movs	r1, #15
 8005102:	fa01 f202 	lsl.w	r2, r1, r2
 8005106:	43d2      	mvns	r2, r2
 8005108:	4611      	mov	r1, r2
 800510a:	4a5b      	ldr	r2, [pc, #364]	; (8005278 <MGPIO_SetPinMode+0x1b4>)
 800510c:	400b      	ands	r3, r1
 800510e:	6013      	str	r3, [r2, #0]
                MGPIOA_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <MGPIO_SetPinMode+0x1b4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	7979      	ldrb	r1, [r7, #5]
 8005116:	79ba      	ldrb	r2, [r7, #6]
 8005118:	0092      	lsls	r2, r2, #2
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	4611      	mov	r1, r2
 8005120:	4a55      	ldr	r2, [pc, #340]	; (8005278 <MGPIO_SetPinMode+0x1b4>)
 8005122:	430b      	orrs	r3, r1
 8005124:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 800512a:	e09a      	b.n	8005262 <MGPIO_SetPinMode+0x19e>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 800512c:	79bb      	ldrb	r3, [r7, #6]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	f200 8097 	bhi.w	8005262 <MGPIO_SetPinMode+0x19e>
                MGPIOA_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005134:	4b51      	ldr	r3, [pc, #324]	; (800527c <MGPIO_SetPinMode+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	79ba      	ldrb	r2, [r7, #6]
 800513a:	3a08      	subs	r2, #8
 800513c:	0092      	lsls	r2, r2, #2
 800513e:	210f      	movs	r1, #15
 8005140:	fa01 f202 	lsl.w	r2, r1, r2
 8005144:	43d2      	mvns	r2, r2
 8005146:	4611      	mov	r1, r2
 8005148:	4a4c      	ldr	r2, [pc, #304]	; (800527c <MGPIO_SetPinMode+0x1b8>)
 800514a:	400b      	ands	r3, r1
 800514c:	6013      	str	r3, [r2, #0]
                MGPIOA_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800514e:	4b4b      	ldr	r3, [pc, #300]	; (800527c <MGPIO_SetPinMode+0x1b8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	7979      	ldrb	r1, [r7, #5]
 8005154:	79ba      	ldrb	r2, [r7, #6]
 8005156:	3a08      	subs	r2, #8
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	fa01 f202 	lsl.w	r2, r1, r2
 800515e:	4611      	mov	r1, r2
 8005160:	4a46      	ldr	r2, [pc, #280]	; (800527c <MGPIO_SetPinMode+0x1b8>)
 8005162:	430b      	orrs	r3, r1
 8005164:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
            break;
 800516a:	e07a      	b.n	8005262 <MGPIO_SetPinMode+0x19e>
        }
        case MGPIO_PORTB:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 800516c:	79bb      	ldrb	r3, [r7, #6]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d819      	bhi.n	80051a6 <MGPIO_SetPinMode+0xe2>
            {
                MGPIOB_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 8005172:	4b43      	ldr	r3, [pc, #268]	; (8005280 <MGPIO_SetPinMode+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	79ba      	ldrb	r2, [r7, #6]
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	210f      	movs	r1, #15
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	43d2      	mvns	r2, r2
 8005182:	4611      	mov	r1, r2
 8005184:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <MGPIO_SetPinMode+0x1bc>)
 8005186:	400b      	ands	r3, r1
 8005188:	6013      	str	r3, [r2, #0]
                MGPIOB_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 800518a:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <MGPIO_SetPinMode+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	7979      	ldrb	r1, [r7, #5]
 8005190:	79ba      	ldrb	r2, [r7, #6]
 8005192:	0092      	lsls	r2, r2, #2
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	4611      	mov	r1, r2
 800519a:	4a39      	ldr	r2, [pc, #228]	; (8005280 <MGPIO_SetPinMode+0x1bc>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
            {
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 80051a4:	e05f      	b.n	8005266 <MGPIO_SetPinMode+0x1a2>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 80051a6:	79bb      	ldrb	r3, [r7, #6]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d85c      	bhi.n	8005266 <MGPIO_SetPinMode+0x1a2>
                MGPIOB_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 80051ac:	4b35      	ldr	r3, [pc, #212]	; (8005284 <MGPIO_SetPinMode+0x1c0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	79ba      	ldrb	r2, [r7, #6]
 80051b2:	3a08      	subs	r2, #8
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	210f      	movs	r1, #15
 80051b8:	fa01 f202 	lsl.w	r2, r1, r2
 80051bc:	43d2      	mvns	r2, r2
 80051be:	4611      	mov	r1, r2
 80051c0:	4a30      	ldr	r2, [pc, #192]	; (8005284 <MGPIO_SetPinMode+0x1c0>)
 80051c2:	400b      	ands	r3, r1
 80051c4:	6013      	str	r3, [r2, #0]
                MGPIOB_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <MGPIO_SetPinMode+0x1c0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	7979      	ldrb	r1, [r7, #5]
 80051cc:	79ba      	ldrb	r2, [r7, #6]
 80051ce:	3a08      	subs	r2, #8
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	fa01 f202 	lsl.w	r2, r1, r2
 80051d6:	4611      	mov	r1, r2
 80051d8:	4a2a      	ldr	r2, [pc, #168]	; (8005284 <MGPIO_SetPinMode+0x1c0>)
 80051da:	430b      	orrs	r3, r1
 80051dc:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
            break;
 80051e2:	e040      	b.n	8005266 <MGPIO_SetPinMode+0x1a2>
        }
        case MGPIO_PORTC:
        {
            if(Copy_uint8PinID <= MGPIO_PIN7)
 80051e4:	79bb      	ldrb	r3, [r7, #6]
 80051e6:	2b07      	cmp	r3, #7
 80051e8:	d819      	bhi.n	800521e <MGPIO_SetPinMode+0x15a>
            {
                MGPIOC_CRL &= ~((0b1111) << (4 * Copy_uint8PinID));
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <MGPIO_SetPinMode+0x1c4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	79ba      	ldrb	r2, [r7, #6]
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	210f      	movs	r1, #15
 80051f4:	fa01 f202 	lsl.w	r2, r1, r2
 80051f8:	43d2      	mvns	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <MGPIO_SetPinMode+0x1c4>)
 80051fe:	400b      	ands	r3, r1
 8005200:	6013      	str	r3, [r2, #0]
                MGPIOC_CRL |= ((Copy_uint8PinMode) << (4 * Copy_uint8PinID));
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <MGPIO_SetPinMode+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	7979      	ldrb	r1, [r7, #5]
 8005208:	79ba      	ldrb	r2, [r7, #6]
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	fa01 f202 	lsl.w	r2, r1, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <MGPIO_SetPinMode+0x1c4>)
 8005214:	430b      	orrs	r3, r1
 8005216:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]

                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
                Loc_uint8FuncStatus = E_OK;
            }
            break;
 800521c:	e025      	b.n	800526a <MGPIO_SetPinMode+0x1a6>
            else if(Copy_uint8PinID <= MGPIO_PIN15)
 800521e:	79bb      	ldrb	r3, [r7, #6]
 8005220:	2b0f      	cmp	r3, #15
 8005222:	d822      	bhi.n	800526a <MGPIO_SetPinMode+0x1a6>
                MGPIOC_CRH &= ~((0b1111) << (4 * (Copy_uint8PinID - 8)));
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <MGPIO_SetPinMode+0x1c8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	79ba      	ldrb	r2, [r7, #6]
 800522a:	3a08      	subs	r2, #8
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	210f      	movs	r1, #15
 8005230:	fa01 f202 	lsl.w	r2, r1, r2
 8005234:	43d2      	mvns	r2, r2
 8005236:	4611      	mov	r1, r2
 8005238:	4a14      	ldr	r2, [pc, #80]	; (800528c <MGPIO_SetPinMode+0x1c8>)
 800523a:	400b      	ands	r3, r1
 800523c:	6013      	str	r3, [r2, #0]
                MGPIOC_CRH |= ((Copy_uint8PinMode) << (4 * (Copy_uint8PinID - 8)));
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <MGPIO_SetPinMode+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	7979      	ldrb	r1, [r7, #5]
 8005244:	79ba      	ldrb	r2, [r7, #6]
 8005246:	3a08      	subs	r2, #8
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	fa01 f202 	lsl.w	r2, r1, r2
 800524e:	4611      	mov	r1, r2
 8005250:	4a0e      	ldr	r2, [pc, #56]	; (800528c <MGPIO_SetPinMode+0x1c8>)
 8005252:	430b      	orrs	r3, r1
 8005254:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
            break;
 800525a:	e006      	b.n	800526a <MGPIO_SetPinMode+0x1a6>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
            break;
 8005260:	e004      	b.n	800526c <MGPIO_SetPinMode+0x1a8>
            break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <MGPIO_SetPinMode+0x1a8>
            break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <MGPIO_SetPinMode+0x1a8>
            break;
 800526a:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	40010800 	.word	0x40010800
 800527c:	40010804 	.word	0x40010804
 8005280:	40010c00 	.word	0x40010c00
 8005284:	40010c04 	.word	0x40010c04
 8005288:	40011000 	.word	0x40011000
 800528c:	40011004 	.word	0x40011004

08005290 <MGPIO_SetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been set successfully
 * @retval E_NOT_OK: Pin Value has not been set
 */
Std_ReturnType MGPIO_SetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8PinValue)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
 800529a:	460b      	mov	r3, r1
 800529c:	71bb      	strb	r3, [r7, #6]
 800529e:	4613      	mov	r3, r2
 80052a0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80052a2:	2301      	movs	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d87c      	bhi.n	80053a6 <MGPIO_SetPinValue+0x116>
 80052ac:	79bb      	ldrb	r3, [r7, #6]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d879      	bhi.n	80053a6 <MGPIO_SetPinValue+0x116>
    {
        switch (Copy_uint8PortID)
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d04e      	beq.n	8005356 <MGPIO_SetPinValue+0xc6>
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	dc70      	bgt.n	800539e <MGPIO_SetPinValue+0x10e>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <MGPIO_SetPinValue+0x36>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d024      	beq.n	800530e <MGPIO_SetPinValue+0x7e>
 80052c4:	e06b      	b.n	800539e <MGPIO_SetPinValue+0x10e>
        {
            case MGPIO_PORTA:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 80052c6:	797b      	ldrb	r3, [r7, #5]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10c      	bne.n	80052e6 <MGPIO_SetPinValue+0x56>
                {
                    SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80052cc:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <MGPIO_SetPinValue+0x128>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	79ba      	ldrb	r2, [r7, #6]
 80052d2:	2101      	movs	r1, #1
 80052d4:	fa01 f202 	lsl.w	r2, r1, r2
 80052d8:	4611      	mov	r1, r2
 80052da:	4a37      	ldr	r2, [pc, #220]	; (80053b8 <MGPIO_SetPinValue+0x128>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 80052e4:	e05e      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 80052e6:	797b      	ldrb	r3, [r7, #5]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <MGPIO_SetPinValue+0x78>
                    CLR_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <MGPIO_SetPinValue+0x128>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	79ba      	ldrb	r2, [r7, #6]
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f202 	lsl.w	r2, r1, r2
 80052f8:	43d2      	mvns	r2, r2
 80052fa:	4611      	mov	r1, r2
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <MGPIO_SetPinValue+0x128>)
 80052fe:	400b      	ands	r3, r1
 8005300:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
                break;
 8005306:	e04d      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
                break;
 800530c:	e04a      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTB:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 800530e:	797b      	ldrb	r3, [r7, #5]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10c      	bne.n	800532e <MGPIO_SetPinValue+0x9e>
                {
                    SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8005314:	4b29      	ldr	r3, [pc, #164]	; (80053bc <MGPIO_SetPinValue+0x12c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	79ba      	ldrb	r2, [r7, #6]
 800531a:	2101      	movs	r1, #1
 800531c:	fa01 f202 	lsl.w	r2, r1, r2
 8005320:	4611      	mov	r1, r2
 8005322:	4a26      	ldr	r2, [pc, #152]	; (80053bc <MGPIO_SetPinValue+0x12c>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 800532c:	e03a      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 800532e:	797b      	ldrb	r3, [r7, #5]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <MGPIO_SetPinValue+0xc0>
                    CLR_BIT(MGPIOB_ODR, Copy_uint8PinID);
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <MGPIO_SetPinValue+0x12c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	79ba      	ldrb	r2, [r7, #6]
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	43d2      	mvns	r2, r2
 8005342:	4611      	mov	r1, r2
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <MGPIO_SetPinValue+0x12c>)
 8005346:	400b      	ands	r3, r1
 8005348:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]
                break;
 800534e:	e029      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
                break;
 8005354:	e026      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
            }
            case MGPIO_PORTC:
            {
                if(Copy_uint8PinValue == MGPIO_HIGH)
 8005356:	797b      	ldrb	r3, [r7, #5]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10c      	bne.n	8005376 <MGPIO_SetPinValue+0xe6>
                {
                    SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 800535c:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <MGPIO_SetPinValue+0x130>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	79ba      	ldrb	r2, [r7, #6]
 8005362:	2101      	movs	r1, #1
 8005364:	fa01 f202 	lsl.w	r2, r1, r2
 8005368:	4611      	mov	r1, r2
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <MGPIO_SetPinValue+0x130>)
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
                }
                else
                {
                    Loc_uint8FuncStatus = E_NOT_OK;
                }
                break;
 8005374:	e016      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                else if(Copy_uint8PinValue == MGPIO_LOW)
 8005376:	797b      	ldrb	r3, [r7, #5]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <MGPIO_SetPinValue+0x108>
                    CLR_BIT(MGPIOC_ODR, Copy_uint8PinID);
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <MGPIO_SetPinValue+0x130>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	79ba      	ldrb	r2, [r7, #6]
 8005382:	2101      	movs	r1, #1
 8005384:	fa01 f202 	lsl.w	r2, r1, r2
 8005388:	43d2      	mvns	r2, r2
 800538a:	4611      	mov	r1, r2
 800538c:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <MGPIO_SetPinValue+0x130>)
 800538e:	400b      	ands	r3, r1
 8005390:	6013      	str	r3, [r2, #0]
                    Loc_uint8FuncStatus = E_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
                break;
 8005396:	e005      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
                    Loc_uint8FuncStatus = E_NOT_OK;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
                break;
 800539c:	e002      	b.n	80053a4 <MGPIO_SetPinValue+0x114>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
                break;
 80053a2:	bf00      	nop
        switch (Copy_uint8PortID)
 80053a4:	e001      	b.n	80053aa <MGPIO_SetPinValue+0x11a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80053a6:	2301      	movs	r3, #1
 80053a8:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	4001080c 	.word	0x4001080c
 80053bc:	40010c0c 	.word	0x40010c0c
 80053c0:	4001100c 	.word	0x4001100c

080053c4 <MGPIO_GetPinValue>:
 * @return Std_ReturnType
 * @retval E_OK: Pin Value has been read successfully
 * @retval E_NOT_OK: Pin Value has not been read
 */
Std_ReturnType MGPIO_GetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8* P_uint8PinValue)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	603a      	str	r2, [r7, #0]
 80053ce:	71fb      	strb	r3, [r7, #7]
 80053d0:	460b      	mov	r3, r1
 80053d2:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]

    if((P_uint8PinValue != NULL_PTR) && (Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d03d      	beq.n	800545a <MGPIO_GetPinValue+0x96>
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d83a      	bhi.n	800545a <MGPIO_GetPinValue+0x96>
 80053e4:	79bb      	ldrb	r3, [r7, #6]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d837      	bhi.n	800545a <MGPIO_GetPinValue+0x96>
    {
        switch(Copy_uint8PortID)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d022      	beq.n	8005436 <MGPIO_GetPinValue+0x72>
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	dc2e      	bgt.n	8005452 <MGPIO_GetPinValue+0x8e>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <MGPIO_GetPinValue+0x3a>
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d00e      	beq.n	800541a <MGPIO_GetPinValue+0x56>
 80053fc:	e029      	b.n	8005452 <MGPIO_GetPinValue+0x8e>
        {
            case MGPIO_PORTA:
            {
                *P_uint8PinValue = GET_BIT(MGPIOA_IDR, Copy_uint8PinID);
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <MGPIO_GetPinValue+0xa8>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	79bb      	ldrb	r3, [r7, #6]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]
                break;
 8005418:	e01e      	b.n	8005458 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTB:
            {
                *P_uint8PinValue = GET_BIT(MGPIOB_IDR, Copy_uint8PinID);
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <MGPIO_GetPinValue+0xac>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	79bb      	ldrb	r3, [r7, #6]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
                break;
 8005434:	e010      	b.n	8005458 <MGPIO_GetPinValue+0x94>
            }
            case MGPIO_PORTC:
            {
                *P_uint8PinValue = GET_BIT(MGPIOC_IDR, Copy_uint8PinID);
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <MGPIO_GetPinValue+0xb0>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	79bb      	ldrb	r3, [r7, #6]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	701a      	strb	r2, [r3, #0]
                Loc_uint8FuncStatus = E_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
                break;
 8005450:	e002      	b.n	8005458 <MGPIO_GetPinValue+0x94>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
                break;
 8005456:	bf00      	nop
        switch(Copy_uint8PortID)
 8005458:	e001      	b.n	800545e <MGPIO_GetPinValue+0x9a>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40010808 	.word	0x40010808
 8005470:	40010c08 	.word	0x40010c08
 8005474:	40011008 	.word	0x40011008

08005478 <MGPIO_ActivatePullUp>:
 * @return Std_ReturnType
 * @retval E_OK: Pull-up has been activated successfully
 * @retval E_NOT_OK: Pull-up has not been activated 
 */
Std_ReturnType MGPIO_ActivatePullUp(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	460a      	mov	r2, r1
 8005482:	71fb      	strb	r3, [r7, #7]
 8005484:	4613      	mov	r3, r2
 8005486:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
    if((Copy_uint8PortID <= MGPIO_PORTC) && (Copy_uint8PinID <= MGPIO_PIN15))
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d837      	bhi.n	8005502 <MGPIO_ActivatePullUp+0x8a>
 8005492:	79bb      	ldrb	r3, [r7, #6]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d834      	bhi.n	8005502 <MGPIO_ActivatePullUp+0x8a>
    {
        switch(Copy_uint8PortID)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d020      	beq.n	80054e0 <MGPIO_ActivatePullUp+0x68>
 800549e:	2b02      	cmp	r3, #2
 80054a0:	dc2b      	bgt.n	80054fa <MGPIO_ActivatePullUp+0x82>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <MGPIO_ActivatePullUp+0x34>
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d00d      	beq.n	80054c6 <MGPIO_ActivatePullUp+0x4e>
 80054aa:	e026      	b.n	80054fa <MGPIO_ActivatePullUp+0x82>
        {
            case MGPIO_PORTA:
            {
                SET_BIT(MGPIOA_ODR, Copy_uint8PinID);
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <MGPIO_ActivatePullUp+0x9c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	79ba      	ldrb	r2, [r7, #6]
 80054b2:	2101      	movs	r1, #1
 80054b4:	fa01 f202 	lsl.w	r2, r1, r2
 80054b8:	4611      	mov	r1, r2
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <MGPIO_ActivatePullUp+0x9c>)
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
                break;
 80054c4:	e01c      	b.n	8005500 <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTB:
            {
                SET_BIT(MGPIOB_ODR, Copy_uint8PinID);
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <MGPIO_ActivatePullUp+0xa0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	79ba      	ldrb	r2, [r7, #6]
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	4611      	mov	r1, r2
 80054d4:	4a10      	ldr	r2, [pc, #64]	; (8005518 <MGPIO_ActivatePullUp+0xa0>)
 80054d6:	430b      	orrs	r3, r1
 80054d8:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
                break;
 80054de:	e00f      	b.n	8005500 <MGPIO_ActivatePullUp+0x88>
            }
            case MGPIO_PORTC:
            {
                SET_BIT(MGPIOC_ODR, Copy_uint8PinID);
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <MGPIO_ActivatePullUp+0xa4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	79ba      	ldrb	r2, [r7, #6]
 80054e6:	2101      	movs	r1, #1
 80054e8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ec:	4611      	mov	r1, r2
 80054ee:	4a0b      	ldr	r2, [pc, #44]	; (800551c <MGPIO_ActivatePullUp+0xa4>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6013      	str	r3, [r2, #0]
                Loc_uint8FuncStatus = E_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
                break;
 80054f8:	e002      	b.n	8005500 <MGPIO_ActivatePullUp+0x88>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
                break;
 80054fe:	bf00      	nop
        switch(Copy_uint8PortID)
 8005500:	e001      	b.n	8005506 <MGPIO_ActivatePullUp+0x8e>
            }
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005506:	7bfb      	ldrb	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	4001080c 	.word	0x4001080c
 8005518:	40010c0c 	.word	0x40010c0c
 800551c:	4001100c 	.word	0x4001100c

08005520 <MGPTMR_GetPreloadValue>:
 * @return Std_ReturnType
 * @retval E_OK:                                        Preload value successfully calculated
 * @retval E_NOT_OK:                                    Preload value not calculated 
 */
Std_ReturnType MGPTMR_GetPreloadValue                   (uint32 Copy_uint32PeriodInMs, uint16* P_uint16PreloadValue)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
    if(P_uint16PreloadValue != NULL_PTR)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <MGPTMR_GetPreloadValue+0x3c>
    {
        uint32 Loc_uint32TempPreload = (Copy_uint32PeriodInMs * (MGPTMR_CLK_FREQ / (MGPTMR_CLK_PRESCALER * 1000))) - 1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	3b01      	subs	r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
        if(Loc_uint32TempPreload <= 0xFFFF)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005542:	d204      	bcs.n	800554e <MGPTMR_GetPreloadValue+0x2e>
        {
            *P_uint16PreloadValue = Loc_uint32TempPreload;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	b29a      	uxth	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e003      	b.n	8005556 <MGPTMR_GetPreloadValue+0x36>
        }
        else
        {
            *P_uint16PreloadValue = 0xFFFF;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005554:	801a      	strh	r2, [r3, #0]
        }
        Loc_uint8FuncStatus = E_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
 800555a:	e001      	b.n	8005560 <MGPTMR_GetPreloadValue+0x40>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <MGPTMR_Init>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Initialized.
 * @retval E_NOT_OK:                Timer not initialized.
 */
Std_ReturnType MGPTMR_Init                              (GPTMR_Select_t Copy_uint32TimerSelect)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	71fb      	strb	r3, [r7, #7]
    #if MGPTMR_UEV_STATUS == MGPTMR_UEV_ENABLED

        //Enable update event by clearing UDIS "Update Disable" bit
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_UDIS_BIT);
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	4a3b      	ldr	r2, [pc, #236]	; (8005668 <MGPTMR_Init+0xfc>)
 800557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	4939      	ldr	r1, [pc, #228]	; (8005668 <MGPTMR_Init+0xfc>)
 8005584:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005588:	f022 0202 	bic.w	r2, r2, #2
 800558c:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_UEV_SOURCE == MGPTMR_UEV_SOURCE_ALL

            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_URS_BIT);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	4a35      	ldr	r2, [pc, #212]	; (8005668 <MGPTMR_Init+0xfc>)
 8005592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	4933      	ldr	r1, [pc, #204]	; (8005668 <MGPTMR_Init+0xfc>)
 800559c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055a0:	f022 0204 	bic.w	r2, r2, #4
 80055a4:	601a      	str	r2, [r3, #0]
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
    
    #elif MGPTMR_ONE_PULSE_MODE_STATUS == MGPTMR_ONE_PULSE_MODE_DISABLED
    
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_OPM_BIT);
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	4a2f      	ldr	r2, [pc, #188]	; (8005668 <MGPTMR_Init+0xfc>)
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	492d      	ldr	r1, [pc, #180]	; (8005668 <MGPTMR_Init+0xfc>)
 80055b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055b8:	f022 0208 	bic.w	r2, r2, #8
 80055bc:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_ONE_PULSE_MODE_STATUS*/

    #if MGPTMR_COUNTER_ALLIGNMENT == MGPTMR_EDGE_ALLIGNED_MODE
        
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT);
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	4a29      	ldr	r2, [pc, #164]	; (8005668 <MGPTMR_Init+0xfc>)
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4927      	ldr	r1, [pc, #156]	; (8005668 <MGPTMR_Init+0xfc>)
 80055cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055d0:	f022 0220 	bic.w	r2, r2, #32
 80055d4:	601a      	str	r2, [r3, #0]
        CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CMS_START_BIT + 1);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <MGPTMR_Init+0xfc>)
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <MGPTMR_Init+0xfc>)
 80055e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
        
        #if MGPTMR_COUNTER_DIRECTION == MGPTMR_COUNTER_UPCOUNTER
    
            CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_DIR_BIT);
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <MGPTMR_Init+0xfc>)
 80055f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	491b      	ldr	r1, [pc, #108]	; (8005668 <MGPTMR_Init+0xfc>)
 80055fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005600:	f022 0210 	bic.w	r2, r2, #16
 8005604:	601a      	str	r2, [r3, #0]
        #error "GPTMR Counter Allignment is not specified"
    #endif /*MGPTMR_COUNTER_ALLIGNMENT*/
    
    #if MGPTMR_AUTO_RELOAD_STATUS == MGPTMR_AUTO_RELOAD_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_ARPE_BIT);
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <MGPTMR_Init+0xfc>)
 800560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	4915      	ldr	r1, [pc, #84]	; (8005668 <MGPTMR_Init+0xfc>)
 8005614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800561c:	601a      	str	r2, [r3, #0]
    
    #endif /*MGPTMR_AUTO_RELOAD_STATUS*/

    #if MGPTMR_UPDATE_INTERRUPT_STATUS == MGPTMR_UPDATE_INTERRUPT_ENABLED
    
        SET_BIT((GPTMR[Copy_uint32TimerSelect] -> DIER), MGPTMR_DIER_UIE_BIT);
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <MGPTMR_Init+0xfc>)
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	490f      	ldr	r1, [pc, #60]	; (8005668 <MGPTMR_Init+0xfc>)
 800562c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	60da      	str	r2, [r3, #12]
    
    #endif /*MGPTMR_UPDATE_INTERRUPT_STATUS*/

    #if (MGPTMR_CLK_PRESCALER >= 1) || (MGPTMR_CLK_PRESCALER <= 65536)
    
        GPTMR[Copy_uint32TimerSelect] -> PSC = (uint16)((uint16)(MGPTMR_CLK_PRESCALER) - 1);
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <MGPTMR_Init+0xfc>)
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
    
        #error "GPTMR Prescalar must have a value between 1 and 65536"
    
    #endif /*MGPTMR_CLK_PRESCALER*/
		
		CLR_BIT((GPTMR[Copy_uint32TimerSelect] -> SR), MGPTMR_SR_UIF_BIT);
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	4a08      	ldr	r2, [pc, #32]	; (8005668 <MGPTMR_Init+0xfc>)
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4905      	ldr	r1, [pc, #20]	; (8005668 <MGPTMR_Init+0xfc>)
 8005652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	611a      	str	r2, [r3, #16]

    return E_OK; 
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr
 8005668:	20000344 	.word	0x20000344

0800566c <MGPTMR_StartTimer>:
 * @return Std_ReturnType
 * @retval E_OK:                    Timer Successfully Started to Count.
 * @retval E_NOT_OK:                Timer not started.
 */
Std_ReturnType MGPTMR_StartTimer                        (GPTMR_Select_t Copy_uint32TimerSelect)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
    SET_BIT((GPTMR[Copy_uint32TimerSelect] -> CR1), MGPTMR_CR1_CEN_BIT);
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <MGPTMR_StartTimer+0x3c>)
 800567a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4909      	ldr	r1, [pc, #36]	; (80056a8 <MGPTMR_StartTimer+0x3c>)
 8005684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
    GPTMR[Copy_uint32TimerSelect] -> CNT = 0;
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <MGPTMR_StartTimer+0x3c>)
 8005692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005696:	2200      	movs	r2, #0
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
    return E_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000344 	.word	0x20000344

080056ac <MGPTMR_SetTimerPeriod>:
 * @return Std_ReturnType
 * @retval E_OK:                    Period Successfully Set
 * @retval E_NOT_OK:                Period not set 
 */
Std_ReturnType MGPTMR_SetTimerPeriod                    (GPTMR_Select_t Copy_uint32TimerSelect, uint32 Copy_uint32PeriodInMs)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]

    uint16 Loc_uint16PreloadValue = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	81bb      	strh	r3, [r7, #12]
    Loc_uint8FuncStatus = MGPTMR_GetPreloadValue(Copy_uint32PeriodInMs, &Loc_uint16PreloadValue);
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	4619      	mov	r1, r3
 80056c6:	6838      	ldr	r0, [r7, #0]
 80056c8:	f7ff ff2a 	bl	8005520 <MGPTMR_GetPreloadValue>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]

    if(Loc_uint8FuncStatus == E_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <MGPTMR_SetTimerPeriod+0x3e>
    {
        GPTMR[Copy_uint32TimerSelect] -> ARR = Loc_uint16PreloadValue;
 80056d6:	89b9      	ldrh	r1, [r7, #12]
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	4a07      	ldr	r2, [pc, #28]	; (80056f8 <MGPTMR_SetTimerPeriod+0x4c>)
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	460a      	mov	r2, r1
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c
        Loc_uint8FuncStatus = E_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	e001      	b.n	80056ee <MGPTMR_SetTimerPeriod+0x42>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000344 	.word	0x20000344

080056fc <MGPTMR_SetTimerUpdateCallbackFunc>:
 * @return Std_ReturnType
 * @retval E_OK:                    Function Successfully Set
 * @retval E_NOT_OK:                Function not set  
 */
Std_ReturnType MGPTMR_SetTimerUpdateCallbackFunc        (GPTMR_Select_t Copy_uint32TimerSelect, ptr_to_func_t P_UpdateCallbackFunc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
    if(P_UpdateCallbackFunc != NULL_PTR)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <MGPTMR_SetTimerUpdateCallbackFunc+0x22>
    {
        glbl_PCallbackFunc[Copy_uint32TimerSelect] = P_UpdateCallbackFunc;
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <MGPTMR_SetTimerUpdateCallbackFunc+0x34>)
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800571c:	e001      	b.n	8005722 <MGPTMR_SetTimerUpdateCallbackFunc+0x26>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000720 	.word	0x20000720

08005734 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[0] != NULL_PTR)
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <TIM2_IRQHandler+0x28>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <TIM2_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[0])();
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <TIM2_IRQHandler+0x28>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[0] -> SR), MGPTMR_SR_UIF_BIT);
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <TIM2_IRQHandler+0x2c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <TIM2_IRQHandler+0x2c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	611a      	str	r2, [r3, #16]
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000720 	.word	0x20000720
 8005760:	20000344 	.word	0x20000344

08005764 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[1] != NULL_PTR)
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <TIM3_IRQHandler+0x28>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <TIM3_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[1])();
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <TIM3_IRQHandler+0x28>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[1] -> SR), MGPTMR_SR_UIF_BIT);
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <TIM3_IRQHandler+0x2c>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <TIM3_IRQHandler+0x2c>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	611a      	str	r2, [r3, #16]
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000720 	.word	0x20000720
 8005790:	20000344 	.word	0x20000344

08005794 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc[2] != NULL_PTR)
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <TIM4_IRQHandler+0x28>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <TIM4_IRQHandler+0x12>
    {
        (glbl_PCallbackFunc[2])();
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <TIM4_IRQHandler+0x28>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT((GPTMR[2] -> SR), MGPTMR_SR_UIF_BIT);
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <TIM4_IRQHandler+0x2c>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <TIM4_IRQHandler+0x2c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	611a      	str	r2, [r3, #16]
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000720 	.word	0x20000720
 80057c0:	20000344 	.word	0x20000344

080057c4 <MCAL_I2C_Init>:
 * 										APIs
 * =============================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80057c4:	b5b0      	push	{r4, r5, r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	uint16 tmpreg = 0, freqrange = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	82fb      	strh	r3, [r7, #22]
 80057d2:	2300      	movs	r3, #0
 80057d4:	82bb      	strh	r3, [r7, #20]
	uint32 pclk1 = 8000000;
 80057d6:	4b57      	ldr	r3, [pc, #348]	; (8005934 <MCAL_I2C_Init+0x170>)
 80057d8:	613b      	str	r3, [r7, #16]
	uint16 result = 0 ;
 80057da:	2300      	movs	r3, #0
 80057dc:	81fb      	strh	r3, [r7, #14]

	

	//Enable RCC Clock
	if (I2Cx == I2C1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a55      	ldr	r2, [pc, #340]	; (8005938 <MCAL_I2C_Init+0x174>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10e      	bne.n	8005804 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 80057e6:	4a55      	ldr	r2, [pc, #340]	; (800593c <MCAL_I2C_Init+0x178>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4614      	mov	r4, r2
 80057ec:	461d      	mov	r5, r3
 80057ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057f6:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C1_EN);
 80057fa:	2115      	movs	r1, #21
 80057fc:	2002      	movs	r0, #2
 80057fe:	f000 fbbf 	bl	8005f80 <MRCC_EnablePeripheralClock>
 8005802:	e00e      	b.n	8005822 <MCAL_I2C_Init+0x5e>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 8005804:	4b4d      	ldr	r3, [pc, #308]	; (800593c <MCAL_I2C_Init+0x178>)
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	f103 0418 	add.w	r4, r3, #24
 800580c:	4615      	mov	r5, r2
 800580e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005816:	e884 0003 	stmia.w	r4, {r0, r1}
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_I2C2_EN);
 800581a:	2116      	movs	r1, #22
 800581c:	2002      	movs	r0, #2
 800581e:	f000 fbaf 	bl	8005f80 <MRCC_EnablePeripheralClock>
	}
	MCAL_I2C_RESET();
 8005822:	f000 f893 	bl	800594c <MCAL_I2C_RESET>
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	88db      	ldrh	r3, [r3, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d178      	bne.n	8005920 <MCAL_I2C_Init+0x15c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800583a:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = 8000000;
 800583c:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <MCAL_I2C_Init+0x170>)
 800583e:	613b      	str	r3, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16) (pclk1 / 1000000) ;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <MCAL_I2C_Init+0x17c>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	0c9b      	lsrs	r3, r3, #18
 800584a:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 800584c:	8afa      	ldrh	r2, [r7, #22]
 800584e:	8abb      	ldrh	r3, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 8005854:	8afa      	ldrh	r2, [r7, #22]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50k)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100k) )
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a35      	ldr	r2, [pc, #212]	; (8005944 <MCAL_I2C_Init+0x180>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <MCAL_I2C_Init+0xba>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a33      	ldr	r2, [pc, #204]	; (8005948 <MCAL_I2C_Init+0x184>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d112      	bne.n	80058a4 <MCAL_I2C_Init+0xe0>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16) ((pclk1) / ( I2C_InitStruct->I2C_ClockSpeed << 1)   );
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 800588c:	8afa      	ldrh	r2, [r7, #22]
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	4313      	orrs	r3, r2
 8005892:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8005894:	8afa      	ldrh	r2, [r7, #22]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLk1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 800589a:	8abb      	ldrh	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	8a1a      	ldrh	r2, [r3, #16]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	8a5b      	ldrh	r3, [r3, #18]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	88db      	ldrh	r3, [r3, #6]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	889b      	ldrh	r3, [r3, #4]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 80058cc:	8afa      	ldrh	r2, [r7, #22]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 80058d2:	2300      	movs	r3, #0
 80058d4:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Device_Address.Enable_Dual_ADD == 1)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	891b      	ldrh	r3, [r3, #8]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10d      	bne.n	80058fa <MCAL_I2C_Init+0x136>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 80058de:	2301      	movs	r3, #1
 80058e0:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	899b      	ldrh	r3, [r3, #12]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	b21a      	sxth	r2, r3
 80058ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 80058f4:	8afa      	ldrh	r2, [r7, #22]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 80058fa:	2300      	movs	r3, #0
 80058fc:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.Primary_slave_address << 1 ;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	895b      	ldrh	r3, [r3, #10]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	b21a      	sxth	r2, r3
 8005906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800590a:	4313      	orrs	r3, r2
 800590c:	b21b      	sxth	r3, r3
 800590e:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Device_Address.I2C_Addressing_Slave_mode ;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	89da      	ldrh	r2, [r3, #14]
 8005914:	8afb      	ldrh	r3, [r7, #22]
 8005916:	4313      	orrs	r3, r2
 8005918:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 800591a:	8afa      	ldrh	r2, [r7, #22]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	007a1200 	.word	0x007a1200
 8005938:	40005400 	.word	0x40005400
 800593c:	2000072c 	.word	0x2000072c
 8005940:	431bde83 	.word	0x431bde83
 8005944:	0007a120 	.word	0x0007a120
 8005948:	000186a0 	.word	0x000186a0

0800594c <MCAL_I2C_RESET>:

void MCAL_I2C_RESET()
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_SWRST;
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <MCAL_I2C_RESET+0x48>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <MCAL_I2C_RESET+0x48>)
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	6013      	str	r3, [r2, #0]
	MRCC_APB1RSTR |= (1 << 21);
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <MCAL_I2C_RESET+0x4c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <MCAL_I2C_RESET+0x4c>)
 8005962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005966:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800596c:	f000 ff22 	bl	80067b4 <MSTK_uint8Delay>
	MRCC_APB1RSTR &= ~(1 << 21);
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <MCAL_I2C_RESET+0x4c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <MCAL_I2C_RESET+0x4c>)
 8005976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800597a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <MCAL_I2C_RESET+0x48>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <MCAL_I2C_RESET+0x48>)
 8005982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005986:	6013      	str	r3, [r2, #0]
	MSTK_uint8Delay(1000);
 8005988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800598c:	f000 ff12 	bl	80067b4 <MSTK_uint8Delay>
}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40005400 	.word	0x40005400
 8005998:	40021010 	.word	0x40021010

0800599c <MCAL_I2C_GPIO_Set_Pins>:
		MNVIC_DisableInterrupt(MNVIC_I2C2_ER);
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <MCAL_I2C_GPIO_Set_Pins+0x4c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10a      	bne.n	80059c2 <MCAL_I2C_GPIO_Set_Pins+0x26>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN6, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80059ac:	220e      	movs	r2, #14
 80059ae:	2106      	movs	r1, #6
 80059b0:	2001      	movs	r0, #1
 80059b2:	f7ff fb87 	bl	80050c4 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN7, MGPIO_OUTPUT_AF_OPEN_DRAIN_2MHZ);
 80059b6:	220e      	movs	r2, #14
 80059b8:	2107      	movs	r1, #7
 80059ba:	2001      	movs	r0, #1
 80059bc:	f7ff fb82 	bl	80050c4 <MGPIO_SetPinMode>
		//		PB10 : I2C1_SCL
		//		PB11 : I2C1_SDA
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
	}
}
 80059c0:	e00d      	b.n	80059de <MCAL_I2C_GPIO_Set_Pins+0x42>
	else if(I2Cx == I2C2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <MCAL_I2C_GPIO_Set_Pins+0x50>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d109      	bne.n	80059de <MCAL_I2C_GPIO_Set_Pins+0x42>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN10, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 80059ca:	220d      	movs	r2, #13
 80059cc:	210a      	movs	r1, #10
 80059ce:	2001      	movs	r0, #1
 80059d0:	f7ff fb78 	bl	80050c4 <MGPIO_SetPinMode>
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN11, MGPIO_OUTPUT_AF_OPEN_DRAIN_10MHZ);
 80059d4:	220d      	movs	r2, #13
 80059d6:	210b      	movs	r1, #11
 80059d8:	2001      	movs	r0, #1
 80059da:	f7ff fb73 	bl	80050c4 <MGPIO_SetPinMode>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40005400 	.word	0x40005400
 80059ec:	40005800 	.word	0x40005800

080059f0 <MCAL_I2C_MASTER_TX>:

void MCAL_I2C_MASTER_TX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	460b      	mov	r3, r1
 80059fe:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005a04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f8cd 	bl	8005bac <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005a12:	bf00      	nop
 8005a14:	2101      	movs	r1, #1
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f8f0 	bl	8005bfc <I2C_GetFlagStatus>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f8      	beq.n	8005a14 <MCAL_I2C_MASTER_TX+0x24>
	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Transmitter);	// address
 8005a22:	897b      	ldrh	r3, [r7, #10]
 8005a24:	2200      	movs	r2, #0
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f96d 	bl	8005d08 <I2C_SendAddress>
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005a2e:	bf00      	nop
 8005a30:	2102      	movs	r1, #2
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f8e2 	bl	8005bfc <I2C_GetFlagStatus>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f8      	beq.n	8005a30 <MCAL_I2C_MASTER_TX+0x40>
	//  5. wait for EV8_1
	/* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8005a3e:	bf00      	nop
 8005a40:	4919      	ldr	r1, [pc, #100]	; (8005aa8 <MCAL_I2C_MASTER_TX+0xb8>)
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f8da 	bl	8005bfc <I2C_GetFlagStatus>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f8      	beq.n	8005a40 <MCAL_I2C_MASTER_TX+0x50>

	for(i = 0; i < dataLen; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e018      	b.n	8005a86 <MCAL_I2C_MASTER_TX+0x96>
	{
		//  6. wait for EV8
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8005a54:	bf00      	nop
 8005a56:	2104      	movs	r1, #4
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f8cf 	bl	8005bfc <I2C_GetFlagStatus>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f8      	beq.n	8005a56 <MCAL_I2C_MASTER_TX+0x66>
		/* Write in the DR register the data to be sent */
		if(i >> 1)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	105b      	asrs	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <MCAL_I2C_MASTER_TX+0x82>
		{
			delay_ms(10);
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	f7fd fe8a 	bl	8003786 <delay_ms>
		}
		I2Cx->DR = dataOut[i];
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	611a      	str	r2, [r3, #16]
	for(i = 0; i < dataLen; i++)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3301      	adds	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d8e2      	bhi.n	8005a54 <MCAL_I2C_MASTER_TX+0x64>
	}

	//  7. wait EV8_2
	//while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if(Stop == With_Stop)
 8005a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <MCAL_I2C_MASTER_TX+0xae>
	{
		//  8. Sent stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005a96:	2101      	movs	r1, #1
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f954 	bl	8005d46 <I2C_GenerateSTOP>
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	00070080 	.word	0x00070080

08005aac <MCAL_I2C_MASTER_RX>:


void MCAL_I2C_MASTER_RX(I2C_TypeDef* I2Cx, uint16 devAddr, uint8 *dataOut, uint32 dataLen, Stop_Condition Stop, Repeated_Start start)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	817b      	strh	r3, [r7, #10]
	uint8 index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a39      	ldr	r2, [pc, #228]	; (8005ba4 <MCAL_I2C_MASTER_RX+0xf8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
	//	1. Set the start bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx, ENABLE, start);
 8005ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f867 	bl	8005bac <I2C_GenerateSTART>

	//  2. wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8005ade:	bf00      	nop
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f88a 	bl	8005bfc <I2C_GetFlagStatus>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f8      	beq.n	8005ae0 <MCAL_I2C_MASTER_RX+0x34>

	//  3. Send address
	I2C_SendAddress(I2Cx, devAddr, I2C_Direction_Receiver);	// address
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	2201      	movs	r2, #1
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f907 	bl	8005d08 <I2C_SendAddress>
	//delay_ms(20);
	//  4. wait for EV6
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8005afa:	bf00      	nop
 8005afc:	2102      	movs	r1, #2
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f87c 	bl	8005bfc <I2C_GetFlagStatus>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f8      	beq.n	8005afc <MCAL_I2C_MASTER_RX+0x50>
	//delay_ms(10);
	I2C_ACKnowledgeConfig(I2Cx,ENABLE);
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f935 	bl	8005d7c <I2C_ACKnowledgeConfig>
	//delay_ms(25);
	I2Cx->CR1 &= ~(1 << 11);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	601a      	str	r2, [r3, #0]
	uint8 sr1 = I2Cx->SR1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	74bb      	strb	r3, [r7, #18]
	uint8 sr2 = I2Cx->SR2;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	747b      	strb	r3, [r7, #17]
	if(dataLen)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01c      	beq.n	8005b6a <MCAL_I2C_MASTER_RX+0xbe>
	{
		// read the data until Len becomes zero
		for(i = dataLen-1; i >= 0; i--)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e011      	b.n	8005b5c <MCAL_I2C_MASTER_RX+0xb0>
		{
			//  5. wait for EV7
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8005b38:	bf00      	nop
 8005b3a:	2103      	movs	r1, #3
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f85d 	bl	8005bfc <I2C_GetFlagStatus>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f8      	beq.n	8005b3a <MCAL_I2C_MASTER_RX+0x8e>
			//read the data from data register into buffer
			dataOut[i] = I2Cx->DR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6919      	ldr	r1, [r3, #16]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	b2ca      	uxtb	r2, r1
 8005b54:	701a      	strb	r2, [r3, #0]
		for(i = dataLen-1; i >= 0; i--)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daea      	bge.n	8005b38 <MCAL_I2C_MASTER_RX+0x8c>
			//delay_ms(20);
			//increment the buffer address;
			//dataOut++;
		}

		I2C_ACKnowledgeConfig(I2Cx,DISABLE);
 8005b62:	2100      	movs	r1, #0
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f909 	bl	8005d7c <I2C_ACKnowledgeConfig>

	}
	//MSTK_uint8Delay(50);
	if(Stop == With_Stop)
 8005b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <MCAL_I2C_MASTER_RX+0xce>
		//  7. Send Stop condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8005b72:	2101      	movs	r1, #1
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f8e6 	bl	8005d46 <I2C_GenerateSTOP>

	//re-enabling ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8005b7a:	7cfa      	ldrb	r2, [r7, #19]
 8005b7c:	490a      	ldr	r1, [pc, #40]	; (8005ba8 <MCAL_I2C_MASTER_RX+0xfc>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	440b      	add	r3, r1
 8005b88:	3310      	adds	r3, #16
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b90:	d103      	bne.n	8005b9a <MCAL_I2C_MASTER_RX+0xee>
	{
		I2C_ACKnowledgeConfig(I2Cx, ENABLE);
 8005b92:	2101      	movs	r1, #1
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f8f1 	bl	8005d7c <I2C_ACKnowledgeConfig>
	}
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40005400 	.word	0x40005400
 8005ba8:	2000072c 	.word	0x2000072c

08005bac <I2C_GenerateSTART>:


void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8005bbc:	78bb      	ldrb	r3, [r7, #2]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d007      	beq.n	8005bd2 <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8005bc2:	bf00      	nop
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f818 	bl	8005bfc <I2C_GetFlagStatus>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f8      	bne.n	8005bc4 <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8005be4:	e005      	b.n	8005bf2 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <I2C_GetFlagStatus>:

FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	//volatile uint32 dummyRead;
	FlagStatus bitstatus = RESET;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
	uint32 flag1 = 0, flag2 = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
	uint32 lastevent = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]
	switch(flag)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d811      	bhi.n	8005c40 <I2C_GetFlagStatus+0x44>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d86a      	bhi.n	8005cf8 <I2C_GetFlagStatus+0xfc>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <I2C_GetFlagStatus+0x2c>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c4b 	.word	0x08005c4b
 8005c2c:	08005c63 	.word	0x08005c63
 8005c30:	08005c7b 	.word	0x08005c7b
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005cc9 	.word	0x08005cc9
 8005c3c:	08005cc9 	.word	0x08005cc9
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	4a30      	ldr	r2, [pc, #192]	; (8005d04 <I2C_GetFlagStatus+0x108>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d024      	beq.n	8005c92 <I2C_GetFlagStatus+0x96>
 8005c48:	e056      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 1 in I2C_SR2
		//0 : Bus is not busy
		//1 : Bus is busy

		if((I2Cx->SR2)&(I2C_SR2_BUSY))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <I2C_GetFlagStatus+0x60>
			bitstatus = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005c5a:	e04d      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	75fb      	strb	r3, [r7, #23]
		break;
 8005c60:	e04a      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	{
		// Check bit 0 in I2C_SR1	(start bit)
		//0 : No start condition
		//1 : Start condition generated

		if((I2Cx->SR1)&(I2C_SR1_SB))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <I2C_GetFlagStatus+0x78>
			bitstatus = SET;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005c72:	e041      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
		break;
 8005c78:	e03e      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	}
	case EV6:
	{
		// chech bit ADDR = 1 (address sent), cleared by reading SR1 followed by reading SR2
		if((I2Cx->SR1)&(I2C_SR1_ADDR))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <I2C_GetFlagStatus+0x90>
			
		bitstatus = SET;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;

		//to clear ADDR
		//dummyRead = I2Cx -> SR2;
		break;
 8005c8a:	e035      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
		break;
 8005c90:	e032      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	60fb      	str	r3, [r7, #12]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32)0x00FFFFFF);
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	60bb      	str	r3, [r7, #8]
		/* Check whether the last event contains the I2C_EVENT */
		if((lastevent & flag) == flag)
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d102      	bne.n	8005cc2 <I2C_GetFlagStatus+0xc6>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8005cc0:	e01a      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
		break;
 8005cc6:	e017      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	case EV8:
	{
		// Bit 7 TxE: Data register empty (transmitters)
		// 0 : Data register not empty
		// 1 : Data register empty
		if(((I2Cx->SR1)&(I2C_SR1_TXE)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <I2C_GetFlagStatus+0xde>
			bitstatus = SET;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005cd8:	e00e      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
			bitstatus = RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
		break;
 8005cde:	e00b      	b.n	8005cf8 <I2C_GetFlagStatus+0xfc>
	case EV7:
	{
		// Bit 6 in SR1
		//0 : Data register empty
		//1 : Data register not empty
		if(((I2Cx->SR1)&(I2C_SR1_RXNE)))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <I2C_GetFlagStatus+0xf6>
			bitstatus = SET;
 8005cec:	2301      	movs	r3, #1
 8005cee:	75fb      	strb	r3, [r7, #23]
		else
			bitstatus = RESET;
		break;
 8005cf0:	e001      	b.n	8005cf6 <I2C_GetFlagStatus+0xfa>
			bitstatus = RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
		break;
 8005cf6:	bf00      	nop
	}
	}
	return bitstatus;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	00070080 	.word	0x00070080

08005d08 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16 Address, I2C_Direction Direction)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	807b      	strh	r3, [r7, #2]
 8005d14:	4613      	mov	r3, r2
 8005d16:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8005d1e:	787b      	ldrb	r3, [r7, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <I2C_SendAddress+0x26>
	{
		/* Set the address bit 0 for read */
		Address |= 1<<0;
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	807b      	strh	r3, [r7, #2]
 8005d2c:	e003      	b.n	8005d36 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Set the address bit 0 for write */
		Address &= ~(1<<0);
 8005d2e:	887b      	ldrh	r3, [r7, #2]
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	611a      	str	r2, [r3, #16]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8005d64:	e005      	b.n	8005d72 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <I2C_ACKnowledgeConfig>:

void I2C_ACKnowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <I2C_ACKnowledgeConfig+0x20>
	{
		/* Enable the ACKnowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
	{
		/* Disable the ACKnowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}

}
 8005d9a:	e005      	b.n	8005da8 <I2C_ACKnowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
	...

08005db4 <MNVIC_EnableInterrupt>:
 * @return Std_ReturnType
 * @retval E_OK: Peripheral Interrupt is enabled successfully
 * @retval E_NOT_OK: Peripheral Interrupt is not enabled 
 */
Std_ReturnType MNVIC_EnableInterrupt(MNVIC_InterruptType Copy_uint32InterruptNumber)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < 32)
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b1f      	cmp	r3, #31
 8005dc6:	d80c      	bhi.n	8005de2 <MNVIC_EnableInterrupt+0x2e>
    {
        SET_BIT((NVIC -> ISER[0]), Copy_uint32InterruptNumber);
 8005dc8:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <MNVIC_EnableInterrupt+0x64>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	79fa      	ldrb	r2, [r7, #7]
 8005dce:	2101      	movs	r1, #1
 8005dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <MNVIC_EnableInterrupt+0x64>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6013      	str	r3, [r2, #0]
        Loc_uint8FuncStatus = E_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]
 8005de0:	e014      	b.n	8005e0c <MNVIC_EnableInterrupt+0x58>
    }
    else if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	2b3b      	cmp	r3, #59	; 0x3b
 8005de6:	d80f      	bhi.n	8005e08 <MNVIC_EnableInterrupt+0x54>
    {
        Copy_uint32InterruptNumber -= 32;
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	3b20      	subs	r3, #32
 8005dec:	71fb      	strb	r3, [r7, #7]
        SET_BIT((NVIC -> ISER[1]), Copy_uint32InterruptNumber);
 8005dee:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <MNVIC_EnableInterrupt+0x64>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	79fa      	ldrb	r2, [r7, #7]
 8005df4:	2101      	movs	r1, #1
 8005df6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4a06      	ldr	r2, [pc, #24]	; (8005e18 <MNVIC_EnableInterrupt+0x64>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6053      	str	r3, [r2, #4]
        Loc_uint8FuncStatus = E_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e001      	b.n	8005e0c <MNVIC_EnableInterrupt+0x58>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	e000e100 	.word	0xe000e100

08005e1c <MNVIC_SetInterruptPriority>:
 * @return Std_ReturnType
 * @retval E_OK: Priority has been set successfully
 * @retval E_NOT_OK: Priority has not been set  
 */
Std_ReturnType MNVIC_SetInterruptPriority(MNVIC_InterruptType Copy_uint32InterruptNumber, uint8 Copy_uint8GroupPriority, uint8 Copy_uint8SubGroupPriority)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	71fb      	strb	r3, [r7, #7]
 8005e26:	460b      	mov	r3, r1
 8005e28:	71bb      	strb	r3, [r7, #6]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
    if(Copy_uint32InterruptNumber < NVIC_NUMBER_OF_INTERRUPTS)
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	2b3b      	cmp	r3, #59	; 0x3b
 8005e36:	d84e      	bhi.n	8005ed6 <MNVIC_SetInterruptPriority+0xba>

                                             -----------------------------------
                                            |     Priority    ||||||||||||||||||                 
                                             -----------------------------------
        */
        uint16 Loc_uint16AIRCRPriorityGroupVal = (uint16)(MSCB_AIRCR & (0xFFFF));
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <MNVIC_SetInterruptPriority+0xcc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	81bb      	strh	r3, [r7, #12]
        uint8 Loc_uint8PriorityValue = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	72fb      	strb	r3, [r7, #11]

        switch(Loc_uint16AIRCRPriorityGroupVal)
 8005e42:	89bb      	ldrh	r3, [r7, #12]
 8005e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e48:	d038      	beq.n	8005ebc <MNVIC_SetInterruptPriority+0xa0>
 8005e4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e4e:	dc3f      	bgt.n	8005ed0 <MNVIC_SetInterruptPriority+0xb4>
 8005e50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e54:	d019      	beq.n	8005e8a <MNVIC_SetInterruptPriority+0x6e>
 8005e56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e5a:	dc39      	bgt.n	8005ed0 <MNVIC_SetInterruptPriority+0xb4>
 8005e5c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e60:	d013      	beq.n	8005e8a <MNVIC_SetInterruptPriority+0x6e>
 8005e62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e66:	dc33      	bgt.n	8005ed0 <MNVIC_SetInterruptPriority+0xb4>
 8005e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6c:	d003      	beq.n	8005e76 <MNVIC_SetInterruptPriority+0x5a>
 8005e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e72:	d00a      	beq.n	8005e8a <MNVIC_SetInterruptPriority+0x6e>
 8005e74:	e02c      	b.n	8005ed0 <MNVIC_SetInterruptPriority+0xb4>
        {
            case MNVIC_PRIORITY_GROUP_4_SUB_0:
            {
                Loc_uint8PriorityValue = (Copy_uint8GroupPriority << 4);
 8005e76:	79bb      	ldrb	r3, [r7, #6]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <MNVIC_SetInterruptPriority+0xd0>)
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	4413      	add	r3, r2
 8005e82:	7afa      	ldrb	r2, [r7, #11]
 8005e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                break;
 8005e88:	e027      	b.n	8005eda <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_3_SUB_1:
            case MNVIC_PRIORITY_GROUP_2_SUB_2:
            case MNVIC_PRIORITY_GROUP_1_SUB_3:
            {
                Loc_uint8PriorityValue = ((Copy_uint8SubGroupPriority) | (Copy_uint8GroupPriority << ((Loc_uint16AIRCRPriorityGroupVal - (uint16)MNVIC_PRIORITY_GROUP_4_SUB_0) / 0x100)));
 8005e8a:	79ba      	ldrb	r2, [r7, #6]
 8005e8c:	89bb      	ldrh	r3, [r7, #12]
 8005e8e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da00      	bge.n	8005e98 <MNVIC_SetInterruptPriority+0x7c>
 8005e96:	33ff      	adds	r3, #255	; 0xff
 8005e98:	121b      	asrs	r3, r3, #8
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	b25a      	sxtb	r2, r3
 8005ea0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue << 4;
 8005eaa:	4910      	ldr	r1, [pc, #64]	; (8005eec <MNVIC_SetInterruptPriority+0xd0>)
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	7afa      	ldrb	r2, [r7, #11]
 8005eb0:	0112      	lsls	r2, r2, #4
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                break;
 8005eba:	e00e      	b.n	8005eda <MNVIC_SetInterruptPriority+0xbe>
            }
            case MNVIC_PRIORITY_GROUP_0_SUB_4:
            {
                Loc_uint8PriorityValue = (Copy_uint8SubGroupPriority << 4);
 8005ebc:	797b      	ldrb	r3, [r7, #5]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	72fb      	strb	r3, [r7, #11]
                NVIC -> IPR[Copy_uint32InterruptNumber] = Loc_uint8PriorityValue;
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <MNVIC_SetInterruptPriority+0xd0>)
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	7afa      	ldrb	r2, [r7, #11]
 8005eca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                break;
 8005ece:	e004      	b.n	8005eda <MNVIC_SetInterruptPriority+0xbe>
            }
            default:
            {
                Loc_uint8FuncStatus = E_NOT_OK;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
                break;
 8005ed4:	e001      	b.n	8005eda <MNVIC_SetInterruptPriority+0xbe>
        }

    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	e000ed0c 	.word	0xe000ed0c
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <MRCC_InitClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Clock Initialized Successfully
 * @retval E_NOT_OK:    Clock is not initialized Successfully
 */
Std_ReturnType MRCC_InitClock(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0

    #elif MRCC_CLOCK_SOURCE == MRCC_HSE_CLOCK
        #if (MRCC_HSE_CLOCK_FREQ <= 16000000)
            #if MRCC_HSE_CLOCK_SOURCE == MRCC_HSE_CRYSTAL_CLOCK
                /*Bypass is not enabled*/
                CLR_BIT(MRCC_CR, MRCC_CR_HSEBYP);
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <MRCC_InitClock+0x88>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <MRCC_InitClock+0x88>)
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efe:	6013      	str	r3, [r2, #0]
            #else
                #error "External Clock Source is not specified correctly"
            #endif

            //Enable High-Speed External Clock
            SET_BIT(MRCC_CR, MRCC_CR_HSEON);
 8005f00:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <MRCC_InitClock+0x88>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <MRCC_InitClock+0x88>)
 8005f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0a:	6013      	str	r3, [r2, #0]
            //Wait until HSE Clock is ready
            while(GET_BIT(MRCC_CR, MRCC_CR_HSERDY) == 0);
 8005f0c:	bf00      	nop
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <MRCC_InitClock+0x88>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f9      	beq.n	8005f0e <MRCC_InitClock+0x1e>

            //Set System Clock Source to be HSE Clock
            SET_BIT(MRCC_CFGR, MRCC_CFGR_SW_START);
 8005f1a:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	6013      	str	r3, [r2, #0]
            CLR_BIT(MRCC_CFGR, (MRCC_CFGR_SW_START + 1));
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f2c:	f023 0302 	bic.w	r3, r3, #2
 8005f30:	6013      	str	r3, [r2, #0]

    #else
        #error "Clock Source is not Specified Correctly"
    #endif
    //Set Prescalars for AHB, APB1 and APB2 Clocks
    MRCC_CFGR &= ~(((uint32)0b1111) << (MRCC_CFGR_HPRE_START));
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3c:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_AHB_PRESCALAR)) << (MRCC_CFGR_HPRE_START));
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f40:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE1_START));
 8005f46:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f50:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB1_PRESCALAR)) << (MRCC_CFGR_PPRE1_START));
 8005f52:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f54:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6013      	str	r3, [r2, #0]
    
    MRCC_CFGR &= ~(((uint32)0b111) << (MRCC_CFGR_PPRE2_START));
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f60:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005f64:	6013      	str	r3, [r2, #0]
    MRCC_CFGR |= (((uint32)(MRCC_APB2_PRESCALAR)) << (MRCC_CFGR_PPRE2_START));
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <MRCC_InitClock+0x8c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6013      	str	r3, [r2, #0]

    return E_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40021004 	.word	0x40021004

08005f80 <MRCC_EnablePeripheralClock>:
 * @return Std_ReturnType
 * @retval E_OK:        Peripheral Clock Enabled Successfully
 * @retval E_NOT_OK:    Peripheral Clock is not Enabled Successfully 
 */
Std_ReturnType MRCC_EnablePeripheralClock(uint8 Copy_uint8BusID, uint8 Copy_uint8Peripheral)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	460a      	mov	r2, r1
 8005f8a:	71fb      	strb	r3, [r7, #7]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Loc_uint8ErrorCheck = E_NOT_OK;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8BusID)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d020      	beq.n	8005fdc <MRCC_EnablePeripheralClock+0x5c>
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	dc2b      	bgt.n	8005ff6 <MRCC_EnablePeripheralClock+0x76>
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <MRCC_EnablePeripheralClock+0x28>
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d00d      	beq.n	8005fc2 <MRCC_EnablePeripheralClock+0x42>
 8005fa6:	e026      	b.n	8005ff6 <MRCC_EnablePeripheralClock+0x76>
    {
        case MRCC_AHB:
        {
            SET_BIT(MRCC_AHBENR, Copy_uint8Peripheral);
 8005fa8:	4b17      	ldr	r3, [pc, #92]	; (8006008 <MRCC_EnablePeripheralClock+0x88>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	79ba      	ldrb	r2, [r7, #6]
 8005fae:	2101      	movs	r1, #1
 8005fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <MRCC_EnablePeripheralClock+0x88>)
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
            break;
 8005fc0:	e01c      	b.n	8005ffc <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB1:
        {
            SET_BIT(MRCC_APB1ENR, Copy_uint8Peripheral);
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <MRCC_EnablePeripheralClock+0x8c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	79ba      	ldrb	r2, [r7, #6]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	fa01 f202 	lsl.w	r2, r1, r2
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4a0e      	ldr	r2, [pc, #56]	; (800600c <MRCC_EnablePeripheralClock+0x8c>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
            break;
 8005fda:	e00f      	b.n	8005ffc <MRCC_EnablePeripheralClock+0x7c>
        }
        case MRCC_APB2:
        {
            SET_BIT(MRCC_APB2ENR, Copy_uint8Peripheral);
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <MRCC_EnablePeripheralClock+0x90>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	79ba      	ldrb	r2, [r7, #6]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <MRCC_EnablePeripheralClock+0x90>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6013      	str	r3, [r2, #0]
            Loc_uint8ErrorCheck = E_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
            break;
 8005ff4:	e002      	b.n	8005ffc <MRCC_EnablePeripheralClock+0x7c>
        }
        default:
        {
            Loc_uint8ErrorCheck = E_NOT_OK;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8005ffa:	bf00      	nop
        }
    }
    return Loc_uint8ErrorCheck;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	40021014 	.word	0x40021014
 800600c:	4002101c 	.word	0x4002101c
 8006010:	40021018 	.word	0x40021018

08006014 <MRTC_CalculateSeconds>:
static volatile Stime_t glbl_SReferenceTime = {17,12,0};
static volatile uint32 glbl_uint32ReferenceSeconds = 0;
static volatile ptr_to_func_t glbl_PCallbackFunc = NULL_PTR;

Std_ReturnType MRTC_CalculateSeconds(Sdate_t* P_SDate, Stime_t* P_STime, uint32* P_uint32Seconds)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b09a      	sub	sp, #104	; 0x68
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
    struct tm time = {};
 8006020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006024:	2224      	movs	r2, #36	; 0x24
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f001 ff62 	bl	8007ef2 <memset>
    
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d03d      	beq.n	80060b6 <MRTC_CalculateSeconds+0xa2>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d03a      	beq.n	80060b6 <MRTC_CalculateSeconds+0xa2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d037      	beq.n	80060b6 <MRTC_CalculateSeconds+0xa2>
    {
        struct tm Loc_SspecificTime = {0};
 8006046:	f107 0310 	add.w	r3, r7, #16
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f001 ff4f 	bl	8007ef2 <memset>
        Loc_SspecificTime.tm_year = (P_SDate -> m_years) - 1900; //year since 1900
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
        Loc_SspecificTime.tm_mon = (P_SDate -> m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	789b      	ldrb	r3, [r3, #2]
 8006062:	3b01      	subs	r3, #1
 8006064:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_mday = (P_SDate -> m_days); //Day (1 ---> 31)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_hour = (P_STime -> m_hours);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_min = (P_STime -> m_minutes);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	617b      	str	r3, [r7, #20]
        Loc_SspecificTime.tm_sec = (P_STime -> m_seconds);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	789b      	ldrb	r3, [r3, #2]
 800607c:	613b      	str	r3, [r7, #16]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 800607e:	f107 0310 	add.w	r3, r7, #16
 8006082:	4618      	mov	r0, r3
 8006084:	f002 f99c 	bl	80083c0 <mktime>
 8006088:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

        *P_uint32Seconds = (uint32)(difftime(Loc_SspecificTime_t, 0));
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006098:	f001 ffa2 	bl	8007fe0 <difftime>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	f7fa fce2 	bl	8000a6c <__aeabi_d2uiz>
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]

        Loc_uint8FuncStatus = E_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    {
 80060b4:	e002      	b.n	80060bc <MRTC_CalculateSeconds+0xa8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }
    return Loc_uint8FuncStatus;
 80060bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3768      	adds	r7, #104	; 0x68
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <MRTC_CalculateDateTime>:
Std_ReturnType MRTC_CalculateDateTime(uint32* P_uint32Seconds, Sdate_t* P_SDate, Stime_t* P_STime)
{
 80060c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060cc:	b098      	sub	sp, #96	; 0x60
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if((P_SDate != NULL_PTR) && (P_STime != NULL_PTR) && (P_uint32Seconds != NULL_PTR))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d06b      	beq.n	80061ba <MRTC_CalculateDateTime+0xf2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d068      	beq.n	80061ba <MRTC_CalculateDateTime+0xf2>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d065      	beq.n	80061ba <MRTC_CalculateDateTime+0xf2>
    {
        time_t Loc_tInputTime = (time_t)(*P_uint32Seconds);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	4698      	mov	r8, r3
 80060f6:	4691      	mov	r9, r2
 80060f8:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50

        struct tm Loc_SspecificTime = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2224      	movs	r2, #36	; 0x24
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fef4 	bl	8007ef2 <memset>
        Loc_SspecificTime.tm_year = (glbl_SReferenceDate . m_years) - 1900; //year since 1900
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <MRTC_CalculateDateTime+0x108>)
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
        Loc_SspecificTime.tm_mon = (glbl_SReferenceDate . m_months) - 1; //Month (0 ---> 11) (Jan = 0)
 8006116:	4b2e      	ldr	r3, [pc, #184]	; (80061d0 <MRTC_CalculateDateTime+0x108>)
 8006118:	789b      	ldrb	r3, [r3, #2]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
        Loc_SspecificTime.tm_mday = (glbl_SReferenceDate . m_days); //Day (1 ---> 31)
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <MRTC_CalculateDateTime+0x108>)
 8006122:	78db      	ldrb	r3, [r3, #3]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	623b      	str	r3, [r7, #32]
        Loc_SspecificTime.tm_hour = (glbl_SReferenceTime . m_hours);
 8006128:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <MRTC_CalculateDateTime+0x10c>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	61fb      	str	r3, [r7, #28]
        Loc_SspecificTime.tm_min = (glbl_SReferenceTime . m_minutes);
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <MRTC_CalculateDateTime+0x10c>)
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	61bb      	str	r3, [r7, #24]
        Loc_SspecificTime.tm_sec = (glbl_SReferenceTime . m_seconds);
 8006138:	4b26      	ldr	r3, [pc, #152]	; (80061d4 <MRTC_CalculateDateTime+0x10c>)
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	617b      	str	r3, [r7, #20]

        time_t Loc_SspecificTime_t = mktime(&Loc_SspecificTime);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4618      	mov	r0, r3
 8006146:	f002 f93b 	bl	80083c0 <mktime>
 800614a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

        time_t Loc_tSumTime = Loc_tInputTime + Loc_SspecificTime_t;
 800614e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006156:	1884      	adds	r4, r0, r2
 8006158:	eb41 0503 	adc.w	r5, r1, r3
 800615c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38

        struct tm* Loc_PBrokenTime = localtime(&Loc_tSumTime);
 8006160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006164:	4618      	mov	r0, r3
 8006166:	f001 ff43 	bl	8007ff0 <localtime>
 800616a:	6478      	str	r0, [r7, #68]	; 0x44

        P_SDate -> m_years = (Loc_PBrokenTime -> tm_year) + 1900;
 800616c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8006176:	b29a      	uxth	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	801a      	strh	r2, [r3, #0]
        P_SDate -> m_months = (Loc_PBrokenTime -> tm_mon) + 1;
 800617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	3301      	adds	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	709a      	strb	r2, [r3, #2]
        P_SDate -> m_days = (Loc_PBrokenTime -> tm_mday);
 800618a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	70da      	strb	r2, [r3, #3]
        P_STime -> m_hours = Loc_PBrokenTime -> tm_hour;
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	701a      	strb	r2, [r3, #0]
        P_STime -> m_minutes = Loc_PBrokenTime -> tm_min;
 800619e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	705a      	strb	r2, [r3, #1]
        P_STime ->m_seconds = Loc_PBrokenTime -> tm_sec;
 80061a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	709a      	strb	r2, [r3, #2]
        Loc_uint8FuncStatus = E_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    {
 80061b8:	e002      	b.n	80061c0 <MRTC_CalculateDateTime+0xf8>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    return Loc_uint8FuncStatus;
 80061c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3760      	adds	r7, #96	; 0x60
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061ce:	bf00      	nop
 80061d0:	20000350 	.word	0x20000350
 80061d4:	20000354 	.word	0x20000354

080061d8 <MRTC_Init>:
 * @return Std_ReturnType
 * @retval E_OK: RTC is Successfully initialized
 * @retval E_NOT_OK: RTC is not initialized 
 */
Std_ReturnType MRTC_Init(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80061de:	2301      	movs	r3, #1
 80061e0:	71fb      	strb	r3, [r7, #7]

    //Enable Power Control Clock in order to access backup and RTC Registers
    SET_BIT(MRCC_APB1ENR_R, MRCC_APB1ENR_PWREN_BIT);
 80061e2:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <MRTC_Init+0xe8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a36      	ldr	r2, [pc, #216]	; (80062c0 <MRTC_Init+0xe8>)
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6013      	str	r3, [r2, #0]
    //Enable access to backup and RTC Registers
    SET_BIT(MPWR_CR_R, MPWR_CR_DBP_BIT);
 80061ee:	4b35      	ldr	r3, [pc, #212]	; (80062c4 <MRTC_Init+0xec>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a34      	ldr	r2, [pc, #208]	; (80062c4 <MRTC_Init+0xec>)
 80061f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f8:	6013      	str	r3, [r2, #0]


    #if MRTC_CLOCK_SOURCE == MRTC_LSE_CLOCK
        //Enable external 32KHz Oscillator
        SET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSEON_BIT);
 80061fa:	4b33      	ldr	r3, [pc, #204]	; (80062c8 <MRTC_Init+0xf0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a32      	ldr	r2, [pc, #200]	; (80062c8 <MRTC_Init+0xf0>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6013      	str	r3, [r2, #0]
        //Wait until external 32KHz Oscillator is ready
        while(!(GET_BIT(MRCC_BDCR_R, MRCC_BDCR_LSERDY_BIT)));
 8006206:	bf00      	nop
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <MRTC_Init+0xf0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f9      	beq.n	8006208 <MRTC_Init+0x30>
        //Set Clock Source of RTC to be Low-speed external clock
        SET_BIT(MRCC_BDCR_R , MRCC_BDCR_RTCSEL_START_BIT);
 8006214:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <MRTC_Init+0xf0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2b      	ldr	r2, [pc, #172]	; (80062c8 <MRTC_Init+0xf0>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621e:	6013      	str	r3, [r2, #0]
        CLR_BIT(MRCC_BDCR_R, (MRCC_BDCR_RTCSEL_START_BIT + 1));
 8006220:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <MRTC_Init+0xf0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <MRTC_Init+0xf0>)
 8006226:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800622a:	6013      	str	r3, [r2, #0]
				SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 800622c:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <MRTC_Init+0xf0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <MRTC_Init+0xf0>)
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	6013      	str	r3, [r2, #0]
        #error "RTC Clock Source is not specified!!"
    #endif /*MRTC_CLOCK_SOURCE*/

    //Enter Configuration mode
    //CLR_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006238:	bf00      	nop
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <MRTC_Init+0xf4>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f9      	beq.n	800623a <MRTC_Init+0x62>
    SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <MRTC_Init+0xf4>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4a20      	ldr	r2, [pc, #128]	; (80062cc <MRTC_Init+0xf4>)
 800624c:	f043 0310 	orr.w	r3, r3, #16
 8006250:	6053      	str	r3, [r2, #4]
    //RTC -> PRLH = 0;
    RTC -> PRLL = 0x7FFF;
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <MRTC_Init+0xf4>)
 8006254:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006258:	60da      	str	r2, [r3, #12]
    CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 800625a:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <MRTC_Init+0xf4>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <MRTC_Init+0xf4>)
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	6053      	str	r3, [r2, #4]
    //SET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT);
	while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006266:	bf00      	nop
 8006268:	4b18      	ldr	r3, [pc, #96]	; (80062cc <MRTC_Init+0xf4>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f9      	beq.n	8006268 <MRTC_Init+0x90>

    #if MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_ENABLED
        SET_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
    #elif MRTC_SECOND_INTERRUPT_STATUS == MRTC_SECOND_INTERRUPT_DISABLED
        CLR_BIT((RTC -> CRH), MRTC_CRH_SECIE_BIT);
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <MRTC_Init+0xf4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <MRTC_Init+0xf4>)
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	6013      	str	r3, [r2, #0]
        #error "RTC Second Interrupt Not Specified"
    #endif /*MRTC_SECOND_INTERRUPT_STATUS*/


    //Check for synchronization of RTC Registers
    CLR_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT);
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <MRTC_Init+0xf4>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4a11      	ldr	r2, [pc, #68]	; (80062cc <MRTC_Init+0xf4>)
 8006286:	f023 0308 	bic.w	r3, r3, #8
 800628a:	6053      	str	r3, [r2, #4]
    while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RSF_BIT)));
 800628c:	bf00      	nop
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <MRTC_Init+0xf4>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f9      	beq.n	800628e <MRTC_Init+0xb6>

    //Enable RTC Clock
    SET_BIT(MRCC_BDCR_R, MRCC_BDCR_RTCEN_BIT);
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <MRTC_Init+0xf0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <MRTC_Init+0xf0>)
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	6013      	str	r3, [r2, #0]
    MRTC_CalculateSeconds(&glbl_SReferenceDate, &glbl_SReferenceTime, &glbl_uint32ReferenceSeconds);
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <MRTC_Init+0xf8>)
 80062a8:	490a      	ldr	r1, [pc, #40]	; (80062d4 <MRTC_Init+0xfc>)
 80062aa:	480b      	ldr	r0, [pc, #44]	; (80062d8 <MRTC_Init+0x100>)
 80062ac:	f7ff feb2 	bl	8006014 <MRTC_CalculateSeconds>

    Loc_uint8FuncStatus = E_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 80062b4:	79fb      	ldrb	r3, [r7, #7]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	4002101c 	.word	0x4002101c
 80062c4:	40007000 	.word	0x40007000
 80062c8:	40021020 	.word	0x40021020
 80062cc:	40002800 	.word	0x40002800
 80062d0:	2000075c 	.word	0x2000075c
 80062d4:	20000354 	.word	0x20000354
 80062d8:	20000350 	.word	0x20000350

080062dc <MRTC_SetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date and time are successfully set
 * @retval E_NOT_OK: Date and time are not set
 */
Std_ReturnType MRTC_SetDateAndTime         (Sdate_t* P_SDateToBeSet, Stime_t* P_STimeToBeSet)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeSet != NULL_PTR) && (P_STimeToBeSet != NULL_PTR))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d03d      	beq.n	800636c <MRTC_SetDateAndTime+0x90>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03a      	beq.n	800636c <MRTC_SetDateAndTime+0x90>
    {
        uint32 Loc_uint32SecondsToBeSet = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateSeconds(P_SDateToBeSet, P_STimeToBeSet, &Loc_uint32SecondsToBeSet);
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	461a      	mov	r2, r3
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fe86 	bl	8006014 <MRTC_CalculateSeconds>
 8006308:	4603      	mov	r3, r0
 800630a:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d129      	bne.n	8006366 <MRTC_SetDateAndTime+0x8a>
        {
            Loc_uint32SecondsToBeSet -= glbl_uint32ReferenceSeconds;
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <MRTC_SetDateAndTime+0xa0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	60bb      	str	r3, [r7, #8]

            //Enter Configuration mode
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 800631c:	bf00      	nop
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f9      	beq.n	800631e <MRTC_SetDateAndTime+0x42>
            SET_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 800632a:	4b15      	ldr	r3, [pc, #84]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4a14      	ldr	r2, [pc, #80]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 8006330:	f043 0310 	orr.w	r3, r3, #16
 8006334:	6053      	str	r3, [r2, #4]
            RTC -> CNTH = (Loc_uint32SecondsToBeSet >> 16);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a11      	ldr	r2, [pc, #68]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	6193      	str	r3, [r2, #24]
            RTC -> CNTL = (Loc_uint32SecondsToBeSet & 0xFFFF);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a0f      	ldr	r2, [pc, #60]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 8006342:	b29b      	uxth	r3, r3
 8006344:	61d3      	str	r3, [r2, #28]
            CLR_BIT((RTC -> CRL), MRTC_CRL_CNF_BIT);
 8006346:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	6053      	str	r3, [r2, #4]
            while(!(GET_BIT((RTC -> CRL), MRTC_CRL_RTOFF_BIT)));
 8006352:	bf00      	nop
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <MRTC_SetDateAndTime+0xa4>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f9      	beq.n	8006354 <MRTC_SetDateAndTime+0x78>

            Loc_uint8FuncStatus = E_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
    {
 8006364:	e004      	b.n	8006370 <MRTC_SetDateAndTime+0x94>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
    {
 800636a:	e001      	b.n	8006370 <MRTC_SetDateAndTime+0x94>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000075c 	.word	0x2000075c
 8006380:	40002800 	.word	0x40002800

08006384 <MRTC_GetDateAndTime>:
 * @return Std_ReturnType
 * @retval E_OK: Date & Time is successfully read
 * @retval E_NOT_OK: Date & Time is not read
 */
Std_ReturnType MRTC_GetDateAndTime  (Sdate_t* P_SDateToBeRead, Stime_t* P_STimeToBeRead)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
    if((P_SDateToBeRead != NULL_PTR) && (P_STimeToBeRead != NULL_PTR))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <MRTC_GetDateAndTime+0x4c>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d018      	beq.n	80063d0 <MRTC_GetDateAndTime+0x4c>
    {
        uint32 Loc_uint32SecondsInReg = ((RTC -> CNTH) << 16) | (RTC -> CNTL);
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <MRTC_GetDateAndTime+0x5c>)
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	041a      	lsls	r2, r3, #16
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <MRTC_GetDateAndTime+0x5c>)
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
        Std_ReturnType Loc_uint8FunctStatus = MRTC_CalculateDateTime(&Loc_uint32SecondsInReg, P_SDateToBeRead, P_STimeToBeRead);
 80063ac:	f107 0308 	add.w	r3, r7, #8
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fe87 	bl	80060c8 <MRTC_CalculateDateTime>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73bb      	strb	r3, [r7, #14]
        if(Loc_uint8FunctStatus == E_OK)
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <MRTC_GetDateAndTime+0x46>
        {

            Loc_uint8FuncStatus = E_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
    {
 80063c8:	e004      	b.n	80063d4 <MRTC_GetDateAndTime+0x50>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
    {
 80063ce:	e001      	b.n	80063d4 <MRTC_GetDateAndTime+0x50>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40002800 	.word	0x40002800

080063e4 <RTC_IRQHandler>:
    }

    return Loc_uint8FuncStatus;
}
void RTC_IRQHandler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
    if(glbl_PCallbackFunc != NULL_PTR)
 80063e8:	4b07      	ldr	r3, [pc, #28]	; (8006408 <RTC_IRQHandler+0x24>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <RTC_IRQHandler+0x1e>
    {
        glbl_PCallbackFunc();
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <RTC_IRQHandler+0x24>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4798      	blx	r3
				CLR_BIT(RTC->CRL, MRTC_CRL_SECF_BIT);
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <RTC_IRQHandler+0x28>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4a04      	ldr	r2, [pc, #16]	; (800640c <RTC_IRQHandler+0x28>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6053      	str	r3, [r2, #4]
    }
    else
    {
        /*Do nothing*/
    }
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000760 	.word	0x20000760
 800640c:	40002800 	.word	0x40002800

08006410 <MSCB_SetPriorityGrouping>:
 * @return Std_ReturnType
 * @retval E_OK: Priority Grouping has been set
 * @retval E_NOT_OK: Priority Grouping has not been set   
 */
Std_ReturnType MSCB_SetPriorityGrouping(uint32 Copy_uint32PriorityGrouping)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint32PriorityGrouping)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a17      	ldr	r2, [pc, #92]	; (800647c <MSCB_SetPriorityGrouping+0x6c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01b      	beq.n	800645c <MSCB_SetPriorityGrouping+0x4c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a15      	ldr	r2, [pc, #84]	; (800647c <MSCB_SetPriorityGrouping+0x6c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d81d      	bhi.n	8006468 <MSCB_SetPriorityGrouping+0x58>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a14      	ldr	r2, [pc, #80]	; (8006480 <MSCB_SetPriorityGrouping+0x70>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <MSCB_SetPriorityGrouping+0x4c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a12      	ldr	r2, [pc, #72]	; (8006480 <MSCB_SetPriorityGrouping+0x70>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d815      	bhi.n	8006468 <MSCB_SetPriorityGrouping+0x58>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a11      	ldr	r2, [pc, #68]	; (8006484 <MSCB_SetPriorityGrouping+0x74>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <MSCB_SetPriorityGrouping+0x4c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a0f      	ldr	r2, [pc, #60]	; (8006484 <MSCB_SetPriorityGrouping+0x74>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d80d      	bhi.n	8006468 <MSCB_SetPriorityGrouping+0x58>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <MSCB_SetPriorityGrouping+0x78>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <MSCB_SetPriorityGrouping+0x4c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0d      	ldr	r2, [pc, #52]	; (800648c <MSCB_SetPriorityGrouping+0x7c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d105      	bne.n	8006468 <MSCB_SetPriorityGrouping+0x58>
        case MSCB_PRIORITY_GROUP_1_SUB_3:
        case MSCB_PRIORITY_GROUP_2_SUB_2:
        case MSCB_PRIORITY_GROUP_3_SUB_1:
        case MSCB_PRIORITY_GROUP_4_SUB_0:
        {
            SCB -> AIRCR = Copy_uint32PriorityGrouping;
 800645c:	4a0c      	ldr	r2, [pc, #48]	; (8006490 <MSCB_SetPriorityGrouping+0x80>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60d3      	str	r3, [r2, #12]
            Loc_uint8FuncStatus = E_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
            break;
 8006466:	e002      	b.n	800646e <MSCB_SetPriorityGrouping+0x5e>
        }
        default:
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
            break;
 800646c:	bf00      	nop
        }
    }
    return Loc_uint8FuncStatus;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	05fa0700 	.word	0x05fa0700
 8006480:	05fa0600 	.word	0x05fa0600
 8006484:	05fa0500 	.word	0x05fa0500
 8006488:	05fa0300 	.word	0x05fa0300
 800648c:	05fa0400 	.word	0x05fa0400
 8006490:	e000ed00 	.word	0xe000ed00

08006494 <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				-Support for SPI Full Duplex Master/Slave only  & NSS HW only for slave
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config* SPI_Config)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	uint16 tmpreg_CR1 = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	81fb      	strh	r3, [r7, #14]
	uint16 tmpreg_CR2 = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a38      	ldr	r2, [pc, #224]	; (800658c <MCAL_SPI_Init+0xf8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d111      	bne.n	80064d2 <MCAL_SPI_Init+0x3e>
	{
		Global_SPI_Config1 = *SPI_Config ;
 80064ae:	4a38      	ldr	r2, [pc, #224]	; (8006590 <MCAL_SPI_Init+0xfc>)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	4614      	mov	r4, r2
 80064b4:	461d      	mov	r5, r3
 80064b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80064be:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 80064c2:	4b34      	ldr	r3, [pc, #208]	; (8006594 <MCAL_SPI_Init+0x100>)
 80064c4:	4a32      	ldr	r2, [pc, #200]	; (8006590 <MCAL_SPI_Init+0xfc>)
 80064c6:	601a      	str	r2, [r3, #0]
		MRCC_EnablePeripheralClock(MRCC_APB2, MRCC_APB2_SPI1_EN);
 80064c8:	210c      	movs	r1, #12
 80064ca:	2003      	movs	r0, #3
 80064cc:	f7ff fd58 	bl	8005f80 <MRCC_EnablePeripheralClock>
 80064d0:	e014      	b.n	80064fc <MCAL_SPI_Init+0x68>

	}else if (SPIx == SPI2)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a30      	ldr	r2, [pc, #192]	; (8006598 <MCAL_SPI_Init+0x104>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d110      	bne.n	80064fc <MCAL_SPI_Init+0x68>
	{
		Global_SPI_Config2 = *SPI_Config ;
 80064da:	4a30      	ldr	r2, [pc, #192]	; (800659c <MCAL_SPI_Init+0x108>)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	4614      	mov	r4, r2
 80064e0:	461d      	mov	r5, r3
 80064e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80064ea:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 80064ee:	4b29      	ldr	r3, [pc, #164]	; (8006594 <MCAL_SPI_Init+0x100>)
 80064f0:	4a2a      	ldr	r2, [pc, #168]	; (800659c <MCAL_SPI_Init+0x108>)
 80064f2:	605a      	str	r2, [r3, #4]
		MRCC_EnablePeripheralClock(MRCC_APB1, MRCC_APB1_SPI2_EN);
 80064f4:	210e      	movs	r1, #14
 80064f6:	2002      	movs	r0, #2
 80064f8:	f7ff fd42 	bl	8005f80 <MRCC_EnablePeripheralClock>

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 80064fc:	2340      	movs	r3, #64	; 0x40
 80064fe:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	881a      	ldrh	r2, [r3, #0]
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	4313      	orrs	r3, r2
 8006508:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	885a      	ldrh	r2, [r3, #2]
 800650e:	89fb      	ldrh	r3, [r7, #14]
 8006510:	4313      	orrs	r3, r2
 8006512:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	889a      	ldrh	r2, [r3, #4]
 8006518:	89fb      	ldrh	r3, [r7, #14]
 800651a:	4313      	orrs	r3, r2
 800651c:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88da      	ldrh	r2, [r3, #6]
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	4313      	orrs	r3, r2
 8006526:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	891a      	ldrh	r2, [r3, #8]
 800652c:	89fb      	ldrh	r3, [r7, #14]
 800652e:	4313      	orrs	r3, r2
 8006530:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	895a      	ldrh	r2, [r3, #10]
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	4313      	orrs	r3, r2
 800653a:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	899b      	ldrh	r3, [r3, #12]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d105      	bne.n	8006550 <MCAL_SPI_Init+0xbc>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	899a      	ldrh	r2, [r3, #12]
 8006548:	89bb      	ldrh	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	81bb      	strh	r3, [r7, #12]
 800654e:	e004      	b.n	800655a <MCAL_SPI_Init+0xc6>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	899a      	ldrh	r2, [r3, #12]
 8006554:	89fb      	ldrh	r3, [r7, #14]
 8006556:	4313      	orrs	r3, r2
 8006558:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	89da      	ldrh	r2, [r3, #14]
 800655e:	89fb      	ldrh	r3, [r7, #14]
 8006560:	4313      	orrs	r3, r2
 8006562:	81fb      	strh	r3, [r7, #14]
//
//	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 8006564:	89fa      	ldrh	r2, [r7, #14]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 800656a:	89ba      	ldrh	r2, [r7, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	605a      	str	r2, [r3, #4]
	  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bdb0      	pop	{r4, r5, r7, pc}
 800658a:	bf00      	nop
 800658c:	40013000 	.word	0x40013000
 8006590:	2000076c 	.word	0x2000076c
 8006594:	20000764 	.word	0x20000764
 8006598:	40003800 	.word	0x40003800
 800659c:	20000784 	.word	0x20000784

080065a0 <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16 *pTxBuffer,enum PollingMechism PollingEn )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0 ;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a17      	ldr	r2, [pc, #92]	; (8006614 <MCAL_SPI_SendData+0x74>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d102      	bne.n	80065c0 <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
 80065be:	e005      	b.n	80065cc <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a15      	ldr	r2, [pc, #84]	; (8006618 <MCAL_SPI_SendData+0x78>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_Direction_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_Direction_1LINE_transmit_only) {
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <MCAL_SPI_SendData+0x7c>)
 80065d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <MCAL_SPI_SendData+0x4a>
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <MCAL_SPI_SendData+0x7c>)
 80065de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e2:	885b      	ldrh	r3, [r3, #2]
 80065e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065e8:	d10e      	bne.n	8006608 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE));
 80065f0:	bf00      	nop
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f9      	beq.n	80065f2 <MCAL_SPI_SendData+0x52>


		SPIx->SPI_DR =  (*pTxBuffer ) ;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]
	else
	{
		//SPIx->SPI_DR =  (*pTxBuffer ) ;//todo
	}

}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40013000 	.word	0x40013000
 8006618:	40003800 	.word	0x40003800
 800661c:	20000764 	.word	0x20000764

08006620 <MCAL_SPI_GPIO_Set_Pins>:




void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	if (SPIx == SPI1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a3a      	ldr	r2, [pc, #232]	; (8006714 <MCAL_SPI_GPIO_Set_Pins+0xf4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d139      	bne.n	80066a4 <MCAL_SPI_GPIO_Set_Pins+0x84>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8006630:	4b39      	ldr	r3, [pc, #228]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d11a      	bne.n	8006670 <MCAL_SPI_GPIO_Set_Pins+0x50>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 800663a:	4b37      	ldr	r3, [pc, #220]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	899b      	ldrh	r3, [r3, #12]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d105      	bne.n	8006650 <MCAL_SPI_GPIO_Set_Pins+0x30>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006644:	2209      	movs	r2, #9
 8006646:	2104      	movs	r1, #4
 8006648:	2000      	movs	r0, #0
 800664a:	f7fe fd3b 	bl	80050c4 <MGPIO_SetPinMode>
				break ;
 800664e:	bf00      	nop
			}


			//		PA5 : SPI1_SCK
			//			Master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006650:	2209      	movs	r2, #9
 8006652:	2105      	movs	r1, #5
 8006654:	2000      	movs	r0, #0
 8006656:	f7fe fd35 	bl	80050c4 <MGPIO_SetPinMode>


			//		PA6 : SPI1_MISO  (supported only full duplex)
			//			Full duplex / master Input floating

			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_INPUT_FLOATING_MODE);
 800665a:	2204      	movs	r2, #4
 800665c:	2106      	movs	r1, #6
 800665e:	2000      	movs	r0, #0
 8006660:	f7fe fd30 	bl	80050c4 <MGPIO_SetPinMode>
			//todo to suport half duplex and simplex


			//		PA7 : SPI1_MOSI
			//			Full duplex / master Alternate function push-pull
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006664:	2209      	movs	r2, #9
 8006666:	2107      	movs	r1, #7
 8006668:	2000      	movs	r0, #0
 800666a:	f7fe fd2b 	bl	80050c4 <MGPIO_SetPinMode>
		}


	}

}
 800666e:	e04c      	b.n	800670a <MCAL_SPI_GPIO_Set_Pins+0xea>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 8006670:	4b29      	ldr	r3, [pc, #164]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	899b      	ldrh	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <MCAL_SPI_GPIO_Set_Pins+0x64>
				MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN4, MGPIO_INPUT_FLOATING_MODE);
 800667a:	2204      	movs	r2, #4
 800667c:	2104      	movs	r1, #4
 800667e:	2000      	movs	r0, #0
 8006680:	f7fe fd20 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN5, MGPIO_INPUT_FLOATING_MODE);
 8006684:	2204      	movs	r2, #4
 8006686:	2105      	movs	r1, #5
 8006688:	2000      	movs	r0, #0
 800668a:	f7fe fd1b 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN6, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 800668e:	2209      	movs	r2, #9
 8006690:	2106      	movs	r1, #6
 8006692:	2000      	movs	r0, #0
 8006694:	f7fe fd16 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTA, MGPIO_PIN7, MGPIO_INPUT_FLOATING_MODE);
 8006698:	2204      	movs	r2, #4
 800669a:	2107      	movs	r1, #7
 800669c:	2000      	movs	r0, #0
 800669e:	f7fe fd11 	bl	80050c4 <MGPIO_SetPinMode>
}
 80066a2:	e032      	b.n	800670a <MCAL_SPI_GPIO_Set_Pins+0xea>
	}else if (SPIx == SPI2)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1d      	ldr	r2, [pc, #116]	; (800671c <MCAL_SPI_GPIO_Set_Pins+0xfc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d12e      	bne.n	800670a <MCAL_SPI_GPIO_Set_Pins+0xea>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d115      	bne.n	80066e2 <MCAL_SPI_GPIO_Set_Pins+0xc2>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	899b      	ldrh	r3, [r3, #12]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d105      	bne.n	80066cc <MCAL_SPI_GPIO_Set_Pins+0xac>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066c0:	2209      	movs	r2, #9
 80066c2:	210c      	movs	r1, #12
 80066c4:	2001      	movs	r0, #1
 80066c6:	f7fe fcfd 	bl	80050c4 <MGPIO_SetPinMode>
				break ;
 80066ca:	bf00      	nop
		MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066cc:	2209      	movs	r2, #9
 80066ce:	210d      	movs	r1, #13
 80066d0:	2001      	movs	r0, #1
 80066d2:	f7fe fcf7 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 80066d6:	2209      	movs	r2, #9
 80066d8:	210f      	movs	r1, #15
 80066da:	2001      	movs	r0, #1
 80066dc:	f7fe fcf2 	bl	80050c4 <MGPIO_SetPinMode>
}
 80066e0:	e013      	b.n	800670a <MCAL_SPI_GPIO_Set_Pins+0xea>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <MCAL_SPI_GPIO_Set_Pins+0xf8>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	899b      	ldrh	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <MCAL_SPI_GPIO_Set_Pins+0xd6>
				MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN12, MGPIO_INPUT_FLOATING_MODE);
 80066ec:	2204      	movs	r2, #4
 80066ee:	210c      	movs	r1, #12
 80066f0:	2001      	movs	r0, #1
 80066f2:	f7fe fce7 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN13, MGPIO_INPUT_FLOATING_MODE);
 80066f6:	2204      	movs	r2, #4
 80066f8:	210d      	movs	r1, #13
 80066fa:	2001      	movs	r0, #1
 80066fc:	f7fe fce2 	bl	80050c4 <MGPIO_SetPinMode>
			MGPIO_SetPinMode(MGPIO_PORTB, MGPIO_PIN15, MGPIO_OUTPUT_AF_PUSH_PULL_10MHZ);
 8006700:	2209      	movs	r2, #9
 8006702:	210f      	movs	r1, #15
 8006704:	2001      	movs	r0, #1
 8006706:	f7fe fcdd 	bl	80050c4 <MGPIO_SetPinMode>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40013000 	.word	0x40013000
 8006718:	20000764 	.word	0x20000764
 800671c:	40003800 	.word	0x40003800

08006720 <STK_uint8CalculateReloadValue>:
 * @return Std_ReturnType
 * @retval E_OK: Reload value is successfully calculated
 * @retval E_NOT_OK: Reload value can not be calculated 
 */
Std_ReturnType STK_uint8CalculateReloadValue(uint32 Copy_uint32msTime, uint32* P_uint32ReloadValue)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
    if(P_uint32ReloadValue != NULL_PTR)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d014      	beq.n	800675e <STK_uint8CalculateReloadValue+0x3e>
    {
        uint32 Loc_uint32ReloadValue = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	60bb      	str	r3, [r7, #8]
        #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
            Loc_uint32ReloadValue = ((Copy_uint32msTime * (STK_AHB_CLOCK_FREQUENCY / 8000)));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	60bb      	str	r3, [r7, #8]
        #elif STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB
            Loc_uint32ReloadValue = ((Copy_uint32msTime* STK_AHB_CLOCK_FREQUENCY) / 1000);
        #else
            #error "SysTick Timer Clock Source is not Identified"
        #endif /*STK_CLOCK_SOURCE*/
        if(Loc_uint32ReloadValue <= 0xFFFFFF)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800674a:	d205      	bcs.n	8006758 <STK_uint8CalculateReloadValue+0x38>
        {
            *P_uint32ReloadValue = Loc_uint32ReloadValue;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	601a      	str	r2, [r3, #0]
            Loc_uint8FuncStatus = E_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]
 8006756:	e004      	b.n	8006762 <STK_uint8CalculateReloadValue+0x42>
        }
        else
        {
            Loc_uint8FuncStatus = E_NOT_OK;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
 800675c:	e001      	b.n	8006762 <STK_uint8CalculateReloadValue+0x42>
        }
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <MSTK_uint8Init>:
 * @return Std_ReturnType
 * @retval E_OK: SysTick Timer is Successfully initialized
 * @retval E_NOT_OK: SysTick Timer is not initialized 
 */
Std_ReturnType MSTK_uint8Init(void)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006776:	2301      	movs	r3, #1
 8006778:	71fb      	strb	r3, [r7, #7]
    /*Initialize value of LOAD and VAL register "To make sure that there is no value in it"*/
    STK -> LOAD = 0x000000;
 800677a:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <MSTK_uint8Init+0x40>)
 800677c:	2200      	movs	r2, #0
 800677e:	605a      	str	r2, [r3, #4]
    STK -> VAL = 0x000000;
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <MSTK_uint8Init+0x40>)
 8006782:	2200      	movs	r2, #0
 8006784:	609a      	str	r2, [r3, #8]

    #if STK_CLOCK_SOURCE == STK_CLOCK_SOURCE_AHB_DIV_8
        CLR_BIT((STK -> CTRL), STK_CTRL_CLKSOURCE);
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <MSTK_uint8Init+0x40>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <MSTK_uint8Init+0x40>)
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	6013      	str	r3, [r2, #0]
    #endif /*STK_CLOCK_SOURCE*/

    #if STK_INTERRUPT_STATUS == STK_INTERRUPT_ENABLED
        SET_BIT((STK -> CTRL), STK_CTRL_TICKINT);
    #elif STK_INTERRUPT_STATUS == STK_INTERRUPT_DISABLED
        CLR_BIT((STK -> CTRL), STK_CTRL_TICKINT);
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <MSTK_uint8Init+0x40>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <MSTK_uint8Init+0x40>)
 8006798:	f023 0302 	bic.w	r3, r3, #2
 800679c:	6013      	str	r3, [r2, #0]
    #else
        #error "Systick Timer Interrupt Status is not Identified"
    #endif /*STK_INTERRUPT_STATUS*/

    Loc_uint8FuncStatus = E_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	71fb      	strb	r3, [r7, #7]
    return Loc_uint8FuncStatus;
 80067a2:	79fb      	ldrb	r3, [r7, #7]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	e000e010 	.word	0xe000e010

080067b4 <MSTK_uint8Delay>:
 * @return Std_ReturnType 
 * @retval E_OK: SysTick Delay is done successfully
 * @retval E_NOT_OK: SysTick Delay is not done 
 */
Std_ReturnType MSTK_uint8Delay(uint32 Copy_uint32msTime)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    uint32 Loc_uint32ReloadValue = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]
    uint8 Loc_uint8ReloadStatus = STK_uint8CalculateReloadValue(Copy_uint32msTime, &Loc_uint32ReloadValue);
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ffa8 	bl	8006720 <STK_uint8CalculateReloadValue>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73bb      	strb	r3, [r7, #14]
    if(Loc_uint8ReloadStatus == E_OK)
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d127      	bne.n	800682a <MSTK_uint8Delay+0x76>
    {
        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a16      	ldr	r2, [pc, #88]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL register
        STK -> VAL = 0x000000;
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]

        //Set Load value
        STK -> LOAD = Loc_uint32ReloadValue;
 80067ec:	4a12      	ldr	r2, [pc, #72]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6053      	str	r3, [r2, #4]

        //Start Timer
        SET_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <MSTK_uint8Delay+0x84>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	6013      	str	r3, [r2, #0]

        //Wait until counter is set to zero
        while(GET_BIT((STK -> CTRL), STK_CTRL_COUNTFLAG) == 0);
 80067fe:	bf00      	nop
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <MSTK_uint8Delay+0x84>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f9      	beq.n	8006800 <MSTK_uint8Delay+0x4c>

        //Disable Timer
        CLR_BIT((STK -> CTRL), STK_CTRL_ENABLE);
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <MSTK_uint8Delay+0x84>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a09      	ldr	r2, [pc, #36]	; (8006838 <MSTK_uint8Delay+0x84>)
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	6013      	str	r3, [r2, #0]

        //Make Sure that there is no value in the VAL & LOAD register
        STK -> VAL = 0x000000;
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <MSTK_uint8Delay+0x84>)
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
        STK -> LOAD = 0x000000;
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <MSTK_uint8Delay+0x84>)
 8006820:	2200      	movs	r2, #0
 8006822:	605a      	str	r2, [r3, #4]

        Loc_uint8FuncStatus = E_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
 8006828:	e001      	b.n	800682e <MSTK_uint8Delay+0x7a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	e000e010 	.word	0xe000e010

0800683c <SysTick_Handler>:
    }
    return Loc_uint8FuncStatus;
}

void SysTick_Handler(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
	if(STK_PCallbackFunc != NULL_PTR)
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <SysTick_Handler+0x18>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <SysTick_Handler+0x12>
	{
		STK_PCallbackFunc();
 8006848:	4b02      	ldr	r3, [pc, #8]	; (8006854 <SysTick_Handler+0x18>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 800684e:	bf00      	nop
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000079c 	.word	0x2000079c

08006858 <MUART_Init>:
 * @return Std_ReturnType
 * @retval E_OK:        UART Peripheral is successfully initialized
 * @retval E_NOT_OK:    UART Peripheral is not initialized
 */
Std_ReturnType MUART_Init(MUART_Select_t Copy_UARTChoice)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006862:	2301      	movs	r3, #1
 8006864:	74fb      	strb	r3, [r7, #19]
    
    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_M_BIT);
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <MUART_Init+0x198>)
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	495f      	ldr	r1, [pc, #380]	; (80069f0 <MUART_Init+0x198>)
 8006874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800687c:	60da      	str	r2, [r3, #12]
    #else
        #error "UART No of Data Bits is not Specified Correctly"
    #endif /*MUART_NO_OF_DATA_BITS*/

    #if MUART_PARITY_CHOICE == MUART_NO_PARITY
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PCE_BIT);
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	4a5b      	ldr	r2, [pc, #364]	; (80069f0 <MUART_Init+0x198>)
 8006882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	4959      	ldr	r1, [pc, #356]	; (80069f0 <MUART_Init+0x198>)
 800688c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006894:	60da      	str	r2, [r3, #12]
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_PS_BIT);
    #else
        #error "UART Parity Control not Specified"
    #endif

    ((UART[Copy_UARTChoice]) -> CR2) &= ~(((uint32) 0b11) << MUART_CR2_STOP_START_BIT);
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	4a55      	ldr	r2, [pc, #340]	; (80069f0 <MUART_Init+0x198>)
 800689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	4953      	ldr	r1, [pc, #332]	; (80069f0 <MUART_Init+0x198>)
 80068a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80068ac:	611a      	str	r2, [r3, #16]
    
    #if ((MUART_NO_OF_STOP_BITS == MUART_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_ONE_HALF_STOP_BIT) || (MUART_NO_OF_STOP_BITS == MUART_TWO_STOP_BIT))
        ((UART[Copy_UARTChoice]) -> CR2) |= (((uint32) MUART_NO_OF_STOP_BITS) << MUART_CR2_STOP_START_BIT);
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	4a4f      	ldr	r2, [pc, #316]	; (80069f0 <MUART_Init+0x198>)
 80068b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	494d      	ldr	r1, [pc, #308]	; (80069f0 <MUART_Init+0x198>)
 80068ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068be:	6912      	ldr	r2, [r2, #16]
 80068c0:	611a      	str	r2, [r3, #16]
    #endif /*MUART_NO_OF_STOP_BITS*/

    #if MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
    #elif MUART_TX_COMPLETE_INT_STATUS == MUART_TX_COMPLETE_INT_DISABLED
        CLR_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TCIE_BIT);
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	4a4a      	ldr	r2, [pc, #296]	; (80069f0 <MUART_Init+0x198>)
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	4948      	ldr	r1, [pc, #288]	; (80069f0 <MUART_Init+0x198>)
 80068d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d8:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Tx Complete Interrupt Status not Specified"
    #endif /*MUART_TX_COMPLETE_INT_STATUS*/

    #if MUART_RX_COMPLETE_INT_STATUS == MUART_RX_COMPLETE_INT_ENABLED
        SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RXNEIE_BIT);
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	4a44      	ldr	r2, [pc, #272]	; (80069f0 <MUART_Init+0x198>)
 80068de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4942      	ldr	r1, [pc, #264]	; (80069f0 <MUART_Init+0x198>)
 80068e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068ec:	f042 0220 	orr.w	r2, r2, #32
 80068f0:	60da      	str	r2, [r3, #12]
    #else
        #error "UART Rx Complete Interrupt Status not Specified"
    #endif /*MUART_RX_COMPLETE_INT_STATUS*/
    
    /********************Calculate Baud Rate**************************/
    float32 Loc_float32UARTDIV = (float32)MUART_CLK_FREQ / (16 * MUART_BAUD_RATE);
 80068f2:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <MUART_Init+0x19c>)
 80068f4:	60fb      	str	r3, [r7, #12]

    uint16 Loc_uint16Mantissa = (uint16)Loc_float32UARTDIV;
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7fa fc22 	bl	8001140 <__aeabi_f2uiz>
 80068fc:	4603      	mov	r3, r0
 80068fe:	82fb      	strh	r3, [r7, #22]
    uint16 Loc_uint16Fraction = (uint16)(((Loc_float32UARTDIV - Loc_uint16Mantissa) * 16) + 0.5);
 8006900:	8afb      	ldrh	r3, [r7, #22]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fa f9dc 	bl	8000cc0 <__aeabi_i2f>
 8006908:	4603      	mov	r3, r0
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7fa f921 	bl	8000b54 <__aeabi_fsub>
 8006912:	4603      	mov	r3, r0
 8006914:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8006918:	4618      	mov	r0, r3
 800691a:	f7fa fa25 	bl	8000d68 <__aeabi_fmul>
 800691e:	4603      	mov	r3, r0
 8006920:	4618      	mov	r0, r3
 8006922:	f7f9 fd9b 	bl	800045c <__aeabi_f2d>
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <MUART_Init+0x1a0>)
 800692c:	f7f9 fc38 	bl	80001a0 <__adddf3>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	f7fa f898 	bl	8000a6c <__aeabi_d2uiz>
 800693c:	4603      	mov	r3, r0
 800693e:	82bb      	strh	r3, [r7, #20]

    if(Loc_uint16Fraction >= 16)
 8006940:	8abb      	ldrh	r3, [r7, #20]
 8006942:	2b0f      	cmp	r3, #15
 8006944:	d905      	bls.n	8006952 <MUART_Init+0xfa>
    {
        Loc_uint16Fraction -= 16;
 8006946:	8abb      	ldrh	r3, [r7, #20]
 8006948:	3b10      	subs	r3, #16
 800694a:	82bb      	strh	r3, [r7, #20]
        Loc_uint16Mantissa += 1;
 800694c:	8afb      	ldrh	r3, [r7, #22]
 800694e:	3301      	adds	r3, #1
 8006950:	82fb      	strh	r3, [r7, #22]
    }
    ((UART[Copy_UARTChoice]) -> BRR) = (Loc_uint16Fraction << MUART_BRR_FRACTION_START_BIT) | (Loc_uint16Mantissa << MUART_BRR_MANTISSA_START_BIT);
 8006952:	8aba      	ldrh	r2, [r7, #20]
 8006954:	8afb      	ldrh	r3, [r7, #22]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	ea42 0103 	orr.w	r1, r2, r3
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <MUART_Init+0x198>)
 8006960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006964:	460a      	mov	r2, r1
 8006966:	609a      	str	r2, [r3, #8]

    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_TE_BIT);
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <MUART_Init+0x198>)
 800696c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	491e      	ldr	r1, [pc, #120]	; (80069f0 <MUART_Init+0x198>)
 8006976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_RE_BIT);
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <MUART_Init+0x198>)
 8006984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	4918      	ldr	r1, [pc, #96]	; (80069f0 <MUART_Init+0x198>)
 800698e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006992:	f042 0204 	orr.w	r2, r2, #4
 8006996:	60da      	str	r2, [r3, #12]
    SET_BIT(((UART[Copy_UARTChoice]) -> CR1), MUART_CR1_UE_BIT);
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <MUART_Init+0x198>)
 800699c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4912      	ldr	r1, [pc, #72]	; (80069f0 <MUART_Init+0x198>)
 80069a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ae:	60da      	str	r2, [r3, #12]
		
	CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <MUART_Init+0x198>)
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	490c      	ldr	r1, [pc, #48]	; (80069f0 <MUART_Init+0x198>)
 80069be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c6:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <MUART_Init+0x198>)
 80069cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	4906      	ldr	r1, [pc, #24]	; (80069f0 <MUART_Init+0x198>)
 80069d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069da:	f022 0220 	bic.w	r2, r2, #32
 80069de:	601a      	str	r2, [r3, #0]
    Loc_uint8FuncStatus = E_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	74fb      	strb	r3, [r7, #19]
    return Loc_uint8FuncStatus;
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000358 	.word	0x20000358
 80069f4:	408ae38e 	.word	0x408ae38e
 80069f8:	3fe00000 	.word	0x3fe00000

080069fc <MUART_TxChar>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully sent
 * @retval E_NOT_OK:    Character not sent 
 */
Std_ReturnType MUART_TxChar(MUART_Select_t Copy_UARTChoice, uint16 Copy_uint16TxChar)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	460a      	mov	r2, r1
 8006a06:	71fb      	strb	r3, [r7, #7]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
    /*Wait until Tx Data Register is empty*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TXE_BIT)));
 8006a10:	bf00      	nop
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <MUART_TxChar+0x74>)
 8006a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f6      	beq.n	8006a12 <MUART_TxChar+0x16>

    #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
        (UART[Copy_UARTChoice] -> DR) = Copy_uint16TxChar & ((uint16)(0x00FF));
 8006a24:	88b9      	ldrh	r1, [r7, #4]
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	4a11      	ldr	r2, [pc, #68]	; (8006a70 <MUART_TxChar+0x74>)
 8006a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2e:	b2ca      	uxtb	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    #else
        #error "UART Number of Data Bits not Specified"
    #endif /*MUART_NO_OF_DATA_BITS*/
    
    /*Wait while transmit is complete*/
    while(!(GET_BIT(((UART[Copy_UARTChoice]) -> SR), MUART_SR_TC_BIT)));
 8006a32:	bf00      	nop
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <MUART_TxChar+0x74>)
 8006a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f6      	beq.n	8006a34 <MUART_TxChar+0x38>
    CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_TC_BIT);
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <MUART_TxChar+0x74>)
 8006a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	4907      	ldr	r1, [pc, #28]	; (8006a70 <MUART_TxChar+0x74>)
 8006a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5c:	601a      	str	r2, [r3, #0]

    Loc_uint8FuncStatus = E_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
    return Loc_uint8FuncStatus;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000358 	.word	0x20000358

08006a74 <MUART_RxCharAsynchronous>:
 * @return Std_ReturnType
 * @retval E_OK:        Character successfully received
 * @retval E_NOT_OK:    Character not received 
 */
Std_ReturnType MUART_RxCharAsynchronous(MUART_Select_t Copy_UARTChoice, uint16* P_uint16RxChar)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
    if(P_uint16RxChar != NULL_PTR)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <MUART_RxCharAsynchronous+0x48>
    {
        #if MUART_NO_OF_DATA_BITS == MUART_EIGHT_DATA_BITS
            #if MUART_PARITY_CHOICE == MUART_NO_PARITY
                *P_uint16RxChar = (((UART[Copy_UARTChoice]) -> DR) & (uint16)(0xFF));
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <MUART_RxCharAsynchronous+0x58>)
 8006a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	801a      	strh	r2, [r3, #0]
                #error "UART Parity Choice is not specified"
            #endif /*MUART_PARITY_CHOICE*/
        #else
            #error "UART Number of Data Bits not Specified"
        #endif /*MUART_NO_OF_DATA_BITS*/
        CLR_BIT(((UART[Copy_UARTChoice]) -> SR) , MUART_SR_RXNE_BIT);
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <MUART_RxCharAsynchronous+0x58>)
 8006aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	4908      	ldr	r1, [pc, #32]	; (8006acc <MUART_RxCharAsynchronous+0x58>)
 8006aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ab0:	f022 0220 	bic.w	r2, r2, #32
 8006ab4:	601a      	str	r2, [r3, #0]
		Loc_uint8FuncStatus = E_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e001      	b.n	8006ac0 <MUART_RxCharAsynchronous+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr
 8006acc:	20000358 	.word	0x20000358

08006ad0 <MUART_TxString>:
 * @return Std_ReturnType
 * @retval E_OK:        String successfully received
 * @retval E_NOT_OK:    String not received 
 */
Std_ReturnType MUART_TxString(MUART_Select_t Copy_UARTChoice, uint8* P_uint8TxString)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
    if(P_uint8TxString != NULL_PTR)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d018      	beq.n	8006b18 <MUART_TxString+0x48>
    {
        uint8 Loc_uint8Index = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006aea:	e00c      	b.n	8006b06 <MUART_TxString+0x36>
        {
            MUART_TxChar(Copy_UARTChoice, P_uint8TxString[Loc_uint8Index]);
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4413      	add	r3, r2
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff ff7e 	bl	80069fc <MUART_TxChar>
            Loc_uint8Index++;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	3301      	adds	r3, #1
 8006b04:	73bb      	strb	r3, [r7, #14]
        while(P_uint8TxString[Loc_uint8Index] != '\0')
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1ec      	bne.n	8006aec <MUART_TxString+0x1c>
        }
        Loc_uint8FuncStatus = E_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
 8006b16:	e001      	b.n	8006b1c <MUART_TxString+0x4c>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <MUART_SetRxCompleteCallback>:
 * @return Std_ReturnType
 * @retval E_OK:        Callback Function successfully set
 * @retval E_NOT_OK:    Callback function not set  
 */
Std_ReturnType MUART_SetRxCompleteCallback(MUART_Select_t Copy_UARTChoice, ptr_to_Callback P_RxCompleteCallbackFunc)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	6039      	str	r1, [r7, #0]
 8006b32:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
    if(P_RxCompleteCallbackFunc != NULL_PTR)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <MUART_SetRxCompleteCallback+0x26>
    {
        Loc_uint8FuncStatus = E_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
        Glbl_PRxCompleteFunc[Copy_UARTChoice] = P_RxCompleteCallbackFunc;
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	4906      	ldr	r1, [pc, #24]	; (8006b60 <MUART_SetRxCompleteCallback+0x38>)
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b4c:	e001      	b.n	8006b52 <MUART_SetRxCompleteCallback+0x2a>
    }
    else
    {
        Loc_uint8FuncStatus = E_NOT_OK;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]
    }
    return Loc_uint8FuncStatus;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	200007a0 	.word	0x200007a0

08006b64 <MUART_SendIntegerValue>:

Std_ReturnType MUART_SendIntegerValue(MUART_Select_t Copy_UARTChoice, uint32 Copy_uint32Value)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Loc_uint8FuncStatus = E_NOT_OK;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    if(Copy_uint32Value == 0)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <MUART_SendIntegerValue+0x2c>
    {
        MUART_TxChar(Copy_UARTChoice, (Copy_uint32Value + 48));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff37 	bl	80069fc <MUART_TxChar>
 8006b8e:	e051      	b.n	8006c34 <MUART_SendIntegerValue+0xd0>
    }
    else
    {
        uint32 Loc_uint8TempValue = Copy_uint32Value;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
        uint8 Loc_uint8CharArray[20] = {0},Loc_uint8Count = 0, Loc_uint8Index = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while(Loc_uint8TempValue != 0)
 8006bb2:	e01d      	b.n	8006bf0 <MUART_SendIntegerValue+0x8c>
        {
            Loc_uint8CharArray[Loc_uint8Count] = ((Loc_uint8TempValue % 10) + 48);
 8006bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <MUART_SendIntegerValue+0xe4>)
 8006bb8:	fba3 2301 	umull	r2, r3, r3, r1
 8006bbc:	08da      	lsrs	r2, r3, #3
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	1aca      	subs	r2, r1, r3
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bce:	3230      	adds	r2, #48	; 0x30
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	3328      	adds	r3, #40	; 0x28
 8006bd4:	443b      	add	r3, r7
 8006bd6:	f803 2c1c 	strb.w	r2, [r3, #-28]
            Loc_uint8TempValue /= 10;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <MUART_SendIntegerValue+0xe4>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
            Loc_uint8Count++;
 8006be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bea:	3301      	adds	r3, #1
 8006bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        while(Loc_uint8TempValue != 0)
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1de      	bne.n	8006bb4 <MUART_SendIntegerValue+0x50>
        }
        
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bfc:	e014      	b.n	8006c28 <MUART_SendIntegerValue+0xc4>
        {
            MUART_TxChar(Copy_UARTChoice, Loc_uint8CharArray[Loc_uint8Count - Loc_uint8Index - 1]);
 8006bfe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006c02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	3328      	adds	r3, #40	; 0x28
 8006c0c:	443b      	add	r3, r7
 8006c0e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff feef 	bl	80069fc <MUART_TxChar>
        for(Loc_uint8Index = 0; Loc_uint8Index < Loc_uint8Count; Loc_uint8Index++)
 8006c1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c22:	3301      	adds	r3, #1
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d3e4      	bcc.n	8006bfe <MUART_SendIntegerValue+0x9a>
        }
    }

    Loc_uint8FuncStatus = E_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    return Loc_uint8FuncStatus;
 8006c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	cccccccd 	.word	0xcccccccd

08006c4c <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[0] != NULL_PTR)
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <USART1_IRQHandler+0x38>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <USART1_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[0])();
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <USART1_IRQHandler+0x38>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_TC_BIT);
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <USART1_IRQHandler+0x3c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <USART1_IRQHandler+0x3c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6c:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[0]) -> SR) , MUART_SR_RXNE_BIT);
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <USART1_IRQHandler+0x3c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <USART1_IRQHandler+0x3c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0220 	bic.w	r2, r2, #32
 8006c7c:	601a      	str	r2, [r3, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200007a0 	.word	0x200007a0
 8006c88:	20000358 	.word	0x20000358

08006c8c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
	if(Glbl_PRxCompleteFunc[1] != NULL_PTR)
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <USART2_IRQHandler+0x38>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <USART2_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[1])();
 8006c98:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <USART2_IRQHandler+0x38>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_TC_BIT);
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <USART2_IRQHandler+0x3c>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <USART2_IRQHandler+0x3c>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cac:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[1]) -> SR) , MUART_SR_RXNE_BIT);
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <USART2_IRQHandler+0x3c>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <USART2_IRQHandler+0x3c>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f022 0220 	bic.w	r2, r2, #32
 8006cbc:	601a      	str	r2, [r3, #0]

}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200007a0 	.word	0x200007a0
 8006cc8:	20000358 	.word	0x20000358

08006ccc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
    if(Glbl_PRxCompleteFunc[2] != NULL_PTR)
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <USART3_IRQHandler+0x38>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <USART3_IRQHandler+0x12>
    {
        (Glbl_PRxCompleteFunc[2])();
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <USART3_IRQHandler+0x38>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4798      	blx	r3
    }
    else
    {
        /*Do nothing*/
    }
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_TC_BIT);
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <USART3_IRQHandler+0x3c>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <USART3_IRQHandler+0x3c>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cec:	601a      	str	r2, [r3, #0]
    CLR_BIT(((UART[2]) -> SR) , MUART_SR_RXNE_BIT);
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <USART3_IRQHandler+0x3c>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <USART3_IRQHandler+0x3c>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f022 0220 	bic.w	r2, r2, #32
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	bf00      	nop
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200007a0 	.word	0x200007a0
 8006d08:	20000358 	.word	0x20000358

08006d0c <main>:
#include "APP/Signal_Conditioning/signal_conditioning.h"
#include "APP/SpectroStatus/SpectroStatus_Interface.h"


int main(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
	//
	//MGPIO_SetPinValue(MGPIO_PORTA, MGPIO_PIN9, MGPIO_HIGH);

	//	HMOTOR_GoHome(HMOTOR_WL_SELECT);

	SPECTRO_InitSystem();
 8006d12:	f7fb fb4f 	bl	80023b4 <SPECTRO_InitSystem>
	SPECTRO_Status_t Loc_uint32SpectroStatus = ERROR_INITIALIZING;
 8006d16:	2303      	movs	r3, #3
 8006d18:	72fb      	strb	r3, [r7, #11]
	uint32 Loc_uint32MotorSteps = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]
	SpectroStatus_GetCurrentStatus(&Loc_uint32SpectroStatus);
 8006d1e:	f107 030b 	add.w	r3, r7, #11
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fb ffc2 	bl	8002cac <SpectroStatus_GetCurrentStatus>

	if(Loc_uint32SpectroStatus == IDLE)
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d132      	bne.n	8006d94 <main+0x88>
	{
		HMOTOR_MoveWLSelectMotor(1000);
 8006d2e:	481b      	ldr	r0, [pc, #108]	; (8006d9c <main+0x90>)
 8006d30:	f7fd fc2e 	bl	8004590 <HMOTOR_MoveWLSelectMotor>
		HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32MotorSteps);
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	2002      	movs	r0, #2
 8006d3a:	f7fd fe2b 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
		MUART_SendIntegerValue(UART3, Loc_uint32MotorSteps);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4619      	mov	r1, r3
 8006d42:	2002      	movs	r0, #2
 8006d44:	f7ff ff0e 	bl	8006b64 <MUART_SendIntegerValue>
		MUART_TxChar(UART3, '\n');
 8006d48:	210a      	movs	r1, #10
 8006d4a:	2002      	movs	r0, #2
 8006d4c:	f7ff fe56 	bl	80069fc <MUART_TxChar>

		HMOTOR_MoveWLSelectMotor(500);
 8006d50:	4813      	ldr	r0, [pc, #76]	; (8006da0 <main+0x94>)
 8006d52:	f7fd fc1d 	bl	8004590 <HMOTOR_MoveWLSelectMotor>
		HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32MotorSteps);
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	2002      	movs	r0, #2
 8006d5c:	f7fd fe1a 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
		MUART_SendIntegerValue(UART3, Loc_uint32MotorSteps);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4619      	mov	r1, r3
 8006d64:	2002      	movs	r0, #2
 8006d66:	f7ff fefd 	bl	8006b64 <MUART_SendIntegerValue>
		MUART_TxChar(UART3, '\n');
 8006d6a:	210a      	movs	r1, #10
 8006d6c:	2002      	movs	r0, #2
 8006d6e:	f7ff fe45 	bl	80069fc <MUART_TxChar>

		HMOTOR_MoveWLSelectMotor(900);
 8006d72:	480c      	ldr	r0, [pc, #48]	; (8006da4 <main+0x98>)
 8006d74:	f7fd fc0c 	bl	8004590 <HMOTOR_MoveWLSelectMotor>
		HMOTOR_GetCurrentMotorSteps(HMOTOR_WL_SELECT, &Loc_uint32MotorSteps);
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	2002      	movs	r0, #2
 8006d7e:	f7fd fe09 	bl	8004994 <HMOTOR_GetCurrentMotorSteps>
		MUART_SendIntegerValue(UART3, Loc_uint32MotorSteps);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	2002      	movs	r0, #2
 8006d88:	f7ff feec 	bl	8006b64 <MUART_SendIntegerValue>
		MUART_TxChar(UART3, '\n');
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	2002      	movs	r0, #2
 8006d90:	f7ff fe34 	bl	80069fc <MUART_TxChar>
	////
	////	//float32 Loc_float32Ref[2] = {0.0};
	////	float32 Loc_float32Gain = 0.0;
	////
	////
	uint32 Loc_uint32Index = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
	//			max_index = Loc_uint32Index;
	//		}
	//	}

	//HMOTOR_Step(HMOTOR_WL_SELECT, 500, HMOTORS_CCLKWISE_DIRECTION, 10);
	while(1)
 8006d98:	e7fe      	b.n	8006d98 <main+0x8c>
 8006d9a:	bf00      	nop
 8006d9c:	447a0000 	.word	0x447a0000
 8006da0:	43fa0000 	.word	0x43fa0000
 8006da4:	44610000 	.word	0x44610000

08006da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return 1;
 8006dac:	2301      	movs	r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <_kill>:

int _kill(int pid, int sig)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006dc0:	f001 ffba 	bl	8008d38 <__errno>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2216      	movs	r2, #22
 8006dc8:	601a      	str	r2, [r3, #0]
  return -1;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <_exit>:

void _exit (int status)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006dde:	f04f 31ff 	mov.w	r1, #4294967295
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ffe7 	bl	8006db6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006de8:	e7fe      	b.n	8006de8 <_exit+0x12>

08006dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e00a      	b.n	8006e12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006dfc:	f3af 8000 	nop.w
 8006e00:	4601      	mov	r1, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	60ba      	str	r2, [r7, #8]
 8006e08:	b2ca      	uxtb	r2, r1
 8006e0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	dbf0      	blt.n	8006dfc <_read+0x12>
  }

  return len;
 8006e1a:	687b      	ldr	r3, [r7, #4]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e009      	b.n	8006e4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	60ba      	str	r2, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3301      	adds	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	dbf1      	blt.n	8006e36 <_write+0x12>
  }
  return len;
 8006e52:	687b      	ldr	r3, [r7, #4]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_close>:

int _close(int file)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e82:	605a      	str	r2, [r3, #4]
  return 0;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <_isatty>:

int _isatty(int file)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ec4:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <_sbrk+0x5c>)
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <_sbrk+0x60>)
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <_sbrk+0x64>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ed8:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <_sbrk+0x64>)
 8006eda:	4a12      	ldr	r2, [pc, #72]	; (8006f24 <_sbrk+0x68>)
 8006edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <_sbrk+0x64>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d207      	bcs.n	8006efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006eec:	f001 ff24 	bl	8008d38 <__errno>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	220c      	movs	r2, #12
 8006ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8006efa:	e009      	b.n	8006f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <_sbrk+0x64>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <_sbrk+0x64>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <_sbrk+0x64>)
 8006f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20005000 	.word	0x20005000
 8006f1c:	00000400 	.word	0x00000400
 8006f20:	200007b0 	.word	0x200007b0
 8006f24:	20000928 	.word	0x20000928

08006f28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f28:	480d      	ldr	r0, [pc, #52]	; (8006f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f30:	480c      	ldr	r0, [pc, #48]	; (8006f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f32:	490d      	ldr	r1, [pc, #52]	; (8006f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f34:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <LoopForever+0xe>)
  movs r3, #0
 8006f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f38:	e002      	b.n	8006f40 <LoopCopyDataInit>

08006f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f3e:	3304      	adds	r3, #4

08006f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f44:	d3f9      	bcc.n	8006f3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f48:	4c0a      	ldr	r4, [pc, #40]	; (8006f74 <LoopForever+0x16>)
  movs r3, #0
 8006f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f4c:	e001      	b.n	8006f52 <LoopFillZerobss>

08006f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f50:	3204      	adds	r2, #4

08006f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f54:	d3fb      	bcc.n	8006f4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006f56:	f001 fef5 	bl	8008d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f5a:	f7ff fed7 	bl	8006d0c <main>

08006f5e <LoopForever>:

LoopForever:
  b LoopForever
 8006f5e:	e7fe      	b.n	8006f5e <LoopForever>
  ldr   r0, =_estack
 8006f60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f68:	200005a0 	.word	0x200005a0
  ldr r2, =_sidata
 8006f6c:	0800caf8 	.word	0x0800caf8
  ldr r2, =_sbss
 8006f70:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8006f74:	20000924 	.word	0x20000924

08006f78 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f78:	e7fe      	b.n	8006f78 <ADC3_IRQHandler>

08006f7a <atof>:
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f000 be1c 	b.w	8007bb8 <strtod>

08006f80 <atoi>:
 8006f80:	220a      	movs	r2, #10
 8006f82:	2100      	movs	r1, #0
 8006f84:	f000 bea4 	b.w	8007cd0 <strtol>

08006f88 <sulp>:
 8006f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4690      	mov	r8, r2
 8006f90:	f002 ff70 	bl	8009e74 <__ulp>
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d011      	beq.n	8006fc2 <sulp+0x3a>
 8006f9e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dd0b      	ble.n	8006fc2 <sulp+0x3a>
 8006faa:	2400      	movs	r4, #0
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	462b      	mov	r3, r5
 8006fba:	f7f9 faa7 	bl	800050c <__aeabi_dmul>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fca:	0000      	movs	r0, r0
 8006fcc:	0000      	movs	r0, r0
	...

08006fd0 <_strtod_l>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	b09f      	sub	sp, #124	; 0x7c
 8006fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	921a      	str	r2, [sp, #104]	; 0x68
 8006fde:	460d      	mov	r5, r1
 8006fe0:	f04f 0800 	mov.w	r8, #0
 8006fe4:	f04f 0900 	mov.w	r9, #0
 8006fe8:	460a      	mov	r2, r1
 8006fea:	9219      	str	r2, [sp, #100]	; 0x64
 8006fec:	7811      	ldrb	r1, [r2, #0]
 8006fee:	292b      	cmp	r1, #43	; 0x2b
 8006ff0:	d04a      	beq.n	8007088 <_strtod_l+0xb8>
 8006ff2:	d838      	bhi.n	8007066 <_strtod_l+0x96>
 8006ff4:	290d      	cmp	r1, #13
 8006ff6:	d832      	bhi.n	800705e <_strtod_l+0x8e>
 8006ff8:	2908      	cmp	r1, #8
 8006ffa:	d832      	bhi.n	8007062 <_strtod_l+0x92>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d03b      	beq.n	8007078 <_strtod_l+0xa8>
 8007000:	2200      	movs	r2, #0
 8007002:	920e      	str	r2, [sp, #56]	; 0x38
 8007004:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007006:	7832      	ldrb	r2, [r6, #0]
 8007008:	2a30      	cmp	r2, #48	; 0x30
 800700a:	f040 80b2 	bne.w	8007172 <_strtod_l+0x1a2>
 800700e:	7872      	ldrb	r2, [r6, #1]
 8007010:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007014:	2a58      	cmp	r2, #88	; 0x58
 8007016:	d16e      	bne.n	80070f6 <_strtod_l+0x126>
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800701c:	4620      	mov	r0, r4
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	ab1a      	add	r3, sp, #104	; 0x68
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4a8c      	ldr	r2, [pc, #560]	; (8007258 <_strtod_l+0x288>)
 8007026:	ab1b      	add	r3, sp, #108	; 0x6c
 8007028:	a919      	add	r1, sp, #100	; 0x64
 800702a:	f001 ffb3 	bl	8008f94 <__gethex>
 800702e:	f010 070f 	ands.w	r7, r0, #15
 8007032:	4605      	mov	r5, r0
 8007034:	d005      	beq.n	8007042 <_strtod_l+0x72>
 8007036:	2f06      	cmp	r7, #6
 8007038:	d128      	bne.n	800708c <_strtod_l+0xbc>
 800703a:	2300      	movs	r3, #0
 800703c:	3601      	adds	r6, #1
 800703e:	9619      	str	r6, [sp, #100]	; 0x64
 8007040:	930e      	str	r3, [sp, #56]	; 0x38
 8007042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 85a0 	bne.w	8007b8a <_strtod_l+0xbba>
 800704a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800704c:	b1cb      	cbz	r3, 8007082 <_strtod_l+0xb2>
 800704e:	4642      	mov	r2, r8
 8007050:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	b01f      	add	sp, #124	; 0x7c
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	2920      	cmp	r1, #32
 8007060:	d1ce      	bne.n	8007000 <_strtod_l+0x30>
 8007062:	3201      	adds	r2, #1
 8007064:	e7c1      	b.n	8006fea <_strtod_l+0x1a>
 8007066:	292d      	cmp	r1, #45	; 0x2d
 8007068:	d1ca      	bne.n	8007000 <_strtod_l+0x30>
 800706a:	2101      	movs	r1, #1
 800706c:	910e      	str	r1, [sp, #56]	; 0x38
 800706e:	1c51      	adds	r1, r2, #1
 8007070:	9119      	str	r1, [sp, #100]	; 0x64
 8007072:	7852      	ldrb	r2, [r2, #1]
 8007074:	2a00      	cmp	r2, #0
 8007076:	d1c5      	bne.n	8007004 <_strtod_l+0x34>
 8007078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800707a:	9519      	str	r5, [sp, #100]	; 0x64
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 8582 	bne.w	8007b86 <_strtod_l+0xbb6>
 8007082:	4642      	mov	r2, r8
 8007084:	464b      	mov	r3, r9
 8007086:	e7e5      	b.n	8007054 <_strtod_l+0x84>
 8007088:	2100      	movs	r1, #0
 800708a:	e7ef      	b.n	800706c <_strtod_l+0x9c>
 800708c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800708e:	b13a      	cbz	r2, 80070a0 <_strtod_l+0xd0>
 8007090:	2135      	movs	r1, #53	; 0x35
 8007092:	a81c      	add	r0, sp, #112	; 0x70
 8007094:	f002 ffda 	bl	800a04c <__copybits>
 8007098:	4620      	mov	r0, r4
 800709a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800709c:	f002 fbbe 	bl	800981c <_Bfree>
 80070a0:	3f01      	subs	r7, #1
 80070a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80070a4:	2f04      	cmp	r7, #4
 80070a6:	d806      	bhi.n	80070b6 <_strtod_l+0xe6>
 80070a8:	e8df f007 	tbb	[pc, r7]
 80070ac:	201d0314 	.word	0x201d0314
 80070b0:	14          	.byte	0x14
 80070b1:	00          	.byte	0x00
 80070b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80070b6:	05e9      	lsls	r1, r5, #23
 80070b8:	bf48      	it	mi
 80070ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80070be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070c2:	0d1b      	lsrs	r3, r3, #20
 80070c4:	051b      	lsls	r3, r3, #20
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1bb      	bne.n	8007042 <_strtod_l+0x72>
 80070ca:	f001 fe35 	bl	8008d38 <__errno>
 80070ce:	2322      	movs	r3, #34	; 0x22
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	e7b6      	b.n	8007042 <_strtod_l+0x72>
 80070d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070d8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80070dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070e4:	e7e7      	b.n	80070b6 <_strtod_l+0xe6>
 80070e6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800725c <_strtod_l+0x28c>
 80070ea:	e7e4      	b.n	80070b6 <_strtod_l+0xe6>
 80070ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80070f0:	f04f 38ff 	mov.w	r8, #4294967295
 80070f4:	e7df      	b.n	80070b6 <_strtod_l+0xe6>
 80070f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	9219      	str	r2, [sp, #100]	; 0x64
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d0f9      	beq.n	80070f6 <_strtod_l+0x126>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d09d      	beq.n	8007042 <_strtod_l+0x72>
 8007106:	2301      	movs	r3, #1
 8007108:	f04f 0a00 	mov.w	sl, #0
 800710c:	220a      	movs	r2, #10
 800710e:	46d3      	mov	fp, sl
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007114:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007118:	930b      	str	r3, [sp, #44]	; 0x2c
 800711a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800711c:	7806      	ldrb	r6, [r0, #0]
 800711e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007122:	b2d9      	uxtb	r1, r3
 8007124:	2909      	cmp	r1, #9
 8007126:	d926      	bls.n	8007176 <_strtod_l+0x1a6>
 8007128:	2201      	movs	r2, #1
 800712a:	494d      	ldr	r1, [pc, #308]	; (8007260 <_strtod_l+0x290>)
 800712c:	f000 fee9 	bl	8007f02 <strncmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	d030      	beq.n	8007196 <_strtod_l+0x1c6>
 8007134:	2000      	movs	r0, #0
 8007136:	4632      	mov	r2, r6
 8007138:	4603      	mov	r3, r0
 800713a:	465e      	mov	r6, fp
 800713c:	9008      	str	r0, [sp, #32]
 800713e:	2a65      	cmp	r2, #101	; 0x65
 8007140:	d001      	beq.n	8007146 <_strtod_l+0x176>
 8007142:	2a45      	cmp	r2, #69	; 0x45
 8007144:	d113      	bne.n	800716e <_strtod_l+0x19e>
 8007146:	b91e      	cbnz	r6, 8007150 <_strtod_l+0x180>
 8007148:	9a05      	ldr	r2, [sp, #20]
 800714a:	4302      	orrs	r2, r0
 800714c:	d094      	beq.n	8007078 <_strtod_l+0xa8>
 800714e:	2600      	movs	r6, #0
 8007150:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007152:	1c6a      	adds	r2, r5, #1
 8007154:	9219      	str	r2, [sp, #100]	; 0x64
 8007156:	786a      	ldrb	r2, [r5, #1]
 8007158:	2a2b      	cmp	r2, #43	; 0x2b
 800715a:	d074      	beq.n	8007246 <_strtod_l+0x276>
 800715c:	2a2d      	cmp	r2, #45	; 0x2d
 800715e:	d078      	beq.n	8007252 <_strtod_l+0x282>
 8007160:	f04f 0c00 	mov.w	ip, #0
 8007164:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007168:	2909      	cmp	r1, #9
 800716a:	d97f      	bls.n	800726c <_strtod_l+0x29c>
 800716c:	9519      	str	r5, [sp, #100]	; 0x64
 800716e:	2700      	movs	r7, #0
 8007170:	e09e      	b.n	80072b0 <_strtod_l+0x2e0>
 8007172:	2300      	movs	r3, #0
 8007174:	e7c8      	b.n	8007108 <_strtod_l+0x138>
 8007176:	f1bb 0f08 	cmp.w	fp, #8
 800717a:	bfd8      	it	le
 800717c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800717e:	f100 0001 	add.w	r0, r0, #1
 8007182:	bfd6      	itet	le
 8007184:	fb02 3301 	mlale	r3, r2, r1, r3
 8007188:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800718c:	930a      	strle	r3, [sp, #40]	; 0x28
 800718e:	f10b 0b01 	add.w	fp, fp, #1
 8007192:	9019      	str	r0, [sp, #100]	; 0x64
 8007194:	e7c1      	b.n	800711a <_strtod_l+0x14a>
 8007196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	9219      	str	r2, [sp, #100]	; 0x64
 800719c:	785a      	ldrb	r2, [r3, #1]
 800719e:	f1bb 0f00 	cmp.w	fp, #0
 80071a2:	d037      	beq.n	8007214 <_strtod_l+0x244>
 80071a4:	465e      	mov	r6, fp
 80071a6:	9008      	str	r0, [sp, #32]
 80071a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071ac:	2b09      	cmp	r3, #9
 80071ae:	d912      	bls.n	80071d6 <_strtod_l+0x206>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e7c4      	b.n	800713e <_strtod_l+0x16e>
 80071b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071b6:	3001      	adds	r0, #1
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	9219      	str	r2, [sp, #100]	; 0x64
 80071bc:	785a      	ldrb	r2, [r3, #1]
 80071be:	2a30      	cmp	r2, #48	; 0x30
 80071c0:	d0f8      	beq.n	80071b4 <_strtod_l+0x1e4>
 80071c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	f200 84e4 	bhi.w	8007b94 <_strtod_l+0xbc4>
 80071cc:	9008      	str	r0, [sp, #32]
 80071ce:	2000      	movs	r0, #0
 80071d0:	4606      	mov	r6, r0
 80071d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d6:	3a30      	subs	r2, #48	; 0x30
 80071d8:	f100 0301 	add.w	r3, r0, #1
 80071dc:	d014      	beq.n	8007208 <_strtod_l+0x238>
 80071de:	9908      	ldr	r1, [sp, #32]
 80071e0:	eb00 0c06 	add.w	ip, r0, r6
 80071e4:	4419      	add	r1, r3
 80071e6:	9108      	str	r1, [sp, #32]
 80071e8:	4633      	mov	r3, r6
 80071ea:	210a      	movs	r1, #10
 80071ec:	4563      	cmp	r3, ip
 80071ee:	d113      	bne.n	8007218 <_strtod_l+0x248>
 80071f0:	1833      	adds	r3, r6, r0
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	f106 0601 	add.w	r6, r6, #1
 80071f8:	4406      	add	r6, r0
 80071fa:	dc1a      	bgt.n	8007232 <_strtod_l+0x262>
 80071fc:	230a      	movs	r3, #10
 80071fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007200:	fb03 2301 	mla	r3, r3, r1, r2
 8007204:	930a      	str	r3, [sp, #40]	; 0x28
 8007206:	2300      	movs	r3, #0
 8007208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800720a:	4618      	mov	r0, r3
 800720c:	1c51      	adds	r1, r2, #1
 800720e:	9119      	str	r1, [sp, #100]	; 0x64
 8007210:	7852      	ldrb	r2, [r2, #1]
 8007212:	e7c9      	b.n	80071a8 <_strtod_l+0x1d8>
 8007214:	4658      	mov	r0, fp
 8007216:	e7d2      	b.n	80071be <_strtod_l+0x1ee>
 8007218:	2b08      	cmp	r3, #8
 800721a:	f103 0301 	add.w	r3, r3, #1
 800721e:	dc03      	bgt.n	8007228 <_strtod_l+0x258>
 8007220:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007222:	434f      	muls	r7, r1
 8007224:	970a      	str	r7, [sp, #40]	; 0x28
 8007226:	e7e1      	b.n	80071ec <_strtod_l+0x21c>
 8007228:	2b10      	cmp	r3, #16
 800722a:	bfd8      	it	le
 800722c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007230:	e7dc      	b.n	80071ec <_strtod_l+0x21c>
 8007232:	2e10      	cmp	r6, #16
 8007234:	bfdc      	itt	le
 8007236:	230a      	movle	r3, #10
 8007238:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800723c:	e7e3      	b.n	8007206 <_strtod_l+0x236>
 800723e:	2300      	movs	r3, #0
 8007240:	9308      	str	r3, [sp, #32]
 8007242:	2301      	movs	r3, #1
 8007244:	e780      	b.n	8007148 <_strtod_l+0x178>
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	1caa      	adds	r2, r5, #2
 800724c:	9219      	str	r2, [sp, #100]	; 0x64
 800724e:	78aa      	ldrb	r2, [r5, #2]
 8007250:	e788      	b.n	8007164 <_strtod_l+0x194>
 8007252:	f04f 0c01 	mov.w	ip, #1
 8007256:	e7f8      	b.n	800724a <_strtod_l+0x27a>
 8007258:	0800c52c 	.word	0x0800c52c
 800725c:	7ff00000 	.word	0x7ff00000
 8007260:	0800c51c 	.word	0x0800c51c
 8007264:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007266:	1c51      	adds	r1, r2, #1
 8007268:	9119      	str	r1, [sp, #100]	; 0x64
 800726a:	7852      	ldrb	r2, [r2, #1]
 800726c:	2a30      	cmp	r2, #48	; 0x30
 800726e:	d0f9      	beq.n	8007264 <_strtod_l+0x294>
 8007270:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007274:	2908      	cmp	r1, #8
 8007276:	f63f af7a 	bhi.w	800716e <_strtod_l+0x19e>
 800727a:	3a30      	subs	r2, #48	; 0x30
 800727c:	9209      	str	r2, [sp, #36]	; 0x24
 800727e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007280:	920c      	str	r2, [sp, #48]	; 0x30
 8007282:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007284:	1c57      	adds	r7, r2, #1
 8007286:	9719      	str	r7, [sp, #100]	; 0x64
 8007288:	7852      	ldrb	r2, [r2, #1]
 800728a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800728e:	f1be 0f09 	cmp.w	lr, #9
 8007292:	d938      	bls.n	8007306 <_strtod_l+0x336>
 8007294:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007296:	1a7f      	subs	r7, r7, r1
 8007298:	2f08      	cmp	r7, #8
 800729a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800729e:	dc03      	bgt.n	80072a8 <_strtod_l+0x2d8>
 80072a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a2:	428f      	cmp	r7, r1
 80072a4:	bfa8      	it	ge
 80072a6:	460f      	movge	r7, r1
 80072a8:	f1bc 0f00 	cmp.w	ip, #0
 80072ac:	d000      	beq.n	80072b0 <_strtod_l+0x2e0>
 80072ae:	427f      	negs	r7, r7
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	d14f      	bne.n	8007354 <_strtod_l+0x384>
 80072b4:	9905      	ldr	r1, [sp, #20]
 80072b6:	4301      	orrs	r1, r0
 80072b8:	f47f aec3 	bne.w	8007042 <_strtod_l+0x72>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f47f aedb 	bne.w	8007078 <_strtod_l+0xa8>
 80072c2:	2a69      	cmp	r2, #105	; 0x69
 80072c4:	d029      	beq.n	800731a <_strtod_l+0x34a>
 80072c6:	dc26      	bgt.n	8007316 <_strtod_l+0x346>
 80072c8:	2a49      	cmp	r2, #73	; 0x49
 80072ca:	d026      	beq.n	800731a <_strtod_l+0x34a>
 80072cc:	2a4e      	cmp	r2, #78	; 0x4e
 80072ce:	f47f aed3 	bne.w	8007078 <_strtod_l+0xa8>
 80072d2:	499a      	ldr	r1, [pc, #616]	; (800753c <_strtod_l+0x56c>)
 80072d4:	a819      	add	r0, sp, #100	; 0x64
 80072d6:	f002 f89f 	bl	8009418 <__match>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aecc 	beq.w	8007078 <_strtod_l+0xa8>
 80072e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b28      	cmp	r3, #40	; 0x28
 80072e6:	d12f      	bne.n	8007348 <_strtod_l+0x378>
 80072e8:	4995      	ldr	r1, [pc, #596]	; (8007540 <_strtod_l+0x570>)
 80072ea:	aa1c      	add	r2, sp, #112	; 0x70
 80072ec:	a819      	add	r0, sp, #100	; 0x64
 80072ee:	f002 f8a7 	bl	8009440 <__hexnan>
 80072f2:	2805      	cmp	r0, #5
 80072f4:	d128      	bne.n	8007348 <_strtod_l+0x378>
 80072f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80072fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007300:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007304:	e69d      	b.n	8007042 <_strtod_l+0x72>
 8007306:	210a      	movs	r1, #10
 8007308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800730a:	fb01 2107 	mla	r1, r1, r7, r2
 800730e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007312:	9209      	str	r2, [sp, #36]	; 0x24
 8007314:	e7b5      	b.n	8007282 <_strtod_l+0x2b2>
 8007316:	2a6e      	cmp	r2, #110	; 0x6e
 8007318:	e7d9      	b.n	80072ce <_strtod_l+0x2fe>
 800731a:	498a      	ldr	r1, [pc, #552]	; (8007544 <_strtod_l+0x574>)
 800731c:	a819      	add	r0, sp, #100	; 0x64
 800731e:	f002 f87b 	bl	8009418 <__match>
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f aea8 	beq.w	8007078 <_strtod_l+0xa8>
 8007328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800732a:	4987      	ldr	r1, [pc, #540]	; (8007548 <_strtod_l+0x578>)
 800732c:	3b01      	subs	r3, #1
 800732e:	a819      	add	r0, sp, #100	; 0x64
 8007330:	9319      	str	r3, [sp, #100]	; 0x64
 8007332:	f002 f871 	bl	8009418 <__match>
 8007336:	b910      	cbnz	r0, 800733e <_strtod_l+0x36e>
 8007338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800733a:	3301      	adds	r3, #1
 800733c:	9319      	str	r3, [sp, #100]	; 0x64
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800754c <_strtod_l+0x57c>
 8007346:	e67c      	b.n	8007042 <_strtod_l+0x72>
 8007348:	4881      	ldr	r0, [pc, #516]	; (8007550 <_strtod_l+0x580>)
 800734a:	f001 fd3b 	bl	8008dc4 <nan>
 800734e:	4680      	mov	r8, r0
 8007350:	4689      	mov	r9, r1
 8007352:	e676      	b.n	8007042 <_strtod_l+0x72>
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	f1bb 0f00 	cmp.w	fp, #0
 800735a:	bf08      	it	eq
 800735c:	46b3      	moveq	fp, r6
 800735e:	1afb      	subs	r3, r7, r3
 8007360:	2e10      	cmp	r6, #16
 8007362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007364:	4635      	mov	r5, r6
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	bfa8      	it	ge
 800736a:	2510      	movge	r5, #16
 800736c:	f7f9 f854 	bl	8000418 <__aeabi_ui2d>
 8007370:	2e09      	cmp	r6, #9
 8007372:	4680      	mov	r8, r0
 8007374:	4689      	mov	r9, r1
 8007376:	dd13      	ble.n	80073a0 <_strtod_l+0x3d0>
 8007378:	4b76      	ldr	r3, [pc, #472]	; (8007554 <_strtod_l+0x584>)
 800737a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800737e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007382:	f7f9 f8c3 	bl	800050c <__aeabi_dmul>
 8007386:	4680      	mov	r8, r0
 8007388:	4650      	mov	r0, sl
 800738a:	4689      	mov	r9, r1
 800738c:	f7f9 f844 	bl	8000418 <__aeabi_ui2d>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	f7f8 ff02 	bl	80001a0 <__adddf3>
 800739c:	4680      	mov	r8, r0
 800739e:	4689      	mov	r9, r1
 80073a0:	2e0f      	cmp	r6, #15
 80073a2:	dc36      	bgt.n	8007412 <_strtod_l+0x442>
 80073a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f43f ae4b 	beq.w	8007042 <_strtod_l+0x72>
 80073ac:	dd22      	ble.n	80073f4 <_strtod_l+0x424>
 80073ae:	2b16      	cmp	r3, #22
 80073b0:	dc09      	bgt.n	80073c6 <_strtod_l+0x3f6>
 80073b2:	4968      	ldr	r1, [pc, #416]	; (8007554 <_strtod_l+0x584>)
 80073b4:	4642      	mov	r2, r8
 80073b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ba:	464b      	mov	r3, r9
 80073bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c0:	f7f9 f8a4 	bl	800050c <__aeabi_dmul>
 80073c4:	e7c3      	b.n	800734e <_strtod_l+0x37e>
 80073c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80073cc:	4293      	cmp	r3, r2
 80073ce:	db20      	blt.n	8007412 <_strtod_l+0x442>
 80073d0:	4c60      	ldr	r4, [pc, #384]	; (8007554 <_strtod_l+0x584>)
 80073d2:	f1c6 060f 	rsb	r6, r6, #15
 80073d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80073da:	4642      	mov	r2, r8
 80073dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e0:	464b      	mov	r3, r9
 80073e2:	f7f9 f893 	bl	800050c <__aeabi_dmul>
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	1b9e      	subs	r6, r3, r6
 80073ea:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80073ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073f2:	e7e5      	b.n	80073c0 <_strtod_l+0x3f0>
 80073f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f6:	3316      	adds	r3, #22
 80073f8:	db0b      	blt.n	8007412 <_strtod_l+0x442>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	4640      	mov	r0, r8
 80073fe:	1bdf      	subs	r7, r3, r7
 8007400:	4b54      	ldr	r3, [pc, #336]	; (8007554 <_strtod_l+0x584>)
 8007402:	4649      	mov	r1, r9
 8007404:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740c:	f7f9 f9a8 	bl	8000760 <__aeabi_ddiv>
 8007410:	e79d      	b.n	800734e <_strtod_l+0x37e>
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	1b75      	subs	r5, r6, r5
 8007416:	441d      	add	r5, r3
 8007418:	2d00      	cmp	r5, #0
 800741a:	dd70      	ble.n	80074fe <_strtod_l+0x52e>
 800741c:	f015 030f 	ands.w	r3, r5, #15
 8007420:	d00a      	beq.n	8007438 <_strtod_l+0x468>
 8007422:	494c      	ldr	r1, [pc, #304]	; (8007554 <_strtod_l+0x584>)
 8007424:	4642      	mov	r2, r8
 8007426:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800742a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742e:	464b      	mov	r3, r9
 8007430:	f7f9 f86c 	bl	800050c <__aeabi_dmul>
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	f035 050f 	bics.w	r5, r5, #15
 800743c:	d04d      	beq.n	80074da <_strtod_l+0x50a>
 800743e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007442:	dd22      	ble.n	800748a <_strtod_l+0x4ba>
 8007444:	2600      	movs	r6, #0
 8007446:	46b3      	mov	fp, r6
 8007448:	960b      	str	r6, [sp, #44]	; 0x2c
 800744a:	9608      	str	r6, [sp, #32]
 800744c:	2322      	movs	r3, #34	; 0x22
 800744e:	f04f 0800 	mov.w	r8, #0
 8007452:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800754c <_strtod_l+0x57c>
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f adf1 	beq.w	8007042 <_strtod_l+0x72>
 8007460:	4620      	mov	r0, r4
 8007462:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007464:	f002 f9da 	bl	800981c <_Bfree>
 8007468:	4620      	mov	r0, r4
 800746a:	9908      	ldr	r1, [sp, #32]
 800746c:	f002 f9d6 	bl	800981c <_Bfree>
 8007470:	4659      	mov	r1, fp
 8007472:	4620      	mov	r0, r4
 8007474:	f002 f9d2 	bl	800981c <_Bfree>
 8007478:	4620      	mov	r0, r4
 800747a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800747c:	f002 f9ce 	bl	800981c <_Bfree>
 8007480:	4631      	mov	r1, r6
 8007482:	4620      	mov	r0, r4
 8007484:	f002 f9ca 	bl	800981c <_Bfree>
 8007488:	e5db      	b.n	8007042 <_strtod_l+0x72>
 800748a:	4b33      	ldr	r3, [pc, #204]	; (8007558 <_strtod_l+0x588>)
 800748c:	4640      	mov	r0, r8
 800748e:	9305      	str	r3, [sp, #20]
 8007490:	2300      	movs	r3, #0
 8007492:	4649      	mov	r1, r9
 8007494:	469a      	mov	sl, r3
 8007496:	112d      	asrs	r5, r5, #4
 8007498:	2d01      	cmp	r5, #1
 800749a:	dc21      	bgt.n	80074e0 <_strtod_l+0x510>
 800749c:	b10b      	cbz	r3, 80074a2 <_strtod_l+0x4d2>
 800749e:	4680      	mov	r8, r0
 80074a0:	4689      	mov	r9, r1
 80074a2:	492d      	ldr	r1, [pc, #180]	; (8007558 <_strtod_l+0x588>)
 80074a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074ac:	4642      	mov	r2, r8
 80074ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b2:	464b      	mov	r3, r9
 80074b4:	f7f9 f82a 	bl	800050c <__aeabi_dmul>
 80074b8:	4b24      	ldr	r3, [pc, #144]	; (800754c <_strtod_l+0x57c>)
 80074ba:	460a      	mov	r2, r1
 80074bc:	400b      	ands	r3, r1
 80074be:	4927      	ldr	r1, [pc, #156]	; (800755c <_strtod_l+0x58c>)
 80074c0:	4680      	mov	r8, r0
 80074c2:	428b      	cmp	r3, r1
 80074c4:	d8be      	bhi.n	8007444 <_strtod_l+0x474>
 80074c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074ca:	428b      	cmp	r3, r1
 80074cc:	bf86      	itte	hi
 80074ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80074d2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007560 <_strtod_l+0x590>
 80074d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074da:	2300      	movs	r3, #0
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	e07b      	b.n	80075d8 <_strtod_l+0x608>
 80074e0:	07ea      	lsls	r2, r5, #31
 80074e2:	d505      	bpl.n	80074f0 <_strtod_l+0x520>
 80074e4:	9b05      	ldr	r3, [sp, #20]
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f9 f80f 	bl	800050c <__aeabi_dmul>
 80074ee:	2301      	movs	r3, #1
 80074f0:	9a05      	ldr	r2, [sp, #20]
 80074f2:	f10a 0a01 	add.w	sl, sl, #1
 80074f6:	3208      	adds	r2, #8
 80074f8:	106d      	asrs	r5, r5, #1
 80074fa:	9205      	str	r2, [sp, #20]
 80074fc:	e7cc      	b.n	8007498 <_strtod_l+0x4c8>
 80074fe:	d0ec      	beq.n	80074da <_strtod_l+0x50a>
 8007500:	426d      	negs	r5, r5
 8007502:	f015 020f 	ands.w	r2, r5, #15
 8007506:	d00a      	beq.n	800751e <_strtod_l+0x54e>
 8007508:	4b12      	ldr	r3, [pc, #72]	; (8007554 <_strtod_l+0x584>)
 800750a:	4640      	mov	r0, r8
 800750c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007510:	4649      	mov	r1, r9
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f923 	bl	8000760 <__aeabi_ddiv>
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	112d      	asrs	r5, r5, #4
 8007520:	d0db      	beq.n	80074da <_strtod_l+0x50a>
 8007522:	2d1f      	cmp	r5, #31
 8007524:	dd1e      	ble.n	8007564 <_strtod_l+0x594>
 8007526:	2600      	movs	r6, #0
 8007528:	46b3      	mov	fp, r6
 800752a:	960b      	str	r6, [sp, #44]	; 0x2c
 800752c:	9608      	str	r6, [sp, #32]
 800752e:	2322      	movs	r3, #34	; 0x22
 8007530:	f04f 0800 	mov.w	r8, #0
 8007534:	f04f 0900 	mov.w	r9, #0
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	e78d      	b.n	8007458 <_strtod_l+0x488>
 800753c:	0800c527 	.word	0x0800c527
 8007540:	0800c540 	.word	0x0800c540
 8007544:	0800c51e 	.word	0x0800c51e
 8007548:	0800c521 	.word	0x0800c521
 800754c:	7ff00000 	.word	0x7ff00000
 8007550:	0800c89d 	.word	0x0800c89d
 8007554:	0800c990 	.word	0x0800c990
 8007558:	0800c968 	.word	0x0800c968
 800755c:	7ca00000 	.word	0x7ca00000
 8007560:	7fefffff 	.word	0x7fefffff
 8007564:	f015 0310 	ands.w	r3, r5, #16
 8007568:	bf18      	it	ne
 800756a:	236a      	movne	r3, #106	; 0x6a
 800756c:	4640      	mov	r0, r8
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	4649      	mov	r1, r9
 8007572:	2300      	movs	r3, #0
 8007574:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007840 <_strtod_l+0x870>
 8007578:	07ea      	lsls	r2, r5, #31
 800757a:	d504      	bpl.n	8007586 <_strtod_l+0x5b6>
 800757c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007580:	f7f8 ffc4 	bl	800050c <__aeabi_dmul>
 8007584:	2301      	movs	r3, #1
 8007586:	106d      	asrs	r5, r5, #1
 8007588:	f10a 0a08 	add.w	sl, sl, #8
 800758c:	d1f4      	bne.n	8007578 <_strtod_l+0x5a8>
 800758e:	b10b      	cbz	r3, 8007594 <_strtod_l+0x5c4>
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	9b05      	ldr	r3, [sp, #20]
 8007596:	b1bb      	cbz	r3, 80075c8 <_strtod_l+0x5f8>
 8007598:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800759c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	4649      	mov	r1, r9
 80075a4:	dd10      	ble.n	80075c8 <_strtod_l+0x5f8>
 80075a6:	2b1f      	cmp	r3, #31
 80075a8:	f340 8128 	ble.w	80077fc <_strtod_l+0x82c>
 80075ac:	2b34      	cmp	r3, #52	; 0x34
 80075ae:	bfd8      	it	le
 80075b0:	f04f 33ff 	movle.w	r3, #4294967295
 80075b4:	f04f 0800 	mov.w	r8, #0
 80075b8:	bfcf      	iteee	gt
 80075ba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075be:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075c2:	4093      	lslle	r3, r2
 80075c4:	ea03 0901 	andle.w	r9, r3, r1
 80075c8:	2200      	movs	r2, #0
 80075ca:	2300      	movs	r3, #0
 80075cc:	4640      	mov	r0, r8
 80075ce:	4649      	mov	r1, r9
 80075d0:	f7f9 fa04 	bl	80009dc <__aeabi_dcmpeq>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d1a6      	bne.n	8007526 <_strtod_l+0x556>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	465a      	mov	r2, fp
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4620      	mov	r0, r4
 80075e0:	4633      	mov	r3, r6
 80075e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075e4:	f002 f982 	bl	80098ec <__s2b>
 80075e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f43f af2a 	beq.w	8007444 <_strtod_l+0x474>
 80075f0:	2600      	movs	r6, #0
 80075f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	eba3 0307 	sub.w	r3, r3, r7
 80075fc:	bfa8      	it	ge
 80075fe:	2300      	movge	r3, #0
 8007600:	46b3      	mov	fp, r6
 8007602:	9312      	str	r3, [sp, #72]	; 0x48
 8007604:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007608:	9316      	str	r3, [sp, #88]	; 0x58
 800760a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760c:	4620      	mov	r0, r4
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	f002 f8c4 	bl	800979c <_Balloc>
 8007614:	9008      	str	r0, [sp, #32]
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f af18 	beq.w	800744c <_strtod_l+0x47c>
 800761c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800761e:	300c      	adds	r0, #12
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	f103 010c 	add.w	r1, r3, #12
 8007626:	3202      	adds	r2, #2
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	f001 fbbc 	bl	8008da6 <memcpy>
 800762e:	ab1c      	add	r3, sp, #112	; 0x70
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	ab1b      	add	r3, sp, #108	; 0x6c
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4642      	mov	r2, r8
 8007638:	464b      	mov	r3, r9
 800763a:	4620      	mov	r0, r4
 800763c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007640:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007644:	f002 fc7e 	bl	8009f44 <__d2b>
 8007648:	901a      	str	r0, [sp, #104]	; 0x68
 800764a:	2800      	cmp	r0, #0
 800764c:	f43f aefe 	beq.w	800744c <_strtod_l+0x47c>
 8007650:	2101      	movs	r1, #1
 8007652:	4620      	mov	r0, r4
 8007654:	f002 f9e2 	bl	8009a1c <__i2b>
 8007658:	4683      	mov	fp, r0
 800765a:	2800      	cmp	r0, #0
 800765c:	f43f aef6 	beq.w	800744c <_strtod_l+0x47c>
 8007660:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007662:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007664:	2f00      	cmp	r7, #0
 8007666:	bfab      	itete	ge
 8007668:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800766a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800766c:	eb07 0a03 	addge.w	sl, r7, r3
 8007670:	1bdd      	sublt	r5, r3, r7
 8007672:	9b05      	ldr	r3, [sp, #20]
 8007674:	bfa8      	it	ge
 8007676:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007678:	eba7 0703 	sub.w	r7, r7, r3
 800767c:	4417      	add	r7, r2
 800767e:	4b71      	ldr	r3, [pc, #452]	; (8007844 <_strtod_l+0x874>)
 8007680:	f107 37ff 	add.w	r7, r7, #4294967295
 8007684:	bfb8      	it	lt
 8007686:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800768a:	429f      	cmp	r7, r3
 800768c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007690:	f280 80c7 	bge.w	8007822 <_strtod_l+0x852>
 8007694:	1bdb      	subs	r3, r3, r7
 8007696:	2b1f      	cmp	r3, #31
 8007698:	f04f 0101 	mov.w	r1, #1
 800769c:	eba2 0203 	sub.w	r2, r2, r3
 80076a0:	f300 80b3 	bgt.w	800780a <_strtod_l+0x83a>
 80076a4:	fa01 f303 	lsl.w	r3, r1, r3
 80076a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80076aa:	2300      	movs	r3, #0
 80076ac:	9310      	str	r3, [sp, #64]	; 0x40
 80076ae:	eb0a 0702 	add.w	r7, sl, r2
 80076b2:	9b05      	ldr	r3, [sp, #20]
 80076b4:	45ba      	cmp	sl, r7
 80076b6:	4415      	add	r5, r2
 80076b8:	441d      	add	r5, r3
 80076ba:	4653      	mov	r3, sl
 80076bc:	bfa8      	it	ge
 80076be:	463b      	movge	r3, r7
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	bfa8      	it	ge
 80076c4:	462b      	movge	r3, r5
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfc2      	ittt	gt
 80076ca:	1aff      	subgt	r7, r7, r3
 80076cc:	1aed      	subgt	r5, r5, r3
 80076ce:	ebaa 0a03 	subgt.w	sl, sl, r3
 80076d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd17      	ble.n	8007708 <_strtod_l+0x738>
 80076d8:	4659      	mov	r1, fp
 80076da:	461a      	mov	r2, r3
 80076dc:	4620      	mov	r0, r4
 80076de:	f002 fa5b 	bl	8009b98 <__pow5mult>
 80076e2:	4683      	mov	fp, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f43f aeb1 	beq.w	800744c <_strtod_l+0x47c>
 80076ea:	4601      	mov	r1, r0
 80076ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076ee:	4620      	mov	r0, r4
 80076f0:	f002 f9aa 	bl	8009a48 <__multiply>
 80076f4:	900a      	str	r0, [sp, #40]	; 0x28
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f43f aea8 	beq.w	800744c <_strtod_l+0x47c>
 80076fc:	4620      	mov	r0, r4
 80076fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007700:	f002 f88c 	bl	800981c <_Bfree>
 8007704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007706:	931a      	str	r3, [sp, #104]	; 0x68
 8007708:	2f00      	cmp	r7, #0
 800770a:	f300 808f 	bgt.w	800782c <_strtod_l+0x85c>
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	dd08      	ble.n	8007726 <_strtod_l+0x756>
 8007714:	4620      	mov	r0, r4
 8007716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007718:	9908      	ldr	r1, [sp, #32]
 800771a:	f002 fa3d 	bl	8009b98 <__pow5mult>
 800771e:	9008      	str	r0, [sp, #32]
 8007720:	2800      	cmp	r0, #0
 8007722:	f43f ae93 	beq.w	800744c <_strtod_l+0x47c>
 8007726:	2d00      	cmp	r5, #0
 8007728:	dd08      	ble.n	800773c <_strtod_l+0x76c>
 800772a:	462a      	mov	r2, r5
 800772c:	4620      	mov	r0, r4
 800772e:	9908      	ldr	r1, [sp, #32]
 8007730:	f002 fa8c 	bl	8009c4c <__lshift>
 8007734:	9008      	str	r0, [sp, #32]
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f ae88 	beq.w	800744c <_strtod_l+0x47c>
 800773c:	f1ba 0f00 	cmp.w	sl, #0
 8007740:	dd08      	ble.n	8007754 <_strtod_l+0x784>
 8007742:	4659      	mov	r1, fp
 8007744:	4652      	mov	r2, sl
 8007746:	4620      	mov	r0, r4
 8007748:	f002 fa80 	bl	8009c4c <__lshift>
 800774c:	4683      	mov	fp, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f ae7c 	beq.w	800744c <_strtod_l+0x47c>
 8007754:	4620      	mov	r0, r4
 8007756:	9a08      	ldr	r2, [sp, #32]
 8007758:	991a      	ldr	r1, [sp, #104]	; 0x68
 800775a:	f002 faff 	bl	8009d5c <__mdiff>
 800775e:	4606      	mov	r6, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f ae73 	beq.w	800744c <_strtod_l+0x47c>
 8007766:	2500      	movs	r5, #0
 8007768:	68c3      	ldr	r3, [r0, #12]
 800776a:	4659      	mov	r1, fp
 800776c:	60c5      	str	r5, [r0, #12]
 800776e:	930a      	str	r3, [sp, #40]	; 0x28
 8007770:	f002 fad8 	bl	8009d24 <__mcmp>
 8007774:	42a8      	cmp	r0, r5
 8007776:	da6b      	bge.n	8007850 <_strtod_l+0x880>
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	ea53 0308 	orrs.w	r3, r3, r8
 800777e:	f040 808f 	bne.w	80078a0 <_strtod_l+0x8d0>
 8007782:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007786:	2b00      	cmp	r3, #0
 8007788:	f040 808a 	bne.w	80078a0 <_strtod_l+0x8d0>
 800778c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007790:	0d1b      	lsrs	r3, r3, #20
 8007792:	051b      	lsls	r3, r3, #20
 8007794:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007798:	f240 8082 	bls.w	80078a0 <_strtod_l+0x8d0>
 800779c:	6973      	ldr	r3, [r6, #20]
 800779e:	b913      	cbnz	r3, 80077a6 <_strtod_l+0x7d6>
 80077a0:	6933      	ldr	r3, [r6, #16]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	dd7c      	ble.n	80078a0 <_strtod_l+0x8d0>
 80077a6:	4631      	mov	r1, r6
 80077a8:	2201      	movs	r2, #1
 80077aa:	4620      	mov	r0, r4
 80077ac:	f002 fa4e 	bl	8009c4c <__lshift>
 80077b0:	4659      	mov	r1, fp
 80077b2:	4606      	mov	r6, r0
 80077b4:	f002 fab6 	bl	8009d24 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dd71      	ble.n	80078a0 <_strtod_l+0x8d0>
 80077bc:	9905      	ldr	r1, [sp, #20]
 80077be:	464b      	mov	r3, r9
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <_strtod_l+0x878>)
 80077c2:	2900      	cmp	r1, #0
 80077c4:	f000 808d 	beq.w	80078e2 <_strtod_l+0x912>
 80077c8:	ea02 0109 	and.w	r1, r2, r9
 80077cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077d0:	f300 8087 	bgt.w	80078e2 <_strtod_l+0x912>
 80077d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077d8:	f77f aea9 	ble.w	800752e <_strtod_l+0x55e>
 80077dc:	4640      	mov	r0, r8
 80077de:	4649      	mov	r1, r9
 80077e0:	4b1a      	ldr	r3, [pc, #104]	; (800784c <_strtod_l+0x87c>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f7f8 fe92 	bl	800050c <__aeabi_dmul>
 80077e8:	4b17      	ldr	r3, [pc, #92]	; (8007848 <_strtod_l+0x878>)
 80077ea:	4680      	mov	r8, r0
 80077ec:	400b      	ands	r3, r1
 80077ee:	4689      	mov	r9, r1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f47f ae35 	bne.w	8007460 <_strtod_l+0x490>
 80077f6:	2322      	movs	r3, #34	; 0x22
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	e631      	b.n	8007460 <_strtod_l+0x490>
 80077fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	ea03 0808 	and.w	r8, r3, r8
 8007808:	e6de      	b.n	80075c8 <_strtod_l+0x5f8>
 800780a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800780e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007812:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007816:	37e2      	adds	r7, #226	; 0xe2
 8007818:	fa01 f307 	lsl.w	r3, r1, r7
 800781c:	9310      	str	r3, [sp, #64]	; 0x40
 800781e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007820:	e745      	b.n	80076ae <_strtod_l+0x6de>
 8007822:	2300      	movs	r3, #0
 8007824:	9310      	str	r3, [sp, #64]	; 0x40
 8007826:	2301      	movs	r3, #1
 8007828:	9313      	str	r3, [sp, #76]	; 0x4c
 800782a:	e740      	b.n	80076ae <_strtod_l+0x6de>
 800782c:	463a      	mov	r2, r7
 800782e:	4620      	mov	r0, r4
 8007830:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007832:	f002 fa0b 	bl	8009c4c <__lshift>
 8007836:	901a      	str	r0, [sp, #104]	; 0x68
 8007838:	2800      	cmp	r0, #0
 800783a:	f47f af68 	bne.w	800770e <_strtod_l+0x73e>
 800783e:	e605      	b.n	800744c <_strtod_l+0x47c>
 8007840:	0800c558 	.word	0x0800c558
 8007844:	fffffc02 	.word	0xfffffc02
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	39500000 	.word	0x39500000
 8007850:	46ca      	mov	sl, r9
 8007852:	d165      	bne.n	8007920 <_strtod_l+0x950>
 8007854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800785a:	b352      	cbz	r2, 80078b2 <_strtod_l+0x8e2>
 800785c:	4a9e      	ldr	r2, [pc, #632]	; (8007ad8 <_strtod_l+0xb08>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d12a      	bne.n	80078b8 <_strtod_l+0x8e8>
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	4641      	mov	r1, r8
 8007866:	b1fb      	cbz	r3, 80078a8 <_strtod_l+0x8d8>
 8007868:	4b9c      	ldr	r3, [pc, #624]	; (8007adc <_strtod_l+0xb0c>)
 800786a:	f04f 32ff 	mov.w	r2, #4294967295
 800786e:	ea09 0303 	and.w	r3, r9, r3
 8007872:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007876:	d81a      	bhi.n	80078ae <_strtod_l+0x8de>
 8007878:	0d1b      	lsrs	r3, r3, #20
 800787a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	4299      	cmp	r1, r3
 8007884:	d118      	bne.n	80078b8 <_strtod_l+0x8e8>
 8007886:	4b96      	ldr	r3, [pc, #600]	; (8007ae0 <_strtod_l+0xb10>)
 8007888:	459a      	cmp	sl, r3
 800788a:	d102      	bne.n	8007892 <_strtod_l+0x8c2>
 800788c:	3101      	adds	r1, #1
 800788e:	f43f addd 	beq.w	800744c <_strtod_l+0x47c>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	4b91      	ldr	r3, [pc, #580]	; (8007adc <_strtod_l+0xb0c>)
 8007898:	ea0a 0303 	and.w	r3, sl, r3
 800789c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80078a0:	9b05      	ldr	r3, [sp, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d19a      	bne.n	80077dc <_strtod_l+0x80c>
 80078a6:	e5db      	b.n	8007460 <_strtod_l+0x490>
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	e7e9      	b.n	8007882 <_strtod_l+0x8b2>
 80078ae:	4613      	mov	r3, r2
 80078b0:	e7e7      	b.n	8007882 <_strtod_l+0x8b2>
 80078b2:	ea53 0308 	orrs.w	r3, r3, r8
 80078b6:	d081      	beq.n	80077bc <_strtod_l+0x7ec>
 80078b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ba:	b1e3      	cbz	r3, 80078f6 <_strtod_l+0x926>
 80078bc:	ea13 0f0a 	tst.w	r3, sl
 80078c0:	d0ee      	beq.n	80078a0 <_strtod_l+0x8d0>
 80078c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	9a05      	ldr	r2, [sp, #20]
 80078ca:	b1c3      	cbz	r3, 80078fe <_strtod_l+0x92e>
 80078cc:	f7ff fb5c 	bl	8006f88 <sulp>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80078d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078d8:	f7f8 fc62 	bl	80001a0 <__adddf3>
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	e7de      	b.n	80078a0 <_strtod_l+0x8d0>
 80078e2:	4013      	ands	r3, r2
 80078e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078ec:	f04f 38ff 	mov.w	r8, #4294967295
 80078f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078f4:	e7d4      	b.n	80078a0 <_strtod_l+0x8d0>
 80078f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078f8:	ea13 0f08 	tst.w	r3, r8
 80078fc:	e7e0      	b.n	80078c0 <_strtod_l+0x8f0>
 80078fe:	f7ff fb43 	bl	8006f88 <sulp>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007908:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800790a:	f7f8 fc47 	bl	800019c <__aeabi_dsub>
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	4680      	mov	r8, r0
 8007914:	4689      	mov	r9, r1
 8007916:	f7f9 f861 	bl	80009dc <__aeabi_dcmpeq>
 800791a:	2800      	cmp	r0, #0
 800791c:	d0c0      	beq.n	80078a0 <_strtod_l+0x8d0>
 800791e:	e606      	b.n	800752e <_strtod_l+0x55e>
 8007920:	4659      	mov	r1, fp
 8007922:	4630      	mov	r0, r6
 8007924:	f002 fb64 	bl	8009ff0 <__ratio>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007930:	2200      	movs	r2, #0
 8007932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007936:	f7f9 f865 	bl	8000a04 <__aeabi_dcmple>
 800793a:	2800      	cmp	r0, #0
 800793c:	d06f      	beq.n	8007a1e <_strtod_l+0xa4e>
 800793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d17c      	bne.n	8007a3e <_strtod_l+0xa6e>
 8007944:	f1b8 0f00 	cmp.w	r8, #0
 8007948:	d159      	bne.n	80079fe <_strtod_l+0xa2e>
 800794a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800794e:	2b00      	cmp	r3, #0
 8007950:	d17b      	bne.n	8007a4a <_strtod_l+0xa7a>
 8007952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007956:	2200      	movs	r2, #0
 8007958:	4b62      	ldr	r3, [pc, #392]	; (8007ae4 <_strtod_l+0xb14>)
 800795a:	f7f9 f849 	bl	80009f0 <__aeabi_dcmplt>
 800795e:	2800      	cmp	r0, #0
 8007960:	d15a      	bne.n	8007a18 <_strtod_l+0xa48>
 8007962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007966:	2200      	movs	r2, #0
 8007968:	4b5f      	ldr	r3, [pc, #380]	; (8007ae8 <_strtod_l+0xb18>)
 800796a:	f7f8 fdcf 	bl	800050c <__aeabi_dmul>
 800796e:	4605      	mov	r5, r0
 8007970:	460f      	mov	r7, r1
 8007972:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007976:	9506      	str	r5, [sp, #24]
 8007978:	9307      	str	r3, [sp, #28]
 800797a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800797e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007982:	4b56      	ldr	r3, [pc, #344]	; (8007adc <_strtod_l+0xb0c>)
 8007984:	4a55      	ldr	r2, [pc, #340]	; (8007adc <_strtod_l+0xb0c>)
 8007986:	ea0a 0303 	and.w	r3, sl, r3
 800798a:	9313      	str	r3, [sp, #76]	; 0x4c
 800798c:	4b57      	ldr	r3, [pc, #348]	; (8007aec <_strtod_l+0xb1c>)
 800798e:	ea0a 0202 	and.w	r2, sl, r2
 8007992:	429a      	cmp	r2, r3
 8007994:	f040 80b0 	bne.w	8007af8 <_strtod_l+0xb28>
 8007998:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f002 fa68 	bl	8009e74 <__ulp>
 80079a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079a8:	f7f8 fdb0 	bl	800050c <__aeabi_dmul>
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	f7f8 fbf6 	bl	80001a0 <__adddf3>
 80079b4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007adc <_strtod_l+0xb0c>
 80079b8:	4a4d      	ldr	r2, [pc, #308]	; (8007af0 <_strtod_l+0xb20>)
 80079ba:	ea01 0a0a 	and.w	sl, r1, sl
 80079be:	4592      	cmp	sl, r2
 80079c0:	4680      	mov	r8, r0
 80079c2:	d948      	bls.n	8007a56 <_strtod_l+0xa86>
 80079c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079c6:	4b46      	ldr	r3, [pc, #280]	; (8007ae0 <_strtod_l+0xb10>)
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d103      	bne.n	80079d4 <_strtod_l+0xa04>
 80079cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ce:	3301      	adds	r3, #1
 80079d0:	f43f ad3c 	beq.w	800744c <_strtod_l+0x47c>
 80079d4:	f04f 38ff 	mov.w	r8, #4294967295
 80079d8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007ae0 <_strtod_l+0xb10>
 80079dc:	4620      	mov	r0, r4
 80079de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079e0:	f001 ff1c 	bl	800981c <_Bfree>
 80079e4:	4620      	mov	r0, r4
 80079e6:	9908      	ldr	r1, [sp, #32]
 80079e8:	f001 ff18 	bl	800981c <_Bfree>
 80079ec:	4659      	mov	r1, fp
 80079ee:	4620      	mov	r0, r4
 80079f0:	f001 ff14 	bl	800981c <_Bfree>
 80079f4:	4631      	mov	r1, r6
 80079f6:	4620      	mov	r0, r4
 80079f8:	f001 ff10 	bl	800981c <_Bfree>
 80079fc:	e605      	b.n	800760a <_strtod_l+0x63a>
 80079fe:	f1b8 0f01 	cmp.w	r8, #1
 8007a02:	d103      	bne.n	8007a0c <_strtod_l+0xa3c>
 8007a04:	f1b9 0f00 	cmp.w	r9, #0
 8007a08:	f43f ad91 	beq.w	800752e <_strtod_l+0x55e>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4b39      	ldr	r3, [pc, #228]	; (8007af4 <_strtod_l+0xb24>)
 8007a10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a16:	e016      	b.n	8007a46 <_strtod_l+0xa76>
 8007a18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007a1a:	4f33      	ldr	r7, [pc, #204]	; (8007ae8 <_strtod_l+0xb18>)
 8007a1c:	e7a9      	b.n	8007972 <_strtod_l+0x9a2>
 8007a1e:	4b32      	ldr	r3, [pc, #200]	; (8007ae8 <_strtod_l+0xb18>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a26:	f7f8 fd71 	bl	800050c <__aeabi_dmul>
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	460f      	mov	r7, r1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d09e      	beq.n	8007972 <_strtod_l+0x9a2>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a3c:	e79d      	b.n	800797a <_strtod_l+0x9aa>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <_strtod_l+0xb14>)
 8007a42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a46:	4f27      	ldr	r7, [pc, #156]	; (8007ae4 <_strtod_l+0xb14>)
 8007a48:	e797      	b.n	800797a <_strtod_l+0x9aa>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4b29      	ldr	r3, [pc, #164]	; (8007af4 <_strtod_l+0xb24>)
 8007a4e:	4645      	mov	r5, r8
 8007a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a54:	e7f7      	b.n	8007a46 <_strtod_l+0xa76>
 8007a56:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	46ca      	mov	sl, r9
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1bc      	bne.n	80079dc <_strtod_l+0xa0c>
 8007a62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a68:	0d1b      	lsrs	r3, r3, #20
 8007a6a:	051b      	lsls	r3, r3, #20
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d1b5      	bne.n	80079dc <_strtod_l+0xa0c>
 8007a70:	4628      	mov	r0, r5
 8007a72:	4639      	mov	r1, r7
 8007a74:	f7f9 fbd4 	bl	8001220 <__aeabi_d2lz>
 8007a78:	f7f8 fd1a 	bl	80004b0 <__aeabi_l2d>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4628      	mov	r0, r5
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f8 fb8a 	bl	800019c <__aeabi_dsub>
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007a90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a96:	ea4a 0a08 	orr.w	sl, sl, r8
 8007a9a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007a9e:	d06c      	beq.n	8007b7a <_strtod_l+0xbaa>
 8007aa0:	a309      	add	r3, pc, #36	; (adr r3, 8007ac8 <_strtod_l+0xaf8>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 ffa3 	bl	80009f0 <__aeabi_dcmplt>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f47f acd8 	bne.w	8007460 <_strtod_l+0x490>
 8007ab0:	a307      	add	r3, pc, #28	; (adr r3, 8007ad0 <_strtod_l+0xb00>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aba:	f7f8 ffb7 	bl	8000a2c <__aeabi_dcmpgt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d08c      	beq.n	80079dc <_strtod_l+0xa0c>
 8007ac2:	e4cd      	b.n	8007460 <_strtod_l+0x490>
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	94a03595 	.word	0x94a03595
 8007acc:	3fdfffff 	.word	0x3fdfffff
 8007ad0:	35afe535 	.word	0x35afe535
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	000fffff 	.word	0x000fffff
 8007adc:	7ff00000 	.word	0x7ff00000
 8007ae0:	7fefffff 	.word	0x7fefffff
 8007ae4:	3ff00000 	.word	0x3ff00000
 8007ae8:	3fe00000 	.word	0x3fe00000
 8007aec:	7fe00000 	.word	0x7fe00000
 8007af0:	7c9fffff 	.word	0x7c9fffff
 8007af4:	bff00000 	.word	0xbff00000
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	b333      	cbz	r3, 8007b4a <_strtod_l+0xb7a>
 8007afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007afe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b02:	d822      	bhi.n	8007b4a <_strtod_l+0xb7a>
 8007b04:	a328      	add	r3, pc, #160	; (adr r3, 8007ba8 <_strtod_l+0xbd8>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	f7f8 ff79 	bl	8000a04 <__aeabi_dcmple>
 8007b12:	b1a0      	cbz	r0, 8007b3e <_strtod_l+0xb6e>
 8007b14:	4639      	mov	r1, r7
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7f8 ffa8 	bl	8000a6c <__aeabi_d2uiz>
 8007b1c:	2801      	cmp	r0, #1
 8007b1e:	bf38      	it	cc
 8007b20:	2001      	movcc	r0, #1
 8007b22:	f7f8 fc79 	bl	8000418 <__aeabi_ui2d>
 8007b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	bb03      	cbnz	r3, 8007b70 <_strtod_l+0xba0>
 8007b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b32:	9014      	str	r0, [sp, #80]	; 0x50
 8007b34:	9315      	str	r3, [sp, #84]	; 0x54
 8007b36:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b42:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	9311      	str	r3, [sp, #68]	; 0x44
 8007b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b4e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007b52:	f002 f98f 	bl	8009e74 <__ulp>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 fcd5 	bl	800050c <__aeabi_dmul>
 8007b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b66:	f7f8 fb1b 	bl	80001a0 <__adddf3>
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	e774      	b.n	8007a5a <_strtod_l+0xa8a>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007b78:	e7dd      	b.n	8007b36 <_strtod_l+0xb66>
 8007b7a:	a30d      	add	r3, pc, #52	; (adr r3, 8007bb0 <_strtod_l+0xbe0>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 ff36 	bl	80009f0 <__aeabi_dcmplt>
 8007b84:	e79b      	b.n	8007abe <_strtod_l+0xaee>
 8007b86:	2300      	movs	r3, #0
 8007b88:	930e      	str	r3, [sp, #56]	; 0x38
 8007b8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	f7ff ba5b 	b.w	800704a <_strtod_l+0x7a>
 8007b94:	2a65      	cmp	r2, #101	; 0x65
 8007b96:	f43f ab52 	beq.w	800723e <_strtod_l+0x26e>
 8007b9a:	2a45      	cmp	r2, #69	; 0x45
 8007b9c:	f43f ab4f 	beq.w	800723e <_strtod_l+0x26e>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f7ff bb87 	b.w	80072b4 <_strtod_l+0x2e4>
 8007ba6:	bf00      	nop
 8007ba8:	ffc00000 	.word	0xffc00000
 8007bac:	41dfffff 	.word	0x41dfffff
 8007bb0:	94a03595 	.word	0x94a03595
 8007bb4:	3fcfffff 	.word	0x3fcfffff

08007bb8 <strtod>:
 8007bb8:	460a      	mov	r2, r1
 8007bba:	4601      	mov	r1, r0
 8007bbc:	4802      	ldr	r0, [pc, #8]	; (8007bc8 <strtod+0x10>)
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <strtod+0x14>)
 8007bc0:	6800      	ldr	r0, [r0, #0]
 8007bc2:	f7ff ba05 	b.w	8006fd0 <_strtod_l>
 8007bc6:	bf00      	nop
 8007bc8:	20000534 	.word	0x20000534
 8007bcc:	2000037c 	.word	0x2000037c

08007bd0 <_strtol_l.constprop.0>:
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd6:	4686      	mov	lr, r0
 8007bd8:	4690      	mov	r8, r2
 8007bda:	d001      	beq.n	8007be0 <_strtol_l.constprop.0+0x10>
 8007bdc:	2b24      	cmp	r3, #36	; 0x24
 8007bde:	d906      	bls.n	8007bee <_strtol_l.constprop.0+0x1e>
 8007be0:	f001 f8aa 	bl	8008d38 <__errno>
 8007be4:	2316      	movs	r3, #22
 8007be6:	6003      	str	r3, [r0, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4835      	ldr	r0, [pc, #212]	; (8007cc8 <_strtol_l.constprop.0+0xf8>)
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bf8:	5d06      	ldrb	r6, [r0, r4]
 8007bfa:	f016 0608 	ands.w	r6, r6, #8
 8007bfe:	d1f8      	bne.n	8007bf2 <_strtol_l.constprop.0+0x22>
 8007c00:	2c2d      	cmp	r4, #45	; 0x2d
 8007c02:	d12e      	bne.n	8007c62 <_strtol_l.constprop.0+0x92>
 8007c04:	2601      	movs	r6, #1
 8007c06:	782c      	ldrb	r4, [r5, #0]
 8007c08:	1c95      	adds	r5, r2, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d057      	beq.n	8007cbe <_strtol_l.constprop.0+0xee>
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d109      	bne.n	8007c26 <_strtol_l.constprop.0+0x56>
 8007c12:	2c30      	cmp	r4, #48	; 0x30
 8007c14:	d107      	bne.n	8007c26 <_strtol_l.constprop.0+0x56>
 8007c16:	782a      	ldrb	r2, [r5, #0]
 8007c18:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007c1c:	2a58      	cmp	r2, #88	; 0x58
 8007c1e:	d149      	bne.n	8007cb4 <_strtol_l.constprop.0+0xe4>
 8007c20:	2310      	movs	r3, #16
 8007c22:	786c      	ldrb	r4, [r5, #1]
 8007c24:	3502      	adds	r5, #2
 8007c26:	2200      	movs	r2, #0
 8007c28:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007c2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c30:	fbbc f9f3 	udiv	r9, ip, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c3e:	2f09      	cmp	r7, #9
 8007c40:	d814      	bhi.n	8007c6c <_strtol_l.constprop.0+0x9c>
 8007c42:	463c      	mov	r4, r7
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	dd20      	ble.n	8007c8a <_strtol_l.constprop.0+0xba>
 8007c48:	1c57      	adds	r7, r2, #1
 8007c4a:	d007      	beq.n	8007c5c <_strtol_l.constprop.0+0x8c>
 8007c4c:	4581      	cmp	r9, r0
 8007c4e:	d319      	bcc.n	8007c84 <_strtol_l.constprop.0+0xb4>
 8007c50:	d101      	bne.n	8007c56 <_strtol_l.constprop.0+0x86>
 8007c52:	45a2      	cmp	sl, r4
 8007c54:	db16      	blt.n	8007c84 <_strtol_l.constprop.0+0xb4>
 8007c56:	2201      	movs	r2, #1
 8007c58:	fb00 4003 	mla	r0, r0, r3, r4
 8007c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c60:	e7eb      	b.n	8007c3a <_strtol_l.constprop.0+0x6a>
 8007c62:	2c2b      	cmp	r4, #43	; 0x2b
 8007c64:	bf04      	itt	eq
 8007c66:	782c      	ldrbeq	r4, [r5, #0]
 8007c68:	1c95      	addeq	r5, r2, #2
 8007c6a:	e7ce      	b.n	8007c0a <_strtol_l.constprop.0+0x3a>
 8007c6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c70:	2f19      	cmp	r7, #25
 8007c72:	d801      	bhi.n	8007c78 <_strtol_l.constprop.0+0xa8>
 8007c74:	3c37      	subs	r4, #55	; 0x37
 8007c76:	e7e5      	b.n	8007c44 <_strtol_l.constprop.0+0x74>
 8007c78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c7c:	2f19      	cmp	r7, #25
 8007c7e:	d804      	bhi.n	8007c8a <_strtol_l.constprop.0+0xba>
 8007c80:	3c57      	subs	r4, #87	; 0x57
 8007c82:	e7df      	b.n	8007c44 <_strtol_l.constprop.0+0x74>
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	e7e8      	b.n	8007c5c <_strtol_l.constprop.0+0x8c>
 8007c8a:	1c53      	adds	r3, r2, #1
 8007c8c:	d108      	bne.n	8007ca0 <_strtol_l.constprop.0+0xd0>
 8007c8e:	2322      	movs	r3, #34	; 0x22
 8007c90:	4660      	mov	r0, ip
 8007c92:	f8ce 3000 	str.w	r3, [lr]
 8007c96:	f1b8 0f00 	cmp.w	r8, #0
 8007c9a:	d0a6      	beq.n	8007bea <_strtol_l.constprop.0+0x1a>
 8007c9c:	1e69      	subs	r1, r5, #1
 8007c9e:	e006      	b.n	8007cae <_strtol_l.constprop.0+0xde>
 8007ca0:	b106      	cbz	r6, 8007ca4 <_strtol_l.constprop.0+0xd4>
 8007ca2:	4240      	negs	r0, r0
 8007ca4:	f1b8 0f00 	cmp.w	r8, #0
 8007ca8:	d09f      	beq.n	8007bea <_strtol_l.constprop.0+0x1a>
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	d1f6      	bne.n	8007c9c <_strtol_l.constprop.0+0xcc>
 8007cae:	f8c8 1000 	str.w	r1, [r8]
 8007cb2:	e79a      	b.n	8007bea <_strtol_l.constprop.0+0x1a>
 8007cb4:	2430      	movs	r4, #48	; 0x30
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1b5      	bne.n	8007c26 <_strtol_l.constprop.0+0x56>
 8007cba:	2308      	movs	r3, #8
 8007cbc:	e7b3      	b.n	8007c26 <_strtol_l.constprop.0+0x56>
 8007cbe:	2c30      	cmp	r4, #48	; 0x30
 8007cc0:	d0a9      	beq.n	8007c16 <_strtol_l.constprop.0+0x46>
 8007cc2:	230a      	movs	r3, #10
 8007cc4:	e7af      	b.n	8007c26 <_strtol_l.constprop.0+0x56>
 8007cc6:	bf00      	nop
 8007cc8:	0800c581 	.word	0x0800c581

08007ccc <_strtol_r>:
 8007ccc:	f7ff bf80 	b.w	8007bd0 <_strtol_l.constprop.0>

08007cd0 <strtol>:
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	460a      	mov	r2, r1
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <strtol+0x10>)
 8007cd8:	6800      	ldr	r0, [r0, #0]
 8007cda:	f7ff bf79 	b.w	8007bd0 <_strtol_l.constprop.0>
 8007cde:	bf00      	nop
 8007ce0:	20000534 	.word	0x20000534

08007ce4 <std>:
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	4604      	mov	r4, r0
 8007cea:	e9c0 3300 	strd	r3, r3, [r0]
 8007cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cf2:	6083      	str	r3, [r0, #8]
 8007cf4:	8181      	strh	r1, [r0, #12]
 8007cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cf8:	81c2      	strh	r2, [r0, #14]
 8007cfa:	6183      	str	r3, [r0, #24]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	2208      	movs	r2, #8
 8007d00:	305c      	adds	r0, #92	; 0x5c
 8007d02:	f000 f8f6 	bl	8007ef2 <memset>
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <std+0x58>)
 8007d08:	6224      	str	r4, [r4, #32]
 8007d0a:	6263      	str	r3, [r4, #36]	; 0x24
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <std+0x5c>)
 8007d0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <std+0x60>)
 8007d12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <std+0x64>)
 8007d16:	6323      	str	r3, [r4, #48]	; 0x30
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <std+0x68>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d006      	beq.n	8007d2c <std+0x48>
 8007d1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d22:	4294      	cmp	r4, r2
 8007d24:	d002      	beq.n	8007d2c <std+0x48>
 8007d26:	33d0      	adds	r3, #208	; 0xd0
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	d105      	bne.n	8007d38 <std+0x54>
 8007d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f001 b82a 	b.w	8008d8c <__retarget_lock_init_recursive>
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08007e69 	.word	0x08007e69
 8007d40:	08007e8f 	.word	0x08007e8f
 8007d44:	08007ec7 	.word	0x08007ec7
 8007d48:	08007eeb 	.word	0x08007eeb
 8007d4c:	200007b4 	.word	0x200007b4

08007d50 <stdio_exit_handler>:
 8007d50:	4a02      	ldr	r2, [pc, #8]	; (8007d5c <stdio_exit_handler+0xc>)
 8007d52:	4903      	ldr	r1, [pc, #12]	; (8007d60 <stdio_exit_handler+0x10>)
 8007d54:	4803      	ldr	r0, [pc, #12]	; (8007d64 <stdio_exit_handler+0x14>)
 8007d56:	f000 b869 	b.w	8007e2c <_fwalk_sglue>
 8007d5a:	bf00      	nop
 8007d5c:	20000368 	.word	0x20000368
 8007d60:	0800a2f1 	.word	0x0800a2f1
 8007d64:	200004e8 	.word	0x200004e8

08007d68 <cleanup_stdio>:
 8007d68:	6841      	ldr	r1, [r0, #4]
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <cleanup_stdio+0x34>)
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	4604      	mov	r4, r0
 8007d72:	d001      	beq.n	8007d78 <cleanup_stdio+0x10>
 8007d74:	f002 fabc 	bl	800a2f0 <_fflush_r>
 8007d78:	68a1      	ldr	r1, [r4, #8]
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <cleanup_stdio+0x38>)
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <cleanup_stdio+0x1e>
 8007d80:	4620      	mov	r0, r4
 8007d82:	f002 fab5 	bl	800a2f0 <_fflush_r>
 8007d86:	68e1      	ldr	r1, [r4, #12]
 8007d88:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <cleanup_stdio+0x3c>)
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	d004      	beq.n	8007d98 <cleanup_stdio+0x30>
 8007d8e:	4620      	mov	r0, r4
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d94:	f002 baac 	b.w	800a2f0 <_fflush_r>
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200007b4 	.word	0x200007b4
 8007da0:	2000081c 	.word	0x2000081c
 8007da4:	20000884 	.word	0x20000884

08007da8 <global_stdio_init.part.0>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <global_stdio_init.part.0+0x30>)
 8007dac:	4c0b      	ldr	r4, [pc, #44]	; (8007ddc <global_stdio_init.part.0+0x34>)
 8007dae:	4a0c      	ldr	r2, [pc, #48]	; (8007de0 <global_stdio_init.part.0+0x38>)
 8007db0:	4620      	mov	r0, r4
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	2104      	movs	r1, #4
 8007db6:	2200      	movs	r2, #0
 8007db8:	f7ff ff94 	bl	8007ce4 <std>
 8007dbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2109      	movs	r1, #9
 8007dc4:	f7ff ff8e 	bl	8007ce4 <std>
 8007dc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007dcc:	2202      	movs	r2, #2
 8007dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd2:	2112      	movs	r1, #18
 8007dd4:	f7ff bf86 	b.w	8007ce4 <std>
 8007dd8:	200008ec 	.word	0x200008ec
 8007ddc:	200007b4 	.word	0x200007b4
 8007de0:	08007d51 	.word	0x08007d51

08007de4 <__sfp_lock_acquire>:
 8007de4:	4801      	ldr	r0, [pc, #4]	; (8007dec <__sfp_lock_acquire+0x8>)
 8007de6:	f000 bfd3 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 8007dea:	bf00      	nop
 8007dec:	2000091a 	.word	0x2000091a

08007df0 <__sfp_lock_release>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__sfp_lock_release+0x8>)
 8007df2:	f000 bfcf 	b.w	8008d94 <__retarget_lock_release_recursive>
 8007df6:	bf00      	nop
 8007df8:	2000091a 	.word	0x2000091a

08007dfc <__sinit>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f7ff fff0 	bl	8007de4 <__sfp_lock_acquire>
 8007e04:	6a23      	ldr	r3, [r4, #32]
 8007e06:	b11b      	cbz	r3, 8007e10 <__sinit+0x14>
 8007e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0c:	f7ff bff0 	b.w	8007df0 <__sfp_lock_release>
 8007e10:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <__sinit+0x28>)
 8007e12:	6223      	str	r3, [r4, #32]
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <__sinit+0x2c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f5      	bne.n	8007e08 <__sinit+0xc>
 8007e1c:	f7ff ffc4 	bl	8007da8 <global_stdio_init.part.0>
 8007e20:	e7f2      	b.n	8007e08 <__sinit+0xc>
 8007e22:	bf00      	nop
 8007e24:	08007d69 	.word	0x08007d69
 8007e28:	200008ec 	.word	0x200008ec

08007e2c <_fwalk_sglue>:
 8007e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e30:	4607      	mov	r7, r0
 8007e32:	4688      	mov	r8, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	2600      	movs	r6, #0
 8007e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e40:	d505      	bpl.n	8007e4e <_fwalk_sglue+0x22>
 8007e42:	6824      	ldr	r4, [r4, #0]
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	d1f7      	bne.n	8007e38 <_fwalk_sglue+0xc>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d907      	bls.n	8007e64 <_fwalk_sglue+0x38>
 8007e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	d003      	beq.n	8007e64 <_fwalk_sglue+0x38>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c0      	blx	r8
 8007e62:	4306      	orrs	r6, r0
 8007e64:	3568      	adds	r5, #104	; 0x68
 8007e66:	e7e9      	b.n	8007e3c <_fwalk_sglue+0x10>

08007e68 <__sread>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e70:	f000 ff3e 	bl	8008cf0 <_read_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	bfab      	itete	ge
 8007e78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e7c:	181b      	addge	r3, r3, r0
 8007e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e82:	bfac      	ite	ge
 8007e84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e86:	81a3      	strhlt	r3, [r4, #12]
 8007e88:	bd10      	pop	{r4, pc}

08007e8a <__seofread>:
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	4770      	bx	lr

08007e8e <__swrite>:
 8007e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	461f      	mov	r7, r3
 8007e94:	898b      	ldrh	r3, [r1, #12]
 8007e96:	4605      	mov	r5, r0
 8007e98:	05db      	lsls	r3, r3, #23
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	d505      	bpl.n	8007eac <__swrite+0x1e>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	f000 ff10 	bl	8008ccc <_lseek_r>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	4632      	mov	r2, r6
 8007eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	463b      	mov	r3, r7
 8007eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec2:	f000 bf27 	b.w	8008d14 <_write_r>

08007ec6 <__sseek>:
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	460c      	mov	r4, r1
 8007eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ece:	f000 fefd 	bl	8008ccc <_lseek_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	bf15      	itete	ne
 8007ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ee2:	81a3      	strheq	r3, [r4, #12]
 8007ee4:	bf18      	it	ne
 8007ee6:	81a3      	strhne	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__sclose>:
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 bedd 	b.w	8008cac <_close_r>

08007ef2 <memset>:
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d100      	bne.n	8007efc <memset+0xa>
 8007efa:	4770      	bx	lr
 8007efc:	f803 1b01 	strb.w	r1, [r3], #1
 8007f00:	e7f9      	b.n	8007ef6 <memset+0x4>

08007f02 <strncmp>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	b16a      	cbz	r2, 8007f22 <strncmp+0x20>
 8007f06:	3901      	subs	r1, #1
 8007f08:	1884      	adds	r4, r0, r2
 8007f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d103      	bne.n	8007f1e <strncmp+0x1c>
 8007f16:	42a0      	cmp	r0, r4
 8007f18:	d001      	beq.n	8007f1e <strncmp+0x1c>
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1f5      	bne.n	8007f0a <strncmp+0x8>
 8007f1e:	1ad0      	subs	r0, r2, r3
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	4610      	mov	r0, r2
 8007f24:	e7fc      	b.n	8007f20 <strncmp+0x1e>
	...

08007f28 <strtok>:
 8007f28:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <strtok+0x5c>)
 8007f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	681f      	ldr	r7, [r3, #0]
 8007f30:	4605      	mov	r5, r0
 8007f32:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007f34:	460e      	mov	r6, r1
 8007f36:	b9ec      	cbnz	r4, 8007f74 <strtok+0x4c>
 8007f38:	2050      	movs	r0, #80	; 0x50
 8007f3a:	f001 fb61 	bl	8009600 <malloc>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6478      	str	r0, [r7, #68]	; 0x44
 8007f42:	b920      	cbnz	r0, 8007f4e <strtok+0x26>
 8007f44:	215b      	movs	r1, #91	; 0x5b
 8007f46:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <strtok+0x60>)
 8007f48:	4810      	ldr	r0, [pc, #64]	; (8007f8c <strtok+0x64>)
 8007f4a:	f000 ff41 	bl	8008dd0 <__assert_func>
 8007f4e:	e9c0 4400 	strd	r4, r4, [r0]
 8007f52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007f56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007f5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007f5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007f62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007f66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007f6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007f6e:	6184      	str	r4, [r0, #24]
 8007f70:	7704      	strb	r4, [r0, #28]
 8007f72:	6244      	str	r4, [r0, #36]	; 0x24
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	f000 b806 	b.w	8007f90 <__strtok_r>
 8007f84:	20000534 	.word	0x20000534
 8007f88:	0800c681 	.word	0x0800c681
 8007f8c:	0800c698 	.word	0x0800c698

08007f90 <__strtok_r>:
 8007f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f92:	b908      	cbnz	r0, 8007f98 <__strtok_r+0x8>
 8007f94:	6810      	ldr	r0, [r2, #0]
 8007f96:	b188      	cbz	r0, 8007fbc <__strtok_r+0x2c>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007fa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007fa6:	b91e      	cbnz	r6, 8007fb0 <__strtok_r+0x20>
 8007fa8:	b965      	cbnz	r5, 8007fc4 <__strtok_r+0x34>
 8007faa:	4628      	mov	r0, r5
 8007fac:	6015      	str	r5, [r2, #0]
 8007fae:	e005      	b.n	8007fbc <__strtok_r+0x2c>
 8007fb0:	42b5      	cmp	r5, r6
 8007fb2:	d1f6      	bne.n	8007fa2 <__strtok_r+0x12>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f0      	bne.n	8007f9a <__strtok_r+0xa>
 8007fb8:	6014      	str	r4, [r2, #0]
 8007fba:	7003      	strb	r3, [r0, #0]
 8007fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbe:	461c      	mov	r4, r3
 8007fc0:	e00c      	b.n	8007fdc <__strtok_r+0x4c>
 8007fc2:	b915      	cbnz	r5, 8007fca <__strtok_r+0x3a>
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007fce:	42ab      	cmp	r3, r5
 8007fd0:	d1f7      	bne.n	8007fc2 <__strtok_r+0x32>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f3      	beq.n	8007fbe <__strtok_r+0x2e>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007fdc:	6014      	str	r4, [r2, #0]
 8007fde:	e7ed      	b.n	8007fbc <__strtok_r+0x2c>

08007fe0 <difftime>:
 8007fe0:	b508      	push	{r3, lr}
 8007fe2:	1a80      	subs	r0, r0, r2
 8007fe4:	eb61 0103 	sbc.w	r1, r1, r3
 8007fe8:	f7f8 fa62 	bl	80004b0 <__aeabi_l2d>
 8007fec:	bd08      	pop	{r3, pc}
	...

08007ff0 <localtime>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <localtime+0x30>)
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	681d      	ldr	r5, [r3, #0]
 8007ff8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007ffa:	b953      	cbnz	r3, 8008012 <localtime+0x22>
 8007ffc:	2024      	movs	r0, #36	; 0x24
 8007ffe:	f001 faff 	bl	8009600 <malloc>
 8008002:	4602      	mov	r2, r0
 8008004:	6368      	str	r0, [r5, #52]	; 0x34
 8008006:	b920      	cbnz	r0, 8008012 <localtime+0x22>
 8008008:	2132      	movs	r1, #50	; 0x32
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <localtime+0x34>)
 800800c:	4806      	ldr	r0, [pc, #24]	; (8008028 <localtime+0x38>)
 800800e:	f000 fedf 	bl	8008dd0 <__assert_func>
 8008012:	4620      	mov	r0, r4
 8008014:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800801a:	f000 b807 	b.w	800802c <localtime_r>
 800801e:	bf00      	nop
 8008020:	20000534 	.word	0x20000534
 8008024:	0800c681 	.word	0x0800c681
 8008028:	0800c6f2 	.word	0x0800c6f2

0800802c <localtime_r>:
 800802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	4680      	mov	r8, r0
 8008034:	f002 f9c0 	bl	800a3b8 <__gettzinfo>
 8008038:	4621      	mov	r1, r4
 800803a:	4605      	mov	r5, r0
 800803c:	4640      	mov	r0, r8
 800803e:	f002 f9bf 	bl	800a3c0 <gmtime_r>
 8008042:	6943      	ldr	r3, [r0, #20]
 8008044:	4604      	mov	r4, r0
 8008046:	0799      	lsls	r1, r3, #30
 8008048:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800804c:	d105      	bne.n	800805a <localtime_r+0x2e>
 800804e:	2264      	movs	r2, #100	; 0x64
 8008050:	fb97 f3f2 	sdiv	r3, r7, r2
 8008054:	fb02 7313 	mls	r3, r2, r3, r7
 8008058:	bb7b      	cbnz	r3, 80080ba <localtime_r+0x8e>
 800805a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800805e:	fb97 f3f2 	sdiv	r3, r7, r2
 8008062:	fb02 7313 	mls	r3, r2, r3, r7
 8008066:	fab3 f383 	clz	r3, r3
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	2230      	movs	r2, #48	; 0x30
 800806e:	4e67      	ldr	r6, [pc, #412]	; (800820c <localtime_r+0x1e0>)
 8008070:	fb02 6603 	mla	r6, r2, r3, r6
 8008074:	f000 fbe6 	bl	8008844 <__tz_lock>
 8008078:	f000 fbf0 	bl	800885c <_tzset_unlocked>
 800807c:	4b64      	ldr	r3, [pc, #400]	; (8008210 <localtime_r+0x1e4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	b353      	cbz	r3, 80080d8 <localtime_r+0xac>
 8008082:	686b      	ldr	r3, [r5, #4]
 8008084:	42bb      	cmp	r3, r7
 8008086:	d11a      	bne.n	80080be <localtime_r+0x92>
 8008088:	e9d8 2300 	ldrd	r2, r3, [r8]
 800808c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008090:	682f      	ldr	r7, [r5, #0]
 8008092:	b9e7      	cbnz	r7, 80080ce <localtime_r+0xa2>
 8008094:	4282      	cmp	r2, r0
 8008096:	eb73 0101 	sbcs.w	r1, r3, r1
 800809a:	da25      	bge.n	80080e8 <localtime_r+0xbc>
 800809c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80080a0:	4282      	cmp	r2, r0
 80080a2:	eb73 0701 	sbcs.w	r7, r3, r1
 80080a6:	bfb4      	ite	lt
 80080a8:	2701      	movlt	r7, #1
 80080aa:	2700      	movge	r7, #0
 80080ac:	4282      	cmp	r2, r0
 80080ae:	eb73 0101 	sbcs.w	r1, r3, r1
 80080b2:	6227      	str	r7, [r4, #32]
 80080b4:	db1a      	blt.n	80080ec <localtime_r+0xc0>
 80080b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80080b8:	e019      	b.n	80080ee <localtime_r+0xc2>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e7d6      	b.n	800806c <localtime_r+0x40>
 80080be:	4638      	mov	r0, r7
 80080c0:	f000 fb1a 	bl	80086f8 <__tzcalc_limits>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d1df      	bne.n	8008088 <localtime_r+0x5c>
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	e004      	b.n	80080d8 <localtime_r+0xac>
 80080ce:	4282      	cmp	r2, r0
 80080d0:	eb73 0101 	sbcs.w	r1, r3, r1
 80080d4:	da02      	bge.n	80080dc <localtime_r+0xb0>
 80080d6:	2300      	movs	r3, #0
 80080d8:	6223      	str	r3, [r4, #32]
 80080da:	e7ec      	b.n	80080b6 <localtime_r+0x8a>
 80080dc:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80080e0:	4282      	cmp	r2, r0
 80080e2:	eb73 0101 	sbcs.w	r1, r3, r1
 80080e6:	daf6      	bge.n	80080d6 <localtime_r+0xaa>
 80080e8:	2301      	movs	r3, #1
 80080ea:	6223      	str	r3, [r4, #32]
 80080ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80080ee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80080f2:	fb93 f0f2 	sdiv	r0, r3, r2
 80080f6:	fb02 3310 	mls	r3, r2, r0, r3
 80080fa:	223c      	movs	r2, #60	; 0x3c
 80080fc:	fb93 f5f2 	sdiv	r5, r3, r2
 8008100:	fb02 3215 	mls	r2, r2, r5, r3
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	6861      	ldr	r1, [r4, #4]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	68a2      	ldr	r2, [r4, #8]
 800810c:	1b49      	subs	r1, r1, r5
 800810e:	1a12      	subs	r2, r2, r0
 8008110:	2b3b      	cmp	r3, #59	; 0x3b
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	6061      	str	r1, [r4, #4]
 8008116:	60a2      	str	r2, [r4, #8]
 8008118:	dd34      	ble.n	8008184 <localtime_r+0x158>
 800811a:	3101      	adds	r1, #1
 800811c:	6061      	str	r1, [r4, #4]
 800811e:	3b3c      	subs	r3, #60	; 0x3c
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	6863      	ldr	r3, [r4, #4]
 8008124:	2b3b      	cmp	r3, #59	; 0x3b
 8008126:	dd33      	ble.n	8008190 <localtime_r+0x164>
 8008128:	3201      	adds	r2, #1
 800812a:	60a2      	str	r2, [r4, #8]
 800812c:	3b3c      	subs	r3, #60	; 0x3c
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	2b17      	cmp	r3, #23
 8008134:	dd32      	ble.n	800819c <localtime_r+0x170>
 8008136:	69e2      	ldr	r2, [r4, #28]
 8008138:	3b18      	subs	r3, #24
 800813a:	3201      	adds	r2, #1
 800813c:	61e2      	str	r2, [r4, #28]
 800813e:	69a2      	ldr	r2, [r4, #24]
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	3201      	adds	r2, #1
 8008144:	2a07      	cmp	r2, #7
 8008146:	bfa8      	it	ge
 8008148:	2200      	movge	r2, #0
 800814a:	61a2      	str	r2, [r4, #24]
 800814c:	68e2      	ldr	r2, [r4, #12]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	3201      	adds	r2, #1
 8008152:	60e2      	str	r2, [r4, #12]
 8008154:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008158:	428a      	cmp	r2, r1
 800815a:	dd0e      	ble.n	800817a <localtime_r+0x14e>
 800815c:	2b0b      	cmp	r3, #11
 800815e:	eba2 0201 	sub.w	r2, r2, r1
 8008162:	60e2      	str	r2, [r4, #12]
 8008164:	f103 0201 	add.w	r2, r3, #1
 8008168:	bf05      	ittet	eq
 800816a:	2200      	moveq	r2, #0
 800816c:	6963      	ldreq	r3, [r4, #20]
 800816e:	6122      	strne	r2, [r4, #16]
 8008170:	3301      	addeq	r3, #1
 8008172:	bf02      	ittt	eq
 8008174:	6122      	streq	r2, [r4, #16]
 8008176:	6163      	streq	r3, [r4, #20]
 8008178:	61e2      	streq	r2, [r4, #28]
 800817a:	f000 fb69 	bl	8008850 <__tz_unlock>
 800817e:	4620      	mov	r0, r4
 8008180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008184:	2b00      	cmp	r3, #0
 8008186:	dacc      	bge.n	8008122 <localtime_r+0xf6>
 8008188:	3901      	subs	r1, #1
 800818a:	6061      	str	r1, [r4, #4]
 800818c:	333c      	adds	r3, #60	; 0x3c
 800818e:	e7c7      	b.n	8008120 <localtime_r+0xf4>
 8008190:	2b00      	cmp	r3, #0
 8008192:	dacd      	bge.n	8008130 <localtime_r+0x104>
 8008194:	3a01      	subs	r2, #1
 8008196:	60a2      	str	r2, [r4, #8]
 8008198:	333c      	adds	r3, #60	; 0x3c
 800819a:	e7c8      	b.n	800812e <localtime_r+0x102>
 800819c:	2b00      	cmp	r3, #0
 800819e:	daec      	bge.n	800817a <localtime_r+0x14e>
 80081a0:	69e2      	ldr	r2, [r4, #28]
 80081a2:	3318      	adds	r3, #24
 80081a4:	3a01      	subs	r2, #1
 80081a6:	61e2      	str	r2, [r4, #28]
 80081a8:	69a2      	ldr	r2, [r4, #24]
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	3a01      	subs	r2, #1
 80081ae:	bf48      	it	mi
 80081b0:	2206      	movmi	r2, #6
 80081b2:	61a2      	str	r2, [r4, #24]
 80081b4:	68e2      	ldr	r2, [r4, #12]
 80081b6:	3a01      	subs	r2, #1
 80081b8:	60e2      	str	r2, [r4, #12]
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1dd      	bne.n	800817a <localtime_r+0x14e>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	d405      	bmi.n	80081d0 <localtime_r+0x1a4>
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80081cc:	60e3      	str	r3, [r4, #12]
 80081ce:	e7d4      	b.n	800817a <localtime_r+0x14e>
 80081d0:	230b      	movs	r3, #11
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	6963      	ldr	r3, [r4, #20]
 80081d6:	1e5a      	subs	r2, r3, #1
 80081d8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80081dc:	6162      	str	r2, [r4, #20]
 80081de:	079a      	lsls	r2, r3, #30
 80081e0:	d105      	bne.n	80081ee <localtime_r+0x1c2>
 80081e2:	2164      	movs	r1, #100	; 0x64
 80081e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80081e8:	fb01 3212 	mls	r2, r1, r2, r3
 80081ec:	b962      	cbnz	r2, 8008208 <localtime_r+0x1dc>
 80081ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80081f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80081f6:	fb02 3311 	mls	r3, r2, r1, r3
 80081fa:	fab3 f383 	clz	r3, r3
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008204:	61e3      	str	r3, [r4, #28]
 8008206:	e7de      	b.n	80081c6 <localtime_r+0x19a>
 8008208:	2301      	movs	r3, #1
 800820a:	e7f9      	b.n	8008200 <localtime_r+0x1d4>
 800820c:	0800c7ac 	.word	0x0800c7ac
 8008210:	2000090c 	.word	0x2000090c

08008214 <validate_structure>:
 8008214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008216:	6801      	ldr	r1, [r0, #0]
 8008218:	4604      	mov	r4, r0
 800821a:	293b      	cmp	r1, #59	; 0x3b
 800821c:	d911      	bls.n	8008242 <validate_structure+0x2e>
 800821e:	223c      	movs	r2, #60	; 0x3c
 8008220:	4668      	mov	r0, sp
 8008222:	f000 fdf3 	bl	8008e0c <div>
 8008226:	9a01      	ldr	r2, [sp, #4]
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	9900      	ldr	r1, [sp, #0]
 800822c:	2a00      	cmp	r2, #0
 800822e:	440b      	add	r3, r1
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	bfbb      	ittet	lt
 8008234:	323c      	addlt	r2, #60	; 0x3c
 8008236:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800823a:	6022      	strge	r2, [r4, #0]
 800823c:	6022      	strlt	r2, [r4, #0]
 800823e:	bfb8      	it	lt
 8008240:	6063      	strlt	r3, [r4, #4]
 8008242:	6861      	ldr	r1, [r4, #4]
 8008244:	293b      	cmp	r1, #59	; 0x3b
 8008246:	d911      	bls.n	800826c <validate_structure+0x58>
 8008248:	223c      	movs	r2, #60	; 0x3c
 800824a:	4668      	mov	r0, sp
 800824c:	f000 fdde 	bl	8008e0c <div>
 8008250:	9a01      	ldr	r2, [sp, #4]
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	9900      	ldr	r1, [sp, #0]
 8008256:	2a00      	cmp	r2, #0
 8008258:	440b      	add	r3, r1
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	bfbb      	ittet	lt
 800825e:	323c      	addlt	r2, #60	; 0x3c
 8008260:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008264:	6062      	strge	r2, [r4, #4]
 8008266:	6062      	strlt	r2, [r4, #4]
 8008268:	bfb8      	it	lt
 800826a:	60a3      	strlt	r3, [r4, #8]
 800826c:	68a1      	ldr	r1, [r4, #8]
 800826e:	2917      	cmp	r1, #23
 8008270:	d911      	bls.n	8008296 <validate_structure+0x82>
 8008272:	2218      	movs	r2, #24
 8008274:	4668      	mov	r0, sp
 8008276:	f000 fdc9 	bl	8008e0c <div>
 800827a:	9a01      	ldr	r2, [sp, #4]
 800827c:	68e3      	ldr	r3, [r4, #12]
 800827e:	9900      	ldr	r1, [sp, #0]
 8008280:	2a00      	cmp	r2, #0
 8008282:	440b      	add	r3, r1
 8008284:	60e3      	str	r3, [r4, #12]
 8008286:	bfbb      	ittet	lt
 8008288:	3218      	addlt	r2, #24
 800828a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800828e:	60a2      	strge	r2, [r4, #8]
 8008290:	60a2      	strlt	r2, [r4, #8]
 8008292:	bfb8      	it	lt
 8008294:	60e3      	strlt	r3, [r4, #12]
 8008296:	6921      	ldr	r1, [r4, #16]
 8008298:	290b      	cmp	r1, #11
 800829a:	d911      	bls.n	80082c0 <validate_structure+0xac>
 800829c:	220c      	movs	r2, #12
 800829e:	4668      	mov	r0, sp
 80082a0:	f000 fdb4 	bl	8008e0c <div>
 80082a4:	9a01      	ldr	r2, [sp, #4]
 80082a6:	6963      	ldr	r3, [r4, #20]
 80082a8:	9900      	ldr	r1, [sp, #0]
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	440b      	add	r3, r1
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	bfbb      	ittet	lt
 80082b2:	320c      	addlt	r2, #12
 80082b4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80082b8:	6122      	strge	r2, [r4, #16]
 80082ba:	6122      	strlt	r2, [r4, #16]
 80082bc:	bfb8      	it	lt
 80082be:	6163      	strlt	r3, [r4, #20]
 80082c0:	6963      	ldr	r3, [r4, #20]
 80082c2:	079a      	lsls	r2, r3, #30
 80082c4:	d11e      	bne.n	8008304 <validate_structure+0xf0>
 80082c6:	2164      	movs	r1, #100	; 0x64
 80082c8:	fb93 f2f1 	sdiv	r2, r3, r1
 80082cc:	fb01 3212 	mls	r2, r1, r2, r3
 80082d0:	b9d2      	cbnz	r2, 8008308 <validate_structure+0xf4>
 80082d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80082d6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80082da:	fb93 f1f2 	sdiv	r1, r3, r2
 80082de:	fb02 3311 	mls	r3, r2, r1, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf14      	ite	ne
 80082e6:	231c      	movne	r3, #28
 80082e8:	231d      	moveq	r3, #29
 80082ea:	68e2      	ldr	r2, [r4, #12]
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	dc0d      	bgt.n	800830c <validate_structure+0xf8>
 80082f0:	250b      	movs	r5, #11
 80082f2:	2164      	movs	r1, #100	; 0x64
 80082f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80082f8:	4e30      	ldr	r6, [pc, #192]	; (80083bc <validate_structure+0x1a8>)
 80082fa:	68e7      	ldr	r7, [r4, #12]
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	dd31      	ble.n	8008364 <validate_structure+0x150>
 8008300:	b003      	add	sp, #12
 8008302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008304:	231c      	movs	r3, #28
 8008306:	e7f0      	b.n	80082ea <validate_structure+0xd6>
 8008308:	231d      	movs	r3, #29
 800830a:	e7ee      	b.n	80082ea <validate_structure+0xd6>
 800830c:	2700      	movs	r7, #0
 800830e:	2064      	movs	r0, #100	; 0x64
 8008310:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008314:	4e29      	ldr	r6, [pc, #164]	; (80083bc <validate_structure+0x1a8>)
 8008316:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800831a:	2a01      	cmp	r2, #1
 800831c:	bf0c      	ite	eq
 800831e:	469c      	moveq	ip, r3
 8008320:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008324:	4561      	cmp	r1, ip
 8008326:	ddeb      	ble.n	8008300 <validate_structure+0xec>
 8008328:	3201      	adds	r2, #1
 800832a:	eba1 010c 	sub.w	r1, r1, ip
 800832e:	2a0c      	cmp	r2, #12
 8008330:	60e1      	str	r1, [r4, #12]
 8008332:	6122      	str	r2, [r4, #16]
 8008334:	d1ef      	bne.n	8008316 <validate_structure+0x102>
 8008336:	6963      	ldr	r3, [r4, #20]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	0791      	lsls	r1, r2, #30
 800833c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008340:	d138      	bne.n	80083b4 <validate_structure+0x1a0>
 8008342:	fb92 f1f0 	sdiv	r1, r2, r0
 8008346:	fb00 2211 	mls	r2, r0, r1, r2
 800834a:	2a00      	cmp	r2, #0
 800834c:	d134      	bne.n	80083b8 <validate_structure+0x1a4>
 800834e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008352:	fb93 f2f5 	sdiv	r2, r3, r5
 8008356:	fb05 3312 	mls	r3, r5, r2, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	bf14      	ite	ne
 800835e:	231c      	movne	r3, #28
 8008360:	231d      	moveq	r3, #29
 8008362:	e7d8      	b.n	8008316 <validate_structure+0x102>
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	3a01      	subs	r2, #1
 8008368:	6122      	str	r2, [r4, #16]
 800836a:	3201      	adds	r2, #1
 800836c:	d115      	bne.n	800839a <validate_structure+0x186>
 800836e:	6963      	ldr	r3, [r4, #20]
 8008370:	1e5a      	subs	r2, r3, #1
 8008372:	f012 0f03 	tst.w	r2, #3
 8008376:	e9c4 5204 	strd	r5, r2, [r4, #16]
 800837a:	d117      	bne.n	80083ac <validate_structure+0x198>
 800837c:	fb92 fcf1 	sdiv	ip, r2, r1
 8008380:	fb01 221c 	mls	r2, r1, ip, r2
 8008384:	b9a2      	cbnz	r2, 80083b0 <validate_structure+0x19c>
 8008386:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800838a:	fb93 f2f0 	sdiv	r2, r3, r0
 800838e:	fb00 3312 	mls	r3, r0, r2, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	bf14      	ite	ne
 8008396:	231c      	movne	r3, #28
 8008398:	231d      	moveq	r3, #29
 800839a:	6922      	ldr	r2, [r4, #16]
 800839c:	2a01      	cmp	r2, #1
 800839e:	bf0c      	ite	eq
 80083a0:	461a      	moveq	r2, r3
 80083a2:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 80083a6:	443a      	add	r2, r7
 80083a8:	60e2      	str	r2, [r4, #12]
 80083aa:	e7a6      	b.n	80082fa <validate_structure+0xe6>
 80083ac:	231c      	movs	r3, #28
 80083ae:	e7f4      	b.n	800839a <validate_structure+0x186>
 80083b0:	231d      	movs	r3, #29
 80083b2:	e7f2      	b.n	800839a <validate_structure+0x186>
 80083b4:	231c      	movs	r3, #28
 80083b6:	e7ae      	b.n	8008316 <validate_structure+0x102>
 80083b8:	231d      	movs	r3, #29
 80083ba:	e7ac      	b.n	8008316 <validate_structure+0x102>
 80083bc:	0800c74c 	.word	0x0800c74c

080083c0 <mktime>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	b085      	sub	sp, #20
 80083c6:	4607      	mov	r7, r0
 80083c8:	f001 fff6 	bl	800a3b8 <__gettzinfo>
 80083cc:	4681      	mov	r9, r0
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff20 	bl	8008214 <validate_structure>
 80083d4:	e9d7 4300 	ldrd	r4, r3, [r7]
 80083d8:	223c      	movs	r2, #60	; 0x3c
 80083da:	fb02 4403 	mla	r4, r2, r3, r4
 80083de:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	697e      	ldr	r6, [r7, #20]
 80083e6:	fb02 4403 	mla	r4, r2, r3, r4
 80083ea:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80083ee:	4abb      	ldr	r2, [pc, #748]	; (80086dc <mktime+0x31c>)
 80083f0:	3d01      	subs	r5, #1
 80083f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	4415      	add	r5, r2
 80083fa:	dd11      	ble.n	8008420 <mktime+0x60>
 80083fc:	07b1      	lsls	r1, r6, #30
 80083fe:	d10f      	bne.n	8008420 <mktime+0x60>
 8008400:	2264      	movs	r2, #100	; 0x64
 8008402:	fb96 f3f2 	sdiv	r3, r6, r2
 8008406:	fb02 6313 	mls	r3, r2, r3, r6
 800840a:	b943      	cbnz	r3, 800841e <mktime+0x5e>
 800840c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008410:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008414:	fb93 f1f2 	sdiv	r1, r3, r2
 8008418:	fb02 3311 	mls	r3, r2, r1, r3
 800841c:	b903      	cbnz	r3, 8008420 <mktime+0x60>
 800841e:	3501      	adds	r5, #1
 8008420:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008424:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008428:	3310      	adds	r3, #16
 800842a:	4293      	cmp	r3, r2
 800842c:	61fd      	str	r5, [r7, #28]
 800842e:	f200 815e 	bhi.w	80086ee <mktime+0x32e>
 8008432:	2e46      	cmp	r6, #70	; 0x46
 8008434:	dd72      	ble.n	800851c <mktime+0x15c>
 8008436:	2346      	movs	r3, #70	; 0x46
 8008438:	f240 1c6d 	movw	ip, #365	; 0x16d
 800843c:	2164      	movs	r1, #100	; 0x64
 800843e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008442:	079a      	lsls	r2, r3, #30
 8008444:	d164      	bne.n	8008510 <mktime+0x150>
 8008446:	fb93 f2f1 	sdiv	r2, r3, r1
 800844a:	fb01 3212 	mls	r2, r1, r2, r3
 800844e:	2a00      	cmp	r2, #0
 8008450:	d161      	bne.n	8008516 <mktime+0x156>
 8008452:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008456:	fb92 fef0 	sdiv	lr, r2, r0
 800845a:	fb00 221e 	mls	r2, r0, lr, r2
 800845e:	2a00      	cmp	r2, #0
 8008460:	bf14      	ite	ne
 8008462:	4662      	movne	r2, ip
 8008464:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008468:	3301      	adds	r3, #1
 800846a:	429e      	cmp	r6, r3
 800846c:	4415      	add	r5, r2
 800846e:	d1e8      	bne.n	8008442 <mktime+0x82>
 8008470:	4b9b      	ldr	r3, [pc, #620]	; (80086e0 <mktime+0x320>)
 8008472:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008476:	fbc5 4803 	smlal	r4, r8, r5, r3
 800847a:	f000 f9e3 	bl	8008844 <__tz_lock>
 800847e:	f000 f9ed 	bl	800885c <_tzset_unlocked>
 8008482:	4b98      	ldr	r3, [pc, #608]	; (80086e4 <mktime+0x324>)
 8008484:	f8d3 b000 	ldr.w	fp, [r3]
 8008488:	f1bb 0f00 	cmp.w	fp, #0
 800848c:	d03a      	beq.n	8008504 <mktime+0x144>
 800848e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008492:	6978      	ldr	r0, [r7, #20]
 8008494:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008498:	f1bb 0f01 	cmp.w	fp, #1
 800849c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80084a0:	46da      	mov	sl, fp
 80084a2:	bfa8      	it	ge
 80084a4:	f04f 0a01 	movge.w	sl, #1
 80084a8:	4283      	cmp	r3, r0
 80084aa:	d179      	bne.n	80085a0 <mktime+0x1e0>
 80084ac:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80084b0:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80084b4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 80084b8:	1a13      	subs	r3, r2, r0
 80084ba:	9302      	str	r3, [sp, #8]
 80084bc:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80084ce:	ebb2 0e03 	subs.w	lr, r2, r3
 80084d2:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80084d6:	4574      	cmp	r4, lr
 80084d8:	eb78 0201 	sbcs.w	r2, r8, r1
 80084dc:	da66      	bge.n	80085ac <mktime+0x1ec>
 80084de:	f8d9 2000 	ldr.w	r2, [r9]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d06f      	beq.n	80085c6 <mktime+0x206>
 80084e6:	9a02      	ldr	r2, [sp, #8]
 80084e8:	4294      	cmp	r4, r2
 80084ea:	9a03      	ldr	r2, [sp, #12]
 80084ec:	eb78 0202 	sbcs.w	r2, r8, r2
 80084f0:	db03      	blt.n	80084fa <mktime+0x13a>
 80084f2:	4574      	cmp	r4, lr
 80084f4:	eb78 0101 	sbcs.w	r1, r8, r1
 80084f8:	db6b      	blt.n	80085d2 <mktime+0x212>
 80084fa:	f1bb 0f00 	cmp.w	fp, #0
 80084fe:	f04f 0b00 	mov.w	fp, #0
 8008502:	da6b      	bge.n	80085dc <mktime+0x21c>
 8008504:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008508:	191c      	adds	r4, r3, r4
 800850a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800850e:	e0a9      	b.n	8008664 <mktime+0x2a4>
 8008510:	f240 126d 	movw	r2, #365	; 0x16d
 8008514:	e7a8      	b.n	8008468 <mktime+0xa8>
 8008516:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800851a:	e7a5      	b.n	8008468 <mktime+0xa8>
 800851c:	d0a8      	beq.n	8008470 <mktime+0xb0>
 800851e:	2345      	movs	r3, #69	; 0x45
 8008520:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008524:	2164      	movs	r1, #100	; 0x64
 8008526:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800852a:	e012      	b.n	8008552 <mktime+0x192>
 800852c:	bb62      	cbnz	r2, 8008588 <mktime+0x1c8>
 800852e:	fb93 f2f1 	sdiv	r2, r3, r1
 8008532:	fb01 3212 	mls	r2, r1, r2, r3
 8008536:	bb52      	cbnz	r2, 800858e <mktime+0x1ce>
 8008538:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800853c:	fb92 fef0 	sdiv	lr, r2, r0
 8008540:	fb00 221e 	mls	r2, r0, lr, r2
 8008544:	2a00      	cmp	r2, #0
 8008546:	bf14      	ite	ne
 8008548:	4662      	movne	r2, ip
 800854a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800854e:	1aad      	subs	r5, r5, r2
 8008550:	3b01      	subs	r3, #1
 8008552:	429e      	cmp	r6, r3
 8008554:	f003 0203 	and.w	r2, r3, #3
 8008558:	dbe8      	blt.n	800852c <mktime+0x16c>
 800855a:	b9da      	cbnz	r2, 8008594 <mktime+0x1d4>
 800855c:	2264      	movs	r2, #100	; 0x64
 800855e:	fb96 f3f2 	sdiv	r3, r6, r2
 8008562:	fb02 6313 	mls	r3, r2, r3, r6
 8008566:	b9c3      	cbnz	r3, 800859a <mktime+0x1da>
 8008568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800856c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008570:	fb93 f1f2 	sdiv	r1, r3, r2
 8008574:	fb02 3311 	mls	r3, r2, r1, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	f240 136d 	movw	r3, #365	; 0x16d
 800857e:	bf08      	it	eq
 8008580:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8008584:	1aed      	subs	r5, r5, r3
 8008586:	e773      	b.n	8008470 <mktime+0xb0>
 8008588:	f240 126d 	movw	r2, #365	; 0x16d
 800858c:	e7df      	b.n	800854e <mktime+0x18e>
 800858e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008592:	e7dc      	b.n	800854e <mktime+0x18e>
 8008594:	f240 136d 	movw	r3, #365	; 0x16d
 8008598:	e7f4      	b.n	8008584 <mktime+0x1c4>
 800859a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800859e:	e7f1      	b.n	8008584 <mktime+0x1c4>
 80085a0:	f000 f8aa 	bl	80086f8 <__tzcalc_limits>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d181      	bne.n	80084ac <mktime+0xec>
 80085a8:	46d3      	mov	fp, sl
 80085aa:	e050      	b.n	800864e <mktime+0x28e>
 80085ac:	9a01      	ldr	r2, [sp, #4]
 80085ae:	1a12      	subs	r2, r2, r0
 80085b0:	9201      	str	r2, [sp, #4]
 80085b2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80085b6:	eb6c 0c02 	sbc.w	ip, ip, r2
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	4294      	cmp	r4, r2
 80085be:	eb78 0c0c 	sbcs.w	ip, r8, ip
 80085c2:	dbf1      	blt.n	80085a8 <mktime+0x1e8>
 80085c4:	e78b      	b.n	80084de <mktime+0x11e>
 80085c6:	9a02      	ldr	r2, [sp, #8]
 80085c8:	4294      	cmp	r4, r2
 80085ca:	9a03      	ldr	r2, [sp, #12]
 80085cc:	eb78 0202 	sbcs.w	r2, r8, r2
 80085d0:	db8f      	blt.n	80084f2 <mktime+0x132>
 80085d2:	f1bb 0f00 	cmp.w	fp, #0
 80085d6:	db3e      	blt.n	8008656 <mktime+0x296>
 80085d8:	f04f 0b01 	mov.w	fp, #1
 80085dc:	ea8a 0a0b 	eor.w	sl, sl, fp
 80085e0:	f1ba 0f01 	cmp.w	sl, #1
 80085e4:	d133      	bne.n	800864e <mktime+0x28e>
 80085e6:	f1bb 0f00 	cmp.w	fp, #0
 80085ea:	d04e      	beq.n	800868a <mktime+0x2ca>
 80085ec:	1a1b      	subs	r3, r3, r0
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	191c      	adds	r4, r3, r4
 80085f2:	441a      	add	r2, r3
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	4638      	mov	r0, r7
 80085f8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80085fc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008600:	f7ff fe08 	bl	8008214 <validate_structure>
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	ebb2 020a 	subs.w	r2, r2, sl
 800860a:	d020      	beq.n	800864e <mktime+0x28e>
 800860c:	2a01      	cmp	r2, #1
 800860e:	dc3e      	bgt.n	800868e <mktime+0x2ce>
 8008610:	1c91      	adds	r1, r2, #2
 8008612:	bfd8      	it	le
 8008614:	2201      	movle	r2, #1
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4415      	add	r5, r2
 800861a:	18d2      	adds	r2, r2, r3
 800861c:	d540      	bpl.n	80086a0 <mktime+0x2e0>
 800861e:	1e73      	subs	r3, r6, #1
 8008620:	079a      	lsls	r2, r3, #30
 8008622:	d137      	bne.n	8008694 <mktime+0x2d4>
 8008624:	2264      	movs	r2, #100	; 0x64
 8008626:	fb93 f1f2 	sdiv	r1, r3, r2
 800862a:	fb02 3311 	mls	r3, r2, r1, r3
 800862e:	bba3      	cbnz	r3, 800869a <mktime+0x2da>
 8008630:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008634:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8008638:	fb96 f2f3 	sdiv	r2, r6, r3
 800863c:	fb03 6612 	mls	r6, r3, r2, r6
 8008640:	2e00      	cmp	r6, #0
 8008642:	f240 136d 	movw	r3, #365	; 0x16d
 8008646:	bf18      	it	ne
 8008648:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	f1bb 0f01 	cmp.w	fp, #1
 8008652:	f47f af57 	bne.w	8008504 <mktime+0x144>
 8008656:	f04f 0b01 	mov.w	fp, #1
 800865a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800865e:	191c      	adds	r4, r3, r4
 8008660:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008664:	f000 f8f4 	bl	8008850 <__tz_unlock>
 8008668:	2307      	movs	r3, #7
 800866a:	3504      	adds	r5, #4
 800866c:	fb95 f3f3 	sdiv	r3, r5, r3
 8008670:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008674:	1aed      	subs	r5, r5, r3
 8008676:	bf48      	it	mi
 8008678:	3507      	addmi	r5, #7
 800867a:	f8c7 b020 	str.w	fp, [r7, #32]
 800867e:	61bd      	str	r5, [r7, #24]
 8008680:	4620      	mov	r0, r4
 8008682:	4641      	mov	r1, r8
 8008684:	b005      	add	sp, #20
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	1ac3      	subs	r3, r0, r3
 800868c:	e7af      	b.n	80085ee <mktime+0x22e>
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	e7c0      	b.n	8008616 <mktime+0x256>
 8008694:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8008698:	e7d8      	b.n	800864c <mktime+0x28c>
 800869a:	f240 136d 	movw	r3, #365	; 0x16d
 800869e:	e7d5      	b.n	800864c <mktime+0x28c>
 80086a0:	07b3      	lsls	r3, r6, #30
 80086a2:	d118      	bne.n	80086d6 <mktime+0x316>
 80086a4:	2164      	movs	r1, #100	; 0x64
 80086a6:	fb96 f3f1 	sdiv	r3, r6, r1
 80086aa:	fb01 6313 	mls	r3, r1, r3, r6
 80086ae:	b9db      	cbnz	r3, 80086e8 <mktime+0x328>
 80086b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80086b4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80086b8:	fb96 f1f3 	sdiv	r1, r6, r3
 80086bc:	fb03 6611 	mls	r6, r3, r1, r6
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	f240 136d 	movw	r3, #365	; 0x16d
 80086c6:	bf08      	it	eq
 80086c8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80086cc:	429a      	cmp	r2, r3
 80086ce:	bfa8      	it	ge
 80086d0:	1ad2      	subge	r2, r2, r3
 80086d2:	61fa      	str	r2, [r7, #28]
 80086d4:	e7bb      	b.n	800864e <mktime+0x28e>
 80086d6:	f240 136d 	movw	r3, #365	; 0x16d
 80086da:	e7f7      	b.n	80086cc <mktime+0x30c>
 80086dc:	0800c77c 	.word	0x0800c77c
 80086e0:	00015180 	.word	0x00015180
 80086e4:	2000090c 	.word	0x2000090c
 80086e8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80086ec:	e7ee      	b.n	80086cc <mktime+0x30c>
 80086ee:	f04f 34ff 	mov.w	r4, #4294967295
 80086f2:	46a0      	mov	r8, r4
 80086f4:	e7c4      	b.n	8008680 <mktime+0x2c0>
 80086f6:	bf00      	nop

080086f8 <__tzcalc_limits>:
 80086f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4605      	mov	r5, r0
 80086fe:	f001 fe5b 	bl	800a3b8 <__gettzinfo>
 8008702:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8008706:	429d      	cmp	r5, r3
 8008708:	f340 8096 	ble.w	8008838 <__tzcalc_limits+0x140>
 800870c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8008710:	18ac      	adds	r4, r5, r2
 8008712:	f240 126d 	movw	r2, #365	; 0x16d
 8008716:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	fb02 4403 	mla	r4, r2, r3, r4
 8008720:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8008724:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8008728:	fb93 f3f2 	sdiv	r3, r3, r2
 800872c:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8008730:	441c      	add	r4, r3
 8008732:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008736:	186a      	adds	r2, r5, r1
 8008738:	fbb2 f2f3 	udiv	r2, r2, r3
 800873c:	fb95 fcf3 	sdiv	ip, r5, r3
 8008740:	4414      	add	r4, r2
 8008742:	2264      	movs	r2, #100	; 0x64
 8008744:	fb03 5c1c 	mls	ip, r3, ip, r5
 8008748:	fb95 f7f2 	sdiv	r7, r5, r2
 800874c:	fabc f68c 	clz	r6, ip
 8008750:	4601      	mov	r1, r0
 8008752:	fb02 5717 	mls	r7, r2, r7, r5
 8008756:	6045      	str	r5, [r0, #4]
 8008758:	0976      	lsrs	r6, r6, #5
 800875a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800875e:	f005 0203 	and.w	r2, r5, #3
 8008762:	7a0d      	ldrb	r5, [r1, #8]
 8008764:	694b      	ldr	r3, [r1, #20]
 8008766:	2d4a      	cmp	r5, #74	; 0x4a
 8008768:	d12b      	bne.n	80087c2 <__tzcalc_limits+0xca>
 800876a:	18e5      	adds	r5, r4, r3
 800876c:	b902      	cbnz	r2, 8008770 <__tzcalc_limits+0x78>
 800876e:	b917      	cbnz	r7, 8008776 <__tzcalc_limits+0x7e>
 8008770:	f1bc 0f00 	cmp.w	ip, #0
 8008774:	d123      	bne.n	80087be <__tzcalc_limits+0xc6>
 8008776:	2b3b      	cmp	r3, #59	; 0x3b
 8008778:	bfd4      	ite	le
 800877a:	2300      	movle	r3, #0
 800877c:	2301      	movgt	r3, #1
 800877e:	442b      	add	r3, r5
 8008780:	3b01      	subs	r3, #1
 8008782:	698d      	ldr	r5, [r1, #24]
 8008784:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800883c <__tzcalc_limits+0x144>
 8008788:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800878c:	fbc3 5e08 	smlal	r5, lr, r3, r8
 8008790:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008792:	18ed      	adds	r5, r5, r3
 8008794:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8008798:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800879c:	3128      	adds	r1, #40	; 0x28
 800879e:	458b      	cmp	fp, r1
 80087a0:	d1df      	bne.n	8008762 <__tzcalc_limits+0x6a>
 80087a2:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80087a6:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 80087aa:	428c      	cmp	r4, r1
 80087ac:	4193      	sbcs	r3, r2
 80087ae:	bfb4      	ite	lt
 80087b0:	2301      	movlt	r3, #1
 80087b2:	2300      	movge	r3, #0
 80087b4:	6003      	str	r3, [r0, #0]
 80087b6:	2001      	movs	r0, #1
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087be:	2300      	movs	r3, #0
 80087c0:	e7dd      	b.n	800877e <__tzcalc_limits+0x86>
 80087c2:	2d44      	cmp	r5, #68	; 0x44
 80087c4:	d101      	bne.n	80087ca <__tzcalc_limits+0xd2>
 80087c6:	4423      	add	r3, r4
 80087c8:	e7db      	b.n	8008782 <__tzcalc_limits+0x8a>
 80087ca:	bb7a      	cbnz	r2, 800882c <__tzcalc_limits+0x134>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	bf0c      	ite	eq
 80087d0:	4635      	moveq	r5, r6
 80087d2:	2501      	movne	r5, #1
 80087d4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80087d8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80087dc:	f04f 0800 	mov.w	r8, #0
 80087e0:	f8cd e004 	str.w	lr, [sp, #4]
 80087e4:	46a6      	mov	lr, r4
 80087e6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008840 <__tzcalc_limits+0x148>
 80087ea:	fb0a 9505 	mla	r5, sl, r5, r9
 80087ee:	3d04      	subs	r5, #4
 80087f0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80087f4:	f108 0801 	add.w	r8, r8, #1
 80087f8:	45c2      	cmp	sl, r8
 80087fa:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80087fe:	dc17      	bgt.n	8008830 <__tzcalc_limits+0x138>
 8008800:	f04f 0807 	mov.w	r8, #7
 8008804:	f10e 0504 	add.w	r5, lr, #4
 8008808:	fb95 f8f8 	sdiv	r8, r5, r8
 800880c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8008810:	eba5 0508 	sub.w	r5, r5, r8
 8008814:	1b5d      	subs	r5, r3, r5
 8008816:	690b      	ldr	r3, [r1, #16]
 8008818:	bf48      	it	mi
 800881a:	3507      	addmi	r5, #7
 800881c:	3b01      	subs	r3, #1
 800881e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008822:	442b      	add	r3, r5
 8008824:	454b      	cmp	r3, r9
 8008826:	da05      	bge.n	8008834 <__tzcalc_limits+0x13c>
 8008828:	4473      	add	r3, lr
 800882a:	e7aa      	b.n	8008782 <__tzcalc_limits+0x8a>
 800882c:	4635      	mov	r5, r6
 800882e:	e7d1      	b.n	80087d4 <__tzcalc_limits+0xdc>
 8008830:	44ce      	add	lr, r9
 8008832:	e7dd      	b.n	80087f0 <__tzcalc_limits+0xf8>
 8008834:	3b07      	subs	r3, #7
 8008836:	e7f5      	b.n	8008824 <__tzcalc_limits+0x12c>
 8008838:	2000      	movs	r0, #0
 800883a:	e7bd      	b.n	80087b8 <__tzcalc_limits+0xc0>
 800883c:	00015180 	.word	0x00015180
 8008840:	0800c7ac 	.word	0x0800c7ac

08008844 <__tz_lock>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__tz_lock+0x8>)
 8008846:	f000 baa2 	b.w	8008d8e <__retarget_lock_acquire>
 800884a:	bf00      	nop
 800884c:	2000091b 	.word	0x2000091b

08008850 <__tz_unlock>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__tz_unlock+0x8>)
 8008852:	f000 ba9e 	b.w	8008d92 <__retarget_lock_release>
 8008856:	bf00      	nop
 8008858:	2000091b 	.word	0x2000091b

0800885c <_tzset_unlocked>:
 800885c:	4b01      	ldr	r3, [pc, #4]	; (8008864 <_tzset_unlocked+0x8>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	f000 b802 	b.w	8008868 <_tzset_unlocked_r>
 8008864:	20000534 	.word	0x20000534

08008868 <_tzset_unlocked_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	b08d      	sub	sp, #52	; 0x34
 800886e:	4607      	mov	r7, r0
 8008870:	f001 fda2 	bl	800a3b8 <__gettzinfo>
 8008874:	496d      	ldr	r1, [pc, #436]	; (8008a2c <_tzset_unlocked_r+0x1c4>)
 8008876:	4604      	mov	r4, r0
 8008878:	4638      	mov	r0, r7
 800887a:	f000 feb9 	bl	80095f0 <_getenv_r>
 800887e:	4d6c      	ldr	r5, [pc, #432]	; (8008a30 <_tzset_unlocked_r+0x1c8>)
 8008880:	4606      	mov	r6, r0
 8008882:	bb10      	cbnz	r0, 80088ca <_tzset_unlocked_r+0x62>
 8008884:	4b6b      	ldr	r3, [pc, #428]	; (8008a34 <_tzset_unlocked_r+0x1cc>)
 8008886:	4a6c      	ldr	r2, [pc, #432]	; (8008a38 <_tzset_unlocked_r+0x1d0>)
 8008888:	6018      	str	r0, [r3, #0]
 800888a:	4b6c      	ldr	r3, [pc, #432]	; (8008a3c <_tzset_unlocked_r+0x1d4>)
 800888c:	214a      	movs	r1, #74	; 0x4a
 800888e:	6018      	str	r0, [r3, #0]
 8008890:	4b6b      	ldr	r3, [pc, #428]	; (8008a40 <_tzset_unlocked_r+0x1d8>)
 8008892:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008896:	e9c3 2200 	strd	r2, r2, [r3]
 800889a:	2200      	movs	r2, #0
 800889c:	2300      	movs	r3, #0
 800889e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80088a2:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 80088a6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80088aa:	62a0      	str	r0, [r4, #40]	; 0x28
 80088ac:	6520      	str	r0, [r4, #80]	; 0x50
 80088ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80088b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088b6:	6828      	ldr	r0, [r5, #0]
 80088b8:	7221      	strb	r1, [r4, #8]
 80088ba:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80088be:	f000 fea7 	bl	8009610 <free>
 80088c2:	602e      	str	r6, [r5, #0]
 80088c4:	b00d      	add	sp, #52	; 0x34
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	6829      	ldr	r1, [r5, #0]
 80088cc:	2900      	cmp	r1, #0
 80088ce:	f040 808e 	bne.w	80089ee <_tzset_unlocked_r+0x186>
 80088d2:	6828      	ldr	r0, [r5, #0]
 80088d4:	f000 fe9c 	bl	8009610 <free>
 80088d8:	4630      	mov	r0, r6
 80088da:	f7f7 fc53 	bl	8000184 <strlen>
 80088de:	1c41      	adds	r1, r0, #1
 80088e0:	4638      	mov	r0, r7
 80088e2:	f000 febd 	bl	8009660 <_malloc_r>
 80088e6:	6028      	str	r0, [r5, #0]
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f040 8086 	bne.w	80089fa <_tzset_unlocked_r+0x192>
 80088ee:	2300      	movs	r3, #0
 80088f0:	4a52      	ldr	r2, [pc, #328]	; (8008a3c <_tzset_unlocked_r+0x1d4>)
 80088f2:	2000      	movs	r0, #0
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	2100      	movs	r1, #0
 80088f8:	4a52      	ldr	r2, [pc, #328]	; (8008a44 <_tzset_unlocked_r+0x1dc>)
 80088fa:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8008a40 <_tzset_unlocked_r+0x1d8>
 80088fe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008902:	e9c8 2200 	strd	r2, r2, [r8]
 8008906:	224a      	movs	r2, #74	; 0x4a
 8008908:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800890c:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8008910:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8008914:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8008918:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800891c:	f8df a114 	ldr.w	sl, [pc, #276]	; 8008a34 <_tzset_unlocked_r+0x1cc>
 8008920:	7222      	strb	r2, [r4, #8]
 8008922:	f8ca 3000 	str.w	r3, [sl]
 8008926:	62a3      	str	r3, [r4, #40]	; 0x28
 8008928:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800892c:	6523      	str	r3, [r4, #80]	; 0x50
 800892e:	7833      	ldrb	r3, [r6, #0]
 8008930:	2b3a      	cmp	r3, #58	; 0x3a
 8008932:	bf08      	it	eq
 8008934:	3601      	addeq	r6, #1
 8008936:	7833      	ldrb	r3, [r6, #0]
 8008938:	2b3c      	cmp	r3, #60	; 0x3c
 800893a:	d162      	bne.n	8008a02 <_tzset_unlocked_r+0x19a>
 800893c:	1c75      	adds	r5, r6, #1
 800893e:	4628      	mov	r0, r5
 8008940:	4a41      	ldr	r2, [pc, #260]	; (8008a48 <_tzset_unlocked_r+0x1e0>)
 8008942:	4942      	ldr	r1, [pc, #264]	; (8008a4c <_tzset_unlocked_r+0x1e4>)
 8008944:	ab0a      	add	r3, sp, #40	; 0x28
 8008946:	f001 fd0d 	bl	800a364 <siscanf>
 800894a:	2800      	cmp	r0, #0
 800894c:	ddba      	ble.n	80088c4 <_tzset_unlocked_r+0x5c>
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	1eda      	subs	r2, r3, #3
 8008952:	2a07      	cmp	r2, #7
 8008954:	d8b6      	bhi.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008956:	5ceb      	ldrb	r3, [r5, r3]
 8008958:	2b3e      	cmp	r3, #62	; 0x3e
 800895a:	d1b3      	bne.n	80088c4 <_tzset_unlocked_r+0x5c>
 800895c:	3602      	adds	r6, #2
 800895e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008960:	18f5      	adds	r5, r6, r3
 8008962:	5cf3      	ldrb	r3, [r6, r3]
 8008964:	2b2d      	cmp	r3, #45	; 0x2d
 8008966:	d15a      	bne.n	8008a1e <_tzset_unlocked_r+0x1b6>
 8008968:	f04f 39ff 	mov.w	r9, #4294967295
 800896c:	3501      	adds	r5, #1
 800896e:	2300      	movs	r3, #0
 8008970:	af08      	add	r7, sp, #32
 8008972:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008976:	f8ad 3020 	strh.w	r3, [sp, #32]
 800897a:	ab0a      	add	r3, sp, #40	; 0x28
 800897c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	f10d 031e 	add.w	r3, sp, #30
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4628      	mov	r0, r5
 800898a:	4931      	ldr	r1, [pc, #196]	; (8008a50 <_tzset_unlocked_r+0x1e8>)
 800898c:	ab0a      	add	r3, sp, #40	; 0x28
 800898e:	aa07      	add	r2, sp, #28
 8008990:	f001 fce8 	bl	800a364 <siscanf>
 8008994:	2800      	cmp	r0, #0
 8008996:	dd95      	ble.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008998:	223c      	movs	r2, #60	; 0x3c
 800899a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800899e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80089a2:	fb02 6603 	mla	r6, r2, r3, r6
 80089a6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80089aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80089ae:	fb02 6603 	mla	r6, r2, r3, r6
 80089b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b4:	fb09 f606 	mul.w	r6, r9, r6
 80089b8:	eb05 0903 	add.w	r9, r5, r3
 80089bc:	5ceb      	ldrb	r3, [r5, r3]
 80089be:	2b3c      	cmp	r3, #60	; 0x3c
 80089c0:	f040 80e7 	bne.w	8008b92 <_tzset_unlocked_r+0x32a>
 80089c4:	f109 0501 	add.w	r5, r9, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	4a22      	ldr	r2, [pc, #136]	; (8008a54 <_tzset_unlocked_r+0x1ec>)
 80089cc:	491f      	ldr	r1, [pc, #124]	; (8008a4c <_tzset_unlocked_r+0x1e4>)
 80089ce:	ab0a      	add	r3, sp, #40	; 0x28
 80089d0:	f001 fcc8 	bl	800a364 <siscanf>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	dc41      	bgt.n	8008a5c <_tzset_unlocked_r+0x1f4>
 80089d8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80089dc:	2b3e      	cmp	r3, #62	; 0x3e
 80089de:	d13d      	bne.n	8008a5c <_tzset_unlocked_r+0x1f4>
 80089e0:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <_tzset_unlocked_r+0x1e0>)
 80089e2:	62a6      	str	r6, [r4, #40]	; 0x28
 80089e4:	e9c8 3300 	strd	r3, r3, [r8]
 80089e8:	f8ca 6000 	str.w	r6, [sl]
 80089ec:	e76a      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 80089ee:	f7f7 fbbf 	bl	8000170 <strcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f47f af6d 	bne.w	80088d2 <_tzset_unlocked_r+0x6a>
 80089f8:	e764      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 80089fa:	4631      	mov	r1, r6
 80089fc:	f000 f9cb 	bl	8008d96 <strcpy>
 8008a00:	e775      	b.n	80088ee <_tzset_unlocked_r+0x86>
 8008a02:	4630      	mov	r0, r6
 8008a04:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <_tzset_unlocked_r+0x1e0>)
 8008a06:	4914      	ldr	r1, [pc, #80]	; (8008a58 <_tzset_unlocked_r+0x1f0>)
 8008a08:	ab0a      	add	r3, sp, #40	; 0x28
 8008a0a:	f001 fcab 	bl	800a364 <siscanf>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f77f af58 	ble.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a16:	3b03      	subs	r3, #3
 8008a18:	2b07      	cmp	r3, #7
 8008a1a:	d9a0      	bls.n	800895e <_tzset_unlocked_r+0xf6>
 8008a1c:	e752      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008a1e:	2b2b      	cmp	r3, #43	; 0x2b
 8008a20:	f04f 0901 	mov.w	r9, #1
 8008a24:	bf08      	it	eq
 8008a26:	3501      	addeq	r5, #1
 8008a28:	e7a1      	b.n	800896e <_tzset_unlocked_r+0x106>
 8008a2a:	bf00      	nop
 8008a2c:	0800c80c 	.word	0x0800c80c
 8008a30:	20000908 	.word	0x20000908
 8008a34:	20000910 	.word	0x20000910
 8008a38:	0800c80f 	.word	0x0800c80f
 8008a3c:	2000090c 	.word	0x2000090c
 8008a40:	20000374 	.word	0x20000374
 8008a44:	0800c89d 	.word	0x0800c89d
 8008a48:	200008fc 	.word	0x200008fc
 8008a4c:	0800c813 	.word	0x0800c813
 8008a50:	0800c848 	.word	0x0800c848
 8008a54:	200008f0 	.word	0x200008f0
 8008a58:	0800c826 	.word	0x0800c826
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	1eda      	subs	r2, r3, #3
 8008a60:	2a07      	cmp	r2, #7
 8008a62:	f63f af2f 	bhi.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008a66:	5ceb      	ldrb	r3, [r5, r3]
 8008a68:	2b3e      	cmp	r3, #62	; 0x3e
 8008a6a:	f47f af2b 	bne.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008a6e:	f109 0902 	add.w	r9, r9, #2
 8008a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a74:	eb09 0503 	add.w	r5, r9, r3
 8008a78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a7e:	f040 8097 	bne.w	8008bb0 <_tzset_unlocked_r+0x348>
 8008a82:	f04f 39ff 	mov.w	r9, #4294967295
 8008a86:	3501      	adds	r5, #1
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008a8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008a92:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008a96:	930a      	str	r3, [sp, #40]	; 0x28
 8008a98:	ab0a      	add	r3, sp, #40	; 0x28
 8008a9a:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	f10d 031e 	add.w	r3, sp, #30
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	4979      	ldr	r1, [pc, #484]	; (8008c90 <_tzset_unlocked_r+0x428>)
 8008aaa:	ab0a      	add	r3, sp, #40	; 0x28
 8008aac:	aa07      	add	r2, sp, #28
 8008aae:	f001 fc59 	bl	800a364 <siscanf>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f300 8082 	bgt.w	8008bbc <_tzset_unlocked_r+0x354>
 8008ab8:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8008abc:	4627      	mov	r7, r4
 8008abe:	f04f 0b00 	mov.w	fp, #0
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	441d      	add	r5, r3
 8008ac8:	782b      	ldrb	r3, [r5, #0]
 8008aca:	2b2c      	cmp	r3, #44	; 0x2c
 8008acc:	bf08      	it	eq
 8008ace:	3501      	addeq	r5, #1
 8008ad0:	f895 9000 	ldrb.w	r9, [r5]
 8008ad4:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8008ad8:	f040 8083 	bne.w	8008be2 <_tzset_unlocked_r+0x37a>
 8008adc:	ab0a      	add	r3, sp, #40	; 0x28
 8008ade:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8008ae2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ae6:	aa09      	add	r2, sp, #36	; 0x24
 8008ae8:	9200      	str	r2, [sp, #0]
 8008aea:	4628      	mov	r0, r5
 8008aec:	4969      	ldr	r1, [pc, #420]	; (8008c94 <_tzset_unlocked_r+0x42c>)
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8008af4:	f001 fc36 	bl	800a364 <siscanf>
 8008af8:	2803      	cmp	r0, #3
 8008afa:	f47f aee3 	bne.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008afe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8008b02:	1e4b      	subs	r3, r1, #1
 8008b04:	2b0b      	cmp	r3, #11
 8008b06:	f63f aedd 	bhi.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008b0a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008b0e:	1e53      	subs	r3, r2, #1
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	f63f aed7 	bhi.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008b16:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8008b1a:	2b06      	cmp	r3, #6
 8008b1c:	f63f aed2 	bhi.w	80088c4 <_tzset_unlocked_r+0x5c>
 8008b20:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008b24:	f887 9008 	strb.w	r9, [r7, #8]
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2c:	eb05 0903 	add.w	r9, r5, r3
 8008b30:	2500      	movs	r5, #0
 8008b32:	2302      	movs	r3, #2
 8008b34:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008b38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b3c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008b40:	950a      	str	r5, [sp, #40]	; 0x28
 8008b42:	f899 3000 	ldrb.w	r3, [r9]
 8008b46:	2b2f      	cmp	r3, #47	; 0x2f
 8008b48:	d177      	bne.n	8008c3a <_tzset_unlocked_r+0x3d2>
 8008b4a:	ab0a      	add	r3, sp, #40	; 0x28
 8008b4c:	aa08      	add	r2, sp, #32
 8008b4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b52:	f10d 021e 	add.w	r2, sp, #30
 8008b56:	9200      	str	r2, [sp, #0]
 8008b58:	4648      	mov	r0, r9
 8008b5a:	494f      	ldr	r1, [pc, #316]	; (8008c98 <_tzset_unlocked_r+0x430>)
 8008b5c:	9303      	str	r3, [sp, #12]
 8008b5e:	aa07      	add	r2, sp, #28
 8008b60:	f001 fc00 	bl	800a364 <siscanf>
 8008b64:	42a8      	cmp	r0, r5
 8008b66:	dc68      	bgt.n	8008c3a <_tzset_unlocked_r+0x3d2>
 8008b68:	214a      	movs	r1, #74	; 0x4a
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8008b72:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b76:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008b7a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b7e:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8008b82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b86:	7221      	strb	r1, [r4, #8]
 8008b88:	62a5      	str	r5, [r4, #40]	; 0x28
 8008b8a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8008b8e:	6525      	str	r5, [r4, #80]	; 0x50
 8008b90:	e698      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008b92:	4648      	mov	r0, r9
 8008b94:	4a41      	ldr	r2, [pc, #260]	; (8008c9c <_tzset_unlocked_r+0x434>)
 8008b96:	4942      	ldr	r1, [pc, #264]	; (8008ca0 <_tzset_unlocked_r+0x438>)
 8008b98:	ab0a      	add	r3, sp, #40	; 0x28
 8008b9a:	f001 fbe3 	bl	800a364 <siscanf>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f77f af1e 	ble.w	80089e0 <_tzset_unlocked_r+0x178>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	3b03      	subs	r3, #3
 8008ba8:	2b07      	cmp	r3, #7
 8008baa:	f67f af62 	bls.w	8008a72 <_tzset_unlocked_r+0x20a>
 8008bae:	e689      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008bb2:	f04f 0901 	mov.w	r9, #1
 8008bb6:	bf08      	it	eq
 8008bb8:	3501      	addeq	r5, #1
 8008bba:	e765      	b.n	8008a88 <_tzset_unlocked_r+0x220>
 8008bbc:	213c      	movs	r1, #60	; 0x3c
 8008bbe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008bc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008bc6:	fb01 3302 	mla	r3, r1, r2, r3
 8008bca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008bce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008bd2:	fb01 3302 	mla	r3, r1, r2, r3
 8008bd6:	fb09 f303 	mul.w	r3, r9, r3
 8008bda:	e76f      	b.n	8008abc <_tzset_unlocked_r+0x254>
 8008bdc:	f04f 0b01 	mov.w	fp, #1
 8008be0:	e772      	b.n	8008ac8 <_tzset_unlocked_r+0x260>
 8008be2:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8008be6:	bf0a      	itet	eq
 8008be8:	464b      	moveq	r3, r9
 8008bea:	2344      	movne	r3, #68	; 0x44
 8008bec:	3501      	addeq	r5, #1
 8008bee:	220a      	movs	r2, #10
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	a90b      	add	r1, sp, #44	; 0x2c
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	f001 fae1 	bl	800a1bc <strtoul>
 8008bfa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008bfe:	9b05      	ldr	r3, [sp, #20]
 8008c00:	45a9      	cmp	r9, r5
 8008c02:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8008c06:	d114      	bne.n	8008c32 <_tzset_unlocked_r+0x3ca>
 8008c08:	234d      	movs	r3, #77	; 0x4d
 8008c0a:	f1bb 0f00 	cmp.w	fp, #0
 8008c0e:	d107      	bne.n	8008c20 <_tzset_unlocked_r+0x3b8>
 8008c10:	2103      	movs	r1, #3
 8008c12:	7223      	strb	r3, [r4, #8]
 8008c14:	2302      	movs	r3, #2
 8008c16:	f8c4 b014 	str.w	fp, [r4, #20]
 8008c1a:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8008c1e:	e787      	b.n	8008b30 <_tzset_unlocked_r+0x2c8>
 8008c20:	220b      	movs	r2, #11
 8008c22:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8008c26:	2301      	movs	r3, #1
 8008c28:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008c30:	e77e      	b.n	8008b30 <_tzset_unlocked_r+0x2c8>
 8008c32:	b280      	uxth	r0, r0
 8008c34:	723b      	strb	r3, [r7, #8]
 8008c36:	6178      	str	r0, [r7, #20]
 8008c38:	e77a      	b.n	8008b30 <_tzset_unlocked_r+0x2c8>
 8008c3a:	213c      	movs	r1, #60	; 0x3c
 8008c3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008c40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008c44:	3728      	adds	r7, #40	; 0x28
 8008c46:	fb01 3302 	mla	r3, r1, r2, r3
 8008c4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008c4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008c52:	fb01 3302 	mla	r3, r1, r2, r3
 8008c56:	f847 3c10 	str.w	r3, [r7, #-16]
 8008c5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c5c:	444d      	add	r5, r9
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	d0bb      	beq.n	8008bdc <_tzset_unlocked_r+0x374>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	6860      	ldr	r0, [r4, #4]
 8008c68:	6523      	str	r3, [r4, #80]	; 0x50
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <_tzset_unlocked_r+0x43c>)
 8008c6c:	62a6      	str	r6, [r4, #40]	; 0x28
 8008c6e:	f8c8 3000 	str.w	r3, [r8]
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <_tzset_unlocked_r+0x434>)
 8008c74:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c78:	f7ff fd3e 	bl	80086f8 <__tzcalc_limits>
 8008c7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008c7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008c80:	f8ca 2000 	str.w	r2, [sl]
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	bf18      	it	ne
 8008c88:	2301      	movne	r3, #1
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <_tzset_unlocked_r+0x440>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	e619      	b.n	80088c4 <_tzset_unlocked_r+0x5c>
 8008c90:	0800c848 	.word	0x0800c848
 8008c94:	0800c834 	.word	0x0800c834
 8008c98:	0800c847 	.word	0x0800c847
 8008c9c:	200008f0 	.word	0x200008f0
 8008ca0:	0800c826 	.word	0x0800c826
 8008ca4:	200008fc 	.word	0x200008fc
 8008ca8:	2000090c 	.word	0x2000090c

08008cac <_close_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4d05      	ldr	r5, [pc, #20]	; (8008cc8 <_close_r+0x1c>)
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	602b      	str	r3, [r5, #0]
 8008cb8:	f7fe f8d0 	bl	8006e5c <_close>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_close_r+0x1a>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_close_r+0x1a>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20000914 	.word	0x20000914

08008ccc <_lseek_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4d05      	ldr	r5, [pc, #20]	; (8008cec <_lseek_r+0x20>)
 8008cd8:	602a      	str	r2, [r5, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f7fe f8e2 	bl	8006ea4 <_lseek>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_lseek_r+0x1e>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_lseek_r+0x1e>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	20000914 	.word	0x20000914

08008cf0 <_read_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4d05      	ldr	r5, [pc, #20]	; (8008d10 <_read_r+0x20>)
 8008cfc:	602a      	str	r2, [r5, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f7fe f873 	bl	8006dea <_read>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d102      	bne.n	8008d0e <_read_r+0x1e>
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	b103      	cbz	r3, 8008d0e <_read_r+0x1e>
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	20000914 	.word	0x20000914

08008d14 <_write_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4d05      	ldr	r5, [pc, #20]	; (8008d34 <_write_r+0x20>)
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f7fe f87e 	bl	8006e24 <_write>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_write_r+0x1e>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_write_r+0x1e>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20000914 	.word	0x20000914

08008d38 <__errno>:
 8008d38:	4b01      	ldr	r3, [pc, #4]	; (8008d40 <__errno+0x8>)
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000534 	.word	0x20000534

08008d44 <__libc_init_array>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	2600      	movs	r6, #0
 8008d48:	4d0c      	ldr	r5, [pc, #48]	; (8008d7c <__libc_init_array+0x38>)
 8008d4a:	4c0d      	ldr	r4, [pc, #52]	; (8008d80 <__libc_init_array+0x3c>)
 8008d4c:	1b64      	subs	r4, r4, r5
 8008d4e:	10a4      	asrs	r4, r4, #2
 8008d50:	42a6      	cmp	r6, r4
 8008d52:	d109      	bne.n	8008d68 <__libc_init_array+0x24>
 8008d54:	f003 fb66 	bl	800c424 <_init>
 8008d58:	2600      	movs	r6, #0
 8008d5a:	4d0a      	ldr	r5, [pc, #40]	; (8008d84 <__libc_init_array+0x40>)
 8008d5c:	4c0a      	ldr	r4, [pc, #40]	; (8008d88 <__libc_init_array+0x44>)
 8008d5e:	1b64      	subs	r4, r4, r5
 8008d60:	10a4      	asrs	r4, r4, #2
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	d105      	bne.n	8008d72 <__libc_init_array+0x2e>
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6c:	4798      	blx	r3
 8008d6e:	3601      	adds	r6, #1
 8008d70:	e7ee      	b.n	8008d50 <__libc_init_array+0xc>
 8008d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d76:	4798      	blx	r3
 8008d78:	3601      	adds	r6, #1
 8008d7a:	e7f2      	b.n	8008d62 <__libc_init_array+0x1e>
 8008d7c:	0800caf0 	.word	0x0800caf0
 8008d80:	0800caf0 	.word	0x0800caf0
 8008d84:	0800caf0 	.word	0x0800caf0
 8008d88:	0800caf4 	.word	0x0800caf4

08008d8c <__retarget_lock_init_recursive>:
 8008d8c:	4770      	bx	lr

08008d8e <__retarget_lock_acquire>:
 8008d8e:	4770      	bx	lr

08008d90 <__retarget_lock_acquire_recursive>:
 8008d90:	4770      	bx	lr

08008d92 <__retarget_lock_release>:
 8008d92:	4770      	bx	lr

08008d94 <__retarget_lock_release_recursive>:
 8008d94:	4770      	bx	lr

08008d96 <strcpy>:
 8008d96:	4603      	mov	r3, r0
 8008d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9c:	f803 2b01 	strb.w	r2, [r3], #1
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d1f9      	bne.n	8008d98 <strcpy+0x2>
 8008da4:	4770      	bx	lr

08008da6 <memcpy>:
 8008da6:	440a      	add	r2, r1
 8008da8:	4291      	cmp	r1, r2
 8008daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dae:	d100      	bne.n	8008db2 <memcpy+0xc>
 8008db0:	4770      	bx	lr
 8008db2:	b510      	push	{r4, lr}
 8008db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db8:	4291      	cmp	r1, r2
 8008dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dbe:	d1f9      	bne.n	8008db4 <memcpy+0xe>
 8008dc0:	bd10      	pop	{r4, pc}
	...

08008dc4 <nan>:
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4901      	ldr	r1, [pc, #4]	; (8008dcc <nan+0x8>)
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	7ff80000 	.word	0x7ff80000

08008dd0 <__assert_func>:
 8008dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <__assert_func+0x2c>)
 8008dd8:	4605      	mov	r5, r0
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68d8      	ldr	r0, [r3, #12]
 8008dde:	b14c      	cbz	r4, 8008df4 <__assert_func+0x24>
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <__assert_func+0x30>)
 8008de2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008de6:	9100      	str	r1, [sp, #0]
 8008de8:	462b      	mov	r3, r5
 8008dea:	4906      	ldr	r1, [pc, #24]	; (8008e04 <__assert_func+0x34>)
 8008dec:	f001 faa8 	bl	800a340 <fiprintf>
 8008df0:	f001 fb9c 	bl	800a52c <abort>
 8008df4:	4b04      	ldr	r3, [pc, #16]	; (8008e08 <__assert_func+0x38>)
 8008df6:	461c      	mov	r4, r3
 8008df8:	e7f3      	b.n	8008de2 <__assert_func+0x12>
 8008dfa:	bf00      	nop
 8008dfc:	20000534 	.word	0x20000534
 8008e00:	0800c862 	.word	0x0800c862
 8008e04:	0800c86f 	.word	0x0800c86f
 8008e08:	0800c89d 	.word	0x0800c89d

08008e0c <div>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	fb91 f4f2 	sdiv	r4, r1, r2
 8008e12:	2900      	cmp	r1, #0
 8008e14:	fb02 1314 	mls	r3, r2, r4, r1
 8008e18:	db06      	blt.n	8008e28 <div+0x1c>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	da01      	bge.n	8008e22 <div+0x16>
 8008e1e:	3401      	adds	r4, #1
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	e9c0 4300 	strd	r4, r3, [r0]
 8008e26:	bd10      	pop	{r4, pc}
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfc4      	itt	gt
 8008e2c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8008e30:	189b      	addgt	r3, r3, r2
 8008e32:	e7f6      	b.n	8008e22 <div+0x16>

08008e34 <_free_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4605      	mov	r5, r0
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d040      	beq.n	8008ebe <_free_r+0x8a>
 8008e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e40:	1f0c      	subs	r4, r1, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfb8      	it	lt
 8008e46:	18e4      	addlt	r4, r4, r3
 8008e48:	f000 fc9c 	bl	8009784 <__malloc_lock>
 8008e4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ec0 <_free_r+0x8c>)
 8008e4e:	6813      	ldr	r3, [r2, #0]
 8008e50:	b933      	cbnz	r3, 8008e60 <_free_r+0x2c>
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	6014      	str	r4, [r2, #0]
 8008e56:	4628      	mov	r0, r5
 8008e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e5c:	f000 bc98 	b.w	8009790 <__malloc_unlock>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d908      	bls.n	8008e76 <_free_r+0x42>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	1821      	adds	r1, r4, r0
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf01      	itttt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	1809      	addeq	r1, r1, r0
 8008e72:	6021      	streq	r1, [r4, #0]
 8008e74:	e7ed      	b.n	8008e52 <_free_r+0x1e>
 8008e76:	461a      	mov	r2, r3
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	b10b      	cbz	r3, 8008e80 <_free_r+0x4c>
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d9fa      	bls.n	8008e76 <_free_r+0x42>
 8008e80:	6811      	ldr	r1, [r2, #0]
 8008e82:	1850      	adds	r0, r2, r1
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d10b      	bne.n	8008ea0 <_free_r+0x6c>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	4401      	add	r1, r0
 8008e8c:	1850      	adds	r0, r2, r1
 8008e8e:	4283      	cmp	r3, r0
 8008e90:	6011      	str	r1, [r2, #0]
 8008e92:	d1e0      	bne.n	8008e56 <_free_r+0x22>
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4408      	add	r0, r1
 8008e9a:	6010      	str	r0, [r2, #0]
 8008e9c:	6053      	str	r3, [r2, #4]
 8008e9e:	e7da      	b.n	8008e56 <_free_r+0x22>
 8008ea0:	d902      	bls.n	8008ea8 <_free_r+0x74>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	e7d6      	b.n	8008e56 <_free_r+0x22>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	6054      	str	r4, [r2, #4]
 8008ebc:	e7cb      	b.n	8008e56 <_free_r+0x22>
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	2000091c 	.word	0x2000091c

08008ec4 <rshift>:
 8008ec4:	6903      	ldr	r3, [r0, #16]
 8008ec6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ece:	f100 0414 	add.w	r4, r0, #20
 8008ed2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ed6:	dd46      	ble.n	8008f66 <rshift+0xa2>
 8008ed8:	f011 011f 	ands.w	r1, r1, #31
 8008edc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ee4:	d10c      	bne.n	8008f00 <rshift+0x3c>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f100 0710 	add.w	r7, r0, #16
 8008eec:	42b1      	cmp	r1, r6
 8008eee:	d335      	bcc.n	8008f5c <rshift+0x98>
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	1eea      	subs	r2, r5, #3
 8008ef6:	4296      	cmp	r6, r2
 8008ef8:	bf38      	it	cc
 8008efa:	2300      	movcc	r3, #0
 8008efc:	4423      	add	r3, r4
 8008efe:	e015      	b.n	8008f2c <rshift+0x68>
 8008f00:	46a1      	mov	r9, r4
 8008f02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f06:	f1c1 0820 	rsb	r8, r1, #32
 8008f0a:	40cf      	lsrs	r7, r1
 8008f0c:	f105 0e04 	add.w	lr, r5, #4
 8008f10:	4576      	cmp	r6, lr
 8008f12:	46f4      	mov	ip, lr
 8008f14:	d816      	bhi.n	8008f44 <rshift+0x80>
 8008f16:	1a9a      	subs	r2, r3, r2
 8008f18:	0092      	lsls	r2, r2, #2
 8008f1a:	3a04      	subs	r2, #4
 8008f1c:	3501      	adds	r5, #1
 8008f1e:	42ae      	cmp	r6, r5
 8008f20:	bf38      	it	cc
 8008f22:	2200      	movcc	r2, #0
 8008f24:	18a3      	adds	r3, r4, r2
 8008f26:	50a7      	str	r7, [r4, r2]
 8008f28:	b107      	cbz	r7, 8008f2c <rshift+0x68>
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	eba3 0204 	sub.w	r2, r3, r4
 8008f32:	bf08      	it	eq
 8008f34:	2300      	moveq	r3, #0
 8008f36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f3a:	6102      	str	r2, [r0, #16]
 8008f3c:	bf08      	it	eq
 8008f3e:	6143      	streq	r3, [r0, #20]
 8008f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f44:	f8dc c000 	ldr.w	ip, [ip]
 8008f48:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f4c:	ea4c 0707 	orr.w	r7, ip, r7
 8008f50:	f849 7b04 	str.w	r7, [r9], #4
 8008f54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f58:	40cf      	lsrs	r7, r1
 8008f5a:	e7d9      	b.n	8008f10 <rshift+0x4c>
 8008f5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f60:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f64:	e7c2      	b.n	8008eec <rshift+0x28>
 8008f66:	4623      	mov	r3, r4
 8008f68:	e7e0      	b.n	8008f2c <rshift+0x68>

08008f6a <__hexdig_fun>:
 8008f6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f6e:	2b09      	cmp	r3, #9
 8008f70:	d802      	bhi.n	8008f78 <__hexdig_fun+0xe>
 8008f72:	3820      	subs	r0, #32
 8008f74:	b2c0      	uxtb	r0, r0
 8008f76:	4770      	bx	lr
 8008f78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f7c:	2b05      	cmp	r3, #5
 8008f7e:	d801      	bhi.n	8008f84 <__hexdig_fun+0x1a>
 8008f80:	3847      	subs	r0, #71	; 0x47
 8008f82:	e7f7      	b.n	8008f74 <__hexdig_fun+0xa>
 8008f84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f88:	2b05      	cmp	r3, #5
 8008f8a:	d801      	bhi.n	8008f90 <__hexdig_fun+0x26>
 8008f8c:	3827      	subs	r0, #39	; 0x27
 8008f8e:	e7f1      	b.n	8008f74 <__hexdig_fun+0xa>
 8008f90:	2000      	movs	r0, #0
 8008f92:	4770      	bx	lr

08008f94 <__gethex>:
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4681      	mov	r9, r0
 8008f9a:	468a      	mov	sl, r1
 8008f9c:	4617      	mov	r7, r2
 8008f9e:	680a      	ldr	r2, [r1, #0]
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	f102 0b02 	add.w	fp, r2, #2
 8008fa6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008faa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	32fe      	adds	r2, #254	; 0xfe
 8008fb2:	eb02 030b 	add.w	r3, r2, fp
 8008fb6:	46d8      	mov	r8, fp
 8008fb8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	2830      	cmp	r0, #48	; 0x30
 8008fc0:	d0f7      	beq.n	8008fb2 <__gethex+0x1e>
 8008fc2:	f7ff ffd2 	bl	8008f6a <__hexdig_fun>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d138      	bne.n	800903e <__gethex+0xaa>
 8008fcc:	2201      	movs	r2, #1
 8008fce:	4640      	mov	r0, r8
 8008fd0:	49a7      	ldr	r1, [pc, #668]	; (8009270 <__gethex+0x2dc>)
 8008fd2:	f7fe ff96 	bl	8007f02 <strncmp>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d169      	bne.n	80090b0 <__gethex+0x11c>
 8008fdc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008fe0:	465d      	mov	r5, fp
 8008fe2:	f7ff ffc2 	bl	8008f6a <__hexdig_fun>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d064      	beq.n	80090b4 <__gethex+0x120>
 8008fea:	465a      	mov	r2, fp
 8008fec:	7810      	ldrb	r0, [r2, #0]
 8008fee:	4690      	mov	r8, r2
 8008ff0:	2830      	cmp	r0, #48	; 0x30
 8008ff2:	f102 0201 	add.w	r2, r2, #1
 8008ff6:	d0f9      	beq.n	8008fec <__gethex+0x58>
 8008ff8:	f7ff ffb7 	bl	8008f6a <__hexdig_fun>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	fab0 f480 	clz	r4, r0
 8009002:	465e      	mov	r6, fp
 8009004:	0964      	lsrs	r4, r4, #5
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	4642      	mov	r2, r8
 800900a:	4615      	mov	r5, r2
 800900c:	7828      	ldrb	r0, [r5, #0]
 800900e:	3201      	adds	r2, #1
 8009010:	f7ff ffab 	bl	8008f6a <__hexdig_fun>
 8009014:	2800      	cmp	r0, #0
 8009016:	d1f8      	bne.n	800900a <__gethex+0x76>
 8009018:	2201      	movs	r2, #1
 800901a:	4628      	mov	r0, r5
 800901c:	4994      	ldr	r1, [pc, #592]	; (8009270 <__gethex+0x2dc>)
 800901e:	f7fe ff70 	bl	8007f02 <strncmp>
 8009022:	b978      	cbnz	r0, 8009044 <__gethex+0xb0>
 8009024:	b946      	cbnz	r6, 8009038 <__gethex+0xa4>
 8009026:	1c6e      	adds	r6, r5, #1
 8009028:	4632      	mov	r2, r6
 800902a:	4615      	mov	r5, r2
 800902c:	7828      	ldrb	r0, [r5, #0]
 800902e:	3201      	adds	r2, #1
 8009030:	f7ff ff9b 	bl	8008f6a <__hexdig_fun>
 8009034:	2800      	cmp	r0, #0
 8009036:	d1f8      	bne.n	800902a <__gethex+0x96>
 8009038:	1b73      	subs	r3, r6, r5
 800903a:	009e      	lsls	r6, r3, #2
 800903c:	e004      	b.n	8009048 <__gethex+0xb4>
 800903e:	2400      	movs	r4, #0
 8009040:	4626      	mov	r6, r4
 8009042:	e7e1      	b.n	8009008 <__gethex+0x74>
 8009044:	2e00      	cmp	r6, #0
 8009046:	d1f7      	bne.n	8009038 <__gethex+0xa4>
 8009048:	782b      	ldrb	r3, [r5, #0]
 800904a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800904e:	2b50      	cmp	r3, #80	; 0x50
 8009050:	d13d      	bne.n	80090ce <__gethex+0x13a>
 8009052:	786b      	ldrb	r3, [r5, #1]
 8009054:	2b2b      	cmp	r3, #43	; 0x2b
 8009056:	d02f      	beq.n	80090b8 <__gethex+0x124>
 8009058:	2b2d      	cmp	r3, #45	; 0x2d
 800905a:	d031      	beq.n	80090c0 <__gethex+0x12c>
 800905c:	f04f 0b00 	mov.w	fp, #0
 8009060:	1c69      	adds	r1, r5, #1
 8009062:	7808      	ldrb	r0, [r1, #0]
 8009064:	f7ff ff81 	bl	8008f6a <__hexdig_fun>
 8009068:	1e42      	subs	r2, r0, #1
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	2a18      	cmp	r2, #24
 800906e:	d82e      	bhi.n	80090ce <__gethex+0x13a>
 8009070:	f1a0 0210 	sub.w	r2, r0, #16
 8009074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009078:	f7ff ff77 	bl	8008f6a <__hexdig_fun>
 800907c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009080:	fa5f fc8c 	uxtb.w	ip, ip
 8009084:	f1bc 0f18 	cmp.w	ip, #24
 8009088:	d91d      	bls.n	80090c6 <__gethex+0x132>
 800908a:	f1bb 0f00 	cmp.w	fp, #0
 800908e:	d000      	beq.n	8009092 <__gethex+0xfe>
 8009090:	4252      	negs	r2, r2
 8009092:	4416      	add	r6, r2
 8009094:	f8ca 1000 	str.w	r1, [sl]
 8009098:	b1dc      	cbz	r4, 80090d2 <__gethex+0x13e>
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bf14      	ite	ne
 80090a0:	f04f 0800 	movne.w	r8, #0
 80090a4:	f04f 0806 	moveq.w	r8, #6
 80090a8:	4640      	mov	r0, r8
 80090aa:	b005      	add	sp, #20
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b0:	4645      	mov	r5, r8
 80090b2:	4626      	mov	r6, r4
 80090b4:	2401      	movs	r4, #1
 80090b6:	e7c7      	b.n	8009048 <__gethex+0xb4>
 80090b8:	f04f 0b00 	mov.w	fp, #0
 80090bc:	1ca9      	adds	r1, r5, #2
 80090be:	e7d0      	b.n	8009062 <__gethex+0xce>
 80090c0:	f04f 0b01 	mov.w	fp, #1
 80090c4:	e7fa      	b.n	80090bc <__gethex+0x128>
 80090c6:	230a      	movs	r3, #10
 80090c8:	fb03 0002 	mla	r0, r3, r2, r0
 80090cc:	e7d0      	b.n	8009070 <__gethex+0xdc>
 80090ce:	4629      	mov	r1, r5
 80090d0:	e7e0      	b.n	8009094 <__gethex+0x100>
 80090d2:	4621      	mov	r1, r4
 80090d4:	eba5 0308 	sub.w	r3, r5, r8
 80090d8:	3b01      	subs	r3, #1
 80090da:	2b07      	cmp	r3, #7
 80090dc:	dc0a      	bgt.n	80090f4 <__gethex+0x160>
 80090de:	4648      	mov	r0, r9
 80090e0:	f000 fb5c 	bl	800979c <_Balloc>
 80090e4:	4604      	mov	r4, r0
 80090e6:	b940      	cbnz	r0, 80090fa <__gethex+0x166>
 80090e8:	4602      	mov	r2, r0
 80090ea:	21e4      	movs	r1, #228	; 0xe4
 80090ec:	4b61      	ldr	r3, [pc, #388]	; (8009274 <__gethex+0x2e0>)
 80090ee:	4862      	ldr	r0, [pc, #392]	; (8009278 <__gethex+0x2e4>)
 80090f0:	f7ff fe6e 	bl	8008dd0 <__assert_func>
 80090f4:	3101      	adds	r1, #1
 80090f6:	105b      	asrs	r3, r3, #1
 80090f8:	e7ef      	b.n	80090da <__gethex+0x146>
 80090fa:	2300      	movs	r3, #0
 80090fc:	469b      	mov	fp, r3
 80090fe:	f100 0a14 	add.w	sl, r0, #20
 8009102:	f8cd a004 	str.w	sl, [sp, #4]
 8009106:	45a8      	cmp	r8, r5
 8009108:	d344      	bcc.n	8009194 <__gethex+0x200>
 800910a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800910e:	4658      	mov	r0, fp
 8009110:	f848 bb04 	str.w	fp, [r8], #4
 8009114:	eba8 080a 	sub.w	r8, r8, sl
 8009118:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800911c:	6122      	str	r2, [r4, #16]
 800911e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009122:	f000 fc2d 	bl	8009980 <__hi0bits>
 8009126:	683d      	ldr	r5, [r7, #0]
 8009128:	eba8 0800 	sub.w	r8, r8, r0
 800912c:	45a8      	cmp	r8, r5
 800912e:	dd59      	ble.n	80091e4 <__gethex+0x250>
 8009130:	eba8 0805 	sub.w	r8, r8, r5
 8009134:	4641      	mov	r1, r8
 8009136:	4620      	mov	r0, r4
 8009138:	f000 ffab 	bl	800a092 <__any_on>
 800913c:	4683      	mov	fp, r0
 800913e:	b1b8      	cbz	r0, 8009170 <__gethex+0x1dc>
 8009140:	f04f 0b01 	mov.w	fp, #1
 8009144:	f108 33ff 	add.w	r3, r8, #4294967295
 8009148:	1159      	asrs	r1, r3, #5
 800914a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800914e:	f003 021f 	and.w	r2, r3, #31
 8009152:	fa0b f202 	lsl.w	r2, fp, r2
 8009156:	420a      	tst	r2, r1
 8009158:	d00a      	beq.n	8009170 <__gethex+0x1dc>
 800915a:	455b      	cmp	r3, fp
 800915c:	dd06      	ble.n	800916c <__gethex+0x1d8>
 800915e:	4620      	mov	r0, r4
 8009160:	f1a8 0102 	sub.w	r1, r8, #2
 8009164:	f000 ff95 	bl	800a092 <__any_on>
 8009168:	2800      	cmp	r0, #0
 800916a:	d138      	bne.n	80091de <__gethex+0x24a>
 800916c:	f04f 0b02 	mov.w	fp, #2
 8009170:	4641      	mov	r1, r8
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff fea6 	bl	8008ec4 <rshift>
 8009178:	4446      	add	r6, r8
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	42b3      	cmp	r3, r6
 800917e:	da41      	bge.n	8009204 <__gethex+0x270>
 8009180:	4621      	mov	r1, r4
 8009182:	4648      	mov	r0, r9
 8009184:	f000 fb4a 	bl	800981c <_Bfree>
 8009188:	2300      	movs	r3, #0
 800918a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800918c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e789      	b.n	80090a8 <__gethex+0x114>
 8009194:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009198:	2a2e      	cmp	r2, #46	; 0x2e
 800919a:	d014      	beq.n	80091c6 <__gethex+0x232>
 800919c:	2b20      	cmp	r3, #32
 800919e:	d106      	bne.n	80091ae <__gethex+0x21a>
 80091a0:	9b01      	ldr	r3, [sp, #4]
 80091a2:	f843 bb04 	str.w	fp, [r3], #4
 80091a6:	f04f 0b00 	mov.w	fp, #0
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	465b      	mov	r3, fp
 80091ae:	7828      	ldrb	r0, [r5, #0]
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	f7ff feda 	bl	8008f6a <__hexdig_fun>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	f000 000f 	and.w	r0, r0, #15
 80091bc:	4098      	lsls	r0, r3
 80091be:	ea4b 0b00 	orr.w	fp, fp, r0
 80091c2:	3304      	adds	r3, #4
 80091c4:	e79f      	b.n	8009106 <__gethex+0x172>
 80091c6:	45a8      	cmp	r8, r5
 80091c8:	d8e8      	bhi.n	800919c <__gethex+0x208>
 80091ca:	2201      	movs	r2, #1
 80091cc:	4628      	mov	r0, r5
 80091ce:	4928      	ldr	r1, [pc, #160]	; (8009270 <__gethex+0x2dc>)
 80091d0:	9303      	str	r3, [sp, #12]
 80091d2:	f7fe fe96 	bl	8007f02 <strncmp>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1df      	bne.n	800919c <__gethex+0x208>
 80091dc:	e793      	b.n	8009106 <__gethex+0x172>
 80091de:	f04f 0b03 	mov.w	fp, #3
 80091e2:	e7c5      	b.n	8009170 <__gethex+0x1dc>
 80091e4:	da0b      	bge.n	80091fe <__gethex+0x26a>
 80091e6:	eba5 0808 	sub.w	r8, r5, r8
 80091ea:	4621      	mov	r1, r4
 80091ec:	4642      	mov	r2, r8
 80091ee:	4648      	mov	r0, r9
 80091f0:	f000 fd2c 	bl	8009c4c <__lshift>
 80091f4:	4604      	mov	r4, r0
 80091f6:	eba6 0608 	sub.w	r6, r6, r8
 80091fa:	f100 0a14 	add.w	sl, r0, #20
 80091fe:	f04f 0b00 	mov.w	fp, #0
 8009202:	e7ba      	b.n	800917a <__gethex+0x1e6>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	42b3      	cmp	r3, r6
 8009208:	dd74      	ble.n	80092f4 <__gethex+0x360>
 800920a:	1b9e      	subs	r6, r3, r6
 800920c:	42b5      	cmp	r5, r6
 800920e:	dc35      	bgt.n	800927c <__gethex+0x2e8>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d023      	beq.n	800925e <__gethex+0x2ca>
 8009216:	2b03      	cmp	r3, #3
 8009218:	d025      	beq.n	8009266 <__gethex+0x2d2>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d115      	bne.n	800924a <__gethex+0x2b6>
 800921e:	42b5      	cmp	r5, r6
 8009220:	d113      	bne.n	800924a <__gethex+0x2b6>
 8009222:	2d01      	cmp	r5, #1
 8009224:	d10b      	bne.n	800923e <__gethex+0x2aa>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	9a02      	ldr	r2, [sp, #8]
 800922a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	2301      	movs	r3, #1
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	f8ca 3000 	str.w	r3, [sl]
 8009238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923a:	601c      	str	r4, [r3, #0]
 800923c:	e734      	b.n	80090a8 <__gethex+0x114>
 800923e:	4620      	mov	r0, r4
 8009240:	1e69      	subs	r1, r5, #1
 8009242:	f000 ff26 	bl	800a092 <__any_on>
 8009246:	2800      	cmp	r0, #0
 8009248:	d1ed      	bne.n	8009226 <__gethex+0x292>
 800924a:	4621      	mov	r1, r4
 800924c:	4648      	mov	r0, r9
 800924e:	f000 fae5 	bl	800981c <_Bfree>
 8009252:	2300      	movs	r3, #0
 8009254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009256:	f04f 0850 	mov.w	r8, #80	; 0x50
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e724      	b.n	80090a8 <__gethex+0x114>
 800925e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f2      	bne.n	800924a <__gethex+0x2b6>
 8009264:	e7df      	b.n	8009226 <__gethex+0x292>
 8009266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1dc      	bne.n	8009226 <__gethex+0x292>
 800926c:	e7ed      	b.n	800924a <__gethex+0x2b6>
 800926e:	bf00      	nop
 8009270:	0800c51c 	.word	0x0800c51c
 8009274:	0800c89e 	.word	0x0800c89e
 8009278:	0800c8af 	.word	0x0800c8af
 800927c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009280:	f1bb 0f00 	cmp.w	fp, #0
 8009284:	d133      	bne.n	80092ee <__gethex+0x35a>
 8009286:	f1b8 0f00 	cmp.w	r8, #0
 800928a:	d004      	beq.n	8009296 <__gethex+0x302>
 800928c:	4641      	mov	r1, r8
 800928e:	4620      	mov	r0, r4
 8009290:	f000 feff 	bl	800a092 <__any_on>
 8009294:	4683      	mov	fp, r0
 8009296:	2301      	movs	r3, #1
 8009298:	ea4f 1268 	mov.w	r2, r8, asr #5
 800929c:	f008 081f 	and.w	r8, r8, #31
 80092a0:	fa03 f308 	lsl.w	r3, r3, r8
 80092a4:	f04f 0802 	mov.w	r8, #2
 80092a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80092ac:	4631      	mov	r1, r6
 80092ae:	4213      	tst	r3, r2
 80092b0:	4620      	mov	r0, r4
 80092b2:	bf18      	it	ne
 80092b4:	f04b 0b02 	orrne.w	fp, fp, #2
 80092b8:	1bad      	subs	r5, r5, r6
 80092ba:	f7ff fe03 	bl	8008ec4 <rshift>
 80092be:	687e      	ldr	r6, [r7, #4]
 80092c0:	f1bb 0f00 	cmp.w	fp, #0
 80092c4:	d04a      	beq.n	800935c <__gethex+0x3c8>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d016      	beq.n	80092fa <__gethex+0x366>
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d018      	beq.n	8009302 <__gethex+0x36e>
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d109      	bne.n	80092e8 <__gethex+0x354>
 80092d4:	f01b 0f02 	tst.w	fp, #2
 80092d8:	d006      	beq.n	80092e8 <__gethex+0x354>
 80092da:	f8da 3000 	ldr.w	r3, [sl]
 80092de:	ea4b 0b03 	orr.w	fp, fp, r3
 80092e2:	f01b 0f01 	tst.w	fp, #1
 80092e6:	d10f      	bne.n	8009308 <__gethex+0x374>
 80092e8:	f048 0810 	orr.w	r8, r8, #16
 80092ec:	e036      	b.n	800935c <__gethex+0x3c8>
 80092ee:	f04f 0b01 	mov.w	fp, #1
 80092f2:	e7d0      	b.n	8009296 <__gethex+0x302>
 80092f4:	f04f 0801 	mov.w	r8, #1
 80092f8:	e7e2      	b.n	80092c0 <__gethex+0x32c>
 80092fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092fc:	f1c3 0301 	rsb	r3, r3, #1
 8009300:	930f      	str	r3, [sp, #60]	; 0x3c
 8009302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0ef      	beq.n	80092e8 <__gethex+0x354>
 8009308:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800930c:	f104 0214 	add.w	r2, r4, #20
 8009310:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	2300      	movs	r3, #0
 8009318:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800931c:	4694      	mov	ip, r2
 800931e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009322:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009326:	d01e      	beq.n	8009366 <__gethex+0x3d2>
 8009328:	3101      	adds	r1, #1
 800932a:	f8cc 1000 	str.w	r1, [ip]
 800932e:	f1b8 0f02 	cmp.w	r8, #2
 8009332:	f104 0214 	add.w	r2, r4, #20
 8009336:	d13d      	bne.n	80093b4 <__gethex+0x420>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	42ab      	cmp	r3, r5
 800933e:	d10b      	bne.n	8009358 <__gethex+0x3c4>
 8009340:	2301      	movs	r3, #1
 8009342:	1169      	asrs	r1, r5, #5
 8009344:	f005 051f 	and.w	r5, r5, #31
 8009348:	fa03 f505 	lsl.w	r5, r3, r5
 800934c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009350:	421d      	tst	r5, r3
 8009352:	bf18      	it	ne
 8009354:	f04f 0801 	movne.w	r8, #1
 8009358:	f048 0820 	orr.w	r8, r8, #32
 800935c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800935e:	601c      	str	r4, [r3, #0]
 8009360:	9b02      	ldr	r3, [sp, #8]
 8009362:	601e      	str	r6, [r3, #0]
 8009364:	e6a0      	b.n	80090a8 <__gethex+0x114>
 8009366:	4290      	cmp	r0, r2
 8009368:	f842 3c04 	str.w	r3, [r2, #-4]
 800936c:	d8d6      	bhi.n	800931c <__gethex+0x388>
 800936e:	68a2      	ldr	r2, [r4, #8]
 8009370:	4593      	cmp	fp, r2
 8009372:	db17      	blt.n	80093a4 <__gethex+0x410>
 8009374:	6861      	ldr	r1, [r4, #4]
 8009376:	4648      	mov	r0, r9
 8009378:	3101      	adds	r1, #1
 800937a:	f000 fa0f 	bl	800979c <_Balloc>
 800937e:	4682      	mov	sl, r0
 8009380:	b918      	cbnz	r0, 800938a <__gethex+0x3f6>
 8009382:	4602      	mov	r2, r0
 8009384:	2184      	movs	r1, #132	; 0x84
 8009386:	4b1a      	ldr	r3, [pc, #104]	; (80093f0 <__gethex+0x45c>)
 8009388:	e6b1      	b.n	80090ee <__gethex+0x15a>
 800938a:	6922      	ldr	r2, [r4, #16]
 800938c:	f104 010c 	add.w	r1, r4, #12
 8009390:	3202      	adds	r2, #2
 8009392:	0092      	lsls	r2, r2, #2
 8009394:	300c      	adds	r0, #12
 8009396:	f7ff fd06 	bl	8008da6 <memcpy>
 800939a:	4621      	mov	r1, r4
 800939c:	4648      	mov	r0, r9
 800939e:	f000 fa3d 	bl	800981c <_Bfree>
 80093a2:	4654      	mov	r4, sl
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	1c51      	adds	r1, r2, #1
 80093a8:	6121      	str	r1, [r4, #16]
 80093aa:	2101      	movs	r1, #1
 80093ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80093b0:	6151      	str	r1, [r2, #20]
 80093b2:	e7bc      	b.n	800932e <__gethex+0x39a>
 80093b4:	6921      	ldr	r1, [r4, #16]
 80093b6:	4559      	cmp	r1, fp
 80093b8:	dd0b      	ble.n	80093d2 <__gethex+0x43e>
 80093ba:	2101      	movs	r1, #1
 80093bc:	4620      	mov	r0, r4
 80093be:	f7ff fd81 	bl	8008ec4 <rshift>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	3601      	adds	r6, #1
 80093c6:	42b3      	cmp	r3, r6
 80093c8:	f6ff aeda 	blt.w	8009180 <__gethex+0x1ec>
 80093cc:	f04f 0801 	mov.w	r8, #1
 80093d0:	e7c2      	b.n	8009358 <__gethex+0x3c4>
 80093d2:	f015 051f 	ands.w	r5, r5, #31
 80093d6:	d0f9      	beq.n	80093cc <__gethex+0x438>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	f1c5 0520 	rsb	r5, r5, #32
 80093de:	441a      	add	r2, r3
 80093e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80093e4:	f000 facc 	bl	8009980 <__hi0bits>
 80093e8:	42a8      	cmp	r0, r5
 80093ea:	dbe6      	blt.n	80093ba <__gethex+0x426>
 80093ec:	e7ee      	b.n	80093cc <__gethex+0x438>
 80093ee:	bf00      	nop
 80093f0:	0800c89e 	.word	0x0800c89e

080093f4 <L_shift>:
 80093f4:	f1c2 0208 	rsb	r2, r2, #8
 80093f8:	0092      	lsls	r2, r2, #2
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	f1c2 0620 	rsb	r6, r2, #32
 8009400:	6843      	ldr	r3, [r0, #4]
 8009402:	6804      	ldr	r4, [r0, #0]
 8009404:	fa03 f506 	lsl.w	r5, r3, r6
 8009408:	432c      	orrs	r4, r5
 800940a:	40d3      	lsrs	r3, r2
 800940c:	6004      	str	r4, [r0, #0]
 800940e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009412:	4288      	cmp	r0, r1
 8009414:	d3f4      	bcc.n	8009400 <L_shift+0xc>
 8009416:	bd70      	pop	{r4, r5, r6, pc}

08009418 <__match>:
 8009418:	b530      	push	{r4, r5, lr}
 800941a:	6803      	ldr	r3, [r0, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009422:	b914      	cbnz	r4, 800942a <__match+0x12>
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	2001      	movs	r0, #1
 8009428:	bd30      	pop	{r4, r5, pc}
 800942a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800942e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009432:	2d19      	cmp	r5, #25
 8009434:	bf98      	it	ls
 8009436:	3220      	addls	r2, #32
 8009438:	42a2      	cmp	r2, r4
 800943a:	d0f0      	beq.n	800941e <__match+0x6>
 800943c:	2000      	movs	r0, #0
 800943e:	e7f3      	b.n	8009428 <__match+0x10>

08009440 <__hexnan>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	2500      	movs	r5, #0
 8009446:	680b      	ldr	r3, [r1, #0]
 8009448:	4682      	mov	sl, r0
 800944a:	115e      	asrs	r6, r3, #5
 800944c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009450:	f013 031f 	ands.w	r3, r3, #31
 8009454:	bf18      	it	ne
 8009456:	3604      	addne	r6, #4
 8009458:	1f37      	subs	r7, r6, #4
 800945a:	4690      	mov	r8, r2
 800945c:	46b9      	mov	r9, r7
 800945e:	463c      	mov	r4, r7
 8009460:	46ab      	mov	fp, r5
 8009462:	b087      	sub	sp, #28
 8009464:	6801      	ldr	r1, [r0, #0]
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	f846 5c04 	str.w	r5, [r6, #-4]
 800946c:	9502      	str	r5, [sp, #8]
 800946e:	784a      	ldrb	r2, [r1, #1]
 8009470:	1c4b      	adds	r3, r1, #1
 8009472:	9303      	str	r3, [sp, #12]
 8009474:	b342      	cbz	r2, 80094c8 <__hexnan+0x88>
 8009476:	4610      	mov	r0, r2
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	9204      	str	r2, [sp, #16]
 800947c:	f7ff fd75 	bl	8008f6a <__hexdig_fun>
 8009480:	2800      	cmp	r0, #0
 8009482:	d14f      	bne.n	8009524 <__hexnan+0xe4>
 8009484:	9a04      	ldr	r2, [sp, #16]
 8009486:	9905      	ldr	r1, [sp, #20]
 8009488:	2a20      	cmp	r2, #32
 800948a:	d818      	bhi.n	80094be <__hexnan+0x7e>
 800948c:	9b02      	ldr	r3, [sp, #8]
 800948e:	459b      	cmp	fp, r3
 8009490:	dd13      	ble.n	80094ba <__hexnan+0x7a>
 8009492:	454c      	cmp	r4, r9
 8009494:	d206      	bcs.n	80094a4 <__hexnan+0x64>
 8009496:	2d07      	cmp	r5, #7
 8009498:	dc04      	bgt.n	80094a4 <__hexnan+0x64>
 800949a:	462a      	mov	r2, r5
 800949c:	4649      	mov	r1, r9
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff ffa8 	bl	80093f4 <L_shift>
 80094a4:	4544      	cmp	r4, r8
 80094a6:	d950      	bls.n	800954a <__hexnan+0x10a>
 80094a8:	2300      	movs	r3, #0
 80094aa:	f1a4 0904 	sub.w	r9, r4, #4
 80094ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b2:	461d      	mov	r5, r3
 80094b4:	464c      	mov	r4, r9
 80094b6:	f8cd b008 	str.w	fp, [sp, #8]
 80094ba:	9903      	ldr	r1, [sp, #12]
 80094bc:	e7d7      	b.n	800946e <__hexnan+0x2e>
 80094be:	2a29      	cmp	r2, #41	; 0x29
 80094c0:	d155      	bne.n	800956e <__hexnan+0x12e>
 80094c2:	3102      	adds	r1, #2
 80094c4:	f8ca 1000 	str.w	r1, [sl]
 80094c8:	f1bb 0f00 	cmp.w	fp, #0
 80094cc:	d04f      	beq.n	800956e <__hexnan+0x12e>
 80094ce:	454c      	cmp	r4, r9
 80094d0:	d206      	bcs.n	80094e0 <__hexnan+0xa0>
 80094d2:	2d07      	cmp	r5, #7
 80094d4:	dc04      	bgt.n	80094e0 <__hexnan+0xa0>
 80094d6:	462a      	mov	r2, r5
 80094d8:	4649      	mov	r1, r9
 80094da:	4620      	mov	r0, r4
 80094dc:	f7ff ff8a 	bl	80093f4 <L_shift>
 80094e0:	4544      	cmp	r4, r8
 80094e2:	d934      	bls.n	800954e <__hexnan+0x10e>
 80094e4:	4623      	mov	r3, r4
 80094e6:	f1a8 0204 	sub.w	r2, r8, #4
 80094ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80094ee:	429f      	cmp	r7, r3
 80094f0:	f842 1f04 	str.w	r1, [r2, #4]!
 80094f4:	d2f9      	bcs.n	80094ea <__hexnan+0xaa>
 80094f6:	1b3b      	subs	r3, r7, r4
 80094f8:	f023 0303 	bic.w	r3, r3, #3
 80094fc:	3304      	adds	r3, #4
 80094fe:	3e03      	subs	r6, #3
 8009500:	3401      	adds	r4, #1
 8009502:	42a6      	cmp	r6, r4
 8009504:	bf38      	it	cc
 8009506:	2304      	movcc	r3, #4
 8009508:	2200      	movs	r2, #0
 800950a:	4443      	add	r3, r8
 800950c:	f843 2b04 	str.w	r2, [r3], #4
 8009510:	429f      	cmp	r7, r3
 8009512:	d2fb      	bcs.n	800950c <__hexnan+0xcc>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	b91b      	cbnz	r3, 8009520 <__hexnan+0xe0>
 8009518:	4547      	cmp	r7, r8
 800951a:	d126      	bne.n	800956a <__hexnan+0x12a>
 800951c:	2301      	movs	r3, #1
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	2005      	movs	r0, #5
 8009522:	e025      	b.n	8009570 <__hexnan+0x130>
 8009524:	3501      	adds	r5, #1
 8009526:	2d08      	cmp	r5, #8
 8009528:	f10b 0b01 	add.w	fp, fp, #1
 800952c:	dd06      	ble.n	800953c <__hexnan+0xfc>
 800952e:	4544      	cmp	r4, r8
 8009530:	d9c3      	bls.n	80094ba <__hexnan+0x7a>
 8009532:	2300      	movs	r3, #0
 8009534:	2501      	movs	r5, #1
 8009536:	f844 3c04 	str.w	r3, [r4, #-4]
 800953a:	3c04      	subs	r4, #4
 800953c:	6822      	ldr	r2, [r4, #0]
 800953e:	f000 000f 	and.w	r0, r0, #15
 8009542:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	e7b7      	b.n	80094ba <__hexnan+0x7a>
 800954a:	2508      	movs	r5, #8
 800954c:	e7b5      	b.n	80094ba <__hexnan+0x7a>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0df      	beq.n	8009514 <__hexnan+0xd4>
 8009554:	f04f 32ff 	mov.w	r2, #4294967295
 8009558:	f1c3 0320 	rsb	r3, r3, #32
 800955c:	40da      	lsrs	r2, r3
 800955e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009562:	4013      	ands	r3, r2
 8009564:	f846 3c04 	str.w	r3, [r6, #-4]
 8009568:	e7d4      	b.n	8009514 <__hexnan+0xd4>
 800956a:	3f04      	subs	r7, #4
 800956c:	e7d2      	b.n	8009514 <__hexnan+0xd4>
 800956e:	2004      	movs	r0, #4
 8009570:	b007      	add	sp, #28
 8009572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009578 <_findenv_r>:
 8009578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80095ec <_findenv_r+0x74>
 8009580:	4607      	mov	r7, r0
 8009582:	4689      	mov	r9, r1
 8009584:	4616      	mov	r6, r2
 8009586:	f000 ffed 	bl	800a564 <__env_lock>
 800958a:	f8da 4000 	ldr.w	r4, [sl]
 800958e:	b134      	cbz	r4, 800959e <_findenv_r+0x26>
 8009590:	464b      	mov	r3, r9
 8009592:	4698      	mov	r8, r3
 8009594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009598:	b13a      	cbz	r2, 80095aa <_findenv_r+0x32>
 800959a:	2a3d      	cmp	r2, #61	; 0x3d
 800959c:	d1f9      	bne.n	8009592 <_findenv_r+0x1a>
 800959e:	4638      	mov	r0, r7
 80095a0:	f000 ffe6 	bl	800a570 <__env_unlock>
 80095a4:	2000      	movs	r0, #0
 80095a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095aa:	eba8 0809 	sub.w	r8, r8, r9
 80095ae:	46a3      	mov	fp, r4
 80095b0:	f854 0b04 	ldr.w	r0, [r4], #4
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0f2      	beq.n	800959e <_findenv_r+0x26>
 80095b8:	4642      	mov	r2, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f7fe fca1 	bl	8007f02 <strncmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1f4      	bne.n	80095ae <_findenv_r+0x36>
 80095c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80095c8:	eb03 0508 	add.w	r5, r3, r8
 80095cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80095d0:	2b3d      	cmp	r3, #61	; 0x3d
 80095d2:	d1ec      	bne.n	80095ae <_findenv_r+0x36>
 80095d4:	f8da 3000 	ldr.w	r3, [sl]
 80095d8:	4638      	mov	r0, r7
 80095da:	ebab 0303 	sub.w	r3, fp, r3
 80095de:	109b      	asrs	r3, r3, #2
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	f000 ffc5 	bl	800a570 <__env_unlock>
 80095e6:	1c68      	adds	r0, r5, #1
 80095e8:	e7dd      	b.n	80095a6 <_findenv_r+0x2e>
 80095ea:	bf00      	nop
 80095ec:	20000364 	.word	0x20000364

080095f0 <_getenv_r>:
 80095f0:	b507      	push	{r0, r1, r2, lr}
 80095f2:	aa01      	add	r2, sp, #4
 80095f4:	f7ff ffc0 	bl	8009578 <_findenv_r>
 80095f8:	b003      	add	sp, #12
 80095fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009600 <malloc>:
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <malloc+0xc>)
 8009602:	4601      	mov	r1, r0
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	f000 b82b 	b.w	8009660 <_malloc_r>
 800960a:	bf00      	nop
 800960c:	20000534 	.word	0x20000534

08009610 <free>:
 8009610:	4b02      	ldr	r3, [pc, #8]	; (800961c <free+0xc>)
 8009612:	4601      	mov	r1, r0
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	f7ff bc0d 	b.w	8008e34 <_free_r>
 800961a:	bf00      	nop
 800961c:	20000534 	.word	0x20000534

08009620 <sbrk_aligned>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4e0e      	ldr	r6, [pc, #56]	; (800965c <sbrk_aligned+0x3c>)
 8009624:	460c      	mov	r4, r1
 8009626:	6831      	ldr	r1, [r6, #0]
 8009628:	4605      	mov	r5, r0
 800962a:	b911      	cbnz	r1, 8009632 <sbrk_aligned+0x12>
 800962c:	f000 ff6e 	bl	800a50c <_sbrk_r>
 8009630:	6030      	str	r0, [r6, #0]
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f000 ff69 	bl	800a50c <_sbrk_r>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d00a      	beq.n	8009654 <sbrk_aligned+0x34>
 800963e:	1cc4      	adds	r4, r0, #3
 8009640:	f024 0403 	bic.w	r4, r4, #3
 8009644:	42a0      	cmp	r0, r4
 8009646:	d007      	beq.n	8009658 <sbrk_aligned+0x38>
 8009648:	1a21      	subs	r1, r4, r0
 800964a:	4628      	mov	r0, r5
 800964c:	f000 ff5e 	bl	800a50c <_sbrk_r>
 8009650:	3001      	adds	r0, #1
 8009652:	d101      	bne.n	8009658 <sbrk_aligned+0x38>
 8009654:	f04f 34ff 	mov.w	r4, #4294967295
 8009658:	4620      	mov	r0, r4
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	20000920 	.word	0x20000920

08009660 <_malloc_r>:
 8009660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009664:	1ccd      	adds	r5, r1, #3
 8009666:	f025 0503 	bic.w	r5, r5, #3
 800966a:	3508      	adds	r5, #8
 800966c:	2d0c      	cmp	r5, #12
 800966e:	bf38      	it	cc
 8009670:	250c      	movcc	r5, #12
 8009672:	2d00      	cmp	r5, #0
 8009674:	4607      	mov	r7, r0
 8009676:	db01      	blt.n	800967c <_malloc_r+0x1c>
 8009678:	42a9      	cmp	r1, r5
 800967a:	d905      	bls.n	8009688 <_malloc_r+0x28>
 800967c:	230c      	movs	r3, #12
 800967e:	2600      	movs	r6, #0
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	4630      	mov	r0, r6
 8009684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009688:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800975c <_malloc_r+0xfc>
 800968c:	f000 f87a 	bl	8009784 <__malloc_lock>
 8009690:	f8d8 3000 	ldr.w	r3, [r8]
 8009694:	461c      	mov	r4, r3
 8009696:	bb5c      	cbnz	r4, 80096f0 <_malloc_r+0x90>
 8009698:	4629      	mov	r1, r5
 800969a:	4638      	mov	r0, r7
 800969c:	f7ff ffc0 	bl	8009620 <sbrk_aligned>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	4604      	mov	r4, r0
 80096a4:	d155      	bne.n	8009752 <_malloc_r+0xf2>
 80096a6:	f8d8 4000 	ldr.w	r4, [r8]
 80096aa:	4626      	mov	r6, r4
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	d145      	bne.n	800973c <_malloc_r+0xdc>
 80096b0:	2c00      	cmp	r4, #0
 80096b2:	d048      	beq.n	8009746 <_malloc_r+0xe6>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	4631      	mov	r1, r6
 80096b8:	4638      	mov	r0, r7
 80096ba:	eb04 0903 	add.w	r9, r4, r3
 80096be:	f000 ff25 	bl	800a50c <_sbrk_r>
 80096c2:	4581      	cmp	r9, r0
 80096c4:	d13f      	bne.n	8009746 <_malloc_r+0xe6>
 80096c6:	6821      	ldr	r1, [r4, #0]
 80096c8:	4638      	mov	r0, r7
 80096ca:	1a6d      	subs	r5, r5, r1
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7ff ffa7 	bl	8009620 <sbrk_aligned>
 80096d2:	3001      	adds	r0, #1
 80096d4:	d037      	beq.n	8009746 <_malloc_r+0xe6>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	442b      	add	r3, r5
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	f8d8 3000 	ldr.w	r3, [r8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d038      	beq.n	8009756 <_malloc_r+0xf6>
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	42a2      	cmp	r2, r4
 80096e8:	d12b      	bne.n	8009742 <_malloc_r+0xe2>
 80096ea:	2200      	movs	r2, #0
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	e00f      	b.n	8009710 <_malloc_r+0xb0>
 80096f0:	6822      	ldr	r2, [r4, #0]
 80096f2:	1b52      	subs	r2, r2, r5
 80096f4:	d41f      	bmi.n	8009736 <_malloc_r+0xd6>
 80096f6:	2a0b      	cmp	r2, #11
 80096f8:	d917      	bls.n	800972a <_malloc_r+0xca>
 80096fa:	1961      	adds	r1, r4, r5
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	6025      	str	r5, [r4, #0]
 8009700:	bf18      	it	ne
 8009702:	6059      	strne	r1, [r3, #4]
 8009704:	6863      	ldr	r3, [r4, #4]
 8009706:	bf08      	it	eq
 8009708:	f8c8 1000 	streq.w	r1, [r8]
 800970c:	5162      	str	r2, [r4, r5]
 800970e:	604b      	str	r3, [r1, #4]
 8009710:	4638      	mov	r0, r7
 8009712:	f104 060b 	add.w	r6, r4, #11
 8009716:	f000 f83b 	bl	8009790 <__malloc_unlock>
 800971a:	f026 0607 	bic.w	r6, r6, #7
 800971e:	1d23      	adds	r3, r4, #4
 8009720:	1af2      	subs	r2, r6, r3
 8009722:	d0ae      	beq.n	8009682 <_malloc_r+0x22>
 8009724:	1b9b      	subs	r3, r3, r6
 8009726:	50a3      	str	r3, [r4, r2]
 8009728:	e7ab      	b.n	8009682 <_malloc_r+0x22>
 800972a:	42a3      	cmp	r3, r4
 800972c:	6862      	ldr	r2, [r4, #4]
 800972e:	d1dd      	bne.n	80096ec <_malloc_r+0x8c>
 8009730:	f8c8 2000 	str.w	r2, [r8]
 8009734:	e7ec      	b.n	8009710 <_malloc_r+0xb0>
 8009736:	4623      	mov	r3, r4
 8009738:	6864      	ldr	r4, [r4, #4]
 800973a:	e7ac      	b.n	8009696 <_malloc_r+0x36>
 800973c:	4634      	mov	r4, r6
 800973e:	6876      	ldr	r6, [r6, #4]
 8009740:	e7b4      	b.n	80096ac <_malloc_r+0x4c>
 8009742:	4613      	mov	r3, r2
 8009744:	e7cc      	b.n	80096e0 <_malloc_r+0x80>
 8009746:	230c      	movs	r3, #12
 8009748:	4638      	mov	r0, r7
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	f000 f820 	bl	8009790 <__malloc_unlock>
 8009750:	e797      	b.n	8009682 <_malloc_r+0x22>
 8009752:	6025      	str	r5, [r4, #0]
 8009754:	e7dc      	b.n	8009710 <_malloc_r+0xb0>
 8009756:	605b      	str	r3, [r3, #4]
 8009758:	deff      	udf	#255	; 0xff
 800975a:	bf00      	nop
 800975c:	2000091c 	.word	0x2000091c

08009760 <__ascii_mbtowc>:
 8009760:	b082      	sub	sp, #8
 8009762:	b901      	cbnz	r1, 8009766 <__ascii_mbtowc+0x6>
 8009764:	a901      	add	r1, sp, #4
 8009766:	b142      	cbz	r2, 800977a <__ascii_mbtowc+0x1a>
 8009768:	b14b      	cbz	r3, 800977e <__ascii_mbtowc+0x1e>
 800976a:	7813      	ldrb	r3, [r2, #0]
 800976c:	600b      	str	r3, [r1, #0]
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	1e10      	subs	r0, r2, #0
 8009772:	bf18      	it	ne
 8009774:	2001      	movne	r0, #1
 8009776:	b002      	add	sp, #8
 8009778:	4770      	bx	lr
 800977a:	4610      	mov	r0, r2
 800977c:	e7fb      	b.n	8009776 <__ascii_mbtowc+0x16>
 800977e:	f06f 0001 	mvn.w	r0, #1
 8009782:	e7f8      	b.n	8009776 <__ascii_mbtowc+0x16>

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bb03 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	20000919 	.word	0x20000919

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff baff 	b.w	8008d94 <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	20000919 	.word	0x20000919

0800979c <_Balloc>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	69c6      	ldr	r6, [r0, #28]
 80097a0:	4604      	mov	r4, r0
 80097a2:	460d      	mov	r5, r1
 80097a4:	b976      	cbnz	r6, 80097c4 <_Balloc+0x28>
 80097a6:	2010      	movs	r0, #16
 80097a8:	f7ff ff2a 	bl	8009600 <malloc>
 80097ac:	4602      	mov	r2, r0
 80097ae:	61e0      	str	r0, [r4, #28]
 80097b0:	b920      	cbnz	r0, 80097bc <_Balloc+0x20>
 80097b2:	216b      	movs	r1, #107	; 0x6b
 80097b4:	4b17      	ldr	r3, [pc, #92]	; (8009814 <_Balloc+0x78>)
 80097b6:	4818      	ldr	r0, [pc, #96]	; (8009818 <_Balloc+0x7c>)
 80097b8:	f7ff fb0a 	bl	8008dd0 <__assert_func>
 80097bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c0:	6006      	str	r6, [r0, #0]
 80097c2:	60c6      	str	r6, [r0, #12]
 80097c4:	69e6      	ldr	r6, [r4, #28]
 80097c6:	68f3      	ldr	r3, [r6, #12]
 80097c8:	b183      	cbz	r3, 80097ec <_Balloc+0x50>
 80097ca:	69e3      	ldr	r3, [r4, #28]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097d2:	b9b8      	cbnz	r0, 8009804 <_Balloc+0x68>
 80097d4:	2101      	movs	r1, #1
 80097d6:	fa01 f605 	lsl.w	r6, r1, r5
 80097da:	1d72      	adds	r2, r6, #5
 80097dc:	4620      	mov	r0, r4
 80097de:	0092      	lsls	r2, r2, #2
 80097e0:	f000 feab 	bl	800a53a <_calloc_r>
 80097e4:	b160      	cbz	r0, 8009800 <_Balloc+0x64>
 80097e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097ea:	e00e      	b.n	800980a <_Balloc+0x6e>
 80097ec:	2221      	movs	r2, #33	; 0x21
 80097ee:	2104      	movs	r1, #4
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fea2 	bl	800a53a <_calloc_r>
 80097f6:	69e3      	ldr	r3, [r4, #28]
 80097f8:	60f0      	str	r0, [r6, #12]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e4      	bne.n	80097ca <_Balloc+0x2e>
 8009800:	2000      	movs	r0, #0
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	6802      	ldr	r2, [r0, #0]
 8009806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800980a:	2300      	movs	r3, #0
 800980c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009810:	e7f7      	b.n	8009802 <_Balloc+0x66>
 8009812:	bf00      	nop
 8009814:	0800c681 	.word	0x0800c681
 8009818:	0800c90f 	.word	0x0800c90f

0800981c <_Bfree>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	69c6      	ldr	r6, [r0, #28]
 8009820:	4605      	mov	r5, r0
 8009822:	460c      	mov	r4, r1
 8009824:	b976      	cbnz	r6, 8009844 <_Bfree+0x28>
 8009826:	2010      	movs	r0, #16
 8009828:	f7ff feea 	bl	8009600 <malloc>
 800982c:	4602      	mov	r2, r0
 800982e:	61e8      	str	r0, [r5, #28]
 8009830:	b920      	cbnz	r0, 800983c <_Bfree+0x20>
 8009832:	218f      	movs	r1, #143	; 0x8f
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <_Bfree+0x3c>)
 8009836:	4809      	ldr	r0, [pc, #36]	; (800985c <_Bfree+0x40>)
 8009838:	f7ff faca 	bl	8008dd0 <__assert_func>
 800983c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009840:	6006      	str	r6, [r0, #0]
 8009842:	60c6      	str	r6, [r0, #12]
 8009844:	b13c      	cbz	r4, 8009856 <_Bfree+0x3a>
 8009846:	69eb      	ldr	r3, [r5, #28]
 8009848:	6862      	ldr	r2, [r4, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009850:	6021      	str	r1, [r4, #0]
 8009852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	0800c681 	.word	0x0800c681
 800985c:	0800c90f 	.word	0x0800c90f

08009860 <__multadd>:
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	4607      	mov	r7, r0
 8009866:	460c      	mov	r4, r1
 8009868:	461e      	mov	r6, r3
 800986a:	2000      	movs	r0, #0
 800986c:	690d      	ldr	r5, [r1, #16]
 800986e:	f101 0c14 	add.w	ip, r1, #20
 8009872:	f8dc 3000 	ldr.w	r3, [ip]
 8009876:	3001      	adds	r0, #1
 8009878:	b299      	uxth	r1, r3
 800987a:	fb02 6101 	mla	r1, r2, r1, r6
 800987e:	0c1e      	lsrs	r6, r3, #16
 8009880:	0c0b      	lsrs	r3, r1, #16
 8009882:	fb02 3306 	mla	r3, r2, r6, r3
 8009886:	b289      	uxth	r1, r1
 8009888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800988c:	4285      	cmp	r5, r0
 800988e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009892:	f84c 1b04 	str.w	r1, [ip], #4
 8009896:	dcec      	bgt.n	8009872 <__multadd+0x12>
 8009898:	b30e      	cbz	r6, 80098de <__multadd+0x7e>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	42ab      	cmp	r3, r5
 800989e:	dc19      	bgt.n	80098d4 <__multadd+0x74>
 80098a0:	6861      	ldr	r1, [r4, #4]
 80098a2:	4638      	mov	r0, r7
 80098a4:	3101      	adds	r1, #1
 80098a6:	f7ff ff79 	bl	800979c <_Balloc>
 80098aa:	4680      	mov	r8, r0
 80098ac:	b928      	cbnz	r0, 80098ba <__multadd+0x5a>
 80098ae:	4602      	mov	r2, r0
 80098b0:	21ba      	movs	r1, #186	; 0xba
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <__multadd+0x84>)
 80098b4:	480c      	ldr	r0, [pc, #48]	; (80098e8 <__multadd+0x88>)
 80098b6:	f7ff fa8b 	bl	8008dd0 <__assert_func>
 80098ba:	6922      	ldr	r2, [r4, #16]
 80098bc:	f104 010c 	add.w	r1, r4, #12
 80098c0:	3202      	adds	r2, #2
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	300c      	adds	r0, #12
 80098c6:	f7ff fa6e 	bl	8008da6 <memcpy>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4638      	mov	r0, r7
 80098ce:	f7ff ffa5 	bl	800981c <_Bfree>
 80098d2:	4644      	mov	r4, r8
 80098d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098d8:	3501      	adds	r5, #1
 80098da:	615e      	str	r6, [r3, #20]
 80098dc:	6125      	str	r5, [r4, #16]
 80098de:	4620      	mov	r0, r4
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	0800c89e 	.word	0x0800c89e
 80098e8:	0800c90f 	.word	0x0800c90f

080098ec <__s2b>:
 80098ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	4615      	mov	r5, r2
 80098f2:	2209      	movs	r2, #9
 80098f4:	461f      	mov	r7, r3
 80098f6:	3308      	adds	r3, #8
 80098f8:	460c      	mov	r4, r1
 80098fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80098fe:	4606      	mov	r6, r0
 8009900:	2201      	movs	r2, #1
 8009902:	2100      	movs	r1, #0
 8009904:	429a      	cmp	r2, r3
 8009906:	db09      	blt.n	800991c <__s2b+0x30>
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff ff47 	bl	800979c <_Balloc>
 800990e:	b940      	cbnz	r0, 8009922 <__s2b+0x36>
 8009910:	4602      	mov	r2, r0
 8009912:	21d3      	movs	r1, #211	; 0xd3
 8009914:	4b18      	ldr	r3, [pc, #96]	; (8009978 <__s2b+0x8c>)
 8009916:	4819      	ldr	r0, [pc, #100]	; (800997c <__s2b+0x90>)
 8009918:	f7ff fa5a 	bl	8008dd0 <__assert_func>
 800991c:	0052      	lsls	r2, r2, #1
 800991e:	3101      	adds	r1, #1
 8009920:	e7f0      	b.n	8009904 <__s2b+0x18>
 8009922:	9b08      	ldr	r3, [sp, #32]
 8009924:	2d09      	cmp	r5, #9
 8009926:	6143      	str	r3, [r0, #20]
 8009928:	f04f 0301 	mov.w	r3, #1
 800992c:	6103      	str	r3, [r0, #16]
 800992e:	dd16      	ble.n	800995e <__s2b+0x72>
 8009930:	f104 0909 	add.w	r9, r4, #9
 8009934:	46c8      	mov	r8, r9
 8009936:	442c      	add	r4, r5
 8009938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800993c:	4601      	mov	r1, r0
 800993e:	220a      	movs	r2, #10
 8009940:	4630      	mov	r0, r6
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	f7ff ff8c 	bl	8009860 <__multadd>
 8009948:	45a0      	cmp	r8, r4
 800994a:	d1f5      	bne.n	8009938 <__s2b+0x4c>
 800994c:	f1a5 0408 	sub.w	r4, r5, #8
 8009950:	444c      	add	r4, r9
 8009952:	1b2d      	subs	r5, r5, r4
 8009954:	1963      	adds	r3, r4, r5
 8009956:	42bb      	cmp	r3, r7
 8009958:	db04      	blt.n	8009964 <__s2b+0x78>
 800995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995e:	2509      	movs	r5, #9
 8009960:	340a      	adds	r4, #10
 8009962:	e7f6      	b.n	8009952 <__s2b+0x66>
 8009964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009968:	4601      	mov	r1, r0
 800996a:	220a      	movs	r2, #10
 800996c:	4630      	mov	r0, r6
 800996e:	3b30      	subs	r3, #48	; 0x30
 8009970:	f7ff ff76 	bl	8009860 <__multadd>
 8009974:	e7ee      	b.n	8009954 <__s2b+0x68>
 8009976:	bf00      	nop
 8009978:	0800c89e 	.word	0x0800c89e
 800997c:	0800c90f 	.word	0x0800c90f

08009980 <__hi0bits>:
 8009980:	0c02      	lsrs	r2, r0, #16
 8009982:	0412      	lsls	r2, r2, #16
 8009984:	4603      	mov	r3, r0
 8009986:	b9ca      	cbnz	r2, 80099bc <__hi0bits+0x3c>
 8009988:	0403      	lsls	r3, r0, #16
 800998a:	2010      	movs	r0, #16
 800998c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009990:	bf04      	itt	eq
 8009992:	021b      	lsleq	r3, r3, #8
 8009994:	3008      	addeq	r0, #8
 8009996:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800999a:	bf04      	itt	eq
 800999c:	011b      	lsleq	r3, r3, #4
 800999e:	3004      	addeq	r0, #4
 80099a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80099a4:	bf04      	itt	eq
 80099a6:	009b      	lsleq	r3, r3, #2
 80099a8:	3002      	addeq	r0, #2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	db05      	blt.n	80099ba <__hi0bits+0x3a>
 80099ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80099b2:	f100 0001 	add.w	r0, r0, #1
 80099b6:	bf08      	it	eq
 80099b8:	2020      	moveq	r0, #32
 80099ba:	4770      	bx	lr
 80099bc:	2000      	movs	r0, #0
 80099be:	e7e5      	b.n	800998c <__hi0bits+0xc>

080099c0 <__lo0bits>:
 80099c0:	6803      	ldr	r3, [r0, #0]
 80099c2:	4602      	mov	r2, r0
 80099c4:	f013 0007 	ands.w	r0, r3, #7
 80099c8:	d00b      	beq.n	80099e2 <__lo0bits+0x22>
 80099ca:	07d9      	lsls	r1, r3, #31
 80099cc:	d421      	bmi.n	8009a12 <__lo0bits+0x52>
 80099ce:	0798      	lsls	r0, r3, #30
 80099d0:	bf49      	itett	mi
 80099d2:	085b      	lsrmi	r3, r3, #1
 80099d4:	089b      	lsrpl	r3, r3, #2
 80099d6:	2001      	movmi	r0, #1
 80099d8:	6013      	strmi	r3, [r2, #0]
 80099da:	bf5c      	itt	pl
 80099dc:	2002      	movpl	r0, #2
 80099de:	6013      	strpl	r3, [r2, #0]
 80099e0:	4770      	bx	lr
 80099e2:	b299      	uxth	r1, r3
 80099e4:	b909      	cbnz	r1, 80099ea <__lo0bits+0x2a>
 80099e6:	2010      	movs	r0, #16
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	b2d9      	uxtb	r1, r3
 80099ec:	b909      	cbnz	r1, 80099f2 <__lo0bits+0x32>
 80099ee:	3008      	adds	r0, #8
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	0719      	lsls	r1, r3, #28
 80099f4:	bf04      	itt	eq
 80099f6:	091b      	lsreq	r3, r3, #4
 80099f8:	3004      	addeq	r0, #4
 80099fa:	0799      	lsls	r1, r3, #30
 80099fc:	bf04      	itt	eq
 80099fe:	089b      	lsreq	r3, r3, #2
 8009a00:	3002      	addeq	r0, #2
 8009a02:	07d9      	lsls	r1, r3, #31
 8009a04:	d403      	bmi.n	8009a0e <__lo0bits+0x4e>
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	f100 0001 	add.w	r0, r0, #1
 8009a0c:	d003      	beq.n	8009a16 <__lo0bits+0x56>
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	4770      	bx	lr
 8009a12:	2000      	movs	r0, #0
 8009a14:	4770      	bx	lr
 8009a16:	2020      	movs	r0, #32
 8009a18:	4770      	bx	lr
	...

08009a1c <__i2b>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	460c      	mov	r4, r1
 8009a20:	2101      	movs	r1, #1
 8009a22:	f7ff febb 	bl	800979c <_Balloc>
 8009a26:	4602      	mov	r2, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <__i2b+0x1a>
 8009a2a:	f240 1145 	movw	r1, #325	; 0x145
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <__i2b+0x24>)
 8009a30:	4804      	ldr	r0, [pc, #16]	; (8009a44 <__i2b+0x28>)
 8009a32:	f7ff f9cd 	bl	8008dd0 <__assert_func>
 8009a36:	2301      	movs	r3, #1
 8009a38:	6144      	str	r4, [r0, #20]
 8009a3a:	6103      	str	r3, [r0, #16]
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800c89e 	.word	0x0800c89e
 8009a44:	0800c90f 	.word	0x0800c90f

08009a48 <__multiply>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4691      	mov	r9, r2
 8009a4e:	690a      	ldr	r2, [r1, #16]
 8009a50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a54:	460c      	mov	r4, r1
 8009a56:	429a      	cmp	r2, r3
 8009a58:	bfbe      	ittt	lt
 8009a5a:	460b      	movlt	r3, r1
 8009a5c:	464c      	movlt	r4, r9
 8009a5e:	4699      	movlt	r9, r3
 8009a60:	6927      	ldr	r7, [r4, #16]
 8009a62:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	6861      	ldr	r1, [r4, #4]
 8009a6a:	eb07 060a 	add.w	r6, r7, sl
 8009a6e:	42b3      	cmp	r3, r6
 8009a70:	b085      	sub	sp, #20
 8009a72:	bfb8      	it	lt
 8009a74:	3101      	addlt	r1, #1
 8009a76:	f7ff fe91 	bl	800979c <_Balloc>
 8009a7a:	b930      	cbnz	r0, 8009a8a <__multiply+0x42>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a82:	4b43      	ldr	r3, [pc, #268]	; (8009b90 <__multiply+0x148>)
 8009a84:	4843      	ldr	r0, [pc, #268]	; (8009b94 <__multiply+0x14c>)
 8009a86:	f7ff f9a3 	bl	8008dd0 <__assert_func>
 8009a8a:	f100 0514 	add.w	r5, r0, #20
 8009a8e:	462b      	mov	r3, r5
 8009a90:	2200      	movs	r2, #0
 8009a92:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a96:	4543      	cmp	r3, r8
 8009a98:	d321      	bcc.n	8009ade <__multiply+0x96>
 8009a9a:	f104 0314 	add.w	r3, r4, #20
 8009a9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009aa2:	f109 0314 	add.w	r3, r9, #20
 8009aa6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009aaa:	9202      	str	r2, [sp, #8]
 8009aac:	1b3a      	subs	r2, r7, r4
 8009aae:	3a15      	subs	r2, #21
 8009ab0:	f022 0203 	bic.w	r2, r2, #3
 8009ab4:	3204      	adds	r2, #4
 8009ab6:	f104 0115 	add.w	r1, r4, #21
 8009aba:	428f      	cmp	r7, r1
 8009abc:	bf38      	it	cc
 8009abe:	2204      	movcc	r2, #4
 8009ac0:	9201      	str	r2, [sp, #4]
 8009ac2:	9a02      	ldr	r2, [sp, #8]
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d80c      	bhi.n	8009ae4 <__multiply+0x9c>
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	dd03      	ble.n	8009ad6 <__multiply+0x8e>
 8009ace:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d05a      	beq.n	8009b8c <__multiply+0x144>
 8009ad6:	6106      	str	r6, [r0, #16]
 8009ad8:	b005      	add	sp, #20
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	f843 2b04 	str.w	r2, [r3], #4
 8009ae2:	e7d8      	b.n	8009a96 <__multiply+0x4e>
 8009ae4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	d023      	beq.n	8009b36 <__multiply+0xee>
 8009aee:	46a9      	mov	r9, r5
 8009af0:	f04f 0c00 	mov.w	ip, #0
 8009af4:	f104 0e14 	add.w	lr, r4, #20
 8009af8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009afc:	f8d9 1000 	ldr.w	r1, [r9]
 8009b00:	fa1f fb82 	uxth.w	fp, r2
 8009b04:	b289      	uxth	r1, r1
 8009b06:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b0a:	4461      	add	r1, ip
 8009b0c:	f8d9 c000 	ldr.w	ip, [r9]
 8009b10:	0c12      	lsrs	r2, r2, #16
 8009b12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b16:	fb0a c202 	mla	r2, sl, r2, ip
 8009b1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b1e:	b289      	uxth	r1, r1
 8009b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b24:	4577      	cmp	r7, lr
 8009b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b2a:	f849 1b04 	str.w	r1, [r9], #4
 8009b2e:	d8e3      	bhi.n	8009af8 <__multiply+0xb0>
 8009b30:	9a01      	ldr	r2, [sp, #4]
 8009b32:	f845 c002 	str.w	ip, [r5, r2]
 8009b36:	9a03      	ldr	r2, [sp, #12]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b3e:	f1b9 0f00 	cmp.w	r9, #0
 8009b42:	d021      	beq.n	8009b88 <__multiply+0x140>
 8009b44:	46ae      	mov	lr, r5
 8009b46:	f04f 0a00 	mov.w	sl, #0
 8009b4a:	6829      	ldr	r1, [r5, #0]
 8009b4c:	f104 0c14 	add.w	ip, r4, #20
 8009b50:	f8bc b000 	ldrh.w	fp, [ip]
 8009b54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b58:	b289      	uxth	r1, r1
 8009b5a:	fb09 220b 	mla	r2, r9, fp, r2
 8009b5e:	4452      	add	r2, sl
 8009b60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b64:	f84e 1b04 	str.w	r1, [lr], #4
 8009b68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b70:	f8be 1000 	ldrh.w	r1, [lr]
 8009b74:	4567      	cmp	r7, ip
 8009b76:	fb09 110a 	mla	r1, r9, sl, r1
 8009b7a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b82:	d8e5      	bhi.n	8009b50 <__multiply+0x108>
 8009b84:	9a01      	ldr	r2, [sp, #4]
 8009b86:	50a9      	str	r1, [r5, r2]
 8009b88:	3504      	adds	r5, #4
 8009b8a:	e79a      	b.n	8009ac2 <__multiply+0x7a>
 8009b8c:	3e01      	subs	r6, #1
 8009b8e:	e79c      	b.n	8009aca <__multiply+0x82>
 8009b90:	0800c89e 	.word	0x0800c89e
 8009b94:	0800c90f 	.word	0x0800c90f

08009b98 <__pow5mult>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	f012 0203 	ands.w	r2, r2, #3
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	d007      	beq.n	8009bb8 <__pow5mult+0x20>
 8009ba8:	4c25      	ldr	r4, [pc, #148]	; (8009c40 <__pow5mult+0xa8>)
 8009baa:	3a01      	subs	r2, #1
 8009bac:	2300      	movs	r3, #0
 8009bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bb2:	f7ff fe55 	bl	8009860 <__multadd>
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	10ad      	asrs	r5, r5, #2
 8009bba:	d03d      	beq.n	8009c38 <__pow5mult+0xa0>
 8009bbc:	69f4      	ldr	r4, [r6, #28]
 8009bbe:	b97c      	cbnz	r4, 8009be0 <__pow5mult+0x48>
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	f7ff fd1d 	bl	8009600 <malloc>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	61f0      	str	r0, [r6, #28]
 8009bca:	b928      	cbnz	r0, 8009bd8 <__pow5mult+0x40>
 8009bcc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <__pow5mult+0xac>)
 8009bd2:	481d      	ldr	r0, [pc, #116]	; (8009c48 <__pow5mult+0xb0>)
 8009bd4:	f7ff f8fc 	bl	8008dd0 <__assert_func>
 8009bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bdc:	6004      	str	r4, [r0, #0]
 8009bde:	60c4      	str	r4, [r0, #12]
 8009be0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009be8:	b94c      	cbnz	r4, 8009bfe <__pow5mult+0x66>
 8009bea:	f240 2171 	movw	r1, #625	; 0x271
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ff14 	bl	8009a1c <__i2b>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	f04f 0900 	mov.w	r9, #0
 8009c02:	07eb      	lsls	r3, r5, #31
 8009c04:	d50a      	bpl.n	8009c1c <__pow5mult+0x84>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ff1c 	bl	8009a48 <__multiply>
 8009c10:	4680      	mov	r8, r0
 8009c12:	4639      	mov	r1, r7
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7ff fe01 	bl	800981c <_Bfree>
 8009c1a:	4647      	mov	r7, r8
 8009c1c:	106d      	asrs	r5, r5, #1
 8009c1e:	d00b      	beq.n	8009c38 <__pow5mult+0xa0>
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	b938      	cbnz	r0, 8009c34 <__pow5mult+0x9c>
 8009c24:	4622      	mov	r2, r4
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ff0d 	bl	8009a48 <__multiply>
 8009c2e:	6020      	str	r0, [r4, #0]
 8009c30:	f8c0 9000 	str.w	r9, [r0]
 8009c34:	4604      	mov	r4, r0
 8009c36:	e7e4      	b.n	8009c02 <__pow5mult+0x6a>
 8009c38:	4638      	mov	r0, r7
 8009c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3e:	bf00      	nop
 8009c40:	0800ca58 	.word	0x0800ca58
 8009c44:	0800c681 	.word	0x0800c681
 8009c48:	0800c90f 	.word	0x0800c90f

08009c4c <__lshift>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4607      	mov	r7, r0
 8009c54:	4691      	mov	r9, r2
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	6849      	ldr	r1, [r1, #4]
 8009c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c64:	f108 0601 	add.w	r6, r8, #1
 8009c68:	42b3      	cmp	r3, r6
 8009c6a:	db0b      	blt.n	8009c84 <__lshift+0x38>
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	f7ff fd95 	bl	800979c <_Balloc>
 8009c72:	4605      	mov	r5, r0
 8009c74:	b948      	cbnz	r0, 8009c8a <__lshift+0x3e>
 8009c76:	4602      	mov	r2, r0
 8009c78:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c7c:	4b27      	ldr	r3, [pc, #156]	; (8009d1c <__lshift+0xd0>)
 8009c7e:	4828      	ldr	r0, [pc, #160]	; (8009d20 <__lshift+0xd4>)
 8009c80:	f7ff f8a6 	bl	8008dd0 <__assert_func>
 8009c84:	3101      	adds	r1, #1
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	e7ee      	b.n	8009c68 <__lshift+0x1c>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f100 0114 	add.w	r1, r0, #20
 8009c90:	f100 0210 	add.w	r2, r0, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	4553      	cmp	r3, sl
 8009c98:	db33      	blt.n	8009d02 <__lshift+0xb6>
 8009c9a:	6920      	ldr	r0, [r4, #16]
 8009c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca0:	f104 0314 	add.w	r3, r4, #20
 8009ca4:	f019 091f 	ands.w	r9, r9, #31
 8009ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb0:	d02b      	beq.n	8009d0a <__lshift+0xbe>
 8009cb2:	468a      	mov	sl, r1
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f1c9 0e20 	rsb	lr, r9, #32
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	fa00 f009 	lsl.w	r0, r0, r9
 8009cc0:	4310      	orrs	r0, r2
 8009cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cca:	459c      	cmp	ip, r3
 8009ccc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cd0:	d8f3      	bhi.n	8009cba <__lshift+0x6e>
 8009cd2:	ebac 0304 	sub.w	r3, ip, r4
 8009cd6:	3b15      	subs	r3, #21
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	f104 0015 	add.w	r0, r4, #21
 8009ce2:	4584      	cmp	ip, r0
 8009ce4:	bf38      	it	cc
 8009ce6:	2304      	movcc	r3, #4
 8009ce8:	50ca      	str	r2, [r1, r3]
 8009cea:	b10a      	cbz	r2, 8009cf0 <__lshift+0xa4>
 8009cec:	f108 0602 	add.w	r6, r8, #2
 8009cf0:	3e01      	subs	r6, #1
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	612e      	str	r6, [r5, #16]
 8009cf8:	f7ff fd90 	bl	800981c <_Bfree>
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d06:	3301      	adds	r3, #1
 8009d08:	e7c5      	b.n	8009c96 <__lshift+0x4a>
 8009d0a:	3904      	subs	r1, #4
 8009d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d10:	459c      	cmp	ip, r3
 8009d12:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d16:	d8f9      	bhi.n	8009d0c <__lshift+0xc0>
 8009d18:	e7ea      	b.n	8009cf0 <__lshift+0xa4>
 8009d1a:	bf00      	nop
 8009d1c:	0800c89e 	.word	0x0800c89e
 8009d20:	0800c90f 	.word	0x0800c90f

08009d24 <__mcmp>:
 8009d24:	4603      	mov	r3, r0
 8009d26:	690a      	ldr	r2, [r1, #16]
 8009d28:	6900      	ldr	r0, [r0, #16]
 8009d2a:	b530      	push	{r4, r5, lr}
 8009d2c:	1a80      	subs	r0, r0, r2
 8009d2e:	d10d      	bne.n	8009d4c <__mcmp+0x28>
 8009d30:	3314      	adds	r3, #20
 8009d32:	3114      	adds	r1, #20
 8009d34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d44:	4295      	cmp	r5, r2
 8009d46:	d002      	beq.n	8009d4e <__mcmp+0x2a>
 8009d48:	d304      	bcc.n	8009d54 <__mcmp+0x30>
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	bd30      	pop	{r4, r5, pc}
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	d3f4      	bcc.n	8009d3c <__mcmp+0x18>
 8009d52:	e7fb      	b.n	8009d4c <__mcmp+0x28>
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e7f8      	b.n	8009d4c <__mcmp+0x28>
	...

08009d5c <__mdiff>:
 8009d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	460d      	mov	r5, r1
 8009d62:	4607      	mov	r7, r0
 8009d64:	4611      	mov	r1, r2
 8009d66:	4628      	mov	r0, r5
 8009d68:	4614      	mov	r4, r2
 8009d6a:	f7ff ffdb 	bl	8009d24 <__mcmp>
 8009d6e:	1e06      	subs	r6, r0, #0
 8009d70:	d111      	bne.n	8009d96 <__mdiff+0x3a>
 8009d72:	4631      	mov	r1, r6
 8009d74:	4638      	mov	r0, r7
 8009d76:	f7ff fd11 	bl	800979c <_Balloc>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	b928      	cbnz	r0, 8009d8a <__mdiff+0x2e>
 8009d7e:	f240 2137 	movw	r1, #567	; 0x237
 8009d82:	4b3a      	ldr	r3, [pc, #232]	; (8009e6c <__mdiff+0x110>)
 8009d84:	483a      	ldr	r0, [pc, #232]	; (8009e70 <__mdiff+0x114>)
 8009d86:	f7ff f823 	bl	8008dd0 <__assert_func>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d90:	4610      	mov	r0, r2
 8009d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d96:	bfa4      	itt	ge
 8009d98:	4623      	movge	r3, r4
 8009d9a:	462c      	movge	r4, r5
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	6861      	ldr	r1, [r4, #4]
 8009da0:	bfa6      	itte	ge
 8009da2:	461d      	movge	r5, r3
 8009da4:	2600      	movge	r6, #0
 8009da6:	2601      	movlt	r6, #1
 8009da8:	f7ff fcf8 	bl	800979c <_Balloc>
 8009dac:	4602      	mov	r2, r0
 8009dae:	b918      	cbnz	r0, 8009db8 <__mdiff+0x5c>
 8009db0:	f240 2145 	movw	r1, #581	; 0x245
 8009db4:	4b2d      	ldr	r3, [pc, #180]	; (8009e6c <__mdiff+0x110>)
 8009db6:	e7e5      	b.n	8009d84 <__mdiff+0x28>
 8009db8:	f102 0814 	add.w	r8, r2, #20
 8009dbc:	46c2      	mov	sl, r8
 8009dbe:	f04f 0c00 	mov.w	ip, #0
 8009dc2:	6927      	ldr	r7, [r4, #16]
 8009dc4:	60c6      	str	r6, [r0, #12]
 8009dc6:	692e      	ldr	r6, [r5, #16]
 8009dc8:	f104 0014 	add.w	r0, r4, #20
 8009dcc:	f105 0914 	add.w	r9, r5, #20
 8009dd0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009dd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dd8:	3410      	adds	r4, #16
 8009dda:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009dde:	f859 3b04 	ldr.w	r3, [r9], #4
 8009de2:	fa1f f18b 	uxth.w	r1, fp
 8009de6:	4461      	add	r1, ip
 8009de8:	fa1f fc83 	uxth.w	ip, r3
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	eba1 010c 	sub.w	r1, r1, ip
 8009df2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009df6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009dfa:	b289      	uxth	r1, r1
 8009dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009e00:	454e      	cmp	r6, r9
 8009e02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e06:	f84a 1b04 	str.w	r1, [sl], #4
 8009e0a:	d8e6      	bhi.n	8009dda <__mdiff+0x7e>
 8009e0c:	1b73      	subs	r3, r6, r5
 8009e0e:	3b15      	subs	r3, #21
 8009e10:	f023 0303 	bic.w	r3, r3, #3
 8009e14:	3515      	adds	r5, #21
 8009e16:	3304      	adds	r3, #4
 8009e18:	42ae      	cmp	r6, r5
 8009e1a:	bf38      	it	cc
 8009e1c:	2304      	movcc	r3, #4
 8009e1e:	4418      	add	r0, r3
 8009e20:	4443      	add	r3, r8
 8009e22:	461e      	mov	r6, r3
 8009e24:	4605      	mov	r5, r0
 8009e26:	4575      	cmp	r5, lr
 8009e28:	d30e      	bcc.n	8009e48 <__mdiff+0xec>
 8009e2a:	f10e 0103 	add.w	r1, lr, #3
 8009e2e:	1a09      	subs	r1, r1, r0
 8009e30:	f021 0103 	bic.w	r1, r1, #3
 8009e34:	3803      	subs	r0, #3
 8009e36:	4586      	cmp	lr, r0
 8009e38:	bf38      	it	cc
 8009e3a:	2100      	movcc	r1, #0
 8009e3c:	440b      	add	r3, r1
 8009e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e42:	b189      	cbz	r1, 8009e68 <__mdiff+0x10c>
 8009e44:	6117      	str	r7, [r2, #16]
 8009e46:	e7a3      	b.n	8009d90 <__mdiff+0x34>
 8009e48:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e4c:	fa1f f188 	uxth.w	r1, r8
 8009e50:	4461      	add	r1, ip
 8009e52:	140c      	asrs	r4, r1, #16
 8009e54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e5e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009e62:	f846 1b04 	str.w	r1, [r6], #4
 8009e66:	e7de      	b.n	8009e26 <__mdiff+0xca>
 8009e68:	3f01      	subs	r7, #1
 8009e6a:	e7e8      	b.n	8009e3e <__mdiff+0xe2>
 8009e6c:	0800c89e 	.word	0x0800c89e
 8009e70:	0800c90f 	.word	0x0800c90f

08009e74 <__ulp>:
 8009e74:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <__ulp+0x3c>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dc08      	bgt.n	8009e92 <__ulp+0x1e>
 8009e80:	425b      	negs	r3, r3
 8009e82:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e8a:	da04      	bge.n	8009e96 <__ulp+0x22>
 8009e8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e90:	4113      	asrs	r3, r2
 8009e92:	2200      	movs	r2, #0
 8009e94:	e008      	b.n	8009ea8 <__ulp+0x34>
 8009e96:	f1a2 0314 	sub.w	r3, r2, #20
 8009e9a:	2b1e      	cmp	r3, #30
 8009e9c:	bfd6      	itet	le
 8009e9e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009ea2:	2201      	movgt	r2, #1
 8009ea4:	40da      	lsrle	r2, r3
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	7ff00000 	.word	0x7ff00000

08009eb4 <__b2d>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	6905      	ldr	r5, [r0, #16]
 8009eb8:	f100 0714 	add.w	r7, r0, #20
 8009ebc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ec0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ec4:	1f2e      	subs	r6, r5, #4
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f7ff fd5a 	bl	8009980 <__hi0bits>
 8009ecc:	f1c0 0220 	rsb	r2, r0, #32
 8009ed0:	280a      	cmp	r0, #10
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009f40 <__b2d+0x8c>
 8009ed8:	600a      	str	r2, [r1, #0]
 8009eda:	dc12      	bgt.n	8009f02 <__b2d+0x4e>
 8009edc:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ee0:	fa24 f20e 	lsr.w	r2, r4, lr
 8009ee4:	42b7      	cmp	r7, r6
 8009ee6:	ea42 010c 	orr.w	r1, r2, ip
 8009eea:	bf2c      	ite	cs
 8009eec:	2200      	movcs	r2, #0
 8009eee:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009ef2:	3315      	adds	r3, #21
 8009ef4:	fa04 f303 	lsl.w	r3, r4, r3
 8009ef8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009efc:	431a      	orrs	r2, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f02:	42b7      	cmp	r7, r6
 8009f04:	bf2e      	itee	cs
 8009f06:	2200      	movcs	r2, #0
 8009f08:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009f0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009f10:	3b0b      	subs	r3, #11
 8009f12:	d012      	beq.n	8009f3a <__b2d+0x86>
 8009f14:	f1c3 0520 	rsb	r5, r3, #32
 8009f18:	fa22 f105 	lsr.w	r1, r2, r5
 8009f1c:	409c      	lsls	r4, r3
 8009f1e:	430c      	orrs	r4, r1
 8009f20:	42be      	cmp	r6, r7
 8009f22:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009f26:	bf94      	ite	ls
 8009f28:	2400      	movls	r4, #0
 8009f2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009f2e:	409a      	lsls	r2, r3
 8009f30:	40ec      	lsrs	r4, r5
 8009f32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009f36:	4322      	orrs	r2, r4
 8009f38:	e7e1      	b.n	8009efe <__b2d+0x4a>
 8009f3a:	ea44 010c 	orr.w	r1, r4, ip
 8009f3e:	e7de      	b.n	8009efe <__b2d+0x4a>
 8009f40:	3ff00000 	.word	0x3ff00000

08009f44 <__d2b>:
 8009f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f46:	2101      	movs	r1, #1
 8009f48:	4617      	mov	r7, r2
 8009f4a:	461c      	mov	r4, r3
 8009f4c:	9e08      	ldr	r6, [sp, #32]
 8009f4e:	f7ff fc25 	bl	800979c <_Balloc>
 8009f52:	4605      	mov	r5, r0
 8009f54:	b930      	cbnz	r0, 8009f64 <__d2b+0x20>
 8009f56:	4602      	mov	r2, r0
 8009f58:	f240 310f 	movw	r1, #783	; 0x30f
 8009f5c:	4b22      	ldr	r3, [pc, #136]	; (8009fe8 <__d2b+0xa4>)
 8009f5e:	4823      	ldr	r0, [pc, #140]	; (8009fec <__d2b+0xa8>)
 8009f60:	f7fe ff36 	bl	8008dd0 <__assert_func>
 8009f64:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f68:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f6c:	bb24      	cbnz	r4, 8009fb8 <__d2b+0x74>
 8009f6e:	2f00      	cmp	r7, #0
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	d026      	beq.n	8009fc2 <__d2b+0x7e>
 8009f74:	4668      	mov	r0, sp
 8009f76:	9700      	str	r7, [sp, #0]
 8009f78:	f7ff fd22 	bl	80099c0 <__lo0bits>
 8009f7c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f80:	b1e8      	cbz	r0, 8009fbe <__d2b+0x7a>
 8009f82:	f1c0 0320 	rsb	r3, r0, #32
 8009f86:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	40c2      	lsrs	r2, r0
 8009f8e:	616b      	str	r3, [r5, #20]
 8009f90:	9201      	str	r2, [sp, #4]
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bf14      	ite	ne
 8009f98:	2102      	movne	r1, #2
 8009f9a:	2101      	moveq	r1, #1
 8009f9c:	61ab      	str	r3, [r5, #24]
 8009f9e:	6129      	str	r1, [r5, #16]
 8009fa0:	b1bc      	cbz	r4, 8009fd2 <__d2b+0x8e>
 8009fa2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009fa6:	4404      	add	r4, r0
 8009fa8:	6034      	str	r4, [r6, #0]
 8009faa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	6018      	str	r0, [r3, #0]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fbc:	e7d7      	b.n	8009f6e <__d2b+0x2a>
 8009fbe:	6169      	str	r1, [r5, #20]
 8009fc0:	e7e7      	b.n	8009f92 <__d2b+0x4e>
 8009fc2:	a801      	add	r0, sp, #4
 8009fc4:	f7ff fcfc 	bl	80099c0 <__lo0bits>
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	2101      	movs	r1, #1
 8009fcc:	616b      	str	r3, [r5, #20]
 8009fce:	3020      	adds	r0, #32
 8009fd0:	e7e5      	b.n	8009f9e <__d2b+0x5a>
 8009fd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fd6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009fda:	6030      	str	r0, [r6, #0]
 8009fdc:	6918      	ldr	r0, [r3, #16]
 8009fde:	f7ff fccf 	bl	8009980 <__hi0bits>
 8009fe2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fe6:	e7e2      	b.n	8009fae <__d2b+0x6a>
 8009fe8:	0800c89e 	.word	0x0800c89e
 8009fec:	0800c90f 	.word	0x0800c90f

08009ff0 <__ratio>:
 8009ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4688      	mov	r8, r1
 8009ff6:	4669      	mov	r1, sp
 8009ff8:	4681      	mov	r9, r0
 8009ffa:	f7ff ff5b 	bl	8009eb4 <__b2d>
 8009ffe:	460f      	mov	r7, r1
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	4640      	mov	r0, r8
 800a006:	a901      	add	r1, sp, #4
 800a008:	f7ff ff54 	bl	8009eb4 <__b2d>
 800a00c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a010:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a014:	468b      	mov	fp, r1
 800a016:	eba3 0c02 	sub.w	ip, r3, r2
 800a01a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfd5      	itete	le
 800a028:	460a      	movle	r2, r1
 800a02a:	462a      	movgt	r2, r5
 800a02c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a030:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a034:	bfd8      	it	le
 800a036:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a03a:	465b      	mov	r3, fp
 800a03c:	4602      	mov	r2, r0
 800a03e:	4639      	mov	r1, r7
 800a040:	4620      	mov	r0, r4
 800a042:	f7f6 fb8d 	bl	8000760 <__aeabi_ddiv>
 800a046:	b003      	add	sp, #12
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a04c <__copybits>:
 800a04c:	3901      	subs	r1, #1
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	1149      	asrs	r1, r1, #5
 800a052:	6914      	ldr	r4, [r2, #16]
 800a054:	3101      	adds	r1, #1
 800a056:	f102 0314 	add.w	r3, r2, #20
 800a05a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a05e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a062:	1f05      	subs	r5, r0, #4
 800a064:	42a3      	cmp	r3, r4
 800a066:	d30c      	bcc.n	800a082 <__copybits+0x36>
 800a068:	1aa3      	subs	r3, r4, r2
 800a06a:	3b11      	subs	r3, #17
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	3211      	adds	r2, #17
 800a072:	42a2      	cmp	r2, r4
 800a074:	bf88      	it	hi
 800a076:	2300      	movhi	r3, #0
 800a078:	4418      	add	r0, r3
 800a07a:	2300      	movs	r3, #0
 800a07c:	4288      	cmp	r0, r1
 800a07e:	d305      	bcc.n	800a08c <__copybits+0x40>
 800a080:	bd70      	pop	{r4, r5, r6, pc}
 800a082:	f853 6b04 	ldr.w	r6, [r3], #4
 800a086:	f845 6f04 	str.w	r6, [r5, #4]!
 800a08a:	e7eb      	b.n	800a064 <__copybits+0x18>
 800a08c:	f840 3b04 	str.w	r3, [r0], #4
 800a090:	e7f4      	b.n	800a07c <__copybits+0x30>

0800a092 <__any_on>:
 800a092:	f100 0214 	add.w	r2, r0, #20
 800a096:	6900      	ldr	r0, [r0, #16]
 800a098:	114b      	asrs	r3, r1, #5
 800a09a:	4298      	cmp	r0, r3
 800a09c:	b510      	push	{r4, lr}
 800a09e:	db11      	blt.n	800a0c4 <__any_on+0x32>
 800a0a0:	dd0a      	ble.n	800a0b8 <__any_on+0x26>
 800a0a2:	f011 011f 	ands.w	r1, r1, #31
 800a0a6:	d007      	beq.n	800a0b8 <__any_on+0x26>
 800a0a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a0b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a0b4:	428c      	cmp	r4, r1
 800a0b6:	d10b      	bne.n	800a0d0 <__any_on+0x3e>
 800a0b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d803      	bhi.n	800a0c8 <__any_on+0x36>
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	bd10      	pop	{r4, pc}
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	e7f7      	b.n	800a0b8 <__any_on+0x26>
 800a0c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d0f5      	beq.n	800a0bc <__any_on+0x2a>
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	e7f6      	b.n	800a0c2 <__any_on+0x30>

0800a0d4 <_strtoul_l.constprop.0>:
 800a0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	4686      	mov	lr, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4f35      	ldr	r7, [pc, #212]	; (800a1b4 <_strtoul_l.constprop.0+0xe0>)
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e4:	5d3e      	ldrb	r6, [r7, r4]
 800a0e6:	f016 0608 	ands.w	r6, r6, #8
 800a0ea:	d1f8      	bne.n	800a0de <_strtoul_l.constprop.0+0xa>
 800a0ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a0ee:	d130      	bne.n	800a152 <_strtoul_l.constprop.0+0x7e>
 800a0f0:	2601      	movs	r6, #1
 800a0f2:	782c      	ldrb	r4, [r5, #0]
 800a0f4:	1c85      	adds	r5, r0, #2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d057      	beq.n	800a1aa <_strtoul_l.constprop.0+0xd6>
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	d109      	bne.n	800a112 <_strtoul_l.constprop.0+0x3e>
 800a0fe:	2c30      	cmp	r4, #48	; 0x30
 800a100:	d107      	bne.n	800a112 <_strtoul_l.constprop.0+0x3e>
 800a102:	7828      	ldrb	r0, [r5, #0]
 800a104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a108:	2858      	cmp	r0, #88	; 0x58
 800a10a:	d149      	bne.n	800a1a0 <_strtoul_l.constprop.0+0xcc>
 800a10c:	2310      	movs	r3, #16
 800a10e:	786c      	ldrb	r4, [r5, #1]
 800a110:	3502      	adds	r5, #2
 800a112:	f04f 38ff 	mov.w	r8, #4294967295
 800a116:	fbb8 f8f3 	udiv	r8, r8, r3
 800a11a:	2700      	movs	r7, #0
 800a11c:	fb03 f908 	mul.w	r9, r3, r8
 800a120:	4638      	mov	r0, r7
 800a122:	ea6f 0909 	mvn.w	r9, r9
 800a126:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a12a:	f1bc 0f09 	cmp.w	ip, #9
 800a12e:	d815      	bhi.n	800a15c <_strtoul_l.constprop.0+0x88>
 800a130:	4664      	mov	r4, ip
 800a132:	42a3      	cmp	r3, r4
 800a134:	dd23      	ble.n	800a17e <_strtoul_l.constprop.0+0xaa>
 800a136:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a13a:	d007      	beq.n	800a14c <_strtoul_l.constprop.0+0x78>
 800a13c:	4580      	cmp	r8, r0
 800a13e:	d31b      	bcc.n	800a178 <_strtoul_l.constprop.0+0xa4>
 800a140:	d101      	bne.n	800a146 <_strtoul_l.constprop.0+0x72>
 800a142:	45a1      	cmp	r9, r4
 800a144:	db18      	blt.n	800a178 <_strtoul_l.constprop.0+0xa4>
 800a146:	2701      	movs	r7, #1
 800a148:	fb00 4003 	mla	r0, r0, r3, r4
 800a14c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a150:	e7e9      	b.n	800a126 <_strtoul_l.constprop.0+0x52>
 800a152:	2c2b      	cmp	r4, #43	; 0x2b
 800a154:	bf04      	itt	eq
 800a156:	782c      	ldrbeq	r4, [r5, #0]
 800a158:	1c85      	addeq	r5, r0, #2
 800a15a:	e7cc      	b.n	800a0f6 <_strtoul_l.constprop.0+0x22>
 800a15c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a160:	f1bc 0f19 	cmp.w	ip, #25
 800a164:	d801      	bhi.n	800a16a <_strtoul_l.constprop.0+0x96>
 800a166:	3c37      	subs	r4, #55	; 0x37
 800a168:	e7e3      	b.n	800a132 <_strtoul_l.constprop.0+0x5e>
 800a16a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a16e:	f1bc 0f19 	cmp.w	ip, #25
 800a172:	d804      	bhi.n	800a17e <_strtoul_l.constprop.0+0xaa>
 800a174:	3c57      	subs	r4, #87	; 0x57
 800a176:	e7dc      	b.n	800a132 <_strtoul_l.constprop.0+0x5e>
 800a178:	f04f 37ff 	mov.w	r7, #4294967295
 800a17c:	e7e6      	b.n	800a14c <_strtoul_l.constprop.0+0x78>
 800a17e:	1c7b      	adds	r3, r7, #1
 800a180:	d106      	bne.n	800a190 <_strtoul_l.constprop.0+0xbc>
 800a182:	2322      	movs	r3, #34	; 0x22
 800a184:	4638      	mov	r0, r7
 800a186:	f8ce 3000 	str.w	r3, [lr]
 800a18a:	b932      	cbnz	r2, 800a19a <_strtoul_l.constprop.0+0xc6>
 800a18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a190:	b106      	cbz	r6, 800a194 <_strtoul_l.constprop.0+0xc0>
 800a192:	4240      	negs	r0, r0
 800a194:	2a00      	cmp	r2, #0
 800a196:	d0f9      	beq.n	800a18c <_strtoul_l.constprop.0+0xb8>
 800a198:	b107      	cbz	r7, 800a19c <_strtoul_l.constprop.0+0xc8>
 800a19a:	1e69      	subs	r1, r5, #1
 800a19c:	6011      	str	r1, [r2, #0]
 800a19e:	e7f5      	b.n	800a18c <_strtoul_l.constprop.0+0xb8>
 800a1a0:	2430      	movs	r4, #48	; 0x30
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1b5      	bne.n	800a112 <_strtoul_l.constprop.0+0x3e>
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	e7b3      	b.n	800a112 <_strtoul_l.constprop.0+0x3e>
 800a1aa:	2c30      	cmp	r4, #48	; 0x30
 800a1ac:	d0a9      	beq.n	800a102 <_strtoul_l.constprop.0+0x2e>
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	e7af      	b.n	800a112 <_strtoul_l.constprop.0+0x3e>
 800a1b2:	bf00      	nop
 800a1b4:	0800c581 	.word	0x0800c581

0800a1b8 <_strtoul_r>:
 800a1b8:	f7ff bf8c 	b.w	800a0d4 <_strtoul_l.constprop.0>

0800a1bc <strtoul>:
 800a1bc:	4613      	mov	r3, r2
 800a1be:	460a      	mov	r2, r1
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4802      	ldr	r0, [pc, #8]	; (800a1cc <strtoul+0x10>)
 800a1c4:	6800      	ldr	r0, [r0, #0]
 800a1c6:	f7ff bf85 	b.w	800a0d4 <_strtoul_l.constprop.0>
 800a1ca:	bf00      	nop
 800a1cc:	20000534 	.word	0x20000534

0800a1d0 <__ascii_wctomb>:
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	b141      	cbz	r1, 800a1e8 <__ascii_wctomb+0x18>
 800a1d6:	2aff      	cmp	r2, #255	; 0xff
 800a1d8:	d904      	bls.n	800a1e4 <__ascii_wctomb+0x14>
 800a1da:	228a      	movs	r2, #138	; 0x8a
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	4770      	bx	lr
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	700a      	strb	r2, [r1, #0]
 800a1e8:	4770      	bx	lr
	...

0800a1ec <__sflush_r>:
 800a1ec:	898a      	ldrh	r2, [r1, #12]
 800a1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	0710      	lsls	r0, r2, #28
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	d457      	bmi.n	800a2a8 <__sflush_r+0xbc>
 800a1f8:	684b      	ldr	r3, [r1, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	dc04      	bgt.n	800a208 <__sflush_r+0x1c>
 800a1fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	dc01      	bgt.n	800a208 <__sflush_r+0x1c>
 800a204:	2000      	movs	r0, #0
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a20a:	2e00      	cmp	r6, #0
 800a20c:	d0fa      	beq.n	800a204 <__sflush_r+0x18>
 800a20e:	2300      	movs	r3, #0
 800a210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a214:	682f      	ldr	r7, [r5, #0]
 800a216:	6a21      	ldr	r1, [r4, #32]
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	d032      	beq.n	800a282 <__sflush_r+0x96>
 800a21c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	075a      	lsls	r2, r3, #29
 800a222:	d505      	bpl.n	800a230 <__sflush_r+0x44>
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	1ac0      	subs	r0, r0, r3
 800a228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a22a:	b10b      	cbz	r3, 800a230 <__sflush_r+0x44>
 800a22c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a22e:	1ac0      	subs	r0, r0, r3
 800a230:	2300      	movs	r3, #0
 800a232:	4602      	mov	r2, r0
 800a234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a236:	4628      	mov	r0, r5
 800a238:	6a21      	ldr	r1, [r4, #32]
 800a23a:	47b0      	blx	r6
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	d106      	bne.n	800a250 <__sflush_r+0x64>
 800a242:	6829      	ldr	r1, [r5, #0]
 800a244:	291d      	cmp	r1, #29
 800a246:	d82b      	bhi.n	800a2a0 <__sflush_r+0xb4>
 800a248:	4a28      	ldr	r2, [pc, #160]	; (800a2ec <__sflush_r+0x100>)
 800a24a:	410a      	asrs	r2, r1
 800a24c:	07d6      	lsls	r6, r2, #31
 800a24e:	d427      	bmi.n	800a2a0 <__sflush_r+0xb4>
 800a250:	2200      	movs	r2, #0
 800a252:	6062      	str	r2, [r4, #4]
 800a254:	6922      	ldr	r2, [r4, #16]
 800a256:	04d9      	lsls	r1, r3, #19
 800a258:	6022      	str	r2, [r4, #0]
 800a25a:	d504      	bpl.n	800a266 <__sflush_r+0x7a>
 800a25c:	1c42      	adds	r2, r0, #1
 800a25e:	d101      	bne.n	800a264 <__sflush_r+0x78>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b903      	cbnz	r3, 800a266 <__sflush_r+0x7a>
 800a264:	6560      	str	r0, [r4, #84]	; 0x54
 800a266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a268:	602f      	str	r7, [r5, #0]
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d0ca      	beq.n	800a204 <__sflush_r+0x18>
 800a26e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a272:	4299      	cmp	r1, r3
 800a274:	d002      	beq.n	800a27c <__sflush_r+0x90>
 800a276:	4628      	mov	r0, r5
 800a278:	f7fe fddc 	bl	8008e34 <_free_r>
 800a27c:	2000      	movs	r0, #0
 800a27e:	6360      	str	r0, [r4, #52]	; 0x34
 800a280:	e7c1      	b.n	800a206 <__sflush_r+0x1a>
 800a282:	2301      	movs	r3, #1
 800a284:	4628      	mov	r0, r5
 800a286:	47b0      	blx	r6
 800a288:	1c41      	adds	r1, r0, #1
 800a28a:	d1c8      	bne.n	800a21e <__sflush_r+0x32>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0c5      	beq.n	800a21e <__sflush_r+0x32>
 800a292:	2b1d      	cmp	r3, #29
 800a294:	d001      	beq.n	800a29a <__sflush_r+0xae>
 800a296:	2b16      	cmp	r3, #22
 800a298:	d101      	bne.n	800a29e <__sflush_r+0xb2>
 800a29a:	602f      	str	r7, [r5, #0]
 800a29c:	e7b2      	b.n	800a204 <__sflush_r+0x18>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	e7ae      	b.n	800a206 <__sflush_r+0x1a>
 800a2a8:	690f      	ldr	r7, [r1, #16]
 800a2aa:	2f00      	cmp	r7, #0
 800a2ac:	d0aa      	beq.n	800a204 <__sflush_r+0x18>
 800a2ae:	0793      	lsls	r3, r2, #30
 800a2b0:	bf18      	it	ne
 800a2b2:	2300      	movne	r3, #0
 800a2b4:	680e      	ldr	r6, [r1, #0]
 800a2b6:	bf08      	it	eq
 800a2b8:	694b      	ldreq	r3, [r1, #20]
 800a2ba:	1bf6      	subs	r6, r6, r7
 800a2bc:	600f      	str	r7, [r1, #0]
 800a2be:	608b      	str	r3, [r1, #8]
 800a2c0:	2e00      	cmp	r6, #0
 800a2c2:	dd9f      	ble.n	800a204 <__sflush_r+0x18>
 800a2c4:	4633      	mov	r3, r6
 800a2c6:	463a      	mov	r2, r7
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	6a21      	ldr	r1, [r4, #32]
 800a2cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a2d0:	47e0      	blx	ip
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	dc06      	bgt.n	800a2e4 <__sflush_r+0xf8>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	e790      	b.n	800a206 <__sflush_r+0x1a>
 800a2e4:	4407      	add	r7, r0
 800a2e6:	1a36      	subs	r6, r6, r0
 800a2e8:	e7ea      	b.n	800a2c0 <__sflush_r+0xd4>
 800a2ea:	bf00      	nop
 800a2ec:	dfbffffe 	.word	0xdfbffffe

0800a2f0 <_fflush_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	690b      	ldr	r3, [r1, #16]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	b913      	cbnz	r3, 800a300 <_fflush_r+0x10>
 800a2fa:	2500      	movs	r5, #0
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	b118      	cbz	r0, 800a30a <_fflush_r+0x1a>
 800a302:	6a03      	ldr	r3, [r0, #32]
 800a304:	b90b      	cbnz	r3, 800a30a <_fflush_r+0x1a>
 800a306:	f7fd fd79 	bl	8007dfc <__sinit>
 800a30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0f3      	beq.n	800a2fa <_fflush_r+0xa>
 800a312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a314:	07d0      	lsls	r0, r2, #31
 800a316:	d404      	bmi.n	800a322 <_fflush_r+0x32>
 800a318:	0599      	lsls	r1, r3, #22
 800a31a:	d402      	bmi.n	800a322 <_fflush_r+0x32>
 800a31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31e:	f7fe fd37 	bl	8008d90 <__retarget_lock_acquire_recursive>
 800a322:	4628      	mov	r0, r5
 800a324:	4621      	mov	r1, r4
 800a326:	f7ff ff61 	bl	800a1ec <__sflush_r>
 800a32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a32c:	4605      	mov	r5, r0
 800a32e:	07da      	lsls	r2, r3, #31
 800a330:	d4e4      	bmi.n	800a2fc <_fflush_r+0xc>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	059b      	lsls	r3, r3, #22
 800a336:	d4e1      	bmi.n	800a2fc <_fflush_r+0xc>
 800a338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a33a:	f7fe fd2b 	bl	8008d94 <__retarget_lock_release_recursive>
 800a33e:	e7dd      	b.n	800a2fc <_fflush_r+0xc>

0800a340 <fiprintf>:
 800a340:	b40e      	push	{r1, r2, r3}
 800a342:	b503      	push	{r0, r1, lr}
 800a344:	4601      	mov	r1, r0
 800a346:	ab03      	add	r3, sp, #12
 800a348:	4805      	ldr	r0, [pc, #20]	; (800a360 <fiprintf+0x20>)
 800a34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34e:	6800      	ldr	r0, [r0, #0]
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	f000 fb0d 	bl	800a970 <_vfiprintf_r>
 800a356:	b002      	add	sp, #8
 800a358:	f85d eb04 	ldr.w	lr, [sp], #4
 800a35c:	b003      	add	sp, #12
 800a35e:	4770      	bx	lr
 800a360:	20000534 	.word	0x20000534

0800a364 <siscanf>:
 800a364:	b40e      	push	{r1, r2, r3}
 800a366:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a36a:	b530      	push	{r4, r5, lr}
 800a36c:	b09c      	sub	sp, #112	; 0x70
 800a36e:	ac1f      	add	r4, sp, #124	; 0x7c
 800a370:	f854 5b04 	ldr.w	r5, [r4], #4
 800a374:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a378:	9002      	str	r0, [sp, #8]
 800a37a:	9006      	str	r0, [sp, #24]
 800a37c:	f7f5 ff02 	bl	8000184 <strlen>
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <siscanf+0x4c>)
 800a382:	9003      	str	r0, [sp, #12]
 800a384:	930b      	str	r3, [sp, #44]	; 0x2c
 800a386:	2300      	movs	r3, #0
 800a388:	930f      	str	r3, [sp, #60]	; 0x3c
 800a38a:	9314      	str	r3, [sp, #80]	; 0x50
 800a38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a390:	9007      	str	r0, [sp, #28]
 800a392:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <siscanf+0x50>)
 800a394:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a398:	462a      	mov	r2, r5
 800a39a:	4623      	mov	r3, r4
 800a39c:	a902      	add	r1, sp, #8
 800a39e:	6800      	ldr	r0, [r0, #0]
 800a3a0:	9401      	str	r4, [sp, #4]
 800a3a2:	f000 f945 	bl	800a630 <__ssvfiscanf_r>
 800a3a6:	b01c      	add	sp, #112	; 0x70
 800a3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3ac:	b003      	add	sp, #12
 800a3ae:	4770      	bx	lr
 800a3b0:	08007e8b 	.word	0x08007e8b
 800a3b4:	20000534 	.word	0x20000534

0800a3b8 <__gettzinfo>:
 800a3b8:	4800      	ldr	r0, [pc, #0]	; (800a3bc <__gettzinfo+0x4>)
 800a3ba:	4770      	bx	lr
 800a3bc:	20000538 	.word	0x20000538

0800a3c0 <gmtime_r>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a3cc:	4a4b      	ldr	r2, [pc, #300]	; (800a4fc <gmtime_r+0x13c>)
 800a3ce:	f7f6 fed7 	bl	8001180 <__aeabi_ldivmod>
 800a3d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	bfbc      	itt	lt
 800a3da:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a3de:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a3e2:	fbb2 f3f1 	udiv	r3, r2, r1
 800a3e6:	fb01 2213 	mls	r2, r1, r3, r2
 800a3ea:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800a3ee:	60a3      	str	r3, [r4, #8]
 800a3f0:	fbb2 f3f1 	udiv	r3, r2, r1
 800a3f4:	fb01 2213 	mls	r2, r1, r3, r2
 800a3f8:	6022      	str	r2, [r4, #0]
 800a3fa:	f04f 0207 	mov.w	r2, #7
 800a3fe:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 800a402:	bfac      	ite	ge
 800a404:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800a408:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800a40c:	6063      	str	r3, [r4, #4]
 800a40e:	1cc3      	adds	r3, r0, #3
 800a410:	fb93 f2f2 	sdiv	r2, r3, r2
 800a414:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	bf48      	it	mi
 800a41c:	3307      	addmi	r3, #7
 800a41e:	2800      	cmp	r0, #0
 800a420:	4937      	ldr	r1, [pc, #220]	; (800a500 <gmtime_r+0x140>)
 800a422:	61a3      	str	r3, [r4, #24]
 800a424:	bfbd      	ittte	lt
 800a426:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800a42a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800a42e:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a432:	fb90 f1f1 	sdivge	r1, r0, r1
 800a436:	4b33      	ldr	r3, [pc, #204]	; (800a504 <gmtime_r+0x144>)
 800a438:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800a43c:	fb03 0001 	mla	r0, r3, r1, r0
 800a440:	f648 63ac 	movw	r3, #36524	; 0x8eac
 800a444:	fbb0 f3f3 	udiv	r3, r0, r3
 800a448:	fbb0 f2fc 	udiv	r2, r0, ip
 800a44c:	4403      	add	r3, r0
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	4a2d      	ldr	r2, [pc, #180]	; (800a508 <gmtime_r+0x148>)
 800a452:	f240 176d 	movw	r7, #365	; 0x16d
 800a456:	fbb0 f2f2 	udiv	r2, r0, r2
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	fbb3 f2f7 	udiv	r2, r3, r7
 800a460:	2664      	movs	r6, #100	; 0x64
 800a462:	fbb3 f3fc 	udiv	r3, r3, ip
 800a466:	fbb2 f5f6 	udiv	r5, r2, r6
 800a46a:	1aeb      	subs	r3, r5, r3
 800a46c:	4403      	add	r3, r0
 800a46e:	2099      	movs	r0, #153	; 0x99
 800a470:	fb07 3312 	mls	r3, r7, r2, r3
 800a474:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a478:	3702      	adds	r7, #2
 800a47a:	fbb7 fcf0 	udiv	ip, r7, r0
 800a47e:	f04f 0805 	mov.w	r8, #5
 800a482:	fb00 f00c 	mul.w	r0, r0, ip
 800a486:	3002      	adds	r0, #2
 800a488:	fbb0 f0f8 	udiv	r0, r0, r8
 800a48c:	f103 0e01 	add.w	lr, r3, #1
 800a490:	ebae 0000 	sub.w	r0, lr, r0
 800a494:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800a498:	4577      	cmp	r7, lr
 800a49a:	bf94      	ite	ls
 800a49c:	2702      	movls	r7, #2
 800a49e:	f06f 0709 	mvnhi.w	r7, #9
 800a4a2:	4467      	add	r7, ip
 800a4a4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800a4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ac:	2f01      	cmp	r7, #1
 800a4ae:	bf98      	it	ls
 800a4b0:	3101      	addls	r1, #1
 800a4b2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a4b6:	d30c      	bcc.n	800a4d2 <gmtime_r+0x112>
 800a4b8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a4bc:	61e3      	str	r3, [r4, #28]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800a4c4:	60e0      	str	r0, [r4, #12]
 800a4c6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	6223      	str	r3, [r4, #32]
 800a4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d2:	f012 0f03 	tst.w	r2, #3
 800a4d6:	d102      	bne.n	800a4de <gmtime_r+0x11e>
 800a4d8:	fb06 2515 	mls	r5, r6, r5, r2
 800a4dc:	b95d      	cbnz	r5, 800a4f6 <gmtime_r+0x136>
 800a4de:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a4e2:	fbb2 f6f5 	udiv	r6, r2, r5
 800a4e6:	fb05 2216 	mls	r2, r5, r6, r2
 800a4ea:	fab2 f282 	clz	r2, r2
 800a4ee:	0952      	lsrs	r2, r2, #5
 800a4f0:	333b      	adds	r3, #59	; 0x3b
 800a4f2:	4413      	add	r3, r2
 800a4f4:	e7e2      	b.n	800a4bc <gmtime_r+0xfc>
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	e7fa      	b.n	800a4f0 <gmtime_r+0x130>
 800a4fa:	bf00      	nop
 800a4fc:	00015180 	.word	0x00015180
 800a500:	00023ab1 	.word	0x00023ab1
 800a504:	fffdc54f 	.word	0xfffdc54f
 800a508:	00023ab0 	.word	0x00023ab0

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	2300      	movs	r3, #0
 800a510:	4d05      	ldr	r5, [pc, #20]	; (800a528 <_sbrk_r+0x1c>)
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7fc fcd0 	bl	8006ebc <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000914 	.word	0x20000914

0800a52c <abort>:
 800a52c:	2006      	movs	r0, #6
 800a52e:	b508      	push	{r3, lr}
 800a530:	f000 ff46 	bl	800b3c0 <raise>
 800a534:	2001      	movs	r0, #1
 800a536:	f7fc fc4e 	bl	8006dd6 <_exit>

0800a53a <_calloc_r>:
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	fba1 5402 	umull	r5, r4, r1, r2
 800a540:	b934      	cbnz	r4, 800a550 <_calloc_r+0x16>
 800a542:	4629      	mov	r1, r5
 800a544:	f7ff f88c 	bl	8009660 <_malloc_r>
 800a548:	4606      	mov	r6, r0
 800a54a:	b928      	cbnz	r0, 800a558 <_calloc_r+0x1e>
 800a54c:	4630      	mov	r0, r6
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	220c      	movs	r2, #12
 800a552:	2600      	movs	r6, #0
 800a554:	6002      	str	r2, [r0, #0]
 800a556:	e7f9      	b.n	800a54c <_calloc_r+0x12>
 800a558:	462a      	mov	r2, r5
 800a55a:	4621      	mov	r1, r4
 800a55c:	f7fd fcc9 	bl	8007ef2 <memset>
 800a560:	e7f4      	b.n	800a54c <_calloc_r+0x12>
	...

0800a564 <__env_lock>:
 800a564:	4801      	ldr	r0, [pc, #4]	; (800a56c <__env_lock+0x8>)
 800a566:	f7fe bc13 	b.w	8008d90 <__retarget_lock_acquire_recursive>
 800a56a:	bf00      	nop
 800a56c:	20000918 	.word	0x20000918

0800a570 <__env_unlock>:
 800a570:	4801      	ldr	r0, [pc, #4]	; (800a578 <__env_unlock+0x8>)
 800a572:	f7fe bc0f 	b.w	8008d94 <__retarget_lock_release_recursive>
 800a576:	bf00      	nop
 800a578:	20000918 	.word	0x20000918

0800a57c <_sungetc_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	1c4b      	adds	r3, r1, #1
 800a580:	4614      	mov	r4, r2
 800a582:	d103      	bne.n	800a58c <_sungetc_r+0x10>
 800a584:	f04f 35ff 	mov.w	r5, #4294967295
 800a588:	4628      	mov	r0, r5
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	8993      	ldrh	r3, [r2, #12]
 800a58e:	b2cd      	uxtb	r5, r1
 800a590:	f023 0320 	bic.w	r3, r3, #32
 800a594:	8193      	strh	r3, [r2, #12]
 800a596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a598:	6852      	ldr	r2, [r2, #4]
 800a59a:	b18b      	cbz	r3, 800a5c0 <_sungetc_r+0x44>
 800a59c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	dd08      	ble.n	800a5b4 <_sungetc_r+0x38>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a5ac:	6863      	ldr	r3, [r4, #4]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	6063      	str	r3, [r4, #4]
 800a5b2:	e7e9      	b.n	800a588 <_sungetc_r+0xc>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f000 fe0e 	bl	800b1d6 <__submore>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d0f1      	beq.n	800a5a2 <_sungetc_r+0x26>
 800a5be:	e7e1      	b.n	800a584 <_sungetc_r+0x8>
 800a5c0:	6921      	ldr	r1, [r4, #16]
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	b151      	cbz	r1, 800a5dc <_sungetc_r+0x60>
 800a5c6:	4299      	cmp	r1, r3
 800a5c8:	d208      	bcs.n	800a5dc <_sungetc_r+0x60>
 800a5ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a5ce:	42a9      	cmp	r1, r5
 800a5d0:	d104      	bne.n	800a5dc <_sungetc_r+0x60>
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	3201      	adds	r2, #1
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	6062      	str	r2, [r4, #4]
 800a5da:	e7d5      	b.n	800a588 <_sungetc_r+0xc>
 800a5dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ea:	4623      	mov	r3, r4
 800a5ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7dc      	b.n	800a5b0 <_sungetc_r+0x34>

0800a5f6 <__ssrefill_r>:
 800a5f6:	b510      	push	{r4, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a5fc:	b169      	cbz	r1, 800a61a <__ssrefill_r+0x24>
 800a5fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a602:	4299      	cmp	r1, r3
 800a604:	d001      	beq.n	800a60a <__ssrefill_r+0x14>
 800a606:	f7fe fc15 	bl	8008e34 <_free_r>
 800a60a:	2000      	movs	r0, #0
 800a60c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a60e:	6360      	str	r0, [r4, #52]	; 0x34
 800a610:	6063      	str	r3, [r4, #4]
 800a612:	b113      	cbz	r3, 800a61a <__ssrefill_r+0x24>
 800a614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	6923      	ldr	r3, [r4, #16]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f043 0320 	orr.w	r3, r3, #32
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	e7f3      	b.n	800a618 <__ssrefill_r+0x22>

0800a630 <__ssvfiscanf_r>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	2100      	movs	r1, #0
 800a638:	4606      	mov	r6, r0
 800a63a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a63e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a642:	49a6      	ldr	r1, [pc, #664]	; (800a8dc <__ssvfiscanf_r+0x2ac>)
 800a644:	f10d 0804 	add.w	r8, sp, #4
 800a648:	91a0      	str	r1, [sp, #640]	; 0x280
 800a64a:	49a5      	ldr	r1, [pc, #660]	; (800a8e0 <__ssvfiscanf_r+0x2b0>)
 800a64c:	4fa5      	ldr	r7, [pc, #660]	; (800a8e4 <__ssvfiscanf_r+0x2b4>)
 800a64e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a8e8 <__ssvfiscanf_r+0x2b8>
 800a652:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a656:	91a1      	str	r1, [sp, #644]	; 0x284
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	7813      	ldrb	r3, [r2, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 815a 	beq.w	800a916 <__ssvfiscanf_r+0x2e6>
 800a662:	5cf9      	ldrb	r1, [r7, r3]
 800a664:	1c55      	adds	r5, r2, #1
 800a666:	f011 0108 	ands.w	r1, r1, #8
 800a66a:	d019      	beq.n	800a6a0 <__ssvfiscanf_r+0x70>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dd0f      	ble.n	800a692 <__ssvfiscanf_r+0x62>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	5cba      	ldrb	r2, [r7, r2]
 800a678:	0712      	lsls	r2, r2, #28
 800a67a:	d401      	bmi.n	800a680 <__ssvfiscanf_r+0x50>
 800a67c:	462a      	mov	r2, r5
 800a67e:	e7ec      	b.n	800a65a <__ssvfiscanf_r+0x2a>
 800a680:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a682:	3301      	adds	r3, #1
 800a684:	3201      	adds	r2, #1
 800a686:	9245      	str	r2, [sp, #276]	; 0x114
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	6023      	str	r3, [r4, #0]
 800a68c:	3a01      	subs	r2, #1
 800a68e:	6062      	str	r2, [r4, #4]
 800a690:	e7ec      	b.n	800a66c <__ssvfiscanf_r+0x3c>
 800a692:	4621      	mov	r1, r4
 800a694:	4630      	mov	r0, r6
 800a696:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a698:	4798      	blx	r3
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d0e9      	beq.n	800a672 <__ssvfiscanf_r+0x42>
 800a69e:	e7ed      	b.n	800a67c <__ssvfiscanf_r+0x4c>
 800a6a0:	2b25      	cmp	r3, #37	; 0x25
 800a6a2:	d012      	beq.n	800a6ca <__ssvfiscanf_r+0x9a>
 800a6a4:	469a      	mov	sl, r3
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f340 8092 	ble.w	800a7d2 <__ssvfiscanf_r+0x1a2>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	7813      	ldrb	r3, [r2, #0]
 800a6b2:	4553      	cmp	r3, sl
 800a6b4:	f040 812f 	bne.w	800a916 <__ssvfiscanf_r+0x2e6>
 800a6b8:	6863      	ldr	r3, [r4, #4]
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a6c2:	6022      	str	r2, [r4, #0]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	9345      	str	r3, [sp, #276]	; 0x114
 800a6c8:	e7d8      	b.n	800a67c <__ssvfiscanf_r+0x4c>
 800a6ca:	9141      	str	r1, [sp, #260]	; 0x104
 800a6cc:	9143      	str	r1, [sp, #268]	; 0x10c
 800a6ce:	7853      	ldrb	r3, [r2, #1]
 800a6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d2:	bf04      	itt	eq
 800a6d4:	2310      	moveq	r3, #16
 800a6d6:	1c95      	addeq	r5, r2, #2
 800a6d8:	f04f 020a 	mov.w	r2, #10
 800a6dc:	bf08      	it	eq
 800a6de:	9341      	streq	r3, [sp, #260]	; 0x104
 800a6e0:	46aa      	mov	sl, r5
 800a6e2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a6e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	d91c      	bls.n	800a728 <__ssvfiscanf_r+0xf8>
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	487d      	ldr	r0, [pc, #500]	; (800a8e8 <__ssvfiscanf_r+0x2b8>)
 800a6f2:	f000 fe81 	bl	800b3f8 <memchr>
 800a6f6:	b138      	cbz	r0, 800a708 <__ssvfiscanf_r+0xd8>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	4655      	mov	r5, sl
 800a6fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a6fe:	eba0 0009 	sub.w	r0, r0, r9
 800a702:	4083      	lsls	r3, r0
 800a704:	4313      	orrs	r3, r2
 800a706:	9341      	str	r3, [sp, #260]	; 0x104
 800a708:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a70c:	2b78      	cmp	r3, #120	; 0x78
 800a70e:	d806      	bhi.n	800a71e <__ssvfiscanf_r+0xee>
 800a710:	2b57      	cmp	r3, #87	; 0x57
 800a712:	d810      	bhi.n	800a736 <__ssvfiscanf_r+0x106>
 800a714:	2b25      	cmp	r3, #37	; 0x25
 800a716:	d0c5      	beq.n	800a6a4 <__ssvfiscanf_r+0x74>
 800a718:	d856      	bhi.n	800a7c8 <__ssvfiscanf_r+0x198>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d064      	beq.n	800a7e8 <__ssvfiscanf_r+0x1b8>
 800a71e:	2303      	movs	r3, #3
 800a720:	9347      	str	r3, [sp, #284]	; 0x11c
 800a722:	230a      	movs	r3, #10
 800a724:	9342      	str	r3, [sp, #264]	; 0x108
 800a726:	e075      	b.n	800a814 <__ssvfiscanf_r+0x1e4>
 800a728:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a72a:	4655      	mov	r5, sl
 800a72c:	fb02 1103 	mla	r1, r2, r3, r1
 800a730:	3930      	subs	r1, #48	; 0x30
 800a732:	9143      	str	r1, [sp, #268]	; 0x10c
 800a734:	e7d4      	b.n	800a6e0 <__ssvfiscanf_r+0xb0>
 800a736:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a73a:	2a20      	cmp	r2, #32
 800a73c:	d8ef      	bhi.n	800a71e <__ssvfiscanf_r+0xee>
 800a73e:	a101      	add	r1, pc, #4	; (adr r1, 800a744 <__ssvfiscanf_r+0x114>)
 800a740:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a744:	0800a7f7 	.word	0x0800a7f7
 800a748:	0800a71f 	.word	0x0800a71f
 800a74c:	0800a71f 	.word	0x0800a71f
 800a750:	0800a855 	.word	0x0800a855
 800a754:	0800a71f 	.word	0x0800a71f
 800a758:	0800a71f 	.word	0x0800a71f
 800a75c:	0800a71f 	.word	0x0800a71f
 800a760:	0800a71f 	.word	0x0800a71f
 800a764:	0800a71f 	.word	0x0800a71f
 800a768:	0800a71f 	.word	0x0800a71f
 800a76c:	0800a71f 	.word	0x0800a71f
 800a770:	0800a86b 	.word	0x0800a86b
 800a774:	0800a851 	.word	0x0800a851
 800a778:	0800a7cf 	.word	0x0800a7cf
 800a77c:	0800a7cf 	.word	0x0800a7cf
 800a780:	0800a7cf 	.word	0x0800a7cf
 800a784:	0800a71f 	.word	0x0800a71f
 800a788:	0800a80d 	.word	0x0800a80d
 800a78c:	0800a71f 	.word	0x0800a71f
 800a790:	0800a71f 	.word	0x0800a71f
 800a794:	0800a71f 	.word	0x0800a71f
 800a798:	0800a71f 	.word	0x0800a71f
 800a79c:	0800a87b 	.word	0x0800a87b
 800a7a0:	0800a849 	.word	0x0800a849
 800a7a4:	0800a7ef 	.word	0x0800a7ef
 800a7a8:	0800a71f 	.word	0x0800a71f
 800a7ac:	0800a71f 	.word	0x0800a71f
 800a7b0:	0800a877 	.word	0x0800a877
 800a7b4:	0800a71f 	.word	0x0800a71f
 800a7b8:	0800a851 	.word	0x0800a851
 800a7bc:	0800a71f 	.word	0x0800a71f
 800a7c0:	0800a71f 	.word	0x0800a71f
 800a7c4:	0800a7f7 	.word	0x0800a7f7
 800a7c8:	3b45      	subs	r3, #69	; 0x45
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d8a7      	bhi.n	800a71e <__ssvfiscanf_r+0xee>
 800a7ce:	2305      	movs	r3, #5
 800a7d0:	e01f      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7d8:	4798      	blx	r3
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f af67 	beq.w	800a6ae <__ssvfiscanf_r+0x7e>
 800a7e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	f040 808d 	bne.w	800a902 <__ssvfiscanf_r+0x2d2>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	e08f      	b.n	800a90e <__ssvfiscanf_r+0x2de>
 800a7ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7f0:	f042 0220 	orr.w	r2, r2, #32
 800a7f4:	9241      	str	r2, [sp, #260]	; 0x104
 800a7f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7fc:	9241      	str	r2, [sp, #260]	; 0x104
 800a7fe:	2210      	movs	r2, #16
 800a800:	2b6f      	cmp	r3, #111	; 0x6f
 800a802:	bf34      	ite	cc
 800a804:	2303      	movcc	r3, #3
 800a806:	2304      	movcs	r3, #4
 800a808:	9242      	str	r2, [sp, #264]	; 0x108
 800a80a:	e002      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a80c:	2300      	movs	r3, #0
 800a80e:	9342      	str	r3, [sp, #264]	; 0x108
 800a810:	2303      	movs	r3, #3
 800a812:	9347      	str	r3, [sp, #284]	; 0x11c
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd3d      	ble.n	800a896 <__ssvfiscanf_r+0x266>
 800a81a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a81c:	0659      	lsls	r1, r3, #25
 800a81e:	d404      	bmi.n	800a82a <__ssvfiscanf_r+0x1fa>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	5cba      	ldrb	r2, [r7, r2]
 800a826:	0712      	lsls	r2, r2, #28
 800a828:	d43c      	bmi.n	800a8a4 <__ssvfiscanf_r+0x274>
 800a82a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	dc4b      	bgt.n	800a8c8 <__ssvfiscanf_r+0x298>
 800a830:	466b      	mov	r3, sp
 800a832:	4622      	mov	r2, r4
 800a834:	4630      	mov	r0, r6
 800a836:	a941      	add	r1, sp, #260	; 0x104
 800a838:	f000 fb48 	bl	800aecc <_scanf_chars>
 800a83c:	2801      	cmp	r0, #1
 800a83e:	d06a      	beq.n	800a916 <__ssvfiscanf_r+0x2e6>
 800a840:	2802      	cmp	r0, #2
 800a842:	f47f af1b 	bne.w	800a67c <__ssvfiscanf_r+0x4c>
 800a846:	e7cb      	b.n	800a7e0 <__ssvfiscanf_r+0x1b0>
 800a848:	2308      	movs	r3, #8
 800a84a:	9342      	str	r3, [sp, #264]	; 0x108
 800a84c:	2304      	movs	r3, #4
 800a84e:	e7e0      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a850:	220a      	movs	r2, #10
 800a852:	e7d5      	b.n	800a800 <__ssvfiscanf_r+0x1d0>
 800a854:	4629      	mov	r1, r5
 800a856:	4640      	mov	r0, r8
 800a858:	f000 fc84 	bl	800b164 <__sccl>
 800a85c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a85e:	4605      	mov	r5, r0
 800a860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a864:	9341      	str	r3, [sp, #260]	; 0x104
 800a866:	2301      	movs	r3, #1
 800a868:	e7d3      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a86a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a870:	9341      	str	r3, [sp, #260]	; 0x104
 800a872:	2300      	movs	r3, #0
 800a874:	e7cd      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a876:	2302      	movs	r3, #2
 800a878:	e7cb      	b.n	800a812 <__ssvfiscanf_r+0x1e2>
 800a87a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a87c:	06c3      	lsls	r3, r0, #27
 800a87e:	f53f aefd 	bmi.w	800a67c <__ssvfiscanf_r+0x4c>
 800a882:	9b00      	ldr	r3, [sp, #0]
 800a884:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a886:	1d19      	adds	r1, r3, #4
 800a888:	9100      	str	r1, [sp, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	07c0      	lsls	r0, r0, #31
 800a88e:	bf4c      	ite	mi
 800a890:	801a      	strhmi	r2, [r3, #0]
 800a892:	601a      	strpl	r2, [r3, #0]
 800a894:	e6f2      	b.n	800a67c <__ssvfiscanf_r+0x4c>
 800a896:	4621      	mov	r1, r4
 800a898:	4630      	mov	r0, r6
 800a89a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a89c:	4798      	blx	r3
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d0bb      	beq.n	800a81a <__ssvfiscanf_r+0x1ea>
 800a8a2:	e79d      	b.n	800a7e0 <__ssvfiscanf_r+0x1b0>
 800a8a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	9245      	str	r2, [sp, #276]	; 0x114
 800a8aa:	6862      	ldr	r2, [r4, #4]
 800a8ac:	3a01      	subs	r2, #1
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	6062      	str	r2, [r4, #4]
 800a8b2:	dd02      	ble.n	800a8ba <__ssvfiscanf_r+0x28a>
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	e7b2      	b.n	800a820 <__ssvfiscanf_r+0x1f0>
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4630      	mov	r0, r6
 800a8be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8c0:	4798      	blx	r3
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0ac      	beq.n	800a820 <__ssvfiscanf_r+0x1f0>
 800a8c6:	e78b      	b.n	800a7e0 <__ssvfiscanf_r+0x1b0>
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	dc0f      	bgt.n	800a8ec <__ssvfiscanf_r+0x2bc>
 800a8cc:	466b      	mov	r3, sp
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	a941      	add	r1, sp, #260	; 0x104
 800a8d4:	f000 fb54 	bl	800af80 <_scanf_i>
 800a8d8:	e7b0      	b.n	800a83c <__ssvfiscanf_r+0x20c>
 800a8da:	bf00      	nop
 800a8dc:	0800a57d 	.word	0x0800a57d
 800a8e0:	0800a5f7 	.word	0x0800a5f7
 800a8e4:	0800c581 	.word	0x0800c581
 800a8e8:	0800ca64 	.word	0x0800ca64
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <__ssvfiscanf_r+0x2ec>)
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f43f aec4 	beq.w	800a67c <__ssvfiscanf_r+0x4c>
 800a8f4:	466b      	mov	r3, sp
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	a941      	add	r1, sp, #260	; 0x104
 800a8fc:	f3af 8000 	nop.w
 800a900:	e79c      	b.n	800a83c <__ssvfiscanf_r+0x20c>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a908:	bf18      	it	ne
 800a90a:	f04f 30ff 	movne.w	r0, #4294967295
 800a90e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a916:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a918:	e7f9      	b.n	800a90e <__ssvfiscanf_r+0x2de>
 800a91a:	bf00      	nop
 800a91c:	00000000 	.word	0x00000000

0800a920 <__sfputc_r>:
 800a920:	6893      	ldr	r3, [r2, #8]
 800a922:	b410      	push	{r4}
 800a924:	3b01      	subs	r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	6093      	str	r3, [r2, #8]
 800a92a:	da07      	bge.n	800a93c <__sfputc_r+0x1c>
 800a92c:	6994      	ldr	r4, [r2, #24]
 800a92e:	42a3      	cmp	r3, r4
 800a930:	db01      	blt.n	800a936 <__sfputc_r+0x16>
 800a932:	290a      	cmp	r1, #10
 800a934:	d102      	bne.n	800a93c <__sfputc_r+0x1c>
 800a936:	bc10      	pop	{r4}
 800a938:	f000 bc85 	b.w	800b246 <__swbuf_r>
 800a93c:	6813      	ldr	r3, [r2, #0]
 800a93e:	1c58      	adds	r0, r3, #1
 800a940:	6010      	str	r0, [r2, #0]
 800a942:	7019      	strb	r1, [r3, #0]
 800a944:	4608      	mov	r0, r1
 800a946:	bc10      	pop	{r4}
 800a948:	4770      	bx	lr

0800a94a <__sfputs_r>:
 800a94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	4614      	mov	r4, r2
 800a952:	18d5      	adds	r5, r2, r3
 800a954:	42ac      	cmp	r4, r5
 800a956:	d101      	bne.n	800a95c <__sfputs_r+0x12>
 800a958:	2000      	movs	r0, #0
 800a95a:	e007      	b.n	800a96c <__sfputs_r+0x22>
 800a95c:	463a      	mov	r2, r7
 800a95e:	4630      	mov	r0, r6
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	f7ff ffdc 	bl	800a920 <__sfputc_r>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d1f3      	bne.n	800a954 <__sfputs_r+0xa>
 800a96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a970 <_vfiprintf_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	460d      	mov	r5, r1
 800a976:	4614      	mov	r4, r2
 800a978:	4698      	mov	r8, r3
 800a97a:	4606      	mov	r6, r0
 800a97c:	b09d      	sub	sp, #116	; 0x74
 800a97e:	b118      	cbz	r0, 800a988 <_vfiprintf_r+0x18>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	b90b      	cbnz	r3, 800a988 <_vfiprintf_r+0x18>
 800a984:	f7fd fa3a 	bl	8007dfc <__sinit>
 800a988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a98a:	07d9      	lsls	r1, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_vfiprintf_r+0x2a>
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	059a      	lsls	r2, r3, #22
 800a992:	d402      	bmi.n	800a99a <_vfiprintf_r+0x2a>
 800a994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a996:	f7fe f9fb 	bl	8008d90 <__retarget_lock_acquire_recursive>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	071b      	lsls	r3, r3, #28
 800a99e:	d501      	bpl.n	800a9a4 <_vfiprintf_r+0x34>
 800a9a0:	692b      	ldr	r3, [r5, #16]
 800a9a2:	b99b      	cbnz	r3, 800a9cc <_vfiprintf_r+0x5c>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f000 fc8a 	bl	800b2c0 <__swsetup_r>
 800a9ac:	b170      	cbz	r0, 800a9cc <_vfiprintf_r+0x5c>
 800a9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b0:	07dc      	lsls	r4, r3, #31
 800a9b2:	d504      	bpl.n	800a9be <_vfiprintf_r+0x4e>
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	b01d      	add	sp, #116	; 0x74
 800a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	0598      	lsls	r0, r3, #22
 800a9c2:	d4f7      	bmi.n	800a9b4 <_vfiprintf_r+0x44>
 800a9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c6:	f7fe f9e5 	bl	8008d94 <__retarget_lock_release_recursive>
 800a9ca:	e7f3      	b.n	800a9b4 <_vfiprintf_r+0x44>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9d6:	2330      	movs	r3, #48	; 0x30
 800a9d8:	f04f 0901 	mov.w	r9, #1
 800a9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ab90 <_vfiprintf_r+0x220>
 800a9e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	469a      	mov	sl, r3
 800a9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f0:	b10a      	cbz	r2, 800a9f6 <_vfiprintf_r+0x86>
 800a9f2:	2a25      	cmp	r2, #37	; 0x25
 800a9f4:	d1f9      	bne.n	800a9ea <_vfiprintf_r+0x7a>
 800a9f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9fa:	d00b      	beq.n	800aa14 <_vfiprintf_r+0xa4>
 800a9fc:	465b      	mov	r3, fp
 800a9fe:	4622      	mov	r2, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ffa1 	bl	800a94a <__sfputs_r>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f000 80a9 	beq.w	800ab60 <_vfiprintf_r+0x1f0>
 800aa0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa10:	445a      	add	r2, fp
 800aa12:	9209      	str	r2, [sp, #36]	; 0x24
 800aa14:	f89a 3000 	ldrb.w	r3, [sl]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80a1 	beq.w	800ab60 <_vfiprintf_r+0x1f0>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa28:	f10a 0a01 	add.w	sl, sl, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa34:	931a      	str	r3, [sp, #104]	; 0x68
 800aa36:	4654      	mov	r4, sl
 800aa38:	2205      	movs	r2, #5
 800aa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3e:	4854      	ldr	r0, [pc, #336]	; (800ab90 <_vfiprintf_r+0x220>)
 800aa40:	f000 fcda 	bl	800b3f8 <memchr>
 800aa44:	9a04      	ldr	r2, [sp, #16]
 800aa46:	b9d8      	cbnz	r0, 800aa80 <_vfiprintf_r+0x110>
 800aa48:	06d1      	lsls	r1, r2, #27
 800aa4a:	bf44      	itt	mi
 800aa4c:	2320      	movmi	r3, #32
 800aa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa52:	0713      	lsls	r3, r2, #28
 800aa54:	bf44      	itt	mi
 800aa56:	232b      	movmi	r3, #43	; 0x2b
 800aa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa5c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa60:	2b2a      	cmp	r3, #42	; 0x2a
 800aa62:	d015      	beq.n	800aa90 <_vfiprintf_r+0x120>
 800aa64:	4654      	mov	r4, sl
 800aa66:	2000      	movs	r0, #0
 800aa68:	f04f 0c0a 	mov.w	ip, #10
 800aa6c:	9a07      	ldr	r2, [sp, #28]
 800aa6e:	4621      	mov	r1, r4
 800aa70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa74:	3b30      	subs	r3, #48	; 0x30
 800aa76:	2b09      	cmp	r3, #9
 800aa78:	d94d      	bls.n	800ab16 <_vfiprintf_r+0x1a6>
 800aa7a:	b1b0      	cbz	r0, 800aaaa <_vfiprintf_r+0x13a>
 800aa7c:	9207      	str	r2, [sp, #28]
 800aa7e:	e014      	b.n	800aaaa <_vfiprintf_r+0x13a>
 800aa80:	eba0 0308 	sub.w	r3, r0, r8
 800aa84:	fa09 f303 	lsl.w	r3, r9, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	46a2      	mov	sl, r4
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	e7d2      	b.n	800aa36 <_vfiprintf_r+0xc6>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	1d19      	adds	r1, r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	9103      	str	r1, [sp, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	bfbb      	ittet	lt
 800aa9c:	425b      	neglt	r3, r3
 800aa9e:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa2:	9307      	strge	r3, [sp, #28]
 800aaa4:	9307      	strlt	r3, [sp, #28]
 800aaa6:	bfb8      	it	lt
 800aaa8:	9204      	strlt	r2, [sp, #16]
 800aaaa:	7823      	ldrb	r3, [r4, #0]
 800aaac:	2b2e      	cmp	r3, #46	; 0x2e
 800aaae:	d10c      	bne.n	800aaca <_vfiprintf_r+0x15a>
 800aab0:	7863      	ldrb	r3, [r4, #1]
 800aab2:	2b2a      	cmp	r3, #42	; 0x2a
 800aab4:	d134      	bne.n	800ab20 <_vfiprintf_r+0x1b0>
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	3402      	adds	r4, #2
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	9203      	str	r2, [sp, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bfb8      	it	lt
 800aac4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab94 <_vfiprintf_r+0x224>
 800aace:	2203      	movs	r2, #3
 800aad0:	4650      	mov	r0, sl
 800aad2:	7821      	ldrb	r1, [r4, #0]
 800aad4:	f000 fc90 	bl	800b3f8 <memchr>
 800aad8:	b138      	cbz	r0, 800aaea <_vfiprintf_r+0x17a>
 800aada:	2240      	movs	r2, #64	; 0x40
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	eba0 000a 	sub.w	r0, r0, sl
 800aae2:	4082      	lsls	r2, r0
 800aae4:	4313      	orrs	r3, r2
 800aae6:	3401      	adds	r4, #1
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	2206      	movs	r2, #6
 800aaf0:	4829      	ldr	r0, [pc, #164]	; (800ab98 <_vfiprintf_r+0x228>)
 800aaf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaf6:	f000 fc7f 	bl	800b3f8 <memchr>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d03f      	beq.n	800ab7e <_vfiprintf_r+0x20e>
 800aafe:	4b27      	ldr	r3, [pc, #156]	; (800ab9c <_vfiprintf_r+0x22c>)
 800ab00:	bb1b      	cbnz	r3, 800ab4a <_vfiprintf_r+0x1da>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	3307      	adds	r3, #7
 800ab06:	f023 0307 	bic.w	r3, r3, #7
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab10:	443b      	add	r3, r7
 800ab12:	9309      	str	r3, [sp, #36]	; 0x24
 800ab14:	e768      	b.n	800a9e8 <_vfiprintf_r+0x78>
 800ab16:	460c      	mov	r4, r1
 800ab18:	2001      	movs	r0, #1
 800ab1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab1e:	e7a6      	b.n	800aa6e <_vfiprintf_r+0xfe>
 800ab20:	2300      	movs	r3, #0
 800ab22:	f04f 0c0a 	mov.w	ip, #10
 800ab26:	4619      	mov	r1, r3
 800ab28:	3401      	adds	r4, #1
 800ab2a:	9305      	str	r3, [sp, #20]
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab32:	3a30      	subs	r2, #48	; 0x30
 800ab34:	2a09      	cmp	r2, #9
 800ab36:	d903      	bls.n	800ab40 <_vfiprintf_r+0x1d0>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0c6      	beq.n	800aaca <_vfiprintf_r+0x15a>
 800ab3c:	9105      	str	r1, [sp, #20]
 800ab3e:	e7c4      	b.n	800aaca <_vfiprintf_r+0x15a>
 800ab40:	4604      	mov	r4, r0
 800ab42:	2301      	movs	r3, #1
 800ab44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab48:	e7f0      	b.n	800ab2c <_vfiprintf_r+0x1bc>
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	462a      	mov	r2, r5
 800ab50:	4630      	mov	r0, r6
 800ab52:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <_vfiprintf_r+0x230>)
 800ab54:	a904      	add	r1, sp, #16
 800ab56:	f3af 8000 	nop.w
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	1c78      	adds	r0, r7, #1
 800ab5e:	d1d6      	bne.n	800ab0e <_vfiprintf_r+0x19e>
 800ab60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	d405      	bmi.n	800ab72 <_vfiprintf_r+0x202>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	059a      	lsls	r2, r3, #22
 800ab6a:	d402      	bmi.n	800ab72 <_vfiprintf_r+0x202>
 800ab6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab6e:	f7fe f911 	bl	8008d94 <__retarget_lock_release_recursive>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	065b      	lsls	r3, r3, #25
 800ab76:	f53f af1d 	bmi.w	800a9b4 <_vfiprintf_r+0x44>
 800ab7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab7c:	e71c      	b.n	800a9b8 <_vfiprintf_r+0x48>
 800ab7e:	ab03      	add	r3, sp, #12
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	462a      	mov	r2, r5
 800ab84:	4630      	mov	r0, r6
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <_vfiprintf_r+0x230>)
 800ab88:	a904      	add	r1, sp, #16
 800ab8a:	f000 f87d 	bl	800ac88 <_printf_i>
 800ab8e:	e7e4      	b.n	800ab5a <_vfiprintf_r+0x1ea>
 800ab90:	0800ca68 	.word	0x0800ca68
 800ab94:	0800ca64 	.word	0x0800ca64
 800ab98:	0800ca6e 	.word	0x0800ca6e
 800ab9c:	00000000 	.word	0x00000000
 800aba0:	0800a94b 	.word	0x0800a94b

0800aba4 <_printf_common>:
 800aba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba8:	4616      	mov	r6, r2
 800abaa:	4699      	mov	r9, r3
 800abac:	688a      	ldr	r2, [r1, #8]
 800abae:	690b      	ldr	r3, [r1, #16]
 800abb0:	4607      	mov	r7, r0
 800abb2:	4293      	cmp	r3, r2
 800abb4:	bfb8      	it	lt
 800abb6:	4613      	movlt	r3, r2
 800abb8:	6033      	str	r3, [r6, #0]
 800abba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abbe:	460c      	mov	r4, r1
 800abc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abc4:	b10a      	cbz	r2, 800abca <_printf_common+0x26>
 800abc6:	3301      	adds	r3, #1
 800abc8:	6033      	str	r3, [r6, #0]
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	0699      	lsls	r1, r3, #26
 800abce:	bf42      	ittt	mi
 800abd0:	6833      	ldrmi	r3, [r6, #0]
 800abd2:	3302      	addmi	r3, #2
 800abd4:	6033      	strmi	r3, [r6, #0]
 800abd6:	6825      	ldr	r5, [r4, #0]
 800abd8:	f015 0506 	ands.w	r5, r5, #6
 800abdc:	d106      	bne.n	800abec <_printf_common+0x48>
 800abde:	f104 0a19 	add.w	sl, r4, #25
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	6832      	ldr	r2, [r6, #0]
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	42ab      	cmp	r3, r5
 800abea:	dc2b      	bgt.n	800ac44 <_printf_common+0xa0>
 800abec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abf0:	1e13      	subs	r3, r2, #0
 800abf2:	6822      	ldr	r2, [r4, #0]
 800abf4:	bf18      	it	ne
 800abf6:	2301      	movne	r3, #1
 800abf8:	0692      	lsls	r2, r2, #26
 800abfa:	d430      	bmi.n	800ac5e <_printf_common+0xba>
 800abfc:	4649      	mov	r1, r9
 800abfe:	4638      	mov	r0, r7
 800ac00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac04:	47c0      	blx	r8
 800ac06:	3001      	adds	r0, #1
 800ac08:	d023      	beq.n	800ac52 <_printf_common+0xae>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	6922      	ldr	r2, [r4, #16]
 800ac0e:	f003 0306 	and.w	r3, r3, #6
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	bf14      	ite	ne
 800ac16:	2500      	movne	r5, #0
 800ac18:	6833      	ldreq	r3, [r6, #0]
 800ac1a:	f04f 0600 	mov.w	r6, #0
 800ac1e:	bf08      	it	eq
 800ac20:	68e5      	ldreq	r5, [r4, #12]
 800ac22:	f104 041a 	add.w	r4, r4, #26
 800ac26:	bf08      	it	eq
 800ac28:	1aed      	subeq	r5, r5, r3
 800ac2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac2e:	bf08      	it	eq
 800ac30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac34:	4293      	cmp	r3, r2
 800ac36:	bfc4      	itt	gt
 800ac38:	1a9b      	subgt	r3, r3, r2
 800ac3a:	18ed      	addgt	r5, r5, r3
 800ac3c:	42b5      	cmp	r5, r6
 800ac3e:	d11a      	bne.n	800ac76 <_printf_common+0xd2>
 800ac40:	2000      	movs	r0, #0
 800ac42:	e008      	b.n	800ac56 <_printf_common+0xb2>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4652      	mov	r2, sl
 800ac48:	4649      	mov	r1, r9
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	47c0      	blx	r8
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d103      	bne.n	800ac5a <_printf_common+0xb6>
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5a:	3501      	adds	r5, #1
 800ac5c:	e7c1      	b.n	800abe2 <_printf_common+0x3e>
 800ac5e:	2030      	movs	r0, #48	; 0x30
 800ac60:	18e1      	adds	r1, r4, r3
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac6c:	4422      	add	r2, r4
 800ac6e:	3302      	adds	r3, #2
 800ac70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac74:	e7c2      	b.n	800abfc <_printf_common+0x58>
 800ac76:	2301      	movs	r3, #1
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	47c0      	blx	r8
 800ac80:	3001      	adds	r0, #1
 800ac82:	d0e6      	beq.n	800ac52 <_printf_common+0xae>
 800ac84:	3601      	adds	r6, #1
 800ac86:	e7d9      	b.n	800ac3c <_printf_common+0x98>

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	7e0f      	ldrb	r7, [r1, #24]
 800ac8e:	4691      	mov	r9, r2
 800ac90:	2f78      	cmp	r7, #120	; 0x78
 800ac92:	4680      	mov	r8, r0
 800ac94:	460c      	mov	r4, r1
 800ac96:	469a      	mov	sl, r3
 800ac98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	; 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d5 	beq.w	800ae54 <_printf_i+0x1cc>
 800acaa:	2f58      	cmp	r7, #88	; 0x58
 800acac:	f000 80c1 	beq.w	800ae32 <_printf_i+0x1aa>
 800acb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a101      	add	r1, pc, #4	; (adr r1, 800acc8 <_printf_i+0x40>)
 800acc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae3b 	.word	0x0800ae3b
 800acf8:	0800ad61 	.word	0x0800ad61
 800acfc:	0800adf5 	.word	0x0800adf5
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae5d 	.word	0x0800ae5d
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad61 	.word	0x0800ad61
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800adfd 	.word	0x0800adfd
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	602a      	str	r2, [r5, #0]
 800ad28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0a0      	b.n	800ae76 <_printf_i+0x1ee>
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	682b      	ldr	r3, [r5, #0]
 800ad38:	0607      	lsls	r7, r0, #24
 800ad3a:	f103 0104 	add.w	r1, r3, #4
 800ad3e:	6029      	str	r1, [r5, #0]
 800ad40:	d501      	bpl.n	800ad46 <_printf_i+0xbe>
 800ad42:	681e      	ldr	r6, [r3, #0]
 800ad44:	e003      	b.n	800ad4e <_printf_i+0xc6>
 800ad46:	0646      	lsls	r6, r0, #25
 800ad48:	d5fb      	bpl.n	800ad42 <_printf_i+0xba>
 800ad4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	da03      	bge.n	800ad5a <_printf_i+0xd2>
 800ad52:	232d      	movs	r3, #45	; 0x2d
 800ad54:	4276      	negs	r6, r6
 800ad56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	4859      	ldr	r0, [pc, #356]	; (800aec4 <_printf_i+0x23c>)
 800ad5e:	e012      	b.n	800ad86 <_printf_i+0xfe>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	6820      	ldr	r0, [r4, #0]
 800ad64:	1d19      	adds	r1, r3, #4
 800ad66:	6029      	str	r1, [r5, #0]
 800ad68:	0605      	lsls	r5, r0, #24
 800ad6a:	d501      	bpl.n	800ad70 <_printf_i+0xe8>
 800ad6c:	681e      	ldr	r6, [r3, #0]
 800ad6e:	e002      	b.n	800ad76 <_printf_i+0xee>
 800ad70:	0641      	lsls	r1, r0, #25
 800ad72:	d5fb      	bpl.n	800ad6c <_printf_i+0xe4>
 800ad74:	881e      	ldrh	r6, [r3, #0]
 800ad76:	2f6f      	cmp	r7, #111	; 0x6f
 800ad78:	bf0c      	ite	eq
 800ad7a:	2308      	moveq	r3, #8
 800ad7c:	230a      	movne	r3, #10
 800ad7e:	4851      	ldr	r0, [pc, #324]	; (800aec4 <_printf_i+0x23c>)
 800ad80:	2100      	movs	r1, #0
 800ad82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad86:	6865      	ldr	r5, [r4, #4]
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	bfa8      	it	ge
 800ad8c:	6821      	ldrge	r1, [r4, #0]
 800ad8e:	60a5      	str	r5, [r4, #8]
 800ad90:	bfa4      	itt	ge
 800ad92:	f021 0104 	bicge.w	r1, r1, #4
 800ad96:	6021      	strge	r1, [r4, #0]
 800ad98:	b90e      	cbnz	r6, 800ad9e <_printf_i+0x116>
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	d04b      	beq.n	800ae36 <_printf_i+0x1ae>
 800ad9e:	4615      	mov	r5, r2
 800ada0:	fbb6 f1f3 	udiv	r1, r6, r3
 800ada4:	fb03 6711 	mls	r7, r3, r1, r6
 800ada8:	5dc7      	ldrb	r7, [r0, r7]
 800adaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adae:	4637      	mov	r7, r6
 800adb0:	42bb      	cmp	r3, r7
 800adb2:	460e      	mov	r6, r1
 800adb4:	d9f4      	bls.n	800ada0 <_printf_i+0x118>
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d10b      	bne.n	800add2 <_printf_i+0x14a>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	07de      	lsls	r6, r3, #31
 800adbe:	d508      	bpl.n	800add2 <_printf_i+0x14a>
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	6861      	ldr	r1, [r4, #4]
 800adc4:	4299      	cmp	r1, r3
 800adc6:	bfde      	ittt	le
 800adc8:	2330      	movle	r3, #48	; 0x30
 800adca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800add2:	1b52      	subs	r2, r2, r5
 800add4:	6122      	str	r2, [r4, #16]
 800add6:	464b      	mov	r3, r9
 800add8:	4621      	mov	r1, r4
 800adda:	4640      	mov	r0, r8
 800addc:	f8cd a000 	str.w	sl, [sp]
 800ade0:	aa03      	add	r2, sp, #12
 800ade2:	f7ff fedf 	bl	800aba4 <_printf_common>
 800ade6:	3001      	adds	r0, #1
 800ade8:	d14a      	bne.n	800ae80 <_printf_i+0x1f8>
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	b004      	add	sp, #16
 800adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	f043 0320 	orr.w	r3, r3, #32
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	2778      	movs	r7, #120	; 0x78
 800adfe:	4832      	ldr	r0, [pc, #200]	; (800aec8 <_printf_i+0x240>)
 800ae00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	6829      	ldr	r1, [r5, #0]
 800ae08:	061f      	lsls	r7, r3, #24
 800ae0a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae0e:	d402      	bmi.n	800ae16 <_printf_i+0x18e>
 800ae10:	065f      	lsls	r7, r3, #25
 800ae12:	bf48      	it	mi
 800ae14:	b2b6      	uxthmi	r6, r6
 800ae16:	07df      	lsls	r7, r3, #31
 800ae18:	bf48      	it	mi
 800ae1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae1e:	6029      	str	r1, [r5, #0]
 800ae20:	bf48      	it	mi
 800ae22:	6023      	strmi	r3, [r4, #0]
 800ae24:	b91e      	cbnz	r6, 800ae2e <_printf_i+0x1a6>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	f023 0320 	bic.w	r3, r3, #32
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	2310      	movs	r3, #16
 800ae30:	e7a6      	b.n	800ad80 <_printf_i+0xf8>
 800ae32:	4824      	ldr	r0, [pc, #144]	; (800aec4 <_printf_i+0x23c>)
 800ae34:	e7e4      	b.n	800ae00 <_printf_i+0x178>
 800ae36:	4615      	mov	r5, r2
 800ae38:	e7bd      	b.n	800adb6 <_printf_i+0x12e>
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	6826      	ldr	r6, [r4, #0]
 800ae3e:	1d18      	adds	r0, r3, #4
 800ae40:	6961      	ldr	r1, [r4, #20]
 800ae42:	6028      	str	r0, [r5, #0]
 800ae44:	0635      	lsls	r5, r6, #24
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	d501      	bpl.n	800ae4e <_printf_i+0x1c6>
 800ae4a:	6019      	str	r1, [r3, #0]
 800ae4c:	e002      	b.n	800ae54 <_printf_i+0x1cc>
 800ae4e:	0670      	lsls	r0, r6, #25
 800ae50:	d5fb      	bpl.n	800ae4a <_printf_i+0x1c2>
 800ae52:	8019      	strh	r1, [r3, #0]
 800ae54:	2300      	movs	r3, #0
 800ae56:	4615      	mov	r5, r2
 800ae58:	6123      	str	r3, [r4, #16]
 800ae5a:	e7bc      	b.n	800add6 <_printf_i+0x14e>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	1d1a      	adds	r2, r3, #4
 800ae62:	602a      	str	r2, [r5, #0]
 800ae64:	681d      	ldr	r5, [r3, #0]
 800ae66:	6862      	ldr	r2, [r4, #4]
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 fac5 	bl	800b3f8 <memchr>
 800ae6e:	b108      	cbz	r0, 800ae74 <_printf_i+0x1ec>
 800ae70:	1b40      	subs	r0, r0, r5
 800ae72:	6060      	str	r0, [r4, #4]
 800ae74:	6863      	ldr	r3, [r4, #4]
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae7e:	e7aa      	b.n	800add6 <_printf_i+0x14e>
 800ae80:	462a      	mov	r2, r5
 800ae82:	4649      	mov	r1, r9
 800ae84:	4640      	mov	r0, r8
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	47d0      	blx	sl
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d0ad      	beq.n	800adea <_printf_i+0x162>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	079b      	lsls	r3, r3, #30
 800ae92:	d413      	bmi.n	800aebc <_printf_i+0x234>
 800ae94:	68e0      	ldr	r0, [r4, #12]
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	bfb8      	it	lt
 800ae9c:	4618      	movlt	r0, r3
 800ae9e:	e7a6      	b.n	800adee <_printf_i+0x166>
 800aea0:	2301      	movs	r3, #1
 800aea2:	4632      	mov	r2, r6
 800aea4:	4649      	mov	r1, r9
 800aea6:	4640      	mov	r0, r8
 800aea8:	47d0      	blx	sl
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d09d      	beq.n	800adea <_printf_i+0x162>
 800aeae:	3501      	adds	r5, #1
 800aeb0:	68e3      	ldr	r3, [r4, #12]
 800aeb2:	9903      	ldr	r1, [sp, #12]
 800aeb4:	1a5b      	subs	r3, r3, r1
 800aeb6:	42ab      	cmp	r3, r5
 800aeb8:	dcf2      	bgt.n	800aea0 <_printf_i+0x218>
 800aeba:	e7eb      	b.n	800ae94 <_printf_i+0x20c>
 800aebc:	2500      	movs	r5, #0
 800aebe:	f104 0619 	add.w	r6, r4, #25
 800aec2:	e7f5      	b.n	800aeb0 <_printf_i+0x228>
 800aec4:	0800ca75 	.word	0x0800ca75
 800aec8:	0800ca86 	.word	0x0800ca86

0800aecc <_scanf_chars>:
 800aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4615      	mov	r5, r2
 800aed2:	688a      	ldr	r2, [r1, #8]
 800aed4:	4680      	mov	r8, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	b932      	cbnz	r2, 800aee8 <_scanf_chars+0x1c>
 800aeda:	698a      	ldr	r2, [r1, #24]
 800aedc:	2a00      	cmp	r2, #0
 800aede:	bf0c      	ite	eq
 800aee0:	2201      	moveq	r2, #1
 800aee2:	f04f 32ff 	movne.w	r2, #4294967295
 800aee6:	608a      	str	r2, [r1, #8]
 800aee8:	2700      	movs	r7, #0
 800aeea:	6822      	ldr	r2, [r4, #0]
 800aeec:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800af7c <_scanf_chars+0xb0>
 800aef0:	06d1      	lsls	r1, r2, #27
 800aef2:	bf5f      	itttt	pl
 800aef4:	681a      	ldrpl	r2, [r3, #0]
 800aef6:	1d11      	addpl	r1, r2, #4
 800aef8:	6019      	strpl	r1, [r3, #0]
 800aefa:	6816      	ldrpl	r6, [r2, #0]
 800aefc:	69a0      	ldr	r0, [r4, #24]
 800aefe:	b188      	cbz	r0, 800af24 <_scanf_chars+0x58>
 800af00:	2801      	cmp	r0, #1
 800af02:	d107      	bne.n	800af14 <_scanf_chars+0x48>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	781a      	ldrb	r2, [r3, #0]
 800af08:	6963      	ldr	r3, [r4, #20]
 800af0a:	5c9b      	ldrb	r3, [r3, r2]
 800af0c:	b953      	cbnz	r3, 800af24 <_scanf_chars+0x58>
 800af0e:	2f00      	cmp	r7, #0
 800af10:	d031      	beq.n	800af76 <_scanf_chars+0xaa>
 800af12:	e022      	b.n	800af5a <_scanf_chars+0x8e>
 800af14:	2802      	cmp	r0, #2
 800af16:	d120      	bne.n	800af5a <_scanf_chars+0x8e>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800af20:	071b      	lsls	r3, r3, #28
 800af22:	d41a      	bmi.n	800af5a <_scanf_chars+0x8e>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	3701      	adds	r7, #1
 800af28:	06da      	lsls	r2, r3, #27
 800af2a:	bf5e      	ittt	pl
 800af2c:	682b      	ldrpl	r3, [r5, #0]
 800af2e:	781b      	ldrbpl	r3, [r3, #0]
 800af30:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af34:	682a      	ldr	r2, [r5, #0]
 800af36:	686b      	ldr	r3, [r5, #4]
 800af38:	3201      	adds	r2, #1
 800af3a:	602a      	str	r2, [r5, #0]
 800af3c:	68a2      	ldr	r2, [r4, #8]
 800af3e:	3b01      	subs	r3, #1
 800af40:	3a01      	subs	r2, #1
 800af42:	606b      	str	r3, [r5, #4]
 800af44:	60a2      	str	r2, [r4, #8]
 800af46:	b142      	cbz	r2, 800af5a <_scanf_chars+0x8e>
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dcd7      	bgt.n	800aefc <_scanf_chars+0x30>
 800af4c:	4629      	mov	r1, r5
 800af4e:	4640      	mov	r0, r8
 800af50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af54:	4798      	blx	r3
 800af56:	2800      	cmp	r0, #0
 800af58:	d0d0      	beq.n	800aefc <_scanf_chars+0x30>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f013 0310 	ands.w	r3, r3, #16
 800af60:	d105      	bne.n	800af6e <_scanf_chars+0xa2>
 800af62:	68e2      	ldr	r2, [r4, #12]
 800af64:	3201      	adds	r2, #1
 800af66:	60e2      	str	r2, [r4, #12]
 800af68:	69a2      	ldr	r2, [r4, #24]
 800af6a:	b102      	cbz	r2, 800af6e <_scanf_chars+0xa2>
 800af6c:	7033      	strb	r3, [r6, #0]
 800af6e:	2000      	movs	r0, #0
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	443b      	add	r3, r7
 800af74:	6123      	str	r3, [r4, #16]
 800af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7a:	bf00      	nop
 800af7c:	0800c581 	.word	0x0800c581

0800af80 <_scanf_i>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	460c      	mov	r4, r1
 800af86:	4698      	mov	r8, r3
 800af88:	4b72      	ldr	r3, [pc, #456]	; (800b154 <_scanf_i+0x1d4>)
 800af8a:	b087      	sub	sp, #28
 800af8c:	4682      	mov	sl, r0
 800af8e:	4616      	mov	r6, r2
 800af90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af94:	ab03      	add	r3, sp, #12
 800af96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af9a:	4b6f      	ldr	r3, [pc, #444]	; (800b158 <_scanf_i+0x1d8>)
 800af9c:	69a1      	ldr	r1, [r4, #24]
 800af9e:	4a6f      	ldr	r2, [pc, #444]	; (800b15c <_scanf_i+0x1dc>)
 800afa0:	4627      	mov	r7, r4
 800afa2:	2903      	cmp	r1, #3
 800afa4:	bf18      	it	ne
 800afa6:	461a      	movne	r2, r3
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afb2:	bf81      	itttt	hi
 800afb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afb8:	eb03 0905 	addhi.w	r9, r3, r5
 800afbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afc0:	60a3      	strhi	r3, [r4, #8]
 800afc2:	f857 3b1c 	ldr.w	r3, [r7], #28
 800afc6:	bf98      	it	ls
 800afc8:	f04f 0900 	movls.w	r9, #0
 800afcc:	463d      	mov	r5, r7
 800afce:	f04f 0b00 	mov.w	fp, #0
 800afd2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800afd6:	6023      	str	r3, [r4, #0]
 800afd8:	6831      	ldr	r1, [r6, #0]
 800afda:	ab03      	add	r3, sp, #12
 800afdc:	2202      	movs	r2, #2
 800afde:	7809      	ldrb	r1, [r1, #0]
 800afe0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800afe4:	f000 fa08 	bl	800b3f8 <memchr>
 800afe8:	b328      	cbz	r0, 800b036 <_scanf_i+0xb6>
 800afea:	f1bb 0f01 	cmp.w	fp, #1
 800afee:	d159      	bne.n	800b0a4 <_scanf_i+0x124>
 800aff0:	6862      	ldr	r2, [r4, #4]
 800aff2:	b92a      	cbnz	r2, 800b000 <_scanf_i+0x80>
 800aff4:	2308      	movs	r3, #8
 800aff6:	6822      	ldr	r2, [r4, #0]
 800aff8:	6063      	str	r3, [r4, #4]
 800affa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800affe:	6022      	str	r2, [r4, #0]
 800b000:	6822      	ldr	r2, [r4, #0]
 800b002:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b006:	6022      	str	r2, [r4, #0]
 800b008:	68a2      	ldr	r2, [r4, #8]
 800b00a:	1e51      	subs	r1, r2, #1
 800b00c:	60a1      	str	r1, [r4, #8]
 800b00e:	b192      	cbz	r2, 800b036 <_scanf_i+0xb6>
 800b010:	6832      	ldr	r2, [r6, #0]
 800b012:	1c51      	adds	r1, r2, #1
 800b014:	6031      	str	r1, [r6, #0]
 800b016:	7812      	ldrb	r2, [r2, #0]
 800b018:	f805 2b01 	strb.w	r2, [r5], #1
 800b01c:	6872      	ldr	r2, [r6, #4]
 800b01e:	3a01      	subs	r2, #1
 800b020:	2a00      	cmp	r2, #0
 800b022:	6072      	str	r2, [r6, #4]
 800b024:	dc07      	bgt.n	800b036 <_scanf_i+0xb6>
 800b026:	4631      	mov	r1, r6
 800b028:	4650      	mov	r0, sl
 800b02a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b02e:	4790      	blx	r2
 800b030:	2800      	cmp	r0, #0
 800b032:	f040 8085 	bne.w	800b140 <_scanf_i+0x1c0>
 800b036:	f10b 0b01 	add.w	fp, fp, #1
 800b03a:	f1bb 0f03 	cmp.w	fp, #3
 800b03e:	d1cb      	bne.n	800afd8 <_scanf_i+0x58>
 800b040:	6863      	ldr	r3, [r4, #4]
 800b042:	b90b      	cbnz	r3, 800b048 <_scanf_i+0xc8>
 800b044:	230a      	movs	r3, #10
 800b046:	6063      	str	r3, [r4, #4]
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	4945      	ldr	r1, [pc, #276]	; (800b160 <_scanf_i+0x1e0>)
 800b04c:	6960      	ldr	r0, [r4, #20]
 800b04e:	1ac9      	subs	r1, r1, r3
 800b050:	f000 f888 	bl	800b164 <__sccl>
 800b054:	f04f 0b00 	mov.w	fp, #0
 800b058:	68a3      	ldr	r3, [r4, #8]
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d03d      	beq.n	800b0dc <_scanf_i+0x15c>
 800b060:	6831      	ldr	r1, [r6, #0]
 800b062:	6960      	ldr	r0, [r4, #20]
 800b064:	f891 c000 	ldrb.w	ip, [r1]
 800b068:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d035      	beq.n	800b0dc <_scanf_i+0x15c>
 800b070:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b074:	d124      	bne.n	800b0c0 <_scanf_i+0x140>
 800b076:	0510      	lsls	r0, r2, #20
 800b078:	d522      	bpl.n	800b0c0 <_scanf_i+0x140>
 800b07a:	f10b 0b01 	add.w	fp, fp, #1
 800b07e:	f1b9 0f00 	cmp.w	r9, #0
 800b082:	d003      	beq.n	800b08c <_scanf_i+0x10c>
 800b084:	3301      	adds	r3, #1
 800b086:	f109 39ff 	add.w	r9, r9, #4294967295
 800b08a:	60a3      	str	r3, [r4, #8]
 800b08c:	6873      	ldr	r3, [r6, #4]
 800b08e:	3b01      	subs	r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	6073      	str	r3, [r6, #4]
 800b094:	dd1b      	ble.n	800b0ce <_scanf_i+0x14e>
 800b096:	6833      	ldr	r3, [r6, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	6033      	str	r3, [r6, #0]
 800b09c:	68a3      	ldr	r3, [r4, #8]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	60a3      	str	r3, [r4, #8]
 800b0a2:	e7d9      	b.n	800b058 <_scanf_i+0xd8>
 800b0a4:	f1bb 0f02 	cmp.w	fp, #2
 800b0a8:	d1ae      	bne.n	800b008 <_scanf_i+0x88>
 800b0aa:	6822      	ldr	r2, [r4, #0]
 800b0ac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b0b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b0b4:	d1bf      	bne.n	800b036 <_scanf_i+0xb6>
 800b0b6:	2310      	movs	r3, #16
 800b0b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0bc:	6063      	str	r3, [r4, #4]
 800b0be:	e7a2      	b.n	800b006 <_scanf_i+0x86>
 800b0c0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	780b      	ldrb	r3, [r1, #0]
 800b0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b0cc:	e7de      	b.n	800b08c <_scanf_i+0x10c>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0d6:	4798      	blx	r3
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0df      	beq.n	800b09c <_scanf_i+0x11c>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	05d9      	lsls	r1, r3, #23
 800b0e0:	d50d      	bpl.n	800b0fe <_scanf_i+0x17e>
 800b0e2:	42bd      	cmp	r5, r7
 800b0e4:	d909      	bls.n	800b0fa <_scanf_i+0x17a>
 800b0e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0ea:	4632      	mov	r2, r6
 800b0ec:	4650      	mov	r0, sl
 800b0ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0f6:	4798      	blx	r3
 800b0f8:	464d      	mov	r5, r9
 800b0fa:	42bd      	cmp	r5, r7
 800b0fc:	d028      	beq.n	800b150 <_scanf_i+0x1d0>
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	f012 0210 	ands.w	r2, r2, #16
 800b104:	d113      	bne.n	800b12e <_scanf_i+0x1ae>
 800b106:	702a      	strb	r2, [r5, #0]
 800b108:	4639      	mov	r1, r7
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	4650      	mov	r0, sl
 800b10e:	9e01      	ldr	r6, [sp, #4]
 800b110:	47b0      	blx	r6
 800b112:	f8d8 3000 	ldr.w	r3, [r8]
 800b116:	6821      	ldr	r1, [r4, #0]
 800b118:	1d1a      	adds	r2, r3, #4
 800b11a:	f8c8 2000 	str.w	r2, [r8]
 800b11e:	f011 0f20 	tst.w	r1, #32
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	d00f      	beq.n	800b146 <_scanf_i+0x1c6>
 800b126:	6018      	str	r0, [r3, #0]
 800b128:	68e3      	ldr	r3, [r4, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60e3      	str	r3, [r4, #12]
 800b12e:	2000      	movs	r0, #0
 800b130:	6923      	ldr	r3, [r4, #16]
 800b132:	1bed      	subs	r5, r5, r7
 800b134:	445d      	add	r5, fp
 800b136:	442b      	add	r3, r5
 800b138:	6123      	str	r3, [r4, #16]
 800b13a:	b007      	add	sp, #28
 800b13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b140:	f04f 0b00 	mov.w	fp, #0
 800b144:	e7ca      	b.n	800b0dc <_scanf_i+0x15c>
 800b146:	07ca      	lsls	r2, r1, #31
 800b148:	bf4c      	ite	mi
 800b14a:	8018      	strhmi	r0, [r3, #0]
 800b14c:	6018      	strpl	r0, [r3, #0]
 800b14e:	e7eb      	b.n	800b128 <_scanf_i+0x1a8>
 800b150:	2001      	movs	r0, #1
 800b152:	e7f2      	b.n	800b13a <_scanf_i+0x1ba>
 800b154:	0800c510 	.word	0x0800c510
 800b158:	0800a1b9 	.word	0x0800a1b9
 800b15c:	08007ccd 	.word	0x08007ccd
 800b160:	0800caa7 	.word	0x0800caa7

0800b164 <__sccl>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	780b      	ldrb	r3, [r1, #0]
 800b168:	4604      	mov	r4, r0
 800b16a:	2b5e      	cmp	r3, #94	; 0x5e
 800b16c:	bf0b      	itete	eq
 800b16e:	784b      	ldrbeq	r3, [r1, #1]
 800b170:	1c4a      	addne	r2, r1, #1
 800b172:	1c8a      	addeq	r2, r1, #2
 800b174:	2100      	movne	r1, #0
 800b176:	bf08      	it	eq
 800b178:	2101      	moveq	r1, #1
 800b17a:	3801      	subs	r0, #1
 800b17c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b180:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b184:	42a8      	cmp	r0, r5
 800b186:	d1fb      	bne.n	800b180 <__sccl+0x1c>
 800b188:	b90b      	cbnz	r3, 800b18e <__sccl+0x2a>
 800b18a:	1e50      	subs	r0, r2, #1
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
 800b18e:	f081 0101 	eor.w	r1, r1, #1
 800b192:	4610      	mov	r0, r2
 800b194:	54e1      	strb	r1, [r4, r3]
 800b196:	4602      	mov	r2, r0
 800b198:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b19c:	2d2d      	cmp	r5, #45	; 0x2d
 800b19e:	d005      	beq.n	800b1ac <__sccl+0x48>
 800b1a0:	2d5d      	cmp	r5, #93	; 0x5d
 800b1a2:	d016      	beq.n	800b1d2 <__sccl+0x6e>
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	d0f1      	beq.n	800b18c <__sccl+0x28>
 800b1a8:	462b      	mov	r3, r5
 800b1aa:	e7f2      	b.n	800b192 <__sccl+0x2e>
 800b1ac:	7846      	ldrb	r6, [r0, #1]
 800b1ae:	2e5d      	cmp	r6, #93	; 0x5d
 800b1b0:	d0fa      	beq.n	800b1a8 <__sccl+0x44>
 800b1b2:	42b3      	cmp	r3, r6
 800b1b4:	dcf8      	bgt.n	800b1a8 <__sccl+0x44>
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	3002      	adds	r0, #2
 800b1ba:	3201      	adds	r2, #1
 800b1bc:	4296      	cmp	r6, r2
 800b1be:	54a1      	strb	r1, [r4, r2]
 800b1c0:	dcfb      	bgt.n	800b1ba <__sccl+0x56>
 800b1c2:	1af2      	subs	r2, r6, r3
 800b1c4:	3a01      	subs	r2, #1
 800b1c6:	42b3      	cmp	r3, r6
 800b1c8:	bfa8      	it	ge
 800b1ca:	2200      	movge	r2, #0
 800b1cc:	1c5d      	adds	r5, r3, #1
 800b1ce:	18ab      	adds	r3, r5, r2
 800b1d0:	e7e1      	b.n	800b196 <__sccl+0x32>
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	e7da      	b.n	800b18c <__sccl+0x28>

0800b1d6 <__submore>:
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b1de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d11b      	bne.n	800b21e <__submore+0x48>
 800b1e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b1ea:	f7fe fa39 	bl	8009660 <_malloc_r>
 800b1ee:	b918      	cbnz	r0, 800b1f8 <__submore+0x22>
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fc:	63a3      	str	r3, [r4, #56]	; 0x38
 800b1fe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b202:	6360      	str	r0, [r4, #52]	; 0x34
 800b204:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b208:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b20c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b210:	7043      	strb	r3, [r0, #1]
 800b212:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b216:	7003      	strb	r3, [r0, #0]
 800b218:	6020      	str	r0, [r4, #0]
 800b21a:	2000      	movs	r0, #0
 800b21c:	e7ea      	b.n	800b1f4 <__submore+0x1e>
 800b21e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b220:	0077      	lsls	r7, r6, #1
 800b222:	463a      	mov	r2, r7
 800b224:	f000 f8f6 	bl	800b414 <_realloc_r>
 800b228:	4605      	mov	r5, r0
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d0e0      	beq.n	800b1f0 <__submore+0x1a>
 800b22e:	eb00 0806 	add.w	r8, r0, r6
 800b232:	4601      	mov	r1, r0
 800b234:	4632      	mov	r2, r6
 800b236:	4640      	mov	r0, r8
 800b238:	f7fd fdb5 	bl	8008da6 <memcpy>
 800b23c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b240:	f8c4 8000 	str.w	r8, [r4]
 800b244:	e7e9      	b.n	800b21a <__submore+0x44>

0800b246 <__swbuf_r>:
 800b246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b248:	460e      	mov	r6, r1
 800b24a:	4614      	mov	r4, r2
 800b24c:	4605      	mov	r5, r0
 800b24e:	b118      	cbz	r0, 800b258 <__swbuf_r+0x12>
 800b250:	6a03      	ldr	r3, [r0, #32]
 800b252:	b90b      	cbnz	r3, 800b258 <__swbuf_r+0x12>
 800b254:	f7fc fdd2 	bl	8007dfc <__sinit>
 800b258:	69a3      	ldr	r3, [r4, #24]
 800b25a:	60a3      	str	r3, [r4, #8]
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	071a      	lsls	r2, r3, #28
 800b260:	d525      	bpl.n	800b2ae <__swbuf_r+0x68>
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	b31b      	cbz	r3, 800b2ae <__swbuf_r+0x68>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	6922      	ldr	r2, [r4, #16]
 800b26a:	b2f6      	uxtb	r6, r6
 800b26c:	1a98      	subs	r0, r3, r2
 800b26e:	6963      	ldr	r3, [r4, #20]
 800b270:	4637      	mov	r7, r6
 800b272:	4283      	cmp	r3, r0
 800b274:	dc04      	bgt.n	800b280 <__swbuf_r+0x3a>
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f7ff f839 	bl	800a2f0 <_fflush_r>
 800b27e:	b9e0      	cbnz	r0, 800b2ba <__swbuf_r+0x74>
 800b280:	68a3      	ldr	r3, [r4, #8]
 800b282:	3b01      	subs	r3, #1
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	701e      	strb	r6, [r3, #0]
 800b28e:	6962      	ldr	r2, [r4, #20]
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	429a      	cmp	r2, r3
 800b294:	d004      	beq.n	800b2a0 <__swbuf_r+0x5a>
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	07db      	lsls	r3, r3, #31
 800b29a:	d506      	bpl.n	800b2aa <__swbuf_r+0x64>
 800b29c:	2e0a      	cmp	r6, #10
 800b29e:	d104      	bne.n	800b2aa <__swbuf_r+0x64>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f7ff f824 	bl	800a2f0 <_fflush_r>
 800b2a8:	b938      	cbnz	r0, 800b2ba <__swbuf_r+0x74>
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f000 f805 	bl	800b2c0 <__swsetup_r>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d0d5      	beq.n	800b266 <__swbuf_r+0x20>
 800b2ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b2be:	e7f4      	b.n	800b2aa <__swbuf_r+0x64>

0800b2c0 <__swsetup_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4b2a      	ldr	r3, [pc, #168]	; (800b36c <__swsetup_r+0xac>)
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	b118      	cbz	r0, 800b2d4 <__swsetup_r+0x14>
 800b2cc:	6a03      	ldr	r3, [r0, #32]
 800b2ce:	b90b      	cbnz	r3, 800b2d4 <__swsetup_r+0x14>
 800b2d0:	f7fc fd94 	bl	8007dfc <__sinit>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2da:	0718      	lsls	r0, r3, #28
 800b2dc:	d422      	bmi.n	800b324 <__swsetup_r+0x64>
 800b2de:	06d9      	lsls	r1, r3, #27
 800b2e0:	d407      	bmi.n	800b2f2 <__swsetup_r+0x32>
 800b2e2:	2309      	movs	r3, #9
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	81a3      	strh	r3, [r4, #12]
 800b2f0:	e034      	b.n	800b35c <__swsetup_r+0x9c>
 800b2f2:	0758      	lsls	r0, r3, #29
 800b2f4:	d512      	bpl.n	800b31c <__swsetup_r+0x5c>
 800b2f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f8:	b141      	cbz	r1, 800b30c <__swsetup_r+0x4c>
 800b2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fe:	4299      	cmp	r1, r3
 800b300:	d002      	beq.n	800b308 <__swsetup_r+0x48>
 800b302:	4628      	mov	r0, r5
 800b304:	f7fd fd96 	bl	8008e34 <_free_r>
 800b308:	2300      	movs	r3, #0
 800b30a:	6363      	str	r3, [r4, #52]	; 0x34
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	2300      	movs	r3, #0
 800b316:	6063      	str	r3, [r4, #4]
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	f043 0308 	orr.w	r3, r3, #8
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	b94b      	cbnz	r3, 800b33c <__swsetup_r+0x7c>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b32e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b332:	d003      	beq.n	800b33c <__swsetup_r+0x7c>
 800b334:	4621      	mov	r1, r4
 800b336:	4628      	mov	r0, r5
 800b338:	f000 f8c0 	bl	800b4bc <__smakebuf_r>
 800b33c:	89a0      	ldrh	r0, [r4, #12]
 800b33e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b342:	f010 0301 	ands.w	r3, r0, #1
 800b346:	d00a      	beq.n	800b35e <__swsetup_r+0x9e>
 800b348:	2300      	movs	r3, #0
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	6963      	ldr	r3, [r4, #20]
 800b34e:	425b      	negs	r3, r3
 800b350:	61a3      	str	r3, [r4, #24]
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	b943      	cbnz	r3, 800b368 <__swsetup_r+0xa8>
 800b356:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b35a:	d1c4      	bne.n	800b2e6 <__swsetup_r+0x26>
 800b35c:	bd38      	pop	{r3, r4, r5, pc}
 800b35e:	0781      	lsls	r1, r0, #30
 800b360:	bf58      	it	pl
 800b362:	6963      	ldrpl	r3, [r4, #20]
 800b364:	60a3      	str	r3, [r4, #8]
 800b366:	e7f4      	b.n	800b352 <__swsetup_r+0x92>
 800b368:	2000      	movs	r0, #0
 800b36a:	e7f7      	b.n	800b35c <__swsetup_r+0x9c>
 800b36c:	20000534 	.word	0x20000534

0800b370 <_raise_r>:
 800b370:	291f      	cmp	r1, #31
 800b372:	b538      	push	{r3, r4, r5, lr}
 800b374:	4604      	mov	r4, r0
 800b376:	460d      	mov	r5, r1
 800b378:	d904      	bls.n	800b384 <_raise_r+0x14>
 800b37a:	2316      	movs	r3, #22
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	f04f 30ff 	mov.w	r0, #4294967295
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b386:	b112      	cbz	r2, 800b38e <_raise_r+0x1e>
 800b388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b38c:	b94b      	cbnz	r3, 800b3a2 <_raise_r+0x32>
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 f830 	bl	800b3f4 <_getpid_r>
 800b394:	462a      	mov	r2, r5
 800b396:	4601      	mov	r1, r0
 800b398:	4620      	mov	r0, r4
 800b39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b39e:	f000 b817 	b.w	800b3d0 <_kill_r>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d00a      	beq.n	800b3bc <_raise_r+0x4c>
 800b3a6:	1c59      	adds	r1, r3, #1
 800b3a8:	d103      	bne.n	800b3b2 <_raise_r+0x42>
 800b3aa:	2316      	movs	r3, #22
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	e7e7      	b.n	800b382 <_raise_r+0x12>
 800b3b2:	2400      	movs	r4, #0
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3ba:	4798      	blx	r3
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e7e0      	b.n	800b382 <_raise_r+0x12>

0800b3c0 <raise>:
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <raise+0xc>)
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	f7ff bfd3 	b.w	800b370 <_raise_r>
 800b3ca:	bf00      	nop
 800b3cc:	20000534 	.word	0x20000534

0800b3d0 <_kill_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4d06      	ldr	r5, [pc, #24]	; (800b3f0 <_kill_r+0x20>)
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	4611      	mov	r1, r2
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	f7fb fcea 	bl	8006db6 <_kill>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	d102      	bne.n	800b3ec <_kill_r+0x1c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	b103      	cbz	r3, 800b3ec <_kill_r+0x1c>
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000914 	.word	0x20000914

0800b3f4 <_getpid_r>:
 800b3f4:	f7fb bcd8 	b.w	8006da8 <_getpid>

0800b3f8 <memchr>:
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	b2c9      	uxtb	r1, r1
 800b3fe:	4402      	add	r2, r0
 800b400:	4293      	cmp	r3, r2
 800b402:	4618      	mov	r0, r3
 800b404:	d101      	bne.n	800b40a <memchr+0x12>
 800b406:	2000      	movs	r0, #0
 800b408:	e003      	b.n	800b412 <memchr+0x1a>
 800b40a:	7804      	ldrb	r4, [r0, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	428c      	cmp	r4, r1
 800b410:	d1f6      	bne.n	800b400 <memchr+0x8>
 800b412:	bd10      	pop	{r4, pc}

0800b414 <_realloc_r>:
 800b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b418:	4680      	mov	r8, r0
 800b41a:	4614      	mov	r4, r2
 800b41c:	460e      	mov	r6, r1
 800b41e:	b921      	cbnz	r1, 800b42a <_realloc_r+0x16>
 800b420:	4611      	mov	r1, r2
 800b422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	f7fe b91b 	b.w	8009660 <_malloc_r>
 800b42a:	b92a      	cbnz	r2, 800b438 <_realloc_r+0x24>
 800b42c:	f7fd fd02 	bl	8008e34 <_free_r>
 800b430:	4625      	mov	r5, r4
 800b432:	4628      	mov	r0, r5
 800b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b438:	f000 f89e 	bl	800b578 <_malloc_usable_size_r>
 800b43c:	4284      	cmp	r4, r0
 800b43e:	4607      	mov	r7, r0
 800b440:	d802      	bhi.n	800b448 <_realloc_r+0x34>
 800b442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b446:	d812      	bhi.n	800b46e <_realloc_r+0x5a>
 800b448:	4621      	mov	r1, r4
 800b44a:	4640      	mov	r0, r8
 800b44c:	f7fe f908 	bl	8009660 <_malloc_r>
 800b450:	4605      	mov	r5, r0
 800b452:	2800      	cmp	r0, #0
 800b454:	d0ed      	beq.n	800b432 <_realloc_r+0x1e>
 800b456:	42bc      	cmp	r4, r7
 800b458:	4622      	mov	r2, r4
 800b45a:	4631      	mov	r1, r6
 800b45c:	bf28      	it	cs
 800b45e:	463a      	movcs	r2, r7
 800b460:	f7fd fca1 	bl	8008da6 <memcpy>
 800b464:	4631      	mov	r1, r6
 800b466:	4640      	mov	r0, r8
 800b468:	f7fd fce4 	bl	8008e34 <_free_r>
 800b46c:	e7e1      	b.n	800b432 <_realloc_r+0x1e>
 800b46e:	4635      	mov	r5, r6
 800b470:	e7df      	b.n	800b432 <_realloc_r+0x1e>

0800b472 <__swhatbuf_r>:
 800b472:	b570      	push	{r4, r5, r6, lr}
 800b474:	460c      	mov	r4, r1
 800b476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47a:	4615      	mov	r5, r2
 800b47c:	2900      	cmp	r1, #0
 800b47e:	461e      	mov	r6, r3
 800b480:	b096      	sub	sp, #88	; 0x58
 800b482:	da0c      	bge.n	800b49e <__swhatbuf_r+0x2c>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	2100      	movs	r1, #0
 800b488:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b48c:	bf0c      	ite	eq
 800b48e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b492:	2340      	movne	r3, #64	; 0x40
 800b494:	2000      	movs	r0, #0
 800b496:	6031      	str	r1, [r6, #0]
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	b016      	add	sp, #88	; 0x58
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	466a      	mov	r2, sp
 800b4a0:	f000 f848 	bl	800b534 <_fstat_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	dbed      	blt.n	800b484 <__swhatbuf_r+0x12>
 800b4a8:	9901      	ldr	r1, [sp, #4]
 800b4aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b4ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b4b2:	4259      	negs	r1, r3
 800b4b4:	4159      	adcs	r1, r3
 800b4b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ba:	e7eb      	b.n	800b494 <__swhatbuf_r+0x22>

0800b4bc <__smakebuf_r>:
 800b4bc:	898b      	ldrh	r3, [r1, #12]
 800b4be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4c0:	079d      	lsls	r5, r3, #30
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	d507      	bpl.n	800b4d8 <__smakebuf_r+0x1c>
 800b4c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	6123      	str	r3, [r4, #16]
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	6163      	str	r3, [r4, #20]
 800b4d4:	b002      	add	sp, #8
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	466a      	mov	r2, sp
 800b4da:	ab01      	add	r3, sp, #4
 800b4dc:	f7ff ffc9 	bl	800b472 <__swhatbuf_r>
 800b4e0:	9900      	ldr	r1, [sp, #0]
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7fe f8bb 	bl	8009660 <_malloc_r>
 800b4ea:	b948      	cbnz	r0, 800b500 <__smakebuf_r+0x44>
 800b4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f0:	059a      	lsls	r2, r3, #22
 800b4f2:	d4ef      	bmi.n	800b4d4 <__smakebuf_r+0x18>
 800b4f4:	f023 0303 	bic.w	r3, r3, #3
 800b4f8:	f043 0302 	orr.w	r3, r3, #2
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	e7e3      	b.n	800b4c8 <__smakebuf_r+0xc>
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	6020      	str	r0, [r4, #0]
 800b504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	9b00      	ldr	r3, [sp, #0]
 800b50c:	6120      	str	r0, [r4, #16]
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	b15b      	cbz	r3, 800b52c <__smakebuf_r+0x70>
 800b514:	4630      	mov	r0, r6
 800b516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b51a:	f000 f81d 	bl	800b558 <_isatty_r>
 800b51e:	b128      	cbz	r0, 800b52c <__smakebuf_r+0x70>
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f023 0303 	bic.w	r3, r3, #3
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	431d      	orrs	r5, r3
 800b530:	81a5      	strh	r5, [r4, #12]
 800b532:	e7cf      	b.n	800b4d4 <__smakebuf_r+0x18>

0800b534 <_fstat_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	2300      	movs	r3, #0
 800b538:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_fstat_r+0x20>)
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	f7fb fc96 	bl	8006e72 <_fstat>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d102      	bne.n	800b550 <_fstat_r+0x1c>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	b103      	cbz	r3, 800b550 <_fstat_r+0x1c>
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	bd38      	pop	{r3, r4, r5, pc}
 800b552:	bf00      	nop
 800b554:	20000914 	.word	0x20000914

0800b558 <_isatty_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	2300      	movs	r3, #0
 800b55c:	4d05      	ldr	r5, [pc, #20]	; (800b574 <_isatty_r+0x1c>)
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7fb fc94 	bl	8006e90 <_isatty>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_isatty_r+0x1a>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_isatty_r+0x1a>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20000914 	.word	0x20000914

0800b578 <_malloc_usable_size_r>:
 800b578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b57c:	1f18      	subs	r0, r3, #4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bfbc      	itt	lt
 800b582:	580b      	ldrlt	r3, [r1, r0]
 800b584:	18c0      	addlt	r0, r0, r3
 800b586:	4770      	bx	lr

0800b588 <pow>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4614      	mov	r4, r2
 800b58e:	461d      	mov	r5, r3
 800b590:	4680      	mov	r8, r0
 800b592:	4689      	mov	r9, r1
 800b594:	f000 f8ac 	bl	800b6f0 <__ieee754_pow>
 800b598:	4622      	mov	r2, r4
 800b59a:	4606      	mov	r6, r0
 800b59c:	460f      	mov	r7, r1
 800b59e:	462b      	mov	r3, r5
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	f7f5 fa4c 	bl	8000a40 <__aeabi_dcmpun>
 800b5a8:	bbc8      	cbnz	r0, 800b61e <pow+0x96>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	f7f5 fa13 	bl	80009dc <__aeabi_dcmpeq>
 800b5b6:	b1b8      	cbz	r0, 800b5e8 <pow+0x60>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	4620      	mov	r0, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f7f5 fa0c 	bl	80009dc <__aeabi_dcmpeq>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d141      	bne.n	800b64c <pow+0xc4>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	f000 f844 	bl	800b658 <finite>
 800b5d0:	b328      	cbz	r0, 800b61e <pow+0x96>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 fa09 	bl	80009f0 <__aeabi_dcmplt>
 800b5de:	b1f0      	cbz	r0, 800b61e <pow+0x96>
 800b5e0:	f7fd fbaa 	bl	8008d38 <__errno>
 800b5e4:	2322      	movs	r3, #34	; 0x22
 800b5e6:	e019      	b.n	800b61c <pow+0x94>
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	f000 f834 	bl	800b658 <finite>
 800b5f0:	b9c8      	cbnz	r0, 800b626 <pow+0x9e>
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	f000 f82f 	bl	800b658 <finite>
 800b5fa:	b1a0      	cbz	r0, 800b626 <pow+0x9e>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f000 f82a 	bl	800b658 <finite>
 800b604:	b178      	cbz	r0, 800b626 <pow+0x9e>
 800b606:	4632      	mov	r2, r6
 800b608:	463b      	mov	r3, r7
 800b60a:	4630      	mov	r0, r6
 800b60c:	4639      	mov	r1, r7
 800b60e:	f7f5 fa17 	bl	8000a40 <__aeabi_dcmpun>
 800b612:	2800      	cmp	r0, #0
 800b614:	d0e4      	beq.n	800b5e0 <pow+0x58>
 800b616:	f7fd fb8f 	bl	8008d38 <__errno>
 800b61a:	2321      	movs	r3, #33	; 0x21
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	4630      	mov	r0, r6
 800b62c:	4639      	mov	r1, r7
 800b62e:	f7f5 f9d5 	bl	80009dc <__aeabi_dcmpeq>
 800b632:	2800      	cmp	r0, #0
 800b634:	d0f3      	beq.n	800b61e <pow+0x96>
 800b636:	4640      	mov	r0, r8
 800b638:	4649      	mov	r1, r9
 800b63a:	f000 f80d 	bl	800b658 <finite>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d0ed      	beq.n	800b61e <pow+0x96>
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f000 f807 	bl	800b658 <finite>
 800b64a:	e7c8      	b.n	800b5de <pow+0x56>
 800b64c:	2600      	movs	r6, #0
 800b64e:	4f01      	ldr	r7, [pc, #4]	; (800b654 <pow+0xcc>)
 800b650:	e7e5      	b.n	800b61e <pow+0x96>
 800b652:	bf00      	nop
 800b654:	3ff00000 	.word	0x3ff00000

0800b658 <finite>:
 800b658:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b65c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b660:	0fc0      	lsrs	r0, r0, #31
 800b662:	4770      	bx	lr

0800b664 <round>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b66a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800b66e:	2a13      	cmp	r2, #19
 800b670:	460b      	mov	r3, r1
 800b672:	4605      	mov	r5, r0
 800b674:	460c      	mov	r4, r1
 800b676:	dc18      	bgt.n	800b6aa <round+0x46>
 800b678:	2a00      	cmp	r2, #0
 800b67a:	da09      	bge.n	800b690 <round+0x2c>
 800b67c:	3201      	adds	r2, #1
 800b67e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b682:	d103      	bne.n	800b68c <round+0x28>
 800b684:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b68c:	2200      	movs	r2, #0
 800b68e:	e029      	b.n	800b6e4 <round+0x80>
 800b690:	4816      	ldr	r0, [pc, #88]	; (800b6ec <round+0x88>)
 800b692:	4110      	asrs	r0, r2
 800b694:	4001      	ands	r1, r0
 800b696:	4329      	orrs	r1, r5
 800b698:	d011      	beq.n	800b6be <round+0x5a>
 800b69a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b69e:	fa41 f202 	asr.w	r2, r1, r2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	ea23 0300 	bic.w	r3, r3, r0
 800b6a8:	e7f0      	b.n	800b68c <round+0x28>
 800b6aa:	2a33      	cmp	r2, #51	; 0x33
 800b6ac:	dd0a      	ble.n	800b6c4 <round+0x60>
 800b6ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b6b2:	d104      	bne.n	800b6be <round+0x5a>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	f7f4 fd73 	bl	80001a0 <__adddf3>
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	460c      	mov	r4, r1
 800b6be:	4628      	mov	r0, r5
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b6cc:	40f8      	lsrs	r0, r7
 800b6ce:	4228      	tst	r0, r5
 800b6d0:	d0f5      	beq.n	800b6be <round+0x5a>
 800b6d2:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	408a      	lsls	r2, r1
 800b6da:	1952      	adds	r2, r2, r5
 800b6dc:	bf28      	it	cs
 800b6de:	3301      	addcs	r3, #1
 800b6e0:	ea22 0200 	bic.w	r2, r2, r0
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	e7e7      	b.n	800b6ba <round+0x56>
 800b6ea:	bf00      	nop
 800b6ec:	000fffff 	.word	0x000fffff

0800b6f0 <__ieee754_pow>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	b093      	sub	sp, #76	; 0x4c
 800b6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6fa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b6fe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b702:	4689      	mov	r9, r1
 800b704:	ea56 0102 	orrs.w	r1, r6, r2
 800b708:	4680      	mov	r8, r0
 800b70a:	d111      	bne.n	800b730 <__ieee754_pow+0x40>
 800b70c:	1803      	adds	r3, r0, r0
 800b70e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b712:	4152      	adcs	r2, r2
 800b714:	4299      	cmp	r1, r3
 800b716:	4b82      	ldr	r3, [pc, #520]	; (800b920 <__ieee754_pow+0x230>)
 800b718:	4193      	sbcs	r3, r2
 800b71a:	f080 84ba 	bcs.w	800c092 <__ieee754_pow+0x9a2>
 800b71e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f4 fd3b 	bl	80001a0 <__adddf3>
 800b72a:	4683      	mov	fp, r0
 800b72c:	468c      	mov	ip, r1
 800b72e:	e06f      	b.n	800b810 <__ieee754_pow+0x120>
 800b730:	4b7c      	ldr	r3, [pc, #496]	; (800b924 <__ieee754_pow+0x234>)
 800b732:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b736:	429c      	cmp	r4, r3
 800b738:	464d      	mov	r5, r9
 800b73a:	4682      	mov	sl, r0
 800b73c:	dc06      	bgt.n	800b74c <__ieee754_pow+0x5c>
 800b73e:	d101      	bne.n	800b744 <__ieee754_pow+0x54>
 800b740:	2800      	cmp	r0, #0
 800b742:	d1ec      	bne.n	800b71e <__ieee754_pow+0x2e>
 800b744:	429e      	cmp	r6, r3
 800b746:	dc01      	bgt.n	800b74c <__ieee754_pow+0x5c>
 800b748:	d10f      	bne.n	800b76a <__ieee754_pow+0x7a>
 800b74a:	b172      	cbz	r2, 800b76a <__ieee754_pow+0x7a>
 800b74c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b750:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b754:	ea55 050a 	orrs.w	r5, r5, sl
 800b758:	d1e1      	bne.n	800b71e <__ieee754_pow+0x2e>
 800b75a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b75e:	18db      	adds	r3, r3, r3
 800b760:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b764:	4152      	adcs	r2, r2
 800b766:	429d      	cmp	r5, r3
 800b768:	e7d5      	b.n	800b716 <__ieee754_pow+0x26>
 800b76a:	2d00      	cmp	r5, #0
 800b76c:	da39      	bge.n	800b7e2 <__ieee754_pow+0xf2>
 800b76e:	4b6e      	ldr	r3, [pc, #440]	; (800b928 <__ieee754_pow+0x238>)
 800b770:	429e      	cmp	r6, r3
 800b772:	dc52      	bgt.n	800b81a <__ieee754_pow+0x12a>
 800b774:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b778:	429e      	cmp	r6, r3
 800b77a:	f340 849d 	ble.w	800c0b8 <__ieee754_pow+0x9c8>
 800b77e:	1533      	asrs	r3, r6, #20
 800b780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b784:	2b14      	cmp	r3, #20
 800b786:	dd0f      	ble.n	800b7a8 <__ieee754_pow+0xb8>
 800b788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b78c:	fa22 f103 	lsr.w	r1, r2, r3
 800b790:	fa01 f303 	lsl.w	r3, r1, r3
 800b794:	4293      	cmp	r3, r2
 800b796:	f040 848f 	bne.w	800c0b8 <__ieee754_pow+0x9c8>
 800b79a:	f001 0101 	and.w	r1, r1, #1
 800b79e:	f1c1 0302 	rsb	r3, r1, #2
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	b182      	cbz	r2, 800b7c8 <__ieee754_pow+0xd8>
 800b7a6:	e05d      	b.n	800b864 <__ieee754_pow+0x174>
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d159      	bne.n	800b860 <__ieee754_pow+0x170>
 800b7ac:	f1c3 0314 	rsb	r3, r3, #20
 800b7b0:	fa46 f103 	asr.w	r1, r6, r3
 800b7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	f040 847a 	bne.w	800c0b2 <__ieee754_pow+0x9c2>
 800b7be:	f001 0101 	and.w	r1, r1, #1
 800b7c2:	f1c1 0302 	rsb	r3, r1, #2
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	4b58      	ldr	r3, [pc, #352]	; (800b92c <__ieee754_pow+0x23c>)
 800b7ca:	429e      	cmp	r6, r3
 800b7cc:	d132      	bne.n	800b834 <__ieee754_pow+0x144>
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	f280 846b 	bge.w	800c0aa <__ieee754_pow+0x9ba>
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	2000      	movs	r0, #0
 800b7da:	4954      	ldr	r1, [pc, #336]	; (800b92c <__ieee754_pow+0x23c>)
 800b7dc:	f7f4 ffc0 	bl	8000760 <__aeabi_ddiv>
 800b7e0:	e7a3      	b.n	800b72a <__ieee754_pow+0x3a>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d13c      	bne.n	800b864 <__ieee754_pow+0x174>
 800b7ea:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <__ieee754_pow+0x234>)
 800b7ec:	429e      	cmp	r6, r3
 800b7ee:	d1eb      	bne.n	800b7c8 <__ieee754_pow+0xd8>
 800b7f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b7fc:	f000 8449 	beq.w	800c092 <__ieee754_pow+0x9a2>
 800b800:	4b4b      	ldr	r3, [pc, #300]	; (800b930 <__ieee754_pow+0x240>)
 800b802:	429c      	cmp	r4, r3
 800b804:	dd0b      	ble.n	800b81e <__ieee754_pow+0x12e>
 800b806:	2f00      	cmp	r7, #0
 800b808:	f2c0 8449 	blt.w	800c09e <__ieee754_pow+0x9ae>
 800b80c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b810:	4658      	mov	r0, fp
 800b812:	4661      	mov	r1, ip
 800b814:	b013      	add	sp, #76	; 0x4c
 800b816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81a:	2302      	movs	r3, #2
 800b81c:	e7e2      	b.n	800b7e4 <__ieee754_pow+0xf4>
 800b81e:	2f00      	cmp	r7, #0
 800b820:	f04f 0b00 	mov.w	fp, #0
 800b824:	f04f 0c00 	mov.w	ip, #0
 800b828:	daf2      	bge.n	800b810 <__ieee754_pow+0x120>
 800b82a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b82e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b832:	e7ed      	b.n	800b810 <__ieee754_pow+0x120>
 800b834:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b838:	d106      	bne.n	800b848 <__ieee754_pow+0x158>
 800b83a:	4642      	mov	r2, r8
 800b83c:	464b      	mov	r3, r9
 800b83e:	4640      	mov	r0, r8
 800b840:	4649      	mov	r1, r9
 800b842:	f7f4 fe63 	bl	800050c <__aeabi_dmul>
 800b846:	e770      	b.n	800b72a <__ieee754_pow+0x3a>
 800b848:	4b3a      	ldr	r3, [pc, #232]	; (800b934 <__ieee754_pow+0x244>)
 800b84a:	429f      	cmp	r7, r3
 800b84c:	d10a      	bne.n	800b864 <__ieee754_pow+0x174>
 800b84e:	2d00      	cmp	r5, #0
 800b850:	db08      	blt.n	800b864 <__ieee754_pow+0x174>
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	b013      	add	sp, #76	; 0x4c
 800b858:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	f000 bd0a 	b.w	800c274 <__ieee754_sqrt>
 800b860:	2300      	movs	r3, #0
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f000 fc58 	bl	800c11c <fabs>
 800b86c:	4683      	mov	fp, r0
 800b86e:	468c      	mov	ip, r1
 800b870:	f1ba 0f00 	cmp.w	sl, #0
 800b874:	d128      	bne.n	800b8c8 <__ieee754_pow+0x1d8>
 800b876:	b124      	cbz	r4, 800b882 <__ieee754_pow+0x192>
 800b878:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <__ieee754_pow+0x23c>)
 800b87a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b87e:	429a      	cmp	r2, r3
 800b880:	d122      	bne.n	800b8c8 <__ieee754_pow+0x1d8>
 800b882:	2f00      	cmp	r7, #0
 800b884:	da07      	bge.n	800b896 <__ieee754_pow+0x1a6>
 800b886:	465a      	mov	r2, fp
 800b888:	4663      	mov	r3, ip
 800b88a:	2000      	movs	r0, #0
 800b88c:	4927      	ldr	r1, [pc, #156]	; (800b92c <__ieee754_pow+0x23c>)
 800b88e:	f7f4 ff67 	bl	8000760 <__aeabi_ddiv>
 800b892:	4683      	mov	fp, r0
 800b894:	468c      	mov	ip, r1
 800b896:	2d00      	cmp	r5, #0
 800b898:	daba      	bge.n	800b810 <__ieee754_pow+0x120>
 800b89a:	9b00      	ldr	r3, [sp, #0]
 800b89c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8a4:	431c      	orrs	r4, r3
 800b8a6:	d108      	bne.n	800b8ba <__ieee754_pow+0x1ca>
 800b8a8:	465a      	mov	r2, fp
 800b8aa:	4663      	mov	r3, ip
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	4661      	mov	r1, ip
 800b8b0:	f7f4 fc74 	bl	800019c <__aeabi_dsub>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	e790      	b.n	800b7dc <__ieee754_pow+0xec>
 800b8ba:	9b00      	ldr	r3, [sp, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d1a7      	bne.n	800b810 <__ieee754_pow+0x120>
 800b8c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b8c4:	469c      	mov	ip, r3
 800b8c6:	e7a3      	b.n	800b810 <__ieee754_pow+0x120>
 800b8c8:	0feb      	lsrs	r3, r5, #31
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	930c      	str	r3, [sp, #48]	; 0x30
 800b8ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	d104      	bne.n	800b8e0 <__ieee754_pow+0x1f0>
 800b8d6:	4642      	mov	r2, r8
 800b8d8:	464b      	mov	r3, r9
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4649      	mov	r1, r9
 800b8de:	e7e7      	b.n	800b8b0 <__ieee754_pow+0x1c0>
 800b8e0:	4b15      	ldr	r3, [pc, #84]	; (800b938 <__ieee754_pow+0x248>)
 800b8e2:	429e      	cmp	r6, r3
 800b8e4:	f340 80f6 	ble.w	800bad4 <__ieee754_pow+0x3e4>
 800b8e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8ec:	429e      	cmp	r6, r3
 800b8ee:	4b10      	ldr	r3, [pc, #64]	; (800b930 <__ieee754_pow+0x240>)
 800b8f0:	dd09      	ble.n	800b906 <__ieee754_pow+0x216>
 800b8f2:	429c      	cmp	r4, r3
 800b8f4:	dc0c      	bgt.n	800b910 <__ieee754_pow+0x220>
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	da0c      	bge.n	800b914 <__ieee754_pow+0x224>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	b013      	add	sp, #76	; 0x4c
 800b8fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b902:	f000 bcb2 	b.w	800c26a <__math_oflow>
 800b906:	429c      	cmp	r4, r3
 800b908:	dbf5      	blt.n	800b8f6 <__ieee754_pow+0x206>
 800b90a:	4b08      	ldr	r3, [pc, #32]	; (800b92c <__ieee754_pow+0x23c>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	dd15      	ble.n	800b93c <__ieee754_pow+0x24c>
 800b910:	2f00      	cmp	r7, #0
 800b912:	dcf2      	bgt.n	800b8fa <__ieee754_pow+0x20a>
 800b914:	2000      	movs	r0, #0
 800b916:	b013      	add	sp, #76	; 0x4c
 800b918:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	f000 bca0 	b.w	800c260 <__math_uflow>
 800b920:	fff00000 	.word	0xfff00000
 800b924:	7ff00000 	.word	0x7ff00000
 800b928:	433fffff 	.word	0x433fffff
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	3fefffff 	.word	0x3fefffff
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	41e00000 	.word	0x41e00000
 800b93c:	4661      	mov	r1, ip
 800b93e:	2200      	movs	r2, #0
 800b940:	4658      	mov	r0, fp
 800b942:	4b5f      	ldr	r3, [pc, #380]	; (800bac0 <__ieee754_pow+0x3d0>)
 800b944:	f7f4 fc2a 	bl	800019c <__aeabi_dsub>
 800b948:	a355      	add	r3, pc, #340	; (adr r3, 800baa0 <__ieee754_pow+0x3b0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	4604      	mov	r4, r0
 800b950:	460d      	mov	r5, r1
 800b952:	f7f4 fddb 	bl	800050c <__aeabi_dmul>
 800b956:	a354      	add	r3, pc, #336	; (adr r3, 800baa8 <__ieee754_pow+0x3b8>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	4606      	mov	r6, r0
 800b95e:	460f      	mov	r7, r1
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fdd2 	bl	800050c <__aeabi_dmul>
 800b968:	2200      	movs	r2, #0
 800b96a:	4682      	mov	sl, r0
 800b96c:	468b      	mov	fp, r1
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	4b54      	ldr	r3, [pc, #336]	; (800bac4 <__ieee754_pow+0x3d4>)
 800b974:	f7f4 fdca 	bl	800050c <__aeabi_dmul>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	a14c      	add	r1, pc, #304	; (adr r1, 800bab0 <__ieee754_pow+0x3c0>)
 800b97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b982:	f7f4 fc0b 	bl	800019c <__aeabi_dsub>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	f7f4 fdbf 	bl	800050c <__aeabi_dmul>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	2000      	movs	r0, #0
 800b994:	494c      	ldr	r1, [pc, #304]	; (800bac8 <__ieee754_pow+0x3d8>)
 800b996:	f7f4 fc01 	bl	800019c <__aeabi_dsub>
 800b99a:	4622      	mov	r2, r4
 800b99c:	462b      	mov	r3, r5
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f7f4 fdb1 	bl	800050c <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	f7f4 fdab 	bl	800050c <__aeabi_dmul>
 800b9b6:	a340      	add	r3, pc, #256	; (adr r3, 800bab8 <__ieee754_pow+0x3c8>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f7f4 fda6 	bl	800050c <__aeabi_dmul>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	4659      	mov	r1, fp
 800b9c8:	f7f4 fbe8 	bl	800019c <__aeabi_dsub>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	460d      	mov	r5, r1
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f4 fbe2 	bl	80001a0 <__adddf3>
 800b9dc:	2000      	movs	r0, #0
 800b9de:	4632      	mov	r2, r6
 800b9e0:	463b      	mov	r3, r7
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	468b      	mov	fp, r1
 800b9e6:	f7f4 fbd9 	bl	800019c <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7f4 fbd3 	bl	800019c <__aeabi_dsub>
 800b9f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f04f 0600 	mov.w	r6, #0
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	bf0c      	ite	eq
 800ba0c:	4b2f      	ldreq	r3, [pc, #188]	; (800bacc <__ieee754_pow+0x3dc>)
 800ba0e:	4b2c      	ldrne	r3, [pc, #176]	; (800bac0 <__ieee754_pow+0x3d0>)
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba18:	e9cd 2300 	strd	r2, r3, [sp]
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	f7f4 fbbc 	bl	800019c <__aeabi_dsub>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	f7f4 fd70 	bl	800050c <__aeabi_dmul>
 800ba2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba30:	4680      	mov	r8, r0
 800ba32:	4689      	mov	r9, r1
 800ba34:	4620      	mov	r0, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	f7f4 fd68 	bl	800050c <__aeabi_dmul>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4640      	mov	r0, r8
 800ba42:	4649      	mov	r1, r9
 800ba44:	f7f4 fbac 	bl	80001a0 <__adddf3>
 800ba48:	4632      	mov	r2, r6
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	f7f4 fd5a 	bl	800050c <__aeabi_dmul>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4649      	mov	r1, r9
 800ba62:	4640      	mov	r0, r8
 800ba64:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ba68:	f7f4 fb9a 	bl	80001a0 <__adddf3>
 800ba6c:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <__ieee754_pow+0x3e0>)
 800ba6e:	4682      	mov	sl, r0
 800ba70:	4299      	cmp	r1, r3
 800ba72:	460f      	mov	r7, r1
 800ba74:	460e      	mov	r6, r1
 800ba76:	f340 82e7 	ble.w	800c048 <__ieee754_pow+0x958>
 800ba7a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba7e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba82:	4303      	orrs	r3, r0
 800ba84:	f000 81e2 	beq.w	800be4c <__ieee754_pow+0x75c>
 800ba88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f7f4 ffae 	bl	80009f0 <__aeabi_dcmplt>
 800ba94:	3800      	subs	r0, #0
 800ba96:	bf18      	it	ne
 800ba98:	2001      	movne	r0, #1
 800ba9a:	e72f      	b.n	800b8fc <__ieee754_pow+0x20c>
 800ba9c:	f3af 8000 	nop.w
 800baa0:	60000000 	.word	0x60000000
 800baa4:	3ff71547 	.word	0x3ff71547
 800baa8:	f85ddf44 	.word	0xf85ddf44
 800baac:	3e54ae0b 	.word	0x3e54ae0b
 800bab0:	55555555 	.word	0x55555555
 800bab4:	3fd55555 	.word	0x3fd55555
 800bab8:	652b82fe 	.word	0x652b82fe
 800babc:	3ff71547 	.word	0x3ff71547
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	3fd00000 	.word	0x3fd00000
 800bac8:	3fe00000 	.word	0x3fe00000
 800bacc:	bff00000 	.word	0xbff00000
 800bad0:	408fffff 	.word	0x408fffff
 800bad4:	4bd4      	ldr	r3, [pc, #848]	; (800be28 <__ieee754_pow+0x738>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	402b      	ands	r3, r5
 800bada:	b943      	cbnz	r3, 800baee <__ieee754_pow+0x3fe>
 800badc:	4658      	mov	r0, fp
 800bade:	4661      	mov	r1, ip
 800bae0:	4bd2      	ldr	r3, [pc, #840]	; (800be2c <__ieee754_pow+0x73c>)
 800bae2:	f7f4 fd13 	bl	800050c <__aeabi_dmul>
 800bae6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800baea:	4683      	mov	fp, r0
 800baec:	460c      	mov	r4, r1
 800baee:	1523      	asrs	r3, r4, #20
 800baf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baf4:	4413      	add	r3, r2
 800baf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf8:	4bcd      	ldr	r3, [pc, #820]	; (800be30 <__ieee754_pow+0x740>)
 800bafa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bafe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb02:	429c      	cmp	r4, r3
 800bb04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb08:	dd08      	ble.n	800bb1c <__ieee754_pow+0x42c>
 800bb0a:	4bca      	ldr	r3, [pc, #808]	; (800be34 <__ieee754_pow+0x744>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	f340 8164 	ble.w	800bdda <__ieee754_pow+0x6ea>
 800bb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb14:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb18:	3301      	adds	r3, #1
 800bb1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	00f3      	lsls	r3, r6, #3
 800bb20:	930d      	str	r3, [sp, #52]	; 0x34
 800bb22:	4bc5      	ldr	r3, [pc, #788]	; (800be38 <__ieee754_pow+0x748>)
 800bb24:	4658      	mov	r0, fp
 800bb26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb2e:	4629      	mov	r1, r5
 800bb30:	461a      	mov	r2, r3
 800bb32:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bb36:	4623      	mov	r3, r4
 800bb38:	f7f4 fb30 	bl	800019c <__aeabi_dsub>
 800bb3c:	46da      	mov	sl, fp
 800bb3e:	462b      	mov	r3, r5
 800bb40:	4652      	mov	r2, sl
 800bb42:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb4a:	f7f4 fb29 	bl	80001a0 <__adddf3>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	2000      	movs	r0, #0
 800bb54:	49b9      	ldr	r1, [pc, #740]	; (800be3c <__ieee754_pow+0x74c>)
 800bb56:	f7f4 fe03 	bl	8000760 <__aeabi_ddiv>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb66:	f7f4 fcd1 	bl	800050c <__aeabi_dmul>
 800bb6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb6e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bb72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb76:	2300      	movs	r3, #0
 800bb78:	2200      	movs	r2, #0
 800bb7a:	46ab      	mov	fp, r5
 800bb7c:	106d      	asrs	r5, r5, #1
 800bb7e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bb8c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	4614      	mov	r4, r2
 800bb96:	461d      	mov	r5, r3
 800bb98:	f7f4 fcb8 	bl	800050c <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bba4:	f7f4 fafa 	bl	800019c <__aeabi_dsub>
 800bba8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbac:	4606      	mov	r6, r0
 800bbae:	460f      	mov	r7, r1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 faf2 	bl	800019c <__aeabi_dsub>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	4659      	mov	r1, fp
 800bbc0:	f7f4 faec 	bl	800019c <__aeabi_dsub>
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	f7f4 fca0 	bl	800050c <__aeabi_dmul>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fae2 	bl	800019c <__aeabi_dsub>
 800bbd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbdc:	f7f4 fc96 	bl	800050c <__aeabi_dmul>
 800bbe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	468b      	mov	fp, r1
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4619      	mov	r1, r3
 800bbec:	f7f4 fc8e 	bl	800050c <__aeabi_dmul>
 800bbf0:	a37b      	add	r3, pc, #492	; (adr r3, 800bde0 <__ieee754_pow+0x6f0>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f7f4 fc87 	bl	800050c <__aeabi_dmul>
 800bbfe:	a37a      	add	r3, pc, #488	; (adr r3, 800bde8 <__ieee754_pow+0x6f8>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 facc 	bl	80001a0 <__adddf3>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	f7f4 fc7e 	bl	800050c <__aeabi_dmul>
 800bc10:	a377      	add	r3, pc, #476	; (adr r3, 800bdf0 <__ieee754_pow+0x700>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fac3 	bl	80001a0 <__adddf3>
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	f7f4 fc75 	bl	800050c <__aeabi_dmul>
 800bc22:	a375      	add	r3, pc, #468	; (adr r3, 800bdf8 <__ieee754_pow+0x708>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 faba 	bl	80001a0 <__adddf3>
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	462b      	mov	r3, r5
 800bc30:	f7f4 fc6c 	bl	800050c <__aeabi_dmul>
 800bc34:	a372      	add	r3, pc, #456	; (adr r3, 800be00 <__ieee754_pow+0x710>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 fab1 	bl	80001a0 <__adddf3>
 800bc3e:	4622      	mov	r2, r4
 800bc40:	462b      	mov	r3, r5
 800bc42:	f7f4 fc63 	bl	800050c <__aeabi_dmul>
 800bc46:	a370      	add	r3, pc, #448	; (adr r3, 800be08 <__ieee754_pow+0x718>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 faa8 	bl	80001a0 <__adddf3>
 800bc50:	4622      	mov	r2, r4
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	462b      	mov	r3, r5
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fc56 	bl	800050c <__aeabi_dmul>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4630      	mov	r0, r6
 800bc66:	4639      	mov	r1, r7
 800bc68:	f7f4 fc50 	bl	800050c <__aeabi_dmul>
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc74:	4642      	mov	r2, r8
 800bc76:	464b      	mov	r3, r9
 800bc78:	f7f4 fa92 	bl	80001a0 <__adddf3>
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	465b      	mov	r3, fp
 800bc80:	f7f4 fc44 	bl	800050c <__aeabi_dmul>
 800bc84:	4622      	mov	r2, r4
 800bc86:	462b      	mov	r3, r5
 800bc88:	f7f4 fa8a 	bl	80001a0 <__adddf3>
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	4606      	mov	r6, r0
 800bc90:	460f      	mov	r7, r1
 800bc92:	464b      	mov	r3, r9
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 fc38 	bl	800050c <__aeabi_dmul>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bca4:	2200      	movs	r2, #0
 800bca6:	4b66      	ldr	r3, [pc, #408]	; (800be40 <__ieee754_pow+0x750>)
 800bca8:	f7f4 fa7a 	bl	80001a0 <__adddf3>
 800bcac:	4632      	mov	r2, r6
 800bcae:	463b      	mov	r3, r7
 800bcb0:	f7f4 fa76 	bl	80001a0 <__adddf3>
 800bcb4:	2400      	movs	r4, #0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	4622      	mov	r2, r4
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 fc24 	bl	800050c <__aeabi_dmul>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	4b5c      	ldr	r3, [pc, #368]	; (800be40 <__ieee754_pow+0x750>)
 800bcd0:	f7f4 fa64 	bl	800019c <__aeabi_dsub>
 800bcd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcd8:	f7f4 fa60 	bl	800019c <__aeabi_dsub>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fa5a 	bl	800019c <__aeabi_dsub>
 800bce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcec:	f7f4 fc0e 	bl	800050c <__aeabi_dmul>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	f7f4 fc06 	bl	800050c <__aeabi_dmul>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4630      	mov	r0, r6
 800bd06:	4639      	mov	r1, r7
 800bd08:	f7f4 fa4a 	bl	80001a0 <__adddf3>
 800bd0c:	2400      	movs	r4, #0
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fa41 	bl	80001a0 <__adddf3>
 800bd1e:	a33c      	add	r3, pc, #240	; (adr r3, 800be10 <__ieee754_pow+0x720>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4620      	mov	r0, r4
 800bd26:	460d      	mov	r5, r1
 800bd28:	f7f4 fbf0 	bl	800050c <__aeabi_dmul>
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	464b      	mov	r3, r9
 800bd30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd34:	4620      	mov	r0, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	f7f4 fa30 	bl	800019c <__aeabi_dsub>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fa2a 	bl	800019c <__aeabi_dsub>
 800bd48:	a333      	add	r3, pc, #204	; (adr r3, 800be18 <__ieee754_pow+0x728>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fbdd 	bl	800050c <__aeabi_dmul>
 800bd52:	a333      	add	r3, pc, #204	; (adr r3, 800be20 <__ieee754_pow+0x730>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fbd4 	bl	800050c <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fa18 	bl	80001a0 <__adddf3>
 800bd70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd72:	4b34      	ldr	r3, [pc, #208]	; (800be44 <__ieee754_pow+0x754>)
 800bd74:	4413      	add	r3, r2
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fa11 	bl	80001a0 <__adddf3>
 800bd7e:	4680      	mov	r8, r0
 800bd80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bd82:	4689      	mov	r9, r1
 800bd84:	f7f4 fb58 	bl	8000438 <__aeabi_i2d>
 800bd88:	4604      	mov	r4, r0
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd92:	4b2d      	ldr	r3, [pc, #180]	; (800be48 <__ieee754_pow+0x758>)
 800bd94:	4413      	add	r3, r2
 800bd96:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	f7f4 f9ff 	bl	80001a0 <__adddf3>
 800bda2:	4632      	mov	r2, r6
 800bda4:	463b      	mov	r3, r7
 800bda6:	f7f4 f9fb 	bl	80001a0 <__adddf3>
 800bdaa:	4622      	mov	r2, r4
 800bdac:	462b      	mov	r3, r5
 800bdae:	f7f4 f9f7 	bl	80001a0 <__adddf3>
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	4682      	mov	sl, r0
 800bdba:	468b      	mov	fp, r1
 800bdbc:	f7f4 f9ee 	bl	800019c <__aeabi_dsub>
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	f7f4 f9ea 	bl	800019c <__aeabi_dsub>
 800bdc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdcc:	f7f4 f9e6 	bl	800019c <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	e60b      	b.n	800b9f2 <__ieee754_pow+0x302>
 800bdda:	2601      	movs	r6, #1
 800bddc:	e69f      	b.n	800bb1e <__ieee754_pow+0x42e>
 800bdde:	bf00      	nop
 800bde0:	4a454eef 	.word	0x4a454eef
 800bde4:	3fca7e28 	.word	0x3fca7e28
 800bde8:	93c9db65 	.word	0x93c9db65
 800bdec:	3fcd864a 	.word	0x3fcd864a
 800bdf0:	a91d4101 	.word	0xa91d4101
 800bdf4:	3fd17460 	.word	0x3fd17460
 800bdf8:	518f264d 	.word	0x518f264d
 800bdfc:	3fd55555 	.word	0x3fd55555
 800be00:	db6fabff 	.word	0xdb6fabff
 800be04:	3fdb6db6 	.word	0x3fdb6db6
 800be08:	33333303 	.word	0x33333303
 800be0c:	3fe33333 	.word	0x3fe33333
 800be10:	e0000000 	.word	0xe0000000
 800be14:	3feec709 	.word	0x3feec709
 800be18:	dc3a03fd 	.word	0xdc3a03fd
 800be1c:	3feec709 	.word	0x3feec709
 800be20:	145b01f5 	.word	0x145b01f5
 800be24:	be3e2fe0 	.word	0xbe3e2fe0
 800be28:	7ff00000 	.word	0x7ff00000
 800be2c:	43400000 	.word	0x43400000
 800be30:	0003988e 	.word	0x0003988e
 800be34:	000bb679 	.word	0x000bb679
 800be38:	0800cab8 	.word	0x0800cab8
 800be3c:	3ff00000 	.word	0x3ff00000
 800be40:	40080000 	.word	0x40080000
 800be44:	0800cad8 	.word	0x0800cad8
 800be48:	0800cac8 	.word	0x0800cac8
 800be4c:	a39c      	add	r3, pc, #624	; (adr r3, 800c0c0 <__ieee754_pow+0x9d0>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4640      	mov	r0, r8
 800be54:	4649      	mov	r1, r9
 800be56:	f7f4 f9a3 	bl	80001a0 <__adddf3>
 800be5a:	4622      	mov	r2, r4
 800be5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be60:	462b      	mov	r3, r5
 800be62:	4650      	mov	r0, sl
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 f999 	bl	800019c <__aeabi_dsub>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be72:	f7f4 fddb 	bl	8000a2c <__aeabi_dcmpgt>
 800be76:	2800      	cmp	r0, #0
 800be78:	f47f ae06 	bne.w	800ba88 <__ieee754_pow+0x398>
 800be7c:	4aa2      	ldr	r2, [pc, #648]	; (800c108 <__ieee754_pow+0xa18>)
 800be7e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800be82:	4293      	cmp	r3, r2
 800be84:	f340 8100 	ble.w	800c088 <__ieee754_pow+0x998>
 800be88:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be8c:	151b      	asrs	r3, r3, #20
 800be8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be92:	fa4a fa03 	asr.w	sl, sl, r3
 800be96:	44b2      	add	sl, r6
 800be98:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800be9c:	489b      	ldr	r0, [pc, #620]	; (800c10c <__ieee754_pow+0xa1c>)
 800be9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bea2:	4108      	asrs	r0, r1
 800bea4:	ea00 030a 	and.w	r3, r0, sl
 800bea8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800beac:	f1c1 0114 	rsb	r1, r1, #20
 800beb0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800beb4:	fa4a fa01 	asr.w	sl, sl, r1
 800beb8:	2e00      	cmp	r6, #0
 800beba:	f04f 0200 	mov.w	r2, #0
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	bfb8      	it	lt
 800bec4:	f1ca 0a00 	rsblt	sl, sl, #0
 800bec8:	f7f4 f968 	bl	800019c <__aeabi_dsub>
 800becc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bed4:	2400      	movs	r4, #0
 800bed6:	4642      	mov	r2, r8
 800bed8:	464b      	mov	r3, r9
 800beda:	f7f4 f961 	bl	80001a0 <__adddf3>
 800bede:	a37a      	add	r3, pc, #488	; (adr r3, 800c0c8 <__ieee754_pow+0x9d8>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	4620      	mov	r0, r4
 800bee6:	460d      	mov	r5, r1
 800bee8:	f7f4 fb10 	bl	800050c <__aeabi_dmul>
 800beec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bef0:	4606      	mov	r6, r0
 800bef2:	460f      	mov	r7, r1
 800bef4:	4620      	mov	r0, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	f7f4 f950 	bl	800019c <__aeabi_dsub>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4640      	mov	r0, r8
 800bf02:	4649      	mov	r1, r9
 800bf04:	f7f4 f94a 	bl	800019c <__aeabi_dsub>
 800bf08:	a371      	add	r3, pc, #452	; (adr r3, 800c0d0 <__ieee754_pow+0x9e0>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	f7f4 fafd 	bl	800050c <__aeabi_dmul>
 800bf12:	a371      	add	r3, pc, #452	; (adr r3, 800c0d8 <__ieee754_pow+0x9e8>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	4680      	mov	r8, r0
 800bf1a:	4689      	mov	r9, r1
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 faf4 	bl	800050c <__aeabi_dmul>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	f7f4 f938 	bl	80001a0 <__adddf3>
 800bf30:	4604      	mov	r4, r0
 800bf32:	460d      	mov	r5, r1
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4630      	mov	r0, r6
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 f930 	bl	80001a0 <__adddf3>
 800bf40:	4632      	mov	r2, r6
 800bf42:	463b      	mov	r3, r7
 800bf44:	4680      	mov	r8, r0
 800bf46:	4689      	mov	r9, r1
 800bf48:	f7f4 f928 	bl	800019c <__aeabi_dsub>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4620      	mov	r0, r4
 800bf52:	4629      	mov	r1, r5
 800bf54:	f7f4 f922 	bl	800019c <__aeabi_dsub>
 800bf58:	4642      	mov	r2, r8
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460f      	mov	r7, r1
 800bf5e:	464b      	mov	r3, r9
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 fad2 	bl	800050c <__aeabi_dmul>
 800bf68:	a35d      	add	r3, pc, #372	; (adr r3, 800c0e0 <__ieee754_pow+0x9f0>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	4604      	mov	r4, r0
 800bf70:	460d      	mov	r5, r1
 800bf72:	f7f4 facb 	bl	800050c <__aeabi_dmul>
 800bf76:	a35c      	add	r3, pc, #368	; (adr r3, 800c0e8 <__ieee754_pow+0x9f8>)
 800bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7c:	f7f4 f90e 	bl	800019c <__aeabi_dsub>
 800bf80:	4622      	mov	r2, r4
 800bf82:	462b      	mov	r3, r5
 800bf84:	f7f4 fac2 	bl	800050c <__aeabi_dmul>
 800bf88:	a359      	add	r3, pc, #356	; (adr r3, 800c0f0 <__ieee754_pow+0xa00>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 f907 	bl	80001a0 <__adddf3>
 800bf92:	4622      	mov	r2, r4
 800bf94:	462b      	mov	r3, r5
 800bf96:	f7f4 fab9 	bl	800050c <__aeabi_dmul>
 800bf9a:	a357      	add	r3, pc, #348	; (adr r3, 800c0f8 <__ieee754_pow+0xa08>)
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f7f4 f8fc 	bl	800019c <__aeabi_dsub>
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	462b      	mov	r3, r5
 800bfa8:	f7f4 fab0 	bl	800050c <__aeabi_dmul>
 800bfac:	a354      	add	r3, pc, #336	; (adr r3, 800c100 <__ieee754_pow+0xa10>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7f4 f8f5 	bl	80001a0 <__adddf3>
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	462b      	mov	r3, r5
 800bfba:	f7f4 faa7 	bl	800050c <__aeabi_dmul>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	f7f4 f8e9 	bl	800019c <__aeabi_dsub>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	460d      	mov	r5, r1
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	f7f4 fa99 	bl	800050c <__aeabi_dmul>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 f8d8 	bl	800019c <__aeabi_dsub>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff4:	f7f4 fbb4 	bl	8000760 <__aeabi_ddiv>
 800bff8:	4632      	mov	r2, r6
 800bffa:	4604      	mov	r4, r0
 800bffc:	460d      	mov	r5, r1
 800bffe:	463b      	mov	r3, r7
 800c000:	4640      	mov	r0, r8
 800c002:	4649      	mov	r1, r9
 800c004:	f7f4 fa82 	bl	800050c <__aeabi_dmul>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	f7f4 f8c8 	bl	80001a0 <__adddf3>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	f7f4 f8c0 	bl	800019c <__aeabi_dsub>
 800c01c:	4642      	mov	r2, r8
 800c01e:	464b      	mov	r3, r9
 800c020:	f7f4 f8bc 	bl	800019c <__aeabi_dsub>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	2000      	movs	r0, #0
 800c02a:	4939      	ldr	r1, [pc, #228]	; (800c110 <__ieee754_pow+0xa20>)
 800c02c:	f7f4 f8b6 	bl	800019c <__aeabi_dsub>
 800c030:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c034:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c038:	da29      	bge.n	800c08e <__ieee754_pow+0x99e>
 800c03a:	4652      	mov	r2, sl
 800c03c:	f000 f874 	bl	800c128 <scalbn>
 800c040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c044:	f7ff bbfd 	b.w	800b842 <__ieee754_pow+0x152>
 800c048:	4b32      	ldr	r3, [pc, #200]	; (800c114 <__ieee754_pow+0xa24>)
 800c04a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c04e:	429f      	cmp	r7, r3
 800c050:	f77f af14 	ble.w	800be7c <__ieee754_pow+0x78c>
 800c054:	4b30      	ldr	r3, [pc, #192]	; (800c118 <__ieee754_pow+0xa28>)
 800c056:	440b      	add	r3, r1
 800c058:	4303      	orrs	r3, r0
 800c05a:	d009      	beq.n	800c070 <__ieee754_pow+0x980>
 800c05c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c060:	2200      	movs	r2, #0
 800c062:	2300      	movs	r3, #0
 800c064:	f7f4 fcc4 	bl	80009f0 <__aeabi_dcmplt>
 800c068:	3800      	subs	r0, #0
 800c06a:	bf18      	it	ne
 800c06c:	2001      	movne	r0, #1
 800c06e:	e452      	b.n	800b916 <__ieee754_pow+0x226>
 800c070:	4622      	mov	r2, r4
 800c072:	462b      	mov	r3, r5
 800c074:	f7f4 f892 	bl	800019c <__aeabi_dsub>
 800c078:	4642      	mov	r2, r8
 800c07a:	464b      	mov	r3, r9
 800c07c:	f7f4 fccc 	bl	8000a18 <__aeabi_dcmpge>
 800c080:	2800      	cmp	r0, #0
 800c082:	f43f aefb 	beq.w	800be7c <__ieee754_pow+0x78c>
 800c086:	e7e9      	b.n	800c05c <__ieee754_pow+0x96c>
 800c088:	f04f 0a00 	mov.w	sl, #0
 800c08c:	e720      	b.n	800bed0 <__ieee754_pow+0x7e0>
 800c08e:	4621      	mov	r1, r4
 800c090:	e7d6      	b.n	800c040 <__ieee754_pow+0x950>
 800c092:	f04f 0b00 	mov.w	fp, #0
 800c096:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c110 <__ieee754_pow+0xa20>
 800c09a:	f7ff bbb9 	b.w	800b810 <__ieee754_pow+0x120>
 800c09e:	f04f 0b00 	mov.w	fp, #0
 800c0a2:	f04f 0c00 	mov.w	ip, #0
 800c0a6:	f7ff bbb3 	b.w	800b810 <__ieee754_pow+0x120>
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7ff bb3c 	b.w	800b72a <__ieee754_pow+0x3a>
 800c0b2:	9200      	str	r2, [sp, #0]
 800c0b4:	f7ff bb88 	b.w	800b7c8 <__ieee754_pow+0xd8>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f7ff bb72 	b.w	800b7a2 <__ieee754_pow+0xb2>
 800c0be:	bf00      	nop
 800c0c0:	652b82fe 	.word	0x652b82fe
 800c0c4:	3c971547 	.word	0x3c971547
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	3fe62e43 	.word	0x3fe62e43
 800c0d0:	fefa39ef 	.word	0xfefa39ef
 800c0d4:	3fe62e42 	.word	0x3fe62e42
 800c0d8:	0ca86c39 	.word	0x0ca86c39
 800c0dc:	be205c61 	.word	0xbe205c61
 800c0e0:	72bea4d0 	.word	0x72bea4d0
 800c0e4:	3e663769 	.word	0x3e663769
 800c0e8:	c5d26bf1 	.word	0xc5d26bf1
 800c0ec:	3ebbbd41 	.word	0x3ebbbd41
 800c0f0:	af25de2c 	.word	0xaf25de2c
 800c0f4:	3f11566a 	.word	0x3f11566a
 800c0f8:	16bebd93 	.word	0x16bebd93
 800c0fc:	3f66c16c 	.word	0x3f66c16c
 800c100:	5555553e 	.word	0x5555553e
 800c104:	3fc55555 	.word	0x3fc55555
 800c108:	3fe00000 	.word	0x3fe00000
 800c10c:	fff00000 	.word	0xfff00000
 800c110:	3ff00000 	.word	0x3ff00000
 800c114:	4090cbff 	.word	0x4090cbff
 800c118:	3f6f3400 	.word	0x3f6f3400

0800c11c <fabs>:
 800c11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c120:	4619      	mov	r1, r3
 800c122:	4770      	bx	lr
 800c124:	0000      	movs	r0, r0
	...

0800c128 <scalbn>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	4616      	mov	r6, r2
 800c12c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c130:	4604      	mov	r4, r0
 800c132:	460d      	mov	r5, r1
 800c134:	460b      	mov	r3, r1
 800c136:	b992      	cbnz	r2, 800c15e <scalbn+0x36>
 800c138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c13c:	4303      	orrs	r3, r0
 800c13e:	d03c      	beq.n	800c1ba <scalbn+0x92>
 800c140:	4b31      	ldr	r3, [pc, #196]	; (800c208 <scalbn+0xe0>)
 800c142:	2200      	movs	r2, #0
 800c144:	f7f4 f9e2 	bl	800050c <__aeabi_dmul>
 800c148:	4b30      	ldr	r3, [pc, #192]	; (800c20c <scalbn+0xe4>)
 800c14a:	4604      	mov	r4, r0
 800c14c:	429e      	cmp	r6, r3
 800c14e:	460d      	mov	r5, r1
 800c150:	da0f      	bge.n	800c172 <scalbn+0x4a>
 800c152:	a329      	add	r3, pc, #164	; (adr r3, 800c1f8 <scalbn+0xd0>)
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	f7f4 f9d8 	bl	800050c <__aeabi_dmul>
 800c15c:	e006      	b.n	800c16c <scalbn+0x44>
 800c15e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c162:	42ba      	cmp	r2, r7
 800c164:	d109      	bne.n	800c17a <scalbn+0x52>
 800c166:	4602      	mov	r2, r0
 800c168:	f7f4 f81a 	bl	80001a0 <__adddf3>
 800c16c:	4604      	mov	r4, r0
 800c16e:	460d      	mov	r5, r1
 800c170:	e023      	b.n	800c1ba <scalbn+0x92>
 800c172:	460b      	mov	r3, r1
 800c174:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c178:	3a36      	subs	r2, #54	; 0x36
 800c17a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c17e:	428e      	cmp	r6, r1
 800c180:	dd0e      	ble.n	800c1a0 <scalbn+0x78>
 800c182:	a31f      	add	r3, pc, #124	; (adr r3, 800c200 <scalbn+0xd8>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c18c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c190:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c194:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c198:	481d      	ldr	r0, [pc, #116]	; (800c210 <scalbn+0xe8>)
 800c19a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c19e:	e7db      	b.n	800c158 <scalbn+0x30>
 800c1a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1a4:	4432      	add	r2, r6
 800c1a6:	428a      	cmp	r2, r1
 800c1a8:	dceb      	bgt.n	800c182 <scalbn+0x5a>
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	dd08      	ble.n	800c1c0 <scalbn+0x98>
 800c1ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1b6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c1c4:	da0c      	bge.n	800c1e0 <scalbn+0xb8>
 800c1c6:	a30c      	add	r3, pc, #48	; (adr r3, 800c1f8 <scalbn+0xd0>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c1d0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c1d4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c1d8:	480e      	ldr	r0, [pc, #56]	; (800c214 <scalbn+0xec>)
 800c1da:	f041 011f 	orr.w	r1, r1, #31
 800c1de:	e7bb      	b.n	800c158 <scalbn+0x30>
 800c1e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1e4:	3236      	adds	r2, #54	; 0x36
 800c1e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b08      	ldr	r3, [pc, #32]	; (800c218 <scalbn+0xf0>)
 800c1f6:	e7af      	b.n	800c158 <scalbn+0x30>
 800c1f8:	c2f8f359 	.word	0xc2f8f359
 800c1fc:	01a56e1f 	.word	0x01a56e1f
 800c200:	8800759c 	.word	0x8800759c
 800c204:	7e37e43c 	.word	0x7e37e43c
 800c208:	43500000 	.word	0x43500000
 800c20c:	ffff3cb0 	.word	0xffff3cb0
 800c210:	8800759c 	.word	0x8800759c
 800c214:	c2f8f359 	.word	0xc2f8f359
 800c218:	3c900000 	.word	0x3c900000

0800c21c <with_errno>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	4616      	mov	r6, r2
 800c224:	f7fc fd88 	bl	8008d38 <__errno>
 800c228:	4629      	mov	r1, r5
 800c22a:	6006      	str	r6, [r0, #0]
 800c22c:	4620      	mov	r0, r4
 800c22e:	bd70      	pop	{r4, r5, r6, pc}

0800c230 <xflow>:
 800c230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c232:	4615      	mov	r5, r2
 800c234:	461c      	mov	r4, r3
 800c236:	b180      	cbz	r0, 800c25a <xflow+0x2a>
 800c238:	4610      	mov	r0, r2
 800c23a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c23e:	e9cd 0100 	strd	r0, r1, [sp]
 800c242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c246:	4628      	mov	r0, r5
 800c248:	4621      	mov	r1, r4
 800c24a:	f7f4 f95f 	bl	800050c <__aeabi_dmul>
 800c24e:	2222      	movs	r2, #34	; 0x22
 800c250:	b003      	add	sp, #12
 800c252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c256:	f7ff bfe1 	b.w	800c21c <with_errno>
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	e7ee      	b.n	800c23e <xflow+0xe>

0800c260 <__math_uflow>:
 800c260:	2200      	movs	r2, #0
 800c262:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c266:	f7ff bfe3 	b.w	800c230 <xflow>

0800c26a <__math_oflow>:
 800c26a:	2200      	movs	r2, #0
 800c26c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c270:	f7ff bfde 	b.w	800c230 <xflow>

0800c274 <__ieee754_sqrt>:
 800c274:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800c418 <__ieee754_sqrt+0x1a4>
 800c278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	ea3c 0c01 	bics.w	ip, ip, r1
 800c280:	460b      	mov	r3, r1
 800c282:	4606      	mov	r6, r0
 800c284:	460d      	mov	r5, r1
 800c286:	460a      	mov	r2, r1
 800c288:	4604      	mov	r4, r0
 800c28a:	d10e      	bne.n	800c2aa <__ieee754_sqrt+0x36>
 800c28c:	4602      	mov	r2, r0
 800c28e:	f7f4 f93d 	bl	800050c <__aeabi_dmul>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4630      	mov	r0, r6
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f3 ff81 	bl	80001a0 <__adddf3>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460d      	mov	r5, r1
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	2900      	cmp	r1, #0
 800c2ac:	dc0d      	bgt.n	800c2ca <__ieee754_sqrt+0x56>
 800c2ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c2b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c2b6:	d0f4      	beq.n	800c2a2 <__ieee754_sqrt+0x2e>
 800c2b8:	b139      	cbz	r1, 800c2ca <__ieee754_sqrt+0x56>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	f7f3 ff6e 	bl	800019c <__aeabi_dsub>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	f7f4 fa4c 	bl	8000760 <__aeabi_ddiv>
 800c2c8:	e7e9      	b.n	800c29e <__ieee754_sqrt+0x2a>
 800c2ca:	1512      	asrs	r2, r2, #20
 800c2cc:	f000 8089 	beq.w	800c3e2 <__ieee754_sqrt+0x16e>
 800c2d0:	2500      	movs	r5, #0
 800c2d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c2da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2de:	07d2      	lsls	r2, r2, #31
 800c2e0:	bf5c      	itt	pl
 800c2e2:	005b      	lslpl	r3, r3, #1
 800c2e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c2e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2ec:	bf58      	it	pl
 800c2ee:	0064      	lslpl	r4, r4, #1
 800c2f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c2f4:	0062      	lsls	r2, r4, #1
 800c2f6:	2016      	movs	r0, #22
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800c2fe:	1076      	asrs	r6, r6, #1
 800c300:	190f      	adds	r7, r1, r4
 800c302:	429f      	cmp	r7, r3
 800c304:	bfde      	ittt	le
 800c306:	1bdb      	suble	r3, r3, r7
 800c308:	1939      	addle	r1, r7, r4
 800c30a:	192d      	addle	r5, r5, r4
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	3801      	subs	r0, #1
 800c310:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c314:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c318:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c31c:	d1f0      	bne.n	800c300 <__ieee754_sqrt+0x8c>
 800c31e:	4604      	mov	r4, r0
 800c320:	2720      	movs	r7, #32
 800c322:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c326:	428b      	cmp	r3, r1
 800c328:	eb0c 0e00 	add.w	lr, ip, r0
 800c32c:	dc02      	bgt.n	800c334 <__ieee754_sqrt+0xc0>
 800c32e:	d113      	bne.n	800c358 <__ieee754_sqrt+0xe4>
 800c330:	4596      	cmp	lr, r2
 800c332:	d811      	bhi.n	800c358 <__ieee754_sqrt+0xe4>
 800c334:	f1be 0f00 	cmp.w	lr, #0
 800c338:	eb0e 000c 	add.w	r0, lr, ip
 800c33c:	da56      	bge.n	800c3ec <__ieee754_sqrt+0x178>
 800c33e:	2800      	cmp	r0, #0
 800c340:	db54      	blt.n	800c3ec <__ieee754_sqrt+0x178>
 800c342:	f101 0801 	add.w	r8, r1, #1
 800c346:	1a5b      	subs	r3, r3, r1
 800c348:	4641      	mov	r1, r8
 800c34a:	4596      	cmp	lr, r2
 800c34c:	bf88      	it	hi
 800c34e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c352:	eba2 020e 	sub.w	r2, r2, lr
 800c356:	4464      	add	r4, ip
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	3f01      	subs	r7, #1
 800c35c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c360:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c364:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c368:	d1dd      	bne.n	800c326 <__ieee754_sqrt+0xb2>
 800c36a:	4313      	orrs	r3, r2
 800c36c:	d01b      	beq.n	800c3a6 <__ieee754_sqrt+0x132>
 800c36e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c41c <__ieee754_sqrt+0x1a8>
 800c372:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c420 <__ieee754_sqrt+0x1ac>
 800c376:	e9da 0100 	ldrd	r0, r1, [sl]
 800c37a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c37e:	f7f3 ff0d 	bl	800019c <__aeabi_dsub>
 800c382:	e9da 8900 	ldrd	r8, r9, [sl]
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4640      	mov	r0, r8
 800c38c:	4649      	mov	r1, r9
 800c38e:	f7f4 fb39 	bl	8000a04 <__aeabi_dcmple>
 800c392:	b140      	cbz	r0, 800c3a6 <__ieee754_sqrt+0x132>
 800c394:	e9da 0100 	ldrd	r0, r1, [sl]
 800c398:	e9db 2300 	ldrd	r2, r3, [fp]
 800c39c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c3a0:	d126      	bne.n	800c3f0 <__ieee754_sqrt+0x17c>
 800c3a2:	463c      	mov	r4, r7
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	106b      	asrs	r3, r5, #1
 800c3a8:	0864      	lsrs	r4, r4, #1
 800c3aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c3ae:	07ea      	lsls	r2, r5, #31
 800c3b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c3b4:	bf48      	it	mi
 800c3b6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c3c0:	e76d      	b.n	800c29e <__ieee754_sqrt+0x2a>
 800c3c2:	0ae3      	lsrs	r3, r4, #11
 800c3c4:	3915      	subs	r1, #21
 800c3c6:	0564      	lsls	r4, r4, #21
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0fa      	beq.n	800c3c2 <__ieee754_sqrt+0x14e>
 800c3cc:	02d8      	lsls	r0, r3, #11
 800c3ce:	d50a      	bpl.n	800c3e6 <__ieee754_sqrt+0x172>
 800c3d0:	f1c2 0020 	rsb	r0, r2, #32
 800c3d4:	fa24 f000 	lsr.w	r0, r4, r0
 800c3d8:	1e55      	subs	r5, r2, #1
 800c3da:	4094      	lsls	r4, r2
 800c3dc:	4303      	orrs	r3, r0
 800c3de:	1b4a      	subs	r2, r1, r5
 800c3e0:	e776      	b.n	800c2d0 <__ieee754_sqrt+0x5c>
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	e7f0      	b.n	800c3c8 <__ieee754_sqrt+0x154>
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	3201      	adds	r2, #1
 800c3ea:	e7ef      	b.n	800c3cc <__ieee754_sqrt+0x158>
 800c3ec:	4688      	mov	r8, r1
 800c3ee:	e7aa      	b.n	800c346 <__ieee754_sqrt+0xd2>
 800c3f0:	f7f3 fed6 	bl	80001a0 <__adddf3>
 800c3f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f4 faf6 	bl	80009f0 <__aeabi_dcmplt>
 800c404:	b120      	cbz	r0, 800c410 <__ieee754_sqrt+0x19c>
 800c406:	1ca1      	adds	r1, r4, #2
 800c408:	bf08      	it	eq
 800c40a:	3501      	addeq	r5, #1
 800c40c:	3402      	adds	r4, #2
 800c40e:	e7ca      	b.n	800c3a6 <__ieee754_sqrt+0x132>
 800c410:	3401      	adds	r4, #1
 800c412:	f024 0401 	bic.w	r4, r4, #1
 800c416:	e7c6      	b.n	800c3a6 <__ieee754_sqrt+0x132>
 800c418:	7ff00000 	.word	0x7ff00000
 800c41c:	20000590 	.word	0x20000590
 800c420:	20000598 	.word	0x20000598

0800c424 <_init>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	bf00      	nop
 800c428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42a:	bc08      	pop	{r3}
 800c42c:	469e      	mov	lr, r3
 800c42e:	4770      	bx	lr

0800c430 <_fini>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr
